
vtrModbusTCP-H723ZG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000296b0  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000119a8  08029980  08029980  0002a980  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0803b328  0803b328  0003c328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0803b330  0803b330  0003c330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0803b334  0803b334  0003c334  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000f78  24000000  0803b338  0003d000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  7 .RxDescripSection 00000060  24000f78  0803c2b0  0003df78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDescripSection 00000060  24000fd8  0803c310  0003dfd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000483c  24001038  0803c370  0003e038  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  24005874  0803c370  0003e874  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0003e038  2**0
                  CONTENTS, READONLY
 12 .debug_info   000303e3  00000000  00000000  0003e066  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003936  00000000  00000000  0006e449  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002448  00000000  00000000  00071d80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001e32  00000000  00000000  000741c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00034f29  00000000  00000000  00075ffa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002b09d  00000000  00000000  000aaf23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00157030  00000000  00000000  000d5fc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0022cff0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b9e8  00000000  00000000  0022d034  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  00238a1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24001038 	.word	0x24001038
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08029954 	.word	0x08029954

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2400103c 	.word	0x2400103c
 800030c:	08029954 	.word	0x08029954

08000310 <strcmp>:
 8000310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000318:	2a01      	cmp	r2, #1
 800031a:	bf28      	it	cs
 800031c:	429a      	cmpcs	r2, r3
 800031e:	d0f7      	beq.n	8000310 <strcmp>
 8000320:	1ad0      	subs	r0, r2, r3
 8000322:	4770      	bx	lr
	...

08000330 <memchr>:
 8000330:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000334:	2a10      	cmp	r2, #16
 8000336:	db2b      	blt.n	8000390 <memchr+0x60>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	d008      	beq.n	8000350 <memchr+0x20>
 800033e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000342:	3a01      	subs	r2, #1
 8000344:	428b      	cmp	r3, r1
 8000346:	d02d      	beq.n	80003a4 <memchr+0x74>
 8000348:	f010 0f07 	tst.w	r0, #7
 800034c:	b342      	cbz	r2, 80003a0 <memchr+0x70>
 800034e:	d1f6      	bne.n	800033e <memchr+0xe>
 8000350:	b4f0      	push	{r4, r5, r6, r7}
 8000352:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000356:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800035a:	f022 0407 	bic.w	r4, r2, #7
 800035e:	f07f 0700 	mvns.w	r7, #0
 8000362:	2300      	movs	r3, #0
 8000364:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000368:	3c08      	subs	r4, #8
 800036a:	ea85 0501 	eor.w	r5, r5, r1
 800036e:	ea86 0601 	eor.w	r6, r6, r1
 8000372:	fa85 f547 	uadd8	r5, r5, r7
 8000376:	faa3 f587 	sel	r5, r3, r7
 800037a:	fa86 f647 	uadd8	r6, r6, r7
 800037e:	faa5 f687 	sel	r6, r5, r7
 8000382:	b98e      	cbnz	r6, 80003a8 <memchr+0x78>
 8000384:	d1ee      	bne.n	8000364 <memchr+0x34>
 8000386:	bcf0      	pop	{r4, r5, r6, r7}
 8000388:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800038c:	f002 0207 	and.w	r2, r2, #7
 8000390:	b132      	cbz	r2, 80003a0 <memchr+0x70>
 8000392:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000396:	3a01      	subs	r2, #1
 8000398:	ea83 0301 	eor.w	r3, r3, r1
 800039c:	b113      	cbz	r3, 80003a4 <memchr+0x74>
 800039e:	d1f8      	bne.n	8000392 <memchr+0x62>
 80003a0:	2000      	movs	r0, #0
 80003a2:	4770      	bx	lr
 80003a4:	3801      	subs	r0, #1
 80003a6:	4770      	bx	lr
 80003a8:	2d00      	cmp	r5, #0
 80003aa:	bf06      	itte	eq
 80003ac:	4635      	moveq	r5, r6
 80003ae:	3803      	subeq	r0, #3
 80003b0:	3807      	subne	r0, #7
 80003b2:	f015 0f01 	tst.w	r5, #1
 80003b6:	d107      	bne.n	80003c8 <memchr+0x98>
 80003b8:	3001      	adds	r0, #1
 80003ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003be:	bf02      	ittt	eq
 80003c0:	3001      	addeq	r0, #1
 80003c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003c6:	3001      	addeq	r0, #1
 80003c8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ca:	3801      	subs	r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop

080003d0 <strlen>:
 80003d0:	4603      	mov	r3, r0
 80003d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003d6:	2a00      	cmp	r2, #0
 80003d8:	d1fb      	bne.n	80003d2 <strlen+0x2>
 80003da:	1a18      	subs	r0, r3, r0
 80003dc:	3801      	subs	r0, #1
 80003de:	4770      	bx	lr

080003e0 <__aeabi_drsub>:
 80003e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003e4:	e002      	b.n	80003ec <__adddf3>
 80003e6:	bf00      	nop

080003e8 <__aeabi_dsub>:
 80003e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003ec <__adddf3>:
 80003ec:	b530      	push	{r4, r5, lr}
 80003ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	bf1f      	itttt	ne
 8000402:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000406:	ea55 0c02 	orrsne.w	ip, r5, r2
 800040a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800040e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000412:	f000 80e2 	beq.w	80005da <__adddf3+0x1ee>
 8000416:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800041a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800041e:	bfb8      	it	lt
 8000420:	426d      	neglt	r5, r5
 8000422:	dd0c      	ble.n	800043e <__adddf3+0x52>
 8000424:	442c      	add	r4, r5
 8000426:	ea80 0202 	eor.w	r2, r0, r2
 800042a:	ea81 0303 	eor.w	r3, r1, r3
 800042e:	ea82 0000 	eor.w	r0, r2, r0
 8000432:	ea83 0101 	eor.w	r1, r3, r1
 8000436:	ea80 0202 	eor.w	r2, r0, r2
 800043a:	ea81 0303 	eor.w	r3, r1, r3
 800043e:	2d36      	cmp	r5, #54	@ 0x36
 8000440:	bf88      	it	hi
 8000442:	bd30      	pophi	{r4, r5, pc}
 8000444:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000448:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800044c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000450:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000454:	d002      	beq.n	800045c <__adddf3+0x70>
 8000456:	4240      	negs	r0, r0
 8000458:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800045c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000460:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000464:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000468:	d002      	beq.n	8000470 <__adddf3+0x84>
 800046a:	4252      	negs	r2, r2
 800046c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000470:	ea94 0f05 	teq	r4, r5
 8000474:	f000 80a7 	beq.w	80005c6 <__adddf3+0x1da>
 8000478:	f1a4 0401 	sub.w	r4, r4, #1
 800047c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000480:	db0d      	blt.n	800049e <__adddf3+0xb2>
 8000482:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000486:	fa22 f205 	lsr.w	r2, r2, r5
 800048a:	1880      	adds	r0, r0, r2
 800048c:	f141 0100 	adc.w	r1, r1, #0
 8000490:	fa03 f20e 	lsl.w	r2, r3, lr
 8000494:	1880      	adds	r0, r0, r2
 8000496:	fa43 f305 	asr.w	r3, r3, r5
 800049a:	4159      	adcs	r1, r3
 800049c:	e00e      	b.n	80004bc <__adddf3+0xd0>
 800049e:	f1a5 0520 	sub.w	r5, r5, #32
 80004a2:	f10e 0e20 	add.w	lr, lr, #32
 80004a6:	2a01      	cmp	r2, #1
 80004a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004ac:	bf28      	it	cs
 80004ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004b2:	fa43 f305 	asr.w	r3, r3, r5
 80004b6:	18c0      	adds	r0, r0, r3
 80004b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004c0:	d507      	bpl.n	80004d2 <__adddf3+0xe6>
 80004c2:	f04f 0e00 	mov.w	lr, #0
 80004c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80004ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80004d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004d6:	d31b      	bcc.n	8000510 <__adddf3+0x124>
 80004d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004dc:	d30c      	bcc.n	80004f8 <__adddf3+0x10c>
 80004de:	0849      	lsrs	r1, r1, #1
 80004e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004e8:	f104 0401 	add.w	r4, r4, #1
 80004ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004f4:	f080 809a 	bcs.w	800062c <__adddf3+0x240>
 80004f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004fc:	bf08      	it	eq
 80004fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000502:	f150 0000 	adcs.w	r0, r0, #0
 8000506:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800050a:	ea41 0105 	orr.w	r1, r1, r5
 800050e:	bd30      	pop	{r4, r5, pc}
 8000510:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000514:	4140      	adcs	r0, r0
 8000516:	eb41 0101 	adc.w	r1, r1, r1
 800051a:	3c01      	subs	r4, #1
 800051c:	bf28      	it	cs
 800051e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000522:	d2e9      	bcs.n	80004f8 <__adddf3+0x10c>
 8000524:	f091 0f00 	teq	r1, #0
 8000528:	bf04      	itt	eq
 800052a:	4601      	moveq	r1, r0
 800052c:	2000      	moveq	r0, #0
 800052e:	fab1 f381 	clz	r3, r1
 8000532:	bf08      	it	eq
 8000534:	3320      	addeq	r3, #32
 8000536:	f1a3 030b 	sub.w	r3, r3, #11
 800053a:	f1b3 0220 	subs.w	r2, r3, #32
 800053e:	da0c      	bge.n	800055a <__adddf3+0x16e>
 8000540:	320c      	adds	r2, #12
 8000542:	dd08      	ble.n	8000556 <__adddf3+0x16a>
 8000544:	f102 0c14 	add.w	ip, r2, #20
 8000548:	f1c2 020c 	rsb	r2, r2, #12
 800054c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000550:	fa21 f102 	lsr.w	r1, r1, r2
 8000554:	e00c      	b.n	8000570 <__adddf3+0x184>
 8000556:	f102 0214 	add.w	r2, r2, #20
 800055a:	bfd8      	it	le
 800055c:	f1c2 0c20 	rsble	ip, r2, #32
 8000560:	fa01 f102 	lsl.w	r1, r1, r2
 8000564:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000568:	bfdc      	itt	le
 800056a:	ea41 010c 	orrle.w	r1, r1, ip
 800056e:	4090      	lslle	r0, r2
 8000570:	1ae4      	subs	r4, r4, r3
 8000572:	bfa2      	ittt	ge
 8000574:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000578:	4329      	orrge	r1, r5
 800057a:	bd30      	popge	{r4, r5, pc}
 800057c:	ea6f 0404 	mvn.w	r4, r4
 8000580:	3c1f      	subs	r4, #31
 8000582:	da1c      	bge.n	80005be <__adddf3+0x1d2>
 8000584:	340c      	adds	r4, #12
 8000586:	dc0e      	bgt.n	80005a6 <__adddf3+0x1ba>
 8000588:	f104 0414 	add.w	r4, r4, #20
 800058c:	f1c4 0220 	rsb	r2, r4, #32
 8000590:	fa20 f004 	lsr.w	r0, r0, r4
 8000594:	fa01 f302 	lsl.w	r3, r1, r2
 8000598:	ea40 0003 	orr.w	r0, r0, r3
 800059c:	fa21 f304 	lsr.w	r3, r1, r4
 80005a0:	ea45 0103 	orr.w	r1, r5, r3
 80005a4:	bd30      	pop	{r4, r5, pc}
 80005a6:	f1c4 040c 	rsb	r4, r4, #12
 80005aa:	f1c4 0220 	rsb	r2, r4, #32
 80005ae:	fa20 f002 	lsr.w	r0, r0, r2
 80005b2:	fa01 f304 	lsl.w	r3, r1, r4
 80005b6:	ea40 0003 	orr.w	r0, r0, r3
 80005ba:	4629      	mov	r1, r5
 80005bc:	bd30      	pop	{r4, r5, pc}
 80005be:	fa21 f004 	lsr.w	r0, r1, r4
 80005c2:	4629      	mov	r1, r5
 80005c4:	bd30      	pop	{r4, r5, pc}
 80005c6:	f094 0f00 	teq	r4, #0
 80005ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80005ce:	bf06      	itte	eq
 80005d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005d4:	3401      	addeq	r4, #1
 80005d6:	3d01      	subne	r5, #1
 80005d8:	e74e      	b.n	8000478 <__adddf3+0x8c>
 80005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005de:	bf18      	it	ne
 80005e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005e4:	d029      	beq.n	800063a <__adddf3+0x24e>
 80005e6:	ea94 0f05 	teq	r4, r5
 80005ea:	bf08      	it	eq
 80005ec:	ea90 0f02 	teqeq	r0, r2
 80005f0:	d005      	beq.n	80005fe <__adddf3+0x212>
 80005f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005f6:	bf04      	itt	eq
 80005f8:	4619      	moveq	r1, r3
 80005fa:	4610      	moveq	r0, r2
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea91 0f03 	teq	r1, r3
 8000602:	bf1e      	ittt	ne
 8000604:	2100      	movne	r1, #0
 8000606:	2000      	movne	r0, #0
 8000608:	bd30      	popne	{r4, r5, pc}
 800060a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800060e:	d105      	bne.n	800061c <__adddf3+0x230>
 8000610:	0040      	lsls	r0, r0, #1
 8000612:	4149      	adcs	r1, r1
 8000614:	bf28      	it	cs
 8000616:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800061a:	bd30      	pop	{r4, r5, pc}
 800061c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000620:	bf3c      	itt	cc
 8000622:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000626:	bd30      	popcc	{r4, r5, pc}
 8000628:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800062c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000630:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000634:	f04f 0000 	mov.w	r0, #0
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800063e:	bf1a      	itte	ne
 8000640:	4619      	movne	r1, r3
 8000642:	4610      	movne	r0, r2
 8000644:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000648:	bf1c      	itt	ne
 800064a:	460b      	movne	r3, r1
 800064c:	4602      	movne	r2, r0
 800064e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000652:	bf06      	itte	eq
 8000654:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000658:	ea91 0f03 	teqeq	r1, r3
 800065c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	bf00      	nop

08000664 <__aeabi_ui2d>:
 8000664:	f090 0f00 	teq	r0, #0
 8000668:	bf04      	itt	eq
 800066a:	2100      	moveq	r1, #0
 800066c:	4770      	bxeq	lr
 800066e:	b530      	push	{r4, r5, lr}
 8000670:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000674:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000678:	f04f 0500 	mov.w	r5, #0
 800067c:	f04f 0100 	mov.w	r1, #0
 8000680:	e750      	b.n	8000524 <__adddf3+0x138>
 8000682:	bf00      	nop

08000684 <__aeabi_i2d>:
 8000684:	f090 0f00 	teq	r0, #0
 8000688:	bf04      	itt	eq
 800068a:	2100      	moveq	r1, #0
 800068c:	4770      	bxeq	lr
 800068e:	b530      	push	{r4, r5, lr}
 8000690:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000694:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000698:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800069c:	bf48      	it	mi
 800069e:	4240      	negmi	r0, r0
 80006a0:	f04f 0100 	mov.w	r1, #0
 80006a4:	e73e      	b.n	8000524 <__adddf3+0x138>
 80006a6:	bf00      	nop

080006a8 <__aeabi_f2d>:
 80006a8:	0042      	lsls	r2, r0, #1
 80006aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80006b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006b6:	bf1f      	itttt	ne
 80006b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80006bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80006c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80006c4:	4770      	bxne	lr
 80006c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80006ca:	bf08      	it	eq
 80006cc:	4770      	bxeq	lr
 80006ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006d2:	bf04      	itt	eq
 80006d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006d8:	4770      	bxeq	lr
 80006da:	b530      	push	{r4, r5, lr}
 80006dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006e8:	e71c      	b.n	8000524 <__adddf3+0x138>
 80006ea:	bf00      	nop

080006ec <__aeabi_ul2d>:
 80006ec:	ea50 0201 	orrs.w	r2, r0, r1
 80006f0:	bf08      	it	eq
 80006f2:	4770      	bxeq	lr
 80006f4:	b530      	push	{r4, r5, lr}
 80006f6:	f04f 0500 	mov.w	r5, #0
 80006fa:	e00a      	b.n	8000712 <__aeabi_l2d+0x16>

080006fc <__aeabi_l2d>:
 80006fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000700:	bf08      	it	eq
 8000702:	4770      	bxeq	lr
 8000704:	b530      	push	{r4, r5, lr}
 8000706:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800070a:	d502      	bpl.n	8000712 <__aeabi_l2d+0x16>
 800070c:	4240      	negs	r0, r0
 800070e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000712:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000716:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800071a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800071e:	f43f aed8 	beq.w	80004d2 <__adddf3+0xe6>
 8000722:	f04f 0203 	mov.w	r2, #3
 8000726:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800072a:	bf18      	it	ne
 800072c:	3203      	addne	r2, #3
 800072e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000732:	bf18      	it	ne
 8000734:	3203      	addne	r2, #3
 8000736:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800073a:	f1c2 0320 	rsb	r3, r2, #32
 800073e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000742:	fa20 f002 	lsr.w	r0, r0, r2
 8000746:	fa01 fe03 	lsl.w	lr, r1, r3
 800074a:	ea40 000e 	orr.w	r0, r0, lr
 800074e:	fa21 f102 	lsr.w	r1, r1, r2
 8000752:	4414      	add	r4, r2
 8000754:	e6bd      	b.n	80004d2 <__adddf3+0xe6>
 8000756:	bf00      	nop

08000758 <__aeabi_uldivmod>:
 8000758:	b953      	cbnz	r3, 8000770 <__aeabi_uldivmod+0x18>
 800075a:	b94a      	cbnz	r2, 8000770 <__aeabi_uldivmod+0x18>
 800075c:	2900      	cmp	r1, #0
 800075e:	bf08      	it	eq
 8000760:	2800      	cmpeq	r0, #0
 8000762:	bf1c      	itt	ne
 8000764:	f04f 31ff 	movne.w	r1, #4294967295
 8000768:	f04f 30ff 	movne.w	r0, #4294967295
 800076c:	f000 b9c0 	b.w	8000af0 <__aeabi_idiv0>
 8000770:	f1ad 0c08 	sub.w	ip, sp, #8
 8000774:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000778:	f000 f83e 	bl	80007f8 <__udivmoddi4>
 800077c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000780:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000784:	b004      	add	sp, #16
 8000786:	4770      	bx	lr

08000788 <__aeabi_d2lz>:
 8000788:	b508      	push	{r3, lr}
 800078a:	4602      	mov	r2, r0
 800078c:	460b      	mov	r3, r1
 800078e:	ec43 2b17 	vmov	d7, r2, r3
 8000792:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800079a:	d403      	bmi.n	80007a4 <__aeabi_d2lz+0x1c>
 800079c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80007a0:	f000 b80a 	b.w	80007b8 <__aeabi_d2ulz>
 80007a4:	eeb1 7b47 	vneg.f64	d7, d7
 80007a8:	ec51 0b17 	vmov	r0, r1, d7
 80007ac:	f000 f804 	bl	80007b8 <__aeabi_d2ulz>
 80007b0:	4240      	negs	r0, r0
 80007b2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007b6:	bd08      	pop	{r3, pc}

080007b8 <__aeabi_d2ulz>:
 80007b8:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 80007e8 <__aeabi_d2ulz+0x30>
 80007bc:	ec41 0b17 	vmov	d7, r0, r1
 80007c0:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007f0 <__aeabi_d2ulz+0x38>
 80007c4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80007c8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80007cc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007d0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007d4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007d8:	ee16 1a10 	vmov	r1, s12
 80007dc:	ee17 0a90 	vmov	r0, s15
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	f3af 8000 	nop.w
 80007e8:	00000000 	.word	0x00000000
 80007ec:	3df00000 	.word	0x3df00000
 80007f0:	00000000 	.word	0x00000000
 80007f4:	41f00000 	.word	0x41f00000

080007f8 <__udivmoddi4>:
 80007f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007fc:	9d08      	ldr	r5, [sp, #32]
 80007fe:	468e      	mov	lr, r1
 8000800:	4604      	mov	r4, r0
 8000802:	4688      	mov	r8, r1
 8000804:	2b00      	cmp	r3, #0
 8000806:	d14a      	bne.n	800089e <__udivmoddi4+0xa6>
 8000808:	428a      	cmp	r2, r1
 800080a:	4617      	mov	r7, r2
 800080c:	d962      	bls.n	80008d4 <__udivmoddi4+0xdc>
 800080e:	fab2 f682 	clz	r6, r2
 8000812:	b14e      	cbz	r6, 8000828 <__udivmoddi4+0x30>
 8000814:	f1c6 0320 	rsb	r3, r6, #32
 8000818:	fa01 f806 	lsl.w	r8, r1, r6
 800081c:	fa20 f303 	lsr.w	r3, r0, r3
 8000820:	40b7      	lsls	r7, r6
 8000822:	ea43 0808 	orr.w	r8, r3, r8
 8000826:	40b4      	lsls	r4, r6
 8000828:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800082c:	fa1f fc87 	uxth.w	ip, r7
 8000830:	fbb8 f1fe 	udiv	r1, r8, lr
 8000834:	0c23      	lsrs	r3, r4, #16
 8000836:	fb0e 8811 	mls	r8, lr, r1, r8
 800083a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800083e:	fb01 f20c 	mul.w	r2, r1, ip
 8000842:	429a      	cmp	r2, r3
 8000844:	d909      	bls.n	800085a <__udivmoddi4+0x62>
 8000846:	18fb      	adds	r3, r7, r3
 8000848:	f101 30ff 	add.w	r0, r1, #4294967295
 800084c:	f080 80ea 	bcs.w	8000a24 <__udivmoddi4+0x22c>
 8000850:	429a      	cmp	r2, r3
 8000852:	f240 80e7 	bls.w	8000a24 <__udivmoddi4+0x22c>
 8000856:	3902      	subs	r1, #2
 8000858:	443b      	add	r3, r7
 800085a:	1a9a      	subs	r2, r3, r2
 800085c:	b2a3      	uxth	r3, r4
 800085e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000862:	fb0e 2210 	mls	r2, lr, r0, r2
 8000866:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800086a:	fb00 fc0c 	mul.w	ip, r0, ip
 800086e:	459c      	cmp	ip, r3
 8000870:	d909      	bls.n	8000886 <__udivmoddi4+0x8e>
 8000872:	18fb      	adds	r3, r7, r3
 8000874:	f100 32ff 	add.w	r2, r0, #4294967295
 8000878:	f080 80d6 	bcs.w	8000a28 <__udivmoddi4+0x230>
 800087c:	459c      	cmp	ip, r3
 800087e:	f240 80d3 	bls.w	8000a28 <__udivmoddi4+0x230>
 8000882:	443b      	add	r3, r7
 8000884:	3802      	subs	r0, #2
 8000886:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800088a:	eba3 030c 	sub.w	r3, r3, ip
 800088e:	2100      	movs	r1, #0
 8000890:	b11d      	cbz	r5, 800089a <__udivmoddi4+0xa2>
 8000892:	40f3      	lsrs	r3, r6
 8000894:	2200      	movs	r2, #0
 8000896:	e9c5 3200 	strd	r3, r2, [r5]
 800089a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800089e:	428b      	cmp	r3, r1
 80008a0:	d905      	bls.n	80008ae <__udivmoddi4+0xb6>
 80008a2:	b10d      	cbz	r5, 80008a8 <__udivmoddi4+0xb0>
 80008a4:	e9c5 0100 	strd	r0, r1, [r5]
 80008a8:	2100      	movs	r1, #0
 80008aa:	4608      	mov	r0, r1
 80008ac:	e7f5      	b.n	800089a <__udivmoddi4+0xa2>
 80008ae:	fab3 f183 	clz	r1, r3
 80008b2:	2900      	cmp	r1, #0
 80008b4:	d146      	bne.n	8000944 <__udivmoddi4+0x14c>
 80008b6:	4573      	cmp	r3, lr
 80008b8:	d302      	bcc.n	80008c0 <__udivmoddi4+0xc8>
 80008ba:	4282      	cmp	r2, r0
 80008bc:	f200 8105 	bhi.w	8000aca <__udivmoddi4+0x2d2>
 80008c0:	1a84      	subs	r4, r0, r2
 80008c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80008c6:	2001      	movs	r0, #1
 80008c8:	4690      	mov	r8, r2
 80008ca:	2d00      	cmp	r5, #0
 80008cc:	d0e5      	beq.n	800089a <__udivmoddi4+0xa2>
 80008ce:	e9c5 4800 	strd	r4, r8, [r5]
 80008d2:	e7e2      	b.n	800089a <__udivmoddi4+0xa2>
 80008d4:	2a00      	cmp	r2, #0
 80008d6:	f000 8090 	beq.w	80009fa <__udivmoddi4+0x202>
 80008da:	fab2 f682 	clz	r6, r2
 80008de:	2e00      	cmp	r6, #0
 80008e0:	f040 80a4 	bne.w	8000a2c <__udivmoddi4+0x234>
 80008e4:	1a8a      	subs	r2, r1, r2
 80008e6:	0c03      	lsrs	r3, r0, #16
 80008e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80008ec:	b280      	uxth	r0, r0
 80008ee:	b2bc      	uxth	r4, r7
 80008f0:	2101      	movs	r1, #1
 80008f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80008f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80008fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80008fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000902:	429a      	cmp	r2, r3
 8000904:	d907      	bls.n	8000916 <__udivmoddi4+0x11e>
 8000906:	18fb      	adds	r3, r7, r3
 8000908:	f10c 38ff 	add.w	r8, ip, #4294967295
 800090c:	d202      	bcs.n	8000914 <__udivmoddi4+0x11c>
 800090e:	429a      	cmp	r2, r3
 8000910:	f200 80e0 	bhi.w	8000ad4 <__udivmoddi4+0x2dc>
 8000914:	46c4      	mov	ip, r8
 8000916:	1a9b      	subs	r3, r3, r2
 8000918:	fbb3 f2fe 	udiv	r2, r3, lr
 800091c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000920:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000924:	fb02 f404 	mul.w	r4, r2, r4
 8000928:	429c      	cmp	r4, r3
 800092a:	d907      	bls.n	800093c <__udivmoddi4+0x144>
 800092c:	18fb      	adds	r3, r7, r3
 800092e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000932:	d202      	bcs.n	800093a <__udivmoddi4+0x142>
 8000934:	429c      	cmp	r4, r3
 8000936:	f200 80ca 	bhi.w	8000ace <__udivmoddi4+0x2d6>
 800093a:	4602      	mov	r2, r0
 800093c:	1b1b      	subs	r3, r3, r4
 800093e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000942:	e7a5      	b.n	8000890 <__udivmoddi4+0x98>
 8000944:	f1c1 0620 	rsb	r6, r1, #32
 8000948:	408b      	lsls	r3, r1
 800094a:	fa22 f706 	lsr.w	r7, r2, r6
 800094e:	431f      	orrs	r7, r3
 8000950:	fa0e f401 	lsl.w	r4, lr, r1
 8000954:	fa20 f306 	lsr.w	r3, r0, r6
 8000958:	fa2e fe06 	lsr.w	lr, lr, r6
 800095c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000960:	4323      	orrs	r3, r4
 8000962:	fa00 f801 	lsl.w	r8, r0, r1
 8000966:	fa1f fc87 	uxth.w	ip, r7
 800096a:	fbbe f0f9 	udiv	r0, lr, r9
 800096e:	0c1c      	lsrs	r4, r3, #16
 8000970:	fb09 ee10 	mls	lr, r9, r0, lr
 8000974:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000978:	fb00 fe0c 	mul.w	lr, r0, ip
 800097c:	45a6      	cmp	lr, r4
 800097e:	fa02 f201 	lsl.w	r2, r2, r1
 8000982:	d909      	bls.n	8000998 <__udivmoddi4+0x1a0>
 8000984:	193c      	adds	r4, r7, r4
 8000986:	f100 3aff 	add.w	sl, r0, #4294967295
 800098a:	f080 809c 	bcs.w	8000ac6 <__udivmoddi4+0x2ce>
 800098e:	45a6      	cmp	lr, r4
 8000990:	f240 8099 	bls.w	8000ac6 <__udivmoddi4+0x2ce>
 8000994:	3802      	subs	r0, #2
 8000996:	443c      	add	r4, r7
 8000998:	eba4 040e 	sub.w	r4, r4, lr
 800099c:	fa1f fe83 	uxth.w	lr, r3
 80009a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80009a4:	fb09 4413 	mls	r4, r9, r3, r4
 80009a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80009ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80009b0:	45a4      	cmp	ip, r4
 80009b2:	d908      	bls.n	80009c6 <__udivmoddi4+0x1ce>
 80009b4:	193c      	adds	r4, r7, r4
 80009b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80009ba:	f080 8082 	bcs.w	8000ac2 <__udivmoddi4+0x2ca>
 80009be:	45a4      	cmp	ip, r4
 80009c0:	d97f      	bls.n	8000ac2 <__udivmoddi4+0x2ca>
 80009c2:	3b02      	subs	r3, #2
 80009c4:	443c      	add	r4, r7
 80009c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80009ca:	eba4 040c 	sub.w	r4, r4, ip
 80009ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80009d2:	4564      	cmp	r4, ip
 80009d4:	4673      	mov	r3, lr
 80009d6:	46e1      	mov	r9, ip
 80009d8:	d362      	bcc.n	8000aa0 <__udivmoddi4+0x2a8>
 80009da:	d05f      	beq.n	8000a9c <__udivmoddi4+0x2a4>
 80009dc:	b15d      	cbz	r5, 80009f6 <__udivmoddi4+0x1fe>
 80009de:	ebb8 0203 	subs.w	r2, r8, r3
 80009e2:	eb64 0409 	sbc.w	r4, r4, r9
 80009e6:	fa04 f606 	lsl.w	r6, r4, r6
 80009ea:	fa22 f301 	lsr.w	r3, r2, r1
 80009ee:	431e      	orrs	r6, r3
 80009f0:	40cc      	lsrs	r4, r1
 80009f2:	e9c5 6400 	strd	r6, r4, [r5]
 80009f6:	2100      	movs	r1, #0
 80009f8:	e74f      	b.n	800089a <__udivmoddi4+0xa2>
 80009fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80009fe:	0c01      	lsrs	r1, r0, #16
 8000a00:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000a04:	b280      	uxth	r0, r0
 8000a06:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000a0a:	463b      	mov	r3, r7
 8000a0c:	4638      	mov	r0, r7
 8000a0e:	463c      	mov	r4, r7
 8000a10:	46b8      	mov	r8, r7
 8000a12:	46be      	mov	lr, r7
 8000a14:	2620      	movs	r6, #32
 8000a16:	fbb1 f1f7 	udiv	r1, r1, r7
 8000a1a:	eba2 0208 	sub.w	r2, r2, r8
 8000a1e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000a22:	e766      	b.n	80008f2 <__udivmoddi4+0xfa>
 8000a24:	4601      	mov	r1, r0
 8000a26:	e718      	b.n	800085a <__udivmoddi4+0x62>
 8000a28:	4610      	mov	r0, r2
 8000a2a:	e72c      	b.n	8000886 <__udivmoddi4+0x8e>
 8000a2c:	f1c6 0220 	rsb	r2, r6, #32
 8000a30:	fa2e f302 	lsr.w	r3, lr, r2
 8000a34:	40b7      	lsls	r7, r6
 8000a36:	40b1      	lsls	r1, r6
 8000a38:	fa20 f202 	lsr.w	r2, r0, r2
 8000a3c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a40:	430a      	orrs	r2, r1
 8000a42:	fbb3 f8fe 	udiv	r8, r3, lr
 8000a46:	b2bc      	uxth	r4, r7
 8000a48:	fb0e 3318 	mls	r3, lr, r8, r3
 8000a4c:	0c11      	lsrs	r1, r2, #16
 8000a4e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a52:	fb08 f904 	mul.w	r9, r8, r4
 8000a56:	40b0      	lsls	r0, r6
 8000a58:	4589      	cmp	r9, r1
 8000a5a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000a5e:	b280      	uxth	r0, r0
 8000a60:	d93e      	bls.n	8000ae0 <__udivmoddi4+0x2e8>
 8000a62:	1879      	adds	r1, r7, r1
 8000a64:	f108 3cff 	add.w	ip, r8, #4294967295
 8000a68:	d201      	bcs.n	8000a6e <__udivmoddi4+0x276>
 8000a6a:	4589      	cmp	r9, r1
 8000a6c:	d81f      	bhi.n	8000aae <__udivmoddi4+0x2b6>
 8000a6e:	eba1 0109 	sub.w	r1, r1, r9
 8000a72:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a76:	fb09 f804 	mul.w	r8, r9, r4
 8000a7a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000a7e:	b292      	uxth	r2, r2
 8000a80:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000a84:	4542      	cmp	r2, r8
 8000a86:	d229      	bcs.n	8000adc <__udivmoddi4+0x2e4>
 8000a88:	18ba      	adds	r2, r7, r2
 8000a8a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000a8e:	d2c4      	bcs.n	8000a1a <__udivmoddi4+0x222>
 8000a90:	4542      	cmp	r2, r8
 8000a92:	d2c2      	bcs.n	8000a1a <__udivmoddi4+0x222>
 8000a94:	f1a9 0102 	sub.w	r1, r9, #2
 8000a98:	443a      	add	r2, r7
 8000a9a:	e7be      	b.n	8000a1a <__udivmoddi4+0x222>
 8000a9c:	45f0      	cmp	r8, lr
 8000a9e:	d29d      	bcs.n	80009dc <__udivmoddi4+0x1e4>
 8000aa0:	ebbe 0302 	subs.w	r3, lr, r2
 8000aa4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000aa8:	3801      	subs	r0, #1
 8000aaa:	46e1      	mov	r9, ip
 8000aac:	e796      	b.n	80009dc <__udivmoddi4+0x1e4>
 8000aae:	eba7 0909 	sub.w	r9, r7, r9
 8000ab2:	4449      	add	r1, r9
 8000ab4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ab8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000abc:	fb09 f804 	mul.w	r8, r9, r4
 8000ac0:	e7db      	b.n	8000a7a <__udivmoddi4+0x282>
 8000ac2:	4673      	mov	r3, lr
 8000ac4:	e77f      	b.n	80009c6 <__udivmoddi4+0x1ce>
 8000ac6:	4650      	mov	r0, sl
 8000ac8:	e766      	b.n	8000998 <__udivmoddi4+0x1a0>
 8000aca:	4608      	mov	r0, r1
 8000acc:	e6fd      	b.n	80008ca <__udivmoddi4+0xd2>
 8000ace:	443b      	add	r3, r7
 8000ad0:	3a02      	subs	r2, #2
 8000ad2:	e733      	b.n	800093c <__udivmoddi4+0x144>
 8000ad4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ad8:	443b      	add	r3, r7
 8000ada:	e71c      	b.n	8000916 <__udivmoddi4+0x11e>
 8000adc:	4649      	mov	r1, r9
 8000ade:	e79c      	b.n	8000a1a <__udivmoddi4+0x222>
 8000ae0:	eba1 0109 	sub.w	r1, r1, r9
 8000ae4:	46c4      	mov	ip, r8
 8000ae6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000aea:	fb09 f804 	mul.w	r8, r9, r4
 8000aee:	e7c4      	b.n	8000a7a <__udivmoddi4+0x282>

08000af0 <__aeabi_idiv0>:
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop

08000af4 <mg_random>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
bool mg_random(void *buf, size_t len) {  // Use on-board RNG
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b084      	sub	sp, #16
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
 8000afc:	6039      	str	r1, [r7, #0]
  for (size_t n = 0; n < len; n += sizeof(uint32_t)) {
 8000afe:	2300      	movs	r3, #0
 8000b00:	60fb      	str	r3, [r7, #12]
 8000b02:	e01a      	b.n	8000b3a <mg_random+0x46>
    uint32_t r;
    HAL_RNG_GenerateRandomNumber(&hrng, &r);
 8000b04:	f107 0308 	add.w	r3, r7, #8
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4810      	ldr	r0, [pc, #64]	@ (8000b4c <mg_random+0x58>)
 8000b0c:	f005 fce8 	bl	80064e0 <HAL_RNG_GenerateRandomNumber>
    memcpy((char *) buf + n, &r, n + sizeof(r) > len ? len - n : sizeof(r));
 8000b10:	687a      	ldr	r2, [r7, #4]
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	18d0      	adds	r0, r2, r3
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	3304      	adds	r3, #4
 8000b1a:	683a      	ldr	r2, [r7, #0]
 8000b1c:	429a      	cmp	r2, r3
 8000b1e:	d203      	bcs.n	8000b28 <mg_random+0x34>
 8000b20:	683a      	ldr	r2, [r7, #0]
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	1ad3      	subs	r3, r2, r3
 8000b26:	e000      	b.n	8000b2a <mg_random+0x36>
 8000b28:	2304      	movs	r3, #4
 8000b2a:	f107 0108 	add.w	r1, r7, #8
 8000b2e:	461a      	mov	r2, r3
 8000b30:	f026 ff03 	bl	802793a <memcpy>
  for (size_t n = 0; n < len; n += sizeof(uint32_t)) {
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	3304      	adds	r3, #4
 8000b38:	60fb      	str	r3, [r7, #12]
 8000b3a:	68fa      	ldr	r2, [r7, #12]
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	429a      	cmp	r2, r3
 8000b40:	d3e0      	bcc.n	8000b04 <mg_random+0x10>
  }
  return true; // TODO(): ensure successful RNG init, then return on false above
 8000b42:	2301      	movs	r3, #1
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	3710      	adds	r7, #16
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	24001190 	.word	0x24001190

08000b50 <mg_millis>:

uint64_t mg_millis(void) {
 8000b50:	b5b0      	push	{r4, r5, r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8000b54:	f001 faa6 	bl	80020a4 <HAL_GetTick>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	461c      	mov	r4, r3
 8000b5e:	4615      	mov	r5, r2
 8000b60:	4622      	mov	r2, r4
 8000b62:	462b      	mov	r3, r5
}
 8000b64:	4610      	mov	r0, r2
 8000b66:	4619      	mov	r1, r3
 8000b68:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000b6c <_write>:

int _write(int fd, unsigned char *buf, int len) {
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b084      	sub	sp, #16
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	60f8      	str	r0, [r7, #12]
 8000b74:	60b9      	str	r1, [r7, #8]
 8000b76:	607a      	str	r2, [r7, #4]
  if (fd == 1 || fd == 2) {                     // stdout or stderr ?
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	2b01      	cmp	r3, #1
 8000b7c:	d002      	beq.n	8000b84 <_write+0x18>
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	2b02      	cmp	r3, #2
 8000b82:	d107      	bne.n	8000b94 <_write+0x28>
    HAL_UART_Transmit(&huart3, buf, len, 999);  // Print to the UART
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	b29a      	uxth	r2, r3
 8000b88:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8000b8c:	68b9      	ldr	r1, [r7, #8]
 8000b8e:	4804      	ldr	r0, [pc, #16]	@ (8000ba0 <_write+0x34>)
 8000b90:	f005 fdfb 	bl	800678a <HAL_UART_Transmit>
  }
  return len;
 8000b94:	687b      	ldr	r3, [r7, #4]
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	3710      	adds	r7, #16
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	240011a4 	.word	0x240011a4

08000ba4 <http_event_handler>:

static void http_event_handler(struct mg_connection *c, int ev, void *ev_data, void *fn_data) {
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b086      	sub	sp, #24
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	60f8      	str	r0, [r7, #12]
 8000bac:	60b9      	str	r1, [r7, #8]
 8000bae:	607a      	str	r2, [r7, #4]
 8000bb0:	603b      	str	r3, [r7, #0]
	if (ev == MG_EV_HTTP_MSG) {
 8000bb2:	68bb      	ldr	r3, [r7, #8]
 8000bb4:	2b0b      	cmp	r3, #11
 8000bb6:	d12c      	bne.n	8000c12 <http_event_handler+0x6e>
    struct mg_http_message *hm = (struct mg_http_message *) ev_data;
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	617b      	str	r3, [r7, #20]
    size_t copy_len = hm->body.len < MAX_RESPONSE_SIZE - 1 ? hm->body.len : MAX_RESPONSE_SIZE - 1;
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8000bc2:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	bf28      	it	cs
 8000bca:	4613      	movcs	r3, r2
 8000bcc:	613b      	str	r3, [r7, #16]
    memcpy(response_buf, hm->body.buf, copy_len);
 8000bce:	697b      	ldr	r3, [r7, #20]
 8000bd0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000bd4:	693a      	ldr	r2, [r7, #16]
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	4816      	ldr	r0, [pc, #88]	@ (8000c34 <http_event_handler+0x90>)
 8000bda:	f026 feae 	bl	802793a <memcpy>
    response_buf[copy_len] = '\0';
 8000bde:	4a15      	ldr	r2, [pc, #84]	@ (8000c34 <http_event_handler+0x90>)
 8000be0:	693b      	ldr	r3, [r7, #16]
 8000be2:	4413      	add	r3, r2
 8000be4:	2200      	movs	r2, #0
 8000be6:	701a      	strb	r2, [r3, #0]
    response_len = copy_len;
 8000be8:	4a13      	ldr	r2, [pc, #76]	@ (8000c38 <http_event_handler+0x94>)
 8000bea:	693b      	ldr	r3, [r7, #16]
 8000bec:	6013      	str	r3, [r2, #0]
    printf("HTTP Response: %.*s\r\n", (int) response_len, response_buf);
 8000bee:	4b12      	ldr	r3, [pc, #72]	@ (8000c38 <http_event_handler+0x94>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4a10      	ldr	r2, [pc, #64]	@ (8000c34 <http_event_handler+0x90>)
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	4811      	ldr	r0, [pc, #68]	@ (8000c3c <http_event_handler+0x98>)
 8000bf8:	f026 fbb8 	bl	802736c <iprintf>
    request_done = true;
 8000bfc:	4b10      	ldr	r3, [pc, #64]	@ (8000c40 <http_event_handler+0x9c>)
 8000bfe:	2201      	movs	r2, #1
 8000c00:	701a      	strb	r2, [r3, #0]
    c->is_closing = 1;
 8000c02:	68fa      	ldr	r2, [r7, #12]
 8000c04:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8000c08:	f043 0320 	orr.w	r3, r3, #32
 8000c0c:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
  } else if (ev == MG_EV_CLOSE && !request_done) {
    printf("HTTP request failed or connection closed early\r\n");
  }
}
 8000c10:	e00c      	b.n	8000c2c <http_event_handler+0x88>
  } else if (ev == MG_EV_CLOSE && !request_done) {
 8000c12:	68bb      	ldr	r3, [r7, #8]
 8000c14:	2b09      	cmp	r3, #9
 8000c16:	d109      	bne.n	8000c2c <http_event_handler+0x88>
 8000c18:	4b09      	ldr	r3, [pc, #36]	@ (8000c40 <http_event_handler+0x9c>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	f083 0301 	eor.w	r3, r3, #1
 8000c20:	b2db      	uxtb	r3, r3
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d002      	beq.n	8000c2c <http_event_handler+0x88>
    printf("HTTP request failed or connection closed early\r\n");
 8000c26:	4807      	ldr	r0, [pc, #28]	@ (8000c44 <http_event_handler+0xa0>)
 8000c28:	f026 fc44 	bl	80274b4 <puts>
}
 8000c2c:	bf00      	nop
 8000c2e:	3718      	adds	r7, #24
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	24001238 	.word	0x24001238
 8000c38:	24002238 	.word	0x24002238
 8000c3c:	08029980 	.word	0x08029980
 8000c40:	2400223c 	.word	0x2400223c
 8000c44:	08029998 	.word	0x08029998

08000c48 <perform_http_data_read>:


void perform_http_data_read(void) {
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
  request_done = false;
 8000c4e:	4b1f      	ldr	r3, [pc, #124]	@ (8000ccc <perform_http_data_read+0x84>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	701a      	strb	r2, [r3, #0]

  // Use the global manager directly
  struct mg_connection *c = mg_http_connect(&g_mgr, API_URL, http_event_handler, NULL);
 8000c54:	2300      	movs	r3, #0
 8000c56:	4a1e      	ldr	r2, [pc, #120]	@ (8000cd0 <perform_http_data_read+0x88>)
 8000c58:	491e      	ldr	r1, [pc, #120]	@ (8000cd4 <perform_http_data_read+0x8c>)
 8000c5a:	481f      	ldr	r0, [pc, #124]	@ (8000cd8 <perform_http_data_read+0x90>)
 8000c5c:	f00c fcda 	bl	800d614 <mg_http_connect>
 8000c60:	6078      	str	r0, [r7, #4]
  if (c == NULL) {
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d103      	bne.n	8000c70 <perform_http_data_read+0x28>
    printf("HTTP connect failed\r\n");
 8000c68:	481c      	ldr	r0, [pc, #112]	@ (8000cdc <perform_http_data_read+0x94>)
 8000c6a:	f026 fc23 	bl	80274b4 <puts>
    return;
 8000c6e:	e029      	b.n	8000cc4 <perform_http_data_read+0x7c>
  }

  // Send GET request
  mg_printf(c, "GET %s HTTP/1.0\r\nHost: 192.168.1.233\r\n\r\n", "/api/stats?start=-1h&stop=now()");
 8000c70:	4a1b      	ldr	r2, [pc, #108]	@ (8000ce0 <perform_http_data_read+0x98>)
 8000c72:	491c      	ldr	r1, [pc, #112]	@ (8000ce4 <perform_http_data_read+0x9c>)
 8000c74:	6878      	ldr	r0, [r7, #4]
 8000c76:	f00d ff71 	bl	800eb5c <mg_printf>

  // Poll until request is done or timeout hits
  uint32_t start = HAL_GetTick();
 8000c7a:	f001 fa13 	bl	80020a4 <HAL_GetTick>
 8000c7e:	6038      	str	r0, [r7, #0]
  while (!request_done && HAL_GetTick() - start < 5000) {
 8000c80:	e006      	b.n	8000c90 <perform_http_data_read+0x48>
    mg_mgr_poll(&g_mgr, 1);  // Poll for events
 8000c82:	2101      	movs	r1, #1
 8000c84:	4814      	ldr	r0, [pc, #80]	@ (8000cd8 <perform_http_data_read+0x90>)
 8000c86:	f011 ff73 	bl	8012b70 <mg_mgr_poll>
    HAL_Delay(1);            // Give other threads (like LWIP) time to breathe
 8000c8a:	2001      	movs	r0, #1
 8000c8c:	f001 fa16 	bl	80020bc <HAL_Delay>
  while (!request_done && HAL_GetTick() - start < 5000) {
 8000c90:	4b0e      	ldr	r3, [pc, #56]	@ (8000ccc <perform_http_data_read+0x84>)
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	f083 0301 	eor.w	r3, r3, #1
 8000c98:	b2db      	uxtb	r3, r3
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d008      	beq.n	8000cb0 <perform_http_data_read+0x68>
 8000c9e:	f001 fa01 	bl	80020a4 <HAL_GetTick>
 8000ca2:	4602      	mov	r2, r0
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	1ad3      	subs	r3, r2, r3
 8000ca8:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000cac:	4293      	cmp	r3, r2
 8000cae:	d9e8      	bls.n	8000c82 <perform_http_data_read+0x3a>
  }

  if (!request_done) {
 8000cb0:	4b06      	ldr	r3, [pc, #24]	@ (8000ccc <perform_http_data_read+0x84>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	f083 0301 	eor.w	r3, r3, #1
 8000cb8:	b2db      	uxtb	r3, r3
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d002      	beq.n	8000cc4 <perform_http_data_read+0x7c>
    printf("Request timed out\r\n");
 8000cbe:	480a      	ldr	r0, [pc, #40]	@ (8000ce8 <perform_http_data_read+0xa0>)
 8000cc0:	f026 fbf8 	bl	80274b4 <puts>
  }
}
 8000cc4:	3708      	adds	r7, #8
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	2400223c 	.word	0x2400223c
 8000cd0:	08000ba5 	.word	0x08000ba5
 8000cd4:	080299c8 	.word	0x080299c8
 8000cd8:	240056b8 	.word	0x240056b8
 8000cdc:	08029a04 	.word	0x08029a04
 8000ce0:	08029a1c 	.word	0x08029a1c
 8000ce4:	08029a3c 	.word	0x08029a3c
 8000ce8:	08029a68 	.word	0x08029a68

08000cec <wait_for_network_ready>:


void wait_for_network_ready(void) {
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
  uint32_t start = HAL_GetTick();
 8000cf2:	f001 f9d7 	bl	80020a4 <HAL_GetTick>
 8000cf6:	6078      	str	r0, [r7, #4]
  while (HAL_GetTick() - start < 500) {
 8000cf8:	e004      	b.n	8000d04 <wait_for_network_ready+0x18>
    mongoose_poll();   // gives time for ARP retry and TCP/IP setup
 8000cfa:	f024 fdfd 	bl	80258f8 <mongoose_poll>
    HAL_Delay(1);
 8000cfe:	2001      	movs	r0, #1
 8000d00:	f001 f9dc 	bl	80020bc <HAL_Delay>
  while (HAL_GetTick() - start < 500) {
 8000d04:	f001 f9ce 	bl	80020a4 <HAL_GetTick>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	1ad3      	subs	r3, r2, r3
 8000d0e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000d12:	d3f2      	bcc.n	8000cfa <wait_for_network_ready+0xe>
  }
}
 8000d14:	bf00      	nop
 8000d16:	bf00      	nop
 8000d18:	3708      	adds	r7, #8
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
	...

08000d20 <collect_plc_data>:

void collect_plc_data(PLC_Snapshot *snapshot) {
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b086      	sub	sp, #24
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
    uint16_t val;

    // Read status_bits[0..3] from registers 1000–1003
    for (int i = 0; i < 4; i++) {
 8000d28:	2300      	movs	r3, #0
 8000d2a:	617b      	str	r3, [r7, #20]
 8000d2c:	e024      	b.n	8000d78 <collect_plc_data+0x58>
        glue_modbus_read_reg(1000 + i, &val);
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	b29b      	uxth	r3, r3
 8000d32:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8000d36:	b29b      	uxth	r3, r3
 8000d38:	f107 020e 	add.w	r2, r7, #14
 8000d3c:	4611      	mov	r1, r2
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f022 fb9a 	bl	8023478 <glue_modbus_read_reg>
        snapshot->status_bits[i] = val;
 8000d44:	89f9      	ldrh	r1, [r7, #14]
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	697a      	ldr	r2, [r7, #20]
 8000d4a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        MG_INFO(("status_bits[%d] (reg %d) = %04X", i, 1000 + i, val));
 8000d4e:	4b2e      	ldr	r3, [pc, #184]	@ (8000e08 <collect_plc_data+0xe8>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	2b01      	cmp	r3, #1
 8000d54:	dd0d      	ble.n	8000d72 <collect_plc_data+0x52>
 8000d56:	4b2d      	ldr	r3, [pc, #180]	@ (8000e0c <collect_plc_data+0xec>)
 8000d58:	22bc      	movs	r2, #188	@ 0xbc
 8000d5a:	492d      	ldr	r1, [pc, #180]	@ (8000e10 <collect_plc_data+0xf0>)
 8000d5c:	2002      	movs	r0, #2
 8000d5e:	f00d fda1 	bl	800e8a4 <mg_log_prefix>
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	f503 727a 	add.w	r2, r3, #1000	@ 0x3e8
 8000d68:	89fb      	ldrh	r3, [r7, #14]
 8000d6a:	6979      	ldr	r1, [r7, #20]
 8000d6c:	4829      	ldr	r0, [pc, #164]	@ (8000e14 <collect_plc_data+0xf4>)
 8000d6e:	f00d fde9 	bl	800e944 <mg_log>
    for (int i = 0; i < 4; i++) {
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	3301      	adds	r3, #1
 8000d76:	617b      	str	r3, [r7, #20]
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	2b03      	cmp	r3, #3
 8000d7c:	ddd7      	ble.n	8000d2e <collect_plc_data+0xe>
    }

    // Read data_words[0..105] from registers 1004–1109
    for (int i = 0; i < 106; i++) {
 8000d7e:	2300      	movs	r3, #0
 8000d80:	613b      	str	r3, [r7, #16]
 8000d82:	e02b      	b.n	8000ddc <collect_plc_data+0xbc>
        glue_modbus_read_reg(1004 + i, &val);
 8000d84:	693b      	ldr	r3, [r7, #16]
 8000d86:	b29b      	uxth	r3, r3
 8000d88:	f503 737b 	add.w	r3, r3, #1004	@ 0x3ec
 8000d8c:	b29b      	uxth	r3, r3
 8000d8e:	f107 020e 	add.w	r2, r7, #14
 8000d92:	4611      	mov	r1, r2
 8000d94:	4618      	mov	r0, r3
 8000d96:	f022 fb6f 	bl	8023478 <glue_modbus_read_reg>
        snapshot->data_words[i] = val;
 8000d9a:	89f9      	ldrh	r1, [r7, #14]
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	693a      	ldr	r2, [r7, #16]
 8000da0:	3204      	adds	r2, #4
 8000da2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        if (i < 20 || i > 100) {  // Limit log volume
 8000da6:	693b      	ldr	r3, [r7, #16]
 8000da8:	2b13      	cmp	r3, #19
 8000daa:	dd02      	ble.n	8000db2 <collect_plc_data+0x92>
 8000dac:	693b      	ldr	r3, [r7, #16]
 8000dae:	2b64      	cmp	r3, #100	@ 0x64
 8000db0:	dd11      	ble.n	8000dd6 <collect_plc_data+0xb6>
            MG_INFO(("data_words[%d] (reg %d) = %04X", i, 1004 + i, val));
 8000db2:	4b15      	ldr	r3, [pc, #84]	@ (8000e08 <collect_plc_data+0xe8>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	2b01      	cmp	r3, #1
 8000db8:	dd0d      	ble.n	8000dd6 <collect_plc_data+0xb6>
 8000dba:	4b14      	ldr	r3, [pc, #80]	@ (8000e0c <collect_plc_data+0xec>)
 8000dbc:	22c4      	movs	r2, #196	@ 0xc4
 8000dbe:	4914      	ldr	r1, [pc, #80]	@ (8000e10 <collect_plc_data+0xf0>)
 8000dc0:	2002      	movs	r0, #2
 8000dc2:	f00d fd6f 	bl	800e8a4 <mg_log_prefix>
 8000dc6:	693b      	ldr	r3, [r7, #16]
 8000dc8:	f503 727b 	add.w	r2, r3, #1004	@ 0x3ec
 8000dcc:	89fb      	ldrh	r3, [r7, #14]
 8000dce:	6939      	ldr	r1, [r7, #16]
 8000dd0:	4811      	ldr	r0, [pc, #68]	@ (8000e18 <collect_plc_data+0xf8>)
 8000dd2:	f00d fdb7 	bl	800e944 <mg_log>
    for (int i = 0; i < 106; i++) {
 8000dd6:	693b      	ldr	r3, [r7, #16]
 8000dd8:	3301      	adds	r3, #1
 8000dda:	613b      	str	r3, [r7, #16]
 8000ddc:	693b      	ldr	r3, [r7, #16]
 8000dde:	2b69      	cmp	r3, #105	@ 0x69
 8000de0:	ddd0      	ble.n	8000d84 <collect_plc_data+0x64>
        }
    }

    MG_INFO(("Snapshot struct size: %d", (int) sizeof(PLC_Snapshot)));
 8000de2:	4b09      	ldr	r3, [pc, #36]	@ (8000e08 <collect_plc_data+0xe8>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	2b01      	cmp	r3, #1
 8000de8:	dd09      	ble.n	8000dfe <collect_plc_data+0xde>
 8000dea:	4b08      	ldr	r3, [pc, #32]	@ (8000e0c <collect_plc_data+0xec>)
 8000dec:	22c8      	movs	r2, #200	@ 0xc8
 8000dee:	4908      	ldr	r1, [pc, #32]	@ (8000e10 <collect_plc_data+0xf0>)
 8000df0:	2002      	movs	r0, #2
 8000df2:	f00d fd57 	bl	800e8a4 <mg_log_prefix>
 8000df6:	21dc      	movs	r1, #220	@ 0xdc
 8000df8:	4808      	ldr	r0, [pc, #32]	@ (8000e1c <collect_plc_data+0xfc>)
 8000dfa:	f00d fda3 	bl	800e944 <mg_log>
}
 8000dfe:	bf00      	nop
 8000e00:	3718      	adds	r7, #24
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	24000258 	.word	0x24000258
 8000e0c:	0802d32c 	.word	0x0802d32c
 8000e10:	08029a7c 	.word	0x08029a7c
 8000e14:	08029a90 	.word	0x08029a90
 8000e18:	08029ab0 	.word	0x08029ab0
 8000e1c:	08029ad0 	.word	0x08029ad0

08000e20 <write_snapshot_to_nfc>:



void write_snapshot_to_nfc(void) {
 8000e20:	b580      	push	{r7, lr}
 8000e22:	f5ad 6db4 	sub.w	sp, sp, #1440	@ 0x5a0
 8000e26:	af04      	add	r7, sp, #16
    uint16_t i2c_addr = 0x53 << 1;        // 0xA6
 8000e28:	23a6      	movs	r3, #166	@ 0xa6
 8000e2a:	f8a7 3586 	strh.w	r3, [r7, #1414]	@ 0x586
    uint16_t mem_addr = 0x0008;           // NDEF message start offset
 8000e2e:	2308      	movs	r3, #8
 8000e30:	f8a7 3584 	strh.w	r3, [r7, #1412]	@ 0x584
    HAL_StatusTypeDef status;

    PLC_Snapshot snapshot;
    collect_plc_data(&snapshot);
 8000e34:	f207 439c 	addw	r3, r7, #1180	@ 0x49c
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f7ff ff71 	bl	8000d20 <collect_plc_data>

    // === Build combined payload ===
    uint8_t payload[sizeof(snapshot) + 1 + MAX_NUMBERS * sizeof(float)];
    uint16_t payload_index = 0;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	f8a7 3582 	strh.w	r3, [r7, #1410]	@ 0x582

    // Copy PLC snapshot first
    memcpy(&payload[payload_index], &snapshot, sizeof(snapshot));
 8000e44:	f8b7 3582 	ldrh.w	r3, [r7, #1410]	@ 0x582
 8000e48:	f507 722f 	add.w	r2, r7, #700	@ 0x2bc
 8000e4c:	4413      	add	r3, r2
 8000e4e:	f207 419c 	addw	r1, r7, #1180	@ 0x49c
 8000e52:	22dc      	movs	r2, #220	@ 0xdc
 8000e54:	4618      	mov	r0, r3
 8000e56:	f026 fd70 	bl	802793a <memcpy>
    payload_index += sizeof(snapshot);
 8000e5a:	f8b7 3582 	ldrh.w	r3, [r7, #1410]	@ 0x582
 8000e5e:	33dc      	adds	r3, #220	@ 0xdc
 8000e60:	f8a7 3582 	strh.w	r3, [r7, #1410]	@ 0x582

    // Add float count
    payload[payload_index++] = (uint8_t)number_count;
 8000e64:	4bb5      	ldr	r3, [pc, #724]	@ (800113c <write_snapshot_to_nfc+0x31c>)
 8000e66:	6819      	ldr	r1, [r3, #0]
 8000e68:	f8b7 3582 	ldrh.w	r3, [r7, #1410]	@ 0x582
 8000e6c:	1c5a      	adds	r2, r3, #1
 8000e6e:	f8a7 2582 	strh.w	r2, [r7, #1410]	@ 0x582
 8000e72:	461a      	mov	r2, r3
 8000e74:	b2c9      	uxtb	r1, r1
 8000e76:	f507 63b2 	add.w	r3, r7, #1424	@ 0x590
 8000e7a:	f5a3 7335 	sub.w	r3, r3, #724	@ 0x2d4
 8000e7e:	5499      	strb	r1, [r3, r2]

    // Copy float array
    memcpy(&payload[payload_index], extracted_numbers, number_count * sizeof(float));
 8000e80:	f8b7 3582 	ldrh.w	r3, [r7, #1410]	@ 0x582
 8000e84:	f507 722f 	add.w	r2, r7, #700	@ 0x2bc
 8000e88:	4413      	add	r3, r2
 8000e8a:	4aac      	ldr	r2, [pc, #688]	@ (800113c <write_snapshot_to_nfc+0x31c>)
 8000e8c:	6812      	ldr	r2, [r2, #0]
 8000e8e:	0092      	lsls	r2, r2, #2
 8000e90:	49ab      	ldr	r1, [pc, #684]	@ (8001140 <write_snapshot_to_nfc+0x320>)
 8000e92:	4618      	mov	r0, r3
 8000e94:	f026 fd51 	bl	802793a <memcpy>
    payload_index += number_count * sizeof(float);
 8000e98:	4ba8      	ldr	r3, [pc, #672]	@ (800113c <write_snapshot_to_nfc+0x31c>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	b29b      	uxth	r3, r3
 8000e9e:	009b      	lsls	r3, r3, #2
 8000ea0:	b29a      	uxth	r2, r3
 8000ea2:	f8b7 3582 	ldrh.w	r3, [r7, #1410]	@ 0x582
 8000ea6:	4413      	add	r3, r2
 8000ea8:	f8a7 3582 	strh.w	r3, [r7, #1410]	@ 0x582

    // === Construct NDEF message ===
    uint8_t type_length = 24; // "application/octet-stream"
 8000eac:	2318      	movs	r3, #24
 8000eae:	f887 3581 	strb.w	r3, [r7, #1409]	@ 0x581
    uint8_t ndef_header_size = 1 + 1 + 1; // D2 + type_length + payload_length
 8000eb2:	2303      	movs	r3, #3
 8000eb4:	f887 3580 	strb.w	r3, [r7, #1408]	@ 0x580
    uint16_t payload_length = payload_index;
 8000eb8:	f8b7 3582 	ldrh.w	r3, [r7, #1410]	@ 0x582
 8000ebc:	f8a7 357e 	strh.w	r3, [r7, #1406]	@ 0x57e
    uint16_t ndef_record_length = ndef_header_size + type_length + payload_length;
 8000ec0:	f897 3580 	ldrb.w	r3, [r7, #1408]	@ 0x580
 8000ec4:	b29a      	uxth	r2, r3
 8000ec6:	f897 3581 	ldrb.w	r3, [r7, #1409]	@ 0x581
 8000eca:	b29b      	uxth	r3, r3
 8000ecc:	4413      	add	r3, r2
 8000ece:	b29a      	uxth	r2, r3
 8000ed0:	f8b7 357e 	ldrh.w	r3, [r7, #1406]	@ 0x57e
 8000ed4:	4413      	add	r3, r2
 8000ed6:	f8a7 357c 	strh.w	r3, [r7, #1404]	@ 0x57c
    uint8_t ndef_tlv_length = (ndef_record_length <= 255) ? ndef_record_length : 0xFF;
 8000eda:	f8b7 357c 	ldrh.w	r3, [r7, #1404]	@ 0x57c
 8000ede:	2bff      	cmp	r3, #255	@ 0xff
 8000ee0:	bf28      	it	cs
 8000ee2:	23ff      	movcs	r3, #255	@ 0xff
 8000ee4:	b29b      	uxth	r3, r3
 8000ee6:	f887 357b 	strb.w	r3, [r7, #1403]	@ 0x57b

    uint8_t ndef_buffer[700];
    uint16_t i = 0;
 8000eea:	2300      	movs	r3, #0
 8000eec:	f8a7 358e 	strh.w	r3, [r7, #1422]	@ 0x58e

    // NDEF TLV
    ndef_buffer[i++] = 0x03;
 8000ef0:	f8b7 358e 	ldrh.w	r3, [r7, #1422]	@ 0x58e
 8000ef4:	1c5a      	adds	r2, r3, #1
 8000ef6:	f8a7 258e 	strh.w	r2, [r7, #1422]	@ 0x58e
 8000efa:	461a      	mov	r2, r3
 8000efc:	f507 63b2 	add.w	r3, r7, #1424	@ 0x590
 8000f00:	f5a3 63b2 	sub.w	r3, r3, #1424	@ 0x590
 8000f04:	2103      	movs	r1, #3
 8000f06:	5499      	strb	r1, [r3, r2]
    if (ndef_tlv_length == 0xFF) {
 8000f08:	f897 357b 	ldrb.w	r3, [r7, #1403]	@ 0x57b
 8000f0c:	2bff      	cmp	r3, #255	@ 0xff
 8000f0e:	d12a      	bne.n	8000f66 <write_snapshot_to_nfc+0x146>
        ndef_buffer[i++] = 0xFF;
 8000f10:	f8b7 358e 	ldrh.w	r3, [r7, #1422]	@ 0x58e
 8000f14:	1c5a      	adds	r2, r3, #1
 8000f16:	f8a7 258e 	strh.w	r2, [r7, #1422]	@ 0x58e
 8000f1a:	461a      	mov	r2, r3
 8000f1c:	f507 63b2 	add.w	r3, r7, #1424	@ 0x590
 8000f20:	f5a3 63b2 	sub.w	r3, r3, #1424	@ 0x590
 8000f24:	21ff      	movs	r1, #255	@ 0xff
 8000f26:	5499      	strb	r1, [r3, r2]
        ndef_buffer[i++] = (ndef_record_length >> 8) & 0xFF;
 8000f28:	f8b7 357c 	ldrh.w	r3, [r7, #1404]	@ 0x57c
 8000f2c:	0a1b      	lsrs	r3, r3, #8
 8000f2e:	b299      	uxth	r1, r3
 8000f30:	f8b7 358e 	ldrh.w	r3, [r7, #1422]	@ 0x58e
 8000f34:	1c5a      	adds	r2, r3, #1
 8000f36:	f8a7 258e 	strh.w	r2, [r7, #1422]	@ 0x58e
 8000f3a:	461a      	mov	r2, r3
 8000f3c:	b2c9      	uxtb	r1, r1
 8000f3e:	f507 63b2 	add.w	r3, r7, #1424	@ 0x590
 8000f42:	f5a3 63b2 	sub.w	r3, r3, #1424	@ 0x590
 8000f46:	5499      	strb	r1, [r3, r2]
        ndef_buffer[i++] = ndef_record_length & 0xFF;
 8000f48:	f8b7 358e 	ldrh.w	r3, [r7, #1422]	@ 0x58e
 8000f4c:	1c5a      	adds	r2, r3, #1
 8000f4e:	f8a7 258e 	strh.w	r2, [r7, #1422]	@ 0x58e
 8000f52:	461a      	mov	r2, r3
 8000f54:	f8b7 357c 	ldrh.w	r3, [r7, #1404]	@ 0x57c
 8000f58:	b2d9      	uxtb	r1, r3
 8000f5a:	f507 63b2 	add.w	r3, r7, #1424	@ 0x590
 8000f5e:	f5a3 63b2 	sub.w	r3, r3, #1424	@ 0x590
 8000f62:	5499      	strb	r1, [r3, r2]
 8000f64:	e00c      	b.n	8000f80 <write_snapshot_to_nfc+0x160>
    } else {
        ndef_buffer[i++] = ndef_tlv_length;
 8000f66:	f8b7 358e 	ldrh.w	r3, [r7, #1422]	@ 0x58e
 8000f6a:	1c5a      	adds	r2, r3, #1
 8000f6c:	f8a7 258e 	strh.w	r2, [r7, #1422]	@ 0x58e
 8000f70:	4619      	mov	r1, r3
 8000f72:	f507 63b2 	add.w	r3, r7, #1424	@ 0x590
 8000f76:	f5a3 63b2 	sub.w	r3, r3, #1424	@ 0x590
 8000f7a:	f897 257b 	ldrb.w	r2, [r7, #1403]	@ 0x57b
 8000f7e:	545a      	strb	r2, [r3, r1]
    }

    ndef_buffer[i++] = 0xC2; // MB=1, ME=1, SR=0, TNF=MIME
 8000f80:	f8b7 358e 	ldrh.w	r3, [r7, #1422]	@ 0x58e
 8000f84:	1c5a      	adds	r2, r3, #1
 8000f86:	f8a7 258e 	strh.w	r2, [r7, #1422]	@ 0x58e
 8000f8a:	461a      	mov	r2, r3
 8000f8c:	f507 63b2 	add.w	r3, r7, #1424	@ 0x590
 8000f90:	f5a3 63b2 	sub.w	r3, r3, #1424	@ 0x590
 8000f94:	21c2      	movs	r1, #194	@ 0xc2
 8000f96:	5499      	strb	r1, [r3, r2]
    ndef_buffer[i++] = type_length;
 8000f98:	f8b7 358e 	ldrh.w	r3, [r7, #1422]	@ 0x58e
 8000f9c:	1c5a      	adds	r2, r3, #1
 8000f9e:	f8a7 258e 	strh.w	r2, [r7, #1422]	@ 0x58e
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	f507 63b2 	add.w	r3, r7, #1424	@ 0x590
 8000fa8:	f5a3 63b2 	sub.w	r3, r3, #1424	@ 0x590
 8000fac:	f897 2581 	ldrb.w	r2, [r7, #1409]	@ 0x581
 8000fb0:	545a      	strb	r2, [r3, r1]

    // 4-byte payload length (for SR=0)
    ndef_buffer[i++] = (payload_length >> 24) & 0xFF;
 8000fb2:	f8b7 358e 	ldrh.w	r3, [r7, #1422]	@ 0x58e
 8000fb6:	1c5a      	adds	r2, r3, #1
 8000fb8:	f8a7 258e 	strh.w	r2, [r7, #1422]	@ 0x58e
 8000fbc:	461a      	mov	r2, r3
 8000fbe:	f507 63b2 	add.w	r3, r7, #1424	@ 0x590
 8000fc2:	f5a3 63b2 	sub.w	r3, r3, #1424	@ 0x590
 8000fc6:	2100      	movs	r1, #0
 8000fc8:	5499      	strb	r1, [r3, r2]
    ndef_buffer[i++] = (payload_length >> 16) & 0xFF;
 8000fca:	f8b7 358e 	ldrh.w	r3, [r7, #1422]	@ 0x58e
 8000fce:	1c5a      	adds	r2, r3, #1
 8000fd0:	f8a7 258e 	strh.w	r2, [r7, #1422]	@ 0x58e
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	f507 63b2 	add.w	r3, r7, #1424	@ 0x590
 8000fda:	f5a3 63b2 	sub.w	r3, r3, #1424	@ 0x590
 8000fde:	2100      	movs	r1, #0
 8000fe0:	5499      	strb	r1, [r3, r2]
    ndef_buffer[i++] = (payload_length >> 8) & 0xFF;
 8000fe2:	f8b7 357e 	ldrh.w	r3, [r7, #1406]	@ 0x57e
 8000fe6:	0a1b      	lsrs	r3, r3, #8
 8000fe8:	b299      	uxth	r1, r3
 8000fea:	f8b7 358e 	ldrh.w	r3, [r7, #1422]	@ 0x58e
 8000fee:	1c5a      	adds	r2, r3, #1
 8000ff0:	f8a7 258e 	strh.w	r2, [r7, #1422]	@ 0x58e
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	b2c9      	uxtb	r1, r1
 8000ff8:	f507 63b2 	add.w	r3, r7, #1424	@ 0x590
 8000ffc:	f5a3 63b2 	sub.w	r3, r3, #1424	@ 0x590
 8001000:	5499      	strb	r1, [r3, r2]
    ndef_buffer[i++] = payload_length & 0xFF;
 8001002:	f8b7 358e 	ldrh.w	r3, [r7, #1422]	@ 0x58e
 8001006:	1c5a      	adds	r2, r3, #1
 8001008:	f8a7 258e 	strh.w	r2, [r7, #1422]	@ 0x58e
 800100c:	461a      	mov	r2, r3
 800100e:	f8b7 357e 	ldrh.w	r3, [r7, #1406]	@ 0x57e
 8001012:	b2d9      	uxtb	r1, r3
 8001014:	f507 63b2 	add.w	r3, r7, #1424	@ 0x590
 8001018:	f5a3 63b2 	sub.w	r3, r3, #1424	@ 0x590
 800101c:	5499      	strb	r1, [r3, r2]


    // MIME Type
    memcpy(&ndef_buffer[i], "application/octet-stream", type_length);
 800101e:	f8b7 358e 	ldrh.w	r3, [r7, #1422]	@ 0x58e
 8001022:	463a      	mov	r2, r7
 8001024:	4413      	add	r3, r2
 8001026:	f897 2581 	ldrb.w	r2, [r7, #1409]	@ 0x581
 800102a:	4946      	ldr	r1, [pc, #280]	@ (8001144 <write_snapshot_to_nfc+0x324>)
 800102c:	4618      	mov	r0, r3
 800102e:	f026 fc84 	bl	802793a <memcpy>
    i += type_length;
 8001032:	f897 3581 	ldrb.w	r3, [r7, #1409]	@ 0x581
 8001036:	b29a      	uxth	r2, r3
 8001038:	f8b7 358e 	ldrh.w	r3, [r7, #1422]	@ 0x58e
 800103c:	4413      	add	r3, r2
 800103e:	f8a7 358e 	strh.w	r3, [r7, #1422]	@ 0x58e

    // Combined Payload
    memcpy(&ndef_buffer[i], payload, payload_length);
 8001042:	f8b7 358e 	ldrh.w	r3, [r7, #1422]	@ 0x58e
 8001046:	463a      	mov	r2, r7
 8001048:	4413      	add	r3, r2
 800104a:	f8b7 257e 	ldrh.w	r2, [r7, #1406]	@ 0x57e
 800104e:	f507 712f 	add.w	r1, r7, #700	@ 0x2bc
 8001052:	4618      	mov	r0, r3
 8001054:	f026 fc71 	bl	802793a <memcpy>
    i += payload_length;
 8001058:	f8b7 258e 	ldrh.w	r2, [r7, #1422]	@ 0x58e
 800105c:	f8b7 357e 	ldrh.w	r3, [r7, #1406]	@ 0x57e
 8001060:	4413      	add	r3, r2
 8001062:	f8a7 358e 	strh.w	r3, [r7, #1422]	@ 0x58e

    // Terminator TLV
    ndef_buffer[i++] = 0xFE;
 8001066:	f8b7 358e 	ldrh.w	r3, [r7, #1422]	@ 0x58e
 800106a:	1c5a      	adds	r2, r3, #1
 800106c:	f8a7 258e 	strh.w	r2, [r7, #1422]	@ 0x58e
 8001070:	461a      	mov	r2, r3
 8001072:	f507 63b2 	add.w	r3, r7, #1424	@ 0x590
 8001076:	f5a3 63b2 	sub.w	r3, r3, #1424	@ 0x590
 800107a:	21fe      	movs	r1, #254	@ 0xfe
 800107c:	5499      	strb	r1, [r3, r2]
    ndef_buffer[i++] = 0x00;
 800107e:	f8b7 358e 	ldrh.w	r3, [r7, #1422]	@ 0x58e
 8001082:	1c5a      	adds	r2, r3, #1
 8001084:	f8a7 258e 	strh.w	r2, [r7, #1422]	@ 0x58e
 8001088:	461a      	mov	r2, r3
 800108a:	f507 63b2 	add.w	r3, r7, #1424	@ 0x590
 800108e:	f5a3 63b2 	sub.w	r3, r3, #1424	@ 0x590
 8001092:	2100      	movs	r1, #0
 8001094:	5499      	strb	r1, [r3, r2]

    // Debug print
    printf("Payload length: %d\n", payload_length);
 8001096:	f8b7 357e 	ldrh.w	r3, [r7, #1406]	@ 0x57e
 800109a:	4619      	mov	r1, r3
 800109c:	482a      	ldr	r0, [pc, #168]	@ (8001148 <write_snapshot_to_nfc+0x328>)
 800109e:	f026 f965 	bl	802736c <iprintf>
    printf("Total NDEF length: %d\n", i);
 80010a2:	f8b7 358e 	ldrh.w	r3, [r7, #1422]	@ 0x58e
 80010a6:	4619      	mov	r1, r3
 80010a8:	4828      	ldr	r0, [pc, #160]	@ (800114c <write_snapshot_to_nfc+0x32c>)
 80010aa:	f026 f95f 	bl	802736c <iprintf>
    printf("NFC TLV Dump (%d bytes):\n", i);
 80010ae:	f8b7 358e 	ldrh.w	r3, [r7, #1422]	@ 0x58e
 80010b2:	4619      	mov	r1, r3
 80010b4:	4826      	ldr	r0, [pc, #152]	@ (8001150 <write_snapshot_to_nfc+0x330>)
 80010b6:	f026 f959 	bl	802736c <iprintf>
    for (int j = 0; j < i; j++) {
 80010ba:	2300      	movs	r3, #0
 80010bc:	f8c7 3588 	str.w	r3, [r7, #1416]	@ 0x588
 80010c0:	e01b      	b.n	80010fa <write_snapshot_to_nfc+0x2da>
        if (j % 16 == 0) printf("\n%04X  ", j);
 80010c2:	f8d7 3588 	ldr.w	r3, [r7, #1416]	@ 0x588
 80010c6:	f003 030f 	and.w	r3, r3, #15
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d104      	bne.n	80010d8 <write_snapshot_to_nfc+0x2b8>
 80010ce:	f8d7 1588 	ldr.w	r1, [r7, #1416]	@ 0x588
 80010d2:	4820      	ldr	r0, [pc, #128]	@ (8001154 <write_snapshot_to_nfc+0x334>)
 80010d4:	f026 f94a 	bl	802736c <iprintf>
        printf("%02X ", ndef_buffer[j]);
 80010d8:	f507 63b2 	add.w	r3, r7, #1424	@ 0x590
 80010dc:	f5a3 62b2 	sub.w	r2, r3, #1424	@ 0x590
 80010e0:	f8d7 3588 	ldr.w	r3, [r7, #1416]	@ 0x588
 80010e4:	4413      	add	r3, r2
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	4619      	mov	r1, r3
 80010ea:	481b      	ldr	r0, [pc, #108]	@ (8001158 <write_snapshot_to_nfc+0x338>)
 80010ec:	f026 f93e 	bl	802736c <iprintf>
    for (int j = 0; j < i; j++) {
 80010f0:	f8d7 3588 	ldr.w	r3, [r7, #1416]	@ 0x588
 80010f4:	3301      	adds	r3, #1
 80010f6:	f8c7 3588 	str.w	r3, [r7, #1416]	@ 0x588
 80010fa:	f8b7 358e 	ldrh.w	r3, [r7, #1422]	@ 0x58e
 80010fe:	f8d7 2588 	ldr.w	r2, [r7, #1416]	@ 0x588
 8001102:	429a      	cmp	r2, r3
 8001104:	dbdd      	blt.n	80010c2 <write_snapshot_to_nfc+0x2a2>
    }
    printf("\n");
 8001106:	200a      	movs	r0, #10
 8001108:	f026 f976 	bl	80273f8 <putchar>

    // Write to NFC
    status = HAL_I2C_Mem_Write(&hi2c1, i2c_addr, mem_addr,
 800110c:	f8b7 2584 	ldrh.w	r2, [r7, #1412]	@ 0x584
 8001110:	f8b7 1586 	ldrh.w	r1, [r7, #1414]	@ 0x586
 8001114:	f04f 33ff 	mov.w	r3, #4294967295
 8001118:	9302      	str	r3, [sp, #8]
 800111a:	f8b7 358e 	ldrh.w	r3, [r7, #1422]	@ 0x58e
 800111e:	9301      	str	r3, [sp, #4]
 8001120:	463b      	mov	r3, r7
 8001122:	9300      	str	r3, [sp, #0]
 8001124:	2302      	movs	r3, #2
 8001126:	480d      	ldr	r0, [pc, #52]	@ (800115c <write_snapshot_to_nfc+0x33c>)
 8001128:	f001 ffba 	bl	80030a0 <HAL_I2C_Mem_Write>
 800112c:	4603      	mov	r3, r0
 800112e:	f887 357a 	strb.w	r3, [r7, #1402]	@ 0x57a
                               I2C_MEMADD_SIZE_16BIT,
                               ndef_buffer, i,
                               HAL_MAX_DELAY);
}
 8001132:	bf00      	nop
 8001134:	f507 67b2 	add.w	r7, r7, #1424	@ 0x590
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	24002340 	.word	0x24002340
 8001140:	24002240 	.word	0x24002240
 8001144:	08029aec 	.word	0x08029aec
 8001148:	08029b08 	.word	0x08029b08
 800114c:	08029b1c 	.word	0x08029b1c
 8001150:	08029b34 	.word	0x08029b34
 8001154:	08029b50 	.word	0x08029b50
 8001158:	08029b58 	.word	0x08029b58
 800115c:	2400113c 	.word	0x2400113c

08001160 <mg_str_to_d>:




double mg_str_to_d(struct mg_str s) {
 8001160:	b580      	push	{r7, lr}
 8001162:	b094      	sub	sp, #80	@ 0x50
 8001164:	af00      	add	r7, sp, #0
 8001166:	463b      	mov	r3, r7
 8001168:	e883 0003 	stmia.w	r3, {r0, r1}
    char buf[64];
    size_t n = s.len < sizeof(buf) - 1 ? s.len : sizeof(buf) - 1;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2b3f      	cmp	r3, #63	@ 0x3f
 8001170:	bf28      	it	cs
 8001172:	233f      	movcs	r3, #63	@ 0x3f
 8001174:	64fb      	str	r3, [r7, #76]	@ 0x4c
    memcpy(buf, s.buf, n);
 8001176:	6839      	ldr	r1, [r7, #0]
 8001178:	f107 030c 	add.w	r3, r7, #12
 800117c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800117e:	4618      	mov	r0, r3
 8001180:	f026 fbdb 	bl	802793a <memcpy>
    buf[n] = '\0';
 8001184:	f107 020c 	add.w	r2, r7, #12
 8001188:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800118a:	4413      	add	r3, r2
 800118c:	2200      	movs	r2, #0
 800118e:	701a      	strb	r2, [r3, #0]
    return atof(buf);  // Or strtod(buf, NULL) for more control
 8001190:	f107 030c 	add.w	r3, r7, #12
 8001194:	4618      	mov	r0, r3
 8001196:	f024 fbe1 	bl	802595c <atof>
 800119a:	eeb0 7b40 	vmov.f64	d7, d0
}
 800119e:	eeb0 0b47 	vmov.f64	d0, d7
 80011a2:	3750      	adds	r7, #80	@ 0x50
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}

080011a8 <parse_numbers_recursive>:


void parse_numbers_recursive(struct mg_str json, float *dest_array, int max_count, int *out_count) {
 80011a8:	b590      	push	{r4, r7, lr}
 80011aa:	b08f      	sub	sp, #60	@ 0x3c
 80011ac:	af02      	add	r7, sp, #8
 80011ae:	f107 0408 	add.w	r4, r7, #8
 80011b2:	e884 0003 	stmia.w	r4, {r0, r1}
 80011b6:	607a      	str	r2, [r7, #4]
 80011b8:	603b      	str	r3, [r7, #0]
    size_t offset = 0;
 80011ba:	2300      	movs	r3, #0
 80011bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    struct mg_str key, val;

    while ((offset = mg_json_next(json, offset, &key, &val)) != 0) {
 80011be:	e044      	b.n	800124a <parse_numbers_recursive+0xa2>
        // Check if it's a number by trying to convert it
        if (val.len > 0 && (isdigit(val.buf[0]) || val.buf[0] == '-' || val.buf[0] == '+')) {
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d02f      	beq.n	8001226 <parse_numbers_recursive+0x7e>
 80011c6:	693b      	ldr	r3, [r7, #16]
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	3301      	adds	r3, #1
 80011cc:	4a29      	ldr	r2, [pc, #164]	@ (8001274 <parse_numbers_recursive+0xcc>)
 80011ce:	4413      	add	r3, r2
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	f003 0304 	and.w	r3, r3, #4
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d107      	bne.n	80011ea <parse_numbers_recursive+0x42>
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	2b2d      	cmp	r3, #45	@ 0x2d
 80011e0:	d003      	beq.n	80011ea <parse_numbers_recursive+0x42>
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	2b2b      	cmp	r3, #43	@ 0x2b
 80011e8:	d11d      	bne.n	8001226 <parse_numbers_recursive+0x7e>
            double num = mg_str_to_d(val);  // ✅ Convert raw mg_str to double
 80011ea:	f107 0310 	add.w	r3, r7, #16
 80011ee:	e893 0003 	ldmia.w	r3, {r0, r1}
 80011f2:	f7ff ffb5 	bl	8001160 <mg_str_to_d>
 80011f6:	ed87 0b08 	vstr	d0, [r7, #32]
            if (*out_count < max_count) {
 80011fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	683a      	ldr	r2, [r7, #0]
 8001200:	429a      	cmp	r2, r3
 8001202:	dd21      	ble.n	8001248 <parse_numbers_recursive+0xa0>
                dest_array[*out_count] = (float) num;
 8001204:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	687a      	ldr	r2, [r7, #4]
 800120c:	4413      	add	r3, r2
 800120e:	ed97 7b08 	vldr	d7, [r7, #32]
 8001212:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001216:	edc3 7a00 	vstr	s15, [r3]
                (*out_count)++;
 800121a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	1c5a      	adds	r2, r3, #1
 8001220:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001222:	601a      	str	r2, [r3, #0]
        if (val.len > 0 && (isdigit(val.buf[0]) || val.buf[0] == '-' || val.buf[0] == '+')) {
 8001224:	e010      	b.n	8001248 <parse_numbers_recursive+0xa0>
            }
        } else if (val.len > 0 && val.buf[0] == '{') {
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d00e      	beq.n	800124a <parse_numbers_recursive+0xa2>
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	2b7b      	cmp	r3, #123	@ 0x7b
 8001232:	d10a      	bne.n	800124a <parse_numbers_recursive+0xa2>
            // Recurse into nested object
            parse_numbers_recursive(val, dest_array, max_count, out_count);
 8001234:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001236:	9300      	str	r3, [sp, #0]
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	687a      	ldr	r2, [r7, #4]
 800123c:	f107 0110 	add.w	r1, r7, #16
 8001240:	c903      	ldmia	r1, {r0, r1}
 8001242:	f7ff ffb1 	bl	80011a8 <parse_numbers_recursive>
 8001246:	e000      	b.n	800124a <parse_numbers_recursive+0xa2>
        if (val.len > 0 && (isdigit(val.buf[0]) || val.buf[0] == '-' || val.buf[0] == '+')) {
 8001248:	bf00      	nop
    while ((offset = mg_json_next(json, offset, &key, &val)) != 0) {
 800124a:	f107 0218 	add.w	r2, r7, #24
 800124e:	f107 0310 	add.w	r3, r7, #16
 8001252:	9300      	str	r3, [sp, #0]
 8001254:	4613      	mov	r3, r2
 8001256:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001258:	f107 0108 	add.w	r1, r7, #8
 800125c:	c903      	ldmia	r1, {r0, r1}
 800125e:	f00c fd37 	bl	800dcd0 <mg_json_next>
 8001262:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8001264:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001266:	2b00      	cmp	r3, #0
 8001268:	d1aa      	bne.n	80011c0 <parse_numbers_recursive+0x18>
        }
    }
}
 800126a:	bf00      	nop
 800126c:	bf00      	nop
 800126e:	3734      	adds	r7, #52	@ 0x34
 8001270:	46bd      	mov	sp, r7
 8001272:	bd90      	pop	{r4, r7, pc}
 8001274:	0803b128 	.word	0x0803b128

08001278 <parse_and_store_numbers>:


void parse_and_store_numbers(const char *json_data, size_t len,
                             float *dest_array, int max_count, int *out_count) {
 8001278:	b580      	push	{r7, lr}
 800127a:	b088      	sub	sp, #32
 800127c:	af02      	add	r7, sp, #8
 800127e:	60f8      	str	r0, [r7, #12]
 8001280:	60b9      	str	r1, [r7, #8]
 8001282:	607a      	str	r2, [r7, #4]
 8001284:	603b      	str	r3, [r7, #0]
    struct mg_str json = mg_str_n(json_data, len);
 8001286:	f107 0310 	add.w	r3, r7, #16
 800128a:	68ba      	ldr	r2, [r7, #8]
 800128c:	68f9      	ldr	r1, [r7, #12]
 800128e:	4618      	mov	r0, r3
 8001290:	f015 fb25 	bl	80168de <mg_str_n>
    *out_count = 0;
 8001294:	6a3b      	ldr	r3, [r7, #32]
 8001296:	2200      	movs	r2, #0
 8001298:	601a      	str	r2, [r3, #0]
    parse_numbers_recursive(json, dest_array, max_count, out_count);
 800129a:	6a3b      	ldr	r3, [r7, #32]
 800129c:	9300      	str	r3, [sp, #0]
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	687a      	ldr	r2, [r7, #4]
 80012a2:	f107 0110 	add.w	r1, r7, #16
 80012a6:	c903      	ldmia	r1, {r0, r1}
 80012a8:	f7ff ff7e 	bl	80011a8 <parse_numbers_recursive>

    if (*out_count == 0) {
 80012ac:	6a3b      	ldr	r3, [r7, #32]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d103      	bne.n	80012bc <parse_and_store_numbers+0x44>
        printf("No numbers found in JSON.\n");
 80012b4:	4807      	ldr	r0, [pc, #28]	@ (80012d4 <parse_and_store_numbers+0x5c>)
 80012b6:	f026 f8fd 	bl	80274b4 <puts>
    } else if (*out_count >= max_count) {
        printf("Warning: hit max count, some values may be skipped.\n");
    }
}
 80012ba:	e007      	b.n	80012cc <parse_and_store_numbers+0x54>
    } else if (*out_count >= max_count) {
 80012bc:	6a3b      	ldr	r3, [r7, #32]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	683a      	ldr	r2, [r7, #0]
 80012c2:	429a      	cmp	r2, r3
 80012c4:	dc02      	bgt.n	80012cc <parse_and_store_numbers+0x54>
        printf("Warning: hit max count, some values may be skipped.\n");
 80012c6:	4804      	ldr	r0, [pc, #16]	@ (80012d8 <parse_and_store_numbers+0x60>)
 80012c8:	f026 f8f4 	bl	80274b4 <puts>
}
 80012cc:	bf00      	nop
 80012ce:	3718      	adds	r7, #24
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	08029b60 	.word	0x08029b60
 80012d8:	08029b7c 	.word	0x08029b7c

080012dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b088      	sub	sp, #32
 80012e0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012e2:	f000 fe59 	bl	8001f98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012e6:	f000 f889 	bl	80013fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012ea:	f000 f9e7 	bl	80016bc <MX_GPIO_Init>
  MX_ETH_Init();
 80012ee:	f000 f8f7 	bl	80014e0 <MX_ETH_Init>
  MX_RNG_Init();
 80012f2:	f000 f981 	bl	80015f8 <MX_RNG_Init>
  MX_USART3_UART_Init();
 80012f6:	f000 f995 	bl	8001624 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 80012fa:	f000 f93d 	bl	8001578 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  mongoose_init();
 80012fe:	f024 fa99 	bl	8025834 <mongoose_init>
  uint32_t lastWriteTime = 0;
 8001302:	2300      	movs	r3, #0
 8001304:	617b      	str	r3, [r7, #20]
  uint32_t lastHttpPollTime = 0;
 8001306:	2300      	movs	r3, #0
 8001308:	60fb      	str	r3, [r7, #12]
  for (;;) {
    mongoose_poll();
 800130a:	f024 faf5 	bl	80258f8 <mongoose_poll>

    uint32_t now = HAL_GetTick();
 800130e:	f000 fec9 	bl	80020a4 <HAL_GetTick>
 8001312:	60b8      	str	r0, [r7, #8]
    if (now - lastWriteTime >= 10000) {
 8001314:	68ba      	ldr	r2, [r7, #8]
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	f242 720f 	movw	r2, #9999	@ 0x270f
 800131e:	4293      	cmp	r3, r2
 8001320:	d91a      	bls.n	8001358 <main+0x7c>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET); // Turn ON LED to indicate write
 8001322:	2201      	movs	r2, #1
 8001324:	2101      	movs	r1, #1
 8001326:	482d      	ldr	r0, [pc, #180]	@ (80013dc <main+0x100>)
 8001328:	f001 fe04 	bl	8002f34 <HAL_GPIO_WritePin>
      uint32_t start = HAL_GetTick();
 800132c:	f000 feba 	bl	80020a4 <HAL_GetTick>
 8001330:	6078      	str	r0, [r7, #4]
      write_snapshot_to_nfc(); // Takes ~800ms
 8001332:	f7ff fd75 	bl	8000e20 <write_snapshot_to_nfc>

      uint32_t duration = HAL_GetTick() - start;
 8001336:	f000 feb5 	bl	80020a4 <HAL_GetTick>
 800133a:	4602      	mov	r2, r0
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	1ad3      	subs	r3, r2, r3
 8001340:	603b      	str	r3, [r7, #0]
      printf("NFC write duration: %lu ms\r\n", duration);
 8001342:	6839      	ldr	r1, [r7, #0]
 8001344:	4826      	ldr	r0, [pc, #152]	@ (80013e0 <main+0x104>)
 8001346:	f026 f811 	bl	802736c <iprintf>

      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET); // Turn OFF LED after write
 800134a:	2200      	movs	r2, #0
 800134c:	2101      	movs	r1, #1
 800134e:	4823      	ldr	r0, [pc, #140]	@ (80013dc <main+0x100>)
 8001350:	f001 fdf0 	bl	8002f34 <HAL_GPIO_WritePin>
      lastWriteTime = now;
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	617b      	str	r3, [r7, #20]
    }

    if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)){
 8001358:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800135c:	4821      	ldr	r0, [pc, #132]	@ (80013e4 <main+0x108>)
 800135e:	f001 fdd1 	bl	8002f04 <HAL_GPIO_ReadPin>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d0d0      	beq.n	800130a <main+0x2e>
    	HAL_Delay(500);
 8001368:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800136c:	f000 fea6 	bl	80020bc <HAL_Delay>
    	glue_update_state();
 8001370:	f023 fd1a 	bl	8024da8 <glue_update_state>
        wait_for_network_ready();
 8001374:	f7ff fcba 	bl	8000cec <wait_for_network_ready>
    	perform_http_data_read();
 8001378:	f7ff fc66 	bl	8000c48 <perform_http_data_read>
    	HAL_Delay(1000);
 800137c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001380:	f000 fe9c 	bl	80020bc <HAL_Delay>
    	parse_and_store_numbers(response_buf, strlen(response_buf), extracted_numbers, MAX_EXTRACTED_NUMBERS, &number_count);
 8001384:	4818      	ldr	r0, [pc, #96]	@ (80013e8 <main+0x10c>)
 8001386:	f7ff f823 	bl	80003d0 <strlen>
 800138a:	4601      	mov	r1, r0
 800138c:	4b17      	ldr	r3, [pc, #92]	@ (80013ec <main+0x110>)
 800138e:	9300      	str	r3, [sp, #0]
 8001390:	2340      	movs	r3, #64	@ 0x40
 8001392:	4a17      	ldr	r2, [pc, #92]	@ (80013f0 <main+0x114>)
 8001394:	4814      	ldr	r0, [pc, #80]	@ (80013e8 <main+0x10c>)
 8001396:	f7ff ff6f 	bl	8001278 <parse_and_store_numbers>
    	printf("Parsed %d numbers:\n", number_count);
 800139a:	4b14      	ldr	r3, [pc, #80]	@ (80013ec <main+0x110>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4619      	mov	r1, r3
 80013a0:	4814      	ldr	r0, [pc, #80]	@ (80013f4 <main+0x118>)
 80013a2:	f025 ffe3 	bl	802736c <iprintf>
    	for (int i = 0; i < number_count; i++) {
 80013a6:	2300      	movs	r3, #0
 80013a8:	613b      	str	r3, [r7, #16]
 80013aa:	e010      	b.n	80013ce <main+0xf2>
    	    printf("Value %d: %.3f\r\n", i, extracted_numbers[i]);
 80013ac:	4a10      	ldr	r2, [pc, #64]	@ (80013f0 <main+0x114>)
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	009b      	lsls	r3, r3, #2
 80013b2:	4413      	add	r3, r2
 80013b4:	edd3 7a00 	vldr	s15, [r3]
 80013b8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80013bc:	ec53 2b17 	vmov	r2, r3, d7
 80013c0:	6939      	ldr	r1, [r7, #16]
 80013c2:	480d      	ldr	r0, [pc, #52]	@ (80013f8 <main+0x11c>)
 80013c4:	f025 ffd2 	bl	802736c <iprintf>
    	for (int i = 0; i < number_count; i++) {
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	3301      	adds	r3, #1
 80013cc:	613b      	str	r3, [r7, #16]
 80013ce:	4b07      	ldr	r3, [pc, #28]	@ (80013ec <main+0x110>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	693a      	ldr	r2, [r7, #16]
 80013d4:	429a      	cmp	r2, r3
 80013d6:	dbe9      	blt.n	80013ac <main+0xd0>
  for (;;) {
 80013d8:	e797      	b.n	800130a <main+0x2e>
 80013da:	bf00      	nop
 80013dc:	58020400 	.word	0x58020400
 80013e0:	08029bf4 	.word	0x08029bf4
 80013e4:	58020800 	.word	0x58020800
 80013e8:	24001238 	.word	0x24001238
 80013ec:	24002340 	.word	0x24002340
 80013f0:	24002240 	.word	0x24002240
 80013f4:	08029c14 	.word	0x08029c14
 80013f8:	08029c28 	.word	0x08029c28

080013fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b09c      	sub	sp, #112	@ 0x70
 8001400:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001402:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001406:	224c      	movs	r2, #76	@ 0x4c
 8001408:	2100      	movs	r1, #0
 800140a:	4618      	mov	r0, r3
 800140c:	f026 f95c 	bl	80276c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001410:	1d3b      	adds	r3, r7, #4
 8001412:	2220      	movs	r2, #32
 8001414:	2100      	movs	r1, #0
 8001416:	4618      	mov	r0, r3
 8001418:	f026 f956 	bl	80276c8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800141c:	2002      	movs	r0, #2
 800141e:	f002 fa59 	bl	80038d4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001422:	2300      	movs	r3, #0
 8001424:	603b      	str	r3, [r7, #0]
 8001426:	4b2d      	ldr	r3, [pc, #180]	@ (80014dc <SystemClock_Config+0xe0>)
 8001428:	699b      	ldr	r3, [r3, #24]
 800142a:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800142e:	4a2b      	ldr	r2, [pc, #172]	@ (80014dc <SystemClock_Config+0xe0>)
 8001430:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001434:	6193      	str	r3, [r2, #24]
 8001436:	4b29      	ldr	r3, [pc, #164]	@ (80014dc <SystemClock_Config+0xe0>)
 8001438:	699b      	ldr	r3, [r3, #24]
 800143a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800143e:	603b      	str	r3, [r7, #0]
 8001440:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001442:	bf00      	nop
 8001444:	4b25      	ldr	r3, [pc, #148]	@ (80014dc <SystemClock_Config+0xe0>)
 8001446:	699b      	ldr	r3, [r3, #24]
 8001448:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800144c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001450:	d1f8      	bne.n	8001444 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8001452:	2322      	movs	r3, #34	@ 0x22
 8001454:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001456:	2301      	movs	r3, #1
 8001458:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 800145a:	2340      	movs	r3, #64	@ 0x40
 800145c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800145e:	2301      	movs	r3, #1
 8001460:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001462:	2302      	movs	r3, #2
 8001464:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001466:	2300      	movs	r3, #0
 8001468:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800146a:	2304      	movs	r3, #4
 800146c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 800146e:	230c      	movs	r3, #12
 8001470:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8001472:	2301      	movs	r3, #1
 8001474:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001476:	2304      	movs	r3, #4
 8001478:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800147a:	2302      	movs	r3, #2
 800147c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800147e:	230c      	movs	r3, #12
 8001480:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001482:	2300      	movs	r3, #0
 8001484:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001486:	2300      	movs	r3, #0
 8001488:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800148a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800148e:	4618      	mov	r0, r3
 8001490:	f002 fa5a 	bl	8003948 <HAL_RCC_OscConfig>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800149a:	f000 f9fd 	bl	8001898 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800149e:	233f      	movs	r3, #63	@ 0x3f
 80014a0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014a2:	2303      	movs	r3, #3
 80014a4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80014a6:	2300      	movs	r3, #0
 80014a8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80014aa:	2308      	movs	r3, #8
 80014ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80014ae:	2340      	movs	r3, #64	@ 0x40
 80014b0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80014b2:	2340      	movs	r3, #64	@ 0x40
 80014b4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80014b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80014ba:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80014bc:	2340      	movs	r3, #64	@ 0x40
 80014be:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80014c0:	1d3b      	adds	r3, r7, #4
 80014c2:	2101      	movs	r1, #1
 80014c4:	4618      	mov	r0, r3
 80014c6:	f002 fe19 	bl	80040fc <HAL_RCC_ClockConfig>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 80014d0:	f000 f9e2 	bl	8001898 <Error_Handler>
  }
}
 80014d4:	bf00      	nop
 80014d6:	3770      	adds	r7, #112	@ 0x70
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	58024800 	.word	0x58024800

080014e0 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80014e4:	4b1e      	ldr	r3, [pc, #120]	@ (8001560 <MX_ETH_Init+0x80>)
 80014e6:	4a1f      	ldr	r2, [pc, #124]	@ (8001564 <MX_ETH_Init+0x84>)
 80014e8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80014ea:	4b1f      	ldr	r3, [pc, #124]	@ (8001568 <MX_ETH_Init+0x88>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80014f0:	4b1d      	ldr	r3, [pc, #116]	@ (8001568 <MX_ETH_Init+0x88>)
 80014f2:	2280      	movs	r2, #128	@ 0x80
 80014f4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80014f6:	4b1c      	ldr	r3, [pc, #112]	@ (8001568 <MX_ETH_Init+0x88>)
 80014f8:	22e1      	movs	r2, #225	@ 0xe1
 80014fa:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80014fc:	4b1a      	ldr	r3, [pc, #104]	@ (8001568 <MX_ETH_Init+0x88>)
 80014fe:	2200      	movs	r2, #0
 8001500:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8001502:	4b19      	ldr	r3, [pc, #100]	@ (8001568 <MX_ETH_Init+0x88>)
 8001504:	2200      	movs	r2, #0
 8001506:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001508:	4b17      	ldr	r3, [pc, #92]	@ (8001568 <MX_ETH_Init+0x88>)
 800150a:	2200      	movs	r2, #0
 800150c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800150e:	4b14      	ldr	r3, [pc, #80]	@ (8001560 <MX_ETH_Init+0x80>)
 8001510:	4a15      	ldr	r2, [pc, #84]	@ (8001568 <MX_ETH_Init+0x88>)
 8001512:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001514:	4b12      	ldr	r3, [pc, #72]	@ (8001560 <MX_ETH_Init+0x80>)
 8001516:	2201      	movs	r2, #1
 8001518:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800151a:	4b11      	ldr	r3, [pc, #68]	@ (8001560 <MX_ETH_Init+0x80>)
 800151c:	4a13      	ldr	r2, [pc, #76]	@ (800156c <MX_ETH_Init+0x8c>)
 800151e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001520:	4b0f      	ldr	r3, [pc, #60]	@ (8001560 <MX_ETH_Init+0x80>)
 8001522:	4a13      	ldr	r2, [pc, #76]	@ (8001570 <MX_ETH_Init+0x90>)
 8001524:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8001526:	4b0e      	ldr	r3, [pc, #56]	@ (8001560 <MX_ETH_Init+0x80>)
 8001528:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800152c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800152e:	480c      	ldr	r0, [pc, #48]	@ (8001560 <MX_ETH_Init+0x80>)
 8001530:	f000 ff0c 	bl	800234c <HAL_ETH_Init>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 800153a:	f000 f9ad 	bl	8001898 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800153e:	2238      	movs	r2, #56	@ 0x38
 8001540:	2100      	movs	r1, #0
 8001542:	480c      	ldr	r0, [pc, #48]	@ (8001574 <MX_ETH_Init+0x94>)
 8001544:	f026 f8c0 	bl	80276c8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001548:	4b0a      	ldr	r3, [pc, #40]	@ (8001574 <MX_ETH_Init+0x94>)
 800154a:	2221      	movs	r2, #33	@ 0x21
 800154c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800154e:	4b09      	ldr	r3, [pc, #36]	@ (8001574 <MX_ETH_Init+0x94>)
 8001550:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001554:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001556:	4b07      	ldr	r3, [pc, #28]	@ (8001574 <MX_ETH_Init+0x94>)
 8001558:	2200      	movs	r2, #0
 800155a:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800155c:	bf00      	nop
 800155e:	bd80      	pop	{r7, pc}
 8001560:	2400108c 	.word	0x2400108c
 8001564:	40028000 	.word	0x40028000
 8001568:	24002344 	.word	0x24002344
 800156c:	24000fd8 	.word	0x24000fd8
 8001570:	24000f78 	.word	0x24000f78
 8001574:	24001054 	.word	0x24001054

08001578 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800157c:	4b1b      	ldr	r3, [pc, #108]	@ (80015ec <MX_I2C1_Init+0x74>)
 800157e:	4a1c      	ldr	r2, [pc, #112]	@ (80015f0 <MX_I2C1_Init+0x78>)
 8001580:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 8001582:	4b1a      	ldr	r3, [pc, #104]	@ (80015ec <MX_I2C1_Init+0x74>)
 8001584:	4a1b      	ldr	r2, [pc, #108]	@ (80015f4 <MX_I2C1_Init+0x7c>)
 8001586:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001588:	4b18      	ldr	r3, [pc, #96]	@ (80015ec <MX_I2C1_Init+0x74>)
 800158a:	2200      	movs	r2, #0
 800158c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800158e:	4b17      	ldr	r3, [pc, #92]	@ (80015ec <MX_I2C1_Init+0x74>)
 8001590:	2201      	movs	r2, #1
 8001592:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001594:	4b15      	ldr	r3, [pc, #84]	@ (80015ec <MX_I2C1_Init+0x74>)
 8001596:	2200      	movs	r2, #0
 8001598:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800159a:	4b14      	ldr	r3, [pc, #80]	@ (80015ec <MX_I2C1_Init+0x74>)
 800159c:	2200      	movs	r2, #0
 800159e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80015a0:	4b12      	ldr	r3, [pc, #72]	@ (80015ec <MX_I2C1_Init+0x74>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015a6:	4b11      	ldr	r3, [pc, #68]	@ (80015ec <MX_I2C1_Init+0x74>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015ac:	4b0f      	ldr	r3, [pc, #60]	@ (80015ec <MX_I2C1_Init+0x74>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015b2:	480e      	ldr	r0, [pc, #56]	@ (80015ec <MX_I2C1_Init+0x74>)
 80015b4:	f001 fcd8 	bl	8002f68 <HAL_I2C_Init>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80015be:	f000 f96b 	bl	8001898 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80015c2:	2100      	movs	r1, #0
 80015c4:	4809      	ldr	r0, [pc, #36]	@ (80015ec <MX_I2C1_Init+0x74>)
 80015c6:	f002 f8ed 	bl	80037a4 <HAL_I2CEx_ConfigAnalogFilter>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80015d0:	f000 f962 	bl	8001898 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80015d4:	2100      	movs	r1, #0
 80015d6:	4805      	ldr	r0, [pc, #20]	@ (80015ec <MX_I2C1_Init+0x74>)
 80015d8:	f002 f92f 	bl	800383a <HAL_I2CEx_ConfigDigitalFilter>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80015e2:	f000 f959 	bl	8001898 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015e6:	bf00      	nop
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	2400113c 	.word	0x2400113c
 80015f0:	40005400 	.word	0x40005400
 80015f4:	20303e5d 	.word	0x20303e5d

080015f8 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80015fc:	4b07      	ldr	r3, [pc, #28]	@ (800161c <MX_RNG_Init+0x24>)
 80015fe:	4a08      	ldr	r2, [pc, #32]	@ (8001620 <MX_RNG_Init+0x28>)
 8001600:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8001602:	4b06      	ldr	r3, [pc, #24]	@ (800161c <MX_RNG_Init+0x24>)
 8001604:	2200      	movs	r2, #0
 8001606:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001608:	4804      	ldr	r0, [pc, #16]	@ (800161c <MX_RNG_Init+0x24>)
 800160a:	f004 fec5 	bl	8006398 <HAL_RNG_Init>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8001614:	f000 f940 	bl	8001898 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001618:	bf00      	nop
 800161a:	bd80      	pop	{r7, pc}
 800161c:	24001190 	.word	0x24001190
 8001620:	48021800 	.word	0x48021800

08001624 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001628:	4b22      	ldr	r3, [pc, #136]	@ (80016b4 <MX_USART3_UART_Init+0x90>)
 800162a:	4a23      	ldr	r2, [pc, #140]	@ (80016b8 <MX_USART3_UART_Init+0x94>)
 800162c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800162e:	4b21      	ldr	r3, [pc, #132]	@ (80016b4 <MX_USART3_UART_Init+0x90>)
 8001630:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001634:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001636:	4b1f      	ldr	r3, [pc, #124]	@ (80016b4 <MX_USART3_UART_Init+0x90>)
 8001638:	2200      	movs	r2, #0
 800163a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800163c:	4b1d      	ldr	r3, [pc, #116]	@ (80016b4 <MX_USART3_UART_Init+0x90>)
 800163e:	2200      	movs	r2, #0
 8001640:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001642:	4b1c      	ldr	r3, [pc, #112]	@ (80016b4 <MX_USART3_UART_Init+0x90>)
 8001644:	2200      	movs	r2, #0
 8001646:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001648:	4b1a      	ldr	r3, [pc, #104]	@ (80016b4 <MX_USART3_UART_Init+0x90>)
 800164a:	220c      	movs	r2, #12
 800164c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800164e:	4b19      	ldr	r3, [pc, #100]	@ (80016b4 <MX_USART3_UART_Init+0x90>)
 8001650:	2200      	movs	r2, #0
 8001652:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001654:	4b17      	ldr	r3, [pc, #92]	@ (80016b4 <MX_USART3_UART_Init+0x90>)
 8001656:	2200      	movs	r2, #0
 8001658:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800165a:	4b16      	ldr	r3, [pc, #88]	@ (80016b4 <MX_USART3_UART_Init+0x90>)
 800165c:	2200      	movs	r2, #0
 800165e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001660:	4b14      	ldr	r3, [pc, #80]	@ (80016b4 <MX_USART3_UART_Init+0x90>)
 8001662:	2200      	movs	r2, #0
 8001664:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001666:	4b13      	ldr	r3, [pc, #76]	@ (80016b4 <MX_USART3_UART_Init+0x90>)
 8001668:	2200      	movs	r2, #0
 800166a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800166c:	4811      	ldr	r0, [pc, #68]	@ (80016b4 <MX_USART3_UART_Init+0x90>)
 800166e:	f005 f83c 	bl	80066ea <HAL_UART_Init>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001678:	f000 f90e 	bl	8001898 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800167c:	2100      	movs	r1, #0
 800167e:	480d      	ldr	r0, [pc, #52]	@ (80016b4 <MX_USART3_UART_Init+0x90>)
 8001680:	f006 f9d7 	bl	8007a32 <HAL_UARTEx_SetTxFifoThreshold>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800168a:	f000 f905 	bl	8001898 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800168e:	2100      	movs	r1, #0
 8001690:	4808      	ldr	r0, [pc, #32]	@ (80016b4 <MX_USART3_UART_Init+0x90>)
 8001692:	f006 fa0c 	bl	8007aae <HAL_UARTEx_SetRxFifoThreshold>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800169c:	f000 f8fc 	bl	8001898 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80016a0:	4804      	ldr	r0, [pc, #16]	@ (80016b4 <MX_USART3_UART_Init+0x90>)
 80016a2:	f006 f98d 	bl	80079c0 <HAL_UARTEx_DisableFifoMode>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80016ac:	f000 f8f4 	bl	8001898 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80016b0:	bf00      	nop
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	240011a4 	.word	0x240011a4
 80016b8:	40004800 	.word	0x40004800

080016bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b08c      	sub	sp, #48	@ 0x30
 80016c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c2:	f107 031c 	add.w	r3, r7, #28
 80016c6:	2200      	movs	r2, #0
 80016c8:	601a      	str	r2, [r3, #0]
 80016ca:	605a      	str	r2, [r3, #4]
 80016cc:	609a      	str	r2, [r3, #8]
 80016ce:	60da      	str	r2, [r3, #12]
 80016d0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016d2:	4b6a      	ldr	r3, [pc, #424]	@ (800187c <MX_GPIO_Init+0x1c0>)
 80016d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016d8:	4a68      	ldr	r2, [pc, #416]	@ (800187c <MX_GPIO_Init+0x1c0>)
 80016da:	f043 0304 	orr.w	r3, r3, #4
 80016de:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016e2:	4b66      	ldr	r3, [pc, #408]	@ (800187c <MX_GPIO_Init+0x1c0>)
 80016e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016e8:	f003 0304 	and.w	r3, r3, #4
 80016ec:	61bb      	str	r3, [r7, #24]
 80016ee:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016f0:	4b62      	ldr	r3, [pc, #392]	@ (800187c <MX_GPIO_Init+0x1c0>)
 80016f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016f6:	4a61      	ldr	r2, [pc, #388]	@ (800187c <MX_GPIO_Init+0x1c0>)
 80016f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80016fc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001700:	4b5e      	ldr	r3, [pc, #376]	@ (800187c <MX_GPIO_Init+0x1c0>)
 8001702:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001706:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800170a:	617b      	str	r3, [r7, #20]
 800170c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800170e:	4b5b      	ldr	r3, [pc, #364]	@ (800187c <MX_GPIO_Init+0x1c0>)
 8001710:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001714:	4a59      	ldr	r2, [pc, #356]	@ (800187c <MX_GPIO_Init+0x1c0>)
 8001716:	f043 0301 	orr.w	r3, r3, #1
 800171a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800171e:	4b57      	ldr	r3, [pc, #348]	@ (800187c <MX_GPIO_Init+0x1c0>)
 8001720:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001724:	f003 0301 	and.w	r3, r3, #1
 8001728:	613b      	str	r3, [r7, #16]
 800172a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800172c:	4b53      	ldr	r3, [pc, #332]	@ (800187c <MX_GPIO_Init+0x1c0>)
 800172e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001732:	4a52      	ldr	r2, [pc, #328]	@ (800187c <MX_GPIO_Init+0x1c0>)
 8001734:	f043 0302 	orr.w	r3, r3, #2
 8001738:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800173c:	4b4f      	ldr	r3, [pc, #316]	@ (800187c <MX_GPIO_Init+0x1c0>)
 800173e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001742:	f003 0302 	and.w	r3, r3, #2
 8001746:	60fb      	str	r3, [r7, #12]
 8001748:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800174a:	4b4c      	ldr	r3, [pc, #304]	@ (800187c <MX_GPIO_Init+0x1c0>)
 800174c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001750:	4a4a      	ldr	r2, [pc, #296]	@ (800187c <MX_GPIO_Init+0x1c0>)
 8001752:	f043 0308 	orr.w	r3, r3, #8
 8001756:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800175a:	4b48      	ldr	r3, [pc, #288]	@ (800187c <MX_GPIO_Init+0x1c0>)
 800175c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001760:	f003 0308 	and.w	r3, r3, #8
 8001764:	60bb      	str	r3, [r7, #8]
 8001766:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001768:	4b44      	ldr	r3, [pc, #272]	@ (800187c <MX_GPIO_Init+0x1c0>)
 800176a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800176e:	4a43      	ldr	r2, [pc, #268]	@ (800187c <MX_GPIO_Init+0x1c0>)
 8001770:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001774:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001778:	4b40      	ldr	r3, [pc, #256]	@ (800187c <MX_GPIO_Init+0x1c0>)
 800177a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800177e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001782:	607b      	str	r3, [r7, #4]
 8001784:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001786:	4b3d      	ldr	r3, [pc, #244]	@ (800187c <MX_GPIO_Init+0x1c0>)
 8001788:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800178c:	4a3b      	ldr	r2, [pc, #236]	@ (800187c <MX_GPIO_Init+0x1c0>)
 800178e:	f043 0310 	orr.w	r3, r3, #16
 8001792:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001796:	4b39      	ldr	r3, [pc, #228]	@ (800187c <MX_GPIO_Init+0x1c0>)
 8001798:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800179c:	f003 0310 	and.w	r3, r3, #16
 80017a0:	603b      	str	r3, [r7, #0]
 80017a2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 80017a4:	2200      	movs	r2, #0
 80017a6:	f244 0101 	movw	r1, #16385	@ 0x4001
 80017aa:	4835      	ldr	r0, [pc, #212]	@ (8001880 <MX_GPIO_Init+0x1c4>)
 80017ac:	f001 fbc2 	bl	8002f34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80017b0:	2200      	movs	r2, #0
 80017b2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80017b6:	4833      	ldr	r0, [pc, #204]	@ (8001884 <MX_GPIO_Init+0x1c8>)
 80017b8:	f001 fbbc 	bl	8002f34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 80017bc:	2200      	movs	r2, #0
 80017be:	2102      	movs	r1, #2
 80017c0:	4831      	ldr	r0, [pc, #196]	@ (8001888 <MX_GPIO_Init+0x1cc>)
 80017c2:	f001 fbb7 	bl	8002f34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80017c6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80017ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017cc:	2300      	movs	r3, #0
 80017ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d0:	2300      	movs	r3, #0
 80017d2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80017d4:	f107 031c 	add.w	r3, r7, #28
 80017d8:	4619      	mov	r1, r3
 80017da:	482c      	ldr	r0, [pc, #176]	@ (800188c <MX_GPIO_Init+0x1d0>)
 80017dc:	f001 f9ea 	bl	8002bb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 80017e0:	f244 0301 	movw	r3, #16385	@ 0x4001
 80017e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017e6:	2301      	movs	r3, #1
 80017e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ea:	2300      	movs	r3, #0
 80017ec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ee:	2300      	movs	r3, #0
 80017f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017f2:	f107 031c 	add.w	r3, r7, #28
 80017f6:	4619      	mov	r1, r3
 80017f8:	4821      	ldr	r0, [pc, #132]	@ (8001880 <MX_GPIO_Init+0x1c4>)
 80017fa:	f001 f9db 	bl	8002bb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 80017fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001802:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001804:	2301      	movs	r3, #1
 8001806:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001808:	2300      	movs	r3, #0
 800180a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800180c:	2300      	movs	r3, #0
 800180e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001810:	f107 031c 	add.w	r3, r7, #28
 8001814:	4619      	mov	r1, r3
 8001816:	481b      	ldr	r0, [pc, #108]	@ (8001884 <MX_GPIO_Init+0x1c8>)
 8001818:	f001 f9cc 	bl	8002bb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 800181c:	2380      	movs	r3, #128	@ 0x80
 800181e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001820:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001824:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001826:	2300      	movs	r3, #0
 8001828:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 800182a:	f107 031c 	add.w	r3, r7, #28
 800182e:	4619      	mov	r1, r3
 8001830:	4817      	ldr	r0, [pc, #92]	@ (8001890 <MX_GPIO_Init+0x1d4>)
 8001832:	f001 f9bf 	bl	8002bb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8001836:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800183a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800183c:	2302      	movs	r3, #2
 800183e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001840:	2300      	movs	r3, #0
 8001842:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001844:	2300      	movs	r3, #0
 8001846:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8001848:	230a      	movs	r3, #10
 800184a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 800184c:	f107 031c 	add.w	r3, r7, #28
 8001850:	4619      	mov	r1, r3
 8001852:	4810      	ldr	r0, [pc, #64]	@ (8001894 <MX_GPIO_Init+0x1d8>)
 8001854:	f001 f9ae 	bl	8002bb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8001858:	2302      	movs	r3, #2
 800185a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800185c:	2301      	movs	r3, #1
 800185e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001860:	2300      	movs	r3, #0
 8001862:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001864:	2300      	movs	r3, #0
 8001866:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8001868:	f107 031c 	add.w	r3, r7, #28
 800186c:	4619      	mov	r1, r3
 800186e:	4806      	ldr	r0, [pc, #24]	@ (8001888 <MX_GPIO_Init+0x1cc>)
 8001870:	f001 f9a0 	bl	8002bb4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8001874:	bf00      	nop
 8001876:	3730      	adds	r7, #48	@ 0x30
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	58024400 	.word	0x58024400
 8001880:	58020400 	.word	0x58020400
 8001884:	58020c00 	.word	0x58020c00
 8001888:	58021000 	.word	0x58021000
 800188c:	58020800 	.word	0x58020800
 8001890:	58021800 	.word	0x58021800
 8001894:	58020000 	.word	0x58020000

08001898 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800189c:	b672      	cpsid	i
}
 800189e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018a0:	bf00      	nop
 80018a2:	e7fd      	b.n	80018a0 <Error_Handler+0x8>

080018a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018aa:	4b0a      	ldr	r3, [pc, #40]	@ (80018d4 <HAL_MspInit+0x30>)
 80018ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80018b0:	4a08      	ldr	r2, [pc, #32]	@ (80018d4 <HAL_MspInit+0x30>)
 80018b2:	f043 0302 	orr.w	r3, r3, #2
 80018b6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80018ba:	4b06      	ldr	r3, [pc, #24]	@ (80018d4 <HAL_MspInit+0x30>)
 80018bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80018c0:	f003 0302 	and.w	r3, r3, #2
 80018c4:	607b      	str	r3, [r7, #4]
 80018c6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018c8:	bf00      	nop
 80018ca:	370c      	adds	r7, #12
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr
 80018d4:	58024400 	.word	0x58024400

080018d8 <HAL_ETH_MspInit>:
  * This function configures the hardware resources used in this example
  * @param heth: ETH handle pointer
  * @retval None
  */
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b08e      	sub	sp, #56	@ 0x38
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018e4:	2200      	movs	r2, #0
 80018e6:	601a      	str	r2, [r3, #0]
 80018e8:	605a      	str	r2, [r3, #4]
 80018ea:	609a      	str	r2, [r3, #8]
 80018ec:	60da      	str	r2, [r3, #12]
 80018ee:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a5d      	ldr	r2, [pc, #372]	@ (8001a6c <HAL_ETH_MspInit+0x194>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	f040 80b3 	bne.w	8001a62 <HAL_ETH_MspInit+0x18a>
  {
    /* USER CODE BEGIN ETH_MspInit 0 */

    /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80018fc:	4b5c      	ldr	r3, [pc, #368]	@ (8001a70 <HAL_ETH_MspInit+0x198>)
 80018fe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001902:	4a5b      	ldr	r2, [pc, #364]	@ (8001a70 <HAL_ETH_MspInit+0x198>)
 8001904:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001908:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800190c:	4b58      	ldr	r3, [pc, #352]	@ (8001a70 <HAL_ETH_MspInit+0x198>)
 800190e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001912:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001916:	623b      	str	r3, [r7, #32]
 8001918:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800191a:	4b55      	ldr	r3, [pc, #340]	@ (8001a70 <HAL_ETH_MspInit+0x198>)
 800191c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001920:	4a53      	ldr	r2, [pc, #332]	@ (8001a70 <HAL_ETH_MspInit+0x198>)
 8001922:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001926:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800192a:	4b51      	ldr	r3, [pc, #324]	@ (8001a70 <HAL_ETH_MspInit+0x198>)
 800192c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001930:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001934:	61fb      	str	r3, [r7, #28]
 8001936:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8001938:	4b4d      	ldr	r3, [pc, #308]	@ (8001a70 <HAL_ETH_MspInit+0x198>)
 800193a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800193e:	4a4c      	ldr	r2, [pc, #304]	@ (8001a70 <HAL_ETH_MspInit+0x198>)
 8001940:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001944:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001948:	4b49      	ldr	r3, [pc, #292]	@ (8001a70 <HAL_ETH_MspInit+0x198>)
 800194a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800194e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001952:	61bb      	str	r3, [r7, #24]
 8001954:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001956:	4b46      	ldr	r3, [pc, #280]	@ (8001a70 <HAL_ETH_MspInit+0x198>)
 8001958:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800195c:	4a44      	ldr	r2, [pc, #272]	@ (8001a70 <HAL_ETH_MspInit+0x198>)
 800195e:	f043 0304 	orr.w	r3, r3, #4
 8001962:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001966:	4b42      	ldr	r3, [pc, #264]	@ (8001a70 <HAL_ETH_MspInit+0x198>)
 8001968:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800196c:	f003 0304 	and.w	r3, r3, #4
 8001970:	617b      	str	r3, [r7, #20]
 8001972:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001974:	4b3e      	ldr	r3, [pc, #248]	@ (8001a70 <HAL_ETH_MspInit+0x198>)
 8001976:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800197a:	4a3d      	ldr	r2, [pc, #244]	@ (8001a70 <HAL_ETH_MspInit+0x198>)
 800197c:	f043 0301 	orr.w	r3, r3, #1
 8001980:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001984:	4b3a      	ldr	r3, [pc, #232]	@ (8001a70 <HAL_ETH_MspInit+0x198>)
 8001986:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800198a:	f003 0301 	and.w	r3, r3, #1
 800198e:	613b      	str	r3, [r7, #16]
 8001990:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001992:	4b37      	ldr	r3, [pc, #220]	@ (8001a70 <HAL_ETH_MspInit+0x198>)
 8001994:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001998:	4a35      	ldr	r2, [pc, #212]	@ (8001a70 <HAL_ETH_MspInit+0x198>)
 800199a:	f043 0302 	orr.w	r3, r3, #2
 800199e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80019a2:	4b33      	ldr	r3, [pc, #204]	@ (8001a70 <HAL_ETH_MspInit+0x198>)
 80019a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019a8:	f003 0302 	and.w	r3, r3, #2
 80019ac:	60fb      	str	r3, [r7, #12]
 80019ae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80019b0:	4b2f      	ldr	r3, [pc, #188]	@ (8001a70 <HAL_ETH_MspInit+0x198>)
 80019b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019b6:	4a2e      	ldr	r2, [pc, #184]	@ (8001a70 <HAL_ETH_MspInit+0x198>)
 80019b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80019bc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80019c0:	4b2b      	ldr	r3, [pc, #172]	@ (8001a70 <HAL_ETH_MspInit+0x198>)
 80019c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80019ca:	60bb      	str	r3, [r7, #8]
 80019cc:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80019ce:	2332      	movs	r3, #50	@ 0x32
 80019d0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d2:	2302      	movs	r3, #2
 80019d4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d6:	2300      	movs	r3, #0
 80019d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019da:	2300      	movs	r3, #0
 80019dc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80019de:	230b      	movs	r3, #11
 80019e0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019e6:	4619      	mov	r1, r3
 80019e8:	4822      	ldr	r0, [pc, #136]	@ (8001a74 <HAL_ETH_MspInit+0x19c>)
 80019ea:	f001 f8e3 	bl	8002bb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80019ee:	2386      	movs	r3, #134	@ 0x86
 80019f0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f2:	2302      	movs	r3, #2
 80019f4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f6:	2300      	movs	r3, #0
 80019f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019fa:	2300      	movs	r3, #0
 80019fc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80019fe:	230b      	movs	r3, #11
 8001a00:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a02:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a06:	4619      	mov	r1, r3
 8001a08:	481b      	ldr	r0, [pc, #108]	@ (8001a78 <HAL_ETH_MspInit+0x1a0>)
 8001a0a:	f001 f8d3 	bl	8002bb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001a0e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a12:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a14:	2302      	movs	r3, #2
 8001a16:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001a20:	230b      	movs	r3, #11
 8001a22:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001a24:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a28:	4619      	mov	r1, r3
 8001a2a:	4814      	ldr	r0, [pc, #80]	@ (8001a7c <HAL_ETH_MspInit+0x1a4>)
 8001a2c:	f001 f8c2 	bl	8002bb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001a30:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8001a34:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a36:	2302      	movs	r3, #2
 8001a38:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001a42:	230b      	movs	r3, #11
 8001a44:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a46:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	480c      	ldr	r0, [pc, #48]	@ (8001a80 <HAL_ETH_MspInit+0x1a8>)
 8001a4e:	f001 f8b1 	bl	8002bb4 <HAL_GPIO_Init>

    /* ETH interrupt Init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 8001a52:	2200      	movs	r2, #0
 8001a54:	2100      	movs	r1, #0
 8001a56:	203d      	movs	r0, #61	@ 0x3d
 8001a58:	f000 fc43 	bl	80022e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8001a5c:	203d      	movs	r0, #61	@ 0x3d
 8001a5e:	f000 fc5a 	bl	8002316 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ETH_MspInit 1 */

  }

}
 8001a62:	bf00      	nop
 8001a64:	3738      	adds	r7, #56	@ 0x38
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	40028000 	.word	0x40028000
 8001a70:	58024400 	.word	0x58024400
 8001a74:	58020800 	.word	0x58020800
 8001a78:	58020000 	.word	0x58020000
 8001a7c:	58020400 	.word	0x58020400
 8001a80:	58021800 	.word	0x58021800

08001a84 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b0b8      	sub	sp, #224	@ 0xe0
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a8c:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001a90:	2200      	movs	r2, #0
 8001a92:	601a      	str	r2, [r3, #0]
 8001a94:	605a      	str	r2, [r3, #4]
 8001a96:	609a      	str	r2, [r3, #8]
 8001a98:	60da      	str	r2, [r3, #12]
 8001a9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a9c:	f107 0310 	add.w	r3, r7, #16
 8001aa0:	22b8      	movs	r2, #184	@ 0xb8
 8001aa2:	2100      	movs	r1, #0
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f025 fe0f 	bl	80276c8 <memset>
  if(hi2c->Instance==I2C1)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a27      	ldr	r2, [pc, #156]	@ (8001b4c <HAL_I2C_MspInit+0xc8>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d146      	bne.n	8001b42 <HAL_I2C_MspInit+0xbe>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001ab4:	f04f 0208 	mov.w	r2, #8
 8001ab8:	f04f 0300 	mov.w	r3, #0
 8001abc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ac6:	f107 0310 	add.w	r3, r7, #16
 8001aca:	4618      	mov	r0, r3
 8001acc:	f002 fea2 	bl	8004814 <HAL_RCCEx_PeriphCLKConfig>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001ad6:	f7ff fedf 	bl	8001898 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ada:	4b1d      	ldr	r3, [pc, #116]	@ (8001b50 <HAL_I2C_MspInit+0xcc>)
 8001adc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ae0:	4a1b      	ldr	r2, [pc, #108]	@ (8001b50 <HAL_I2C_MspInit+0xcc>)
 8001ae2:	f043 0302 	orr.w	r3, r3, #2
 8001ae6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001aea:	4b19      	ldr	r3, [pc, #100]	@ (8001b50 <HAL_I2C_MspInit+0xcc>)
 8001aec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001af0:	f003 0302 	and.w	r3, r3, #2
 8001af4:	60fb      	str	r3, [r7, #12]
 8001af6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001af8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001afc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b00:	2312      	movs	r3, #18
 8001b02:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b06:	2300      	movs	r3, #0
 8001b08:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b12:	2304      	movs	r3, #4
 8001b14:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b18:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	480d      	ldr	r0, [pc, #52]	@ (8001b54 <HAL_I2C_MspInit+0xd0>)
 8001b20:	f001 f848 	bl	8002bb4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b24:	4b0a      	ldr	r3, [pc, #40]	@ (8001b50 <HAL_I2C_MspInit+0xcc>)
 8001b26:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001b2a:	4a09      	ldr	r2, [pc, #36]	@ (8001b50 <HAL_I2C_MspInit+0xcc>)
 8001b2c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001b30:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001b34:	4b06      	ldr	r3, [pc, #24]	@ (8001b50 <HAL_I2C_MspInit+0xcc>)
 8001b36:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001b3a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b3e:	60bb      	str	r3, [r7, #8]
 8001b40:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001b42:	bf00      	nop
 8001b44:	37e0      	adds	r7, #224	@ 0xe0
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	40005400 	.word	0x40005400
 8001b50:	58024400 	.word	0x58024400
 8001b54:	58020400 	.word	0x58020400

08001b58 <HAL_RNG_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrng: RNG handle pointer
  * @retval None
  */
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b0b2      	sub	sp, #200	@ 0xc8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b60:	f107 0310 	add.w	r3, r7, #16
 8001b64:	22b8      	movs	r2, #184	@ 0xb8
 8001b66:	2100      	movs	r1, #0
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f025 fdad 	bl	80276c8 <memset>
  if(hrng->Instance==RNG)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a14      	ldr	r2, [pc, #80]	@ (8001bc4 <HAL_RNG_MspInit+0x6c>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d121      	bne.n	8001bbc <HAL_RNG_MspInit+0x64>

    /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8001b78:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001b7c:	f04f 0300 	mov.w	r3, #0
 8001b80:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8001b84:	2300      	movs	r3, #0
 8001b86:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b8a:	f107 0310 	add.w	r3, r7, #16
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f002 fe40 	bl	8004814 <HAL_RCCEx_PeriphCLKConfig>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <HAL_RNG_MspInit+0x46>
    {
      Error_Handler();
 8001b9a:	f7ff fe7d 	bl	8001898 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001b9e:	4b0a      	ldr	r3, [pc, #40]	@ (8001bc8 <HAL_RNG_MspInit+0x70>)
 8001ba0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8001ba4:	4a08      	ldr	r2, [pc, #32]	@ (8001bc8 <HAL_RNG_MspInit+0x70>)
 8001ba6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001baa:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8001bae:	4b06      	ldr	r3, [pc, #24]	@ (8001bc8 <HAL_RNG_MspInit+0x70>)
 8001bb0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8001bb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001bb8:	60fb      	str	r3, [r7, #12]
 8001bba:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END RNG_MspInit 1 */

  }

}
 8001bbc:	bf00      	nop
 8001bbe:	37c8      	adds	r7, #200	@ 0xc8
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	48021800 	.word	0x48021800
 8001bc8:	58024400 	.word	0x58024400

08001bcc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b0b8      	sub	sp, #224	@ 0xe0
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd4:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001bd8:	2200      	movs	r2, #0
 8001bda:	601a      	str	r2, [r3, #0]
 8001bdc:	605a      	str	r2, [r3, #4]
 8001bde:	609a      	str	r2, [r3, #8]
 8001be0:	60da      	str	r2, [r3, #12]
 8001be2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001be4:	f107 0310 	add.w	r3, r7, #16
 8001be8:	22b8      	movs	r2, #184	@ 0xb8
 8001bea:	2100      	movs	r1, #0
 8001bec:	4618      	mov	r0, r3
 8001bee:	f025 fd6b 	bl	80276c8 <memset>
  if(huart->Instance==USART3)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a27      	ldr	r2, [pc, #156]	@ (8001c94 <HAL_UART_MspInit+0xc8>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d146      	bne.n	8001c8a <HAL_UART_MspInit+0xbe>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001bfc:	f04f 0202 	mov.w	r2, #2
 8001c00:	f04f 0300 	mov.w	r3, #0
 8001c04:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c0e:	f107 0310 	add.w	r3, r7, #16
 8001c12:	4618      	mov	r0, r3
 8001c14:	f002 fdfe 	bl	8004814 <HAL_RCCEx_PeriphCLKConfig>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001c1e:	f7ff fe3b 	bl	8001898 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001c22:	4b1d      	ldr	r3, [pc, #116]	@ (8001c98 <HAL_UART_MspInit+0xcc>)
 8001c24:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001c28:	4a1b      	ldr	r2, [pc, #108]	@ (8001c98 <HAL_UART_MspInit+0xcc>)
 8001c2a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c2e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001c32:	4b19      	ldr	r3, [pc, #100]	@ (8001c98 <HAL_UART_MspInit+0xcc>)
 8001c34:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001c38:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c3c:	60fb      	str	r3, [r7, #12]
 8001c3e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c40:	4b15      	ldr	r3, [pc, #84]	@ (8001c98 <HAL_UART_MspInit+0xcc>)
 8001c42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c46:	4a14      	ldr	r2, [pc, #80]	@ (8001c98 <HAL_UART_MspInit+0xcc>)
 8001c48:	f043 0308 	orr.w	r3, r3, #8
 8001c4c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001c50:	4b11      	ldr	r3, [pc, #68]	@ (8001c98 <HAL_UART_MspInit+0xcc>)
 8001c52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c56:	f003 0308 	and.w	r3, r3, #8
 8001c5a:	60bb      	str	r3, [r7, #8]
 8001c5c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 8001c5e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001c62:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c66:	2302      	movs	r3, #2
 8001c68:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c72:	2300      	movs	r3, #0
 8001c74:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001c78:	2307      	movs	r3, #7
 8001c7a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c7e:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001c82:	4619      	mov	r1, r3
 8001c84:	4805      	ldr	r0, [pc, #20]	@ (8001c9c <HAL_UART_MspInit+0xd0>)
 8001c86:	f000 ff95 	bl	8002bb4 <HAL_GPIO_Init>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 8001c8a:	bf00      	nop
 8001c8c:	37e0      	adds	r7, #224	@ 0xe0
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	40004800 	.word	0x40004800
 8001c98:	58024400 	.word	0x58024400
 8001c9c:	58020c00 	.word	0x58020c00

08001ca0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ca4:	bf00      	nop
 8001ca6:	e7fd      	b.n	8001ca4 <NMI_Handler+0x4>

08001ca8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cac:	bf00      	nop
 8001cae:	e7fd      	b.n	8001cac <HardFault_Handler+0x4>

08001cb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cb4:	bf00      	nop
 8001cb6:	e7fd      	b.n	8001cb4 <MemManage_Handler+0x4>

08001cb8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cbc:	bf00      	nop
 8001cbe:	e7fd      	b.n	8001cbc <BusFault_Handler+0x4>

08001cc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cc4:	bf00      	nop
 8001cc6:	e7fd      	b.n	8001cc4 <UsageFault_Handler+0x4>

08001cc8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ccc:	bf00      	nop
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr

08001cd6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cd6:	b480      	push	{r7}
 8001cd8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cda:	bf00      	nop
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr

08001ce4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ce8:	bf00      	nop
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr

08001cf2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cf2:	b580      	push	{r7, lr}
 8001cf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cf6:	f000 f9c1 	bl	800207c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cfa:	bf00      	nop
 8001cfc:	bd80      	pop	{r7, pc}

08001cfe <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001cfe:	b480      	push	{r7}
 8001d00:	af00      	add	r7, sp, #0
  return 1;
 8001d02:	2301      	movs	r3, #1
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr

08001d0e <_kill>:

int _kill(int pid, int sig)
{
 8001d0e:	b580      	push	{r7, lr}
 8001d10:	b082      	sub	sp, #8
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	6078      	str	r0, [r7, #4]
 8001d16:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d18:	f025 fdda 	bl	80278d0 <__errno>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2216      	movs	r2, #22
 8001d20:	601a      	str	r2, [r3, #0]
  return -1;
 8001d22:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3708      	adds	r7, #8
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}

08001d2e <_exit>:

void _exit (int status)
{
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	b082      	sub	sp, #8
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d36:	f04f 31ff 	mov.w	r1, #4294967295
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f7ff ffe7 	bl	8001d0e <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d40:	bf00      	nop
 8001d42:	e7fd      	b.n	8001d40 <_exit+0x12>

08001d44 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b086      	sub	sp, #24
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	60f8      	str	r0, [r7, #12]
 8001d4c:	60b9      	str	r1, [r7, #8]
 8001d4e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d50:	2300      	movs	r3, #0
 8001d52:	617b      	str	r3, [r7, #20]
 8001d54:	e00a      	b.n	8001d6c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d56:	f3af 8000 	nop.w
 8001d5a:	4601      	mov	r1, r0
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	1c5a      	adds	r2, r3, #1
 8001d60:	60ba      	str	r2, [r7, #8]
 8001d62:	b2ca      	uxtb	r2, r1
 8001d64:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	3301      	adds	r3, #1
 8001d6a:	617b      	str	r3, [r7, #20]
 8001d6c:	697a      	ldr	r2, [r7, #20]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	429a      	cmp	r2, r3
 8001d72:	dbf0      	blt.n	8001d56 <_read+0x12>
  }

  return len;
 8001d74:	687b      	ldr	r3, [r7, #4]
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3718      	adds	r7, #24
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}

08001d7e <_close>:
  }
  return len;
}

int _close(int file)
{
 8001d7e:	b480      	push	{r7}
 8001d80:	b083      	sub	sp, #12
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d86:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	370c      	adds	r7, #12
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr

08001d96 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d96:	b480      	push	{r7}
 8001d98:	b083      	sub	sp, #12
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	6078      	str	r0, [r7, #4]
 8001d9e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001da6:	605a      	str	r2, [r3, #4]
  return 0;
 8001da8:	2300      	movs	r3, #0
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	370c      	adds	r7, #12
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr

08001db6 <_isatty>:

int _isatty(int file)
{
 8001db6:	b480      	push	{r7}
 8001db8:	b083      	sub	sp, #12
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001dbe:	2301      	movs	r3, #1
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	370c      	adds	r7, #12
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr

08001dcc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b085      	sub	sp, #20
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	60f8      	str	r0, [r7, #12]
 8001dd4:	60b9      	str	r1, [r7, #8]
 8001dd6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3714      	adds	r7, #20
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr
	...

08001de8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b086      	sub	sp, #24
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001df0:	4a14      	ldr	r2, [pc, #80]	@ (8001e44 <_sbrk+0x5c>)
 8001df2:	4b15      	ldr	r3, [pc, #84]	@ (8001e48 <_sbrk+0x60>)
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001dfc:	4b13      	ldr	r3, [pc, #76]	@ (8001e4c <_sbrk+0x64>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d102      	bne.n	8001e0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e04:	4b11      	ldr	r3, [pc, #68]	@ (8001e4c <_sbrk+0x64>)
 8001e06:	4a12      	ldr	r2, [pc, #72]	@ (8001e50 <_sbrk+0x68>)
 8001e08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e0a:	4b10      	ldr	r3, [pc, #64]	@ (8001e4c <_sbrk+0x64>)
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4413      	add	r3, r2
 8001e12:	693a      	ldr	r2, [r7, #16]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d207      	bcs.n	8001e28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e18:	f025 fd5a 	bl	80278d0 <__errno>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	220c      	movs	r2, #12
 8001e20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e22:	f04f 33ff 	mov.w	r3, #4294967295
 8001e26:	e009      	b.n	8001e3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e28:	4b08      	ldr	r3, [pc, #32]	@ (8001e4c <_sbrk+0x64>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e2e:	4b07      	ldr	r3, [pc, #28]	@ (8001e4c <_sbrk+0x64>)
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4413      	add	r3, r2
 8001e36:	4a05      	ldr	r2, [pc, #20]	@ (8001e4c <_sbrk+0x64>)
 8001e38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3718      	adds	r7, #24
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	24050000 	.word	0x24050000
 8001e48:	00000400 	.word	0x00000400
 8001e4c:	2400234c 	.word	0x2400234c
 8001e50:	24005878 	.word	0x24005878

08001e54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001e58:	4b32      	ldr	r3, [pc, #200]	@ (8001f24 <SystemInit+0xd0>)
 8001e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e5e:	4a31      	ldr	r2, [pc, #196]	@ (8001f24 <SystemInit+0xd0>)
 8001e60:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001e64:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001e68:	4b2f      	ldr	r3, [pc, #188]	@ (8001f28 <SystemInit+0xd4>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 030f 	and.w	r3, r3, #15
 8001e70:	2b06      	cmp	r3, #6
 8001e72:	d807      	bhi.n	8001e84 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001e74:	4b2c      	ldr	r3, [pc, #176]	@ (8001f28 <SystemInit+0xd4>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f023 030f 	bic.w	r3, r3, #15
 8001e7c:	4a2a      	ldr	r2, [pc, #168]	@ (8001f28 <SystemInit+0xd4>)
 8001e7e:	f043 0307 	orr.w	r3, r3, #7
 8001e82:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001e84:	4b29      	ldr	r3, [pc, #164]	@ (8001f2c <SystemInit+0xd8>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a28      	ldr	r2, [pc, #160]	@ (8001f2c <SystemInit+0xd8>)
 8001e8a:	f043 0301 	orr.w	r3, r3, #1
 8001e8e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001e90:	4b26      	ldr	r3, [pc, #152]	@ (8001f2c <SystemInit+0xd8>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001e96:	4b25      	ldr	r3, [pc, #148]	@ (8001f2c <SystemInit+0xd8>)
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	4924      	ldr	r1, [pc, #144]	@ (8001f2c <SystemInit+0xd8>)
 8001e9c:	4b24      	ldr	r3, [pc, #144]	@ (8001f30 <SystemInit+0xdc>)
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001ea2:	4b21      	ldr	r3, [pc, #132]	@ (8001f28 <SystemInit+0xd4>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 0308 	and.w	r3, r3, #8
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d007      	beq.n	8001ebe <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001eae:	4b1e      	ldr	r3, [pc, #120]	@ (8001f28 <SystemInit+0xd4>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f023 030f 	bic.w	r3, r3, #15
 8001eb6:	4a1c      	ldr	r2, [pc, #112]	@ (8001f28 <SystemInit+0xd4>)
 8001eb8:	f043 0307 	orr.w	r3, r3, #7
 8001ebc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001ebe:	4b1b      	ldr	r3, [pc, #108]	@ (8001f2c <SystemInit+0xd8>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001ec4:	4b19      	ldr	r3, [pc, #100]	@ (8001f2c <SystemInit+0xd8>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001eca:	4b18      	ldr	r3, [pc, #96]	@ (8001f2c <SystemInit+0xd8>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001ed0:	4b16      	ldr	r3, [pc, #88]	@ (8001f2c <SystemInit+0xd8>)
 8001ed2:	4a18      	ldr	r2, [pc, #96]	@ (8001f34 <SystemInit+0xe0>)
 8001ed4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001ed6:	4b15      	ldr	r3, [pc, #84]	@ (8001f2c <SystemInit+0xd8>)
 8001ed8:	4a17      	ldr	r2, [pc, #92]	@ (8001f38 <SystemInit+0xe4>)
 8001eda:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001edc:	4b13      	ldr	r3, [pc, #76]	@ (8001f2c <SystemInit+0xd8>)
 8001ede:	4a17      	ldr	r2, [pc, #92]	@ (8001f3c <SystemInit+0xe8>)
 8001ee0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001ee2:	4b12      	ldr	r3, [pc, #72]	@ (8001f2c <SystemInit+0xd8>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001ee8:	4b10      	ldr	r3, [pc, #64]	@ (8001f2c <SystemInit+0xd8>)
 8001eea:	4a14      	ldr	r2, [pc, #80]	@ (8001f3c <SystemInit+0xe8>)
 8001eec:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001eee:	4b0f      	ldr	r3, [pc, #60]	@ (8001f2c <SystemInit+0xd8>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001ef4:	4b0d      	ldr	r3, [pc, #52]	@ (8001f2c <SystemInit+0xd8>)
 8001ef6:	4a11      	ldr	r2, [pc, #68]	@ (8001f3c <SystemInit+0xe8>)
 8001ef8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001efa:	4b0c      	ldr	r3, [pc, #48]	@ (8001f2c <SystemInit+0xd8>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001f00:	4b0a      	ldr	r3, [pc, #40]	@ (8001f2c <SystemInit+0xd8>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a09      	ldr	r2, [pc, #36]	@ (8001f2c <SystemInit+0xd8>)
 8001f06:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f0a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001f0c:	4b07      	ldr	r3, [pc, #28]	@ (8001f2c <SystemInit+0xd8>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001f12:	4b0b      	ldr	r3, [pc, #44]	@ (8001f40 <SystemInit+0xec>)
 8001f14:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001f18:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001f1a:	bf00      	nop
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr
 8001f24:	e000ed00 	.word	0xe000ed00
 8001f28:	52002000 	.word	0x52002000
 8001f2c:	58024400 	.word	0x58024400
 8001f30:	eaf6ed7f 	.word	0xeaf6ed7f
 8001f34:	02020200 	.word	0x02020200
 8001f38:	01ff0000 	.word	0x01ff0000
 8001f3c:	01010280 	.word	0x01010280
 8001f40:	52004000 	.word	0x52004000

08001f44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001f44:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001f7c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001f48:	f7ff ff84 	bl	8001e54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f4c:	480c      	ldr	r0, [pc, #48]	@ (8001f80 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f4e:	490d      	ldr	r1, [pc, #52]	@ (8001f84 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f50:	4a0d      	ldr	r2, [pc, #52]	@ (8001f88 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f54:	e002      	b.n	8001f5c <LoopCopyDataInit>

08001f56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f5a:	3304      	adds	r3, #4

08001f5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f60:	d3f9      	bcc.n	8001f56 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f62:	4a0a      	ldr	r2, [pc, #40]	@ (8001f8c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f64:	4c0a      	ldr	r4, [pc, #40]	@ (8001f90 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f68:	e001      	b.n	8001f6e <LoopFillZerobss>

08001f6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f6c:	3204      	adds	r2, #4

08001f6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f70:	d3fb      	bcc.n	8001f6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f72:	f025 fcb3 	bl	80278dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f76:	f7ff f9b1 	bl	80012dc <main>
  bx  lr
 8001f7a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001f7c:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001f80:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001f84:	24000f78 	.word	0x24000f78
  ldr r2, =_sidata
 8001f88:	0803b338 	.word	0x0803b338
  ldr r2, =_sbss
 8001f8c:	24001038 	.word	0x24001038
  ldr r4, =_ebss
 8001f90:	24005874 	.word	0x24005874

08001f94 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f94:	e7fe      	b.n	8001f94 <ADC3_IRQHandler>
	...

08001f98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f9e:	2003      	movs	r0, #3
 8001fa0:	f000 f994 	bl	80022cc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001fa4:	f002 fa60 	bl	8004468 <HAL_RCC_GetSysClockFreq>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	4b15      	ldr	r3, [pc, #84]	@ (8002000 <HAL_Init+0x68>)
 8001fac:	699b      	ldr	r3, [r3, #24]
 8001fae:	0a1b      	lsrs	r3, r3, #8
 8001fb0:	f003 030f 	and.w	r3, r3, #15
 8001fb4:	4913      	ldr	r1, [pc, #76]	@ (8002004 <HAL_Init+0x6c>)
 8001fb6:	5ccb      	ldrb	r3, [r1, r3]
 8001fb8:	f003 031f 	and.w	r3, r3, #31
 8001fbc:	fa22 f303 	lsr.w	r3, r2, r3
 8001fc0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001fc2:	4b0f      	ldr	r3, [pc, #60]	@ (8002000 <HAL_Init+0x68>)
 8001fc4:	699b      	ldr	r3, [r3, #24]
 8001fc6:	f003 030f 	and.w	r3, r3, #15
 8001fca:	4a0e      	ldr	r2, [pc, #56]	@ (8002004 <HAL_Init+0x6c>)
 8001fcc:	5cd3      	ldrb	r3, [r2, r3]
 8001fce:	f003 031f 	and.w	r3, r3, #31
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	fa22 f303 	lsr.w	r3, r2, r3
 8001fd8:	4a0b      	ldr	r2, [pc, #44]	@ (8002008 <HAL_Init+0x70>)
 8001fda:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001fdc:	4a0b      	ldr	r2, [pc, #44]	@ (800200c <HAL_Init+0x74>)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001fe2:	2000      	movs	r0, #0
 8001fe4:	f000 f814 	bl	8002010 <HAL_InitTick>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d001      	beq.n	8001ff2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e002      	b.n	8001ff8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001ff2:	f7ff fc57 	bl	80018a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ff6:	2300      	movs	r3, #0
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	3708      	adds	r7, #8
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	58024400 	.word	0x58024400
 8002004:	0802d340 	.word	0x0802d340
 8002008:	24000004 	.word	0x24000004
 800200c:	24000000 	.word	0x24000000

08002010 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002018:	4b15      	ldr	r3, [pc, #84]	@ (8002070 <HAL_InitTick+0x60>)
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d101      	bne.n	8002024 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	e021      	b.n	8002068 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002024:	4b13      	ldr	r3, [pc, #76]	@ (8002074 <HAL_InitTick+0x64>)
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	4b11      	ldr	r3, [pc, #68]	@ (8002070 <HAL_InitTick+0x60>)
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	4619      	mov	r1, r3
 800202e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002032:	fbb3 f3f1 	udiv	r3, r3, r1
 8002036:	fbb2 f3f3 	udiv	r3, r2, r3
 800203a:	4618      	mov	r0, r3
 800203c:	f000 f979 	bl	8002332 <HAL_SYSTICK_Config>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d001      	beq.n	800204a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e00e      	b.n	8002068 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2b0f      	cmp	r3, #15
 800204e:	d80a      	bhi.n	8002066 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002050:	2200      	movs	r2, #0
 8002052:	6879      	ldr	r1, [r7, #4]
 8002054:	f04f 30ff 	mov.w	r0, #4294967295
 8002058:	f000 f943 	bl	80022e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800205c:	4a06      	ldr	r2, [pc, #24]	@ (8002078 <HAL_InitTick+0x68>)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002062:	2300      	movs	r3, #0
 8002064:	e000      	b.n	8002068 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
}
 8002068:	4618      	mov	r0, r3
 800206a:	3708      	adds	r7, #8
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	2400000c 	.word	0x2400000c
 8002074:	24000000 	.word	0x24000000
 8002078:	24000008 	.word	0x24000008

0800207c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002080:	4b06      	ldr	r3, [pc, #24]	@ (800209c <HAL_IncTick+0x20>)
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	461a      	mov	r2, r3
 8002086:	4b06      	ldr	r3, [pc, #24]	@ (80020a0 <HAL_IncTick+0x24>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4413      	add	r3, r2
 800208c:	4a04      	ldr	r2, [pc, #16]	@ (80020a0 <HAL_IncTick+0x24>)
 800208e:	6013      	str	r3, [r2, #0]
}
 8002090:	bf00      	nop
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr
 800209a:	bf00      	nop
 800209c:	2400000c 	.word	0x2400000c
 80020a0:	24002350 	.word	0x24002350

080020a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
  return uwTick;
 80020a8:	4b03      	ldr	r3, [pc, #12]	@ (80020b8 <HAL_GetTick+0x14>)
 80020aa:	681b      	ldr	r3, [r3, #0]
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr
 80020b6:	bf00      	nop
 80020b8:	24002350 	.word	0x24002350

080020bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b084      	sub	sp, #16
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020c4:	f7ff ffee 	bl	80020a4 <HAL_GetTick>
 80020c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020d4:	d005      	beq.n	80020e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020d6:	4b0a      	ldr	r3, [pc, #40]	@ (8002100 <HAL_Delay+0x44>)
 80020d8:	781b      	ldrb	r3, [r3, #0]
 80020da:	461a      	mov	r2, r3
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	4413      	add	r3, r2
 80020e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80020e2:	bf00      	nop
 80020e4:	f7ff ffde 	bl	80020a4 <HAL_GetTick>
 80020e8:	4602      	mov	r2, r0
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	68fa      	ldr	r2, [r7, #12]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d8f7      	bhi.n	80020e4 <HAL_Delay+0x28>
  {
  }
}
 80020f4:	bf00      	nop
 80020f6:	bf00      	nop
 80020f8:	3710      	adds	r7, #16
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	2400000c 	.word	0x2400000c

08002104 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 800210c:	4b06      	ldr	r3, [pc, #24]	@ (8002128 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8002114:	4904      	ldr	r1, [pc, #16]	@ (8002128 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4313      	orrs	r3, r2
 800211a:	604b      	str	r3, [r1, #4]
}
 800211c:	bf00      	nop
 800211e:	370c      	adds	r7, #12
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr
 8002128:	58000400 	.word	0x58000400

0800212c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800212c:	b480      	push	{r7}
 800212e:	b085      	sub	sp, #20
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	f003 0307 	and.w	r3, r3, #7
 800213a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800213c:	4b0b      	ldr	r3, [pc, #44]	@ (800216c <__NVIC_SetPriorityGrouping+0x40>)
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002142:	68ba      	ldr	r2, [r7, #8]
 8002144:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002148:	4013      	ands	r3, r2
 800214a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002154:	4b06      	ldr	r3, [pc, #24]	@ (8002170 <__NVIC_SetPriorityGrouping+0x44>)
 8002156:	4313      	orrs	r3, r2
 8002158:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800215a:	4a04      	ldr	r2, [pc, #16]	@ (800216c <__NVIC_SetPriorityGrouping+0x40>)
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	60d3      	str	r3, [r2, #12]
}
 8002160:	bf00      	nop
 8002162:	3714      	adds	r7, #20
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr
 800216c:	e000ed00 	.word	0xe000ed00
 8002170:	05fa0000 	.word	0x05fa0000

08002174 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002178:	4b04      	ldr	r3, [pc, #16]	@ (800218c <__NVIC_GetPriorityGrouping+0x18>)
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	0a1b      	lsrs	r3, r3, #8
 800217e:	f003 0307 	and.w	r3, r3, #7
}
 8002182:	4618      	mov	r0, r3
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr
 800218c:	e000ed00 	.word	0xe000ed00

08002190 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	4603      	mov	r3, r0
 8002198:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800219a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	db0b      	blt.n	80021ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021a2:	88fb      	ldrh	r3, [r7, #6]
 80021a4:	f003 021f 	and.w	r2, r3, #31
 80021a8:	4907      	ldr	r1, [pc, #28]	@ (80021c8 <__NVIC_EnableIRQ+0x38>)
 80021aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021ae:	095b      	lsrs	r3, r3, #5
 80021b0:	2001      	movs	r0, #1
 80021b2:	fa00 f202 	lsl.w	r2, r0, r2
 80021b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80021ba:	bf00      	nop
 80021bc:	370c      	adds	r7, #12
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	e000e100 	.word	0xe000e100

080021cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	4603      	mov	r3, r0
 80021d4:	6039      	str	r1, [r7, #0]
 80021d6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80021d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	db0a      	blt.n	80021f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	b2da      	uxtb	r2, r3
 80021e4:	490c      	ldr	r1, [pc, #48]	@ (8002218 <__NVIC_SetPriority+0x4c>)
 80021e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021ea:	0112      	lsls	r2, r2, #4
 80021ec:	b2d2      	uxtb	r2, r2
 80021ee:	440b      	add	r3, r1
 80021f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021f4:	e00a      	b.n	800220c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	b2da      	uxtb	r2, r3
 80021fa:	4908      	ldr	r1, [pc, #32]	@ (800221c <__NVIC_SetPriority+0x50>)
 80021fc:	88fb      	ldrh	r3, [r7, #6]
 80021fe:	f003 030f 	and.w	r3, r3, #15
 8002202:	3b04      	subs	r3, #4
 8002204:	0112      	lsls	r2, r2, #4
 8002206:	b2d2      	uxtb	r2, r2
 8002208:	440b      	add	r3, r1
 800220a:	761a      	strb	r2, [r3, #24]
}
 800220c:	bf00      	nop
 800220e:	370c      	adds	r7, #12
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr
 8002218:	e000e100 	.word	0xe000e100
 800221c:	e000ed00 	.word	0xe000ed00

08002220 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002220:	b480      	push	{r7}
 8002222:	b089      	sub	sp, #36	@ 0x24
 8002224:	af00      	add	r7, sp, #0
 8002226:	60f8      	str	r0, [r7, #12]
 8002228:	60b9      	str	r1, [r7, #8]
 800222a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	f003 0307 	and.w	r3, r3, #7
 8002232:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	f1c3 0307 	rsb	r3, r3, #7
 800223a:	2b04      	cmp	r3, #4
 800223c:	bf28      	it	cs
 800223e:	2304      	movcs	r3, #4
 8002240:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	3304      	adds	r3, #4
 8002246:	2b06      	cmp	r3, #6
 8002248:	d902      	bls.n	8002250 <NVIC_EncodePriority+0x30>
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	3b03      	subs	r3, #3
 800224e:	e000      	b.n	8002252 <NVIC_EncodePriority+0x32>
 8002250:	2300      	movs	r3, #0
 8002252:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002254:	f04f 32ff 	mov.w	r2, #4294967295
 8002258:	69bb      	ldr	r3, [r7, #24]
 800225a:	fa02 f303 	lsl.w	r3, r2, r3
 800225e:	43da      	mvns	r2, r3
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	401a      	ands	r2, r3
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002268:	f04f 31ff 	mov.w	r1, #4294967295
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	fa01 f303 	lsl.w	r3, r1, r3
 8002272:	43d9      	mvns	r1, r3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002278:	4313      	orrs	r3, r2
         );
}
 800227a:	4618      	mov	r0, r3
 800227c:	3724      	adds	r7, #36	@ 0x24
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr
	...

08002288 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	3b01      	subs	r3, #1
 8002294:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002298:	d301      	bcc.n	800229e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800229a:	2301      	movs	r3, #1
 800229c:	e00f      	b.n	80022be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800229e:	4a0a      	ldr	r2, [pc, #40]	@ (80022c8 <SysTick_Config+0x40>)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	3b01      	subs	r3, #1
 80022a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022a6:	210f      	movs	r1, #15
 80022a8:	f04f 30ff 	mov.w	r0, #4294967295
 80022ac:	f7ff ff8e 	bl	80021cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022b0:	4b05      	ldr	r3, [pc, #20]	@ (80022c8 <SysTick_Config+0x40>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022b6:	4b04      	ldr	r3, [pc, #16]	@ (80022c8 <SysTick_Config+0x40>)
 80022b8:	2207      	movs	r2, #7
 80022ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022bc:	2300      	movs	r3, #0
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3708      	adds	r7, #8
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	e000e010 	.word	0xe000e010

080022cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022d4:	6878      	ldr	r0, [r7, #4]
 80022d6:	f7ff ff29 	bl	800212c <__NVIC_SetPriorityGrouping>
}
 80022da:	bf00      	nop
 80022dc:	3708      	adds	r7, #8
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}

080022e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022e2:	b580      	push	{r7, lr}
 80022e4:	b086      	sub	sp, #24
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	4603      	mov	r3, r0
 80022ea:	60b9      	str	r1, [r7, #8]
 80022ec:	607a      	str	r2, [r7, #4]
 80022ee:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80022f0:	f7ff ff40 	bl	8002174 <__NVIC_GetPriorityGrouping>
 80022f4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	68b9      	ldr	r1, [r7, #8]
 80022fa:	6978      	ldr	r0, [r7, #20]
 80022fc:	f7ff ff90 	bl	8002220 <NVIC_EncodePriority>
 8002300:	4602      	mov	r2, r0
 8002302:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002306:	4611      	mov	r1, r2
 8002308:	4618      	mov	r0, r3
 800230a:	f7ff ff5f 	bl	80021cc <__NVIC_SetPriority>
}
 800230e:	bf00      	nop
 8002310:	3718      	adds	r7, #24
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}

08002316 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002316:	b580      	push	{r7, lr}
 8002318:	b082      	sub	sp, #8
 800231a:	af00      	add	r7, sp, #0
 800231c:	4603      	mov	r3, r0
 800231e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002320:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002324:	4618      	mov	r0, r3
 8002326:	f7ff ff33 	bl	8002190 <__NVIC_EnableIRQ>
}
 800232a:	bf00      	nop
 800232c:	3708      	adds	r7, #8
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}

08002332 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002332:	b580      	push	{r7, lr}
 8002334:	b082      	sub	sp, #8
 8002336:	af00      	add	r7, sp, #0
 8002338:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f7ff ffa4 	bl	8002288 <SysTick_Config>
 8002340:	4603      	mov	r3, r0
}
 8002342:	4618      	mov	r0, r3
 8002344:	3708      	adds	r7, #8
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
	...

0800234c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b084      	sub	sp, #16
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d101      	bne.n	800235e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e0e3      	b.n	8002526 <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002364:	2b00      	cmp	r3, #0
 8002366:	d106      	bne.n	8002376 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2220      	movs	r2, #32
 800236c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	f7ff fab1 	bl	80018d8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002376:	4b6e      	ldr	r3, [pc, #440]	@ (8002530 <HAL_ETH_Init+0x1e4>)
 8002378:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800237c:	4a6c      	ldr	r2, [pc, #432]	@ (8002530 <HAL_ETH_Init+0x1e4>)
 800237e:	f043 0302 	orr.w	r3, r3, #2
 8002382:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002386:	4b6a      	ldr	r3, [pc, #424]	@ (8002530 <HAL_ETH_Init+0x1e4>)
 8002388:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800238c:	f003 0302 	and.w	r3, r3, #2
 8002390:	60bb      	str	r3, [r7, #8]
 8002392:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	7a1b      	ldrb	r3, [r3, #8]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d103      	bne.n	80023a4 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 800239c:	2000      	movs	r0, #0
 800239e:	f7ff feb1 	bl	8002104 <HAL_SYSCFG_ETHInterfaceSelect>
 80023a2:	e003      	b.n	80023ac <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80023a4:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 80023a8:	f7ff feac 	bl	8002104 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80023ac:	4b61      	ldr	r3, [pc, #388]	@ (8002534 <HAL_ETH_Init+0x1e8>)
 80023ae:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	6812      	ldr	r2, [r2, #0]
 80023be:	f043 0301 	orr.w	r3, r3, #1
 80023c2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80023c6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80023c8:	f7ff fe6c 	bl	80020a4 <HAL_GetTick>
 80023cc:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80023ce:	e011      	b.n	80023f4 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80023d0:	f7ff fe68 	bl	80020a4 <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80023de:	d909      	bls.n	80023f4 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2204      	movs	r2, #4
 80023e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	22e0      	movs	r2, #224	@ 0xe0
 80023ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e098      	b.n	8002526 <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0301 	and.w	r3, r3, #1
 8002402:	2b00      	cmp	r3, #0
 8002404:	d1e4      	bne.n	80023d0 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f000 f89e 	bl	8002548 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 800240c:	f002 f9a6 	bl	800475c <HAL_RCC_GetHCLKFreq>
 8002410:	4603      	mov	r3, r0
 8002412:	4a49      	ldr	r2, [pc, #292]	@ (8002538 <HAL_ETH_Init+0x1ec>)
 8002414:	fba2 2303 	umull	r2, r3, r2, r3
 8002418:	0c9a      	lsrs	r2, r3, #18
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	3a01      	subs	r2, #1
 8002420:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f000 fa81 	bl	800292c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002432:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8002436:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 800243a:	687a      	ldr	r2, [r7, #4]
 800243c:	6812      	ldr	r2, [r2, #0]
 800243e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002442:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002446:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	695b      	ldr	r3, [r3, #20]
 800244e:	f003 0303 	and.w	r3, r3, #3
 8002452:	2b00      	cmp	r3, #0
 8002454:	d009      	beq.n	800246a <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2201      	movs	r2, #1
 800245a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	22e0      	movs	r2, #224	@ 0xe0
 8002462:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e05d      	b.n	8002526 <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002472:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8002476:	4b31      	ldr	r3, [pc, #196]	@ (800253c <HAL_ETH_Init+0x1f0>)
 8002478:	4013      	ands	r3, r2
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	6952      	ldr	r2, [r2, #20]
 800247e:	0051      	lsls	r1, r2, #1
 8002480:	687a      	ldr	r2, [r7, #4]
 8002482:	6812      	ldr	r2, [r2, #0]
 8002484:	430b      	orrs	r3, r1
 8002486:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800248a:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f000 fae9 	bl	8002a66 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f000 fb2f 	bl	8002af8 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	3305      	adds	r3, #5
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	021a      	lsls	r2, r3, #8
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	3304      	adds	r3, #4
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	4619      	mov	r1, r3
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	430a      	orrs	r2, r1
 80024b4:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	3303      	adds	r3, #3
 80024be:	781b      	ldrb	r3, [r3, #0]
 80024c0:	061a      	lsls	r2, r3, #24
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	3302      	adds	r3, #2
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	041b      	lsls	r3, r3, #16
 80024cc:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	3301      	adds	r3, #1
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80024d8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80024e6:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80024e8:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	4b11      	ldr	r3, [pc, #68]	@ (8002540 <HAL_ETH_Init+0x1f4>)
 80024fa:	430b      	orrs	r3, r1
 80024fc:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	4b0d      	ldr	r3, [pc, #52]	@ (8002544 <HAL_ETH_Init+0x1f8>)
 800250e:	430b      	orrs	r3, r1
 8002510:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2200      	movs	r2, #0
 8002518:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2210      	movs	r2, #16
 8002520:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002524:	2300      	movs	r3, #0
}
 8002526:	4618      	mov	r0, r3
 8002528:	3710      	adds	r7, #16
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	58024400 	.word	0x58024400
 8002534:	58000400 	.word	0x58000400
 8002538:	431bde83 	.word	0x431bde83
 800253c:	ffff8001 	.word	0xffff8001
 8002540:	0c020060 	.word	0x0c020060
 8002544:	0c20c000 	.word	0x0c20c000

08002548 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002558:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002560:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002562:	f002 f8fb 	bl	800475c <HAL_RCC_GetHCLKFreq>
 8002566:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	4a1a      	ldr	r2, [pc, #104]	@ (80025d4 <HAL_ETH_SetMDIOClockRange+0x8c>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d804      	bhi.n	800257a <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002576:	60fb      	str	r3, [r7, #12]
 8002578:	e022      	b.n	80025c0 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	4a16      	ldr	r2, [pc, #88]	@ (80025d8 <HAL_ETH_SetMDIOClockRange+0x90>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d204      	bcs.n	800258c <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8002588:	60fb      	str	r3, [r7, #12]
 800258a:	e019      	b.n	80025c0 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	4a13      	ldr	r2, [pc, #76]	@ (80025dc <HAL_ETH_SetMDIOClockRange+0x94>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d915      	bls.n	80025c0 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	4a12      	ldr	r2, [pc, #72]	@ (80025e0 <HAL_ETH_SetMDIOClockRange+0x98>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d804      	bhi.n	80025a6 <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025a2:	60fb      	str	r3, [r7, #12]
 80025a4:	e00c      	b.n	80025c0 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	4a0e      	ldr	r2, [pc, #56]	@ (80025e4 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d804      	bhi.n	80025b8 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80025b4:	60fb      	str	r3, [r7, #12]
 80025b6:	e003      	b.n	80025c0 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 80025be:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	68fa      	ldr	r2, [r7, #12]
 80025c6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 80025ca:	bf00      	nop
 80025cc:	3710      	adds	r7, #16
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	02160ebf 	.word	0x02160ebf
 80025d8:	03938700 	.word	0x03938700
 80025dc:	05f5e0ff 	.word	0x05f5e0ff
 80025e0:	08f0d17f 	.word	0x08f0d17f
 80025e4:	0ee6b27f 	.word	0x0ee6b27f

080025e8 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b085      	sub	sp, #20
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80025fa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	791b      	ldrb	r3, [r3, #4]
 8002600:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8002602:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	7b1b      	ldrb	r3, [r3, #12]
 8002608:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800260a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	7b5b      	ldrb	r3, [r3, #13]
 8002610:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002612:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	7b9b      	ldrb	r3, [r3, #14]
 8002618:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800261a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	7bdb      	ldrb	r3, [r3, #15]
 8002620:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002622:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002624:	683a      	ldr	r2, [r7, #0]
 8002626:	7c12      	ldrb	r2, [r2, #16]
 8002628:	2a00      	cmp	r2, #0
 800262a:	d102      	bne.n	8002632 <ETH_SetMACConfig+0x4a>
 800262c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002630:	e000      	b.n	8002634 <ETH_SetMACConfig+0x4c>
 8002632:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002634:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002636:	683a      	ldr	r2, [r7, #0]
 8002638:	7c52      	ldrb	r2, [r2, #17]
 800263a:	2a00      	cmp	r2, #0
 800263c:	d102      	bne.n	8002644 <ETH_SetMACConfig+0x5c>
 800263e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002642:	e000      	b.n	8002646 <ETH_SetMACConfig+0x5e>
 8002644:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002646:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	7c9b      	ldrb	r3, [r3, #18]
 800264c:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800264e:	431a      	orrs	r2, r3
               macconf->Speed |
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8002654:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 800265a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	7f1b      	ldrb	r3, [r3, #28]
 8002660:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8002662:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	7f5b      	ldrb	r3, [r3, #29]
 8002668:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 800266a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800266c:	683a      	ldr	r2, [r7, #0]
 800266e:	7f92      	ldrb	r2, [r2, #30]
 8002670:	2a00      	cmp	r2, #0
 8002672:	d102      	bne.n	800267a <ETH_SetMACConfig+0x92>
 8002674:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002678:	e000      	b.n	800267c <ETH_SetMACConfig+0x94>
 800267a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800267c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	7fdb      	ldrb	r3, [r3, #31]
 8002682:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002684:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002686:	683a      	ldr	r2, [r7, #0]
 8002688:	f892 2020 	ldrb.w	r2, [r2, #32]
 800268c:	2a00      	cmp	r2, #0
 800268e:	d102      	bne.n	8002696 <ETH_SetMACConfig+0xae>
 8002690:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002694:	e000      	b.n	8002698 <ETH_SetMACConfig+0xb0>
 8002696:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002698:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800269e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80026a6:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80026a8:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 80026ae:	4313      	orrs	r3, r2
 80026b0:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	4b56      	ldr	r3, [pc, #344]	@ (8002814 <ETH_SetMACConfig+0x22c>)
 80026ba:	4013      	ands	r3, r2
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	6812      	ldr	r2, [r2, #0]
 80026c0:	68f9      	ldr	r1, [r7, #12]
 80026c2:	430b      	orrs	r3, r1
 80026c4:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026ca:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80026d2:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80026d4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80026dc:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80026de:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80026e6:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80026e8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80026ea:	683a      	ldr	r2, [r7, #0]
 80026ec:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 80026f0:	2a00      	cmp	r2, #0
 80026f2:	d102      	bne.n	80026fa <ETH_SetMACConfig+0x112>
 80026f4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80026f8:	e000      	b.n	80026fc <ETH_SetMACConfig+0x114>
 80026fa:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80026fc:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002702:	4313      	orrs	r3, r2
 8002704:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	685a      	ldr	r2, [r3, #4]
 800270c:	4b42      	ldr	r3, [pc, #264]	@ (8002818 <ETH_SetMACConfig+0x230>)
 800270e:	4013      	ands	r3, r2
 8002710:	687a      	ldr	r2, [r7, #4]
 8002712:	6812      	ldr	r2, [r2, #0]
 8002714:	68f9      	ldr	r1, [r7, #12]
 8002716:	430b      	orrs	r3, r1
 8002718:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002720:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002726:	4313      	orrs	r3, r2
 8002728:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	68da      	ldr	r2, [r3, #12]
 8002730:	4b3a      	ldr	r3, [pc, #232]	@ (800281c <ETH_SetMACConfig+0x234>)
 8002732:	4013      	ands	r3, r2
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	6812      	ldr	r2, [r2, #0]
 8002738:	68f9      	ldr	r1, [r7, #12]
 800273a:	430b      	orrs	r3, r1
 800273c:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002744:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800274a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 800274c:	683a      	ldr	r2, [r7, #0]
 800274e:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8002752:	2a00      	cmp	r2, #0
 8002754:	d101      	bne.n	800275a <ETH_SetMACConfig+0x172>
 8002756:	2280      	movs	r2, #128	@ 0x80
 8002758:	e000      	b.n	800275c <ETH_SetMACConfig+0x174>
 800275a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 800275c:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002762:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002764:	4313      	orrs	r3, r2
 8002766:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800276e:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8002772:	4013      	ands	r3, r2
 8002774:	687a      	ldr	r2, [r7, #4]
 8002776:	6812      	ldr	r2, [r2, #0]
 8002778:	68f9      	ldr	r1, [r7, #12]
 800277a:	430b      	orrs	r3, r1
 800277c:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8002784:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 800278c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800278e:	4313      	orrs	r3, r2
 8002790:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800279a:	f023 0103 	bic.w	r1, r3, #3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	68fa      	ldr	r2, [r7, #12]
 80027a4:	430a      	orrs	r2, r1
 80027a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 80027b2:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	430a      	orrs	r2, r1
 80027c0:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80027c8:	683a      	ldr	r2, [r7, #0]
 80027ca:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 80027ce:	2a00      	cmp	r2, #0
 80027d0:	d101      	bne.n	80027d6 <ETH_SetMACConfig+0x1ee>
 80027d2:	2240      	movs	r2, #64	@ 0x40
 80027d4:	e000      	b.n	80027d8 <ETH_SetMACConfig+0x1f0>
 80027d6:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80027d8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 80027e0:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80027e2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 80027ea:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80027ec:	4313      	orrs	r3, r2
 80027ee:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 80027f8:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	68fa      	ldr	r2, [r7, #12]
 8002802:	430a      	orrs	r2, r1
 8002804:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8002808:	bf00      	nop
 800280a:	3714      	adds	r7, #20
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr
 8002814:	00048083 	.word	0x00048083
 8002818:	c0f88000 	.word	0xc0f88000
 800281c:	fffffef0 	.word	0xfffffef0

08002820 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8002820:	b480      	push	{r7}
 8002822:	b085      	sub	sp, #20
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	4b38      	ldr	r3, [pc, #224]	@ (8002918 <ETH_SetDMAConfig+0xf8>)
 8002836:	4013      	ands	r3, r2
 8002838:	683a      	ldr	r2, [r7, #0]
 800283a:	6811      	ldr	r1, [r2, #0]
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	6812      	ldr	r2, [r2, #0]
 8002840:	430b      	orrs	r3, r1
 8002842:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002846:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	791b      	ldrb	r3, [r3, #4]
 800284c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002852:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	7b1b      	ldrb	r3, [r3, #12]
 8002858:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800285a:	4313      	orrs	r3, r2
 800285c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002866:	685a      	ldr	r2, [r3, #4]
 8002868:	4b2c      	ldr	r3, [pc, #176]	@ (800291c <ETH_SetDMAConfig+0xfc>)
 800286a:	4013      	ands	r3, r2
 800286c:	687a      	ldr	r2, [r7, #4]
 800286e:	6812      	ldr	r2, [r2, #0]
 8002870:	68f9      	ldr	r1, [r7, #12]
 8002872:	430b      	orrs	r3, r1
 8002874:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002878:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	7b5b      	ldrb	r3, [r3, #13]
 800287e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002884:	4313      	orrs	r3, r2
 8002886:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002890:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8002894:	4b22      	ldr	r3, [pc, #136]	@ (8002920 <ETH_SetDMAConfig+0x100>)
 8002896:	4013      	ands	r3, r2
 8002898:	687a      	ldr	r2, [r7, #4]
 800289a:	6812      	ldr	r2, [r2, #0]
 800289c:	68f9      	ldr	r1, [r7, #12]
 800289e:	430b      	orrs	r3, r1
 80028a0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80028a4:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	7d1b      	ldrb	r3, [r3, #20]
 80028b0:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80028b2:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	7f5b      	ldrb	r3, [r3, #29]
 80028b8:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80028ba:	4313      	orrs	r3, r2
 80028bc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80028c6:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 80028ca:	4b16      	ldr	r3, [pc, #88]	@ (8002924 <ETH_SetDMAConfig+0x104>)
 80028cc:	4013      	ands	r3, r2
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	6812      	ldr	r2, [r2, #0]
 80028d2:	68f9      	ldr	r1, [r7, #12]
 80028d4:	430b      	orrs	r3, r1
 80028d6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80028da:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	7f1b      	ldrb	r3, [r3, #28]
 80028e2:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80028e8:	4313      	orrs	r3, r2
 80028ea:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80028f4:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 80028f8:	4b0b      	ldr	r3, [pc, #44]	@ (8002928 <ETH_SetDMAConfig+0x108>)
 80028fa:	4013      	ands	r3, r2
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	6812      	ldr	r2, [r2, #0]
 8002900:	68f9      	ldr	r1, [r7, #12]
 8002902:	430b      	orrs	r3, r1
 8002904:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002908:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 800290c:	bf00      	nop
 800290e:	3714      	adds	r7, #20
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr
 8002918:	ffff87fd 	.word	0xffff87fd
 800291c:	ffff2ffe 	.word	0xffff2ffe
 8002920:	fffec000 	.word	0xfffec000
 8002924:	ffc0efef 	.word	0xffc0efef
 8002928:	7fc0ffff 	.word	0x7fc0ffff

0800292c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b0a4      	sub	sp, #144	@ 0x90
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8002934:	2301      	movs	r3, #1
 8002936:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800293a:	2300      	movs	r3, #0
 800293c:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800293e:	2300      	movs	r3, #0
 8002940:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002944:	2300      	movs	r3, #0
 8002946:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800294a:	2301      	movs	r3, #1
 800294c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002950:	2301      	movs	r3, #1
 8002952:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002956:	2301      	movs	r3, #1
 8002958:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 800295c:	2300      	movs	r3, #0
 800295e:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8002962:	2301      	movs	r3, #1
 8002964:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002968:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800296c:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800296e:	2300      	movs	r3, #0
 8002970:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8002974:	2300      	movs	r3, #0
 8002976:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8002978:	2300      	movs	r3, #0
 800297a:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800297e:	2300      	movs	r3, #0
 8002980:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8002984:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8002988:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800298a:	2300      	movs	r3, #0
 800298c:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002990:	2300      	movs	r3, #0
 8002992:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8002994:	2301      	movs	r3, #1
 8002996:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800299a:	2300      	movs	r3, #0
 800299c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80029a0:	2300      	movs	r3, #0
 80029a2:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80029a6:	2300      	movs	r3, #0
 80029a8:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 80029aa:	2300      	movs	r3, #0
 80029ac:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80029ae:	2300      	movs	r3, #0
 80029b0:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80029b2:	2300      	movs	r3, #0
 80029b4:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80029b8:	2300      	movs	r3, #0
 80029ba:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80029be:	2301      	movs	r3, #1
 80029c0:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80029c4:	2320      	movs	r3, #32
 80029c6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80029ca:	2301      	movs	r3, #1
 80029cc:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80029d0:	2300      	movs	r3, #0
 80029d2:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80029d6:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 80029da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80029dc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80029e0:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80029e2:	2300      	movs	r3, #0
 80029e4:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80029e8:	2302      	movs	r3, #2
 80029ea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80029ee:	2300      	movs	r3, #0
 80029f0:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80029f4:	2300      	movs	r3, #0
 80029f6:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80029fa:	2300      	movs	r3, #0
 80029fc:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8002a00:	2301      	movs	r3, #1
 8002a02:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8002a06:	2300      	movs	r3, #0
 8002a08:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002a10:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002a14:	4619      	mov	r1, r3
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f7ff fde6 	bl	80025e8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002a20:	2301      	movs	r3, #1
 8002a22:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002a24:	2300      	movs	r3, #0
 8002a26:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8002a32:	2300      	movs	r3, #0
 8002a34:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002a36:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002a3a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002a40:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002a44:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8002a46:	2300      	movs	r3, #0
 8002a48:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8002a4c:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8002a50:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002a52:	f107 0308 	add.w	r3, r7, #8
 8002a56:	4619      	mov	r1, r3
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	f7ff fee1 	bl	8002820 <ETH_SetDMAConfig>
}
 8002a5e:	bf00      	nop
 8002a60:	3790      	adds	r7, #144	@ 0x90
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}

08002a66 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002a66:	b480      	push	{r7}
 8002a68:	b085      	sub	sp, #20
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002a6e:	2300      	movs	r3, #0
 8002a70:	60fb      	str	r3, [r7, #12]
 8002a72:	e01d      	b.n	8002ab0 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	68d9      	ldr	r1, [r3, #12]
 8002a78:	68fa      	ldr	r2, [r7, #12]
 8002a7a:	4613      	mov	r3, r2
 8002a7c:	005b      	lsls	r3, r3, #1
 8002a7e:	4413      	add	r3, r2
 8002a80:	00db      	lsls	r3, r3, #3
 8002a82:	440b      	add	r3, r1
 8002a84:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	2200      	movs	r2, #0
 8002a96:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002a9e:	68b9      	ldr	r1, [r7, #8]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	68fa      	ldr	r2, [r7, #12]
 8002aa4:	3206      	adds	r2, #6
 8002aa6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	3301      	adds	r3, #1
 8002aae:	60fb      	str	r3, [r7, #12]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2b03      	cmp	r3, #3
 8002ab4:	d9de      	bls.n	8002a74 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ac4:	461a      	mov	r2, r3
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	68da      	ldr	r2, [r3, #12]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ad8:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	68da      	ldr	r2, [r3, #12]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ae8:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8002aec:	bf00      	nop
 8002aee:	3714      	adds	r7, #20
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr

08002af8 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b085      	sub	sp, #20
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002b00:	2300      	movs	r3, #0
 8002b02:	60fb      	str	r3, [r7, #12]
 8002b04:	e023      	b.n	8002b4e <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6919      	ldr	r1, [r3, #16]
 8002b0a:	68fa      	ldr	r2, [r7, #12]
 8002b0c:	4613      	mov	r3, r2
 8002b0e:	005b      	lsls	r3, r3, #1
 8002b10:	4413      	add	r3, r2
 8002b12:	00db      	lsls	r3, r3, #3
 8002b14:	440b      	add	r3, r1
 8002b16:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	2200      	movs	r2, #0
 8002b22:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	2200      	movs	r2, #0
 8002b28:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	2200      	movs	r2, #0
 8002b34:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002b3c:	68b9      	ldr	r1, [r7, #8]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	68fa      	ldr	r2, [r7, #12]
 8002b42:	3212      	adds	r2, #18
 8002b44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	3301      	adds	r3, #1
 8002b4c:	60fb      	str	r3, [r7, #12]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2b03      	cmp	r3, #3
 8002b52:	d9d8      	bls.n	8002b06 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2200      	movs	r2, #0
 8002b58:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2200      	movs	r2, #0
 8002b64:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	2303      	movs	r3, #3
 8002b7e:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	691a      	ldr	r2, [r3, #16]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b8e:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	691b      	ldr	r3, [r3, #16]
 8002b96:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ba2:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8002ba6:	bf00      	nop
 8002ba8:	3714      	adds	r7, #20
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr
	...

08002bb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b089      	sub	sp, #36	@ 0x24
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002bc2:	4b86      	ldr	r3, [pc, #536]	@ (8002ddc <HAL_GPIO_Init+0x228>)
 8002bc4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002bc6:	e18c      	b.n	8002ee2 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	2101      	movs	r1, #1
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	fa01 f303 	lsl.w	r3, r1, r3
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	f000 817e 	beq.w	8002edc <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	f003 0303 	and.w	r3, r3, #3
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d005      	beq.n	8002bf8 <HAL_GPIO_Init+0x44>
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f003 0303 	and.w	r3, r3, #3
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	d130      	bne.n	8002c5a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	005b      	lsls	r3, r3, #1
 8002c02:	2203      	movs	r2, #3
 8002c04:	fa02 f303 	lsl.w	r3, r2, r3
 8002c08:	43db      	mvns	r3, r3
 8002c0a:	69ba      	ldr	r2, [r7, #24]
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	68da      	ldr	r2, [r3, #12]
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	005b      	lsls	r3, r3, #1
 8002c18:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1c:	69ba      	ldr	r2, [r7, #24]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	69ba      	ldr	r2, [r7, #24]
 8002c26:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002c2e:	2201      	movs	r2, #1
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	fa02 f303 	lsl.w	r3, r2, r3
 8002c36:	43db      	mvns	r3, r3
 8002c38:	69ba      	ldr	r2, [r7, #24]
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	091b      	lsrs	r3, r3, #4
 8002c44:	f003 0201 	and.w	r2, r3, #1
 8002c48:	69fb      	ldr	r3, [r7, #28]
 8002c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4e:	69ba      	ldr	r2, [r7, #24]
 8002c50:	4313      	orrs	r3, r2
 8002c52:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	69ba      	ldr	r2, [r7, #24]
 8002c58:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	f003 0303 	and.w	r3, r3, #3
 8002c62:	2b03      	cmp	r3, #3
 8002c64:	d017      	beq.n	8002c96 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	68db      	ldr	r3, [r3, #12]
 8002c6a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	005b      	lsls	r3, r3, #1
 8002c70:	2203      	movs	r2, #3
 8002c72:	fa02 f303 	lsl.w	r3, r2, r3
 8002c76:	43db      	mvns	r3, r3
 8002c78:	69ba      	ldr	r2, [r7, #24]
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	689a      	ldr	r2, [r3, #8]
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	005b      	lsls	r3, r3, #1
 8002c86:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8a:	69ba      	ldr	r2, [r7, #24]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	69ba      	ldr	r2, [r7, #24]
 8002c94:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	f003 0303 	and.w	r3, r3, #3
 8002c9e:	2b02      	cmp	r3, #2
 8002ca0:	d123      	bne.n	8002cea <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	08da      	lsrs	r2, r3, #3
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	3208      	adds	r2, #8
 8002caa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002cb0:	69fb      	ldr	r3, [r7, #28]
 8002cb2:	f003 0307 	and.w	r3, r3, #7
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	220f      	movs	r2, #15
 8002cba:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbe:	43db      	mvns	r3, r3
 8002cc0:	69ba      	ldr	r2, [r7, #24]
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	691a      	ldr	r2, [r3, #16]
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	f003 0307 	and.w	r3, r3, #7
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd6:	69ba      	ldr	r2, [r7, #24]
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	08da      	lsrs	r2, r3, #3
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	3208      	adds	r2, #8
 8002ce4:	69b9      	ldr	r1, [r7, #24]
 8002ce6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	005b      	lsls	r3, r3, #1
 8002cf4:	2203      	movs	r2, #3
 8002cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfa:	43db      	mvns	r3, r3
 8002cfc:	69ba      	ldr	r2, [r7, #24]
 8002cfe:	4013      	ands	r3, r2
 8002d00:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	f003 0203 	and.w	r2, r3, #3
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	005b      	lsls	r3, r3, #1
 8002d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d12:	69ba      	ldr	r2, [r7, #24]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	69ba      	ldr	r2, [r7, #24]
 8002d1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	f000 80d8 	beq.w	8002edc <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d2c:	4b2c      	ldr	r3, [pc, #176]	@ (8002de0 <HAL_GPIO_Init+0x22c>)
 8002d2e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002d32:	4a2b      	ldr	r2, [pc, #172]	@ (8002de0 <HAL_GPIO_Init+0x22c>)
 8002d34:	f043 0302 	orr.w	r3, r3, #2
 8002d38:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002d3c:	4b28      	ldr	r3, [pc, #160]	@ (8002de0 <HAL_GPIO_Init+0x22c>)
 8002d3e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002d42:	f003 0302 	and.w	r3, r3, #2
 8002d46:	60fb      	str	r3, [r7, #12]
 8002d48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d4a:	4a26      	ldr	r2, [pc, #152]	@ (8002de4 <HAL_GPIO_Init+0x230>)
 8002d4c:	69fb      	ldr	r3, [r7, #28]
 8002d4e:	089b      	lsrs	r3, r3, #2
 8002d50:	3302      	adds	r3, #2
 8002d52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	f003 0303 	and.w	r3, r3, #3
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	220f      	movs	r2, #15
 8002d62:	fa02 f303 	lsl.w	r3, r2, r3
 8002d66:	43db      	mvns	r3, r3
 8002d68:	69ba      	ldr	r2, [r7, #24]
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a1d      	ldr	r2, [pc, #116]	@ (8002de8 <HAL_GPIO_Init+0x234>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d04a      	beq.n	8002e0c <HAL_GPIO_Init+0x258>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a1c      	ldr	r2, [pc, #112]	@ (8002dec <HAL_GPIO_Init+0x238>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d02b      	beq.n	8002dd6 <HAL_GPIO_Init+0x222>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4a1b      	ldr	r2, [pc, #108]	@ (8002df0 <HAL_GPIO_Init+0x23c>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d025      	beq.n	8002dd2 <HAL_GPIO_Init+0x21e>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4a1a      	ldr	r2, [pc, #104]	@ (8002df4 <HAL_GPIO_Init+0x240>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d01f      	beq.n	8002dce <HAL_GPIO_Init+0x21a>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4a19      	ldr	r2, [pc, #100]	@ (8002df8 <HAL_GPIO_Init+0x244>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d019      	beq.n	8002dca <HAL_GPIO_Init+0x216>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4a18      	ldr	r2, [pc, #96]	@ (8002dfc <HAL_GPIO_Init+0x248>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d013      	beq.n	8002dc6 <HAL_GPIO_Init+0x212>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4a17      	ldr	r2, [pc, #92]	@ (8002e00 <HAL_GPIO_Init+0x24c>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d00d      	beq.n	8002dc2 <HAL_GPIO_Init+0x20e>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4a16      	ldr	r2, [pc, #88]	@ (8002e04 <HAL_GPIO_Init+0x250>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d007      	beq.n	8002dbe <HAL_GPIO_Init+0x20a>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4a15      	ldr	r2, [pc, #84]	@ (8002e08 <HAL_GPIO_Init+0x254>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d101      	bne.n	8002dba <HAL_GPIO_Init+0x206>
 8002db6:	2309      	movs	r3, #9
 8002db8:	e029      	b.n	8002e0e <HAL_GPIO_Init+0x25a>
 8002dba:	230a      	movs	r3, #10
 8002dbc:	e027      	b.n	8002e0e <HAL_GPIO_Init+0x25a>
 8002dbe:	2307      	movs	r3, #7
 8002dc0:	e025      	b.n	8002e0e <HAL_GPIO_Init+0x25a>
 8002dc2:	2306      	movs	r3, #6
 8002dc4:	e023      	b.n	8002e0e <HAL_GPIO_Init+0x25a>
 8002dc6:	2305      	movs	r3, #5
 8002dc8:	e021      	b.n	8002e0e <HAL_GPIO_Init+0x25a>
 8002dca:	2304      	movs	r3, #4
 8002dcc:	e01f      	b.n	8002e0e <HAL_GPIO_Init+0x25a>
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e01d      	b.n	8002e0e <HAL_GPIO_Init+0x25a>
 8002dd2:	2302      	movs	r3, #2
 8002dd4:	e01b      	b.n	8002e0e <HAL_GPIO_Init+0x25a>
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e019      	b.n	8002e0e <HAL_GPIO_Init+0x25a>
 8002dda:	bf00      	nop
 8002ddc:	58000080 	.word	0x58000080
 8002de0:	58024400 	.word	0x58024400
 8002de4:	58000400 	.word	0x58000400
 8002de8:	58020000 	.word	0x58020000
 8002dec:	58020400 	.word	0x58020400
 8002df0:	58020800 	.word	0x58020800
 8002df4:	58020c00 	.word	0x58020c00
 8002df8:	58021000 	.word	0x58021000
 8002dfc:	58021400 	.word	0x58021400
 8002e00:	58021800 	.word	0x58021800
 8002e04:	58021c00 	.word	0x58021c00
 8002e08:	58022400 	.word	0x58022400
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	69fa      	ldr	r2, [r7, #28]
 8002e10:	f002 0203 	and.w	r2, r2, #3
 8002e14:	0092      	lsls	r2, r2, #2
 8002e16:	4093      	lsls	r3, r2
 8002e18:	69ba      	ldr	r2, [r7, #24]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e1e:	4938      	ldr	r1, [pc, #224]	@ (8002f00 <HAL_GPIO_Init+0x34c>)
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	089b      	lsrs	r3, r3, #2
 8002e24:	3302      	adds	r3, #2
 8002e26:	69ba      	ldr	r2, [r7, #24]
 8002e28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002e2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	43db      	mvns	r3, r3
 8002e38:	69ba      	ldr	r2, [r7, #24]
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d003      	beq.n	8002e52 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8002e4a:	69ba      	ldr	r2, [r7, #24]
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002e52:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002e56:	69bb      	ldr	r3, [r7, #24]
 8002e58:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002e5a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	43db      	mvns	r3, r3
 8002e66:	69ba      	ldr	r2, [r7, #24]
 8002e68:	4013      	ands	r3, r2
 8002e6a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d003      	beq.n	8002e80 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8002e78:	69ba      	ldr	r2, [r7, #24]
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002e80:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002e84:	69bb      	ldr	r3, [r7, #24]
 8002e86:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	43db      	mvns	r3, r3
 8002e92:	69ba      	ldr	r2, [r7, #24]
 8002e94:	4013      	ands	r3, r2
 8002e96:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d003      	beq.n	8002eac <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8002ea4:	69ba      	ldr	r2, [r7, #24]
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	69ba      	ldr	r2, [r7, #24]
 8002eb0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	43db      	mvns	r3, r3
 8002ebc:	69ba      	ldr	r2, [r7, #24]
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d003      	beq.n	8002ed6 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8002ece:	69ba      	ldr	r2, [r7, #24]
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	69ba      	ldr	r2, [r7, #24]
 8002eda:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002edc:	69fb      	ldr	r3, [r7, #28]
 8002ede:	3301      	adds	r3, #1
 8002ee0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	fa22 f303 	lsr.w	r3, r2, r3
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	f47f ae6b 	bne.w	8002bc8 <HAL_GPIO_Init+0x14>
  }
}
 8002ef2:	bf00      	nop
 8002ef4:	bf00      	nop
 8002ef6:	3724      	adds	r7, #36	@ 0x24
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr
 8002f00:	58000400 	.word	0x58000400

08002f04 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b085      	sub	sp, #20
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	460b      	mov	r3, r1
 8002f0e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	691a      	ldr	r2, [r3, #16]
 8002f14:	887b      	ldrh	r3, [r7, #2]
 8002f16:	4013      	ands	r3, r2
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d002      	beq.n	8002f22 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	73fb      	strb	r3, [r7, #15]
 8002f20:	e001      	b.n	8002f26 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002f22:	2300      	movs	r3, #0
 8002f24:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002f26:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3714      	adds	r7, #20
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr

08002f34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
 8002f3c:	460b      	mov	r3, r1
 8002f3e:	807b      	strh	r3, [r7, #2]
 8002f40:	4613      	mov	r3, r2
 8002f42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f44:	787b      	ldrb	r3, [r7, #1]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d003      	beq.n	8002f52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f4a:	887a      	ldrh	r2, [r7, #2]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002f50:	e003      	b.n	8002f5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002f52:	887b      	ldrh	r3, [r7, #2]
 8002f54:	041a      	lsls	r2, r3, #16
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	619a      	str	r2, [r3, #24]
}
 8002f5a:	bf00      	nop
 8002f5c:	370c      	adds	r7, #12
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr
	...

08002f68 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b082      	sub	sp, #8
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d101      	bne.n	8002f7a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e08b      	b.n	8003092 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d106      	bne.n	8002f94 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f7fe fd78 	bl	8001a84 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2224      	movs	r2, #36	@ 0x24
 8002f98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f022 0201 	bic.w	r2, r2, #1
 8002faa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	685a      	ldr	r2, [r3, #4]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002fb8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	689a      	ldr	r2, [r3, #8]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002fc8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	68db      	ldr	r3, [r3, #12]
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d107      	bne.n	8002fe2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	689a      	ldr	r2, [r3, #8]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002fde:	609a      	str	r2, [r3, #8]
 8002fe0:	e006      	b.n	8002ff0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	689a      	ldr	r2, [r3, #8]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002fee:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	2b02      	cmp	r3, #2
 8002ff6:	d108      	bne.n	800300a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	685a      	ldr	r2, [r3, #4]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003006:	605a      	str	r2, [r3, #4]
 8003008:	e007      	b.n	800301a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	685a      	ldr	r2, [r3, #4]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003018:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	6859      	ldr	r1, [r3, #4]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	4b1d      	ldr	r3, [pc, #116]	@ (800309c <HAL_I2C_Init+0x134>)
 8003026:	430b      	orrs	r3, r1
 8003028:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	68da      	ldr	r2, [r3, #12]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003038:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	691a      	ldr	r2, [r3, #16]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	695b      	ldr	r3, [r3, #20]
 8003042:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	699b      	ldr	r3, [r3, #24]
 800304a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	430a      	orrs	r2, r1
 8003052:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	69d9      	ldr	r1, [r3, #28]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6a1a      	ldr	r2, [r3, #32]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	430a      	orrs	r2, r1
 8003062:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f042 0201 	orr.w	r2, r2, #1
 8003072:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2200      	movs	r2, #0
 8003078:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2220      	movs	r2, #32
 800307e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2200      	movs	r2, #0
 800308c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003090:	2300      	movs	r3, #0
}
 8003092:	4618      	mov	r0, r3
 8003094:	3708      	adds	r7, #8
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	02008000 	.word	0x02008000

080030a0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b088      	sub	sp, #32
 80030a4:	af02      	add	r7, sp, #8
 80030a6:	60f8      	str	r0, [r7, #12]
 80030a8:	4608      	mov	r0, r1
 80030aa:	4611      	mov	r1, r2
 80030ac:	461a      	mov	r2, r3
 80030ae:	4603      	mov	r3, r0
 80030b0:	817b      	strh	r3, [r7, #10]
 80030b2:	460b      	mov	r3, r1
 80030b4:	813b      	strh	r3, [r7, #8]
 80030b6:	4613      	mov	r3, r2
 80030b8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	2b20      	cmp	r3, #32
 80030c4:	f040 80f9 	bne.w	80032ba <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80030c8:	6a3b      	ldr	r3, [r7, #32]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d002      	beq.n	80030d4 <HAL_I2C_Mem_Write+0x34>
 80030ce:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d105      	bne.n	80030e0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80030da:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e0ed      	b.n	80032bc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d101      	bne.n	80030ee <HAL_I2C_Mem_Write+0x4e>
 80030ea:	2302      	movs	r3, #2
 80030ec:	e0e6      	b.n	80032bc <HAL_I2C_Mem_Write+0x21c>
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2201      	movs	r2, #1
 80030f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80030f6:	f7fe ffd5 	bl	80020a4 <HAL_GetTick>
 80030fa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	9300      	str	r3, [sp, #0]
 8003100:	2319      	movs	r3, #25
 8003102:	2201      	movs	r2, #1
 8003104:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003108:	68f8      	ldr	r0, [r7, #12]
 800310a:	f000 f955 	bl	80033b8 <I2C_WaitOnFlagUntilTimeout>
 800310e:	4603      	mov	r3, r0
 8003110:	2b00      	cmp	r3, #0
 8003112:	d001      	beq.n	8003118 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e0d1      	b.n	80032bc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2221      	movs	r2, #33	@ 0x21
 800311c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2240      	movs	r2, #64	@ 0x40
 8003124:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2200      	movs	r2, #0
 800312c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	6a3a      	ldr	r2, [r7, #32]
 8003132:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003138:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2200      	movs	r2, #0
 800313e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003140:	88f8      	ldrh	r0, [r7, #6]
 8003142:	893a      	ldrh	r2, [r7, #8]
 8003144:	8979      	ldrh	r1, [r7, #10]
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	9301      	str	r3, [sp, #4]
 800314a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800314c:	9300      	str	r3, [sp, #0]
 800314e:	4603      	mov	r3, r0
 8003150:	68f8      	ldr	r0, [r7, #12]
 8003152:	f000 f8b9 	bl	80032c8 <I2C_RequestMemoryWrite>
 8003156:	4603      	mov	r3, r0
 8003158:	2b00      	cmp	r3, #0
 800315a:	d005      	beq.n	8003168 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2200      	movs	r2, #0
 8003160:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e0a9      	b.n	80032bc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800316c:	b29b      	uxth	r3, r3
 800316e:	2bff      	cmp	r3, #255	@ 0xff
 8003170:	d90e      	bls.n	8003190 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	22ff      	movs	r2, #255	@ 0xff
 8003176:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800317c:	b2da      	uxtb	r2, r3
 800317e:	8979      	ldrh	r1, [r7, #10]
 8003180:	2300      	movs	r3, #0
 8003182:	9300      	str	r3, [sp, #0]
 8003184:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003188:	68f8      	ldr	r0, [r7, #12]
 800318a:	f000 fad9 	bl	8003740 <I2C_TransferConfig>
 800318e:	e00f      	b.n	80031b0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003194:	b29a      	uxth	r2, r3
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800319e:	b2da      	uxtb	r2, r3
 80031a0:	8979      	ldrh	r1, [r7, #10]
 80031a2:	2300      	movs	r3, #0
 80031a4:	9300      	str	r3, [sp, #0]
 80031a6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80031aa:	68f8      	ldr	r0, [r7, #12]
 80031ac:	f000 fac8 	bl	8003740 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031b0:	697a      	ldr	r2, [r7, #20]
 80031b2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80031b4:	68f8      	ldr	r0, [r7, #12]
 80031b6:	f000 f958 	bl	800346a <I2C_WaitOnTXISFlagUntilTimeout>
 80031ba:	4603      	mov	r3, r0
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d001      	beq.n	80031c4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e07b      	b.n	80032bc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031c8:	781a      	ldrb	r2, [r3, #0]
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031d4:	1c5a      	adds	r2, r3, #1
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031de:	b29b      	uxth	r3, r3
 80031e0:	3b01      	subs	r3, #1
 80031e2:	b29a      	uxth	r2, r3
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031ec:	3b01      	subs	r3, #1
 80031ee:	b29a      	uxth	r2, r3
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031f8:	b29b      	uxth	r3, r3
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d034      	beq.n	8003268 <HAL_I2C_Mem_Write+0x1c8>
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003202:	2b00      	cmp	r3, #0
 8003204:	d130      	bne.n	8003268 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	9300      	str	r3, [sp, #0]
 800320a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800320c:	2200      	movs	r2, #0
 800320e:	2180      	movs	r1, #128	@ 0x80
 8003210:	68f8      	ldr	r0, [r7, #12]
 8003212:	f000 f8d1 	bl	80033b8 <I2C_WaitOnFlagUntilTimeout>
 8003216:	4603      	mov	r3, r0
 8003218:	2b00      	cmp	r3, #0
 800321a:	d001      	beq.n	8003220 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e04d      	b.n	80032bc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003224:	b29b      	uxth	r3, r3
 8003226:	2bff      	cmp	r3, #255	@ 0xff
 8003228:	d90e      	bls.n	8003248 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	22ff      	movs	r2, #255	@ 0xff
 800322e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003234:	b2da      	uxtb	r2, r3
 8003236:	8979      	ldrh	r1, [r7, #10]
 8003238:	2300      	movs	r3, #0
 800323a:	9300      	str	r3, [sp, #0]
 800323c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003240:	68f8      	ldr	r0, [r7, #12]
 8003242:	f000 fa7d 	bl	8003740 <I2C_TransferConfig>
 8003246:	e00f      	b.n	8003268 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800324c:	b29a      	uxth	r2, r3
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003256:	b2da      	uxtb	r2, r3
 8003258:	8979      	ldrh	r1, [r7, #10]
 800325a:	2300      	movs	r3, #0
 800325c:	9300      	str	r3, [sp, #0]
 800325e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003262:	68f8      	ldr	r0, [r7, #12]
 8003264:	f000 fa6c 	bl	8003740 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800326c:	b29b      	uxth	r3, r3
 800326e:	2b00      	cmp	r3, #0
 8003270:	d19e      	bne.n	80031b0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003272:	697a      	ldr	r2, [r7, #20]
 8003274:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003276:	68f8      	ldr	r0, [r7, #12]
 8003278:	f000 f93e 	bl	80034f8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800327c:	4603      	mov	r3, r0
 800327e:	2b00      	cmp	r3, #0
 8003280:	d001      	beq.n	8003286 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e01a      	b.n	80032bc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	2220      	movs	r2, #32
 800328c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	6859      	ldr	r1, [r3, #4]
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	4b0a      	ldr	r3, [pc, #40]	@ (80032c4 <HAL_I2C_Mem_Write+0x224>)
 800329a:	400b      	ands	r3, r1
 800329c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2220      	movs	r2, #32
 80032a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2200      	movs	r2, #0
 80032aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2200      	movs	r2, #0
 80032b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80032b6:	2300      	movs	r3, #0
 80032b8:	e000      	b.n	80032bc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80032ba:	2302      	movs	r3, #2
  }
}
 80032bc:	4618      	mov	r0, r3
 80032be:	3718      	adds	r7, #24
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}
 80032c4:	fe00e800 	.word	0xfe00e800

080032c8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b086      	sub	sp, #24
 80032cc:	af02      	add	r7, sp, #8
 80032ce:	60f8      	str	r0, [r7, #12]
 80032d0:	4608      	mov	r0, r1
 80032d2:	4611      	mov	r1, r2
 80032d4:	461a      	mov	r2, r3
 80032d6:	4603      	mov	r3, r0
 80032d8:	817b      	strh	r3, [r7, #10]
 80032da:	460b      	mov	r3, r1
 80032dc:	813b      	strh	r3, [r7, #8]
 80032de:	4613      	mov	r3, r2
 80032e0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80032e2:	88fb      	ldrh	r3, [r7, #6]
 80032e4:	b2da      	uxtb	r2, r3
 80032e6:	8979      	ldrh	r1, [r7, #10]
 80032e8:	4b20      	ldr	r3, [pc, #128]	@ (800336c <I2C_RequestMemoryWrite+0xa4>)
 80032ea:	9300      	str	r3, [sp, #0]
 80032ec:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80032f0:	68f8      	ldr	r0, [r7, #12]
 80032f2:	f000 fa25 	bl	8003740 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032f6:	69fa      	ldr	r2, [r7, #28]
 80032f8:	69b9      	ldr	r1, [r7, #24]
 80032fa:	68f8      	ldr	r0, [r7, #12]
 80032fc:	f000 f8b5 	bl	800346a <I2C_WaitOnTXISFlagUntilTimeout>
 8003300:	4603      	mov	r3, r0
 8003302:	2b00      	cmp	r3, #0
 8003304:	d001      	beq.n	800330a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e02c      	b.n	8003364 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800330a:	88fb      	ldrh	r3, [r7, #6]
 800330c:	2b01      	cmp	r3, #1
 800330e:	d105      	bne.n	800331c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003310:	893b      	ldrh	r3, [r7, #8]
 8003312:	b2da      	uxtb	r2, r3
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	629a      	str	r2, [r3, #40]	@ 0x28
 800331a:	e015      	b.n	8003348 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800331c:	893b      	ldrh	r3, [r7, #8]
 800331e:	0a1b      	lsrs	r3, r3, #8
 8003320:	b29b      	uxth	r3, r3
 8003322:	b2da      	uxtb	r2, r3
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800332a:	69fa      	ldr	r2, [r7, #28]
 800332c:	69b9      	ldr	r1, [r7, #24]
 800332e:	68f8      	ldr	r0, [r7, #12]
 8003330:	f000 f89b 	bl	800346a <I2C_WaitOnTXISFlagUntilTimeout>
 8003334:	4603      	mov	r3, r0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d001      	beq.n	800333e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e012      	b.n	8003364 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800333e:	893b      	ldrh	r3, [r7, #8]
 8003340:	b2da      	uxtb	r2, r3
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	9300      	str	r3, [sp, #0]
 800334c:	69bb      	ldr	r3, [r7, #24]
 800334e:	2200      	movs	r2, #0
 8003350:	2180      	movs	r1, #128	@ 0x80
 8003352:	68f8      	ldr	r0, [r7, #12]
 8003354:	f000 f830 	bl	80033b8 <I2C_WaitOnFlagUntilTimeout>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d001      	beq.n	8003362 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e000      	b.n	8003364 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003362:	2300      	movs	r3, #0
}
 8003364:	4618      	mov	r0, r3
 8003366:	3710      	adds	r7, #16
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}
 800336c:	80002000 	.word	0x80002000

08003370 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003370:	b480      	push	{r7}
 8003372:	b083      	sub	sp, #12
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	699b      	ldr	r3, [r3, #24]
 800337e:	f003 0302 	and.w	r3, r3, #2
 8003382:	2b02      	cmp	r3, #2
 8003384:	d103      	bne.n	800338e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	2200      	movs	r2, #0
 800338c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	699b      	ldr	r3, [r3, #24]
 8003394:	f003 0301 	and.w	r3, r3, #1
 8003398:	2b01      	cmp	r3, #1
 800339a:	d007      	beq.n	80033ac <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	699a      	ldr	r2, [r3, #24]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f042 0201 	orr.w	r2, r2, #1
 80033aa:	619a      	str	r2, [r3, #24]
  }
}
 80033ac:	bf00      	nop
 80033ae:	370c      	adds	r7, #12
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr

080033b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b084      	sub	sp, #16
 80033bc:	af00      	add	r7, sp, #0
 80033be:	60f8      	str	r0, [r7, #12]
 80033c0:	60b9      	str	r1, [r7, #8]
 80033c2:	603b      	str	r3, [r7, #0]
 80033c4:	4613      	mov	r3, r2
 80033c6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033c8:	e03b      	b.n	8003442 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80033ca:	69ba      	ldr	r2, [r7, #24]
 80033cc:	6839      	ldr	r1, [r7, #0]
 80033ce:	68f8      	ldr	r0, [r7, #12]
 80033d0:	f000 f8d6 	bl	8003580 <I2C_IsErrorOccurred>
 80033d4:	4603      	mov	r3, r0
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d001      	beq.n	80033de <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e041      	b.n	8003462 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033e4:	d02d      	beq.n	8003442 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033e6:	f7fe fe5d 	bl	80020a4 <HAL_GetTick>
 80033ea:	4602      	mov	r2, r0
 80033ec:	69bb      	ldr	r3, [r7, #24]
 80033ee:	1ad3      	subs	r3, r2, r3
 80033f0:	683a      	ldr	r2, [r7, #0]
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d302      	bcc.n	80033fc <I2C_WaitOnFlagUntilTimeout+0x44>
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d122      	bne.n	8003442 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	699a      	ldr	r2, [r3, #24]
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	4013      	ands	r3, r2
 8003406:	68ba      	ldr	r2, [r7, #8]
 8003408:	429a      	cmp	r2, r3
 800340a:	bf0c      	ite	eq
 800340c:	2301      	moveq	r3, #1
 800340e:	2300      	movne	r3, #0
 8003410:	b2db      	uxtb	r3, r3
 8003412:	461a      	mov	r2, r3
 8003414:	79fb      	ldrb	r3, [r7, #7]
 8003416:	429a      	cmp	r2, r3
 8003418:	d113      	bne.n	8003442 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800341e:	f043 0220 	orr.w	r2, r3, #32
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2220      	movs	r2, #32
 800342a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2200      	movs	r2, #0
 8003432:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2200      	movs	r2, #0
 800343a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e00f      	b.n	8003462 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	699a      	ldr	r2, [r3, #24]
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	4013      	ands	r3, r2
 800344c:	68ba      	ldr	r2, [r7, #8]
 800344e:	429a      	cmp	r2, r3
 8003450:	bf0c      	ite	eq
 8003452:	2301      	moveq	r3, #1
 8003454:	2300      	movne	r3, #0
 8003456:	b2db      	uxtb	r3, r3
 8003458:	461a      	mov	r2, r3
 800345a:	79fb      	ldrb	r3, [r7, #7]
 800345c:	429a      	cmp	r2, r3
 800345e:	d0b4      	beq.n	80033ca <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003460:	2300      	movs	r3, #0
}
 8003462:	4618      	mov	r0, r3
 8003464:	3710      	adds	r7, #16
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}

0800346a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800346a:	b580      	push	{r7, lr}
 800346c:	b084      	sub	sp, #16
 800346e:	af00      	add	r7, sp, #0
 8003470:	60f8      	str	r0, [r7, #12]
 8003472:	60b9      	str	r1, [r7, #8]
 8003474:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003476:	e033      	b.n	80034e0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003478:	687a      	ldr	r2, [r7, #4]
 800347a:	68b9      	ldr	r1, [r7, #8]
 800347c:	68f8      	ldr	r0, [r7, #12]
 800347e:	f000 f87f 	bl	8003580 <I2C_IsErrorOccurred>
 8003482:	4603      	mov	r3, r0
 8003484:	2b00      	cmp	r3, #0
 8003486:	d001      	beq.n	800348c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	e031      	b.n	80034f0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003492:	d025      	beq.n	80034e0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003494:	f7fe fe06 	bl	80020a4 <HAL_GetTick>
 8003498:	4602      	mov	r2, r0
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	68ba      	ldr	r2, [r7, #8]
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d302      	bcc.n	80034aa <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d11a      	bne.n	80034e0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	699b      	ldr	r3, [r3, #24]
 80034b0:	f003 0302 	and.w	r3, r3, #2
 80034b4:	2b02      	cmp	r3, #2
 80034b6:	d013      	beq.n	80034e0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034bc:	f043 0220 	orr.w	r2, r3, #32
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2220      	movs	r2, #32
 80034c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2200      	movs	r2, #0
 80034d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2200      	movs	r2, #0
 80034d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	e007      	b.n	80034f0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	699b      	ldr	r3, [r3, #24]
 80034e6:	f003 0302 	and.w	r3, r3, #2
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	d1c4      	bne.n	8003478 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80034ee:	2300      	movs	r3, #0
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	3710      	adds	r7, #16
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}

080034f8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b084      	sub	sp, #16
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	60f8      	str	r0, [r7, #12]
 8003500:	60b9      	str	r1, [r7, #8]
 8003502:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003504:	e02f      	b.n	8003566 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	68b9      	ldr	r1, [r7, #8]
 800350a:	68f8      	ldr	r0, [r7, #12]
 800350c:	f000 f838 	bl	8003580 <I2C_IsErrorOccurred>
 8003510:	4603      	mov	r3, r0
 8003512:	2b00      	cmp	r3, #0
 8003514:	d001      	beq.n	800351a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e02d      	b.n	8003576 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800351a:	f7fe fdc3 	bl	80020a4 <HAL_GetTick>
 800351e:	4602      	mov	r2, r0
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	68ba      	ldr	r2, [r7, #8]
 8003526:	429a      	cmp	r2, r3
 8003528:	d302      	bcc.n	8003530 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d11a      	bne.n	8003566 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	699b      	ldr	r3, [r3, #24]
 8003536:	f003 0320 	and.w	r3, r3, #32
 800353a:	2b20      	cmp	r3, #32
 800353c:	d013      	beq.n	8003566 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003542:	f043 0220 	orr.w	r2, r3, #32
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2220      	movs	r2, #32
 800354e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2200      	movs	r2, #0
 8003556:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2200      	movs	r2, #0
 800355e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e007      	b.n	8003576 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	699b      	ldr	r3, [r3, #24]
 800356c:	f003 0320 	and.w	r3, r3, #32
 8003570:	2b20      	cmp	r3, #32
 8003572:	d1c8      	bne.n	8003506 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003574:	2300      	movs	r3, #0
}
 8003576:	4618      	mov	r0, r3
 8003578:	3710      	adds	r7, #16
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
	...

08003580 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b08a      	sub	sp, #40	@ 0x28
 8003584:	af00      	add	r7, sp, #0
 8003586:	60f8      	str	r0, [r7, #12]
 8003588:	60b9      	str	r1, [r7, #8]
 800358a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800358c:	2300      	movs	r3, #0
 800358e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	699b      	ldr	r3, [r3, #24]
 8003598:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800359a:	2300      	movs	r3, #0
 800359c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80035a2:	69bb      	ldr	r3, [r7, #24]
 80035a4:	f003 0310 	and.w	r3, r3, #16
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d068      	beq.n	800367e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	2210      	movs	r2, #16
 80035b2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80035b4:	e049      	b.n	800364a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035bc:	d045      	beq.n	800364a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80035be:	f7fe fd71 	bl	80020a4 <HAL_GetTick>
 80035c2:	4602      	mov	r2, r0
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	1ad3      	subs	r3, r2, r3
 80035c8:	68ba      	ldr	r2, [r7, #8]
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d302      	bcc.n	80035d4 <I2C_IsErrorOccurred+0x54>
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d13a      	bne.n	800364a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80035de:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80035e6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	699b      	ldr	r3, [r3, #24]
 80035ee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80035f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80035f6:	d121      	bne.n	800363c <I2C_IsErrorOccurred+0xbc>
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80035fe:	d01d      	beq.n	800363c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003600:	7cfb      	ldrb	r3, [r7, #19]
 8003602:	2b20      	cmp	r3, #32
 8003604:	d01a      	beq.n	800363c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	685a      	ldr	r2, [r3, #4]
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003614:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003616:	f7fe fd45 	bl	80020a4 <HAL_GetTick>
 800361a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800361c:	e00e      	b.n	800363c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800361e:	f7fe fd41 	bl	80020a4 <HAL_GetTick>
 8003622:	4602      	mov	r2, r0
 8003624:	69fb      	ldr	r3, [r7, #28]
 8003626:	1ad3      	subs	r3, r2, r3
 8003628:	2b19      	cmp	r3, #25
 800362a:	d907      	bls.n	800363c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800362c:	6a3b      	ldr	r3, [r7, #32]
 800362e:	f043 0320 	orr.w	r3, r3, #32
 8003632:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800363a:	e006      	b.n	800364a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	699b      	ldr	r3, [r3, #24]
 8003642:	f003 0320 	and.w	r3, r3, #32
 8003646:	2b20      	cmp	r3, #32
 8003648:	d1e9      	bne.n	800361e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	699b      	ldr	r3, [r3, #24]
 8003650:	f003 0320 	and.w	r3, r3, #32
 8003654:	2b20      	cmp	r3, #32
 8003656:	d003      	beq.n	8003660 <I2C_IsErrorOccurred+0xe0>
 8003658:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800365c:	2b00      	cmp	r3, #0
 800365e:	d0aa      	beq.n	80035b6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003660:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003664:	2b00      	cmp	r3, #0
 8003666:	d103      	bne.n	8003670 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	2220      	movs	r2, #32
 800366e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003670:	6a3b      	ldr	r3, [r7, #32]
 8003672:	f043 0304 	orr.w	r3, r3, #4
 8003676:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	699b      	ldr	r3, [r3, #24]
 8003684:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003686:	69bb      	ldr	r3, [r7, #24]
 8003688:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800368c:	2b00      	cmp	r3, #0
 800368e:	d00b      	beq.n	80036a8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003690:	6a3b      	ldr	r3, [r7, #32]
 8003692:	f043 0301 	orr.w	r3, r3, #1
 8003696:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80036a0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80036a8:	69bb      	ldr	r3, [r7, #24]
 80036aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d00b      	beq.n	80036ca <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80036b2:	6a3b      	ldr	r3, [r7, #32]
 80036b4:	f043 0308 	orr.w	r3, r3, #8
 80036b8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80036c2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80036ca:	69bb      	ldr	r3, [r7, #24]
 80036cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d00b      	beq.n	80036ec <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80036d4:	6a3b      	ldr	r3, [r7, #32]
 80036d6:	f043 0302 	orr.w	r3, r3, #2
 80036da:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80036e4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80036ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d01c      	beq.n	800372e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80036f4:	68f8      	ldr	r0, [r7, #12]
 80036f6:	f7ff fe3b 	bl	8003370 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	6859      	ldr	r1, [r3, #4]
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	4b0d      	ldr	r3, [pc, #52]	@ (800373c <I2C_IsErrorOccurred+0x1bc>)
 8003706:	400b      	ands	r3, r1
 8003708:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800370e:	6a3b      	ldr	r3, [r7, #32]
 8003710:	431a      	orrs	r2, r3
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2220      	movs	r2, #32
 800371a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2200      	movs	r2, #0
 8003722:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2200      	movs	r2, #0
 800372a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800372e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003732:	4618      	mov	r0, r3
 8003734:	3728      	adds	r7, #40	@ 0x28
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
 800373a:	bf00      	nop
 800373c:	fe00e800 	.word	0xfe00e800

08003740 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003740:	b480      	push	{r7}
 8003742:	b087      	sub	sp, #28
 8003744:	af00      	add	r7, sp, #0
 8003746:	60f8      	str	r0, [r7, #12]
 8003748:	607b      	str	r3, [r7, #4]
 800374a:	460b      	mov	r3, r1
 800374c:	817b      	strh	r3, [r7, #10]
 800374e:	4613      	mov	r3, r2
 8003750:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003752:	897b      	ldrh	r3, [r7, #10]
 8003754:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003758:	7a7b      	ldrb	r3, [r7, #9]
 800375a:	041b      	lsls	r3, r3, #16
 800375c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003760:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003766:	6a3b      	ldr	r3, [r7, #32]
 8003768:	4313      	orrs	r3, r2
 800376a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800376e:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	685a      	ldr	r2, [r3, #4]
 8003776:	6a3b      	ldr	r3, [r7, #32]
 8003778:	0d5b      	lsrs	r3, r3, #21
 800377a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800377e:	4b08      	ldr	r3, [pc, #32]	@ (80037a0 <I2C_TransferConfig+0x60>)
 8003780:	430b      	orrs	r3, r1
 8003782:	43db      	mvns	r3, r3
 8003784:	ea02 0103 	and.w	r1, r2, r3
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	697a      	ldr	r2, [r7, #20]
 800378e:	430a      	orrs	r2, r1
 8003790:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003792:	bf00      	nop
 8003794:	371c      	adds	r7, #28
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr
 800379e:	bf00      	nop
 80037a0:	03ff63ff 	.word	0x03ff63ff

080037a4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b083      	sub	sp, #12
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
 80037ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	2b20      	cmp	r3, #32
 80037b8:	d138      	bne.n	800382c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d101      	bne.n	80037c8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80037c4:	2302      	movs	r3, #2
 80037c6:	e032      	b.n	800382e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2201      	movs	r2, #1
 80037cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2224      	movs	r2, #36	@ 0x24
 80037d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f022 0201 	bic.w	r2, r2, #1
 80037e6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80037f6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	6819      	ldr	r1, [r3, #0]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	683a      	ldr	r2, [r7, #0]
 8003804:	430a      	orrs	r2, r1
 8003806:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f042 0201 	orr.w	r2, r2, #1
 8003816:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2220      	movs	r2, #32
 800381c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2200      	movs	r2, #0
 8003824:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003828:	2300      	movs	r3, #0
 800382a:	e000      	b.n	800382e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800382c:	2302      	movs	r3, #2
  }
}
 800382e:	4618      	mov	r0, r3
 8003830:	370c      	adds	r7, #12
 8003832:	46bd      	mov	sp, r7
 8003834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003838:	4770      	bx	lr

0800383a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800383a:	b480      	push	{r7}
 800383c:	b085      	sub	sp, #20
 800383e:	af00      	add	r7, sp, #0
 8003840:	6078      	str	r0, [r7, #4]
 8003842:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800384a:	b2db      	uxtb	r3, r3
 800384c:	2b20      	cmp	r3, #32
 800384e:	d139      	bne.n	80038c4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003856:	2b01      	cmp	r3, #1
 8003858:	d101      	bne.n	800385e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800385a:	2302      	movs	r3, #2
 800385c:	e033      	b.n	80038c6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2201      	movs	r2, #1
 8003862:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2224      	movs	r2, #36	@ 0x24
 800386a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f022 0201 	bic.w	r2, r2, #1
 800387c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800388c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	021b      	lsls	r3, r3, #8
 8003892:	68fa      	ldr	r2, [r7, #12]
 8003894:	4313      	orrs	r3, r2
 8003896:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	68fa      	ldr	r2, [r7, #12]
 800389e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f042 0201 	orr.w	r2, r2, #1
 80038ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2220      	movs	r2, #32
 80038b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2200      	movs	r2, #0
 80038bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80038c0:	2300      	movs	r3, #0
 80038c2:	e000      	b.n	80038c6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80038c4:	2302      	movs	r3, #2
  }
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3714      	adds	r7, #20
 80038ca:	46bd      	mov	sp, r7
 80038cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d0:	4770      	bx	lr
	...

080038d4 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b084      	sub	sp, #16
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80038dc:	4b19      	ldr	r3, [pc, #100]	@ (8003944 <HAL_PWREx_ConfigSupply+0x70>)
 80038de:	68db      	ldr	r3, [r3, #12]
 80038e0:	f003 0304 	and.w	r3, r3, #4
 80038e4:	2b04      	cmp	r3, #4
 80038e6:	d00a      	beq.n	80038fe <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80038e8:	4b16      	ldr	r3, [pc, #88]	@ (8003944 <HAL_PWREx_ConfigSupply+0x70>)
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	f003 0307 	and.w	r3, r3, #7
 80038f0:	687a      	ldr	r2, [r7, #4]
 80038f2:	429a      	cmp	r2, r3
 80038f4:	d001      	beq.n	80038fa <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e01f      	b.n	800393a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80038fa:	2300      	movs	r3, #0
 80038fc:	e01d      	b.n	800393a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80038fe:	4b11      	ldr	r3, [pc, #68]	@ (8003944 <HAL_PWREx_ConfigSupply+0x70>)
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	f023 0207 	bic.w	r2, r3, #7
 8003906:	490f      	ldr	r1, [pc, #60]	@ (8003944 <HAL_PWREx_ConfigSupply+0x70>)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	4313      	orrs	r3, r2
 800390c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800390e:	f7fe fbc9 	bl	80020a4 <HAL_GetTick>
 8003912:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003914:	e009      	b.n	800392a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003916:	f7fe fbc5 	bl	80020a4 <HAL_GetTick>
 800391a:	4602      	mov	r2, r0
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	1ad3      	subs	r3, r2, r3
 8003920:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003924:	d901      	bls.n	800392a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e007      	b.n	800393a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800392a:	4b06      	ldr	r3, [pc, #24]	@ (8003944 <HAL_PWREx_ConfigSupply+0x70>)
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003932:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003936:	d1ee      	bne.n	8003916 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003938:	2300      	movs	r3, #0
}
 800393a:	4618      	mov	r0, r3
 800393c:	3710      	adds	r7, #16
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}
 8003942:	bf00      	nop
 8003944:	58024800 	.word	0x58024800

08003948 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b08c      	sub	sp, #48	@ 0x30
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d101      	bne.n	800395a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e3c8      	b.n	80040ec <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 0301 	and.w	r3, r3, #1
 8003962:	2b00      	cmp	r3, #0
 8003964:	f000 8087 	beq.w	8003a76 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003968:	4b88      	ldr	r3, [pc, #544]	@ (8003b8c <HAL_RCC_OscConfig+0x244>)
 800396a:	691b      	ldr	r3, [r3, #16]
 800396c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003970:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003972:	4b86      	ldr	r3, [pc, #536]	@ (8003b8c <HAL_RCC_OscConfig+0x244>)
 8003974:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003976:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003978:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800397a:	2b10      	cmp	r3, #16
 800397c:	d007      	beq.n	800398e <HAL_RCC_OscConfig+0x46>
 800397e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003980:	2b18      	cmp	r3, #24
 8003982:	d110      	bne.n	80039a6 <HAL_RCC_OscConfig+0x5e>
 8003984:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003986:	f003 0303 	and.w	r3, r3, #3
 800398a:	2b02      	cmp	r3, #2
 800398c:	d10b      	bne.n	80039a6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800398e:	4b7f      	ldr	r3, [pc, #508]	@ (8003b8c <HAL_RCC_OscConfig+0x244>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003996:	2b00      	cmp	r3, #0
 8003998:	d06c      	beq.n	8003a74 <HAL_RCC_OscConfig+0x12c>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d168      	bne.n	8003a74 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e3a2      	b.n	80040ec <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039ae:	d106      	bne.n	80039be <HAL_RCC_OscConfig+0x76>
 80039b0:	4b76      	ldr	r3, [pc, #472]	@ (8003b8c <HAL_RCC_OscConfig+0x244>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a75      	ldr	r2, [pc, #468]	@ (8003b8c <HAL_RCC_OscConfig+0x244>)
 80039b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039ba:	6013      	str	r3, [r2, #0]
 80039bc:	e02e      	b.n	8003a1c <HAL_RCC_OscConfig+0xd4>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d10c      	bne.n	80039e0 <HAL_RCC_OscConfig+0x98>
 80039c6:	4b71      	ldr	r3, [pc, #452]	@ (8003b8c <HAL_RCC_OscConfig+0x244>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a70      	ldr	r2, [pc, #448]	@ (8003b8c <HAL_RCC_OscConfig+0x244>)
 80039cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039d0:	6013      	str	r3, [r2, #0]
 80039d2:	4b6e      	ldr	r3, [pc, #440]	@ (8003b8c <HAL_RCC_OscConfig+0x244>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a6d      	ldr	r2, [pc, #436]	@ (8003b8c <HAL_RCC_OscConfig+0x244>)
 80039d8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80039dc:	6013      	str	r3, [r2, #0]
 80039de:	e01d      	b.n	8003a1c <HAL_RCC_OscConfig+0xd4>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80039e8:	d10c      	bne.n	8003a04 <HAL_RCC_OscConfig+0xbc>
 80039ea:	4b68      	ldr	r3, [pc, #416]	@ (8003b8c <HAL_RCC_OscConfig+0x244>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a67      	ldr	r2, [pc, #412]	@ (8003b8c <HAL_RCC_OscConfig+0x244>)
 80039f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80039f4:	6013      	str	r3, [r2, #0]
 80039f6:	4b65      	ldr	r3, [pc, #404]	@ (8003b8c <HAL_RCC_OscConfig+0x244>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a64      	ldr	r2, [pc, #400]	@ (8003b8c <HAL_RCC_OscConfig+0x244>)
 80039fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a00:	6013      	str	r3, [r2, #0]
 8003a02:	e00b      	b.n	8003a1c <HAL_RCC_OscConfig+0xd4>
 8003a04:	4b61      	ldr	r3, [pc, #388]	@ (8003b8c <HAL_RCC_OscConfig+0x244>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a60      	ldr	r2, [pc, #384]	@ (8003b8c <HAL_RCC_OscConfig+0x244>)
 8003a0a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a0e:	6013      	str	r3, [r2, #0]
 8003a10:	4b5e      	ldr	r3, [pc, #376]	@ (8003b8c <HAL_RCC_OscConfig+0x244>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a5d      	ldr	r2, [pc, #372]	@ (8003b8c <HAL_RCC_OscConfig+0x244>)
 8003a16:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d013      	beq.n	8003a4c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a24:	f7fe fb3e 	bl	80020a4 <HAL_GetTick>
 8003a28:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003a2a:	e008      	b.n	8003a3e <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a2c:	f7fe fb3a 	bl	80020a4 <HAL_GetTick>
 8003a30:	4602      	mov	r2, r0
 8003a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a34:	1ad3      	subs	r3, r2, r3
 8003a36:	2b64      	cmp	r3, #100	@ 0x64
 8003a38:	d901      	bls.n	8003a3e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003a3a:	2303      	movs	r3, #3
 8003a3c:	e356      	b.n	80040ec <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003a3e:	4b53      	ldr	r3, [pc, #332]	@ (8003b8c <HAL_RCC_OscConfig+0x244>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d0f0      	beq.n	8003a2c <HAL_RCC_OscConfig+0xe4>
 8003a4a:	e014      	b.n	8003a76 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a4c:	f7fe fb2a 	bl	80020a4 <HAL_GetTick>
 8003a50:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003a52:	e008      	b.n	8003a66 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a54:	f7fe fb26 	bl	80020a4 <HAL_GetTick>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	2b64      	cmp	r3, #100	@ 0x64
 8003a60:	d901      	bls.n	8003a66 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003a62:	2303      	movs	r3, #3
 8003a64:	e342      	b.n	80040ec <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003a66:	4b49      	ldr	r3, [pc, #292]	@ (8003b8c <HAL_RCC_OscConfig+0x244>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d1f0      	bne.n	8003a54 <HAL_RCC_OscConfig+0x10c>
 8003a72:	e000      	b.n	8003a76 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0302 	and.w	r3, r3, #2
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	f000 808c 	beq.w	8003b9c <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a84:	4b41      	ldr	r3, [pc, #260]	@ (8003b8c <HAL_RCC_OscConfig+0x244>)
 8003a86:	691b      	ldr	r3, [r3, #16]
 8003a88:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003a8c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003a8e:	4b3f      	ldr	r3, [pc, #252]	@ (8003b8c <HAL_RCC_OscConfig+0x244>)
 8003a90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a92:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003a94:	6a3b      	ldr	r3, [r7, #32]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d007      	beq.n	8003aaa <HAL_RCC_OscConfig+0x162>
 8003a9a:	6a3b      	ldr	r3, [r7, #32]
 8003a9c:	2b18      	cmp	r3, #24
 8003a9e:	d137      	bne.n	8003b10 <HAL_RCC_OscConfig+0x1c8>
 8003aa0:	69fb      	ldr	r3, [r7, #28]
 8003aa2:	f003 0303 	and.w	r3, r3, #3
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d132      	bne.n	8003b10 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003aaa:	4b38      	ldr	r3, [pc, #224]	@ (8003b8c <HAL_RCC_OscConfig+0x244>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0304 	and.w	r3, r3, #4
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d005      	beq.n	8003ac2 <HAL_RCC_OscConfig+0x17a>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	68db      	ldr	r3, [r3, #12]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d101      	bne.n	8003ac2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e314      	b.n	80040ec <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003ac2:	4b32      	ldr	r3, [pc, #200]	@ (8003b8c <HAL_RCC_OscConfig+0x244>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f023 0219 	bic.w	r2, r3, #25
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	68db      	ldr	r3, [r3, #12]
 8003ace:	492f      	ldr	r1, [pc, #188]	@ (8003b8c <HAL_RCC_OscConfig+0x244>)
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ad4:	f7fe fae6 	bl	80020a4 <HAL_GetTick>
 8003ad8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003ada:	e008      	b.n	8003aee <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003adc:	f7fe fae2 	bl	80020a4 <HAL_GetTick>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	2b02      	cmp	r3, #2
 8003ae8:	d901      	bls.n	8003aee <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8003aea:	2303      	movs	r3, #3
 8003aec:	e2fe      	b.n	80040ec <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003aee:	4b27      	ldr	r3, [pc, #156]	@ (8003b8c <HAL_RCC_OscConfig+0x244>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0304 	and.w	r3, r3, #4
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d0f0      	beq.n	8003adc <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003afa:	4b24      	ldr	r3, [pc, #144]	@ (8003b8c <HAL_RCC_OscConfig+0x244>)
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	691b      	ldr	r3, [r3, #16]
 8003b06:	061b      	lsls	r3, r3, #24
 8003b08:	4920      	ldr	r1, [pc, #128]	@ (8003b8c <HAL_RCC_OscConfig+0x244>)
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b0e:	e045      	b.n	8003b9c <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d026      	beq.n	8003b66 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003b18:	4b1c      	ldr	r3, [pc, #112]	@ (8003b8c <HAL_RCC_OscConfig+0x244>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f023 0219 	bic.w	r2, r3, #25
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	68db      	ldr	r3, [r3, #12]
 8003b24:	4919      	ldr	r1, [pc, #100]	@ (8003b8c <HAL_RCC_OscConfig+0x244>)
 8003b26:	4313      	orrs	r3, r2
 8003b28:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b2a:	f7fe fabb 	bl	80020a4 <HAL_GetTick>
 8003b2e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b30:	e008      	b.n	8003b44 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b32:	f7fe fab7 	bl	80020a4 <HAL_GetTick>
 8003b36:	4602      	mov	r2, r0
 8003b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b3a:	1ad3      	subs	r3, r2, r3
 8003b3c:	2b02      	cmp	r3, #2
 8003b3e:	d901      	bls.n	8003b44 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003b40:	2303      	movs	r3, #3
 8003b42:	e2d3      	b.n	80040ec <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b44:	4b11      	ldr	r3, [pc, #68]	@ (8003b8c <HAL_RCC_OscConfig+0x244>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 0304 	and.w	r3, r3, #4
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d0f0      	beq.n	8003b32 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b50:	4b0e      	ldr	r3, [pc, #56]	@ (8003b8c <HAL_RCC_OscConfig+0x244>)
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	691b      	ldr	r3, [r3, #16]
 8003b5c:	061b      	lsls	r3, r3, #24
 8003b5e:	490b      	ldr	r1, [pc, #44]	@ (8003b8c <HAL_RCC_OscConfig+0x244>)
 8003b60:	4313      	orrs	r3, r2
 8003b62:	604b      	str	r3, [r1, #4]
 8003b64:	e01a      	b.n	8003b9c <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b66:	4b09      	ldr	r3, [pc, #36]	@ (8003b8c <HAL_RCC_OscConfig+0x244>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a08      	ldr	r2, [pc, #32]	@ (8003b8c <HAL_RCC_OscConfig+0x244>)
 8003b6c:	f023 0301 	bic.w	r3, r3, #1
 8003b70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b72:	f7fe fa97 	bl	80020a4 <HAL_GetTick>
 8003b76:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003b78:	e00a      	b.n	8003b90 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b7a:	f7fe fa93 	bl	80020a4 <HAL_GetTick>
 8003b7e:	4602      	mov	r2, r0
 8003b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b82:	1ad3      	subs	r3, r2, r3
 8003b84:	2b02      	cmp	r3, #2
 8003b86:	d903      	bls.n	8003b90 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003b88:	2303      	movs	r3, #3
 8003b8a:	e2af      	b.n	80040ec <HAL_RCC_OscConfig+0x7a4>
 8003b8c:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003b90:	4b96      	ldr	r3, [pc, #600]	@ (8003dec <HAL_RCC_OscConfig+0x4a4>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 0304 	and.w	r3, r3, #4
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d1ee      	bne.n	8003b7a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 0310 	and.w	r3, r3, #16
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d06a      	beq.n	8003c7e <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ba8:	4b90      	ldr	r3, [pc, #576]	@ (8003dec <HAL_RCC_OscConfig+0x4a4>)
 8003baa:	691b      	ldr	r3, [r3, #16]
 8003bac:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003bb0:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003bb2:	4b8e      	ldr	r3, [pc, #568]	@ (8003dec <HAL_RCC_OscConfig+0x4a4>)
 8003bb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bb6:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003bb8:	69bb      	ldr	r3, [r7, #24]
 8003bba:	2b08      	cmp	r3, #8
 8003bbc:	d007      	beq.n	8003bce <HAL_RCC_OscConfig+0x286>
 8003bbe:	69bb      	ldr	r3, [r7, #24]
 8003bc0:	2b18      	cmp	r3, #24
 8003bc2:	d11b      	bne.n	8003bfc <HAL_RCC_OscConfig+0x2b4>
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	f003 0303 	and.w	r3, r3, #3
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d116      	bne.n	8003bfc <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003bce:	4b87      	ldr	r3, [pc, #540]	@ (8003dec <HAL_RCC_OscConfig+0x4a4>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d005      	beq.n	8003be6 <HAL_RCC_OscConfig+0x29e>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	69db      	ldr	r3, [r3, #28]
 8003bde:	2b80      	cmp	r3, #128	@ 0x80
 8003be0:	d001      	beq.n	8003be6 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e282      	b.n	80040ec <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003be6:	4b81      	ldr	r3, [pc, #516]	@ (8003dec <HAL_RCC_OscConfig+0x4a4>)
 8003be8:	68db      	ldr	r3, [r3, #12]
 8003bea:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6a1b      	ldr	r3, [r3, #32]
 8003bf2:	061b      	lsls	r3, r3, #24
 8003bf4:	497d      	ldr	r1, [pc, #500]	@ (8003dec <HAL_RCC_OscConfig+0x4a4>)
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003bfa:	e040      	b.n	8003c7e <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	69db      	ldr	r3, [r3, #28]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d023      	beq.n	8003c4c <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003c04:	4b79      	ldr	r3, [pc, #484]	@ (8003dec <HAL_RCC_OscConfig+0x4a4>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a78      	ldr	r2, [pc, #480]	@ (8003dec <HAL_RCC_OscConfig+0x4a4>)
 8003c0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c10:	f7fe fa48 	bl	80020a4 <HAL_GetTick>
 8003c14:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003c16:	e008      	b.n	8003c2a <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003c18:	f7fe fa44 	bl	80020a4 <HAL_GetTick>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	2b02      	cmp	r3, #2
 8003c24:	d901      	bls.n	8003c2a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003c26:	2303      	movs	r3, #3
 8003c28:	e260      	b.n	80040ec <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003c2a:	4b70      	ldr	r3, [pc, #448]	@ (8003dec <HAL_RCC_OscConfig+0x4a4>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d0f0      	beq.n	8003c18 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003c36:	4b6d      	ldr	r3, [pc, #436]	@ (8003dec <HAL_RCC_OscConfig+0x4a4>)
 8003c38:	68db      	ldr	r3, [r3, #12]
 8003c3a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6a1b      	ldr	r3, [r3, #32]
 8003c42:	061b      	lsls	r3, r3, #24
 8003c44:	4969      	ldr	r1, [pc, #420]	@ (8003dec <HAL_RCC_OscConfig+0x4a4>)
 8003c46:	4313      	orrs	r3, r2
 8003c48:	60cb      	str	r3, [r1, #12]
 8003c4a:	e018      	b.n	8003c7e <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003c4c:	4b67      	ldr	r3, [pc, #412]	@ (8003dec <HAL_RCC_OscConfig+0x4a4>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a66      	ldr	r2, [pc, #408]	@ (8003dec <HAL_RCC_OscConfig+0x4a4>)
 8003c52:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c58:	f7fe fa24 	bl	80020a4 <HAL_GetTick>
 8003c5c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003c5e:	e008      	b.n	8003c72 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003c60:	f7fe fa20 	bl	80020a4 <HAL_GetTick>
 8003c64:	4602      	mov	r2, r0
 8003c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c68:	1ad3      	subs	r3, r2, r3
 8003c6a:	2b02      	cmp	r3, #2
 8003c6c:	d901      	bls.n	8003c72 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8003c6e:	2303      	movs	r3, #3
 8003c70:	e23c      	b.n	80040ec <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003c72:	4b5e      	ldr	r3, [pc, #376]	@ (8003dec <HAL_RCC_OscConfig+0x4a4>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d1f0      	bne.n	8003c60 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 0308 	and.w	r3, r3, #8
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d036      	beq.n	8003cf8 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	695b      	ldr	r3, [r3, #20]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d019      	beq.n	8003cc6 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c92:	4b56      	ldr	r3, [pc, #344]	@ (8003dec <HAL_RCC_OscConfig+0x4a4>)
 8003c94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c96:	4a55      	ldr	r2, [pc, #340]	@ (8003dec <HAL_RCC_OscConfig+0x4a4>)
 8003c98:	f043 0301 	orr.w	r3, r3, #1
 8003c9c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c9e:	f7fe fa01 	bl	80020a4 <HAL_GetTick>
 8003ca2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003ca4:	e008      	b.n	8003cb8 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ca6:	f7fe f9fd 	bl	80020a4 <HAL_GetTick>
 8003caa:	4602      	mov	r2, r0
 8003cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cae:	1ad3      	subs	r3, r2, r3
 8003cb0:	2b02      	cmp	r3, #2
 8003cb2:	d901      	bls.n	8003cb8 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8003cb4:	2303      	movs	r3, #3
 8003cb6:	e219      	b.n	80040ec <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003cb8:	4b4c      	ldr	r3, [pc, #304]	@ (8003dec <HAL_RCC_OscConfig+0x4a4>)
 8003cba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cbc:	f003 0302 	and.w	r3, r3, #2
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d0f0      	beq.n	8003ca6 <HAL_RCC_OscConfig+0x35e>
 8003cc4:	e018      	b.n	8003cf8 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cc6:	4b49      	ldr	r3, [pc, #292]	@ (8003dec <HAL_RCC_OscConfig+0x4a4>)
 8003cc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cca:	4a48      	ldr	r2, [pc, #288]	@ (8003dec <HAL_RCC_OscConfig+0x4a4>)
 8003ccc:	f023 0301 	bic.w	r3, r3, #1
 8003cd0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cd2:	f7fe f9e7 	bl	80020a4 <HAL_GetTick>
 8003cd6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003cd8:	e008      	b.n	8003cec <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cda:	f7fe f9e3 	bl	80020a4 <HAL_GetTick>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ce2:	1ad3      	subs	r3, r2, r3
 8003ce4:	2b02      	cmp	r3, #2
 8003ce6:	d901      	bls.n	8003cec <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8003ce8:	2303      	movs	r3, #3
 8003cea:	e1ff      	b.n	80040ec <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003cec:	4b3f      	ldr	r3, [pc, #252]	@ (8003dec <HAL_RCC_OscConfig+0x4a4>)
 8003cee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cf0:	f003 0302 	and.w	r3, r3, #2
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d1f0      	bne.n	8003cda <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 0320 	and.w	r3, r3, #32
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d036      	beq.n	8003d72 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	699b      	ldr	r3, [r3, #24]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d019      	beq.n	8003d40 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003d0c:	4b37      	ldr	r3, [pc, #220]	@ (8003dec <HAL_RCC_OscConfig+0x4a4>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a36      	ldr	r2, [pc, #216]	@ (8003dec <HAL_RCC_OscConfig+0x4a4>)
 8003d12:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003d16:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003d18:	f7fe f9c4 	bl	80020a4 <HAL_GetTick>
 8003d1c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003d1e:	e008      	b.n	8003d32 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d20:	f7fe f9c0 	bl	80020a4 <HAL_GetTick>
 8003d24:	4602      	mov	r2, r0
 8003d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d28:	1ad3      	subs	r3, r2, r3
 8003d2a:	2b02      	cmp	r3, #2
 8003d2c:	d901      	bls.n	8003d32 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8003d2e:	2303      	movs	r3, #3
 8003d30:	e1dc      	b.n	80040ec <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003d32:	4b2e      	ldr	r3, [pc, #184]	@ (8003dec <HAL_RCC_OscConfig+0x4a4>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d0f0      	beq.n	8003d20 <HAL_RCC_OscConfig+0x3d8>
 8003d3e:	e018      	b.n	8003d72 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003d40:	4b2a      	ldr	r3, [pc, #168]	@ (8003dec <HAL_RCC_OscConfig+0x4a4>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a29      	ldr	r2, [pc, #164]	@ (8003dec <HAL_RCC_OscConfig+0x4a4>)
 8003d46:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003d4a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003d4c:	f7fe f9aa 	bl	80020a4 <HAL_GetTick>
 8003d50:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003d52:	e008      	b.n	8003d66 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d54:	f7fe f9a6 	bl	80020a4 <HAL_GetTick>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d5c:	1ad3      	subs	r3, r2, r3
 8003d5e:	2b02      	cmp	r3, #2
 8003d60:	d901      	bls.n	8003d66 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8003d62:	2303      	movs	r3, #3
 8003d64:	e1c2      	b.n	80040ec <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003d66:	4b21      	ldr	r3, [pc, #132]	@ (8003dec <HAL_RCC_OscConfig+0x4a4>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d1f0      	bne.n	8003d54 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 0304 	and.w	r3, r3, #4
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	f000 8086 	beq.w	8003e8c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003d80:	4b1b      	ldr	r3, [pc, #108]	@ (8003df0 <HAL_RCC_OscConfig+0x4a8>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a1a      	ldr	r2, [pc, #104]	@ (8003df0 <HAL_RCC_OscConfig+0x4a8>)
 8003d86:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d8a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d8c:	f7fe f98a 	bl	80020a4 <HAL_GetTick>
 8003d90:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d92:	e008      	b.n	8003da6 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d94:	f7fe f986 	bl	80020a4 <HAL_GetTick>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	2b64      	cmp	r3, #100	@ 0x64
 8003da0:	d901      	bls.n	8003da6 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8003da2:	2303      	movs	r3, #3
 8003da4:	e1a2      	b.n	80040ec <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003da6:	4b12      	ldr	r3, [pc, #72]	@ (8003df0 <HAL_RCC_OscConfig+0x4a8>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d0f0      	beq.n	8003d94 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d106      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x480>
 8003dba:	4b0c      	ldr	r3, [pc, #48]	@ (8003dec <HAL_RCC_OscConfig+0x4a4>)
 8003dbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dbe:	4a0b      	ldr	r2, [pc, #44]	@ (8003dec <HAL_RCC_OscConfig+0x4a4>)
 8003dc0:	f043 0301 	orr.w	r3, r3, #1
 8003dc4:	6713      	str	r3, [r2, #112]	@ 0x70
 8003dc6:	e032      	b.n	8003e2e <HAL_RCC_OscConfig+0x4e6>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d111      	bne.n	8003df4 <HAL_RCC_OscConfig+0x4ac>
 8003dd0:	4b06      	ldr	r3, [pc, #24]	@ (8003dec <HAL_RCC_OscConfig+0x4a4>)
 8003dd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dd4:	4a05      	ldr	r2, [pc, #20]	@ (8003dec <HAL_RCC_OscConfig+0x4a4>)
 8003dd6:	f023 0301 	bic.w	r3, r3, #1
 8003dda:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ddc:	4b03      	ldr	r3, [pc, #12]	@ (8003dec <HAL_RCC_OscConfig+0x4a4>)
 8003dde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003de0:	4a02      	ldr	r2, [pc, #8]	@ (8003dec <HAL_RCC_OscConfig+0x4a4>)
 8003de2:	f023 0304 	bic.w	r3, r3, #4
 8003de6:	6713      	str	r3, [r2, #112]	@ 0x70
 8003de8:	e021      	b.n	8003e2e <HAL_RCC_OscConfig+0x4e6>
 8003dea:	bf00      	nop
 8003dec:	58024400 	.word	0x58024400
 8003df0:	58024800 	.word	0x58024800
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	2b05      	cmp	r3, #5
 8003dfa:	d10c      	bne.n	8003e16 <HAL_RCC_OscConfig+0x4ce>
 8003dfc:	4b83      	ldr	r3, [pc, #524]	@ (800400c <HAL_RCC_OscConfig+0x6c4>)
 8003dfe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e00:	4a82      	ldr	r2, [pc, #520]	@ (800400c <HAL_RCC_OscConfig+0x6c4>)
 8003e02:	f043 0304 	orr.w	r3, r3, #4
 8003e06:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e08:	4b80      	ldr	r3, [pc, #512]	@ (800400c <HAL_RCC_OscConfig+0x6c4>)
 8003e0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e0c:	4a7f      	ldr	r2, [pc, #508]	@ (800400c <HAL_RCC_OscConfig+0x6c4>)
 8003e0e:	f043 0301 	orr.w	r3, r3, #1
 8003e12:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e14:	e00b      	b.n	8003e2e <HAL_RCC_OscConfig+0x4e6>
 8003e16:	4b7d      	ldr	r3, [pc, #500]	@ (800400c <HAL_RCC_OscConfig+0x6c4>)
 8003e18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e1a:	4a7c      	ldr	r2, [pc, #496]	@ (800400c <HAL_RCC_OscConfig+0x6c4>)
 8003e1c:	f023 0301 	bic.w	r3, r3, #1
 8003e20:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e22:	4b7a      	ldr	r3, [pc, #488]	@ (800400c <HAL_RCC_OscConfig+0x6c4>)
 8003e24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e26:	4a79      	ldr	r2, [pc, #484]	@ (800400c <HAL_RCC_OscConfig+0x6c4>)
 8003e28:	f023 0304 	bic.w	r3, r3, #4
 8003e2c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d015      	beq.n	8003e62 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e36:	f7fe f935 	bl	80020a4 <HAL_GetTick>
 8003e3a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e3c:	e00a      	b.n	8003e54 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e3e:	f7fe f931 	bl	80020a4 <HAL_GetTick>
 8003e42:	4602      	mov	r2, r0
 8003e44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e46:	1ad3      	subs	r3, r2, r3
 8003e48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d901      	bls.n	8003e54 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8003e50:	2303      	movs	r3, #3
 8003e52:	e14b      	b.n	80040ec <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e54:	4b6d      	ldr	r3, [pc, #436]	@ (800400c <HAL_RCC_OscConfig+0x6c4>)
 8003e56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e58:	f003 0302 	and.w	r3, r3, #2
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d0ee      	beq.n	8003e3e <HAL_RCC_OscConfig+0x4f6>
 8003e60:	e014      	b.n	8003e8c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e62:	f7fe f91f 	bl	80020a4 <HAL_GetTick>
 8003e66:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003e68:	e00a      	b.n	8003e80 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e6a:	f7fe f91b 	bl	80020a4 <HAL_GetTick>
 8003e6e:	4602      	mov	r2, r0
 8003e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e72:	1ad3      	subs	r3, r2, r3
 8003e74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d901      	bls.n	8003e80 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8003e7c:	2303      	movs	r3, #3
 8003e7e:	e135      	b.n	80040ec <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003e80:	4b62      	ldr	r3, [pc, #392]	@ (800400c <HAL_RCC_OscConfig+0x6c4>)
 8003e82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e84:	f003 0302 	and.w	r3, r3, #2
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d1ee      	bne.n	8003e6a <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	f000 812a 	beq.w	80040ea <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003e96:	4b5d      	ldr	r3, [pc, #372]	@ (800400c <HAL_RCC_OscConfig+0x6c4>)
 8003e98:	691b      	ldr	r3, [r3, #16]
 8003e9a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003e9e:	2b18      	cmp	r3, #24
 8003ea0:	f000 80ba 	beq.w	8004018 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ea8:	2b02      	cmp	r3, #2
 8003eaa:	f040 8095 	bne.w	8003fd8 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003eae:	4b57      	ldr	r3, [pc, #348]	@ (800400c <HAL_RCC_OscConfig+0x6c4>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a56      	ldr	r2, [pc, #344]	@ (800400c <HAL_RCC_OscConfig+0x6c4>)
 8003eb4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003eb8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eba:	f7fe f8f3 	bl	80020a4 <HAL_GetTick>
 8003ebe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003ec0:	e008      	b.n	8003ed4 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ec2:	f7fe f8ef 	bl	80020a4 <HAL_GetTick>
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eca:	1ad3      	subs	r3, r2, r3
 8003ecc:	2b02      	cmp	r3, #2
 8003ece:	d901      	bls.n	8003ed4 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8003ed0:	2303      	movs	r3, #3
 8003ed2:	e10b      	b.n	80040ec <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003ed4:	4b4d      	ldr	r3, [pc, #308]	@ (800400c <HAL_RCC_OscConfig+0x6c4>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d1f0      	bne.n	8003ec2 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ee0:	4b4a      	ldr	r3, [pc, #296]	@ (800400c <HAL_RCC_OscConfig+0x6c4>)
 8003ee2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003ee4:	4b4a      	ldr	r3, [pc, #296]	@ (8004010 <HAL_RCC_OscConfig+0x6c8>)
 8003ee6:	4013      	ands	r3, r2
 8003ee8:	687a      	ldr	r2, [r7, #4]
 8003eea:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8003eec:	687a      	ldr	r2, [r7, #4]
 8003eee:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003ef0:	0112      	lsls	r2, r2, #4
 8003ef2:	430a      	orrs	r2, r1
 8003ef4:	4945      	ldr	r1, [pc, #276]	@ (800400c <HAL_RCC_OscConfig+0x6c4>)
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	628b      	str	r3, [r1, #40]	@ 0x28
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003efe:	3b01      	subs	r3, #1
 8003f00:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f08:	3b01      	subs	r3, #1
 8003f0a:	025b      	lsls	r3, r3, #9
 8003f0c:	b29b      	uxth	r3, r3
 8003f0e:	431a      	orrs	r2, r3
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f14:	3b01      	subs	r3, #1
 8003f16:	041b      	lsls	r3, r3, #16
 8003f18:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003f1c:	431a      	orrs	r2, r3
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f22:	3b01      	subs	r3, #1
 8003f24:	061b      	lsls	r3, r3, #24
 8003f26:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003f2a:	4938      	ldr	r1, [pc, #224]	@ (800400c <HAL_RCC_OscConfig+0x6c4>)
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003f30:	4b36      	ldr	r3, [pc, #216]	@ (800400c <HAL_RCC_OscConfig+0x6c4>)
 8003f32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f34:	4a35      	ldr	r2, [pc, #212]	@ (800400c <HAL_RCC_OscConfig+0x6c4>)
 8003f36:	f023 0301 	bic.w	r3, r3, #1
 8003f3a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003f3c:	4b33      	ldr	r3, [pc, #204]	@ (800400c <HAL_RCC_OscConfig+0x6c4>)
 8003f3e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f40:	4b34      	ldr	r3, [pc, #208]	@ (8004014 <HAL_RCC_OscConfig+0x6cc>)
 8003f42:	4013      	ands	r3, r2
 8003f44:	687a      	ldr	r2, [r7, #4]
 8003f46:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003f48:	00d2      	lsls	r2, r2, #3
 8003f4a:	4930      	ldr	r1, [pc, #192]	@ (800400c <HAL_RCC_OscConfig+0x6c4>)
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003f50:	4b2e      	ldr	r3, [pc, #184]	@ (800400c <HAL_RCC_OscConfig+0x6c4>)
 8003f52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f54:	f023 020c 	bic.w	r2, r3, #12
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f5c:	492b      	ldr	r1, [pc, #172]	@ (800400c <HAL_RCC_OscConfig+0x6c4>)
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003f62:	4b2a      	ldr	r3, [pc, #168]	@ (800400c <HAL_RCC_OscConfig+0x6c4>)
 8003f64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f66:	f023 0202 	bic.w	r2, r3, #2
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f6e:	4927      	ldr	r1, [pc, #156]	@ (800400c <HAL_RCC_OscConfig+0x6c4>)
 8003f70:	4313      	orrs	r3, r2
 8003f72:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003f74:	4b25      	ldr	r3, [pc, #148]	@ (800400c <HAL_RCC_OscConfig+0x6c4>)
 8003f76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f78:	4a24      	ldr	r2, [pc, #144]	@ (800400c <HAL_RCC_OscConfig+0x6c4>)
 8003f7a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f7e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f80:	4b22      	ldr	r3, [pc, #136]	@ (800400c <HAL_RCC_OscConfig+0x6c4>)
 8003f82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f84:	4a21      	ldr	r2, [pc, #132]	@ (800400c <HAL_RCC_OscConfig+0x6c4>)
 8003f86:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f8a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003f8c:	4b1f      	ldr	r3, [pc, #124]	@ (800400c <HAL_RCC_OscConfig+0x6c4>)
 8003f8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f90:	4a1e      	ldr	r2, [pc, #120]	@ (800400c <HAL_RCC_OscConfig+0x6c4>)
 8003f92:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003f96:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003f98:	4b1c      	ldr	r3, [pc, #112]	@ (800400c <HAL_RCC_OscConfig+0x6c4>)
 8003f9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f9c:	4a1b      	ldr	r2, [pc, #108]	@ (800400c <HAL_RCC_OscConfig+0x6c4>)
 8003f9e:	f043 0301 	orr.w	r3, r3, #1
 8003fa2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fa4:	4b19      	ldr	r3, [pc, #100]	@ (800400c <HAL_RCC_OscConfig+0x6c4>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a18      	ldr	r2, [pc, #96]	@ (800400c <HAL_RCC_OscConfig+0x6c4>)
 8003faa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003fae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fb0:	f7fe f878 	bl	80020a4 <HAL_GetTick>
 8003fb4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003fb6:	e008      	b.n	8003fca <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fb8:	f7fe f874 	bl	80020a4 <HAL_GetTick>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fc0:	1ad3      	subs	r3, r2, r3
 8003fc2:	2b02      	cmp	r3, #2
 8003fc4:	d901      	bls.n	8003fca <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	e090      	b.n	80040ec <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003fca:	4b10      	ldr	r3, [pc, #64]	@ (800400c <HAL_RCC_OscConfig+0x6c4>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d0f0      	beq.n	8003fb8 <HAL_RCC_OscConfig+0x670>
 8003fd6:	e088      	b.n	80040ea <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fd8:	4b0c      	ldr	r3, [pc, #48]	@ (800400c <HAL_RCC_OscConfig+0x6c4>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a0b      	ldr	r2, [pc, #44]	@ (800400c <HAL_RCC_OscConfig+0x6c4>)
 8003fde:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003fe2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fe4:	f7fe f85e 	bl	80020a4 <HAL_GetTick>
 8003fe8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003fea:	e008      	b.n	8003ffe <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fec:	f7fe f85a 	bl	80020a4 <HAL_GetTick>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ff4:	1ad3      	subs	r3, r2, r3
 8003ff6:	2b02      	cmp	r3, #2
 8003ff8:	d901      	bls.n	8003ffe <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8003ffa:	2303      	movs	r3, #3
 8003ffc:	e076      	b.n	80040ec <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003ffe:	4b03      	ldr	r3, [pc, #12]	@ (800400c <HAL_RCC_OscConfig+0x6c4>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004006:	2b00      	cmp	r3, #0
 8004008:	d1f0      	bne.n	8003fec <HAL_RCC_OscConfig+0x6a4>
 800400a:	e06e      	b.n	80040ea <HAL_RCC_OscConfig+0x7a2>
 800400c:	58024400 	.word	0x58024400
 8004010:	fffffc0c 	.word	0xfffffc0c
 8004014:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004018:	4b36      	ldr	r3, [pc, #216]	@ (80040f4 <HAL_RCC_OscConfig+0x7ac>)
 800401a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800401c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800401e:	4b35      	ldr	r3, [pc, #212]	@ (80040f4 <HAL_RCC_OscConfig+0x7ac>)
 8004020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004022:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004028:	2b01      	cmp	r3, #1
 800402a:	d031      	beq.n	8004090 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	f003 0203 	and.w	r2, r3, #3
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004036:	429a      	cmp	r2, r3
 8004038:	d12a      	bne.n	8004090 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	091b      	lsrs	r3, r3, #4
 800403e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004046:	429a      	cmp	r2, r3
 8004048:	d122      	bne.n	8004090 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004054:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004056:	429a      	cmp	r2, r3
 8004058:	d11a      	bne.n	8004090 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	0a5b      	lsrs	r3, r3, #9
 800405e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004066:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004068:	429a      	cmp	r2, r3
 800406a:	d111      	bne.n	8004090 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	0c1b      	lsrs	r3, r3, #16
 8004070:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004078:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800407a:	429a      	cmp	r2, r3
 800407c:	d108      	bne.n	8004090 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	0e1b      	lsrs	r3, r3, #24
 8004082:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800408a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800408c:	429a      	cmp	r2, r3
 800408e:	d001      	beq.n	8004094 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	e02b      	b.n	80040ec <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004094:	4b17      	ldr	r3, [pc, #92]	@ (80040f4 <HAL_RCC_OscConfig+0x7ac>)
 8004096:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004098:	08db      	lsrs	r3, r3, #3
 800409a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800409e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040a4:	693a      	ldr	r2, [r7, #16]
 80040a6:	429a      	cmp	r2, r3
 80040a8:	d01f      	beq.n	80040ea <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80040aa:	4b12      	ldr	r3, [pc, #72]	@ (80040f4 <HAL_RCC_OscConfig+0x7ac>)
 80040ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040ae:	4a11      	ldr	r2, [pc, #68]	@ (80040f4 <HAL_RCC_OscConfig+0x7ac>)
 80040b0:	f023 0301 	bic.w	r3, r3, #1
 80040b4:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80040b6:	f7fd fff5 	bl	80020a4 <HAL_GetTick>
 80040ba:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80040bc:	bf00      	nop
 80040be:	f7fd fff1 	bl	80020a4 <HAL_GetTick>
 80040c2:	4602      	mov	r2, r0
 80040c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d0f9      	beq.n	80040be <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80040ca:	4b0a      	ldr	r3, [pc, #40]	@ (80040f4 <HAL_RCC_OscConfig+0x7ac>)
 80040cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80040ce:	4b0a      	ldr	r3, [pc, #40]	@ (80040f8 <HAL_RCC_OscConfig+0x7b0>)
 80040d0:	4013      	ands	r3, r2
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80040d6:	00d2      	lsls	r2, r2, #3
 80040d8:	4906      	ldr	r1, [pc, #24]	@ (80040f4 <HAL_RCC_OscConfig+0x7ac>)
 80040da:	4313      	orrs	r3, r2
 80040dc:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80040de:	4b05      	ldr	r3, [pc, #20]	@ (80040f4 <HAL_RCC_OscConfig+0x7ac>)
 80040e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040e2:	4a04      	ldr	r2, [pc, #16]	@ (80040f4 <HAL_RCC_OscConfig+0x7ac>)
 80040e4:	f043 0301 	orr.w	r3, r3, #1
 80040e8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80040ea:	2300      	movs	r3, #0
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3730      	adds	r7, #48	@ 0x30
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}
 80040f4:	58024400 	.word	0x58024400
 80040f8:	ffff0007 	.word	0xffff0007

080040fc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b086      	sub	sp, #24
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
 8004104:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d101      	bne.n	8004110 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	e19c      	b.n	800444a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004110:	4b8a      	ldr	r3, [pc, #552]	@ (800433c <HAL_RCC_ClockConfig+0x240>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 030f 	and.w	r3, r3, #15
 8004118:	683a      	ldr	r2, [r7, #0]
 800411a:	429a      	cmp	r2, r3
 800411c:	d910      	bls.n	8004140 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800411e:	4b87      	ldr	r3, [pc, #540]	@ (800433c <HAL_RCC_ClockConfig+0x240>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f023 020f 	bic.w	r2, r3, #15
 8004126:	4985      	ldr	r1, [pc, #532]	@ (800433c <HAL_RCC_ClockConfig+0x240>)
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	4313      	orrs	r3, r2
 800412c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800412e:	4b83      	ldr	r3, [pc, #524]	@ (800433c <HAL_RCC_ClockConfig+0x240>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 030f 	and.w	r3, r3, #15
 8004136:	683a      	ldr	r2, [r7, #0]
 8004138:	429a      	cmp	r2, r3
 800413a:	d001      	beq.n	8004140 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	e184      	b.n	800444a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 0304 	and.w	r3, r3, #4
 8004148:	2b00      	cmp	r3, #0
 800414a:	d010      	beq.n	800416e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	691a      	ldr	r2, [r3, #16]
 8004150:	4b7b      	ldr	r3, [pc, #492]	@ (8004340 <HAL_RCC_ClockConfig+0x244>)
 8004152:	699b      	ldr	r3, [r3, #24]
 8004154:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004158:	429a      	cmp	r2, r3
 800415a:	d908      	bls.n	800416e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800415c:	4b78      	ldr	r3, [pc, #480]	@ (8004340 <HAL_RCC_ClockConfig+0x244>)
 800415e:	699b      	ldr	r3, [r3, #24]
 8004160:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	691b      	ldr	r3, [r3, #16]
 8004168:	4975      	ldr	r1, [pc, #468]	@ (8004340 <HAL_RCC_ClockConfig+0x244>)
 800416a:	4313      	orrs	r3, r2
 800416c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 0308 	and.w	r3, r3, #8
 8004176:	2b00      	cmp	r3, #0
 8004178:	d010      	beq.n	800419c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	695a      	ldr	r2, [r3, #20]
 800417e:	4b70      	ldr	r3, [pc, #448]	@ (8004340 <HAL_RCC_ClockConfig+0x244>)
 8004180:	69db      	ldr	r3, [r3, #28]
 8004182:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004186:	429a      	cmp	r2, r3
 8004188:	d908      	bls.n	800419c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800418a:	4b6d      	ldr	r3, [pc, #436]	@ (8004340 <HAL_RCC_ClockConfig+0x244>)
 800418c:	69db      	ldr	r3, [r3, #28]
 800418e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	695b      	ldr	r3, [r3, #20]
 8004196:	496a      	ldr	r1, [pc, #424]	@ (8004340 <HAL_RCC_ClockConfig+0x244>)
 8004198:	4313      	orrs	r3, r2
 800419a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f003 0310 	and.w	r3, r3, #16
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d010      	beq.n	80041ca <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	699a      	ldr	r2, [r3, #24]
 80041ac:	4b64      	ldr	r3, [pc, #400]	@ (8004340 <HAL_RCC_ClockConfig+0x244>)
 80041ae:	69db      	ldr	r3, [r3, #28]
 80041b0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d908      	bls.n	80041ca <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80041b8:	4b61      	ldr	r3, [pc, #388]	@ (8004340 <HAL_RCC_ClockConfig+0x244>)
 80041ba:	69db      	ldr	r3, [r3, #28]
 80041bc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	699b      	ldr	r3, [r3, #24]
 80041c4:	495e      	ldr	r1, [pc, #376]	@ (8004340 <HAL_RCC_ClockConfig+0x244>)
 80041c6:	4313      	orrs	r3, r2
 80041c8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 0320 	and.w	r3, r3, #32
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d010      	beq.n	80041f8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	69da      	ldr	r2, [r3, #28]
 80041da:	4b59      	ldr	r3, [pc, #356]	@ (8004340 <HAL_RCC_ClockConfig+0x244>)
 80041dc:	6a1b      	ldr	r3, [r3, #32]
 80041de:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d908      	bls.n	80041f8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80041e6:	4b56      	ldr	r3, [pc, #344]	@ (8004340 <HAL_RCC_ClockConfig+0x244>)
 80041e8:	6a1b      	ldr	r3, [r3, #32]
 80041ea:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	69db      	ldr	r3, [r3, #28]
 80041f2:	4953      	ldr	r1, [pc, #332]	@ (8004340 <HAL_RCC_ClockConfig+0x244>)
 80041f4:	4313      	orrs	r3, r2
 80041f6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 0302 	and.w	r3, r3, #2
 8004200:	2b00      	cmp	r3, #0
 8004202:	d010      	beq.n	8004226 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	68da      	ldr	r2, [r3, #12]
 8004208:	4b4d      	ldr	r3, [pc, #308]	@ (8004340 <HAL_RCC_ClockConfig+0x244>)
 800420a:	699b      	ldr	r3, [r3, #24]
 800420c:	f003 030f 	and.w	r3, r3, #15
 8004210:	429a      	cmp	r2, r3
 8004212:	d908      	bls.n	8004226 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004214:	4b4a      	ldr	r3, [pc, #296]	@ (8004340 <HAL_RCC_ClockConfig+0x244>)
 8004216:	699b      	ldr	r3, [r3, #24]
 8004218:	f023 020f 	bic.w	r2, r3, #15
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	4947      	ldr	r1, [pc, #284]	@ (8004340 <HAL_RCC_ClockConfig+0x244>)
 8004222:	4313      	orrs	r3, r2
 8004224:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 0301 	and.w	r3, r3, #1
 800422e:	2b00      	cmp	r3, #0
 8004230:	d055      	beq.n	80042de <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004232:	4b43      	ldr	r3, [pc, #268]	@ (8004340 <HAL_RCC_ClockConfig+0x244>)
 8004234:	699b      	ldr	r3, [r3, #24]
 8004236:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	4940      	ldr	r1, [pc, #256]	@ (8004340 <HAL_RCC_ClockConfig+0x244>)
 8004240:	4313      	orrs	r3, r2
 8004242:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	2b02      	cmp	r3, #2
 800424a:	d107      	bne.n	800425c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800424c:	4b3c      	ldr	r3, [pc, #240]	@ (8004340 <HAL_RCC_ClockConfig+0x244>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004254:	2b00      	cmp	r3, #0
 8004256:	d121      	bne.n	800429c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	e0f6      	b.n	800444a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	2b03      	cmp	r3, #3
 8004262:	d107      	bne.n	8004274 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004264:	4b36      	ldr	r3, [pc, #216]	@ (8004340 <HAL_RCC_ClockConfig+0x244>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800426c:	2b00      	cmp	r3, #0
 800426e:	d115      	bne.n	800429c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	e0ea      	b.n	800444a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	2b01      	cmp	r3, #1
 800427a:	d107      	bne.n	800428c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800427c:	4b30      	ldr	r3, [pc, #192]	@ (8004340 <HAL_RCC_ClockConfig+0x244>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004284:	2b00      	cmp	r3, #0
 8004286:	d109      	bne.n	800429c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	e0de      	b.n	800444a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800428c:	4b2c      	ldr	r3, [pc, #176]	@ (8004340 <HAL_RCC_ClockConfig+0x244>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 0304 	and.w	r3, r3, #4
 8004294:	2b00      	cmp	r3, #0
 8004296:	d101      	bne.n	800429c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	e0d6      	b.n	800444a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800429c:	4b28      	ldr	r3, [pc, #160]	@ (8004340 <HAL_RCC_ClockConfig+0x244>)
 800429e:	691b      	ldr	r3, [r3, #16]
 80042a0:	f023 0207 	bic.w	r2, r3, #7
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	4925      	ldr	r1, [pc, #148]	@ (8004340 <HAL_RCC_ClockConfig+0x244>)
 80042aa:	4313      	orrs	r3, r2
 80042ac:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042ae:	f7fd fef9 	bl	80020a4 <HAL_GetTick>
 80042b2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042b4:	e00a      	b.n	80042cc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042b6:	f7fd fef5 	bl	80020a4 <HAL_GetTick>
 80042ba:	4602      	mov	r2, r0
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	1ad3      	subs	r3, r2, r3
 80042c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d901      	bls.n	80042cc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80042c8:	2303      	movs	r3, #3
 80042ca:	e0be      	b.n	800444a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042cc:	4b1c      	ldr	r3, [pc, #112]	@ (8004340 <HAL_RCC_ClockConfig+0x244>)
 80042ce:	691b      	ldr	r3, [r3, #16]
 80042d0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	00db      	lsls	r3, r3, #3
 80042da:	429a      	cmp	r2, r3
 80042dc:	d1eb      	bne.n	80042b6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f003 0302 	and.w	r3, r3, #2
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d010      	beq.n	800430c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	68da      	ldr	r2, [r3, #12]
 80042ee:	4b14      	ldr	r3, [pc, #80]	@ (8004340 <HAL_RCC_ClockConfig+0x244>)
 80042f0:	699b      	ldr	r3, [r3, #24]
 80042f2:	f003 030f 	and.w	r3, r3, #15
 80042f6:	429a      	cmp	r2, r3
 80042f8:	d208      	bcs.n	800430c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042fa:	4b11      	ldr	r3, [pc, #68]	@ (8004340 <HAL_RCC_ClockConfig+0x244>)
 80042fc:	699b      	ldr	r3, [r3, #24]
 80042fe:	f023 020f 	bic.w	r2, r3, #15
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	68db      	ldr	r3, [r3, #12]
 8004306:	490e      	ldr	r1, [pc, #56]	@ (8004340 <HAL_RCC_ClockConfig+0x244>)
 8004308:	4313      	orrs	r3, r2
 800430a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800430c:	4b0b      	ldr	r3, [pc, #44]	@ (800433c <HAL_RCC_ClockConfig+0x240>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 030f 	and.w	r3, r3, #15
 8004314:	683a      	ldr	r2, [r7, #0]
 8004316:	429a      	cmp	r2, r3
 8004318:	d214      	bcs.n	8004344 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800431a:	4b08      	ldr	r3, [pc, #32]	@ (800433c <HAL_RCC_ClockConfig+0x240>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f023 020f 	bic.w	r2, r3, #15
 8004322:	4906      	ldr	r1, [pc, #24]	@ (800433c <HAL_RCC_ClockConfig+0x240>)
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	4313      	orrs	r3, r2
 8004328:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800432a:	4b04      	ldr	r3, [pc, #16]	@ (800433c <HAL_RCC_ClockConfig+0x240>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 030f 	and.w	r3, r3, #15
 8004332:	683a      	ldr	r2, [r7, #0]
 8004334:	429a      	cmp	r2, r3
 8004336:	d005      	beq.n	8004344 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004338:	2301      	movs	r3, #1
 800433a:	e086      	b.n	800444a <HAL_RCC_ClockConfig+0x34e>
 800433c:	52002000 	.word	0x52002000
 8004340:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 0304 	and.w	r3, r3, #4
 800434c:	2b00      	cmp	r3, #0
 800434e:	d010      	beq.n	8004372 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	691a      	ldr	r2, [r3, #16]
 8004354:	4b3f      	ldr	r3, [pc, #252]	@ (8004454 <HAL_RCC_ClockConfig+0x358>)
 8004356:	699b      	ldr	r3, [r3, #24]
 8004358:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800435c:	429a      	cmp	r2, r3
 800435e:	d208      	bcs.n	8004372 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004360:	4b3c      	ldr	r3, [pc, #240]	@ (8004454 <HAL_RCC_ClockConfig+0x358>)
 8004362:	699b      	ldr	r3, [r3, #24]
 8004364:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	691b      	ldr	r3, [r3, #16]
 800436c:	4939      	ldr	r1, [pc, #228]	@ (8004454 <HAL_RCC_ClockConfig+0x358>)
 800436e:	4313      	orrs	r3, r2
 8004370:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 0308 	and.w	r3, r3, #8
 800437a:	2b00      	cmp	r3, #0
 800437c:	d010      	beq.n	80043a0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	695a      	ldr	r2, [r3, #20]
 8004382:	4b34      	ldr	r3, [pc, #208]	@ (8004454 <HAL_RCC_ClockConfig+0x358>)
 8004384:	69db      	ldr	r3, [r3, #28]
 8004386:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800438a:	429a      	cmp	r2, r3
 800438c:	d208      	bcs.n	80043a0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800438e:	4b31      	ldr	r3, [pc, #196]	@ (8004454 <HAL_RCC_ClockConfig+0x358>)
 8004390:	69db      	ldr	r3, [r3, #28]
 8004392:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	695b      	ldr	r3, [r3, #20]
 800439a:	492e      	ldr	r1, [pc, #184]	@ (8004454 <HAL_RCC_ClockConfig+0x358>)
 800439c:	4313      	orrs	r3, r2
 800439e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f003 0310 	and.w	r3, r3, #16
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d010      	beq.n	80043ce <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	699a      	ldr	r2, [r3, #24]
 80043b0:	4b28      	ldr	r3, [pc, #160]	@ (8004454 <HAL_RCC_ClockConfig+0x358>)
 80043b2:	69db      	ldr	r3, [r3, #28]
 80043b4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d208      	bcs.n	80043ce <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80043bc:	4b25      	ldr	r3, [pc, #148]	@ (8004454 <HAL_RCC_ClockConfig+0x358>)
 80043be:	69db      	ldr	r3, [r3, #28]
 80043c0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	699b      	ldr	r3, [r3, #24]
 80043c8:	4922      	ldr	r1, [pc, #136]	@ (8004454 <HAL_RCC_ClockConfig+0x358>)
 80043ca:	4313      	orrs	r3, r2
 80043cc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 0320 	and.w	r3, r3, #32
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d010      	beq.n	80043fc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	69da      	ldr	r2, [r3, #28]
 80043de:	4b1d      	ldr	r3, [pc, #116]	@ (8004454 <HAL_RCC_ClockConfig+0x358>)
 80043e0:	6a1b      	ldr	r3, [r3, #32]
 80043e2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d208      	bcs.n	80043fc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80043ea:	4b1a      	ldr	r3, [pc, #104]	@ (8004454 <HAL_RCC_ClockConfig+0x358>)
 80043ec:	6a1b      	ldr	r3, [r3, #32]
 80043ee:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	69db      	ldr	r3, [r3, #28]
 80043f6:	4917      	ldr	r1, [pc, #92]	@ (8004454 <HAL_RCC_ClockConfig+0x358>)
 80043f8:	4313      	orrs	r3, r2
 80043fa:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80043fc:	f000 f834 	bl	8004468 <HAL_RCC_GetSysClockFreq>
 8004400:	4602      	mov	r2, r0
 8004402:	4b14      	ldr	r3, [pc, #80]	@ (8004454 <HAL_RCC_ClockConfig+0x358>)
 8004404:	699b      	ldr	r3, [r3, #24]
 8004406:	0a1b      	lsrs	r3, r3, #8
 8004408:	f003 030f 	and.w	r3, r3, #15
 800440c:	4912      	ldr	r1, [pc, #72]	@ (8004458 <HAL_RCC_ClockConfig+0x35c>)
 800440e:	5ccb      	ldrb	r3, [r1, r3]
 8004410:	f003 031f 	and.w	r3, r3, #31
 8004414:	fa22 f303 	lsr.w	r3, r2, r3
 8004418:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800441a:	4b0e      	ldr	r3, [pc, #56]	@ (8004454 <HAL_RCC_ClockConfig+0x358>)
 800441c:	699b      	ldr	r3, [r3, #24]
 800441e:	f003 030f 	and.w	r3, r3, #15
 8004422:	4a0d      	ldr	r2, [pc, #52]	@ (8004458 <HAL_RCC_ClockConfig+0x35c>)
 8004424:	5cd3      	ldrb	r3, [r2, r3]
 8004426:	f003 031f 	and.w	r3, r3, #31
 800442a:	693a      	ldr	r2, [r7, #16]
 800442c:	fa22 f303 	lsr.w	r3, r2, r3
 8004430:	4a0a      	ldr	r2, [pc, #40]	@ (800445c <HAL_RCC_ClockConfig+0x360>)
 8004432:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004434:	4a0a      	ldr	r2, [pc, #40]	@ (8004460 <HAL_RCC_ClockConfig+0x364>)
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800443a:	4b0a      	ldr	r3, [pc, #40]	@ (8004464 <HAL_RCC_ClockConfig+0x368>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4618      	mov	r0, r3
 8004440:	f7fd fde6 	bl	8002010 <HAL_InitTick>
 8004444:	4603      	mov	r3, r0
 8004446:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004448:	7bfb      	ldrb	r3, [r7, #15]
}
 800444a:	4618      	mov	r0, r3
 800444c:	3718      	adds	r7, #24
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}
 8004452:	bf00      	nop
 8004454:	58024400 	.word	0x58024400
 8004458:	0802d340 	.word	0x0802d340
 800445c:	24000004 	.word	0x24000004
 8004460:	24000000 	.word	0x24000000
 8004464:	24000008 	.word	0x24000008

08004468 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004468:	b480      	push	{r7}
 800446a:	b089      	sub	sp, #36	@ 0x24
 800446c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800446e:	4bb3      	ldr	r3, [pc, #716]	@ (800473c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004470:	691b      	ldr	r3, [r3, #16]
 8004472:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004476:	2b18      	cmp	r3, #24
 8004478:	f200 8155 	bhi.w	8004726 <HAL_RCC_GetSysClockFreq+0x2be>
 800447c:	a201      	add	r2, pc, #4	@ (adr r2, 8004484 <HAL_RCC_GetSysClockFreq+0x1c>)
 800447e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004482:	bf00      	nop
 8004484:	080044e9 	.word	0x080044e9
 8004488:	08004727 	.word	0x08004727
 800448c:	08004727 	.word	0x08004727
 8004490:	08004727 	.word	0x08004727
 8004494:	08004727 	.word	0x08004727
 8004498:	08004727 	.word	0x08004727
 800449c:	08004727 	.word	0x08004727
 80044a0:	08004727 	.word	0x08004727
 80044a4:	0800450f 	.word	0x0800450f
 80044a8:	08004727 	.word	0x08004727
 80044ac:	08004727 	.word	0x08004727
 80044b0:	08004727 	.word	0x08004727
 80044b4:	08004727 	.word	0x08004727
 80044b8:	08004727 	.word	0x08004727
 80044bc:	08004727 	.word	0x08004727
 80044c0:	08004727 	.word	0x08004727
 80044c4:	08004515 	.word	0x08004515
 80044c8:	08004727 	.word	0x08004727
 80044cc:	08004727 	.word	0x08004727
 80044d0:	08004727 	.word	0x08004727
 80044d4:	08004727 	.word	0x08004727
 80044d8:	08004727 	.word	0x08004727
 80044dc:	08004727 	.word	0x08004727
 80044e0:	08004727 	.word	0x08004727
 80044e4:	0800451b 	.word	0x0800451b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80044e8:	4b94      	ldr	r3, [pc, #592]	@ (800473c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 0320 	and.w	r3, r3, #32
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d009      	beq.n	8004508 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80044f4:	4b91      	ldr	r3, [pc, #580]	@ (800473c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	08db      	lsrs	r3, r3, #3
 80044fa:	f003 0303 	and.w	r3, r3, #3
 80044fe:	4a90      	ldr	r2, [pc, #576]	@ (8004740 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004500:	fa22 f303 	lsr.w	r3, r2, r3
 8004504:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004506:	e111      	b.n	800472c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004508:	4b8d      	ldr	r3, [pc, #564]	@ (8004740 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800450a:	61bb      	str	r3, [r7, #24]
      break;
 800450c:	e10e      	b.n	800472c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800450e:	4b8d      	ldr	r3, [pc, #564]	@ (8004744 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004510:	61bb      	str	r3, [r7, #24]
      break;
 8004512:	e10b      	b.n	800472c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004514:	4b8c      	ldr	r3, [pc, #560]	@ (8004748 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004516:	61bb      	str	r3, [r7, #24]
      break;
 8004518:	e108      	b.n	800472c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800451a:	4b88      	ldr	r3, [pc, #544]	@ (800473c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800451c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800451e:	f003 0303 	and.w	r3, r3, #3
 8004522:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004524:	4b85      	ldr	r3, [pc, #532]	@ (800473c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004526:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004528:	091b      	lsrs	r3, r3, #4
 800452a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800452e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004530:	4b82      	ldr	r3, [pc, #520]	@ (800473c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004532:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004534:	f003 0301 	and.w	r3, r3, #1
 8004538:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800453a:	4b80      	ldr	r3, [pc, #512]	@ (800473c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800453c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800453e:	08db      	lsrs	r3, r3, #3
 8004540:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004544:	68fa      	ldr	r2, [r7, #12]
 8004546:	fb02 f303 	mul.w	r3, r2, r3
 800454a:	ee07 3a90 	vmov	s15, r3
 800454e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004552:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	2b00      	cmp	r3, #0
 800455a:	f000 80e1 	beq.w	8004720 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	2b02      	cmp	r3, #2
 8004562:	f000 8083 	beq.w	800466c <HAL_RCC_GetSysClockFreq+0x204>
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	2b02      	cmp	r3, #2
 800456a:	f200 80a1 	bhi.w	80046b0 <HAL_RCC_GetSysClockFreq+0x248>
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d003      	beq.n	800457c <HAL_RCC_GetSysClockFreq+0x114>
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	2b01      	cmp	r3, #1
 8004578:	d056      	beq.n	8004628 <HAL_RCC_GetSysClockFreq+0x1c0>
 800457a:	e099      	b.n	80046b0 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800457c:	4b6f      	ldr	r3, [pc, #444]	@ (800473c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f003 0320 	and.w	r3, r3, #32
 8004584:	2b00      	cmp	r3, #0
 8004586:	d02d      	beq.n	80045e4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004588:	4b6c      	ldr	r3, [pc, #432]	@ (800473c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	08db      	lsrs	r3, r3, #3
 800458e:	f003 0303 	and.w	r3, r3, #3
 8004592:	4a6b      	ldr	r2, [pc, #428]	@ (8004740 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004594:	fa22 f303 	lsr.w	r3, r2, r3
 8004598:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	ee07 3a90 	vmov	s15, r3
 80045a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	ee07 3a90 	vmov	s15, r3
 80045aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045b2:	4b62      	ldr	r3, [pc, #392]	@ (800473c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045ba:	ee07 3a90 	vmov	s15, r3
 80045be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80045c6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800474c <HAL_RCC_GetSysClockFreq+0x2e4>
 80045ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80045d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045de:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80045e2:	e087      	b.n	80046f4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	ee07 3a90 	vmov	s15, r3
 80045ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045ee:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8004750 <HAL_RCC_GetSysClockFreq+0x2e8>
 80045f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045f6:	4b51      	ldr	r3, [pc, #324]	@ (800473c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045fe:	ee07 3a90 	vmov	s15, r3
 8004602:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004606:	ed97 6a02 	vldr	s12, [r7, #8]
 800460a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800474c <HAL_RCC_GetSysClockFreq+0x2e4>
 800460e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004612:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004616:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800461a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800461e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004622:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004626:	e065      	b.n	80046f4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	ee07 3a90 	vmov	s15, r3
 800462e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004632:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8004754 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004636:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800463a:	4b40      	ldr	r3, [pc, #256]	@ (800473c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800463c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800463e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004642:	ee07 3a90 	vmov	s15, r3
 8004646:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800464a:	ed97 6a02 	vldr	s12, [r7, #8]
 800464e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800474c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004652:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004656:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800465a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800465e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004662:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004666:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800466a:	e043      	b.n	80046f4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	ee07 3a90 	vmov	s15, r3
 8004672:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004676:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8004758 <HAL_RCC_GetSysClockFreq+0x2f0>
 800467a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800467e:	4b2f      	ldr	r3, [pc, #188]	@ (800473c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004682:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004686:	ee07 3a90 	vmov	s15, r3
 800468a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800468e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004692:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800474c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004696:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800469a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800469e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80046a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046aa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80046ae:	e021      	b.n	80046f4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	ee07 3a90 	vmov	s15, r3
 80046b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046ba:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004754 <HAL_RCC_GetSysClockFreq+0x2ec>
 80046be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046c2:	4b1e      	ldr	r3, [pc, #120]	@ (800473c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046ca:	ee07 3a90 	vmov	s15, r3
 80046ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80046d6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800474c <HAL_RCC_GetSysClockFreq+0x2e4>
 80046da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80046e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046ee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80046f2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80046f4:	4b11      	ldr	r3, [pc, #68]	@ (800473c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046f8:	0a5b      	lsrs	r3, r3, #9
 80046fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80046fe:	3301      	adds	r3, #1
 8004700:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	ee07 3a90 	vmov	s15, r3
 8004708:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800470c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004710:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004714:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004718:	ee17 3a90 	vmov	r3, s15
 800471c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800471e:	e005      	b.n	800472c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004720:	2300      	movs	r3, #0
 8004722:	61bb      	str	r3, [r7, #24]
      break;
 8004724:	e002      	b.n	800472c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004726:	4b07      	ldr	r3, [pc, #28]	@ (8004744 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004728:	61bb      	str	r3, [r7, #24]
      break;
 800472a:	bf00      	nop
  }

  return sysclockfreq;
 800472c:	69bb      	ldr	r3, [r7, #24]
}
 800472e:	4618      	mov	r0, r3
 8004730:	3724      	adds	r7, #36	@ 0x24
 8004732:	46bd      	mov	sp, r7
 8004734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004738:	4770      	bx	lr
 800473a:	bf00      	nop
 800473c:	58024400 	.word	0x58024400
 8004740:	03d09000 	.word	0x03d09000
 8004744:	003d0900 	.word	0x003d0900
 8004748:	007a1200 	.word	0x007a1200
 800474c:	46000000 	.word	0x46000000
 8004750:	4c742400 	.word	0x4c742400
 8004754:	4a742400 	.word	0x4a742400
 8004758:	4af42400 	.word	0x4af42400

0800475c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b082      	sub	sp, #8
 8004760:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004762:	f7ff fe81 	bl	8004468 <HAL_RCC_GetSysClockFreq>
 8004766:	4602      	mov	r2, r0
 8004768:	4b10      	ldr	r3, [pc, #64]	@ (80047ac <HAL_RCC_GetHCLKFreq+0x50>)
 800476a:	699b      	ldr	r3, [r3, #24]
 800476c:	0a1b      	lsrs	r3, r3, #8
 800476e:	f003 030f 	and.w	r3, r3, #15
 8004772:	490f      	ldr	r1, [pc, #60]	@ (80047b0 <HAL_RCC_GetHCLKFreq+0x54>)
 8004774:	5ccb      	ldrb	r3, [r1, r3]
 8004776:	f003 031f 	and.w	r3, r3, #31
 800477a:	fa22 f303 	lsr.w	r3, r2, r3
 800477e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004780:	4b0a      	ldr	r3, [pc, #40]	@ (80047ac <HAL_RCC_GetHCLKFreq+0x50>)
 8004782:	699b      	ldr	r3, [r3, #24]
 8004784:	f003 030f 	and.w	r3, r3, #15
 8004788:	4a09      	ldr	r2, [pc, #36]	@ (80047b0 <HAL_RCC_GetHCLKFreq+0x54>)
 800478a:	5cd3      	ldrb	r3, [r2, r3]
 800478c:	f003 031f 	and.w	r3, r3, #31
 8004790:	687a      	ldr	r2, [r7, #4]
 8004792:	fa22 f303 	lsr.w	r3, r2, r3
 8004796:	4a07      	ldr	r2, [pc, #28]	@ (80047b4 <HAL_RCC_GetHCLKFreq+0x58>)
 8004798:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800479a:	4a07      	ldr	r2, [pc, #28]	@ (80047b8 <HAL_RCC_GetHCLKFreq+0x5c>)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80047a0:	4b04      	ldr	r3, [pc, #16]	@ (80047b4 <HAL_RCC_GetHCLKFreq+0x58>)
 80047a2:	681b      	ldr	r3, [r3, #0]
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	3708      	adds	r7, #8
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}
 80047ac:	58024400 	.word	0x58024400
 80047b0:	0802d340 	.word	0x0802d340
 80047b4:	24000004 	.word	0x24000004
 80047b8:	24000000 	.word	0x24000000

080047bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80047c0:	f7ff ffcc 	bl	800475c <HAL_RCC_GetHCLKFreq>
 80047c4:	4602      	mov	r2, r0
 80047c6:	4b06      	ldr	r3, [pc, #24]	@ (80047e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80047c8:	69db      	ldr	r3, [r3, #28]
 80047ca:	091b      	lsrs	r3, r3, #4
 80047cc:	f003 0307 	and.w	r3, r3, #7
 80047d0:	4904      	ldr	r1, [pc, #16]	@ (80047e4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80047d2:	5ccb      	ldrb	r3, [r1, r3]
 80047d4:	f003 031f 	and.w	r3, r3, #31
 80047d8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80047dc:	4618      	mov	r0, r3
 80047de:	bd80      	pop	{r7, pc}
 80047e0:	58024400 	.word	0x58024400
 80047e4:	0802d340 	.word	0x0802d340

080047e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80047ec:	f7ff ffb6 	bl	800475c <HAL_RCC_GetHCLKFreq>
 80047f0:	4602      	mov	r2, r0
 80047f2:	4b06      	ldr	r3, [pc, #24]	@ (800480c <HAL_RCC_GetPCLK2Freq+0x24>)
 80047f4:	69db      	ldr	r3, [r3, #28]
 80047f6:	0a1b      	lsrs	r3, r3, #8
 80047f8:	f003 0307 	and.w	r3, r3, #7
 80047fc:	4904      	ldr	r1, [pc, #16]	@ (8004810 <HAL_RCC_GetPCLK2Freq+0x28>)
 80047fe:	5ccb      	ldrb	r3, [r1, r3]
 8004800:	f003 031f 	and.w	r3, r3, #31
 8004804:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004808:	4618      	mov	r0, r3
 800480a:	bd80      	pop	{r7, pc}
 800480c:	58024400 	.word	0x58024400
 8004810:	0802d340 	.word	0x0802d340

08004814 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004814:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004818:	b0c6      	sub	sp, #280	@ 0x118
 800481a:	af00      	add	r7, sp, #0
 800481c:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004820:	2300      	movs	r3, #0
 8004822:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004826:	2300      	movs	r3, #0
 8004828:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800482c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004834:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8004838:	2500      	movs	r5, #0
 800483a:	ea54 0305 	orrs.w	r3, r4, r5
 800483e:	d049      	beq.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004840:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004844:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004846:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800484a:	d02f      	beq.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x98>
 800484c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004850:	d828      	bhi.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004852:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004856:	d01a      	beq.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004858:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800485c:	d822      	bhi.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800485e:	2b00      	cmp	r3, #0
 8004860:	d003      	beq.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004862:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004866:	d007      	beq.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004868:	e01c      	b.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800486a:	4bab      	ldr	r3, [pc, #684]	@ (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800486c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800486e:	4aaa      	ldr	r2, [pc, #680]	@ (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004870:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004874:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004876:	e01a      	b.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004878:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800487c:	3308      	adds	r3, #8
 800487e:	2102      	movs	r1, #2
 8004880:	4618      	mov	r0, r3
 8004882:	f001 fc25 	bl	80060d0 <RCCEx_PLL2_Config>
 8004886:	4603      	mov	r3, r0
 8004888:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800488c:	e00f      	b.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800488e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004892:	3328      	adds	r3, #40	@ 0x28
 8004894:	2102      	movs	r1, #2
 8004896:	4618      	mov	r0, r3
 8004898:	f001 fccc 	bl	8006234 <RCCEx_PLL3_Config>
 800489c:	4603      	mov	r3, r0
 800489e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80048a2:	e004      	b.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048a4:	2301      	movs	r3, #1
 80048a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80048aa:	e000      	b.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80048ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048ae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d10a      	bne.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80048b6:	4b98      	ldr	r3, [pc, #608]	@ (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80048b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048ba:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80048be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80048c4:	4a94      	ldr	r2, [pc, #592]	@ (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80048c6:	430b      	orrs	r3, r1
 80048c8:	6513      	str	r3, [r2, #80]	@ 0x50
 80048ca:	e003      	b.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80048d0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80048d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048dc:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80048e0:	f04f 0900 	mov.w	r9, #0
 80048e4:	ea58 0309 	orrs.w	r3, r8, r9
 80048e8:	d047      	beq.n	800497a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80048ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048f0:	2b04      	cmp	r3, #4
 80048f2:	d82a      	bhi.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x136>
 80048f4:	a201      	add	r2, pc, #4	@ (adr r2, 80048fc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80048f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048fa:	bf00      	nop
 80048fc:	08004911 	.word	0x08004911
 8004900:	0800491f 	.word	0x0800491f
 8004904:	08004935 	.word	0x08004935
 8004908:	08004953 	.word	0x08004953
 800490c:	08004953 	.word	0x08004953
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004910:	4b81      	ldr	r3, [pc, #516]	@ (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004912:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004914:	4a80      	ldr	r2, [pc, #512]	@ (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004916:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800491a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800491c:	e01a      	b.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800491e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004922:	3308      	adds	r3, #8
 8004924:	2100      	movs	r1, #0
 8004926:	4618      	mov	r0, r3
 8004928:	f001 fbd2 	bl	80060d0 <RCCEx_PLL2_Config>
 800492c:	4603      	mov	r3, r0
 800492e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004932:	e00f      	b.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004934:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004938:	3328      	adds	r3, #40	@ 0x28
 800493a:	2100      	movs	r1, #0
 800493c:	4618      	mov	r0, r3
 800493e:	f001 fc79 	bl	8006234 <RCCEx_PLL3_Config>
 8004942:	4603      	mov	r3, r0
 8004944:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004948:	e004      	b.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004950:	e000      	b.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004952:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004954:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004958:	2b00      	cmp	r3, #0
 800495a:	d10a      	bne.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800495c:	4b6e      	ldr	r3, [pc, #440]	@ (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800495e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004960:	f023 0107 	bic.w	r1, r3, #7
 8004964:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004968:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800496a:	4a6b      	ldr	r2, [pc, #428]	@ (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800496c:	430b      	orrs	r3, r1
 800496e:	6513      	str	r3, [r2, #80]	@ 0x50
 8004970:	e003      	b.n	800497a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004972:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004976:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800497a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800497e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004982:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8004986:	f04f 0b00 	mov.w	fp, #0
 800498a:	ea5a 030b 	orrs.w	r3, sl, fp
 800498e:	d05b      	beq.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8004990:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004994:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004998:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800499c:	d03b      	beq.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800499e:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80049a2:	d834      	bhi.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80049a4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80049a8:	d037      	beq.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x206>
 80049aa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80049ae:	d82e      	bhi.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80049b0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80049b4:	d033      	beq.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80049b6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80049ba:	d828      	bhi.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80049bc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80049c0:	d01a      	beq.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80049c2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80049c6:	d822      	bhi.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d003      	beq.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 80049cc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80049d0:	d007      	beq.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80049d2:	e01c      	b.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049d4:	4b50      	ldr	r3, [pc, #320]	@ (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80049d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049d8:	4a4f      	ldr	r2, [pc, #316]	@ (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80049da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80049de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80049e0:	e01e      	b.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80049e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049e6:	3308      	adds	r3, #8
 80049e8:	2100      	movs	r1, #0
 80049ea:	4618      	mov	r0, r3
 80049ec:	f001 fb70 	bl	80060d0 <RCCEx_PLL2_Config>
 80049f0:	4603      	mov	r3, r0
 80049f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80049f6:	e013      	b.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80049f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049fc:	3328      	adds	r3, #40	@ 0x28
 80049fe:	2100      	movs	r1, #0
 8004a00:	4618      	mov	r0, r3
 8004a02:	f001 fc17 	bl	8006234 <RCCEx_PLL3_Config>
 8004a06:	4603      	mov	r3, r0
 8004a08:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004a0c:	e008      	b.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004a14:	e004      	b.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8004a16:	bf00      	nop
 8004a18:	e002      	b.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8004a1a:	bf00      	nop
 8004a1c:	e000      	b.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8004a1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a20:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d10b      	bne.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004a28:	4b3b      	ldr	r3, [pc, #236]	@ (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004a2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a2c:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8004a30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a34:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004a38:	4a37      	ldr	r2, [pc, #220]	@ (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004a3a:	430b      	orrs	r3, r1
 8004a3c:	6593      	str	r3, [r2, #88]	@ 0x58
 8004a3e:	e003      	b.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a40:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004a44:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004a48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a50:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8004a54:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004a58:	2300      	movs	r3, #0
 8004a5a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004a5e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8004a62:	460b      	mov	r3, r1
 8004a64:	4313      	orrs	r3, r2
 8004a66:	d05d      	beq.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8004a68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a6c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004a70:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004a74:	d03b      	beq.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8004a76:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004a7a:	d834      	bhi.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004a7c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004a80:	d037      	beq.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8004a82:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004a86:	d82e      	bhi.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004a88:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004a8c:	d033      	beq.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8004a8e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004a92:	d828      	bhi.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004a94:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004a98:	d01a      	beq.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8004a9a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004a9e:	d822      	bhi.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d003      	beq.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004aa4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004aa8:	d007      	beq.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8004aaa:	e01c      	b.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004aac:	4b1a      	ldr	r3, [pc, #104]	@ (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004aae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ab0:	4a19      	ldr	r2, [pc, #100]	@ (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004ab2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ab6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004ab8:	e01e      	b.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004aba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004abe:	3308      	adds	r3, #8
 8004ac0:	2100      	movs	r1, #0
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f001 fb04 	bl	80060d0 <RCCEx_PLL2_Config>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004ace:	e013      	b.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004ad0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ad4:	3328      	adds	r3, #40	@ 0x28
 8004ad6:	2100      	movs	r1, #0
 8004ad8:	4618      	mov	r0, r3
 8004ada:	f001 fbab 	bl	8006234 <RCCEx_PLL3_Config>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004ae4:	e008      	b.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004aec:	e004      	b.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8004aee:	bf00      	nop
 8004af0:	e002      	b.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8004af2:	bf00      	nop
 8004af4:	e000      	b.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8004af6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004af8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d10d      	bne.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004b00:	4b05      	ldr	r3, [pc, #20]	@ (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004b02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b04:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004b08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b0c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004b10:	4a01      	ldr	r2, [pc, #4]	@ (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004b12:	430b      	orrs	r3, r1
 8004b14:	6593      	str	r3, [r2, #88]	@ 0x58
 8004b16:	e005      	b.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8004b18:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b1c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004b20:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004b24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b2c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004b30:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004b34:	2300      	movs	r3, #0
 8004b36:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004b3a:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004b3e:	460b      	mov	r3, r1
 8004b40:	4313      	orrs	r3, r2
 8004b42:	d03a      	beq.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8004b44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b4a:	2b30      	cmp	r3, #48	@ 0x30
 8004b4c:	d01f      	beq.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8004b4e:	2b30      	cmp	r3, #48	@ 0x30
 8004b50:	d819      	bhi.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8004b52:	2b20      	cmp	r3, #32
 8004b54:	d00c      	beq.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8004b56:	2b20      	cmp	r3, #32
 8004b58:	d815      	bhi.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d019      	beq.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004b5e:	2b10      	cmp	r3, #16
 8004b60:	d111      	bne.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b62:	4baa      	ldr	r3, [pc, #680]	@ (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004b64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b66:	4aa9      	ldr	r2, [pc, #676]	@ (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004b68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b6c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004b6e:	e011      	b.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004b70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b74:	3308      	adds	r3, #8
 8004b76:	2102      	movs	r1, #2
 8004b78:	4618      	mov	r0, r3
 8004b7a:	f001 faa9 	bl	80060d0 <RCCEx_PLL2_Config>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004b84:	e006      	b.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004b8c:	e002      	b.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8004b8e:	bf00      	nop
 8004b90:	e000      	b.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8004b92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b94:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d10a      	bne.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004b9c:	4b9b      	ldr	r3, [pc, #620]	@ (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004b9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ba0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004ba4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ba8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004baa:	4a98      	ldr	r2, [pc, #608]	@ (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004bac:	430b      	orrs	r3, r1
 8004bae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004bb0:	e003      	b.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bb2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004bb6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004bba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bc2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004bc6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004bca:	2300      	movs	r3, #0
 8004bcc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004bd0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004bd4:	460b      	mov	r3, r1
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	d051      	beq.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004bda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004bde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004be0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004be4:	d035      	beq.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8004be6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004bea:	d82e      	bhi.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x436>
 8004bec:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004bf0:	d031      	beq.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8004bf2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004bf6:	d828      	bhi.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x436>
 8004bf8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004bfc:	d01a      	beq.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8004bfe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c02:	d822      	bhi.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x436>
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d003      	beq.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8004c08:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c0c:	d007      	beq.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8004c0e:	e01c      	b.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c10:	4b7e      	ldr	r3, [pc, #504]	@ (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004c12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c14:	4a7d      	ldr	r2, [pc, #500]	@ (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004c16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c1a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004c1c:	e01c      	b.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004c1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c22:	3308      	adds	r3, #8
 8004c24:	2100      	movs	r1, #0
 8004c26:	4618      	mov	r0, r3
 8004c28:	f001 fa52 	bl	80060d0 <RCCEx_PLL2_Config>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004c32:	e011      	b.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004c34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c38:	3328      	adds	r3, #40	@ 0x28
 8004c3a:	2100      	movs	r1, #0
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f001 faf9 	bl	8006234 <RCCEx_PLL3_Config>
 8004c42:	4603      	mov	r3, r0
 8004c44:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004c48:	e006      	b.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004c50:	e002      	b.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8004c52:	bf00      	nop
 8004c54:	e000      	b.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8004c56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c58:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d10a      	bne.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004c60:	4b6a      	ldr	r3, [pc, #424]	@ (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004c62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c64:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004c68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c6e:	4a67      	ldr	r2, [pc, #412]	@ (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004c70:	430b      	orrs	r3, r1
 8004c72:	6513      	str	r3, [r2, #80]	@ 0x50
 8004c74:	e003      	b.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c76:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004c7a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004c7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c86:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004c8a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004c8e:	2300      	movs	r3, #0
 8004c90:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004c94:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8004c98:	460b      	mov	r3, r1
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	d053      	beq.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004c9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ca2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ca4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004ca8:	d033      	beq.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8004caa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004cae:	d82c      	bhi.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004cb0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004cb4:	d02f      	beq.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8004cb6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004cba:	d826      	bhi.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004cbc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004cc0:	d02b      	beq.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x506>
 8004cc2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004cc6:	d820      	bhi.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004cc8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004ccc:	d012      	beq.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8004cce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004cd2:	d81a      	bhi.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d022      	beq.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8004cd8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004cdc:	d115      	bne.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004cde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ce2:	3308      	adds	r3, #8
 8004ce4:	2101      	movs	r1, #1
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f001 f9f2 	bl	80060d0 <RCCEx_PLL2_Config>
 8004cec:	4603      	mov	r3, r0
 8004cee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004cf2:	e015      	b.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004cf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cf8:	3328      	adds	r3, #40	@ 0x28
 8004cfa:	2101      	movs	r1, #1
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	f001 fa99 	bl	8006234 <RCCEx_PLL3_Config>
 8004d02:	4603      	mov	r3, r0
 8004d04:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004d08:	e00a      	b.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004d10:	e006      	b.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004d12:	bf00      	nop
 8004d14:	e004      	b.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004d16:	bf00      	nop
 8004d18:	e002      	b.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004d1a:	bf00      	nop
 8004d1c:	e000      	b.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004d1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d20:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d10a      	bne.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004d28:	4b38      	ldr	r3, [pc, #224]	@ (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004d2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d2c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004d30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d36:	4a35      	ldr	r2, [pc, #212]	@ (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004d38:	430b      	orrs	r3, r1
 8004d3a:	6513      	str	r3, [r2, #80]	@ 0x50
 8004d3c:	e003      	b.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d3e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004d42:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004d46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d4e:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004d52:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004d56:	2300      	movs	r3, #0
 8004d58:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004d5c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004d60:	460b      	mov	r3, r1
 8004d62:	4313      	orrs	r3, r2
 8004d64:	d058      	beq.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004d66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d6a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004d6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004d72:	d033      	beq.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8004d74:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004d78:	d82c      	bhi.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004d7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d7e:	d02f      	beq.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8004d80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d84:	d826      	bhi.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004d86:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004d8a:	d02b      	beq.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8004d8c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004d90:	d820      	bhi.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004d92:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004d96:	d012      	beq.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8004d98:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004d9c:	d81a      	bhi.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d022      	beq.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004da2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004da6:	d115      	bne.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004da8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004dac:	3308      	adds	r3, #8
 8004dae:	2101      	movs	r1, #1
 8004db0:	4618      	mov	r0, r3
 8004db2:	f001 f98d 	bl	80060d0 <RCCEx_PLL2_Config>
 8004db6:	4603      	mov	r3, r0
 8004db8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004dbc:	e015      	b.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004dbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004dc2:	3328      	adds	r3, #40	@ 0x28
 8004dc4:	2101      	movs	r1, #1
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f001 fa34 	bl	8006234 <RCCEx_PLL3_Config>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004dd2:	e00a      	b.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004dda:	e006      	b.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004ddc:	bf00      	nop
 8004dde:	e004      	b.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004de0:	bf00      	nop
 8004de2:	e002      	b.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004de4:	bf00      	nop
 8004de6:	e000      	b.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004de8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004dea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d10e      	bne.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004df2:	4b06      	ldr	r3, [pc, #24]	@ (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004df4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004df6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004dfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004dfe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004e02:	4a02      	ldr	r2, [pc, #8]	@ (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004e04:	430b      	orrs	r3, r1
 8004e06:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e08:	e006      	b.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8004e0a:	bf00      	nop
 8004e0c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e10:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004e14:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004e18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e20:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004e24:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004e28:	2300      	movs	r3, #0
 8004e2a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004e2e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8004e32:	460b      	mov	r3, r1
 8004e34:	4313      	orrs	r3, r2
 8004e36:	d037      	beq.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004e38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e3c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e3e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e42:	d00e      	beq.n	8004e62 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8004e44:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e48:	d816      	bhi.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d018      	beq.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8004e4e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004e52:	d111      	bne.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e54:	4bc4      	ldr	r3, [pc, #784]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004e56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e58:	4ac3      	ldr	r2, [pc, #780]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004e5a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e5e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004e60:	e00f      	b.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004e62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e66:	3308      	adds	r3, #8
 8004e68:	2101      	movs	r1, #1
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f001 f930 	bl	80060d0 <RCCEx_PLL2_Config>
 8004e70:	4603      	mov	r3, r0
 8004e72:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004e76:	e004      	b.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004e7e:	e000      	b.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8004e80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e82:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d10a      	bne.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004e8a:	4bb7      	ldr	r3, [pc, #732]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004e8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e8e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004e92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e98:	4ab3      	ldr	r2, [pc, #716]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004e9a:	430b      	orrs	r3, r1
 8004e9c:	6513      	str	r3, [r2, #80]	@ 0x50
 8004e9e:	e003      	b.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ea0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004ea4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004ea8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eb0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004eb4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004eb8:	2300      	movs	r3, #0
 8004eba:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004ebe:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004ec2:	460b      	mov	r3, r1
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	d039      	beq.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004ec8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ecc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ece:	2b03      	cmp	r3, #3
 8004ed0:	d81c      	bhi.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8004ed2:	a201      	add	r2, pc, #4	@ (adr r2, 8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8004ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ed8:	08004f15 	.word	0x08004f15
 8004edc:	08004ee9 	.word	0x08004ee9
 8004ee0:	08004ef7 	.word	0x08004ef7
 8004ee4:	08004f15 	.word	0x08004f15
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ee8:	4b9f      	ldr	r3, [pc, #636]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004eea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eec:	4a9e      	ldr	r2, [pc, #632]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004eee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ef2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004ef4:	e00f      	b.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004ef6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004efa:	3308      	adds	r3, #8
 8004efc:	2102      	movs	r1, #2
 8004efe:	4618      	mov	r0, r3
 8004f00:	f001 f8e6 	bl	80060d0 <RCCEx_PLL2_Config>
 8004f04:	4603      	mov	r3, r0
 8004f06:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004f0a:	e004      	b.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004f12:	e000      	b.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8004f14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f16:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d10a      	bne.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004f1e:	4b92      	ldr	r3, [pc, #584]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004f20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f22:	f023 0103 	bic.w	r1, r3, #3
 8004f26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f2c:	4a8e      	ldr	r2, [pc, #568]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004f2e:	430b      	orrs	r3, r1
 8004f30:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004f32:	e003      	b.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f34:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004f38:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004f3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f44:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004f48:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004f52:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004f56:	460b      	mov	r3, r1
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	f000 8099 	beq.w	8005090 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f5e:	4b83      	ldr	r3, [pc, #524]	@ (800516c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a82      	ldr	r2, [pc, #520]	@ (800516c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004f64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f68:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004f6a:	f7fd f89b 	bl	80020a4 <HAL_GetTick>
 8004f6e:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f72:	e00b      	b.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f74:	f7fd f896 	bl	80020a4 <HAL_GetTick>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004f7e:	1ad3      	subs	r3, r2, r3
 8004f80:	2b64      	cmp	r3, #100	@ 0x64
 8004f82:	d903      	bls.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8004f84:	2303      	movs	r3, #3
 8004f86:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004f8a:	e005      	b.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f8c:	4b77      	ldr	r3, [pc, #476]	@ (800516c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d0ed      	beq.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8004f98:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d173      	bne.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004fa0:	4b71      	ldr	r3, [pc, #452]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004fa2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004fa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004fa8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004fac:	4053      	eors	r3, r2
 8004fae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d015      	beq.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004fb6:	4b6c      	ldr	r3, [pc, #432]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004fb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004fbe:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004fc2:	4b69      	ldr	r3, [pc, #420]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004fc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fc6:	4a68      	ldr	r2, [pc, #416]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004fc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004fcc:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004fce:	4b66      	ldr	r3, [pc, #408]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004fd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fd2:	4a65      	ldr	r2, [pc, #404]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004fd4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004fd8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004fda:	4a63      	ldr	r2, [pc, #396]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004fdc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004fe0:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004fe2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004fe6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004fea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004fee:	d118      	bne.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ff0:	f7fd f858 	bl	80020a4 <HAL_GetTick>
 8004ff4:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004ff8:	e00d      	b.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ffa:	f7fd f853 	bl	80020a4 <HAL_GetTick>
 8004ffe:	4602      	mov	r2, r0
 8005000:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8005004:	1ad2      	subs	r2, r2, r3
 8005006:	f241 3388 	movw	r3, #5000	@ 0x1388
 800500a:	429a      	cmp	r2, r3
 800500c:	d903      	bls.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800500e:	2303      	movs	r3, #3
 8005010:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8005014:	e005      	b.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005016:	4b54      	ldr	r3, [pc, #336]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005018:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800501a:	f003 0302 	and.w	r3, r3, #2
 800501e:	2b00      	cmp	r3, #0
 8005020:	d0eb      	beq.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8005022:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005026:	2b00      	cmp	r3, #0
 8005028:	d129      	bne.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800502a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800502e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005032:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005036:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800503a:	d10e      	bne.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x846>
 800503c:	4b4a      	ldr	r3, [pc, #296]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800503e:	691b      	ldr	r3, [r3, #16]
 8005040:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005044:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005048:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800504c:	091a      	lsrs	r2, r3, #4
 800504e:	4b48      	ldr	r3, [pc, #288]	@ (8005170 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005050:	4013      	ands	r3, r2
 8005052:	4a45      	ldr	r2, [pc, #276]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005054:	430b      	orrs	r3, r1
 8005056:	6113      	str	r3, [r2, #16]
 8005058:	e005      	b.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800505a:	4b43      	ldr	r3, [pc, #268]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800505c:	691b      	ldr	r3, [r3, #16]
 800505e:	4a42      	ldr	r2, [pc, #264]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005060:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005064:	6113      	str	r3, [r2, #16]
 8005066:	4b40      	ldr	r3, [pc, #256]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005068:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800506a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800506e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005072:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005076:	4a3c      	ldr	r2, [pc, #240]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005078:	430b      	orrs	r3, r1
 800507a:	6713      	str	r3, [r2, #112]	@ 0x70
 800507c:	e008      	b.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800507e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005082:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8005086:	e003      	b.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005088:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800508c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005090:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005098:	f002 0301 	and.w	r3, r2, #1
 800509c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80050a0:	2300      	movs	r3, #0
 80050a2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80050a6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80050aa:	460b      	mov	r3, r1
 80050ac:	4313      	orrs	r3, r2
 80050ae:	f000 808f 	beq.w	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80050b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050b6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80050b8:	2b28      	cmp	r3, #40	@ 0x28
 80050ba:	d871      	bhi.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80050bc:	a201      	add	r2, pc, #4	@ (adr r2, 80050c4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80050be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050c2:	bf00      	nop
 80050c4:	080051a9 	.word	0x080051a9
 80050c8:	080051a1 	.word	0x080051a1
 80050cc:	080051a1 	.word	0x080051a1
 80050d0:	080051a1 	.word	0x080051a1
 80050d4:	080051a1 	.word	0x080051a1
 80050d8:	080051a1 	.word	0x080051a1
 80050dc:	080051a1 	.word	0x080051a1
 80050e0:	080051a1 	.word	0x080051a1
 80050e4:	08005175 	.word	0x08005175
 80050e8:	080051a1 	.word	0x080051a1
 80050ec:	080051a1 	.word	0x080051a1
 80050f0:	080051a1 	.word	0x080051a1
 80050f4:	080051a1 	.word	0x080051a1
 80050f8:	080051a1 	.word	0x080051a1
 80050fc:	080051a1 	.word	0x080051a1
 8005100:	080051a1 	.word	0x080051a1
 8005104:	0800518b 	.word	0x0800518b
 8005108:	080051a1 	.word	0x080051a1
 800510c:	080051a1 	.word	0x080051a1
 8005110:	080051a1 	.word	0x080051a1
 8005114:	080051a1 	.word	0x080051a1
 8005118:	080051a1 	.word	0x080051a1
 800511c:	080051a1 	.word	0x080051a1
 8005120:	080051a1 	.word	0x080051a1
 8005124:	080051a9 	.word	0x080051a9
 8005128:	080051a1 	.word	0x080051a1
 800512c:	080051a1 	.word	0x080051a1
 8005130:	080051a1 	.word	0x080051a1
 8005134:	080051a1 	.word	0x080051a1
 8005138:	080051a1 	.word	0x080051a1
 800513c:	080051a1 	.word	0x080051a1
 8005140:	080051a1 	.word	0x080051a1
 8005144:	080051a9 	.word	0x080051a9
 8005148:	080051a1 	.word	0x080051a1
 800514c:	080051a1 	.word	0x080051a1
 8005150:	080051a1 	.word	0x080051a1
 8005154:	080051a1 	.word	0x080051a1
 8005158:	080051a1 	.word	0x080051a1
 800515c:	080051a1 	.word	0x080051a1
 8005160:	080051a1 	.word	0x080051a1
 8005164:	080051a9 	.word	0x080051a9
 8005168:	58024400 	.word	0x58024400
 800516c:	58024800 	.word	0x58024800
 8005170:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005174:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005178:	3308      	adds	r3, #8
 800517a:	2101      	movs	r1, #1
 800517c:	4618      	mov	r0, r3
 800517e:	f000 ffa7 	bl	80060d0 <RCCEx_PLL2_Config>
 8005182:	4603      	mov	r3, r0
 8005184:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005188:	e00f      	b.n	80051aa <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800518a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800518e:	3328      	adds	r3, #40	@ 0x28
 8005190:	2101      	movs	r1, #1
 8005192:	4618      	mov	r0, r3
 8005194:	f001 f84e 	bl	8006234 <RCCEx_PLL3_Config>
 8005198:	4603      	mov	r3, r0
 800519a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800519e:	e004      	b.n	80051aa <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80051a0:	2301      	movs	r3, #1
 80051a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80051a6:	e000      	b.n	80051aa <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80051a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051aa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d10a      	bne.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80051b2:	4bbf      	ldr	r3, [pc, #764]	@ (80054b0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80051b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051b6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80051ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051be:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80051c0:	4abb      	ldr	r2, [pc, #748]	@ (80054b0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80051c2:	430b      	orrs	r3, r1
 80051c4:	6553      	str	r3, [r2, #84]	@ 0x54
 80051c6:	e003      	b.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80051cc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80051d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051d8:	f002 0302 	and.w	r3, r2, #2
 80051dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80051e0:	2300      	movs	r3, #0
 80051e2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80051e6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80051ea:	460b      	mov	r3, r1
 80051ec:	4313      	orrs	r3, r2
 80051ee:	d041      	beq.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80051f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051f6:	2b05      	cmp	r3, #5
 80051f8:	d824      	bhi.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 80051fa:	a201      	add	r2, pc, #4	@ (adr r2, 8005200 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 80051fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005200:	0800524d 	.word	0x0800524d
 8005204:	08005219 	.word	0x08005219
 8005208:	0800522f 	.word	0x0800522f
 800520c:	0800524d 	.word	0x0800524d
 8005210:	0800524d 	.word	0x0800524d
 8005214:	0800524d 	.word	0x0800524d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005218:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800521c:	3308      	adds	r3, #8
 800521e:	2101      	movs	r1, #1
 8005220:	4618      	mov	r0, r3
 8005222:	f000 ff55 	bl	80060d0 <RCCEx_PLL2_Config>
 8005226:	4603      	mov	r3, r0
 8005228:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800522c:	e00f      	b.n	800524e <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800522e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005232:	3328      	adds	r3, #40	@ 0x28
 8005234:	2101      	movs	r1, #1
 8005236:	4618      	mov	r0, r3
 8005238:	f000 fffc 	bl	8006234 <RCCEx_PLL3_Config>
 800523c:	4603      	mov	r3, r0
 800523e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005242:	e004      	b.n	800524e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005244:	2301      	movs	r3, #1
 8005246:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800524a:	e000      	b.n	800524e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800524c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800524e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005252:	2b00      	cmp	r3, #0
 8005254:	d10a      	bne.n	800526c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005256:	4b96      	ldr	r3, [pc, #600]	@ (80054b0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005258:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800525a:	f023 0107 	bic.w	r1, r3, #7
 800525e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005262:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005264:	4a92      	ldr	r2, [pc, #584]	@ (80054b0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005266:	430b      	orrs	r3, r1
 8005268:	6553      	str	r3, [r2, #84]	@ 0x54
 800526a:	e003      	b.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800526c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005270:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005274:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800527c:	f002 0304 	and.w	r3, r2, #4
 8005280:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005284:	2300      	movs	r3, #0
 8005286:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800528a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800528e:	460b      	mov	r3, r1
 8005290:	4313      	orrs	r3, r2
 8005292:	d044      	beq.n	800531e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005294:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005298:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800529c:	2b05      	cmp	r3, #5
 800529e:	d825      	bhi.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0xad8>
 80052a0:	a201      	add	r2, pc, #4	@ (adr r2, 80052a8 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 80052a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052a6:	bf00      	nop
 80052a8:	080052f5 	.word	0x080052f5
 80052ac:	080052c1 	.word	0x080052c1
 80052b0:	080052d7 	.word	0x080052d7
 80052b4:	080052f5 	.word	0x080052f5
 80052b8:	080052f5 	.word	0x080052f5
 80052bc:	080052f5 	.word	0x080052f5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80052c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052c4:	3308      	adds	r3, #8
 80052c6:	2101      	movs	r1, #1
 80052c8:	4618      	mov	r0, r3
 80052ca:	f000 ff01 	bl	80060d0 <RCCEx_PLL2_Config>
 80052ce:	4603      	mov	r3, r0
 80052d0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80052d4:	e00f      	b.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80052d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052da:	3328      	adds	r3, #40	@ 0x28
 80052dc:	2101      	movs	r1, #1
 80052de:	4618      	mov	r0, r3
 80052e0:	f000 ffa8 	bl	8006234 <RCCEx_PLL3_Config>
 80052e4:	4603      	mov	r3, r0
 80052e6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80052ea:	e004      	b.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80052ec:	2301      	movs	r3, #1
 80052ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80052f2:	e000      	b.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 80052f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052f6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d10b      	bne.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80052fe:	4b6c      	ldr	r3, [pc, #432]	@ (80054b0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005300:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005302:	f023 0107 	bic.w	r1, r3, #7
 8005306:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800530a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800530e:	4a68      	ldr	r2, [pc, #416]	@ (80054b0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005310:	430b      	orrs	r3, r1
 8005312:	6593      	str	r3, [r2, #88]	@ 0x58
 8005314:	e003      	b.n	800531e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005316:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800531a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800531e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005326:	f002 0320 	and.w	r3, r2, #32
 800532a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800532e:	2300      	movs	r3, #0
 8005330:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005334:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8005338:	460b      	mov	r3, r1
 800533a:	4313      	orrs	r3, r2
 800533c:	d055      	beq.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800533e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005342:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005346:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800534a:	d033      	beq.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800534c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005350:	d82c      	bhi.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8005352:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005356:	d02f      	beq.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8005358:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800535c:	d826      	bhi.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800535e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005362:	d02b      	beq.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8005364:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005368:	d820      	bhi.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800536a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800536e:	d012      	beq.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8005370:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005374:	d81a      	bhi.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8005376:	2b00      	cmp	r3, #0
 8005378:	d022      	beq.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800537a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800537e:	d115      	bne.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005380:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005384:	3308      	adds	r3, #8
 8005386:	2100      	movs	r1, #0
 8005388:	4618      	mov	r0, r3
 800538a:	f000 fea1 	bl	80060d0 <RCCEx_PLL2_Config>
 800538e:	4603      	mov	r3, r0
 8005390:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005394:	e015      	b.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005396:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800539a:	3328      	adds	r3, #40	@ 0x28
 800539c:	2102      	movs	r1, #2
 800539e:	4618      	mov	r0, r3
 80053a0:	f000 ff48 	bl	8006234 <RCCEx_PLL3_Config>
 80053a4:	4603      	mov	r3, r0
 80053a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80053aa:	e00a      	b.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80053ac:	2301      	movs	r3, #1
 80053ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80053b2:	e006      	b.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80053b4:	bf00      	nop
 80053b6:	e004      	b.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80053b8:	bf00      	nop
 80053ba:	e002      	b.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80053bc:	bf00      	nop
 80053be:	e000      	b.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80053c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053c2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d10b      	bne.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80053ca:	4b39      	ldr	r3, [pc, #228]	@ (80054b0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80053cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053ce:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80053d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80053da:	4a35      	ldr	r2, [pc, #212]	@ (80054b0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80053dc:	430b      	orrs	r3, r1
 80053de:	6553      	str	r3, [r2, #84]	@ 0x54
 80053e0:	e003      	b.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053e2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80053e6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80053ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053f2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80053f6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80053fa:	2300      	movs	r3, #0
 80053fc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005400:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8005404:	460b      	mov	r3, r1
 8005406:	4313      	orrs	r3, r2
 8005408:	d058      	beq.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800540a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800540e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005412:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005416:	d033      	beq.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8005418:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800541c:	d82c      	bhi.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800541e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005422:	d02f      	beq.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8005424:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005428:	d826      	bhi.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800542a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800542e:	d02b      	beq.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8005430:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005434:	d820      	bhi.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8005436:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800543a:	d012      	beq.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800543c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005440:	d81a      	bhi.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8005442:	2b00      	cmp	r3, #0
 8005444:	d022      	beq.n	800548c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8005446:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800544a:	d115      	bne.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800544c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005450:	3308      	adds	r3, #8
 8005452:	2100      	movs	r1, #0
 8005454:	4618      	mov	r0, r3
 8005456:	f000 fe3b 	bl	80060d0 <RCCEx_PLL2_Config>
 800545a:	4603      	mov	r3, r0
 800545c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005460:	e015      	b.n	800548e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005462:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005466:	3328      	adds	r3, #40	@ 0x28
 8005468:	2102      	movs	r1, #2
 800546a:	4618      	mov	r0, r3
 800546c:	f000 fee2 	bl	8006234 <RCCEx_PLL3_Config>
 8005470:	4603      	mov	r3, r0
 8005472:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005476:	e00a      	b.n	800548e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005478:	2301      	movs	r3, #1
 800547a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800547e:	e006      	b.n	800548e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8005480:	bf00      	nop
 8005482:	e004      	b.n	800548e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8005484:	bf00      	nop
 8005486:	e002      	b.n	800548e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8005488:	bf00      	nop
 800548a:	e000      	b.n	800548e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800548c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800548e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005492:	2b00      	cmp	r3, #0
 8005494:	d10e      	bne.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005496:	4b06      	ldr	r3, [pc, #24]	@ (80054b0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005498:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800549a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800549e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80054a6:	4a02      	ldr	r2, [pc, #8]	@ (80054b0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80054a8:	430b      	orrs	r3, r1
 80054aa:	6593      	str	r3, [r2, #88]	@ 0x58
 80054ac:	e006      	b.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0xca8>
 80054ae:	bf00      	nop
 80054b0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80054b8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80054bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054c4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80054c8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80054cc:	2300      	movs	r3, #0
 80054ce:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80054d2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80054d6:	460b      	mov	r3, r1
 80054d8:	4313      	orrs	r3, r2
 80054da:	d055      	beq.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80054dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80054e4:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80054e8:	d033      	beq.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 80054ea:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80054ee:	d82c      	bhi.n	800554a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80054f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80054f4:	d02f      	beq.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80054f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80054fa:	d826      	bhi.n	800554a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80054fc:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005500:	d02b      	beq.n	800555a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8005502:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005506:	d820      	bhi.n	800554a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005508:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800550c:	d012      	beq.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800550e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005512:	d81a      	bhi.n	800554a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005514:	2b00      	cmp	r3, #0
 8005516:	d022      	beq.n	800555e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8005518:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800551c:	d115      	bne.n	800554a <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800551e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005522:	3308      	adds	r3, #8
 8005524:	2100      	movs	r1, #0
 8005526:	4618      	mov	r0, r3
 8005528:	f000 fdd2 	bl	80060d0 <RCCEx_PLL2_Config>
 800552c:	4603      	mov	r3, r0
 800552e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005532:	e015      	b.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005534:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005538:	3328      	adds	r3, #40	@ 0x28
 800553a:	2102      	movs	r1, #2
 800553c:	4618      	mov	r0, r3
 800553e:	f000 fe79 	bl	8006234 <RCCEx_PLL3_Config>
 8005542:	4603      	mov	r3, r0
 8005544:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005548:	e00a      	b.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800554a:	2301      	movs	r3, #1
 800554c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005550:	e006      	b.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8005552:	bf00      	nop
 8005554:	e004      	b.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8005556:	bf00      	nop
 8005558:	e002      	b.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800555a:	bf00      	nop
 800555c:	e000      	b.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800555e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005560:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005564:	2b00      	cmp	r3, #0
 8005566:	d10b      	bne.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005568:	4ba0      	ldr	r3, [pc, #640]	@ (80057ec <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800556a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800556c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8005570:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005574:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005578:	4a9c      	ldr	r2, [pc, #624]	@ (80057ec <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800557a:	430b      	orrs	r3, r1
 800557c:	6593      	str	r3, [r2, #88]	@ 0x58
 800557e:	e003      	b.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005580:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005584:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8005588:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800558c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005590:	f002 0308 	and.w	r3, r2, #8
 8005594:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005598:	2300      	movs	r3, #0
 800559a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800559e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80055a2:	460b      	mov	r3, r1
 80055a4:	4313      	orrs	r3, r2
 80055a6:	d01e      	beq.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 80055a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80055b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055b4:	d10c      	bne.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80055b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055ba:	3328      	adds	r3, #40	@ 0x28
 80055bc:	2102      	movs	r1, #2
 80055be:	4618      	mov	r0, r3
 80055c0:	f000 fe38 	bl	8006234 <RCCEx_PLL3_Config>
 80055c4:	4603      	mov	r3, r0
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d002      	beq.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80055d0:	4b86      	ldr	r3, [pc, #536]	@ (80057ec <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80055d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055d4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80055d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80055e0:	4a82      	ldr	r2, [pc, #520]	@ (80057ec <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80055e2:	430b      	orrs	r3, r1
 80055e4:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80055e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055ee:	f002 0310 	and.w	r3, r2, #16
 80055f2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80055f6:	2300      	movs	r3, #0
 80055f8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80055fc:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005600:	460b      	mov	r3, r1
 8005602:	4313      	orrs	r3, r2
 8005604:	d01e      	beq.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005606:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800560a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800560e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005612:	d10c      	bne.n	800562e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005614:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005618:	3328      	adds	r3, #40	@ 0x28
 800561a:	2102      	movs	r1, #2
 800561c:	4618      	mov	r0, r3
 800561e:	f000 fe09 	bl	8006234 <RCCEx_PLL3_Config>
 8005622:	4603      	mov	r3, r0
 8005624:	2b00      	cmp	r3, #0
 8005626:	d002      	beq.n	800562e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8005628:	2301      	movs	r3, #1
 800562a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800562e:	4b6f      	ldr	r3, [pc, #444]	@ (80057ec <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005630:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005632:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005636:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800563a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800563e:	4a6b      	ldr	r2, [pc, #428]	@ (80057ec <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005640:	430b      	orrs	r3, r1
 8005642:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005644:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800564c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005650:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005652:	2300      	movs	r3, #0
 8005654:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005656:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800565a:	460b      	mov	r3, r1
 800565c:	4313      	orrs	r3, r2
 800565e:	d03e      	beq.n	80056de <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005660:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005664:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005668:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800566c:	d022      	beq.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800566e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005672:	d81b      	bhi.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8005674:	2b00      	cmp	r3, #0
 8005676:	d003      	beq.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8005678:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800567c:	d00b      	beq.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800567e:	e015      	b.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005680:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005684:	3308      	adds	r3, #8
 8005686:	2100      	movs	r1, #0
 8005688:	4618      	mov	r0, r3
 800568a:	f000 fd21 	bl	80060d0 <RCCEx_PLL2_Config>
 800568e:	4603      	mov	r3, r0
 8005690:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005694:	e00f      	b.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005696:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800569a:	3328      	adds	r3, #40	@ 0x28
 800569c:	2102      	movs	r1, #2
 800569e:	4618      	mov	r0, r3
 80056a0:	f000 fdc8 	bl	8006234 <RCCEx_PLL3_Config>
 80056a4:	4603      	mov	r3, r0
 80056a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80056aa:	e004      	b.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056ac:	2301      	movs	r3, #1
 80056ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80056b2:	e000      	b.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 80056b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056b6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d10b      	bne.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80056be:	4b4b      	ldr	r3, [pc, #300]	@ (80057ec <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80056c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056c2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80056c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056ca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80056ce:	4a47      	ldr	r2, [pc, #284]	@ (80057ec <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80056d0:	430b      	orrs	r3, r1
 80056d2:	6593      	str	r3, [r2, #88]	@ 0x58
 80056d4:	e003      	b.n	80056de <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056d6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80056da:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80056de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056e6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80056ea:	673b      	str	r3, [r7, #112]	@ 0x70
 80056ec:	2300      	movs	r3, #0
 80056ee:	677b      	str	r3, [r7, #116]	@ 0x74
 80056f0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80056f4:	460b      	mov	r3, r1
 80056f6:	4313      	orrs	r3, r2
 80056f8:	d03b      	beq.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80056fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005702:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005706:	d01f      	beq.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8005708:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800570c:	d818      	bhi.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800570e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005712:	d003      	beq.n	800571c <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8005714:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005718:	d007      	beq.n	800572a <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800571a:	e011      	b.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800571c:	4b33      	ldr	r3, [pc, #204]	@ (80057ec <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800571e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005720:	4a32      	ldr	r2, [pc, #200]	@ (80057ec <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005722:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005726:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005728:	e00f      	b.n	800574a <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800572a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800572e:	3328      	adds	r3, #40	@ 0x28
 8005730:	2101      	movs	r1, #1
 8005732:	4618      	mov	r0, r3
 8005734:	f000 fd7e 	bl	8006234 <RCCEx_PLL3_Config>
 8005738:	4603      	mov	r3, r0
 800573a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800573e:	e004      	b.n	800574a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005740:	2301      	movs	r3, #1
 8005742:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005746:	e000      	b.n	800574a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8005748:	bf00      	nop
    }

    if (ret == HAL_OK)
 800574a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800574e:	2b00      	cmp	r3, #0
 8005750:	d10b      	bne.n	800576a <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005752:	4b26      	ldr	r3, [pc, #152]	@ (80057ec <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005754:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005756:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800575a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800575e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005762:	4a22      	ldr	r2, [pc, #136]	@ (80057ec <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005764:	430b      	orrs	r3, r1
 8005766:	6553      	str	r3, [r2, #84]	@ 0x54
 8005768:	e003      	b.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800576a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800576e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005772:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800577a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800577e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005780:	2300      	movs	r3, #0
 8005782:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005784:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005788:	460b      	mov	r3, r1
 800578a:	4313      	orrs	r3, r2
 800578c:	d034      	beq.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800578e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005792:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005794:	2b00      	cmp	r3, #0
 8005796:	d003      	beq.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8005798:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800579c:	d007      	beq.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800579e:	e011      	b.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057a0:	4b12      	ldr	r3, [pc, #72]	@ (80057ec <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80057a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057a4:	4a11      	ldr	r2, [pc, #68]	@ (80057ec <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80057a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80057aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80057ac:	e00e      	b.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80057ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057b2:	3308      	adds	r3, #8
 80057b4:	2102      	movs	r1, #2
 80057b6:	4618      	mov	r0, r3
 80057b8:	f000 fc8a 	bl	80060d0 <RCCEx_PLL2_Config>
 80057bc:	4603      	mov	r3, r0
 80057be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80057c2:	e003      	b.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 80057c4:	2301      	movs	r3, #1
 80057c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80057ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d10d      	bne.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80057d4:	4b05      	ldr	r3, [pc, #20]	@ (80057ec <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80057d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80057d8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80057dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057e2:	4a02      	ldr	r2, [pc, #8]	@ (80057ec <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80057e4:	430b      	orrs	r3, r1
 80057e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80057e8:	e006      	b.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 80057ea:	bf00      	nop
 80057ec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80057f4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80057f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005800:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8005804:	663b      	str	r3, [r7, #96]	@ 0x60
 8005806:	2300      	movs	r3, #0
 8005808:	667b      	str	r3, [r7, #100]	@ 0x64
 800580a:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800580e:	460b      	mov	r3, r1
 8005810:	4313      	orrs	r3, r2
 8005812:	d00c      	beq.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005814:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005818:	3328      	adds	r3, #40	@ 0x28
 800581a:	2102      	movs	r1, #2
 800581c:	4618      	mov	r0, r3
 800581e:	f000 fd09 	bl	8006234 <RCCEx_PLL3_Config>
 8005822:	4603      	mov	r3, r0
 8005824:	2b00      	cmp	r3, #0
 8005826:	d002      	beq.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8005828:	2301      	movs	r3, #1
 800582a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800582e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005836:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800583a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800583c:	2300      	movs	r3, #0
 800583e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005840:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005844:	460b      	mov	r3, r1
 8005846:	4313      	orrs	r3, r2
 8005848:	d036      	beq.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800584a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800584e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005850:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005854:	d018      	beq.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8005856:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800585a:	d811      	bhi.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800585c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005860:	d014      	beq.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8005862:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005866:	d80b      	bhi.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8005868:	2b00      	cmp	r3, #0
 800586a:	d011      	beq.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800586c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005870:	d106      	bne.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005872:	4bb7      	ldr	r3, [pc, #732]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005874:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005876:	4ab6      	ldr	r2, [pc, #728]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005878:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800587c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800587e:	e008      	b.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005880:	2301      	movs	r3, #1
 8005882:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005886:	e004      	b.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8005888:	bf00      	nop
 800588a:	e002      	b.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800588c:	bf00      	nop
 800588e:	e000      	b.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8005890:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005892:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005896:	2b00      	cmp	r3, #0
 8005898:	d10a      	bne.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800589a:	4bad      	ldr	r3, [pc, #692]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800589c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800589e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80058a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058a6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80058a8:	4aa9      	ldr	r2, [pc, #676]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80058aa:	430b      	orrs	r3, r1
 80058ac:	6553      	str	r3, [r2, #84]	@ 0x54
 80058ae:	e003      	b.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80058b4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80058b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058c0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80058c4:	653b      	str	r3, [r7, #80]	@ 0x50
 80058c6:	2300      	movs	r3, #0
 80058c8:	657b      	str	r3, [r7, #84]	@ 0x54
 80058ca:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80058ce:	460b      	mov	r3, r1
 80058d0:	4313      	orrs	r3, r2
 80058d2:	d009      	beq.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80058d4:	4b9e      	ldr	r3, [pc, #632]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80058d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058d8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80058dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058e2:	4a9b      	ldr	r2, [pc, #620]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80058e4:	430b      	orrs	r3, r1
 80058e6:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80058e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058f0:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80058f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80058f6:	2300      	movs	r3, #0
 80058f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80058fa:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80058fe:	460b      	mov	r3, r1
 8005900:	4313      	orrs	r3, r2
 8005902:	d009      	beq.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005904:	4b92      	ldr	r3, [pc, #584]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005906:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005908:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800590c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005910:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005912:	4a8f      	ldr	r2, [pc, #572]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005914:	430b      	orrs	r3, r1
 8005916:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005918:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800591c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005920:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005924:	643b      	str	r3, [r7, #64]	@ 0x40
 8005926:	2300      	movs	r3, #0
 8005928:	647b      	str	r3, [r7, #68]	@ 0x44
 800592a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800592e:	460b      	mov	r3, r1
 8005930:	4313      	orrs	r3, r2
 8005932:	d00e      	beq.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005934:	4b86      	ldr	r3, [pc, #536]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005936:	691b      	ldr	r3, [r3, #16]
 8005938:	4a85      	ldr	r2, [pc, #532]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800593a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800593e:	6113      	str	r3, [r2, #16]
 8005940:	4b83      	ldr	r3, [pc, #524]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005942:	6919      	ldr	r1, [r3, #16]
 8005944:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005948:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800594c:	4a80      	ldr	r2, [pc, #512]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800594e:	430b      	orrs	r3, r1
 8005950:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005952:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800595a:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800595e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005960:	2300      	movs	r3, #0
 8005962:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005964:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005968:	460b      	mov	r3, r1
 800596a:	4313      	orrs	r3, r2
 800596c:	d009      	beq.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800596e:	4b78      	ldr	r3, [pc, #480]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005970:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005972:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005976:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800597a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800597c:	4a74      	ldr	r2, [pc, #464]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800597e:	430b      	orrs	r3, r1
 8005980:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005982:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800598a:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800598e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005990:	2300      	movs	r3, #0
 8005992:	637b      	str	r3, [r7, #52]	@ 0x34
 8005994:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005998:	460b      	mov	r3, r1
 800599a:	4313      	orrs	r3, r2
 800599c:	d00a      	beq.n	80059b4 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800599e:	4b6c      	ldr	r3, [pc, #432]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80059a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059a2:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80059a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059ae:	4a68      	ldr	r2, [pc, #416]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80059b0:	430b      	orrs	r3, r1
 80059b2:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80059b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059bc:	2100      	movs	r1, #0
 80059be:	62b9      	str	r1, [r7, #40]	@ 0x28
 80059c0:	f003 0301 	and.w	r3, r3, #1
 80059c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80059c6:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80059ca:	460b      	mov	r3, r1
 80059cc:	4313      	orrs	r3, r2
 80059ce:	d011      	beq.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80059d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059d4:	3308      	adds	r3, #8
 80059d6:	2100      	movs	r1, #0
 80059d8:	4618      	mov	r0, r3
 80059da:	f000 fb79 	bl	80060d0 <RCCEx_PLL2_Config>
 80059de:	4603      	mov	r3, r0
 80059e0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80059e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d003      	beq.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80059f0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80059f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059fc:	2100      	movs	r1, #0
 80059fe:	6239      	str	r1, [r7, #32]
 8005a00:	f003 0302 	and.w	r3, r3, #2
 8005a04:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a06:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005a0a:	460b      	mov	r3, r1
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	d011      	beq.n	8005a34 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005a10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a14:	3308      	adds	r3, #8
 8005a16:	2101      	movs	r1, #1
 8005a18:	4618      	mov	r0, r3
 8005a1a:	f000 fb59 	bl	80060d0 <RCCEx_PLL2_Config>
 8005a1e:	4603      	mov	r3, r0
 8005a20:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005a24:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d003      	beq.n	8005a34 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a2c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005a30:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005a34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a3c:	2100      	movs	r1, #0
 8005a3e:	61b9      	str	r1, [r7, #24]
 8005a40:	f003 0304 	and.w	r3, r3, #4
 8005a44:	61fb      	str	r3, [r7, #28]
 8005a46:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005a4a:	460b      	mov	r3, r1
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	d011      	beq.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005a50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a54:	3308      	adds	r3, #8
 8005a56:	2102      	movs	r1, #2
 8005a58:	4618      	mov	r0, r3
 8005a5a:	f000 fb39 	bl	80060d0 <RCCEx_PLL2_Config>
 8005a5e:	4603      	mov	r3, r0
 8005a60:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005a64:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d003      	beq.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a6c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005a70:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005a74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a7c:	2100      	movs	r1, #0
 8005a7e:	6139      	str	r1, [r7, #16]
 8005a80:	f003 0308 	and.w	r3, r3, #8
 8005a84:	617b      	str	r3, [r7, #20]
 8005a86:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005a8a:	460b      	mov	r3, r1
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	d011      	beq.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005a90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a94:	3328      	adds	r3, #40	@ 0x28
 8005a96:	2100      	movs	r1, #0
 8005a98:	4618      	mov	r0, r3
 8005a9a:	f000 fbcb 	bl	8006234 <RCCEx_PLL3_Config>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8005aa4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d003      	beq.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005aac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005ab0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005ab4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005abc:	2100      	movs	r1, #0
 8005abe:	60b9      	str	r1, [r7, #8]
 8005ac0:	f003 0310 	and.w	r3, r3, #16
 8005ac4:	60fb      	str	r3, [r7, #12]
 8005ac6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005aca:	460b      	mov	r3, r1
 8005acc:	4313      	orrs	r3, r2
 8005ace:	d011      	beq.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005ad0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ad4:	3328      	adds	r3, #40	@ 0x28
 8005ad6:	2101      	movs	r1, #1
 8005ad8:	4618      	mov	r0, r3
 8005ada:	f000 fbab 	bl	8006234 <RCCEx_PLL3_Config>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005ae4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d003      	beq.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005aec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005af0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005af4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005afc:	2100      	movs	r1, #0
 8005afe:	6039      	str	r1, [r7, #0]
 8005b00:	f003 0320 	and.w	r3, r3, #32
 8005b04:	607b      	str	r3, [r7, #4]
 8005b06:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005b0a:	460b      	mov	r3, r1
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	d011      	beq.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005b10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b14:	3328      	adds	r3, #40	@ 0x28
 8005b16:	2102      	movs	r1, #2
 8005b18:	4618      	mov	r0, r3
 8005b1a:	f000 fb8b 	bl	8006234 <RCCEx_PLL3_Config>
 8005b1e:	4603      	mov	r3, r0
 8005b20:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005b24:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d003      	beq.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b2c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005b30:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8005b34:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d101      	bne.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	e000      	b.n	8005b42 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8005b40:	2301      	movs	r3, #1
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b4e:	bf00      	nop
 8005b50:	58024400 	.word	0x58024400

08005b54 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005b58:	f7fe fe00 	bl	800475c <HAL_RCC_GetHCLKFreq>
 8005b5c:	4602      	mov	r2, r0
 8005b5e:	4b06      	ldr	r3, [pc, #24]	@ (8005b78 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005b60:	6a1b      	ldr	r3, [r3, #32]
 8005b62:	091b      	lsrs	r3, r3, #4
 8005b64:	f003 0307 	and.w	r3, r3, #7
 8005b68:	4904      	ldr	r1, [pc, #16]	@ (8005b7c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005b6a:	5ccb      	ldrb	r3, [r1, r3]
 8005b6c:	f003 031f 	and.w	r3, r3, #31
 8005b70:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	bd80      	pop	{r7, pc}
 8005b78:	58024400 	.word	0x58024400
 8005b7c:	0802d340 	.word	0x0802d340

08005b80 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b089      	sub	sp, #36	@ 0x24
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005b88:	4ba1      	ldr	r3, [pc, #644]	@ (8005e10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b8c:	f003 0303 	and.w	r3, r3, #3
 8005b90:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005b92:	4b9f      	ldr	r3, [pc, #636]	@ (8005e10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b96:	0b1b      	lsrs	r3, r3, #12
 8005b98:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005b9c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005b9e:	4b9c      	ldr	r3, [pc, #624]	@ (8005e10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ba0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ba2:	091b      	lsrs	r3, r3, #4
 8005ba4:	f003 0301 	and.w	r3, r3, #1
 8005ba8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005baa:	4b99      	ldr	r3, [pc, #612]	@ (8005e10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005bac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bae:	08db      	lsrs	r3, r3, #3
 8005bb0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005bb4:	693a      	ldr	r2, [r7, #16]
 8005bb6:	fb02 f303 	mul.w	r3, r2, r3
 8005bba:	ee07 3a90 	vmov	s15, r3
 8005bbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bc2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	f000 8111 	beq.w	8005df0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005bce:	69bb      	ldr	r3, [r7, #24]
 8005bd0:	2b02      	cmp	r3, #2
 8005bd2:	f000 8083 	beq.w	8005cdc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005bd6:	69bb      	ldr	r3, [r7, #24]
 8005bd8:	2b02      	cmp	r3, #2
 8005bda:	f200 80a1 	bhi.w	8005d20 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005bde:	69bb      	ldr	r3, [r7, #24]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d003      	beq.n	8005bec <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005be4:	69bb      	ldr	r3, [r7, #24]
 8005be6:	2b01      	cmp	r3, #1
 8005be8:	d056      	beq.n	8005c98 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005bea:	e099      	b.n	8005d20 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005bec:	4b88      	ldr	r3, [pc, #544]	@ (8005e10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f003 0320 	and.w	r3, r3, #32
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d02d      	beq.n	8005c54 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005bf8:	4b85      	ldr	r3, [pc, #532]	@ (8005e10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	08db      	lsrs	r3, r3, #3
 8005bfe:	f003 0303 	and.w	r3, r3, #3
 8005c02:	4a84      	ldr	r2, [pc, #528]	@ (8005e14 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005c04:	fa22 f303 	lsr.w	r3, r2, r3
 8005c08:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	ee07 3a90 	vmov	s15, r3
 8005c10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	ee07 3a90 	vmov	s15, r3
 8005c1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c22:	4b7b      	ldr	r3, [pc, #492]	@ (8005e10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c2a:	ee07 3a90 	vmov	s15, r3
 8005c2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c32:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c36:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005e18 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005c3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005c46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c4e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005c52:	e087      	b.n	8005d64 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	ee07 3a90 	vmov	s15, r3
 8005c5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c5e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005e1c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005c62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c66:	4b6a      	ldr	r3, [pc, #424]	@ (8005e10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c6e:	ee07 3a90 	vmov	s15, r3
 8005c72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c76:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c7a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005e18 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005c7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005c8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005c96:	e065      	b.n	8005d64 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	ee07 3a90 	vmov	s15, r3
 8005c9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ca2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005e20 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005ca6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005caa:	4b59      	ldr	r3, [pc, #356]	@ (8005e10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005cac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cb2:	ee07 3a90 	vmov	s15, r3
 8005cb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cba:	ed97 6a03 	vldr	s12, [r7, #12]
 8005cbe:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005e18 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005cc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005cce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cd6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005cda:	e043      	b.n	8005d64 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	ee07 3a90 	vmov	s15, r3
 8005ce2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ce6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005e24 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005cea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cee:	4b48      	ldr	r3, [pc, #288]	@ (8005e10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005cf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cf6:	ee07 3a90 	vmov	s15, r3
 8005cfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cfe:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d02:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005e18 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005d06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005d1e:	e021      	b.n	8005d64 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	ee07 3a90 	vmov	s15, r3
 8005d26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d2a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005e20 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005d2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d32:	4b37      	ldr	r3, [pc, #220]	@ (8005e10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d3a:	ee07 3a90 	vmov	s15, r3
 8005d3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d42:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d46:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005e18 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005d4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005d62:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005d64:	4b2a      	ldr	r3, [pc, #168]	@ (8005e10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d68:	0a5b      	lsrs	r3, r3, #9
 8005d6a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005d6e:	ee07 3a90 	vmov	s15, r3
 8005d72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d76:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005d7a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005d7e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d8a:	ee17 2a90 	vmov	r2, s15
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005d92:	4b1f      	ldr	r3, [pc, #124]	@ (8005e10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d96:	0c1b      	lsrs	r3, r3, #16
 8005d98:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005d9c:	ee07 3a90 	vmov	s15, r3
 8005da0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005da4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005da8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005dac:	edd7 6a07 	vldr	s13, [r7, #28]
 8005db0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005db4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005db8:	ee17 2a90 	vmov	r2, s15
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005dc0:	4b13      	ldr	r3, [pc, #76]	@ (8005e10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005dc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dc4:	0e1b      	lsrs	r3, r3, #24
 8005dc6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005dca:	ee07 3a90 	vmov	s15, r3
 8005dce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dd2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005dd6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005dda:	edd7 6a07 	vldr	s13, [r7, #28]
 8005dde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005de2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005de6:	ee17 2a90 	vmov	r2, s15
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005dee:	e008      	b.n	8005e02 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2200      	movs	r2, #0
 8005df4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	609a      	str	r2, [r3, #8]
}
 8005e02:	bf00      	nop
 8005e04:	3724      	adds	r7, #36	@ 0x24
 8005e06:	46bd      	mov	sp, r7
 8005e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0c:	4770      	bx	lr
 8005e0e:	bf00      	nop
 8005e10:	58024400 	.word	0x58024400
 8005e14:	03d09000 	.word	0x03d09000
 8005e18:	46000000 	.word	0x46000000
 8005e1c:	4c742400 	.word	0x4c742400
 8005e20:	4a742400 	.word	0x4a742400
 8005e24:	4af42400 	.word	0x4af42400

08005e28 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b089      	sub	sp, #36	@ 0x24
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005e30:	4ba1      	ldr	r3, [pc, #644]	@ (80060b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e34:	f003 0303 	and.w	r3, r3, #3
 8005e38:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005e3a:	4b9f      	ldr	r3, [pc, #636]	@ (80060b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e3e:	0d1b      	lsrs	r3, r3, #20
 8005e40:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005e44:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005e46:	4b9c      	ldr	r3, [pc, #624]	@ (80060b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e4a:	0a1b      	lsrs	r3, r3, #8
 8005e4c:	f003 0301 	and.w	r3, r3, #1
 8005e50:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005e52:	4b99      	ldr	r3, [pc, #612]	@ (80060b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e56:	08db      	lsrs	r3, r3, #3
 8005e58:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005e5c:	693a      	ldr	r2, [r7, #16]
 8005e5e:	fb02 f303 	mul.w	r3, r2, r3
 8005e62:	ee07 3a90 	vmov	s15, r3
 8005e66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e6a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	f000 8111 	beq.w	8006098 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005e76:	69bb      	ldr	r3, [r7, #24]
 8005e78:	2b02      	cmp	r3, #2
 8005e7a:	f000 8083 	beq.w	8005f84 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005e7e:	69bb      	ldr	r3, [r7, #24]
 8005e80:	2b02      	cmp	r3, #2
 8005e82:	f200 80a1 	bhi.w	8005fc8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005e86:	69bb      	ldr	r3, [r7, #24]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d003      	beq.n	8005e94 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005e8c:	69bb      	ldr	r3, [r7, #24]
 8005e8e:	2b01      	cmp	r3, #1
 8005e90:	d056      	beq.n	8005f40 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005e92:	e099      	b.n	8005fc8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e94:	4b88      	ldr	r3, [pc, #544]	@ (80060b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f003 0320 	and.w	r3, r3, #32
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d02d      	beq.n	8005efc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005ea0:	4b85      	ldr	r3, [pc, #532]	@ (80060b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	08db      	lsrs	r3, r3, #3
 8005ea6:	f003 0303 	and.w	r3, r3, #3
 8005eaa:	4a84      	ldr	r2, [pc, #528]	@ (80060bc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005eac:	fa22 f303 	lsr.w	r3, r2, r3
 8005eb0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	ee07 3a90 	vmov	s15, r3
 8005eb8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	ee07 3a90 	vmov	s15, r3
 8005ec2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ec6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005eca:	4b7b      	ldr	r3, [pc, #492]	@ (80060b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ece:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ed2:	ee07 3a90 	vmov	s15, r3
 8005ed6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005eda:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ede:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80060c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005ee2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ee6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005eea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005eee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ef2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ef6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005efa:	e087      	b.n	800600c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	ee07 3a90 	vmov	s15, r3
 8005f02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f06:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80060c4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005f0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f0e:	4b6a      	ldr	r3, [pc, #424]	@ (80060b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f16:	ee07 3a90 	vmov	s15, r3
 8005f1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f22:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80060c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005f26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f3e:	e065      	b.n	800600c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	ee07 3a90 	vmov	s15, r3
 8005f46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f4a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80060c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005f4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f52:	4b59      	ldr	r3, [pc, #356]	@ (80060b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f5a:	ee07 3a90 	vmov	s15, r3
 8005f5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f62:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f66:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80060c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005f6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f82:	e043      	b.n	800600c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	ee07 3a90 	vmov	s15, r3
 8005f8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f8e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80060cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005f92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f96:	4b48      	ldr	r3, [pc, #288]	@ (80060b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f9e:	ee07 3a90 	vmov	s15, r3
 8005fa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fa6:	ed97 6a03 	vldr	s12, [r7, #12]
 8005faa:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80060c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005fae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fb6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005fba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fc2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005fc6:	e021      	b.n	800600c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	ee07 3a90 	vmov	s15, r3
 8005fce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fd2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80060c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005fd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fda:	4b37      	ldr	r3, [pc, #220]	@ (80060b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fe2:	ee07 3a90 	vmov	s15, r3
 8005fe6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fea:	ed97 6a03 	vldr	s12, [r7, #12]
 8005fee:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80060c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005ff2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ff6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ffa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005ffe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006002:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006006:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800600a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800600c:	4b2a      	ldr	r3, [pc, #168]	@ (80060b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800600e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006010:	0a5b      	lsrs	r3, r3, #9
 8006012:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006016:	ee07 3a90 	vmov	s15, r3
 800601a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800601e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006022:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006026:	edd7 6a07 	vldr	s13, [r7, #28]
 800602a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800602e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006032:	ee17 2a90 	vmov	r2, s15
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800603a:	4b1f      	ldr	r3, [pc, #124]	@ (80060b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800603c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800603e:	0c1b      	lsrs	r3, r3, #16
 8006040:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006044:	ee07 3a90 	vmov	s15, r3
 8006048:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800604c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006050:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006054:	edd7 6a07 	vldr	s13, [r7, #28]
 8006058:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800605c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006060:	ee17 2a90 	vmov	r2, s15
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006068:	4b13      	ldr	r3, [pc, #76]	@ (80060b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800606a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800606c:	0e1b      	lsrs	r3, r3, #24
 800606e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006072:	ee07 3a90 	vmov	s15, r3
 8006076:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800607a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800607e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006082:	edd7 6a07 	vldr	s13, [r7, #28]
 8006086:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800608a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800608e:	ee17 2a90 	vmov	r2, s15
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006096:	e008      	b.n	80060aa <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2200      	movs	r2, #0
 800609c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2200      	movs	r2, #0
 80060a2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2200      	movs	r2, #0
 80060a8:	609a      	str	r2, [r3, #8]
}
 80060aa:	bf00      	nop
 80060ac:	3724      	adds	r7, #36	@ 0x24
 80060ae:	46bd      	mov	sp, r7
 80060b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b4:	4770      	bx	lr
 80060b6:	bf00      	nop
 80060b8:	58024400 	.word	0x58024400
 80060bc:	03d09000 	.word	0x03d09000
 80060c0:	46000000 	.word	0x46000000
 80060c4:	4c742400 	.word	0x4c742400
 80060c8:	4a742400 	.word	0x4a742400
 80060cc:	4af42400 	.word	0x4af42400

080060d0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b084      	sub	sp, #16
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
 80060d8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80060da:	2300      	movs	r3, #0
 80060dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80060de:	4b53      	ldr	r3, [pc, #332]	@ (800622c <RCCEx_PLL2_Config+0x15c>)
 80060e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060e2:	f003 0303 	and.w	r3, r3, #3
 80060e6:	2b03      	cmp	r3, #3
 80060e8:	d101      	bne.n	80060ee <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80060ea:	2301      	movs	r3, #1
 80060ec:	e099      	b.n	8006222 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80060ee:	4b4f      	ldr	r3, [pc, #316]	@ (800622c <RCCEx_PLL2_Config+0x15c>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4a4e      	ldr	r2, [pc, #312]	@ (800622c <RCCEx_PLL2_Config+0x15c>)
 80060f4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80060f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80060fa:	f7fb ffd3 	bl	80020a4 <HAL_GetTick>
 80060fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006100:	e008      	b.n	8006114 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006102:	f7fb ffcf 	bl	80020a4 <HAL_GetTick>
 8006106:	4602      	mov	r2, r0
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	1ad3      	subs	r3, r2, r3
 800610c:	2b02      	cmp	r3, #2
 800610e:	d901      	bls.n	8006114 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006110:	2303      	movs	r3, #3
 8006112:	e086      	b.n	8006222 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006114:	4b45      	ldr	r3, [pc, #276]	@ (800622c <RCCEx_PLL2_Config+0x15c>)
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800611c:	2b00      	cmp	r3, #0
 800611e:	d1f0      	bne.n	8006102 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006120:	4b42      	ldr	r3, [pc, #264]	@ (800622c <RCCEx_PLL2_Config+0x15c>)
 8006122:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006124:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	031b      	lsls	r3, r3, #12
 800612e:	493f      	ldr	r1, [pc, #252]	@ (800622c <RCCEx_PLL2_Config+0x15c>)
 8006130:	4313      	orrs	r3, r2
 8006132:	628b      	str	r3, [r1, #40]	@ 0x28
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	3b01      	subs	r3, #1
 800613a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	689b      	ldr	r3, [r3, #8]
 8006142:	3b01      	subs	r3, #1
 8006144:	025b      	lsls	r3, r3, #9
 8006146:	b29b      	uxth	r3, r3
 8006148:	431a      	orrs	r2, r3
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	68db      	ldr	r3, [r3, #12]
 800614e:	3b01      	subs	r3, #1
 8006150:	041b      	lsls	r3, r3, #16
 8006152:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006156:	431a      	orrs	r2, r3
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	691b      	ldr	r3, [r3, #16]
 800615c:	3b01      	subs	r3, #1
 800615e:	061b      	lsls	r3, r3, #24
 8006160:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006164:	4931      	ldr	r1, [pc, #196]	@ (800622c <RCCEx_PLL2_Config+0x15c>)
 8006166:	4313      	orrs	r3, r2
 8006168:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800616a:	4b30      	ldr	r3, [pc, #192]	@ (800622c <RCCEx_PLL2_Config+0x15c>)
 800616c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800616e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	695b      	ldr	r3, [r3, #20]
 8006176:	492d      	ldr	r1, [pc, #180]	@ (800622c <RCCEx_PLL2_Config+0x15c>)
 8006178:	4313      	orrs	r3, r2
 800617a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800617c:	4b2b      	ldr	r3, [pc, #172]	@ (800622c <RCCEx_PLL2_Config+0x15c>)
 800617e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006180:	f023 0220 	bic.w	r2, r3, #32
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	699b      	ldr	r3, [r3, #24]
 8006188:	4928      	ldr	r1, [pc, #160]	@ (800622c <RCCEx_PLL2_Config+0x15c>)
 800618a:	4313      	orrs	r3, r2
 800618c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800618e:	4b27      	ldr	r3, [pc, #156]	@ (800622c <RCCEx_PLL2_Config+0x15c>)
 8006190:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006192:	4a26      	ldr	r2, [pc, #152]	@ (800622c <RCCEx_PLL2_Config+0x15c>)
 8006194:	f023 0310 	bic.w	r3, r3, #16
 8006198:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800619a:	4b24      	ldr	r3, [pc, #144]	@ (800622c <RCCEx_PLL2_Config+0x15c>)
 800619c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800619e:	4b24      	ldr	r3, [pc, #144]	@ (8006230 <RCCEx_PLL2_Config+0x160>)
 80061a0:	4013      	ands	r3, r2
 80061a2:	687a      	ldr	r2, [r7, #4]
 80061a4:	69d2      	ldr	r2, [r2, #28]
 80061a6:	00d2      	lsls	r2, r2, #3
 80061a8:	4920      	ldr	r1, [pc, #128]	@ (800622c <RCCEx_PLL2_Config+0x15c>)
 80061aa:	4313      	orrs	r3, r2
 80061ac:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80061ae:	4b1f      	ldr	r3, [pc, #124]	@ (800622c <RCCEx_PLL2_Config+0x15c>)
 80061b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061b2:	4a1e      	ldr	r2, [pc, #120]	@ (800622c <RCCEx_PLL2_Config+0x15c>)
 80061b4:	f043 0310 	orr.w	r3, r3, #16
 80061b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d106      	bne.n	80061ce <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80061c0:	4b1a      	ldr	r3, [pc, #104]	@ (800622c <RCCEx_PLL2_Config+0x15c>)
 80061c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061c4:	4a19      	ldr	r2, [pc, #100]	@ (800622c <RCCEx_PLL2_Config+0x15c>)
 80061c6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80061ca:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80061cc:	e00f      	b.n	80061ee <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	2b01      	cmp	r3, #1
 80061d2:	d106      	bne.n	80061e2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80061d4:	4b15      	ldr	r3, [pc, #84]	@ (800622c <RCCEx_PLL2_Config+0x15c>)
 80061d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061d8:	4a14      	ldr	r2, [pc, #80]	@ (800622c <RCCEx_PLL2_Config+0x15c>)
 80061da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80061de:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80061e0:	e005      	b.n	80061ee <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80061e2:	4b12      	ldr	r3, [pc, #72]	@ (800622c <RCCEx_PLL2_Config+0x15c>)
 80061e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061e6:	4a11      	ldr	r2, [pc, #68]	@ (800622c <RCCEx_PLL2_Config+0x15c>)
 80061e8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80061ec:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80061ee:	4b0f      	ldr	r3, [pc, #60]	@ (800622c <RCCEx_PLL2_Config+0x15c>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4a0e      	ldr	r2, [pc, #56]	@ (800622c <RCCEx_PLL2_Config+0x15c>)
 80061f4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80061f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061fa:	f7fb ff53 	bl	80020a4 <HAL_GetTick>
 80061fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006200:	e008      	b.n	8006214 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006202:	f7fb ff4f 	bl	80020a4 <HAL_GetTick>
 8006206:	4602      	mov	r2, r0
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	1ad3      	subs	r3, r2, r3
 800620c:	2b02      	cmp	r3, #2
 800620e:	d901      	bls.n	8006214 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006210:	2303      	movs	r3, #3
 8006212:	e006      	b.n	8006222 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006214:	4b05      	ldr	r3, [pc, #20]	@ (800622c <RCCEx_PLL2_Config+0x15c>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800621c:	2b00      	cmp	r3, #0
 800621e:	d0f0      	beq.n	8006202 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006220:	7bfb      	ldrb	r3, [r7, #15]
}
 8006222:	4618      	mov	r0, r3
 8006224:	3710      	adds	r7, #16
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}
 800622a:	bf00      	nop
 800622c:	58024400 	.word	0x58024400
 8006230:	ffff0007 	.word	0xffff0007

08006234 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b084      	sub	sp, #16
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
 800623c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800623e:	2300      	movs	r3, #0
 8006240:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006242:	4b53      	ldr	r3, [pc, #332]	@ (8006390 <RCCEx_PLL3_Config+0x15c>)
 8006244:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006246:	f003 0303 	and.w	r3, r3, #3
 800624a:	2b03      	cmp	r3, #3
 800624c:	d101      	bne.n	8006252 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800624e:	2301      	movs	r3, #1
 8006250:	e099      	b.n	8006386 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006252:	4b4f      	ldr	r3, [pc, #316]	@ (8006390 <RCCEx_PLL3_Config+0x15c>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a4e      	ldr	r2, [pc, #312]	@ (8006390 <RCCEx_PLL3_Config+0x15c>)
 8006258:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800625c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800625e:	f7fb ff21 	bl	80020a4 <HAL_GetTick>
 8006262:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006264:	e008      	b.n	8006278 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006266:	f7fb ff1d 	bl	80020a4 <HAL_GetTick>
 800626a:	4602      	mov	r2, r0
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	1ad3      	subs	r3, r2, r3
 8006270:	2b02      	cmp	r3, #2
 8006272:	d901      	bls.n	8006278 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006274:	2303      	movs	r3, #3
 8006276:	e086      	b.n	8006386 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006278:	4b45      	ldr	r3, [pc, #276]	@ (8006390 <RCCEx_PLL3_Config+0x15c>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006280:	2b00      	cmp	r3, #0
 8006282:	d1f0      	bne.n	8006266 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006284:	4b42      	ldr	r3, [pc, #264]	@ (8006390 <RCCEx_PLL3_Config+0x15c>)
 8006286:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006288:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	051b      	lsls	r3, r3, #20
 8006292:	493f      	ldr	r1, [pc, #252]	@ (8006390 <RCCEx_PLL3_Config+0x15c>)
 8006294:	4313      	orrs	r3, r2
 8006296:	628b      	str	r3, [r1, #40]	@ 0x28
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	685b      	ldr	r3, [r3, #4]
 800629c:	3b01      	subs	r3, #1
 800629e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	689b      	ldr	r3, [r3, #8]
 80062a6:	3b01      	subs	r3, #1
 80062a8:	025b      	lsls	r3, r3, #9
 80062aa:	b29b      	uxth	r3, r3
 80062ac:	431a      	orrs	r2, r3
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	68db      	ldr	r3, [r3, #12]
 80062b2:	3b01      	subs	r3, #1
 80062b4:	041b      	lsls	r3, r3, #16
 80062b6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80062ba:	431a      	orrs	r2, r3
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	691b      	ldr	r3, [r3, #16]
 80062c0:	3b01      	subs	r3, #1
 80062c2:	061b      	lsls	r3, r3, #24
 80062c4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80062c8:	4931      	ldr	r1, [pc, #196]	@ (8006390 <RCCEx_PLL3_Config+0x15c>)
 80062ca:	4313      	orrs	r3, r2
 80062cc:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80062ce:	4b30      	ldr	r3, [pc, #192]	@ (8006390 <RCCEx_PLL3_Config+0x15c>)
 80062d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062d2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	695b      	ldr	r3, [r3, #20]
 80062da:	492d      	ldr	r1, [pc, #180]	@ (8006390 <RCCEx_PLL3_Config+0x15c>)
 80062dc:	4313      	orrs	r3, r2
 80062de:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80062e0:	4b2b      	ldr	r3, [pc, #172]	@ (8006390 <RCCEx_PLL3_Config+0x15c>)
 80062e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062e4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	699b      	ldr	r3, [r3, #24]
 80062ec:	4928      	ldr	r1, [pc, #160]	@ (8006390 <RCCEx_PLL3_Config+0x15c>)
 80062ee:	4313      	orrs	r3, r2
 80062f0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80062f2:	4b27      	ldr	r3, [pc, #156]	@ (8006390 <RCCEx_PLL3_Config+0x15c>)
 80062f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062f6:	4a26      	ldr	r2, [pc, #152]	@ (8006390 <RCCEx_PLL3_Config+0x15c>)
 80062f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80062fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80062fe:	4b24      	ldr	r3, [pc, #144]	@ (8006390 <RCCEx_PLL3_Config+0x15c>)
 8006300:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006302:	4b24      	ldr	r3, [pc, #144]	@ (8006394 <RCCEx_PLL3_Config+0x160>)
 8006304:	4013      	ands	r3, r2
 8006306:	687a      	ldr	r2, [r7, #4]
 8006308:	69d2      	ldr	r2, [r2, #28]
 800630a:	00d2      	lsls	r2, r2, #3
 800630c:	4920      	ldr	r1, [pc, #128]	@ (8006390 <RCCEx_PLL3_Config+0x15c>)
 800630e:	4313      	orrs	r3, r2
 8006310:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006312:	4b1f      	ldr	r3, [pc, #124]	@ (8006390 <RCCEx_PLL3_Config+0x15c>)
 8006314:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006316:	4a1e      	ldr	r2, [pc, #120]	@ (8006390 <RCCEx_PLL3_Config+0x15c>)
 8006318:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800631c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d106      	bne.n	8006332 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006324:	4b1a      	ldr	r3, [pc, #104]	@ (8006390 <RCCEx_PLL3_Config+0x15c>)
 8006326:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006328:	4a19      	ldr	r2, [pc, #100]	@ (8006390 <RCCEx_PLL3_Config+0x15c>)
 800632a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800632e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006330:	e00f      	b.n	8006352 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	2b01      	cmp	r3, #1
 8006336:	d106      	bne.n	8006346 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006338:	4b15      	ldr	r3, [pc, #84]	@ (8006390 <RCCEx_PLL3_Config+0x15c>)
 800633a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800633c:	4a14      	ldr	r2, [pc, #80]	@ (8006390 <RCCEx_PLL3_Config+0x15c>)
 800633e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006342:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006344:	e005      	b.n	8006352 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006346:	4b12      	ldr	r3, [pc, #72]	@ (8006390 <RCCEx_PLL3_Config+0x15c>)
 8006348:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800634a:	4a11      	ldr	r2, [pc, #68]	@ (8006390 <RCCEx_PLL3_Config+0x15c>)
 800634c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006350:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006352:	4b0f      	ldr	r3, [pc, #60]	@ (8006390 <RCCEx_PLL3_Config+0x15c>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a0e      	ldr	r2, [pc, #56]	@ (8006390 <RCCEx_PLL3_Config+0x15c>)
 8006358:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800635c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800635e:	f7fb fea1 	bl	80020a4 <HAL_GetTick>
 8006362:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006364:	e008      	b.n	8006378 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006366:	f7fb fe9d 	bl	80020a4 <HAL_GetTick>
 800636a:	4602      	mov	r2, r0
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	1ad3      	subs	r3, r2, r3
 8006370:	2b02      	cmp	r3, #2
 8006372:	d901      	bls.n	8006378 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006374:	2303      	movs	r3, #3
 8006376:	e006      	b.n	8006386 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006378:	4b05      	ldr	r3, [pc, #20]	@ (8006390 <RCCEx_PLL3_Config+0x15c>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006380:	2b00      	cmp	r3, #0
 8006382:	d0f0      	beq.n	8006366 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006384:	7bfb      	ldrb	r3, [r7, #15]
}
 8006386:	4618      	mov	r0, r3
 8006388:	3710      	adds	r7, #16
 800638a:	46bd      	mov	sp, r7
 800638c:	bd80      	pop	{r7, pc}
 800638e:	bf00      	nop
 8006390:	58024400 	.word	0x58024400
 8006394:	ffff0007 	.word	0xffff0007

08006398 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b084      	sub	sp, #16
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d101      	bne.n	80063aa <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80063a6:	2301      	movs	r3, #1
 80063a8:	e092      	b.n	80064d0 <HAL_RNG_Init+0x138>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	7a5b      	ldrb	r3, [r3, #9]
 80063ae:	b2db      	uxtb	r3, r3
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d105      	bne.n	80063c0 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2200      	movs	r2, #0
 80063b8:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f7fb fbcc 	bl	8001b58 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2202      	movs	r2, #2
 80063c4:	725a      	strb	r2, [r3, #9]

#if defined(RNG_CR_CONDRST)
  /* Disable RNG */
  __HAL_RNG_DISABLE(hrng);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	681a      	ldr	r2, [r3, #0]
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f022 0204 	bic.w	r2, r2, #4
 80063d4:	601a      	str	r2, [r3, #0]

  /* Clock Error Detection Configuration when CONDRT bit is set to 1 */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED | RNG_CR_CONDRST, hrng->Init.ClockErrorDetection | RNG_CR_CONDRST);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	681a      	ldr	r2, [r3, #0]
 80063dc:	4b3e      	ldr	r3, [pc, #248]	@ (80064d8 <HAL_RNG_Init+0x140>)
 80063de:	4013      	ands	r3, r2
 80063e0:	687a      	ldr	r2, [r7, #4]
 80063e2:	6852      	ldr	r2, [r2, #4]
 80063e4:	431a      	orrs	r2, r3
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80063ee:	601a      	str	r2, [r3, #0]
#if defined(RNG_VER_3_2) || defined(RNG_VER_3_1) || defined(RNG_VER_3_0)
  /*!< magic number must be written immediately before to RNG_HTCRG */
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCFG_1);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a39      	ldr	r2, [pc, #228]	@ (80064dc <HAL_RNG_Init+0x144>)
 80063f6:	611a      	str	r2, [r3, #16]
  /* Recommended value for NIST compliance, refer to application note AN4230 */
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCFG);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f247 2274 	movw	r2, #29300	@ 0x7274
 8006400:	611a      	str	r2, [r3, #16]
#endif /* RNG_VER_3_2 || RNG_VER_3_1 || RNG_VER_3_0 */

  /* Writing bit CONDRST=0 */
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	681a      	ldr	r2, [r3, #0]
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
 8006410:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006412:	f7fb fe47 	bl	80020a4 <HAL_GetTick>
 8006416:	60f8      	str	r0, [r7, #12]

  /* Wait for conditioning reset process to be completed */
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 8006418:	e016      	b.n	8006448 <HAL_RNG_Init+0xb0>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800641a:	f7fb fe43 	bl	80020a4 <HAL_GetTick>
 800641e:	4602      	mov	r2, r0
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	1ad3      	subs	r3, r2, r3
 8006424:	2b02      	cmp	r3, #2
 8006426:	d90f      	bls.n	8006448 <HAL_RNG_Init+0xb0>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006432:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006436:	d107      	bne.n	8006448 <HAL_RNG_Init+0xb0>
      {
        hrng->State = HAL_RNG_STATE_READY;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2201      	movs	r2, #1
 800643c:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2202      	movs	r2, #2
 8006442:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 8006444:	2301      	movs	r3, #1
 8006446:	e043      	b.n	80064d0 <HAL_RNG_Init+0x138>
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006452:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006456:	d0e0      	beq.n	800641a <HAL_RNG_Init+0x82>
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	681a      	ldr	r2, [r3, #0]
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f042 0204 	orr.w	r2, r2, #4
 8006466:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006472:	2b40      	cmp	r3, #64	@ 0x40
 8006474:	d104      	bne.n	8006480 <HAL_RNG_Init+0xe8>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2204      	movs	r2, #4
 800647a:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 800647c:	2301      	movs	r3, #1
 800647e:	e027      	b.n	80064d0 <HAL_RNG_Init+0x138>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 8006480:	f7fb fe10 	bl	80020a4 <HAL_GetTick>
 8006484:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 8006486:	e015      	b.n	80064b4 <HAL_RNG_Init+0x11c>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8006488:	f7fb fe0c 	bl	80020a4 <HAL_GetTick>
 800648c:	4602      	mov	r2, r0
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	1ad3      	subs	r3, r2, r3
 8006492:	2b02      	cmp	r3, #2
 8006494:	d90e      	bls.n	80064b4 <HAL_RNG_Init+0x11c>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	685b      	ldr	r3, [r3, #4]
 800649c:	f003 0301 	and.w	r3, r3, #1
 80064a0:	2b01      	cmp	r3, #1
 80064a2:	d007      	beq.n	80064b4 <HAL_RNG_Init+0x11c>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2204      	movs	r2, #4
 80064a8:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2202      	movs	r2, #2
 80064ae:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 80064b0:	2301      	movs	r3, #1
 80064b2:	e00d      	b.n	80064d0 <HAL_RNG_Init+0x138>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	f003 0301 	and.w	r3, r3, #1
 80064be:	2b01      	cmp	r3, #1
 80064c0:	d1e2      	bne.n	8006488 <HAL_RNG_Init+0xf0>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2201      	movs	r2, #1
 80064c6:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2200      	movs	r2, #0
 80064cc:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 80064ce:	2300      	movs	r3, #0
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	3710      	adds	r7, #16
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd80      	pop	{r7, pc}
 80064d8:	bfffffdf 	.word	0xbfffffdf
 80064dc:	17590abc 	.word	0x17590abc

080064e0 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b084      	sub	sp, #16
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
 80064e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80064ea:	2300      	movs	r3, #0
 80064ec:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	7a1b      	ldrb	r3, [r3, #8]
 80064f2:	2b01      	cmp	r3, #1
 80064f4:	d101      	bne.n	80064fa <HAL_RNG_GenerateRandomNumber+0x1a>
 80064f6:	2302      	movs	r3, #2
 80064f8:	e068      	b.n	80065cc <HAL_RNG_GenerateRandomNumber+0xec>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2201      	movs	r2, #1
 80064fe:	721a      	strb	r2, [r3, #8]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	7a5b      	ldrb	r3, [r3, #9]
 8006504:	b2db      	uxtb	r3, r3
 8006506:	2b01      	cmp	r3, #1
 8006508:	d157      	bne.n	80065ba <HAL_RNG_GenerateRandomNumber+0xda>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2202      	movs	r2, #2
 800650e:	725a      	strb	r2, [r3, #9]
#if defined(RNG_CR_CONDRST)
    /* Check if there is a seed error */
    if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800651a:	2b40      	cmp	r3, #64	@ 0x40
 800651c:	d10f      	bne.n	800653e <HAL_RNG_GenerateRandomNumber+0x5e>
    {
      /* Update the error code */
      hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2208      	movs	r2, #8
 8006522:	60da      	str	r2, [r3, #12]
      /* Reset from seed error */
      status = RNG_RecoverSeedError(hrng);
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f000 f85f 	bl	80065e8 <RNG_RecoverSeedError>
 800652a:	4603      	mov	r3, r0
 800652c:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_ERROR)
 800652e:	7bfb      	ldrb	r3, [r7, #15]
 8006530:	2b01      	cmp	r3, #1
 8006532:	d104      	bne.n	800653e <HAL_RNG_GenerateRandomNumber+0x5e>
      {
        /* Update the error code */
        hrng->ErrorCode = HAL_RNG_ERROR_RECOVERSEED;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2220      	movs	r2, #32
 8006538:	60da      	str	r2, [r3, #12]
        return status;
 800653a:	7bfb      	ldrb	r3, [r7, #15]
 800653c:	e046      	b.n	80065cc <HAL_RNG_GenerateRandomNumber+0xec>
      }
    }
#endif /* RNG_CR_CONDRST */

    /* Get tick */
    tickstart = HAL_GetTick();
 800653e:	f7fb fdb1 	bl	80020a4 <HAL_GetTick>
 8006542:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8006544:	e018      	b.n	8006578 <HAL_RNG_GenerateRandomNumber+0x98>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8006546:	f7fb fdad 	bl	80020a4 <HAL_GetTick>
 800654a:	4602      	mov	r2, r0
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	1ad3      	subs	r3, r2, r3
 8006550:	2b02      	cmp	r3, #2
 8006552:	d911      	bls.n	8006578 <HAL_RNG_GenerateRandomNumber+0x98>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	685b      	ldr	r3, [r3, #4]
 800655a:	f003 0301 	and.w	r3, r3, #1
 800655e:	2b01      	cmp	r3, #1
 8006560:	d00a      	beq.n	8006578 <HAL_RNG_GenerateRandomNumber+0x98>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2201      	movs	r2, #1
 8006566:	725a      	strb	r2, [r3, #9]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2202      	movs	r2, #2
 800656c:	60da      	str	r2, [r3, #12]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2200      	movs	r2, #0
 8006572:	721a      	strb	r2, [r3, #8]
          return HAL_ERROR;
 8006574:	2301      	movs	r3, #1
 8006576:	e029      	b.n	80065cc <HAL_RNG_GenerateRandomNumber+0xec>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	685b      	ldr	r3, [r3, #4]
 800657e:	f003 0301 	and.w	r3, r3, #1
 8006582:	2b01      	cmp	r3, #1
 8006584:	d1df      	bne.n	8006546 <HAL_RNG_GenerateRandomNumber+0x66>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	689a      	ldr	r2, [r3, #8]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	611a      	str	r2, [r3, #16]
#if defined(RNG_CR_CONDRST)
    /* In case of seed error, the value available in the RNG_DR register must not
       be used as it may not have enough entropy */
    if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	685b      	ldr	r3, [r3, #4]
 8006596:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800659a:	2b40      	cmp	r3, #64	@ 0x40
 800659c:	d105      	bne.n	80065aa <HAL_RNG_GenerateRandomNumber+0xca>
    {
      /* Update the error code and status */
      hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2208      	movs	r2, #8
 80065a2:	60da      	str	r2, [r3, #12]
      status = HAL_ERROR;
 80065a4:	2301      	movs	r3, #1
 80065a6:	73fb      	strb	r3, [r7, #15]
 80065a8:	e003      	b.n	80065b2 <HAL_RNG_GenerateRandomNumber+0xd2>
    }
    else /* No seed error */
    {
      *random32bit = hrng->RandomNumber;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	691a      	ldr	r2, [r3, #16]
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	601a      	str	r2, [r3, #0]
    }
#else
    *random32bit = hrng->RandomNumber;

#endif /* RNG_CR_CONDRST */
    hrng->State = HAL_RNG_STATE_READY;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2201      	movs	r2, #1
 80065b6:	725a      	strb	r2, [r3, #9]
 80065b8:	e004      	b.n	80065c4 <HAL_RNG_GenerateRandomNumber+0xe4>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2204      	movs	r2, #4
 80065be:	60da      	str	r2, [r3, #12]
    status = HAL_ERROR;
 80065c0:	2301      	movs	r3, #1
 80065c2:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2200      	movs	r2, #0
 80065c8:	721a      	strb	r2, [r3, #8]

  return status;
 80065ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	3710      	adds	r7, #16
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd80      	pop	{r7, pc}

080065d4 <HAL_RNG_ErrorCallback>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */
__weak void HAL_RNG_ErrorCallback(RNG_HandleTypeDef *hrng)
{
 80065d4:	b480      	push	{r7}
 80065d6:	b083      	sub	sp, #12
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ErrorCallback must be implemented in the user file.
   */
}
 80065dc:	bf00      	nop
 80065de:	370c      	adds	r7, #12
 80065e0:	46bd      	mov	sp, r7
 80065e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e6:	4770      	bx	lr

080065e8 <RNG_RecoverSeedError>:
  * @brief  RNG sequence to recover from a seed error
  * @param  hrng pointer to a RNG_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef RNG_RecoverSeedError(RNG_HandleTypeDef *hrng)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b084      	sub	sp, #16
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80065f0:	2300      	movs	r3, #0
 80065f2:	60fb      	str	r3, [r7, #12]

  /*Check if seed error current status (SECS)is set */
  if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) == RESET)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	685b      	ldr	r3, [r3, #4]
 80065fa:	f003 0304 	and.w	r3, r3, #4
 80065fe:	2b04      	cmp	r3, #4
 8006600:	d008      	beq.n	8006614 <RNG_RecoverSeedError+0x2c>
  {
    /* RNG performed the reset automatically (auto-reset) */
    /* Clear bit SEIS */
    CLEAR_BIT(hrng->Instance->SR, RNG_IT_SEI);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	685a      	ldr	r2, [r3, #4]
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006610:	605a      	str	r2, [r3, #4]
 8006612:	e05f      	b.n	80066d4 <RNG_RecoverSeedError+0xec>
  }
  else  /* Sequence to fully recover from a seed error*/
  {
    /* Writing bit CONDRST=1*/
    SET_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	681a      	ldr	r2, [r3, #0]
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8006622:	601a      	str	r2, [r3, #0]
    /* Writing bit CONDRST=0*/
    CLEAR_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	681a      	ldr	r2, [r3, #0]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
 8006632:	601a      	str	r2, [r3, #0]

    /* Wait for conditioning reset process to be completed */
    count = RNG_TIMEOUT_VALUE;
 8006634:	2302      	movs	r3, #2
 8006636:	60fb      	str	r3, [r7, #12]
    do
    {
      count-- ;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	3b01      	subs	r3, #1
 800663c:	60fb      	str	r3, [r7, #12]
      if (count == 0U)
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d110      	bne.n	8006666 <RNG_RecoverSeedError+0x7e>
      {
        hrng->State = HAL_RNG_STATE_READY;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2201      	movs	r2, #1
 8006648:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode |= HAL_RNG_ERROR_TIMEOUT;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	68db      	ldr	r3, [r3, #12]
 800664e:	f043 0202 	orr.w	r2, r3, #2
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	60da      	str	r2, [r3, #12]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2200      	movs	r2, #0
 800665a:	721a      	strb	r2, [r3, #8]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
        /* Call registered Error callback */
        hrng->ErrorCallback(hrng);
#else
        /* Call legacy weak Error callback */
        HAL_RNG_ErrorCallback(hrng);
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	f7ff ffb9 	bl	80065d4 <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
        return HAL_ERROR;
 8006662:	2301      	movs	r3, #1
 8006664:	e03d      	b.n	80066e2 <RNG_RecoverSeedError+0xfa>
      }
    } while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST));
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006670:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006674:	d0e0      	beq.n	8006638 <RNG_RecoverSeedError+0x50>

    if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	685b      	ldr	r3, [r3, #4]
 800667c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006680:	2b40      	cmp	r3, #64	@ 0x40
 8006682:	d107      	bne.n	8006694 <RNG_RecoverSeedError+0xac>
    {
      /* Clear bit SEIS */
      CLEAR_BIT(hrng->Instance->SR, RNG_IT_SEI);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	685a      	ldr	r2, [r3, #4]
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006692:	605a      	str	r2, [r3, #4]
    }

    /* Wait for SECS to be cleared */
    count = RNG_TIMEOUT_VALUE;
 8006694:	2302      	movs	r3, #2
 8006696:	60fb      	str	r3, [r7, #12]
    do
    {
      count-- ;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	3b01      	subs	r3, #1
 800669c:	60fb      	str	r3, [r7, #12]
      if (count == 0U)
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d110      	bne.n	80066c6 <RNG_RecoverSeedError+0xde>
      {
        hrng->State = HAL_RNG_STATE_READY;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2201      	movs	r2, #1
 80066a8:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode |= HAL_RNG_ERROR_TIMEOUT;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	68db      	ldr	r3, [r3, #12]
 80066ae:	f043 0202 	orr.w	r2, r3, #2
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	60da      	str	r2, [r3, #12]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2200      	movs	r2, #0
 80066ba:	721a      	strb	r2, [r3, #8]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
        /* Call registered Error callback */
        hrng->ErrorCallback(hrng);
#else
        /* Call legacy weak Error callback */
        HAL_RNG_ErrorCallback(hrng);
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	f7ff ff89 	bl	80065d4 <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
        return HAL_ERROR;
 80066c2:	2301      	movs	r3, #1
 80066c4:	e00d      	b.n	80066e2 <RNG_RecoverSeedError+0xfa>
      }
    } while (HAL_IS_BIT_SET(hrng->Instance->SR, RNG_FLAG_SECS));
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	685b      	ldr	r3, [r3, #4]
 80066cc:	f003 0304 	and.w	r3, r3, #4
 80066d0:	2b04      	cmp	r3, #4
 80066d2:	d0e1      	beq.n	8006698 <RNG_RecoverSeedError+0xb0>
  }
  /* Update the error code */
  hrng->ErrorCode &= ~ HAL_RNG_ERROR_SEED;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	68db      	ldr	r3, [r3, #12]
 80066d8:	f023 0208 	bic.w	r2, r3, #8
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	60da      	str	r2, [r3, #12]
  return HAL_OK;
 80066e0:	2300      	movs	r3, #0
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	3710      	adds	r7, #16
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bd80      	pop	{r7, pc}

080066ea <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80066ea:	b580      	push	{r7, lr}
 80066ec:	b082      	sub	sp, #8
 80066ee:	af00      	add	r7, sp, #0
 80066f0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d101      	bne.n	80066fc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80066f8:	2301      	movs	r3, #1
 80066fa:	e042      	b.n	8006782 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006702:	2b00      	cmp	r3, #0
 8006704:	d106      	bne.n	8006714 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2200      	movs	r2, #0
 800670a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800670e:	6878      	ldr	r0, [r7, #4]
 8006710:	f7fb fa5c 	bl	8001bcc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2224      	movs	r2, #36	@ 0x24
 8006718:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	681a      	ldr	r2, [r3, #0]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f022 0201 	bic.w	r2, r2, #1
 800672a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006730:	2b00      	cmp	r3, #0
 8006732:	d002      	beq.n	800673a <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f000 ff23 	bl	8007580 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f000 f8b4 	bl	80068a8 <UART_SetConfig>
 8006740:	4603      	mov	r3, r0
 8006742:	2b01      	cmp	r3, #1
 8006744:	d101      	bne.n	800674a <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006746:	2301      	movs	r3, #1
 8006748:	e01b      	b.n	8006782 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	685a      	ldr	r2, [r3, #4]
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006758:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	689a      	ldr	r2, [r3, #8]
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006768:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	681a      	ldr	r2, [r3, #0]
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f042 0201 	orr.w	r2, r2, #1
 8006778:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f000 ffa2 	bl	80076c4 <UART_CheckIdleState>
 8006780:	4603      	mov	r3, r0
}
 8006782:	4618      	mov	r0, r3
 8006784:	3708      	adds	r7, #8
 8006786:	46bd      	mov	sp, r7
 8006788:	bd80      	pop	{r7, pc}

0800678a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800678a:	b580      	push	{r7, lr}
 800678c:	b08a      	sub	sp, #40	@ 0x28
 800678e:	af02      	add	r7, sp, #8
 8006790:	60f8      	str	r0, [r7, #12]
 8006792:	60b9      	str	r1, [r7, #8]
 8006794:	603b      	str	r3, [r7, #0]
 8006796:	4613      	mov	r3, r2
 8006798:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067a0:	2b20      	cmp	r3, #32
 80067a2:	d17b      	bne.n	800689c <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d002      	beq.n	80067b0 <HAL_UART_Transmit+0x26>
 80067aa:	88fb      	ldrh	r3, [r7, #6]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d101      	bne.n	80067b4 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80067b0:	2301      	movs	r3, #1
 80067b2:	e074      	b.n	800689e <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	2200      	movs	r2, #0
 80067b8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	2221      	movs	r2, #33	@ 0x21
 80067c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80067c4:	f7fb fc6e 	bl	80020a4 <HAL_GetTick>
 80067c8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	88fa      	ldrh	r2, [r7, #6]
 80067ce:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	88fa      	ldrh	r2, [r7, #6]
 80067d6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	689b      	ldr	r3, [r3, #8]
 80067de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80067e2:	d108      	bne.n	80067f6 <HAL_UART_Transmit+0x6c>
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	691b      	ldr	r3, [r3, #16]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d104      	bne.n	80067f6 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80067ec:	2300      	movs	r3, #0
 80067ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	61bb      	str	r3, [r7, #24]
 80067f4:	e003      	b.n	80067fe <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80067fa:	2300      	movs	r3, #0
 80067fc:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80067fe:	e030      	b.n	8006862 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	9300      	str	r3, [sp, #0]
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	2200      	movs	r2, #0
 8006808:	2180      	movs	r1, #128	@ 0x80
 800680a:	68f8      	ldr	r0, [r7, #12]
 800680c:	f001 f804 	bl	8007818 <UART_WaitOnFlagUntilTimeout>
 8006810:	4603      	mov	r3, r0
 8006812:	2b00      	cmp	r3, #0
 8006814:	d005      	beq.n	8006822 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	2220      	movs	r2, #32
 800681a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800681e:	2303      	movs	r3, #3
 8006820:	e03d      	b.n	800689e <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006822:	69fb      	ldr	r3, [r7, #28]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d10b      	bne.n	8006840 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006828:	69bb      	ldr	r3, [r7, #24]
 800682a:	881b      	ldrh	r3, [r3, #0]
 800682c:	461a      	mov	r2, r3
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006836:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006838:	69bb      	ldr	r3, [r7, #24]
 800683a:	3302      	adds	r3, #2
 800683c:	61bb      	str	r3, [r7, #24]
 800683e:	e007      	b.n	8006850 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006840:	69fb      	ldr	r3, [r7, #28]
 8006842:	781a      	ldrb	r2, [r3, #0]
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800684a:	69fb      	ldr	r3, [r7, #28]
 800684c:	3301      	adds	r3, #1
 800684e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006856:	b29b      	uxth	r3, r3
 8006858:	3b01      	subs	r3, #1
 800685a:	b29a      	uxth	r2, r3
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006868:	b29b      	uxth	r3, r3
 800686a:	2b00      	cmp	r3, #0
 800686c:	d1c8      	bne.n	8006800 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	9300      	str	r3, [sp, #0]
 8006872:	697b      	ldr	r3, [r7, #20]
 8006874:	2200      	movs	r2, #0
 8006876:	2140      	movs	r1, #64	@ 0x40
 8006878:	68f8      	ldr	r0, [r7, #12]
 800687a:	f000 ffcd 	bl	8007818 <UART_WaitOnFlagUntilTimeout>
 800687e:	4603      	mov	r3, r0
 8006880:	2b00      	cmp	r3, #0
 8006882:	d005      	beq.n	8006890 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	2220      	movs	r2, #32
 8006888:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800688c:	2303      	movs	r3, #3
 800688e:	e006      	b.n	800689e <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	2220      	movs	r2, #32
 8006894:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006898:	2300      	movs	r3, #0
 800689a:	e000      	b.n	800689e <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800689c:	2302      	movs	r3, #2
  }
}
 800689e:	4618      	mov	r0, r3
 80068a0:	3720      	adds	r7, #32
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}
	...

080068a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80068a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80068ac:	b092      	sub	sp, #72	@ 0x48
 80068ae:	af00      	add	r7, sp, #0
 80068b0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80068b2:	2300      	movs	r3, #0
 80068b4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80068b8:	697b      	ldr	r3, [r7, #20]
 80068ba:	689a      	ldr	r2, [r3, #8]
 80068bc:	697b      	ldr	r3, [r7, #20]
 80068be:	691b      	ldr	r3, [r3, #16]
 80068c0:	431a      	orrs	r2, r3
 80068c2:	697b      	ldr	r3, [r7, #20]
 80068c4:	695b      	ldr	r3, [r3, #20]
 80068c6:	431a      	orrs	r2, r3
 80068c8:	697b      	ldr	r3, [r7, #20]
 80068ca:	69db      	ldr	r3, [r3, #28]
 80068cc:	4313      	orrs	r3, r2
 80068ce:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80068d0:	697b      	ldr	r3, [r7, #20]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	681a      	ldr	r2, [r3, #0]
 80068d6:	4bbe      	ldr	r3, [pc, #760]	@ (8006bd0 <UART_SetConfig+0x328>)
 80068d8:	4013      	ands	r3, r2
 80068da:	697a      	ldr	r2, [r7, #20]
 80068dc:	6812      	ldr	r2, [r2, #0]
 80068de:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80068e0:	430b      	orrs	r3, r1
 80068e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80068e4:	697b      	ldr	r3, [r7, #20]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	685b      	ldr	r3, [r3, #4]
 80068ea:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80068ee:	697b      	ldr	r3, [r7, #20]
 80068f0:	68da      	ldr	r2, [r3, #12]
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	430a      	orrs	r2, r1
 80068f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80068fa:	697b      	ldr	r3, [r7, #20]
 80068fc:	699b      	ldr	r3, [r3, #24]
 80068fe:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006900:	697b      	ldr	r3, [r7, #20]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4ab3      	ldr	r2, [pc, #716]	@ (8006bd4 <UART_SetConfig+0x32c>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d004      	beq.n	8006914 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800690a:	697b      	ldr	r3, [r7, #20]
 800690c:	6a1b      	ldr	r3, [r3, #32]
 800690e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006910:	4313      	orrs	r3, r2
 8006912:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	689a      	ldr	r2, [r3, #8]
 800691a:	4baf      	ldr	r3, [pc, #700]	@ (8006bd8 <UART_SetConfig+0x330>)
 800691c:	4013      	ands	r3, r2
 800691e:	697a      	ldr	r2, [r7, #20]
 8006920:	6812      	ldr	r2, [r2, #0]
 8006922:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006924:	430b      	orrs	r3, r1
 8006926:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006928:	697b      	ldr	r3, [r7, #20]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800692e:	f023 010f 	bic.w	r1, r3, #15
 8006932:	697b      	ldr	r3, [r7, #20]
 8006934:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	430a      	orrs	r2, r1
 800693c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4aa6      	ldr	r2, [pc, #664]	@ (8006bdc <UART_SetConfig+0x334>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d177      	bne.n	8006a38 <UART_SetConfig+0x190>
 8006948:	4ba5      	ldr	r3, [pc, #660]	@ (8006be0 <UART_SetConfig+0x338>)
 800694a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800694c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006950:	2b28      	cmp	r3, #40	@ 0x28
 8006952:	d86d      	bhi.n	8006a30 <UART_SetConfig+0x188>
 8006954:	a201      	add	r2, pc, #4	@ (adr r2, 800695c <UART_SetConfig+0xb4>)
 8006956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800695a:	bf00      	nop
 800695c:	08006a01 	.word	0x08006a01
 8006960:	08006a31 	.word	0x08006a31
 8006964:	08006a31 	.word	0x08006a31
 8006968:	08006a31 	.word	0x08006a31
 800696c:	08006a31 	.word	0x08006a31
 8006970:	08006a31 	.word	0x08006a31
 8006974:	08006a31 	.word	0x08006a31
 8006978:	08006a31 	.word	0x08006a31
 800697c:	08006a09 	.word	0x08006a09
 8006980:	08006a31 	.word	0x08006a31
 8006984:	08006a31 	.word	0x08006a31
 8006988:	08006a31 	.word	0x08006a31
 800698c:	08006a31 	.word	0x08006a31
 8006990:	08006a31 	.word	0x08006a31
 8006994:	08006a31 	.word	0x08006a31
 8006998:	08006a31 	.word	0x08006a31
 800699c:	08006a11 	.word	0x08006a11
 80069a0:	08006a31 	.word	0x08006a31
 80069a4:	08006a31 	.word	0x08006a31
 80069a8:	08006a31 	.word	0x08006a31
 80069ac:	08006a31 	.word	0x08006a31
 80069b0:	08006a31 	.word	0x08006a31
 80069b4:	08006a31 	.word	0x08006a31
 80069b8:	08006a31 	.word	0x08006a31
 80069bc:	08006a19 	.word	0x08006a19
 80069c0:	08006a31 	.word	0x08006a31
 80069c4:	08006a31 	.word	0x08006a31
 80069c8:	08006a31 	.word	0x08006a31
 80069cc:	08006a31 	.word	0x08006a31
 80069d0:	08006a31 	.word	0x08006a31
 80069d4:	08006a31 	.word	0x08006a31
 80069d8:	08006a31 	.word	0x08006a31
 80069dc:	08006a21 	.word	0x08006a21
 80069e0:	08006a31 	.word	0x08006a31
 80069e4:	08006a31 	.word	0x08006a31
 80069e8:	08006a31 	.word	0x08006a31
 80069ec:	08006a31 	.word	0x08006a31
 80069f0:	08006a31 	.word	0x08006a31
 80069f4:	08006a31 	.word	0x08006a31
 80069f8:	08006a31 	.word	0x08006a31
 80069fc:	08006a29 	.word	0x08006a29
 8006a00:	2301      	movs	r3, #1
 8006a02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a06:	e326      	b.n	8007056 <UART_SetConfig+0x7ae>
 8006a08:	2304      	movs	r3, #4
 8006a0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a0e:	e322      	b.n	8007056 <UART_SetConfig+0x7ae>
 8006a10:	2308      	movs	r3, #8
 8006a12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a16:	e31e      	b.n	8007056 <UART_SetConfig+0x7ae>
 8006a18:	2310      	movs	r3, #16
 8006a1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a1e:	e31a      	b.n	8007056 <UART_SetConfig+0x7ae>
 8006a20:	2320      	movs	r3, #32
 8006a22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a26:	e316      	b.n	8007056 <UART_SetConfig+0x7ae>
 8006a28:	2340      	movs	r3, #64	@ 0x40
 8006a2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a2e:	e312      	b.n	8007056 <UART_SetConfig+0x7ae>
 8006a30:	2380      	movs	r3, #128	@ 0x80
 8006a32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a36:	e30e      	b.n	8007056 <UART_SetConfig+0x7ae>
 8006a38:	697b      	ldr	r3, [r7, #20]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a69      	ldr	r2, [pc, #420]	@ (8006be4 <UART_SetConfig+0x33c>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d130      	bne.n	8006aa4 <UART_SetConfig+0x1fc>
 8006a42:	4b67      	ldr	r3, [pc, #412]	@ (8006be0 <UART_SetConfig+0x338>)
 8006a44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a46:	f003 0307 	and.w	r3, r3, #7
 8006a4a:	2b05      	cmp	r3, #5
 8006a4c:	d826      	bhi.n	8006a9c <UART_SetConfig+0x1f4>
 8006a4e:	a201      	add	r2, pc, #4	@ (adr r2, 8006a54 <UART_SetConfig+0x1ac>)
 8006a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a54:	08006a6d 	.word	0x08006a6d
 8006a58:	08006a75 	.word	0x08006a75
 8006a5c:	08006a7d 	.word	0x08006a7d
 8006a60:	08006a85 	.word	0x08006a85
 8006a64:	08006a8d 	.word	0x08006a8d
 8006a68:	08006a95 	.word	0x08006a95
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a72:	e2f0      	b.n	8007056 <UART_SetConfig+0x7ae>
 8006a74:	2304      	movs	r3, #4
 8006a76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a7a:	e2ec      	b.n	8007056 <UART_SetConfig+0x7ae>
 8006a7c:	2308      	movs	r3, #8
 8006a7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a82:	e2e8      	b.n	8007056 <UART_SetConfig+0x7ae>
 8006a84:	2310      	movs	r3, #16
 8006a86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a8a:	e2e4      	b.n	8007056 <UART_SetConfig+0x7ae>
 8006a8c:	2320      	movs	r3, #32
 8006a8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a92:	e2e0      	b.n	8007056 <UART_SetConfig+0x7ae>
 8006a94:	2340      	movs	r3, #64	@ 0x40
 8006a96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a9a:	e2dc      	b.n	8007056 <UART_SetConfig+0x7ae>
 8006a9c:	2380      	movs	r3, #128	@ 0x80
 8006a9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006aa2:	e2d8      	b.n	8007056 <UART_SetConfig+0x7ae>
 8006aa4:	697b      	ldr	r3, [r7, #20]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4a4f      	ldr	r2, [pc, #316]	@ (8006be8 <UART_SetConfig+0x340>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d130      	bne.n	8006b10 <UART_SetConfig+0x268>
 8006aae:	4b4c      	ldr	r3, [pc, #304]	@ (8006be0 <UART_SetConfig+0x338>)
 8006ab0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ab2:	f003 0307 	and.w	r3, r3, #7
 8006ab6:	2b05      	cmp	r3, #5
 8006ab8:	d826      	bhi.n	8006b08 <UART_SetConfig+0x260>
 8006aba:	a201      	add	r2, pc, #4	@ (adr r2, 8006ac0 <UART_SetConfig+0x218>)
 8006abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ac0:	08006ad9 	.word	0x08006ad9
 8006ac4:	08006ae1 	.word	0x08006ae1
 8006ac8:	08006ae9 	.word	0x08006ae9
 8006acc:	08006af1 	.word	0x08006af1
 8006ad0:	08006af9 	.word	0x08006af9
 8006ad4:	08006b01 	.word	0x08006b01
 8006ad8:	2300      	movs	r3, #0
 8006ada:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ade:	e2ba      	b.n	8007056 <UART_SetConfig+0x7ae>
 8006ae0:	2304      	movs	r3, #4
 8006ae2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ae6:	e2b6      	b.n	8007056 <UART_SetConfig+0x7ae>
 8006ae8:	2308      	movs	r3, #8
 8006aea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006aee:	e2b2      	b.n	8007056 <UART_SetConfig+0x7ae>
 8006af0:	2310      	movs	r3, #16
 8006af2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006af6:	e2ae      	b.n	8007056 <UART_SetConfig+0x7ae>
 8006af8:	2320      	movs	r3, #32
 8006afa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006afe:	e2aa      	b.n	8007056 <UART_SetConfig+0x7ae>
 8006b00:	2340      	movs	r3, #64	@ 0x40
 8006b02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b06:	e2a6      	b.n	8007056 <UART_SetConfig+0x7ae>
 8006b08:	2380      	movs	r3, #128	@ 0x80
 8006b0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b0e:	e2a2      	b.n	8007056 <UART_SetConfig+0x7ae>
 8006b10:	697b      	ldr	r3, [r7, #20]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4a35      	ldr	r2, [pc, #212]	@ (8006bec <UART_SetConfig+0x344>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d130      	bne.n	8006b7c <UART_SetConfig+0x2d4>
 8006b1a:	4b31      	ldr	r3, [pc, #196]	@ (8006be0 <UART_SetConfig+0x338>)
 8006b1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b1e:	f003 0307 	and.w	r3, r3, #7
 8006b22:	2b05      	cmp	r3, #5
 8006b24:	d826      	bhi.n	8006b74 <UART_SetConfig+0x2cc>
 8006b26:	a201      	add	r2, pc, #4	@ (adr r2, 8006b2c <UART_SetConfig+0x284>)
 8006b28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b2c:	08006b45 	.word	0x08006b45
 8006b30:	08006b4d 	.word	0x08006b4d
 8006b34:	08006b55 	.word	0x08006b55
 8006b38:	08006b5d 	.word	0x08006b5d
 8006b3c:	08006b65 	.word	0x08006b65
 8006b40:	08006b6d 	.word	0x08006b6d
 8006b44:	2300      	movs	r3, #0
 8006b46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b4a:	e284      	b.n	8007056 <UART_SetConfig+0x7ae>
 8006b4c:	2304      	movs	r3, #4
 8006b4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b52:	e280      	b.n	8007056 <UART_SetConfig+0x7ae>
 8006b54:	2308      	movs	r3, #8
 8006b56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b5a:	e27c      	b.n	8007056 <UART_SetConfig+0x7ae>
 8006b5c:	2310      	movs	r3, #16
 8006b5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b62:	e278      	b.n	8007056 <UART_SetConfig+0x7ae>
 8006b64:	2320      	movs	r3, #32
 8006b66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b6a:	e274      	b.n	8007056 <UART_SetConfig+0x7ae>
 8006b6c:	2340      	movs	r3, #64	@ 0x40
 8006b6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b72:	e270      	b.n	8007056 <UART_SetConfig+0x7ae>
 8006b74:	2380      	movs	r3, #128	@ 0x80
 8006b76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b7a:	e26c      	b.n	8007056 <UART_SetConfig+0x7ae>
 8006b7c:	697b      	ldr	r3, [r7, #20]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4a1b      	ldr	r2, [pc, #108]	@ (8006bf0 <UART_SetConfig+0x348>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d142      	bne.n	8006c0c <UART_SetConfig+0x364>
 8006b86:	4b16      	ldr	r3, [pc, #88]	@ (8006be0 <UART_SetConfig+0x338>)
 8006b88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b8a:	f003 0307 	and.w	r3, r3, #7
 8006b8e:	2b05      	cmp	r3, #5
 8006b90:	d838      	bhi.n	8006c04 <UART_SetConfig+0x35c>
 8006b92:	a201      	add	r2, pc, #4	@ (adr r2, 8006b98 <UART_SetConfig+0x2f0>)
 8006b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b98:	08006bb1 	.word	0x08006bb1
 8006b9c:	08006bb9 	.word	0x08006bb9
 8006ba0:	08006bc1 	.word	0x08006bc1
 8006ba4:	08006bc9 	.word	0x08006bc9
 8006ba8:	08006bf5 	.word	0x08006bf5
 8006bac:	08006bfd 	.word	0x08006bfd
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006bb6:	e24e      	b.n	8007056 <UART_SetConfig+0x7ae>
 8006bb8:	2304      	movs	r3, #4
 8006bba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006bbe:	e24a      	b.n	8007056 <UART_SetConfig+0x7ae>
 8006bc0:	2308      	movs	r3, #8
 8006bc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006bc6:	e246      	b.n	8007056 <UART_SetConfig+0x7ae>
 8006bc8:	2310      	movs	r3, #16
 8006bca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006bce:	e242      	b.n	8007056 <UART_SetConfig+0x7ae>
 8006bd0:	cfff69f3 	.word	0xcfff69f3
 8006bd4:	58000c00 	.word	0x58000c00
 8006bd8:	11fff4ff 	.word	0x11fff4ff
 8006bdc:	40011000 	.word	0x40011000
 8006be0:	58024400 	.word	0x58024400
 8006be4:	40004400 	.word	0x40004400
 8006be8:	40004800 	.word	0x40004800
 8006bec:	40004c00 	.word	0x40004c00
 8006bf0:	40005000 	.word	0x40005000
 8006bf4:	2320      	movs	r3, #32
 8006bf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006bfa:	e22c      	b.n	8007056 <UART_SetConfig+0x7ae>
 8006bfc:	2340      	movs	r3, #64	@ 0x40
 8006bfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c02:	e228      	b.n	8007056 <UART_SetConfig+0x7ae>
 8006c04:	2380      	movs	r3, #128	@ 0x80
 8006c06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c0a:	e224      	b.n	8007056 <UART_SetConfig+0x7ae>
 8006c0c:	697b      	ldr	r3, [r7, #20]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	4ab1      	ldr	r2, [pc, #708]	@ (8006ed8 <UART_SetConfig+0x630>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d176      	bne.n	8006d04 <UART_SetConfig+0x45c>
 8006c16:	4bb1      	ldr	r3, [pc, #708]	@ (8006edc <UART_SetConfig+0x634>)
 8006c18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c1a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006c1e:	2b28      	cmp	r3, #40	@ 0x28
 8006c20:	d86c      	bhi.n	8006cfc <UART_SetConfig+0x454>
 8006c22:	a201      	add	r2, pc, #4	@ (adr r2, 8006c28 <UART_SetConfig+0x380>)
 8006c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c28:	08006ccd 	.word	0x08006ccd
 8006c2c:	08006cfd 	.word	0x08006cfd
 8006c30:	08006cfd 	.word	0x08006cfd
 8006c34:	08006cfd 	.word	0x08006cfd
 8006c38:	08006cfd 	.word	0x08006cfd
 8006c3c:	08006cfd 	.word	0x08006cfd
 8006c40:	08006cfd 	.word	0x08006cfd
 8006c44:	08006cfd 	.word	0x08006cfd
 8006c48:	08006cd5 	.word	0x08006cd5
 8006c4c:	08006cfd 	.word	0x08006cfd
 8006c50:	08006cfd 	.word	0x08006cfd
 8006c54:	08006cfd 	.word	0x08006cfd
 8006c58:	08006cfd 	.word	0x08006cfd
 8006c5c:	08006cfd 	.word	0x08006cfd
 8006c60:	08006cfd 	.word	0x08006cfd
 8006c64:	08006cfd 	.word	0x08006cfd
 8006c68:	08006cdd 	.word	0x08006cdd
 8006c6c:	08006cfd 	.word	0x08006cfd
 8006c70:	08006cfd 	.word	0x08006cfd
 8006c74:	08006cfd 	.word	0x08006cfd
 8006c78:	08006cfd 	.word	0x08006cfd
 8006c7c:	08006cfd 	.word	0x08006cfd
 8006c80:	08006cfd 	.word	0x08006cfd
 8006c84:	08006cfd 	.word	0x08006cfd
 8006c88:	08006ce5 	.word	0x08006ce5
 8006c8c:	08006cfd 	.word	0x08006cfd
 8006c90:	08006cfd 	.word	0x08006cfd
 8006c94:	08006cfd 	.word	0x08006cfd
 8006c98:	08006cfd 	.word	0x08006cfd
 8006c9c:	08006cfd 	.word	0x08006cfd
 8006ca0:	08006cfd 	.word	0x08006cfd
 8006ca4:	08006cfd 	.word	0x08006cfd
 8006ca8:	08006ced 	.word	0x08006ced
 8006cac:	08006cfd 	.word	0x08006cfd
 8006cb0:	08006cfd 	.word	0x08006cfd
 8006cb4:	08006cfd 	.word	0x08006cfd
 8006cb8:	08006cfd 	.word	0x08006cfd
 8006cbc:	08006cfd 	.word	0x08006cfd
 8006cc0:	08006cfd 	.word	0x08006cfd
 8006cc4:	08006cfd 	.word	0x08006cfd
 8006cc8:	08006cf5 	.word	0x08006cf5
 8006ccc:	2301      	movs	r3, #1
 8006cce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cd2:	e1c0      	b.n	8007056 <UART_SetConfig+0x7ae>
 8006cd4:	2304      	movs	r3, #4
 8006cd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cda:	e1bc      	b.n	8007056 <UART_SetConfig+0x7ae>
 8006cdc:	2308      	movs	r3, #8
 8006cde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ce2:	e1b8      	b.n	8007056 <UART_SetConfig+0x7ae>
 8006ce4:	2310      	movs	r3, #16
 8006ce6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cea:	e1b4      	b.n	8007056 <UART_SetConfig+0x7ae>
 8006cec:	2320      	movs	r3, #32
 8006cee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cf2:	e1b0      	b.n	8007056 <UART_SetConfig+0x7ae>
 8006cf4:	2340      	movs	r3, #64	@ 0x40
 8006cf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cfa:	e1ac      	b.n	8007056 <UART_SetConfig+0x7ae>
 8006cfc:	2380      	movs	r3, #128	@ 0x80
 8006cfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d02:	e1a8      	b.n	8007056 <UART_SetConfig+0x7ae>
 8006d04:	697b      	ldr	r3, [r7, #20]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	4a75      	ldr	r2, [pc, #468]	@ (8006ee0 <UART_SetConfig+0x638>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d130      	bne.n	8006d70 <UART_SetConfig+0x4c8>
 8006d0e:	4b73      	ldr	r3, [pc, #460]	@ (8006edc <UART_SetConfig+0x634>)
 8006d10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d12:	f003 0307 	and.w	r3, r3, #7
 8006d16:	2b05      	cmp	r3, #5
 8006d18:	d826      	bhi.n	8006d68 <UART_SetConfig+0x4c0>
 8006d1a:	a201      	add	r2, pc, #4	@ (adr r2, 8006d20 <UART_SetConfig+0x478>)
 8006d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d20:	08006d39 	.word	0x08006d39
 8006d24:	08006d41 	.word	0x08006d41
 8006d28:	08006d49 	.word	0x08006d49
 8006d2c:	08006d51 	.word	0x08006d51
 8006d30:	08006d59 	.word	0x08006d59
 8006d34:	08006d61 	.word	0x08006d61
 8006d38:	2300      	movs	r3, #0
 8006d3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d3e:	e18a      	b.n	8007056 <UART_SetConfig+0x7ae>
 8006d40:	2304      	movs	r3, #4
 8006d42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d46:	e186      	b.n	8007056 <UART_SetConfig+0x7ae>
 8006d48:	2308      	movs	r3, #8
 8006d4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d4e:	e182      	b.n	8007056 <UART_SetConfig+0x7ae>
 8006d50:	2310      	movs	r3, #16
 8006d52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d56:	e17e      	b.n	8007056 <UART_SetConfig+0x7ae>
 8006d58:	2320      	movs	r3, #32
 8006d5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d5e:	e17a      	b.n	8007056 <UART_SetConfig+0x7ae>
 8006d60:	2340      	movs	r3, #64	@ 0x40
 8006d62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d66:	e176      	b.n	8007056 <UART_SetConfig+0x7ae>
 8006d68:	2380      	movs	r3, #128	@ 0x80
 8006d6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d6e:	e172      	b.n	8007056 <UART_SetConfig+0x7ae>
 8006d70:	697b      	ldr	r3, [r7, #20]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	4a5b      	ldr	r2, [pc, #364]	@ (8006ee4 <UART_SetConfig+0x63c>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d130      	bne.n	8006ddc <UART_SetConfig+0x534>
 8006d7a:	4b58      	ldr	r3, [pc, #352]	@ (8006edc <UART_SetConfig+0x634>)
 8006d7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d7e:	f003 0307 	and.w	r3, r3, #7
 8006d82:	2b05      	cmp	r3, #5
 8006d84:	d826      	bhi.n	8006dd4 <UART_SetConfig+0x52c>
 8006d86:	a201      	add	r2, pc, #4	@ (adr r2, 8006d8c <UART_SetConfig+0x4e4>)
 8006d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d8c:	08006da5 	.word	0x08006da5
 8006d90:	08006dad 	.word	0x08006dad
 8006d94:	08006db5 	.word	0x08006db5
 8006d98:	08006dbd 	.word	0x08006dbd
 8006d9c:	08006dc5 	.word	0x08006dc5
 8006da0:	08006dcd 	.word	0x08006dcd
 8006da4:	2300      	movs	r3, #0
 8006da6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006daa:	e154      	b.n	8007056 <UART_SetConfig+0x7ae>
 8006dac:	2304      	movs	r3, #4
 8006dae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006db2:	e150      	b.n	8007056 <UART_SetConfig+0x7ae>
 8006db4:	2308      	movs	r3, #8
 8006db6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006dba:	e14c      	b.n	8007056 <UART_SetConfig+0x7ae>
 8006dbc:	2310      	movs	r3, #16
 8006dbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006dc2:	e148      	b.n	8007056 <UART_SetConfig+0x7ae>
 8006dc4:	2320      	movs	r3, #32
 8006dc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006dca:	e144      	b.n	8007056 <UART_SetConfig+0x7ae>
 8006dcc:	2340      	movs	r3, #64	@ 0x40
 8006dce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006dd2:	e140      	b.n	8007056 <UART_SetConfig+0x7ae>
 8006dd4:	2380      	movs	r3, #128	@ 0x80
 8006dd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006dda:	e13c      	b.n	8007056 <UART_SetConfig+0x7ae>
 8006ddc:	697b      	ldr	r3, [r7, #20]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4a41      	ldr	r2, [pc, #260]	@ (8006ee8 <UART_SetConfig+0x640>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	f040 8082 	bne.w	8006eec <UART_SetConfig+0x644>
 8006de8:	4b3c      	ldr	r3, [pc, #240]	@ (8006edc <UART_SetConfig+0x634>)
 8006dea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006dec:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006df0:	2b28      	cmp	r3, #40	@ 0x28
 8006df2:	d86d      	bhi.n	8006ed0 <UART_SetConfig+0x628>
 8006df4:	a201      	add	r2, pc, #4	@ (adr r2, 8006dfc <UART_SetConfig+0x554>)
 8006df6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dfa:	bf00      	nop
 8006dfc:	08006ea1 	.word	0x08006ea1
 8006e00:	08006ed1 	.word	0x08006ed1
 8006e04:	08006ed1 	.word	0x08006ed1
 8006e08:	08006ed1 	.word	0x08006ed1
 8006e0c:	08006ed1 	.word	0x08006ed1
 8006e10:	08006ed1 	.word	0x08006ed1
 8006e14:	08006ed1 	.word	0x08006ed1
 8006e18:	08006ed1 	.word	0x08006ed1
 8006e1c:	08006ea9 	.word	0x08006ea9
 8006e20:	08006ed1 	.word	0x08006ed1
 8006e24:	08006ed1 	.word	0x08006ed1
 8006e28:	08006ed1 	.word	0x08006ed1
 8006e2c:	08006ed1 	.word	0x08006ed1
 8006e30:	08006ed1 	.word	0x08006ed1
 8006e34:	08006ed1 	.word	0x08006ed1
 8006e38:	08006ed1 	.word	0x08006ed1
 8006e3c:	08006eb1 	.word	0x08006eb1
 8006e40:	08006ed1 	.word	0x08006ed1
 8006e44:	08006ed1 	.word	0x08006ed1
 8006e48:	08006ed1 	.word	0x08006ed1
 8006e4c:	08006ed1 	.word	0x08006ed1
 8006e50:	08006ed1 	.word	0x08006ed1
 8006e54:	08006ed1 	.word	0x08006ed1
 8006e58:	08006ed1 	.word	0x08006ed1
 8006e5c:	08006eb9 	.word	0x08006eb9
 8006e60:	08006ed1 	.word	0x08006ed1
 8006e64:	08006ed1 	.word	0x08006ed1
 8006e68:	08006ed1 	.word	0x08006ed1
 8006e6c:	08006ed1 	.word	0x08006ed1
 8006e70:	08006ed1 	.word	0x08006ed1
 8006e74:	08006ed1 	.word	0x08006ed1
 8006e78:	08006ed1 	.word	0x08006ed1
 8006e7c:	08006ec1 	.word	0x08006ec1
 8006e80:	08006ed1 	.word	0x08006ed1
 8006e84:	08006ed1 	.word	0x08006ed1
 8006e88:	08006ed1 	.word	0x08006ed1
 8006e8c:	08006ed1 	.word	0x08006ed1
 8006e90:	08006ed1 	.word	0x08006ed1
 8006e94:	08006ed1 	.word	0x08006ed1
 8006e98:	08006ed1 	.word	0x08006ed1
 8006e9c:	08006ec9 	.word	0x08006ec9
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ea6:	e0d6      	b.n	8007056 <UART_SetConfig+0x7ae>
 8006ea8:	2304      	movs	r3, #4
 8006eaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006eae:	e0d2      	b.n	8007056 <UART_SetConfig+0x7ae>
 8006eb0:	2308      	movs	r3, #8
 8006eb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006eb6:	e0ce      	b.n	8007056 <UART_SetConfig+0x7ae>
 8006eb8:	2310      	movs	r3, #16
 8006eba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ebe:	e0ca      	b.n	8007056 <UART_SetConfig+0x7ae>
 8006ec0:	2320      	movs	r3, #32
 8006ec2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ec6:	e0c6      	b.n	8007056 <UART_SetConfig+0x7ae>
 8006ec8:	2340      	movs	r3, #64	@ 0x40
 8006eca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ece:	e0c2      	b.n	8007056 <UART_SetConfig+0x7ae>
 8006ed0:	2380      	movs	r3, #128	@ 0x80
 8006ed2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ed6:	e0be      	b.n	8007056 <UART_SetConfig+0x7ae>
 8006ed8:	40011400 	.word	0x40011400
 8006edc:	58024400 	.word	0x58024400
 8006ee0:	40007800 	.word	0x40007800
 8006ee4:	40007c00 	.word	0x40007c00
 8006ee8:	40011800 	.word	0x40011800
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4aad      	ldr	r2, [pc, #692]	@ (80071a8 <UART_SetConfig+0x900>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d176      	bne.n	8006fe4 <UART_SetConfig+0x73c>
 8006ef6:	4bad      	ldr	r3, [pc, #692]	@ (80071ac <UART_SetConfig+0x904>)
 8006ef8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006efa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006efe:	2b28      	cmp	r3, #40	@ 0x28
 8006f00:	d86c      	bhi.n	8006fdc <UART_SetConfig+0x734>
 8006f02:	a201      	add	r2, pc, #4	@ (adr r2, 8006f08 <UART_SetConfig+0x660>)
 8006f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f08:	08006fad 	.word	0x08006fad
 8006f0c:	08006fdd 	.word	0x08006fdd
 8006f10:	08006fdd 	.word	0x08006fdd
 8006f14:	08006fdd 	.word	0x08006fdd
 8006f18:	08006fdd 	.word	0x08006fdd
 8006f1c:	08006fdd 	.word	0x08006fdd
 8006f20:	08006fdd 	.word	0x08006fdd
 8006f24:	08006fdd 	.word	0x08006fdd
 8006f28:	08006fb5 	.word	0x08006fb5
 8006f2c:	08006fdd 	.word	0x08006fdd
 8006f30:	08006fdd 	.word	0x08006fdd
 8006f34:	08006fdd 	.word	0x08006fdd
 8006f38:	08006fdd 	.word	0x08006fdd
 8006f3c:	08006fdd 	.word	0x08006fdd
 8006f40:	08006fdd 	.word	0x08006fdd
 8006f44:	08006fdd 	.word	0x08006fdd
 8006f48:	08006fbd 	.word	0x08006fbd
 8006f4c:	08006fdd 	.word	0x08006fdd
 8006f50:	08006fdd 	.word	0x08006fdd
 8006f54:	08006fdd 	.word	0x08006fdd
 8006f58:	08006fdd 	.word	0x08006fdd
 8006f5c:	08006fdd 	.word	0x08006fdd
 8006f60:	08006fdd 	.word	0x08006fdd
 8006f64:	08006fdd 	.word	0x08006fdd
 8006f68:	08006fc5 	.word	0x08006fc5
 8006f6c:	08006fdd 	.word	0x08006fdd
 8006f70:	08006fdd 	.word	0x08006fdd
 8006f74:	08006fdd 	.word	0x08006fdd
 8006f78:	08006fdd 	.word	0x08006fdd
 8006f7c:	08006fdd 	.word	0x08006fdd
 8006f80:	08006fdd 	.word	0x08006fdd
 8006f84:	08006fdd 	.word	0x08006fdd
 8006f88:	08006fcd 	.word	0x08006fcd
 8006f8c:	08006fdd 	.word	0x08006fdd
 8006f90:	08006fdd 	.word	0x08006fdd
 8006f94:	08006fdd 	.word	0x08006fdd
 8006f98:	08006fdd 	.word	0x08006fdd
 8006f9c:	08006fdd 	.word	0x08006fdd
 8006fa0:	08006fdd 	.word	0x08006fdd
 8006fa4:	08006fdd 	.word	0x08006fdd
 8006fa8:	08006fd5 	.word	0x08006fd5
 8006fac:	2301      	movs	r3, #1
 8006fae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006fb2:	e050      	b.n	8007056 <UART_SetConfig+0x7ae>
 8006fb4:	2304      	movs	r3, #4
 8006fb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006fba:	e04c      	b.n	8007056 <UART_SetConfig+0x7ae>
 8006fbc:	2308      	movs	r3, #8
 8006fbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006fc2:	e048      	b.n	8007056 <UART_SetConfig+0x7ae>
 8006fc4:	2310      	movs	r3, #16
 8006fc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006fca:	e044      	b.n	8007056 <UART_SetConfig+0x7ae>
 8006fcc:	2320      	movs	r3, #32
 8006fce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006fd2:	e040      	b.n	8007056 <UART_SetConfig+0x7ae>
 8006fd4:	2340      	movs	r3, #64	@ 0x40
 8006fd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006fda:	e03c      	b.n	8007056 <UART_SetConfig+0x7ae>
 8006fdc:	2380      	movs	r3, #128	@ 0x80
 8006fde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006fe2:	e038      	b.n	8007056 <UART_SetConfig+0x7ae>
 8006fe4:	697b      	ldr	r3, [r7, #20]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4a71      	ldr	r2, [pc, #452]	@ (80071b0 <UART_SetConfig+0x908>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d130      	bne.n	8007050 <UART_SetConfig+0x7a8>
 8006fee:	4b6f      	ldr	r3, [pc, #444]	@ (80071ac <UART_SetConfig+0x904>)
 8006ff0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ff2:	f003 0307 	and.w	r3, r3, #7
 8006ff6:	2b05      	cmp	r3, #5
 8006ff8:	d826      	bhi.n	8007048 <UART_SetConfig+0x7a0>
 8006ffa:	a201      	add	r2, pc, #4	@ (adr r2, 8007000 <UART_SetConfig+0x758>)
 8006ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007000:	08007019 	.word	0x08007019
 8007004:	08007021 	.word	0x08007021
 8007008:	08007029 	.word	0x08007029
 800700c:	08007031 	.word	0x08007031
 8007010:	08007039 	.word	0x08007039
 8007014:	08007041 	.word	0x08007041
 8007018:	2302      	movs	r3, #2
 800701a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800701e:	e01a      	b.n	8007056 <UART_SetConfig+0x7ae>
 8007020:	2304      	movs	r3, #4
 8007022:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007026:	e016      	b.n	8007056 <UART_SetConfig+0x7ae>
 8007028:	2308      	movs	r3, #8
 800702a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800702e:	e012      	b.n	8007056 <UART_SetConfig+0x7ae>
 8007030:	2310      	movs	r3, #16
 8007032:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007036:	e00e      	b.n	8007056 <UART_SetConfig+0x7ae>
 8007038:	2320      	movs	r3, #32
 800703a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800703e:	e00a      	b.n	8007056 <UART_SetConfig+0x7ae>
 8007040:	2340      	movs	r3, #64	@ 0x40
 8007042:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007046:	e006      	b.n	8007056 <UART_SetConfig+0x7ae>
 8007048:	2380      	movs	r3, #128	@ 0x80
 800704a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800704e:	e002      	b.n	8007056 <UART_SetConfig+0x7ae>
 8007050:	2380      	movs	r3, #128	@ 0x80
 8007052:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007056:	697b      	ldr	r3, [r7, #20]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	4a55      	ldr	r2, [pc, #340]	@ (80071b0 <UART_SetConfig+0x908>)
 800705c:	4293      	cmp	r3, r2
 800705e:	f040 80f8 	bne.w	8007252 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007062:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007066:	2b20      	cmp	r3, #32
 8007068:	dc46      	bgt.n	80070f8 <UART_SetConfig+0x850>
 800706a:	2b02      	cmp	r3, #2
 800706c:	db75      	blt.n	800715a <UART_SetConfig+0x8b2>
 800706e:	3b02      	subs	r3, #2
 8007070:	2b1e      	cmp	r3, #30
 8007072:	d872      	bhi.n	800715a <UART_SetConfig+0x8b2>
 8007074:	a201      	add	r2, pc, #4	@ (adr r2, 800707c <UART_SetConfig+0x7d4>)
 8007076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800707a:	bf00      	nop
 800707c:	080070ff 	.word	0x080070ff
 8007080:	0800715b 	.word	0x0800715b
 8007084:	08007107 	.word	0x08007107
 8007088:	0800715b 	.word	0x0800715b
 800708c:	0800715b 	.word	0x0800715b
 8007090:	0800715b 	.word	0x0800715b
 8007094:	08007117 	.word	0x08007117
 8007098:	0800715b 	.word	0x0800715b
 800709c:	0800715b 	.word	0x0800715b
 80070a0:	0800715b 	.word	0x0800715b
 80070a4:	0800715b 	.word	0x0800715b
 80070a8:	0800715b 	.word	0x0800715b
 80070ac:	0800715b 	.word	0x0800715b
 80070b0:	0800715b 	.word	0x0800715b
 80070b4:	08007127 	.word	0x08007127
 80070b8:	0800715b 	.word	0x0800715b
 80070bc:	0800715b 	.word	0x0800715b
 80070c0:	0800715b 	.word	0x0800715b
 80070c4:	0800715b 	.word	0x0800715b
 80070c8:	0800715b 	.word	0x0800715b
 80070cc:	0800715b 	.word	0x0800715b
 80070d0:	0800715b 	.word	0x0800715b
 80070d4:	0800715b 	.word	0x0800715b
 80070d8:	0800715b 	.word	0x0800715b
 80070dc:	0800715b 	.word	0x0800715b
 80070e0:	0800715b 	.word	0x0800715b
 80070e4:	0800715b 	.word	0x0800715b
 80070e8:	0800715b 	.word	0x0800715b
 80070ec:	0800715b 	.word	0x0800715b
 80070f0:	0800715b 	.word	0x0800715b
 80070f4:	0800714d 	.word	0x0800714d
 80070f8:	2b40      	cmp	r3, #64	@ 0x40
 80070fa:	d02a      	beq.n	8007152 <UART_SetConfig+0x8aa>
 80070fc:	e02d      	b.n	800715a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80070fe:	f7fe fd29 	bl	8005b54 <HAL_RCCEx_GetD3PCLK1Freq>
 8007102:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007104:	e02f      	b.n	8007166 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007106:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800710a:	4618      	mov	r0, r3
 800710c:	f7fe fd38 	bl	8005b80 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007110:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007112:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007114:	e027      	b.n	8007166 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007116:	f107 0318 	add.w	r3, r7, #24
 800711a:	4618      	mov	r0, r3
 800711c:	f7fe fe84 	bl	8005e28 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007120:	69fb      	ldr	r3, [r7, #28]
 8007122:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007124:	e01f      	b.n	8007166 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007126:	4b21      	ldr	r3, [pc, #132]	@ (80071ac <UART_SetConfig+0x904>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f003 0320 	and.w	r3, r3, #32
 800712e:	2b00      	cmp	r3, #0
 8007130:	d009      	beq.n	8007146 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007132:	4b1e      	ldr	r3, [pc, #120]	@ (80071ac <UART_SetConfig+0x904>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	08db      	lsrs	r3, r3, #3
 8007138:	f003 0303 	and.w	r3, r3, #3
 800713c:	4a1d      	ldr	r2, [pc, #116]	@ (80071b4 <UART_SetConfig+0x90c>)
 800713e:	fa22 f303 	lsr.w	r3, r2, r3
 8007142:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007144:	e00f      	b.n	8007166 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007146:	4b1b      	ldr	r3, [pc, #108]	@ (80071b4 <UART_SetConfig+0x90c>)
 8007148:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800714a:	e00c      	b.n	8007166 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800714c:	4b1a      	ldr	r3, [pc, #104]	@ (80071b8 <UART_SetConfig+0x910>)
 800714e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007150:	e009      	b.n	8007166 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007152:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007156:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007158:	e005      	b.n	8007166 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800715a:	2300      	movs	r3, #0
 800715c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800715e:	2301      	movs	r3, #1
 8007160:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007164:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007166:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007168:	2b00      	cmp	r3, #0
 800716a:	f000 81ee 	beq.w	800754a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007172:	4a12      	ldr	r2, [pc, #72]	@ (80071bc <UART_SetConfig+0x914>)
 8007174:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007178:	461a      	mov	r2, r3
 800717a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800717c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007180:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007182:	697b      	ldr	r3, [r7, #20]
 8007184:	685a      	ldr	r2, [r3, #4]
 8007186:	4613      	mov	r3, r2
 8007188:	005b      	lsls	r3, r3, #1
 800718a:	4413      	add	r3, r2
 800718c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800718e:	429a      	cmp	r2, r3
 8007190:	d305      	bcc.n	800719e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007192:	697b      	ldr	r3, [r7, #20]
 8007194:	685b      	ldr	r3, [r3, #4]
 8007196:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007198:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800719a:	429a      	cmp	r2, r3
 800719c:	d910      	bls.n	80071c0 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800719e:	2301      	movs	r3, #1
 80071a0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80071a4:	e1d1      	b.n	800754a <UART_SetConfig+0xca2>
 80071a6:	bf00      	nop
 80071a8:	40011c00 	.word	0x40011c00
 80071ac:	58024400 	.word	0x58024400
 80071b0:	58000c00 	.word	0x58000c00
 80071b4:	03d09000 	.word	0x03d09000
 80071b8:	003d0900 	.word	0x003d0900
 80071bc:	0802d350 	.word	0x0802d350
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80071c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80071c2:	2200      	movs	r2, #0
 80071c4:	60bb      	str	r3, [r7, #8]
 80071c6:	60fa      	str	r2, [r7, #12]
 80071c8:	697b      	ldr	r3, [r7, #20]
 80071ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071cc:	4ac0      	ldr	r2, [pc, #768]	@ (80074d0 <UART_SetConfig+0xc28>)
 80071ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80071d2:	b29b      	uxth	r3, r3
 80071d4:	2200      	movs	r2, #0
 80071d6:	603b      	str	r3, [r7, #0]
 80071d8:	607a      	str	r2, [r7, #4]
 80071da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80071de:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80071e2:	f7f9 fab9 	bl	8000758 <__aeabi_uldivmod>
 80071e6:	4602      	mov	r2, r0
 80071e8:	460b      	mov	r3, r1
 80071ea:	4610      	mov	r0, r2
 80071ec:	4619      	mov	r1, r3
 80071ee:	f04f 0200 	mov.w	r2, #0
 80071f2:	f04f 0300 	mov.w	r3, #0
 80071f6:	020b      	lsls	r3, r1, #8
 80071f8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80071fc:	0202      	lsls	r2, r0, #8
 80071fe:	6979      	ldr	r1, [r7, #20]
 8007200:	6849      	ldr	r1, [r1, #4]
 8007202:	0849      	lsrs	r1, r1, #1
 8007204:	2000      	movs	r0, #0
 8007206:	460c      	mov	r4, r1
 8007208:	4605      	mov	r5, r0
 800720a:	eb12 0804 	adds.w	r8, r2, r4
 800720e:	eb43 0905 	adc.w	r9, r3, r5
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	685b      	ldr	r3, [r3, #4]
 8007216:	2200      	movs	r2, #0
 8007218:	469a      	mov	sl, r3
 800721a:	4693      	mov	fp, r2
 800721c:	4652      	mov	r2, sl
 800721e:	465b      	mov	r3, fp
 8007220:	4640      	mov	r0, r8
 8007222:	4649      	mov	r1, r9
 8007224:	f7f9 fa98 	bl	8000758 <__aeabi_uldivmod>
 8007228:	4602      	mov	r2, r0
 800722a:	460b      	mov	r3, r1
 800722c:	4613      	mov	r3, r2
 800722e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007230:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007232:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007236:	d308      	bcc.n	800724a <UART_SetConfig+0x9a2>
 8007238:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800723a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800723e:	d204      	bcs.n	800724a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8007240:	697b      	ldr	r3, [r7, #20]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007246:	60da      	str	r2, [r3, #12]
 8007248:	e17f      	b.n	800754a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800724a:	2301      	movs	r3, #1
 800724c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007250:	e17b      	b.n	800754a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007252:	697b      	ldr	r3, [r7, #20]
 8007254:	69db      	ldr	r3, [r3, #28]
 8007256:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800725a:	f040 80bd 	bne.w	80073d8 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800725e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007262:	2b20      	cmp	r3, #32
 8007264:	dc48      	bgt.n	80072f8 <UART_SetConfig+0xa50>
 8007266:	2b00      	cmp	r3, #0
 8007268:	db7b      	blt.n	8007362 <UART_SetConfig+0xaba>
 800726a:	2b20      	cmp	r3, #32
 800726c:	d879      	bhi.n	8007362 <UART_SetConfig+0xaba>
 800726e:	a201      	add	r2, pc, #4	@ (adr r2, 8007274 <UART_SetConfig+0x9cc>)
 8007270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007274:	080072ff 	.word	0x080072ff
 8007278:	08007307 	.word	0x08007307
 800727c:	08007363 	.word	0x08007363
 8007280:	08007363 	.word	0x08007363
 8007284:	0800730f 	.word	0x0800730f
 8007288:	08007363 	.word	0x08007363
 800728c:	08007363 	.word	0x08007363
 8007290:	08007363 	.word	0x08007363
 8007294:	0800731f 	.word	0x0800731f
 8007298:	08007363 	.word	0x08007363
 800729c:	08007363 	.word	0x08007363
 80072a0:	08007363 	.word	0x08007363
 80072a4:	08007363 	.word	0x08007363
 80072a8:	08007363 	.word	0x08007363
 80072ac:	08007363 	.word	0x08007363
 80072b0:	08007363 	.word	0x08007363
 80072b4:	0800732f 	.word	0x0800732f
 80072b8:	08007363 	.word	0x08007363
 80072bc:	08007363 	.word	0x08007363
 80072c0:	08007363 	.word	0x08007363
 80072c4:	08007363 	.word	0x08007363
 80072c8:	08007363 	.word	0x08007363
 80072cc:	08007363 	.word	0x08007363
 80072d0:	08007363 	.word	0x08007363
 80072d4:	08007363 	.word	0x08007363
 80072d8:	08007363 	.word	0x08007363
 80072dc:	08007363 	.word	0x08007363
 80072e0:	08007363 	.word	0x08007363
 80072e4:	08007363 	.word	0x08007363
 80072e8:	08007363 	.word	0x08007363
 80072ec:	08007363 	.word	0x08007363
 80072f0:	08007363 	.word	0x08007363
 80072f4:	08007355 	.word	0x08007355
 80072f8:	2b40      	cmp	r3, #64	@ 0x40
 80072fa:	d02e      	beq.n	800735a <UART_SetConfig+0xab2>
 80072fc:	e031      	b.n	8007362 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80072fe:	f7fd fa5d 	bl	80047bc <HAL_RCC_GetPCLK1Freq>
 8007302:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007304:	e033      	b.n	800736e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007306:	f7fd fa6f 	bl	80047e8 <HAL_RCC_GetPCLK2Freq>
 800730a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800730c:	e02f      	b.n	800736e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800730e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007312:	4618      	mov	r0, r3
 8007314:	f7fe fc34 	bl	8005b80 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007318:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800731a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800731c:	e027      	b.n	800736e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800731e:	f107 0318 	add.w	r3, r7, #24
 8007322:	4618      	mov	r0, r3
 8007324:	f7fe fd80 	bl	8005e28 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007328:	69fb      	ldr	r3, [r7, #28]
 800732a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800732c:	e01f      	b.n	800736e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800732e:	4b69      	ldr	r3, [pc, #420]	@ (80074d4 <UART_SetConfig+0xc2c>)
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f003 0320 	and.w	r3, r3, #32
 8007336:	2b00      	cmp	r3, #0
 8007338:	d009      	beq.n	800734e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800733a:	4b66      	ldr	r3, [pc, #408]	@ (80074d4 <UART_SetConfig+0xc2c>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	08db      	lsrs	r3, r3, #3
 8007340:	f003 0303 	and.w	r3, r3, #3
 8007344:	4a64      	ldr	r2, [pc, #400]	@ (80074d8 <UART_SetConfig+0xc30>)
 8007346:	fa22 f303 	lsr.w	r3, r2, r3
 800734a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800734c:	e00f      	b.n	800736e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800734e:	4b62      	ldr	r3, [pc, #392]	@ (80074d8 <UART_SetConfig+0xc30>)
 8007350:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007352:	e00c      	b.n	800736e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007354:	4b61      	ldr	r3, [pc, #388]	@ (80074dc <UART_SetConfig+0xc34>)
 8007356:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007358:	e009      	b.n	800736e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800735a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800735e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007360:	e005      	b.n	800736e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8007362:	2300      	movs	r3, #0
 8007364:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007366:	2301      	movs	r3, #1
 8007368:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800736c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800736e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007370:	2b00      	cmp	r3, #0
 8007372:	f000 80ea 	beq.w	800754a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800737a:	4a55      	ldr	r2, [pc, #340]	@ (80074d0 <UART_SetConfig+0xc28>)
 800737c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007380:	461a      	mov	r2, r3
 8007382:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007384:	fbb3 f3f2 	udiv	r3, r3, r2
 8007388:	005a      	lsls	r2, r3, #1
 800738a:	697b      	ldr	r3, [r7, #20]
 800738c:	685b      	ldr	r3, [r3, #4]
 800738e:	085b      	lsrs	r3, r3, #1
 8007390:	441a      	add	r2, r3
 8007392:	697b      	ldr	r3, [r7, #20]
 8007394:	685b      	ldr	r3, [r3, #4]
 8007396:	fbb2 f3f3 	udiv	r3, r2, r3
 800739a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800739c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800739e:	2b0f      	cmp	r3, #15
 80073a0:	d916      	bls.n	80073d0 <UART_SetConfig+0xb28>
 80073a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80073a8:	d212      	bcs.n	80073d0 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80073aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073ac:	b29b      	uxth	r3, r3
 80073ae:	f023 030f 	bic.w	r3, r3, #15
 80073b2:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80073b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073b6:	085b      	lsrs	r3, r3, #1
 80073b8:	b29b      	uxth	r3, r3
 80073ba:	f003 0307 	and.w	r3, r3, #7
 80073be:	b29a      	uxth	r2, r3
 80073c0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80073c2:	4313      	orrs	r3, r2
 80073c4:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80073c6:	697b      	ldr	r3, [r7, #20]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80073cc:	60da      	str	r2, [r3, #12]
 80073ce:	e0bc      	b.n	800754a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80073d0:	2301      	movs	r3, #1
 80073d2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80073d6:	e0b8      	b.n	800754a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80073d8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80073dc:	2b20      	cmp	r3, #32
 80073de:	dc4b      	bgt.n	8007478 <UART_SetConfig+0xbd0>
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	f2c0 8087 	blt.w	80074f4 <UART_SetConfig+0xc4c>
 80073e6:	2b20      	cmp	r3, #32
 80073e8:	f200 8084 	bhi.w	80074f4 <UART_SetConfig+0xc4c>
 80073ec:	a201      	add	r2, pc, #4	@ (adr r2, 80073f4 <UART_SetConfig+0xb4c>)
 80073ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073f2:	bf00      	nop
 80073f4:	0800747f 	.word	0x0800747f
 80073f8:	08007487 	.word	0x08007487
 80073fc:	080074f5 	.word	0x080074f5
 8007400:	080074f5 	.word	0x080074f5
 8007404:	0800748f 	.word	0x0800748f
 8007408:	080074f5 	.word	0x080074f5
 800740c:	080074f5 	.word	0x080074f5
 8007410:	080074f5 	.word	0x080074f5
 8007414:	0800749f 	.word	0x0800749f
 8007418:	080074f5 	.word	0x080074f5
 800741c:	080074f5 	.word	0x080074f5
 8007420:	080074f5 	.word	0x080074f5
 8007424:	080074f5 	.word	0x080074f5
 8007428:	080074f5 	.word	0x080074f5
 800742c:	080074f5 	.word	0x080074f5
 8007430:	080074f5 	.word	0x080074f5
 8007434:	080074af 	.word	0x080074af
 8007438:	080074f5 	.word	0x080074f5
 800743c:	080074f5 	.word	0x080074f5
 8007440:	080074f5 	.word	0x080074f5
 8007444:	080074f5 	.word	0x080074f5
 8007448:	080074f5 	.word	0x080074f5
 800744c:	080074f5 	.word	0x080074f5
 8007450:	080074f5 	.word	0x080074f5
 8007454:	080074f5 	.word	0x080074f5
 8007458:	080074f5 	.word	0x080074f5
 800745c:	080074f5 	.word	0x080074f5
 8007460:	080074f5 	.word	0x080074f5
 8007464:	080074f5 	.word	0x080074f5
 8007468:	080074f5 	.word	0x080074f5
 800746c:	080074f5 	.word	0x080074f5
 8007470:	080074f5 	.word	0x080074f5
 8007474:	080074e7 	.word	0x080074e7
 8007478:	2b40      	cmp	r3, #64	@ 0x40
 800747a:	d037      	beq.n	80074ec <UART_SetConfig+0xc44>
 800747c:	e03a      	b.n	80074f4 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800747e:	f7fd f99d 	bl	80047bc <HAL_RCC_GetPCLK1Freq>
 8007482:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007484:	e03c      	b.n	8007500 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007486:	f7fd f9af 	bl	80047e8 <HAL_RCC_GetPCLK2Freq>
 800748a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800748c:	e038      	b.n	8007500 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800748e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007492:	4618      	mov	r0, r3
 8007494:	f7fe fb74 	bl	8005b80 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007498:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800749a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800749c:	e030      	b.n	8007500 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800749e:	f107 0318 	add.w	r3, r7, #24
 80074a2:	4618      	mov	r0, r3
 80074a4:	f7fe fcc0 	bl	8005e28 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80074a8:	69fb      	ldr	r3, [r7, #28]
 80074aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80074ac:	e028      	b.n	8007500 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80074ae:	4b09      	ldr	r3, [pc, #36]	@ (80074d4 <UART_SetConfig+0xc2c>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f003 0320 	and.w	r3, r3, #32
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d012      	beq.n	80074e0 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80074ba:	4b06      	ldr	r3, [pc, #24]	@ (80074d4 <UART_SetConfig+0xc2c>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	08db      	lsrs	r3, r3, #3
 80074c0:	f003 0303 	and.w	r3, r3, #3
 80074c4:	4a04      	ldr	r2, [pc, #16]	@ (80074d8 <UART_SetConfig+0xc30>)
 80074c6:	fa22 f303 	lsr.w	r3, r2, r3
 80074ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80074cc:	e018      	b.n	8007500 <UART_SetConfig+0xc58>
 80074ce:	bf00      	nop
 80074d0:	0802d350 	.word	0x0802d350
 80074d4:	58024400 	.word	0x58024400
 80074d8:	03d09000 	.word	0x03d09000
 80074dc:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80074e0:	4b24      	ldr	r3, [pc, #144]	@ (8007574 <UART_SetConfig+0xccc>)
 80074e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80074e4:	e00c      	b.n	8007500 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80074e6:	4b24      	ldr	r3, [pc, #144]	@ (8007578 <UART_SetConfig+0xcd0>)
 80074e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80074ea:	e009      	b.n	8007500 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80074ec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80074f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80074f2:	e005      	b.n	8007500 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80074f4:	2300      	movs	r3, #0
 80074f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80074f8:	2301      	movs	r3, #1
 80074fa:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80074fe:	bf00      	nop
    }

    if (pclk != 0U)
 8007500:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007502:	2b00      	cmp	r3, #0
 8007504:	d021      	beq.n	800754a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007506:	697b      	ldr	r3, [r7, #20]
 8007508:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800750a:	4a1c      	ldr	r2, [pc, #112]	@ (800757c <UART_SetConfig+0xcd4>)
 800750c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007510:	461a      	mov	r2, r3
 8007512:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007514:	fbb3 f2f2 	udiv	r2, r3, r2
 8007518:	697b      	ldr	r3, [r7, #20]
 800751a:	685b      	ldr	r3, [r3, #4]
 800751c:	085b      	lsrs	r3, r3, #1
 800751e:	441a      	add	r2, r3
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	685b      	ldr	r3, [r3, #4]
 8007524:	fbb2 f3f3 	udiv	r3, r2, r3
 8007528:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800752a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800752c:	2b0f      	cmp	r3, #15
 800752e:	d909      	bls.n	8007544 <UART_SetConfig+0xc9c>
 8007530:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007532:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007536:	d205      	bcs.n	8007544 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007538:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800753a:	b29a      	uxth	r2, r3
 800753c:	697b      	ldr	r3, [r7, #20]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	60da      	str	r2, [r3, #12]
 8007542:	e002      	b.n	800754a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8007544:	2301      	movs	r3, #1
 8007546:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800754a:	697b      	ldr	r3, [r7, #20]
 800754c:	2201      	movs	r2, #1
 800754e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007552:	697b      	ldr	r3, [r7, #20]
 8007554:	2201      	movs	r2, #1
 8007556:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800755a:	697b      	ldr	r3, [r7, #20]
 800755c:	2200      	movs	r2, #0
 800755e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007560:	697b      	ldr	r3, [r7, #20]
 8007562:	2200      	movs	r2, #0
 8007564:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007566:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800756a:	4618      	mov	r0, r3
 800756c:	3748      	adds	r7, #72	@ 0x48
 800756e:	46bd      	mov	sp, r7
 8007570:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007574:	03d09000 	.word	0x03d09000
 8007578:	003d0900 	.word	0x003d0900
 800757c:	0802d350 	.word	0x0802d350

08007580 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007580:	b480      	push	{r7}
 8007582:	b083      	sub	sp, #12
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800758c:	f003 0308 	and.w	r3, r3, #8
 8007590:	2b00      	cmp	r3, #0
 8007592:	d00a      	beq.n	80075aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	685b      	ldr	r3, [r3, #4]
 800759a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	430a      	orrs	r2, r1
 80075a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075ae:	f003 0301 	and.w	r3, r3, #1
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d00a      	beq.n	80075cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	685b      	ldr	r3, [r3, #4]
 80075bc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	430a      	orrs	r2, r1
 80075ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075d0:	f003 0302 	and.w	r3, r3, #2
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d00a      	beq.n	80075ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	685b      	ldr	r3, [r3, #4]
 80075de:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	430a      	orrs	r2, r1
 80075ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075f2:	f003 0304 	and.w	r3, r3, #4
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d00a      	beq.n	8007610 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	685b      	ldr	r3, [r3, #4]
 8007600:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	430a      	orrs	r2, r1
 800760e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007614:	f003 0310 	and.w	r3, r3, #16
 8007618:	2b00      	cmp	r3, #0
 800761a:	d00a      	beq.n	8007632 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	689b      	ldr	r3, [r3, #8]
 8007622:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	430a      	orrs	r2, r1
 8007630:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007636:	f003 0320 	and.w	r3, r3, #32
 800763a:	2b00      	cmp	r3, #0
 800763c:	d00a      	beq.n	8007654 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	689b      	ldr	r3, [r3, #8]
 8007644:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	430a      	orrs	r2, r1
 8007652:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007658:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800765c:	2b00      	cmp	r3, #0
 800765e:	d01a      	beq.n	8007696 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	685b      	ldr	r3, [r3, #4]
 8007666:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	430a      	orrs	r2, r1
 8007674:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800767a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800767e:	d10a      	bne.n	8007696 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	685b      	ldr	r3, [r3, #4]
 8007686:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	430a      	orrs	r2, r1
 8007694:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800769a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d00a      	beq.n	80076b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	685b      	ldr	r3, [r3, #4]
 80076a8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	430a      	orrs	r2, r1
 80076b6:	605a      	str	r2, [r3, #4]
  }
}
 80076b8:	bf00      	nop
 80076ba:	370c      	adds	r7, #12
 80076bc:	46bd      	mov	sp, r7
 80076be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c2:	4770      	bx	lr

080076c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b098      	sub	sp, #96	@ 0x60
 80076c8:	af02      	add	r7, sp, #8
 80076ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2200      	movs	r2, #0
 80076d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80076d4:	f7fa fce6 	bl	80020a4 <HAL_GetTick>
 80076d8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f003 0308 	and.w	r3, r3, #8
 80076e4:	2b08      	cmp	r3, #8
 80076e6:	d12f      	bne.n	8007748 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80076e8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80076ec:	9300      	str	r3, [sp, #0]
 80076ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80076f0:	2200      	movs	r2, #0
 80076f2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f000 f88e 	bl	8007818 <UART_WaitOnFlagUntilTimeout>
 80076fc:	4603      	mov	r3, r0
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d022      	beq.n	8007748 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007708:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800770a:	e853 3f00 	ldrex	r3, [r3]
 800770e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007710:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007712:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007716:	653b      	str	r3, [r7, #80]	@ 0x50
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	461a      	mov	r2, r3
 800771e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007720:	647b      	str	r3, [r7, #68]	@ 0x44
 8007722:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007724:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007726:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007728:	e841 2300 	strex	r3, r2, [r1]
 800772c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800772e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007730:	2b00      	cmp	r3, #0
 8007732:	d1e6      	bne.n	8007702 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2220      	movs	r2, #32
 8007738:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2200      	movs	r2, #0
 8007740:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007744:	2303      	movs	r3, #3
 8007746:	e063      	b.n	8007810 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f003 0304 	and.w	r3, r3, #4
 8007752:	2b04      	cmp	r3, #4
 8007754:	d149      	bne.n	80077ea <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007756:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800775a:	9300      	str	r3, [sp, #0]
 800775c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800775e:	2200      	movs	r2, #0
 8007760:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007764:	6878      	ldr	r0, [r7, #4]
 8007766:	f000 f857 	bl	8007818 <UART_WaitOnFlagUntilTimeout>
 800776a:	4603      	mov	r3, r0
 800776c:	2b00      	cmp	r3, #0
 800776e:	d03c      	beq.n	80077ea <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007778:	e853 3f00 	ldrex	r3, [r3]
 800777c:	623b      	str	r3, [r7, #32]
   return(result);
 800777e:	6a3b      	ldr	r3, [r7, #32]
 8007780:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007784:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	461a      	mov	r2, r3
 800778c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800778e:	633b      	str	r3, [r7, #48]	@ 0x30
 8007790:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007792:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007794:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007796:	e841 2300 	strex	r3, r2, [r1]
 800779a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800779c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d1e6      	bne.n	8007770 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	3308      	adds	r3, #8
 80077a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077aa:	693b      	ldr	r3, [r7, #16]
 80077ac:	e853 3f00 	ldrex	r3, [r3]
 80077b0:	60fb      	str	r3, [r7, #12]
   return(result);
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	f023 0301 	bic.w	r3, r3, #1
 80077b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	3308      	adds	r3, #8
 80077c0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80077c2:	61fa      	str	r2, [r7, #28]
 80077c4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077c6:	69b9      	ldr	r1, [r7, #24]
 80077c8:	69fa      	ldr	r2, [r7, #28]
 80077ca:	e841 2300 	strex	r3, r2, [r1]
 80077ce:	617b      	str	r3, [r7, #20]
   return(result);
 80077d0:	697b      	ldr	r3, [r7, #20]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d1e5      	bne.n	80077a2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2220      	movs	r2, #32
 80077da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2200      	movs	r2, #0
 80077e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80077e6:	2303      	movs	r3, #3
 80077e8:	e012      	b.n	8007810 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2220      	movs	r2, #32
 80077ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2220      	movs	r2, #32
 80077f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2200      	movs	r2, #0
 80077fe:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2200      	movs	r2, #0
 8007804:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2200      	movs	r2, #0
 800780a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800780e:	2300      	movs	r3, #0
}
 8007810:	4618      	mov	r0, r3
 8007812:	3758      	adds	r7, #88	@ 0x58
 8007814:	46bd      	mov	sp, r7
 8007816:	bd80      	pop	{r7, pc}

08007818 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b084      	sub	sp, #16
 800781c:	af00      	add	r7, sp, #0
 800781e:	60f8      	str	r0, [r7, #12]
 8007820:	60b9      	str	r1, [r7, #8]
 8007822:	603b      	str	r3, [r7, #0]
 8007824:	4613      	mov	r3, r2
 8007826:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007828:	e04f      	b.n	80078ca <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800782a:	69bb      	ldr	r3, [r7, #24]
 800782c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007830:	d04b      	beq.n	80078ca <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007832:	f7fa fc37 	bl	80020a4 <HAL_GetTick>
 8007836:	4602      	mov	r2, r0
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	1ad3      	subs	r3, r2, r3
 800783c:	69ba      	ldr	r2, [r7, #24]
 800783e:	429a      	cmp	r2, r3
 8007840:	d302      	bcc.n	8007848 <UART_WaitOnFlagUntilTimeout+0x30>
 8007842:	69bb      	ldr	r3, [r7, #24]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d101      	bne.n	800784c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007848:	2303      	movs	r3, #3
 800784a:	e04e      	b.n	80078ea <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f003 0304 	and.w	r3, r3, #4
 8007856:	2b00      	cmp	r3, #0
 8007858:	d037      	beq.n	80078ca <UART_WaitOnFlagUntilTimeout+0xb2>
 800785a:	68bb      	ldr	r3, [r7, #8]
 800785c:	2b80      	cmp	r3, #128	@ 0x80
 800785e:	d034      	beq.n	80078ca <UART_WaitOnFlagUntilTimeout+0xb2>
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	2b40      	cmp	r3, #64	@ 0x40
 8007864:	d031      	beq.n	80078ca <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	69db      	ldr	r3, [r3, #28]
 800786c:	f003 0308 	and.w	r3, r3, #8
 8007870:	2b08      	cmp	r3, #8
 8007872:	d110      	bne.n	8007896 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	2208      	movs	r2, #8
 800787a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800787c:	68f8      	ldr	r0, [r7, #12]
 800787e:	f000 f839 	bl	80078f4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	2208      	movs	r2, #8
 8007886:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	2200      	movs	r2, #0
 800788e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007892:	2301      	movs	r3, #1
 8007894:	e029      	b.n	80078ea <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	69db      	ldr	r3, [r3, #28]
 800789c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80078a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80078a4:	d111      	bne.n	80078ca <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80078ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80078b0:	68f8      	ldr	r0, [r7, #12]
 80078b2:	f000 f81f 	bl	80078f4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	2220      	movs	r2, #32
 80078ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	2200      	movs	r2, #0
 80078c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80078c6:	2303      	movs	r3, #3
 80078c8:	e00f      	b.n	80078ea <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	69da      	ldr	r2, [r3, #28]
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	4013      	ands	r3, r2
 80078d4:	68ba      	ldr	r2, [r7, #8]
 80078d6:	429a      	cmp	r2, r3
 80078d8:	bf0c      	ite	eq
 80078da:	2301      	moveq	r3, #1
 80078dc:	2300      	movne	r3, #0
 80078de:	b2db      	uxtb	r3, r3
 80078e0:	461a      	mov	r2, r3
 80078e2:	79fb      	ldrb	r3, [r7, #7]
 80078e4:	429a      	cmp	r2, r3
 80078e6:	d0a0      	beq.n	800782a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80078e8:	2300      	movs	r3, #0
}
 80078ea:	4618      	mov	r0, r3
 80078ec:	3710      	adds	r7, #16
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd80      	pop	{r7, pc}
	...

080078f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80078f4:	b480      	push	{r7}
 80078f6:	b095      	sub	sp, #84	@ 0x54
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007902:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007904:	e853 3f00 	ldrex	r3, [r3]
 8007908:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800790a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800790c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007910:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	461a      	mov	r2, r3
 8007918:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800791a:	643b      	str	r3, [r7, #64]	@ 0x40
 800791c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800791e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007920:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007922:	e841 2300 	strex	r3, r2, [r1]
 8007926:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007928:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800792a:	2b00      	cmp	r3, #0
 800792c:	d1e6      	bne.n	80078fc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	3308      	adds	r3, #8
 8007934:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007936:	6a3b      	ldr	r3, [r7, #32]
 8007938:	e853 3f00 	ldrex	r3, [r3]
 800793c:	61fb      	str	r3, [r7, #28]
   return(result);
 800793e:	69fa      	ldr	r2, [r7, #28]
 8007940:	4b1e      	ldr	r3, [pc, #120]	@ (80079bc <UART_EndRxTransfer+0xc8>)
 8007942:	4013      	ands	r3, r2
 8007944:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	3308      	adds	r3, #8
 800794c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800794e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007950:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007952:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007954:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007956:	e841 2300 	strex	r3, r2, [r1]
 800795a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800795c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800795e:	2b00      	cmp	r3, #0
 8007960:	d1e5      	bne.n	800792e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007966:	2b01      	cmp	r3, #1
 8007968:	d118      	bne.n	800799c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	e853 3f00 	ldrex	r3, [r3]
 8007976:	60bb      	str	r3, [r7, #8]
   return(result);
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	f023 0310 	bic.w	r3, r3, #16
 800797e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	461a      	mov	r2, r3
 8007986:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007988:	61bb      	str	r3, [r7, #24]
 800798a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800798c:	6979      	ldr	r1, [r7, #20]
 800798e:	69ba      	ldr	r2, [r7, #24]
 8007990:	e841 2300 	strex	r3, r2, [r1]
 8007994:	613b      	str	r3, [r7, #16]
   return(result);
 8007996:	693b      	ldr	r3, [r7, #16]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d1e6      	bne.n	800796a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2220      	movs	r2, #32
 80079a0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2200      	movs	r2, #0
 80079a8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2200      	movs	r2, #0
 80079ae:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80079b0:	bf00      	nop
 80079b2:	3754      	adds	r7, #84	@ 0x54
 80079b4:	46bd      	mov	sp, r7
 80079b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ba:	4770      	bx	lr
 80079bc:	effffffe 	.word	0xeffffffe

080079c0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80079c0:	b480      	push	{r7}
 80079c2:	b085      	sub	sp, #20
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80079ce:	2b01      	cmp	r3, #1
 80079d0:	d101      	bne.n	80079d6 <HAL_UARTEx_DisableFifoMode+0x16>
 80079d2:	2302      	movs	r3, #2
 80079d4:	e027      	b.n	8007a26 <HAL_UARTEx_DisableFifoMode+0x66>
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2201      	movs	r2, #1
 80079da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2224      	movs	r2, #36	@ 0x24
 80079e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	681a      	ldr	r2, [r3, #0]
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f022 0201 	bic.w	r2, r2, #1
 80079fc:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007a04:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2200      	movs	r2, #0
 8007a0a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	68fa      	ldr	r2, [r7, #12]
 8007a12:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2220      	movs	r2, #32
 8007a18:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007a24:	2300      	movs	r3, #0
}
 8007a26:	4618      	mov	r0, r3
 8007a28:	3714      	adds	r7, #20
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a30:	4770      	bx	lr

08007a32 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007a32:	b580      	push	{r7, lr}
 8007a34:	b084      	sub	sp, #16
 8007a36:	af00      	add	r7, sp, #0
 8007a38:	6078      	str	r0, [r7, #4]
 8007a3a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007a42:	2b01      	cmp	r3, #1
 8007a44:	d101      	bne.n	8007a4a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007a46:	2302      	movs	r3, #2
 8007a48:	e02d      	b.n	8007aa6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2201      	movs	r2, #1
 8007a4e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2224      	movs	r2, #36	@ 0x24
 8007a56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	681a      	ldr	r2, [r3, #0]
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f022 0201 	bic.w	r2, r2, #1
 8007a70:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	689b      	ldr	r3, [r3, #8]
 8007a78:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	683a      	ldr	r2, [r7, #0]
 8007a82:	430a      	orrs	r2, r1
 8007a84:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f000 f850 	bl	8007b2c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	68fa      	ldr	r2, [r7, #12]
 8007a92:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2220      	movs	r2, #32
 8007a98:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007aa4:	2300      	movs	r3, #0
}
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	3710      	adds	r7, #16
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	bd80      	pop	{r7, pc}

08007aae <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007aae:	b580      	push	{r7, lr}
 8007ab0:	b084      	sub	sp, #16
 8007ab2:	af00      	add	r7, sp, #0
 8007ab4:	6078      	str	r0, [r7, #4]
 8007ab6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007abe:	2b01      	cmp	r3, #1
 8007ac0:	d101      	bne.n	8007ac6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007ac2:	2302      	movs	r3, #2
 8007ac4:	e02d      	b.n	8007b22 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2201      	movs	r2, #1
 8007aca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2224      	movs	r2, #36	@ 0x24
 8007ad2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	681a      	ldr	r2, [r3, #0]
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f022 0201 	bic.w	r2, r2, #1
 8007aec:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	689b      	ldr	r3, [r3, #8]
 8007af4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	683a      	ldr	r2, [r7, #0]
 8007afe:	430a      	orrs	r2, r1
 8007b00:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	f000 f812 	bl	8007b2c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	68fa      	ldr	r2, [r7, #12]
 8007b0e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2220      	movs	r2, #32
 8007b14:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007b20:	2300      	movs	r3, #0
}
 8007b22:	4618      	mov	r0, r3
 8007b24:	3710      	adds	r7, #16
 8007b26:	46bd      	mov	sp, r7
 8007b28:	bd80      	pop	{r7, pc}
	...

08007b2c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	b085      	sub	sp, #20
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d108      	bne.n	8007b4e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2201      	movs	r2, #1
 8007b40:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2201      	movs	r2, #1
 8007b48:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007b4c:	e031      	b.n	8007bb2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007b4e:	2310      	movs	r3, #16
 8007b50:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007b52:	2310      	movs	r3, #16
 8007b54:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	689b      	ldr	r3, [r3, #8]
 8007b5c:	0e5b      	lsrs	r3, r3, #25
 8007b5e:	b2db      	uxtb	r3, r3
 8007b60:	f003 0307 	and.w	r3, r3, #7
 8007b64:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	689b      	ldr	r3, [r3, #8]
 8007b6c:	0f5b      	lsrs	r3, r3, #29
 8007b6e:	b2db      	uxtb	r3, r3
 8007b70:	f003 0307 	and.w	r3, r3, #7
 8007b74:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007b76:	7bbb      	ldrb	r3, [r7, #14]
 8007b78:	7b3a      	ldrb	r2, [r7, #12]
 8007b7a:	4911      	ldr	r1, [pc, #68]	@ (8007bc0 <UARTEx_SetNbDataToProcess+0x94>)
 8007b7c:	5c8a      	ldrb	r2, [r1, r2]
 8007b7e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007b82:	7b3a      	ldrb	r2, [r7, #12]
 8007b84:	490f      	ldr	r1, [pc, #60]	@ (8007bc4 <UARTEx_SetNbDataToProcess+0x98>)
 8007b86:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007b88:	fb93 f3f2 	sdiv	r3, r3, r2
 8007b8c:	b29a      	uxth	r2, r3
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007b94:	7bfb      	ldrb	r3, [r7, #15]
 8007b96:	7b7a      	ldrb	r2, [r7, #13]
 8007b98:	4909      	ldr	r1, [pc, #36]	@ (8007bc0 <UARTEx_SetNbDataToProcess+0x94>)
 8007b9a:	5c8a      	ldrb	r2, [r1, r2]
 8007b9c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007ba0:	7b7a      	ldrb	r2, [r7, #13]
 8007ba2:	4908      	ldr	r1, [pc, #32]	@ (8007bc4 <UARTEx_SetNbDataToProcess+0x98>)
 8007ba4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007ba6:	fb93 f3f2 	sdiv	r3, r3, r2
 8007baa:	b29a      	uxth	r2, r3
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007bb2:	bf00      	nop
 8007bb4:	3714      	adds	r7, #20
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbc:	4770      	bx	lr
 8007bbe:	bf00      	nop
 8007bc0:	0802d368 	.word	0x0802d368
 8007bc4:	0802d370 	.word	0x0802d370

08007bc8 <mg_base64_encode_single>:
#ifdef MG_ENABLE_LINES
#line 1 "src/base64.c"
#endif


static int mg_base64_encode_single(int c) {
 8007bc8:	b480      	push	{r7}
 8007bca:	b083      	sub	sp, #12
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
  if (c < 26) {
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2b19      	cmp	r3, #25
 8007bd4:	dc02      	bgt.n	8007bdc <mg_base64_encode_single+0x14>
    return c + 'A';
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	3341      	adds	r3, #65	@ 0x41
 8007bda:	e011      	b.n	8007c00 <mg_base64_encode_single+0x38>
  } else if (c < 52) {
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2b33      	cmp	r3, #51	@ 0x33
 8007be0:	dc02      	bgt.n	8007be8 <mg_base64_encode_single+0x20>
    return c - 26 + 'a';
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	3347      	adds	r3, #71	@ 0x47
 8007be6:	e00b      	b.n	8007c00 <mg_base64_encode_single+0x38>
  } else if (c < 62) {
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2b3d      	cmp	r3, #61	@ 0x3d
 8007bec:	dc02      	bgt.n	8007bf4 <mg_base64_encode_single+0x2c>
    return c - 52 + '0';
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	3b04      	subs	r3, #4
 8007bf2:	e005      	b.n	8007c00 <mg_base64_encode_single+0x38>
  } else {
    return c == 62 ? '+' : '/';
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2b3e      	cmp	r3, #62	@ 0x3e
 8007bf8:	d101      	bne.n	8007bfe <mg_base64_encode_single+0x36>
 8007bfa:	232b      	movs	r3, #43	@ 0x2b
 8007bfc:	e000      	b.n	8007c00 <mg_base64_encode_single+0x38>
 8007bfe:	232f      	movs	r3, #47	@ 0x2f
  }
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	370c      	adds	r7, #12
 8007c04:	46bd      	mov	sp, r7
 8007c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0a:	4770      	bx	lr

08007c0c <mg_base64_decode_single>:

static int mg_base64_decode_single(int c) {
 8007c0c:	b480      	push	{r7}
 8007c0e:	b083      	sub	sp, #12
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
  if (c >= 'A' && c <= 'Z') {
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2b40      	cmp	r3, #64	@ 0x40
 8007c18:	dd05      	ble.n	8007c26 <mg_base64_decode_single+0x1a>
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2b5a      	cmp	r3, #90	@ 0x5a
 8007c1e:	dc02      	bgt.n	8007c26 <mg_base64_decode_single+0x1a>
    return c - 'A';
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	3b41      	subs	r3, #65	@ 0x41
 8007c24:	e022      	b.n	8007c6c <mg_base64_decode_single+0x60>
  } else if (c >= 'a' && c <= 'z') {
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2b60      	cmp	r3, #96	@ 0x60
 8007c2a:	dd05      	ble.n	8007c38 <mg_base64_decode_single+0x2c>
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2b7a      	cmp	r3, #122	@ 0x7a
 8007c30:	dc02      	bgt.n	8007c38 <mg_base64_decode_single+0x2c>
    return c + 26 - 'a';
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	3b47      	subs	r3, #71	@ 0x47
 8007c36:	e019      	b.n	8007c6c <mg_base64_decode_single+0x60>
  } else if (c >= '0' && c <= '9') {
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2b2f      	cmp	r3, #47	@ 0x2f
 8007c3c:	dd05      	ble.n	8007c4a <mg_base64_decode_single+0x3e>
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2b39      	cmp	r3, #57	@ 0x39
 8007c42:	dc02      	bgt.n	8007c4a <mg_base64_decode_single+0x3e>
    return c + 52 - '0';
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	3304      	adds	r3, #4
 8007c48:	e010      	b.n	8007c6c <mg_base64_decode_single+0x60>
  } else if (c == '+') {
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2b2b      	cmp	r3, #43	@ 0x2b
 8007c4e:	d101      	bne.n	8007c54 <mg_base64_decode_single+0x48>
    return 62;
 8007c50:	233e      	movs	r3, #62	@ 0x3e
 8007c52:	e00b      	b.n	8007c6c <mg_base64_decode_single+0x60>
  } else if (c == '/') {
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2b2f      	cmp	r3, #47	@ 0x2f
 8007c58:	d101      	bne.n	8007c5e <mg_base64_decode_single+0x52>
    return 63;
 8007c5a:	233f      	movs	r3, #63	@ 0x3f
 8007c5c:	e006      	b.n	8007c6c <mg_base64_decode_single+0x60>
  } else if (c == '=') {
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2b3d      	cmp	r3, #61	@ 0x3d
 8007c62:	d101      	bne.n	8007c68 <mg_base64_decode_single+0x5c>
    return 64;
 8007c64:	2340      	movs	r3, #64	@ 0x40
 8007c66:	e001      	b.n	8007c6c <mg_base64_decode_single+0x60>
  } else {
    return -1;
 8007c68:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	370c      	adds	r7, #12
 8007c70:	46bd      	mov	sp, r7
 8007c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c76:	4770      	bx	lr

08007c78 <mg_base64_update>:

size_t mg_base64_update(unsigned char ch, char *to, size_t n) {
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b086      	sub	sp, #24
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	4603      	mov	r3, r0
 8007c80:	60b9      	str	r1, [r7, #8]
 8007c82:	607a      	str	r2, [r7, #4]
 8007c84:	73fb      	strb	r3, [r7, #15]
  unsigned long rem = (n & 3) % 3;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	f003 0203 	and.w	r2, r3, #3
 8007c8c:	4b38      	ldr	r3, [pc, #224]	@ (8007d70 <mg_base64_update+0xf8>)
 8007c8e:	fba3 1302 	umull	r1, r3, r3, r2
 8007c92:	0859      	lsrs	r1, r3, #1
 8007c94:	460b      	mov	r3, r1
 8007c96:	005b      	lsls	r3, r3, #1
 8007c98:	440b      	add	r3, r1
 8007c9a:	1ad3      	subs	r3, r2, r3
 8007c9c:	617b      	str	r3, [r7, #20]
  if (rem == 0) {
 8007c9e:	697b      	ldr	r3, [r7, #20]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d119      	bne.n	8007cd8 <mg_base64_update+0x60>
    to[n] = (char) mg_base64_encode_single(ch >> 2);
 8007ca4:	7bfb      	ldrb	r3, [r7, #15]
 8007ca6:	089b      	lsrs	r3, r3, #2
 8007ca8:	b2db      	uxtb	r3, r3
 8007caa:	4618      	mov	r0, r3
 8007cac:	f7ff ff8c 	bl	8007bc8 <mg_base64_encode_single>
 8007cb0:	4601      	mov	r1, r0
 8007cb2:	68ba      	ldr	r2, [r7, #8]
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	4413      	add	r3, r2
 8007cb8:	b2ca      	uxtb	r2, r1
 8007cba:	701a      	strb	r2, [r3, #0]
    to[++n] = (char) ((ch & 3) << 4);
 8007cbc:	7bfb      	ldrb	r3, [r7, #15]
 8007cbe:	011b      	lsls	r3, r3, #4
 8007cc0:	b2da      	uxtb	r2, r3
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	3301      	adds	r3, #1
 8007cc6:	607b      	str	r3, [r7, #4]
 8007cc8:	68b9      	ldr	r1, [r7, #8]
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	440b      	add	r3, r1
 8007cce:	f002 0230 	and.w	r2, r2, #48	@ 0x30
 8007cd2:	b2d2      	uxtb	r2, r2
 8007cd4:	701a      	strb	r2, [r3, #0]
 8007cd6:	e046      	b.n	8007d66 <mg_base64_update+0xee>
  } else if (rem == 1) {
 8007cd8:	697b      	ldr	r3, [r7, #20]
 8007cda:	2b01      	cmp	r3, #1
 8007cdc:	d11f      	bne.n	8007d1e <mg_base64_update+0xa6>
    to[n] = (char) mg_base64_encode_single(to[n] | (ch >> 4));
 8007cde:	68ba      	ldr	r2, [r7, #8]
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	4413      	add	r3, r2
 8007ce4:	781a      	ldrb	r2, [r3, #0]
 8007ce6:	7bfb      	ldrb	r3, [r7, #15]
 8007ce8:	091b      	lsrs	r3, r3, #4
 8007cea:	b2db      	uxtb	r3, r3
 8007cec:	4313      	orrs	r3, r2
 8007cee:	b2db      	uxtb	r3, r3
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	f7ff ff69 	bl	8007bc8 <mg_base64_encode_single>
 8007cf6:	4601      	mov	r1, r0
 8007cf8:	68ba      	ldr	r2, [r7, #8]
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	4413      	add	r3, r2
 8007cfe:	b2ca      	uxtb	r2, r1
 8007d00:	701a      	strb	r2, [r3, #0]
    to[++n] = (char) ((ch & 15) << 2);
 8007d02:	7bfb      	ldrb	r3, [r7, #15]
 8007d04:	009b      	lsls	r3, r3, #2
 8007d06:	b2da      	uxtb	r2, r3
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	3301      	adds	r3, #1
 8007d0c:	607b      	str	r3, [r7, #4]
 8007d0e:	68b9      	ldr	r1, [r7, #8]
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	440b      	add	r3, r1
 8007d14:	f002 023c 	and.w	r2, r2, #60	@ 0x3c
 8007d18:	b2d2      	uxtb	r2, r2
 8007d1a:	701a      	strb	r2, [r3, #0]
 8007d1c:	e023      	b.n	8007d66 <mg_base64_update+0xee>
  } else {
    to[n] = (char) mg_base64_encode_single(to[n] | (ch >> 6));
 8007d1e:	68ba      	ldr	r2, [r7, #8]
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	4413      	add	r3, r2
 8007d24:	781a      	ldrb	r2, [r3, #0]
 8007d26:	7bfb      	ldrb	r3, [r7, #15]
 8007d28:	099b      	lsrs	r3, r3, #6
 8007d2a:	b2db      	uxtb	r3, r3
 8007d2c:	4313      	orrs	r3, r2
 8007d2e:	b2db      	uxtb	r3, r3
 8007d30:	4618      	mov	r0, r3
 8007d32:	f7ff ff49 	bl	8007bc8 <mg_base64_encode_single>
 8007d36:	4601      	mov	r1, r0
 8007d38:	68ba      	ldr	r2, [r7, #8]
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	4413      	add	r3, r2
 8007d3e:	b2ca      	uxtb	r2, r1
 8007d40:	701a      	strb	r2, [r3, #0]
    to[++n] = (char) mg_base64_encode_single(ch & 63);
 8007d42:	7bfb      	ldrb	r3, [r7, #15]
 8007d44:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007d48:	4618      	mov	r0, r3
 8007d4a:	f7ff ff3d 	bl	8007bc8 <mg_base64_encode_single>
 8007d4e:	4601      	mov	r1, r0
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	3301      	adds	r3, #1
 8007d54:	607b      	str	r3, [r7, #4]
 8007d56:	68ba      	ldr	r2, [r7, #8]
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	4413      	add	r3, r2
 8007d5c:	b2ca      	uxtb	r2, r1
 8007d5e:	701a      	strb	r2, [r3, #0]
    n++;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	3301      	adds	r3, #1
 8007d64:	607b      	str	r3, [r7, #4]
  }
  return n;
 8007d66:	687b      	ldr	r3, [r7, #4]
}
 8007d68:	4618      	mov	r0, r3
 8007d6a:	3718      	adds	r7, #24
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bd80      	pop	{r7, pc}
 8007d70:	aaaaaaab 	.word	0xaaaaaaab

08007d74 <mg_base64_final>:

size_t mg_base64_final(char *to, size_t n) {
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b084      	sub	sp, #16
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
 8007d7c:	6039      	str	r1, [r7, #0]
  size_t saved = n;
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	60fb      	str	r3, [r7, #12]
  // printf("---[%.*s]\n", n, to);
  if (n & 3) n = mg_base64_update(0, to, n);
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	f003 0303 	and.w	r3, r3, #3
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d005      	beq.n	8007d98 <mg_base64_final+0x24>
 8007d8c:	683a      	ldr	r2, [r7, #0]
 8007d8e:	6879      	ldr	r1, [r7, #4]
 8007d90:	2000      	movs	r0, #0
 8007d92:	f7ff ff71 	bl	8007c78 <mg_base64_update>
 8007d96:	6038      	str	r0, [r7, #0]
  if ((saved & 3) == 2) n--;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	f003 0303 	and.w	r3, r3, #3
 8007d9e:	2b02      	cmp	r3, #2
 8007da0:	d10a      	bne.n	8007db8 <mg_base64_final+0x44>
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	3b01      	subs	r3, #1
 8007da6:	603b      	str	r3, [r7, #0]
  // printf("    %d[%.*s]\n", n, n, to);
  while (n & 3) to[n++] = '=';
 8007da8:	e006      	b.n	8007db8 <mg_base64_final+0x44>
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	1c5a      	adds	r2, r3, #1
 8007dae:	603a      	str	r2, [r7, #0]
 8007db0:	687a      	ldr	r2, [r7, #4]
 8007db2:	4413      	add	r3, r2
 8007db4:	223d      	movs	r2, #61	@ 0x3d
 8007db6:	701a      	strb	r2, [r3, #0]
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	f003 0303 	and.w	r3, r3, #3
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d1f3      	bne.n	8007daa <mg_base64_final+0x36>
  to[n] = '\0';
 8007dc2:	687a      	ldr	r2, [r7, #4]
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	4413      	add	r3, r2
 8007dc8:	2200      	movs	r2, #0
 8007dca:	701a      	strb	r2, [r3, #0]
  return n;
 8007dcc:	683b      	ldr	r3, [r7, #0]
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	3710      	adds	r7, #16
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}
	...

08007dd8 <mg_base64_encode>:

size_t mg_base64_encode(const unsigned char *p, size_t n, char *to, size_t dl) {
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b086      	sub	sp, #24
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	60f8      	str	r0, [r7, #12]
 8007de0:	60b9      	str	r1, [r7, #8]
 8007de2:	607a      	str	r2, [r7, #4]
 8007de4:	603b      	str	r3, [r7, #0]
  size_t i, len = 0;
 8007de6:	2300      	movs	r3, #0
 8007de8:	613b      	str	r3, [r7, #16]
  if (dl > 0) to[0] = '\0';
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d002      	beq.n	8007df6 <mg_base64_encode+0x1e>
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2200      	movs	r2, #0
 8007df4:	701a      	strb	r2, [r3, #0]
  if (dl < ((n / 3) + (n % 3 ? 1 : 0)) * 4 + 1) return 0;
 8007df6:	68bb      	ldr	r3, [r7, #8]
 8007df8:	4a1b      	ldr	r2, [pc, #108]	@ (8007e68 <mg_base64_encode+0x90>)
 8007dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8007dfe:	0858      	lsrs	r0, r3, #1
 8007e00:	68b9      	ldr	r1, [r7, #8]
 8007e02:	4b19      	ldr	r3, [pc, #100]	@ (8007e68 <mg_base64_encode+0x90>)
 8007e04:	fba3 2301 	umull	r2, r3, r3, r1
 8007e08:	085a      	lsrs	r2, r3, #1
 8007e0a:	4613      	mov	r3, r2
 8007e0c:	005b      	lsls	r3, r3, #1
 8007e0e:	4413      	add	r3, r2
 8007e10:	1aca      	subs	r2, r1, r3
 8007e12:	2a00      	cmp	r2, #0
 8007e14:	d001      	beq.n	8007e1a <mg_base64_encode+0x42>
 8007e16:	2301      	movs	r3, #1
 8007e18:	e000      	b.n	8007e1c <mg_base64_encode+0x44>
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	4403      	add	r3, r0
 8007e1e:	009b      	lsls	r3, r3, #2
 8007e20:	3301      	adds	r3, #1
 8007e22:	683a      	ldr	r2, [r7, #0]
 8007e24:	429a      	cmp	r2, r3
 8007e26:	d201      	bcs.n	8007e2c <mg_base64_encode+0x54>
 8007e28:	2300      	movs	r3, #0
 8007e2a:	e019      	b.n	8007e60 <mg_base64_encode+0x88>
  for (i = 0; i < n; i++) len = mg_base64_update(p[i], to, len);
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	617b      	str	r3, [r7, #20]
 8007e30:	e00c      	b.n	8007e4c <mg_base64_encode+0x74>
 8007e32:	68fa      	ldr	r2, [r7, #12]
 8007e34:	697b      	ldr	r3, [r7, #20]
 8007e36:	4413      	add	r3, r2
 8007e38:	781b      	ldrb	r3, [r3, #0]
 8007e3a:	693a      	ldr	r2, [r7, #16]
 8007e3c:	6879      	ldr	r1, [r7, #4]
 8007e3e:	4618      	mov	r0, r3
 8007e40:	f7ff ff1a 	bl	8007c78 <mg_base64_update>
 8007e44:	6138      	str	r0, [r7, #16]
 8007e46:	697b      	ldr	r3, [r7, #20]
 8007e48:	3301      	adds	r3, #1
 8007e4a:	617b      	str	r3, [r7, #20]
 8007e4c:	697a      	ldr	r2, [r7, #20]
 8007e4e:	68bb      	ldr	r3, [r7, #8]
 8007e50:	429a      	cmp	r2, r3
 8007e52:	d3ee      	bcc.n	8007e32 <mg_base64_encode+0x5a>
  len = mg_base64_final(to, len);
 8007e54:	6939      	ldr	r1, [r7, #16]
 8007e56:	6878      	ldr	r0, [r7, #4]
 8007e58:	f7ff ff8c 	bl	8007d74 <mg_base64_final>
 8007e5c:	6138      	str	r0, [r7, #16]
  return len;
 8007e5e:	693b      	ldr	r3, [r7, #16]
}
 8007e60:	4618      	mov	r0, r3
 8007e62:	3718      	adds	r7, #24
 8007e64:	46bd      	mov	sp, r7
 8007e66:	bd80      	pop	{r7, pc}
 8007e68:	aaaaaaab 	.word	0xaaaaaaab

08007e6c <mg_base64_decode>:

size_t mg_base64_decode(const char *src, size_t n, char *dst, size_t dl) {
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b08a      	sub	sp, #40	@ 0x28
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	60f8      	str	r0, [r7, #12]
 8007e74:	60b9      	str	r1, [r7, #8]
 8007e76:	607a      	str	r2, [r7, #4]
 8007e78:	603b      	str	r3, [r7, #0]
  const char *end = src == NULL ? NULL : src + n;  // Cannot add to NULL
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d003      	beq.n	8007e88 <mg_base64_decode+0x1c>
 8007e80:	68fa      	ldr	r2, [r7, #12]
 8007e82:	68bb      	ldr	r3, [r7, #8]
 8007e84:	4413      	add	r3, r2
 8007e86:	e000      	b.n	8007e8a <mg_base64_decode+0x1e>
 8007e88:	2300      	movs	r3, #0
 8007e8a:	623b      	str	r3, [r7, #32]
  size_t len = 0;
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (dl < n / 4 * 3 + 1) goto fail;
 8007e90:	68bb      	ldr	r3, [r7, #8]
 8007e92:	089a      	lsrs	r2, r3, #2
 8007e94:	4613      	mov	r3, r2
 8007e96:	005b      	lsls	r3, r3, #1
 8007e98:	4413      	add	r3, r2
 8007e9a:	3301      	adds	r3, #1
 8007e9c:	683a      	ldr	r2, [r7, #0]
 8007e9e:	429a      	cmp	r2, r3
 8007ea0:	d378      	bcc.n	8007f94 <mg_base64_decode+0x128>
  while (src != NULL && src + 3 < end) {
 8007ea2:	e068      	b.n	8007f76 <mg_base64_decode+0x10a>
    int a = mg_base64_decode_single(src[0]),
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	781b      	ldrb	r3, [r3, #0]
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	f7ff feaf 	bl	8007c0c <mg_base64_decode_single>
 8007eae:	61f8      	str	r0, [r7, #28]
        b = mg_base64_decode_single(src[1]),
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	3301      	adds	r3, #1
 8007eb4:	781b      	ldrb	r3, [r3, #0]
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	f7ff fea8 	bl	8007c0c <mg_base64_decode_single>
 8007ebc:	61b8      	str	r0, [r7, #24]
        c = mg_base64_decode_single(src[2]),
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	3302      	adds	r3, #2
 8007ec2:	781b      	ldrb	r3, [r3, #0]
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	f7ff fea1 	bl	8007c0c <mg_base64_decode_single>
 8007eca:	6178      	str	r0, [r7, #20]
        d = mg_base64_decode_single(src[3]);
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	3303      	adds	r3, #3
 8007ed0:	781b      	ldrb	r3, [r3, #0]
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	f7ff fe9a 	bl	8007c0c <mg_base64_decode_single>
 8007ed8:	6138      	str	r0, [r7, #16]
    if (a == 64 || a < 0 || b == 64 || b < 0 || c < 0 || d < 0) {
 8007eda:	69fb      	ldr	r3, [r7, #28]
 8007edc:	2b40      	cmp	r3, #64	@ 0x40
 8007ede:	d05b      	beq.n	8007f98 <mg_base64_decode+0x12c>
 8007ee0:	69fb      	ldr	r3, [r7, #28]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	db58      	blt.n	8007f98 <mg_base64_decode+0x12c>
 8007ee6:	69bb      	ldr	r3, [r7, #24]
 8007ee8:	2b40      	cmp	r3, #64	@ 0x40
 8007eea:	d055      	beq.n	8007f98 <mg_base64_decode+0x12c>
 8007eec:	69bb      	ldr	r3, [r7, #24]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	db52      	blt.n	8007f98 <mg_base64_decode+0x12c>
 8007ef2:	697b      	ldr	r3, [r7, #20]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	db4f      	blt.n	8007f98 <mg_base64_decode+0x12c>
 8007ef8:	693b      	ldr	r3, [r7, #16]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	db4c      	blt.n	8007f98 <mg_base64_decode+0x12c>
      goto fail;
    }
    dst[len++] = (char) ((a << 2) | (b >> 4));
 8007efe:	69fb      	ldr	r3, [r7, #28]
 8007f00:	b25b      	sxtb	r3, r3
 8007f02:	009b      	lsls	r3, r3, #2
 8007f04:	b25a      	sxtb	r2, r3
 8007f06:	69bb      	ldr	r3, [r7, #24]
 8007f08:	111b      	asrs	r3, r3, #4
 8007f0a:	b25b      	sxtb	r3, r3
 8007f0c:	4313      	orrs	r3, r2
 8007f0e:	b259      	sxtb	r1, r3
 8007f10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f12:	1c5a      	adds	r2, r3, #1
 8007f14:	627a      	str	r2, [r7, #36]	@ 0x24
 8007f16:	687a      	ldr	r2, [r7, #4]
 8007f18:	4413      	add	r3, r2
 8007f1a:	b2ca      	uxtb	r2, r1
 8007f1c:	701a      	strb	r2, [r3, #0]
    if (src[2] != '=') {
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	3302      	adds	r3, #2
 8007f22:	781b      	ldrb	r3, [r3, #0]
 8007f24:	2b3d      	cmp	r3, #61	@ 0x3d
 8007f26:	d023      	beq.n	8007f70 <mg_base64_decode+0x104>
      dst[len++] = (char) ((b << 4) | (c >> 2));
 8007f28:	69bb      	ldr	r3, [r7, #24]
 8007f2a:	b25b      	sxtb	r3, r3
 8007f2c:	011b      	lsls	r3, r3, #4
 8007f2e:	b25a      	sxtb	r2, r3
 8007f30:	697b      	ldr	r3, [r7, #20]
 8007f32:	109b      	asrs	r3, r3, #2
 8007f34:	b25b      	sxtb	r3, r3
 8007f36:	4313      	orrs	r3, r2
 8007f38:	b259      	sxtb	r1, r3
 8007f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f3c:	1c5a      	adds	r2, r3, #1
 8007f3e:	627a      	str	r2, [r7, #36]	@ 0x24
 8007f40:	687a      	ldr	r2, [r7, #4]
 8007f42:	4413      	add	r3, r2
 8007f44:	b2ca      	uxtb	r2, r1
 8007f46:	701a      	strb	r2, [r3, #0]
      if (src[3] != '=') dst[len++] = (char) ((c << 6) | d);
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	3303      	adds	r3, #3
 8007f4c:	781b      	ldrb	r3, [r3, #0]
 8007f4e:	2b3d      	cmp	r3, #61	@ 0x3d
 8007f50:	d00e      	beq.n	8007f70 <mg_base64_decode+0x104>
 8007f52:	697b      	ldr	r3, [r7, #20]
 8007f54:	b25b      	sxtb	r3, r3
 8007f56:	019b      	lsls	r3, r3, #6
 8007f58:	b25a      	sxtb	r2, r3
 8007f5a:	693b      	ldr	r3, [r7, #16]
 8007f5c:	b25b      	sxtb	r3, r3
 8007f5e:	4313      	orrs	r3, r2
 8007f60:	b259      	sxtb	r1, r3
 8007f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f64:	1c5a      	adds	r2, r3, #1
 8007f66:	627a      	str	r2, [r7, #36]	@ 0x24
 8007f68:	687a      	ldr	r2, [r7, #4]
 8007f6a:	4413      	add	r3, r2
 8007f6c:	b2ca      	uxtb	r2, r1
 8007f6e:	701a      	strb	r2, [r3, #0]
    }
    src += 4;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	3304      	adds	r3, #4
 8007f74:	60fb      	str	r3, [r7, #12]
  while (src != NULL && src + 3 < end) {
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d004      	beq.n	8007f86 <mg_base64_decode+0x11a>
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	3303      	adds	r3, #3
 8007f80:	6a3a      	ldr	r2, [r7, #32]
 8007f82:	429a      	cmp	r2, r3
 8007f84:	d88e      	bhi.n	8007ea4 <mg_base64_decode+0x38>
  }
  dst[len] = '\0';
 8007f86:	687a      	ldr	r2, [r7, #4]
 8007f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f8a:	4413      	add	r3, r2
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	701a      	strb	r2, [r3, #0]
  return len;
 8007f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f92:	e009      	b.n	8007fa8 <mg_base64_decode+0x13c>
  if (dl < n / 4 * 3 + 1) goto fail;
 8007f94:	bf00      	nop
 8007f96:	e000      	b.n	8007f9a <mg_base64_decode+0x12e>
      goto fail;
 8007f98:	bf00      	nop
fail:
  if (dl > 0) dst[0] = '\0';
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d002      	beq.n	8007fa6 <mg_base64_decode+0x13a>
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	701a      	strb	r2, [r3, #0]
  return 0;
 8007fa6:	2300      	movs	r3, #0
}
 8007fa8:	4618      	mov	r0, r3
 8007faa:	3728      	adds	r7, #40	@ 0x28
 8007fac:	46bd      	mov	sp, r7
 8007fae:	bd80      	pop	{r7, pc}

08007fb0 <mg_dns_free>:
};

static void mg_sendnsreq(struct mg_connection *, struct mg_str *, int,
                         struct mg_dns *, bool);

static void mg_dns_free(struct dns_data **head, struct dns_data *d) {
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b084      	sub	sp, #16
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
 8007fb8:	6039      	str	r1, [r7, #0]
  LIST_DELETE(struct dns_data, head, d);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	60fb      	str	r3, [r7, #12]
 8007fbe:	e002      	b.n	8007fc6 <mg_dns_free+0x16>
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	60fb      	str	r3, [r7, #12]
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	683a      	ldr	r2, [r7, #0]
 8007fcc:	429a      	cmp	r2, r3
 8007fce:	d1f7      	bne.n	8007fc0 <mg_dns_free+0x10>
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	681a      	ldr	r2, [r3, #0]
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	601a      	str	r2, [r3, #0]
  free(d);
 8007fd8:	6838      	ldr	r0, [r7, #0]
 8007fda:	f01d fceb 	bl	80259b4 <free>
}
 8007fde:	bf00      	nop
 8007fe0:	3710      	adds	r7, #16
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bd80      	pop	{r7, pc}

08007fe6 <mg_resolve_cancel>:

void mg_resolve_cancel(struct mg_connection *c) {
 8007fe6:	b580      	push	{r7, lr}
 8007fe8:	b086      	sub	sp, #24
 8007fea:	af00      	add	r7, sp, #0
 8007fec:	6078      	str	r0, [r7, #4]
  struct dns_data *tmp, *d;
  struct dns_data **head = (struct dns_data **) &c->mgr->active_dns_requests;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	685b      	ldr	r3, [r3, #4]
 8007ff2:	332c      	adds	r3, #44	@ 0x2c
 8007ff4:	613b      	str	r3, [r7, #16]
  for (d = *head; d != NULL; d = tmp) {
 8007ff6:	693b      	ldr	r3, [r7, #16]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	617b      	str	r3, [r7, #20]
 8007ffc:	e00d      	b.n	800801a <mg_resolve_cancel+0x34>
    tmp = d->next;
 8007ffe:	697b      	ldr	r3, [r7, #20]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	60fb      	str	r3, [r7, #12]
    if (d->c == c) mg_dns_free(head, d);
 8008004:	697b      	ldr	r3, [r7, #20]
 8008006:	685b      	ldr	r3, [r3, #4]
 8008008:	687a      	ldr	r2, [r7, #4]
 800800a:	429a      	cmp	r2, r3
 800800c:	d103      	bne.n	8008016 <mg_resolve_cancel+0x30>
 800800e:	6979      	ldr	r1, [r7, #20]
 8008010:	6938      	ldr	r0, [r7, #16]
 8008012:	f7ff ffcd 	bl	8007fb0 <mg_dns_free>
  for (d = *head; d != NULL; d = tmp) {
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	617b      	str	r3, [r7, #20]
 800801a:	697b      	ldr	r3, [r7, #20]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d1ee      	bne.n	8007ffe <mg_resolve_cancel+0x18>
  }
}
 8008020:	bf00      	nop
 8008022:	bf00      	nop
 8008024:	3718      	adds	r7, #24
 8008026:	46bd      	mov	sp, r7
 8008028:	bd80      	pop	{r7, pc}

0800802a <mg_dns_parse_name_depth>:

static size_t mg_dns_parse_name_depth(const uint8_t *s, size_t len, size_t ofs,
                                      char *to, size_t tolen, size_t j,
                                      int depth) {
 800802a:	b580      	push	{r7, lr}
 800802c:	b08c      	sub	sp, #48	@ 0x30
 800802e:	af04      	add	r7, sp, #16
 8008030:	60f8      	str	r0, [r7, #12]
 8008032:	60b9      	str	r1, [r7, #8]
 8008034:	607a      	str	r2, [r7, #4]
 8008036:	603b      	str	r3, [r7, #0]
  size_t i = 0;
 8008038:	2300      	movs	r3, #0
 800803a:	61fb      	str	r3, [r7, #28]
  if (tolen > 0 && depth == 0) to[0] = '\0';
 800803c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800803e:	2b00      	cmp	r3, #0
 8008040:	d005      	beq.n	800804e <mg_dns_parse_name_depth+0x24>
 8008042:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008044:	2b00      	cmp	r3, #0
 8008046:	d102      	bne.n	800804e <mg_dns_parse_name_depth+0x24>
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	2200      	movs	r2, #0
 800804c:	701a      	strb	r2, [r3, #0]
  if (depth > 5) return 0;
 800804e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008050:	2b05      	cmp	r3, #5
 8008052:	f340 8084 	ble.w	800815e <mg_dns_parse_name_depth+0x134>
 8008056:	2300      	movs	r3, #0
 8008058:	e093      	b.n	8008182 <mg_dns_parse_name_depth+0x158>
  // MG_INFO(("ofs %lx %x %x", (unsigned long) ofs, s[ofs], s[ofs + 1]));
  while (ofs + i + 1 < len) {
    size_t n = s[ofs + i];
 800805a:	687a      	ldr	r2, [r7, #4]
 800805c:	69fb      	ldr	r3, [r7, #28]
 800805e:	4413      	add	r3, r2
 8008060:	68fa      	ldr	r2, [r7, #12]
 8008062:	4413      	add	r3, r2
 8008064:	781b      	ldrb	r3, [r3, #0]
 8008066:	61bb      	str	r3, [r7, #24]
    if (n == 0) {
 8008068:	69bb      	ldr	r3, [r7, #24]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d103      	bne.n	8008076 <mg_dns_parse_name_depth+0x4c>
      i++;
 800806e:	69fb      	ldr	r3, [r7, #28]
 8008070:	3301      	adds	r3, #1
 8008072:	61fb      	str	r3, [r7, #28]
      break;
 8008074:	e07b      	b.n	800816e <mg_dns_parse_name_depth+0x144>
    }
    if (n & 0xc0) {
 8008076:	69bb      	ldr	r3, [r7, #24]
 8008078:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800807c:	2b00      	cmp	r3, #0
 800807e:	d02f      	beq.n	80080e0 <mg_dns_parse_name_depth+0xb6>
      size_t ptr = (((n & 0x3f) << 8) | s[ofs + i + 1]);  // 12 is hdr len
 8008080:	69bb      	ldr	r3, [r7, #24]
 8008082:	021b      	lsls	r3, r3, #8
 8008084:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 8008088:	6879      	ldr	r1, [r7, #4]
 800808a:	69fa      	ldr	r2, [r7, #28]
 800808c:	440a      	add	r2, r1
 800808e:	3201      	adds	r2, #1
 8008090:	68f9      	ldr	r1, [r7, #12]
 8008092:	440a      	add	r2, r1
 8008094:	7812      	ldrb	r2, [r2, #0]
 8008096:	4313      	orrs	r3, r2
 8008098:	617b      	str	r3, [r7, #20]
      // MG_INFO(("PTR %lx", (unsigned long) ptr));
      if (ptr + 1 < len && (s[ptr] & 0xc0) == 0 &&
 800809a:	697b      	ldr	r3, [r7, #20]
 800809c:	3301      	adds	r3, #1
 800809e:	68ba      	ldr	r2, [r7, #8]
 80080a0:	429a      	cmp	r2, r3
 80080a2:	d919      	bls.n	80080d8 <mg_dns_parse_name_depth+0xae>
 80080a4:	68fa      	ldr	r2, [r7, #12]
 80080a6:	697b      	ldr	r3, [r7, #20]
 80080a8:	4413      	add	r3, r2
 80080aa:	781b      	ldrb	r3, [r3, #0]
 80080ac:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d111      	bne.n	80080d8 <mg_dns_parse_name_depth+0xae>
          mg_dns_parse_name_depth(s, len, ptr, to, tolen, j, depth + 1) == 0)
 80080b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080b6:	3301      	adds	r3, #1
 80080b8:	9302      	str	r3, [sp, #8]
 80080ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080bc:	9301      	str	r3, [sp, #4]
 80080be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080c0:	9300      	str	r3, [sp, #0]
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	697a      	ldr	r2, [r7, #20]
 80080c6:	68b9      	ldr	r1, [r7, #8]
 80080c8:	68f8      	ldr	r0, [r7, #12]
 80080ca:	f7ff ffae 	bl	800802a <mg_dns_parse_name_depth>
 80080ce:	4603      	mov	r3, r0
      if (ptr + 1 < len && (s[ptr] & 0xc0) == 0 &&
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d101      	bne.n	80080d8 <mg_dns_parse_name_depth+0xae>
        return 0;
 80080d4:	2300      	movs	r3, #0
 80080d6:	e054      	b.n	8008182 <mg_dns_parse_name_depth+0x158>
      i += 2;
 80080d8:	69fb      	ldr	r3, [r7, #28]
 80080da:	3302      	adds	r3, #2
 80080dc:	61fb      	str	r3, [r7, #28]
      break;
 80080de:	e046      	b.n	800816e <mg_dns_parse_name_depth+0x144>
    }
    if (ofs + i + n + 1 >= len) return 0;
 80080e0:	687a      	ldr	r2, [r7, #4]
 80080e2:	69fb      	ldr	r3, [r7, #28]
 80080e4:	441a      	add	r2, r3
 80080e6:	69bb      	ldr	r3, [r7, #24]
 80080e8:	4413      	add	r3, r2
 80080ea:	3301      	adds	r3, #1
 80080ec:	68ba      	ldr	r2, [r7, #8]
 80080ee:	429a      	cmp	r2, r3
 80080f0:	d801      	bhi.n	80080f6 <mg_dns_parse_name_depth+0xcc>
 80080f2:	2300      	movs	r3, #0
 80080f4:	e045      	b.n	8008182 <mg_dns_parse_name_depth+0x158>
    if (j > 0) {
 80080f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d00b      	beq.n	8008114 <mg_dns_parse_name_depth+0xea>
      if (j < tolen) to[j] = '.';
 80080fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80080fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008100:	429a      	cmp	r2, r3
 8008102:	d204      	bcs.n	800810e <mg_dns_parse_name_depth+0xe4>
 8008104:	683a      	ldr	r2, [r7, #0]
 8008106:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008108:	4413      	add	r3, r2
 800810a:	222e      	movs	r2, #46	@ 0x2e
 800810c:	701a      	strb	r2, [r3, #0]
      j++;
 800810e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008110:	3301      	adds	r3, #1
 8008112:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    if (j + n < tolen) memcpy(&to[j], &s[ofs + i + 1], n);
 8008114:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008116:	69bb      	ldr	r3, [r7, #24]
 8008118:	4413      	add	r3, r2
 800811a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800811c:	429a      	cmp	r2, r3
 800811e:	d90c      	bls.n	800813a <mg_dns_parse_name_depth+0x110>
 8008120:	683a      	ldr	r2, [r7, #0]
 8008122:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008124:	18d0      	adds	r0, r2, r3
 8008126:	687a      	ldr	r2, [r7, #4]
 8008128:	69fb      	ldr	r3, [r7, #28]
 800812a:	4413      	add	r3, r2
 800812c:	3301      	adds	r3, #1
 800812e:	68fa      	ldr	r2, [r7, #12]
 8008130:	4413      	add	r3, r2
 8008132:	69ba      	ldr	r2, [r7, #24]
 8008134:	4619      	mov	r1, r3
 8008136:	f01f fc00 	bl	802793a <memcpy>
    j += n;
 800813a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800813c:	69bb      	ldr	r3, [r7, #24]
 800813e:	4413      	add	r3, r2
 8008140:	62fb      	str	r3, [r7, #44]	@ 0x2c
    i += n + 1;
 8008142:	69ba      	ldr	r2, [r7, #24]
 8008144:	69fb      	ldr	r3, [r7, #28]
 8008146:	4413      	add	r3, r2
 8008148:	3301      	adds	r3, #1
 800814a:	61fb      	str	r3, [r7, #28]
    if (j < tolen) to[j] = '\0';  // Zero-terminate this chunk
 800814c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800814e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008150:	429a      	cmp	r2, r3
 8008152:	d204      	bcs.n	800815e <mg_dns_parse_name_depth+0x134>
 8008154:	683a      	ldr	r2, [r7, #0]
 8008156:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008158:	4413      	add	r3, r2
 800815a:	2200      	movs	r2, #0
 800815c:	701a      	strb	r2, [r3, #0]
  while (ofs + i + 1 < len) {
 800815e:	687a      	ldr	r2, [r7, #4]
 8008160:	69fb      	ldr	r3, [r7, #28]
 8008162:	4413      	add	r3, r2
 8008164:	3301      	adds	r3, #1
 8008166:	68ba      	ldr	r2, [r7, #8]
 8008168:	429a      	cmp	r2, r3
 800816a:	f63f af76 	bhi.w	800805a <mg_dns_parse_name_depth+0x30>
    // MG_INFO(("--> [%s]", to));
  }
  if (tolen > 0) to[tolen - 1] = '\0';  // Make sure make sure it is nul-term
 800816e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008170:	2b00      	cmp	r3, #0
 8008172:	d005      	beq.n	8008180 <mg_dns_parse_name_depth+0x156>
 8008174:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008176:	3b01      	subs	r3, #1
 8008178:	683a      	ldr	r2, [r7, #0]
 800817a:	4413      	add	r3, r2
 800817c:	2200      	movs	r2, #0
 800817e:	701a      	strb	r2, [r3, #0]
  return i;
 8008180:	69fb      	ldr	r3, [r7, #28]
}
 8008182:	4618      	mov	r0, r3
 8008184:	3720      	adds	r7, #32
 8008186:	46bd      	mov	sp, r7
 8008188:	bd80      	pop	{r7, pc}

0800818a <mg_dns_parse_name>:

static size_t mg_dns_parse_name(const uint8_t *s, size_t n, size_t ofs,
                                char *dst, size_t dstlen) {
 800818a:	b580      	push	{r7, lr}
 800818c:	b088      	sub	sp, #32
 800818e:	af04      	add	r7, sp, #16
 8008190:	60f8      	str	r0, [r7, #12]
 8008192:	60b9      	str	r1, [r7, #8]
 8008194:	607a      	str	r2, [r7, #4]
 8008196:	603b      	str	r3, [r7, #0]
  return mg_dns_parse_name_depth(s, n, ofs, dst, dstlen, 0, 0);
 8008198:	2300      	movs	r3, #0
 800819a:	9302      	str	r3, [sp, #8]
 800819c:	2300      	movs	r3, #0
 800819e:	9301      	str	r3, [sp, #4]
 80081a0:	69bb      	ldr	r3, [r7, #24]
 80081a2:	9300      	str	r3, [sp, #0]
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	687a      	ldr	r2, [r7, #4]
 80081a8:	68b9      	ldr	r1, [r7, #8]
 80081aa:	68f8      	ldr	r0, [r7, #12]
 80081ac:	f7ff ff3d 	bl	800802a <mg_dns_parse_name_depth>
 80081b0:	4603      	mov	r3, r0
}
 80081b2:	4618      	mov	r0, r3
 80081b4:	3710      	adds	r7, #16
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd80      	pop	{r7, pc}

080081ba <mg_dns_parse_rr>:

size_t mg_dns_parse_rr(const uint8_t *buf, size_t len, size_t ofs,
                       bool is_question, struct mg_dns_rr *rr) {
 80081ba:	b580      	push	{r7, lr}
 80081bc:	b088      	sub	sp, #32
 80081be:	af02      	add	r7, sp, #8
 80081c0:	60f8      	str	r0, [r7, #12]
 80081c2:	60b9      	str	r1, [r7, #8]
 80081c4:	607a      	str	r2, [r7, #4]
 80081c6:	70fb      	strb	r3, [r7, #3]
  const uint8_t *s = buf + ofs, *e = &buf[len];
 80081c8:	68fa      	ldr	r2, [r7, #12]
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	4413      	add	r3, r2
 80081ce:	617b      	str	r3, [r7, #20]
 80081d0:	68fa      	ldr	r2, [r7, #12]
 80081d2:	68bb      	ldr	r3, [r7, #8]
 80081d4:	4413      	add	r3, r2
 80081d6:	613b      	str	r3, [r7, #16]

  memset(rr, 0, sizeof(*rr));
 80081d8:	2208      	movs	r2, #8
 80081da:	2100      	movs	r1, #0
 80081dc:	6a38      	ldr	r0, [r7, #32]
 80081de:	f01f fa73 	bl	80276c8 <memset>
  if (len < sizeof(struct mg_dns_header)) return 0;  // Too small
 80081e2:	68bb      	ldr	r3, [r7, #8]
 80081e4:	2b0b      	cmp	r3, #11
 80081e6:	d801      	bhi.n	80081ec <mg_dns_parse_rr+0x32>
 80081e8:	2300      	movs	r3, #0
 80081ea:	e077      	b.n	80082dc <mg_dns_parse_rr+0x122>
  if (len > 512) return 0;  //  Too large, we don't expect that
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80081f2:	d901      	bls.n	80081f8 <mg_dns_parse_rr+0x3e>
 80081f4:	2300      	movs	r3, #0
 80081f6:	e071      	b.n	80082dc <mg_dns_parse_rr+0x122>
  if (s >= e) return 0;     //  Overflow
 80081f8:	697a      	ldr	r2, [r7, #20]
 80081fa:	693b      	ldr	r3, [r7, #16]
 80081fc:	429a      	cmp	r2, r3
 80081fe:	d301      	bcc.n	8008204 <mg_dns_parse_rr+0x4a>
 8008200:	2300      	movs	r3, #0
 8008202:	e06b      	b.n	80082dc <mg_dns_parse_rr+0x122>

  if ((rr->nlen = (uint16_t) mg_dns_parse_name(buf, len, ofs, NULL, 0)) == 0)
 8008204:	2300      	movs	r3, #0
 8008206:	9300      	str	r3, [sp, #0]
 8008208:	2300      	movs	r3, #0
 800820a:	687a      	ldr	r2, [r7, #4]
 800820c:	68b9      	ldr	r1, [r7, #8]
 800820e:	68f8      	ldr	r0, [r7, #12]
 8008210:	f7ff ffbb 	bl	800818a <mg_dns_parse_name>
 8008214:	4603      	mov	r3, r0
 8008216:	b29a      	uxth	r2, r3
 8008218:	6a3b      	ldr	r3, [r7, #32]
 800821a:	801a      	strh	r2, [r3, #0]
 800821c:	6a3b      	ldr	r3, [r7, #32]
 800821e:	881b      	ldrh	r3, [r3, #0]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d101      	bne.n	8008228 <mg_dns_parse_rr+0x6e>
    return 0;
 8008224:	2300      	movs	r3, #0
 8008226:	e059      	b.n	80082dc <mg_dns_parse_rr+0x122>
  s += rr->nlen + 4;
 8008228:	6a3b      	ldr	r3, [r7, #32]
 800822a:	881b      	ldrh	r3, [r3, #0]
 800822c:	3304      	adds	r3, #4
 800822e:	697a      	ldr	r2, [r7, #20]
 8008230:	4413      	add	r3, r2
 8008232:	617b      	str	r3, [r7, #20]
  if (s > e) return 0;
 8008234:	697a      	ldr	r2, [r7, #20]
 8008236:	693b      	ldr	r3, [r7, #16]
 8008238:	429a      	cmp	r2, r3
 800823a:	d901      	bls.n	8008240 <mg_dns_parse_rr+0x86>
 800823c:	2300      	movs	r3, #0
 800823e:	e04d      	b.n	80082dc <mg_dns_parse_rr+0x122>
  rr->atype = (uint16_t) (((uint16_t) s[-4] << 8) | s[-3]);
 8008240:	697b      	ldr	r3, [r7, #20]
 8008242:	3b04      	subs	r3, #4
 8008244:	781b      	ldrb	r3, [r3, #0]
 8008246:	b21b      	sxth	r3, r3
 8008248:	021b      	lsls	r3, r3, #8
 800824a:	b21a      	sxth	r2, r3
 800824c:	697b      	ldr	r3, [r7, #20]
 800824e:	3b03      	subs	r3, #3
 8008250:	781b      	ldrb	r3, [r3, #0]
 8008252:	b21b      	sxth	r3, r3
 8008254:	4313      	orrs	r3, r2
 8008256:	b21b      	sxth	r3, r3
 8008258:	b29a      	uxth	r2, r3
 800825a:	6a3b      	ldr	r3, [r7, #32]
 800825c:	805a      	strh	r2, [r3, #2]
  rr->aclass = (uint16_t) (((uint16_t) s[-2] << 8) | s[-1]);
 800825e:	697b      	ldr	r3, [r7, #20]
 8008260:	3b02      	subs	r3, #2
 8008262:	781b      	ldrb	r3, [r3, #0]
 8008264:	b21b      	sxth	r3, r3
 8008266:	021b      	lsls	r3, r3, #8
 8008268:	b21a      	sxth	r2, r3
 800826a:	697b      	ldr	r3, [r7, #20]
 800826c:	3b01      	subs	r3, #1
 800826e:	781b      	ldrb	r3, [r3, #0]
 8008270:	b21b      	sxth	r3, r3
 8008272:	4313      	orrs	r3, r2
 8008274:	b21b      	sxth	r3, r3
 8008276:	b29a      	uxth	r2, r3
 8008278:	6a3b      	ldr	r3, [r7, #32]
 800827a:	809a      	strh	r2, [r3, #4]
  if (is_question) return (size_t) (rr->nlen + 4);
 800827c:	78fb      	ldrb	r3, [r7, #3]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d003      	beq.n	800828a <mg_dns_parse_rr+0xd0>
 8008282:	6a3b      	ldr	r3, [r7, #32]
 8008284:	881b      	ldrh	r3, [r3, #0]
 8008286:	3304      	adds	r3, #4
 8008288:	e028      	b.n	80082dc <mg_dns_parse_rr+0x122>

  s += 6;
 800828a:	697b      	ldr	r3, [r7, #20]
 800828c:	3306      	adds	r3, #6
 800828e:	617b      	str	r3, [r7, #20]
  if (s > e) return 0;
 8008290:	697a      	ldr	r2, [r7, #20]
 8008292:	693b      	ldr	r3, [r7, #16]
 8008294:	429a      	cmp	r2, r3
 8008296:	d901      	bls.n	800829c <mg_dns_parse_rr+0xe2>
 8008298:	2300      	movs	r3, #0
 800829a:	e01f      	b.n	80082dc <mg_dns_parse_rr+0x122>
  rr->alen = (uint16_t) (((uint16_t) s[-2] << 8) | s[-1]);
 800829c:	697b      	ldr	r3, [r7, #20]
 800829e:	3b02      	subs	r3, #2
 80082a0:	781b      	ldrb	r3, [r3, #0]
 80082a2:	b21b      	sxth	r3, r3
 80082a4:	021b      	lsls	r3, r3, #8
 80082a6:	b21a      	sxth	r2, r3
 80082a8:	697b      	ldr	r3, [r7, #20]
 80082aa:	3b01      	subs	r3, #1
 80082ac:	781b      	ldrb	r3, [r3, #0]
 80082ae:	b21b      	sxth	r3, r3
 80082b0:	4313      	orrs	r3, r2
 80082b2:	b21b      	sxth	r3, r3
 80082b4:	b29a      	uxth	r2, r3
 80082b6:	6a3b      	ldr	r3, [r7, #32]
 80082b8:	80da      	strh	r2, [r3, #6]
  if (s + rr->alen > e) return 0;
 80082ba:	6a3b      	ldr	r3, [r7, #32]
 80082bc:	88db      	ldrh	r3, [r3, #6]
 80082be:	461a      	mov	r2, r3
 80082c0:	697b      	ldr	r3, [r7, #20]
 80082c2:	4413      	add	r3, r2
 80082c4:	693a      	ldr	r2, [r7, #16]
 80082c6:	429a      	cmp	r2, r3
 80082c8:	d201      	bcs.n	80082ce <mg_dns_parse_rr+0x114>
 80082ca:	2300      	movs	r3, #0
 80082cc:	e006      	b.n	80082dc <mg_dns_parse_rr+0x122>
  return (size_t) (rr->nlen + rr->alen + 10);
 80082ce:	6a3b      	ldr	r3, [r7, #32]
 80082d0:	881b      	ldrh	r3, [r3, #0]
 80082d2:	461a      	mov	r2, r3
 80082d4:	6a3b      	ldr	r3, [r7, #32]
 80082d6:	88db      	ldrh	r3, [r3, #6]
 80082d8:	4413      	add	r3, r2
 80082da:	330a      	adds	r3, #10
}
 80082dc:	4618      	mov	r0, r3
 80082de:	3718      	adds	r7, #24
 80082e0:	46bd      	mov	sp, r7
 80082e2:	bd80      	pop	{r7, pc}

080082e4 <mg_dns_parse>:

bool mg_dns_parse(const uint8_t *buf, size_t len, struct mg_dns_message *dm) {
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b08e      	sub	sp, #56	@ 0x38
 80082e8:	af02      	add	r7, sp, #8
 80082ea:	60f8      	str	r0, [r7, #12]
 80082ec:	60b9      	str	r1, [r7, #8]
 80082ee:	607a      	str	r2, [r7, #4]
  const struct mg_dns_header *h = (struct mg_dns_header *) buf;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	623b      	str	r3, [r7, #32]
  struct mg_dns_rr rr;
  size_t i, n, num_answers, ofs = sizeof(*h);
 80082f4:	230c      	movs	r3, #12
 80082f6:	627b      	str	r3, [r7, #36]	@ 0x24
  bool is_response;
  memset(dm, 0, sizeof(*dm));
 80082f8:	f44f 728c 	mov.w	r2, #280	@ 0x118
 80082fc:	2100      	movs	r1, #0
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	f01f f9e2 	bl	80276c8 <memset>

  if (len < sizeof(*h)) return 0;                // Too small, headers dont fit
 8008304:	68bb      	ldr	r3, [r7, #8]
 8008306:	2b0b      	cmp	r3, #11
 8008308:	d801      	bhi.n	800830e <mg_dns_parse+0x2a>
 800830a:	2300      	movs	r3, #0
 800830c:	e0c8      	b.n	80084a0 <mg_dns_parse+0x1bc>
  if (mg_ntohs(h->num_questions) > 1) return 0;  // Sanity
 800830e:	6a3b      	ldr	r3, [r7, #32]
 8008310:	889b      	ldrh	r3, [r3, #4]
 8008312:	4618      	mov	r0, r3
 8008314:	f019 fd60 	bl	8021dd8 <mg_ntohs>
 8008318:	4603      	mov	r3, r0
 800831a:	2b01      	cmp	r3, #1
 800831c:	d901      	bls.n	8008322 <mg_dns_parse+0x3e>
 800831e:	2300      	movs	r3, #0
 8008320:	e0be      	b.n	80084a0 <mg_dns_parse+0x1bc>
  num_answers = mg_ntohs(h->num_answers);
 8008322:	6a3b      	ldr	r3, [r7, #32]
 8008324:	88db      	ldrh	r3, [r3, #6]
 8008326:	4618      	mov	r0, r3
 8008328:	f019 fd56 	bl	8021dd8 <mg_ntohs>
 800832c:	4603      	mov	r3, r0
 800832e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (num_answers > 10) {
 8008330:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008332:	2b0a      	cmp	r3, #10
 8008334:	d90f      	bls.n	8008356 <mg_dns_parse+0x72>
    MG_DEBUG(("Got %u answers, ignoring beyond 10th one", num_answers));
 8008336:	4b5c      	ldr	r3, [pc, #368]	@ (80084a8 <mg_dns_parse+0x1c4>)
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	2b02      	cmp	r3, #2
 800833c:	dd09      	ble.n	8008352 <mg_dns_parse+0x6e>
 800833e:	4b5b      	ldr	r3, [pc, #364]	@ (80084ac <mg_dns_parse+0x1c8>)
 8008340:	22e7      	movs	r2, #231	@ 0xe7
 8008342:	495b      	ldr	r1, [pc, #364]	@ (80084b0 <mg_dns_parse+0x1cc>)
 8008344:	2003      	movs	r0, #3
 8008346:	f006 faad 	bl	800e8a4 <mg_log_prefix>
 800834a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800834c:	4859      	ldr	r0, [pc, #356]	@ (80084b4 <mg_dns_parse+0x1d0>)
 800834e:	f006 faf9 	bl	800e944 <mg_log>
    num_answers = 10;  // Sanity cap
 8008352:	230a      	movs	r3, #10
 8008354:	62bb      	str	r3, [r7, #40]	@ 0x28
  }
  dm->txnid = mg_ntohs(h->txnid);
 8008356:	6a3b      	ldr	r3, [r7, #32]
 8008358:	881b      	ldrh	r3, [r3, #0]
 800835a:	4618      	mov	r0, r3
 800835c:	f019 fd3c 	bl	8021dd8 <mg_ntohs>
 8008360:	4603      	mov	r3, r0
 8008362:	461a      	mov	r2, r3
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	801a      	strh	r2, [r3, #0]
  is_response = mg_ntohs(h->flags) & 0x8000;
 8008368:	6a3b      	ldr	r3, [r7, #32]
 800836a:	885b      	ldrh	r3, [r3, #2]
 800836c:	4618      	mov	r0, r3
 800836e:	f019 fd33 	bl	8021dd8 <mg_ntohs>
 8008372:	4603      	mov	r3, r0
 8008374:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008378:	2b00      	cmp	r3, #0
 800837a:	bf14      	ite	ne
 800837c:	2301      	movne	r3, #1
 800837e:	2300      	moveq	r3, #0
 8008380:	77fb      	strb	r3, [r7, #31]

  for (i = 0; i < mg_ntohs(h->num_questions); i++) {
 8008382:	2300      	movs	r3, #0
 8008384:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008386:	e01f      	b.n	80083c8 <mg_dns_parse+0xe4>
    if ((n = mg_dns_parse_rr(buf, len, ofs, true, &rr)) == 0) return false;
 8008388:	f107 0310 	add.w	r3, r7, #16
 800838c:	9300      	str	r3, [sp, #0]
 800838e:	2301      	movs	r3, #1
 8008390:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008392:	68b9      	ldr	r1, [r7, #8]
 8008394:	68f8      	ldr	r0, [r7, #12]
 8008396:	f7ff ff10 	bl	80081ba <mg_dns_parse_rr>
 800839a:	61b8      	str	r0, [r7, #24]
 800839c:	69bb      	ldr	r3, [r7, #24]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d101      	bne.n	80083a6 <mg_dns_parse+0xc2>
 80083a2:	2300      	movs	r3, #0
 80083a4:	e07c      	b.n	80084a0 <mg_dns_parse+0x1bc>
    // MG_INFO(("Q %lu %lu %hu/%hu", ofs, n, rr.atype, rr.aclass));
    mg_dns_parse_name(buf, len, ofs, dm->name, sizeof(dm->name));
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	3318      	adds	r3, #24
 80083aa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80083ae:	9200      	str	r2, [sp, #0]
 80083b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80083b2:	68b9      	ldr	r1, [r7, #8]
 80083b4:	68f8      	ldr	r0, [r7, #12]
 80083b6:	f7ff fee8 	bl	800818a <mg_dns_parse_name>
    ofs += n;
 80083ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80083bc:	69bb      	ldr	r3, [r7, #24]
 80083be:	4413      	add	r3, r2
 80083c0:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0; i < mg_ntohs(h->num_questions); i++) {
 80083c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083c4:	3301      	adds	r3, #1
 80083c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80083c8:	6a3b      	ldr	r3, [r7, #32]
 80083ca:	889b      	ldrh	r3, [r3, #4]
 80083cc:	4618      	mov	r0, r3
 80083ce:	f019 fd03 	bl	8021dd8 <mg_ntohs>
 80083d2:	4603      	mov	r3, r0
 80083d4:	461a      	mov	r2, r3
 80083d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083d8:	4293      	cmp	r3, r2
 80083da:	d3d5      	bcc.n	8008388 <mg_dns_parse+0xa4>
  }

  if (!is_response) {
 80083dc:	7ffb      	ldrb	r3, [r7, #31]
 80083de:	f083 0301 	eor.w	r3, r3, #1
 80083e2:	b2db      	uxtb	r3, r3
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d001      	beq.n	80083ec <mg_dns_parse+0x108>
    // For queries, there is no need to parse the answers. In this way,
    // we also ensure the domain name (dm->name) is parsed from
    // the question field.
    return true;
 80083e8:	2301      	movs	r3, #1
 80083ea:	e059      	b.n	80084a0 <mg_dns_parse+0x1bc>
  }

  for (i = 0; i < num_answers; i++) {
 80083ec:	2300      	movs	r3, #0
 80083ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80083f0:	e051      	b.n	8008496 <mg_dns_parse+0x1b2>
    if ((n = mg_dns_parse_rr(buf, len, ofs, false, &rr)) == 0) return false;
 80083f2:	f107 0310 	add.w	r3, r7, #16
 80083f6:	9300      	str	r3, [sp, #0]
 80083f8:	2300      	movs	r3, #0
 80083fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80083fc:	68b9      	ldr	r1, [r7, #8]
 80083fe:	68f8      	ldr	r0, [r7, #12]
 8008400:	f7ff fedb 	bl	80081ba <mg_dns_parse_rr>
 8008404:	61b8      	str	r0, [r7, #24]
 8008406:	69bb      	ldr	r3, [r7, #24]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d101      	bne.n	8008410 <mg_dns_parse+0x12c>
 800840c:	2300      	movs	r3, #0
 800840e:	e047      	b.n	80084a0 <mg_dns_parse+0x1bc>
    // MG_INFO(("A -- %lu %lu %hu/%hu %s", ofs, n, rr.atype, rr.aclass,
    // dm->name));
    mg_dns_parse_name(buf, len, ofs, dm->name, sizeof(dm->name));
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	3318      	adds	r3, #24
 8008414:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008418:	9200      	str	r2, [sp, #0]
 800841a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800841c:	68b9      	ldr	r1, [r7, #8]
 800841e:	68f8      	ldr	r0, [r7, #12]
 8008420:	f7ff feb3 	bl	800818a <mg_dns_parse_name>
    ofs += n;
 8008424:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008426:	69bb      	ldr	r3, [r7, #24]
 8008428:	4413      	add	r3, r2
 800842a:	627b      	str	r3, [r7, #36]	@ 0x24

    if (rr.alen == 4 && rr.atype == 1 && rr.aclass == 1) {
 800842c:	8afb      	ldrh	r3, [r7, #22]
 800842e:	2b04      	cmp	r3, #4
 8008430:	d114      	bne.n	800845c <mg_dns_parse+0x178>
 8008432:	8a7b      	ldrh	r3, [r7, #18]
 8008434:	2b01      	cmp	r3, #1
 8008436:	d111      	bne.n	800845c <mg_dns_parse+0x178>
 8008438:	8abb      	ldrh	r3, [r7, #20]
 800843a:	2b01      	cmp	r3, #1
 800843c:	d10e      	bne.n	800845c <mg_dns_parse+0x178>
      dm->addr.is_ip6 = false;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2200      	movs	r2, #0
 8008442:	75da      	strb	r2, [r3, #23]
      memcpy(&dm->addr.ip, &buf[ofs - 4], 4);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	3304      	adds	r3, #4
 8008448:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800844a:	3a04      	subs	r2, #4
 800844c:	68f9      	ldr	r1, [r7, #12]
 800844e:	440a      	add	r2, r1
 8008450:	6812      	ldr	r2, [r2, #0]
 8008452:	601a      	str	r2, [r3, #0]
      dm->resolved = true;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2201      	movs	r2, #1
 8008458:	709a      	strb	r2, [r3, #2]
      break;  // Return success
 800845a:	e020      	b.n	800849e <mg_dns_parse+0x1ba>
    } else if (rr.alen == 16 && rr.atype == 28 && rr.aclass == 1) {
 800845c:	8afb      	ldrh	r3, [r7, #22]
 800845e:	2b10      	cmp	r3, #16
 8008460:	d116      	bne.n	8008490 <mg_dns_parse+0x1ac>
 8008462:	8a7b      	ldrh	r3, [r7, #18]
 8008464:	2b1c      	cmp	r3, #28
 8008466:	d113      	bne.n	8008490 <mg_dns_parse+0x1ac>
 8008468:	8abb      	ldrh	r3, [r7, #20]
 800846a:	2b01      	cmp	r3, #1
 800846c:	d110      	bne.n	8008490 <mg_dns_parse+0x1ac>
      dm->addr.is_ip6 = true;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	2201      	movs	r2, #1
 8008472:	75da      	strb	r2, [r3, #23]
      memcpy(&dm->addr.ip, &buf[ofs - 16], 16);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	1d18      	adds	r0, r3, #4
 8008478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800847a:	3b10      	subs	r3, #16
 800847c:	68fa      	ldr	r2, [r7, #12]
 800847e:	4413      	add	r3, r2
 8008480:	2210      	movs	r2, #16
 8008482:	4619      	mov	r1, r3
 8008484:	f01f fa59 	bl	802793a <memcpy>
      dm->resolved = true;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2201      	movs	r2, #1
 800848c:	709a      	strb	r2, [r3, #2]
      break;  // Return success
 800848e:	e006      	b.n	800849e <mg_dns_parse+0x1ba>
  for (i = 0; i < num_answers; i++) {
 8008490:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008492:	3301      	adds	r3, #1
 8008494:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008496:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008498:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800849a:	429a      	cmp	r2, r3
 800849c:	d3a9      	bcc.n	80083f2 <mg_dns_parse+0x10e>
    }
  }
  return true;
 800849e:	2301      	movs	r3, #1
}
 80084a0:	4618      	mov	r0, r3
 80084a2:	3730      	adds	r7, #48	@ 0x30
 80084a4:	46bd      	mov	sp, r7
 80084a6:	bd80      	pop	{r7, pc}
 80084a8:	24000258 	.word	0x24000258
 80084ac:	0802d7d8 	.word	0x0802d7d8
 80084b0:	08029c3c 	.word	0x08029c3c
 80084b4:	08029c54 	.word	0x08029c54

080084b8 <dns_cb>:

static void dns_cb(struct mg_connection *c, int ev, void *ev_data) {
 80084b8:	b5b0      	push	{r4, r5, r7, lr}
 80084ba:	b0d2      	sub	sp, #328	@ 0x148
 80084bc:	af02      	add	r7, sp, #8
 80084be:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80084c2:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80084c6:	6018      	str	r0, [r3, #0]
 80084c8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80084cc:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80084d0:	6019      	str	r1, [r3, #0]
 80084d2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80084d6:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80084da:	601a      	str	r2, [r3, #0]
  struct dns_data *d, *tmp;
  struct dns_data **head = (struct dns_data **) &c->mgr->active_dns_requests;
 80084dc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80084e0:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	685b      	ldr	r3, [r3, #4]
 80084e8:	332c      	adds	r3, #44	@ 0x2c
 80084ea:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  if (ev == MG_EV_POLL) {
 80084ee:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80084f2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	2b02      	cmp	r3, #2
 80084fa:	d12d      	bne.n	8008558 <dns_cb+0xa0>
    uint64_t now = *(uint64_t *) ev_data;
 80084fc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8008500:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800850a:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128
    for (d = *head; d != NULL; d = tmp) {
 800850e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8008518:	e019      	b.n	800854e <dns_cb+0x96>
      tmp = d->next;
 800851a:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
      // MG_DEBUG ("%lu %lu dns poll", d->expire, now));
      if (now > d->expire) mg_error(d->c, "DNS timeout");
 8008524:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8008528:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800852c:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8008530:	4290      	cmp	r0, r2
 8008532:	eb71 0303 	sbcs.w	r3, r1, r3
 8008536:	d206      	bcs.n	8008546 <dns_cb+0x8e>
 8008538:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800853c:	685b      	ldr	r3, [r3, #4]
 800853e:	4992      	ldr	r1, [pc, #584]	@ (8008788 <dns_cb+0x2d0>)
 8008540:	4618      	mov	r0, r3
 8008542:	f000 fb37 	bl	8008bb4 <mg_error>
    for (d = *head; d != NULL; d = tmp) {
 8008546:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800854a:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 800854e:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8008552:	2b00      	cmp	r3, #0
 8008554:	d1e1      	bne.n	800851a <dns_cb+0x62>
      tmp = d->next;
      mg_error(d->c, "DNS error");
      mg_dns_free(head, d);
    }
  }
}
 8008556:	e112      	b.n	800877e <dns_cb+0x2c6>
  } else if (ev == MG_EV_READ) {
 8008558:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800855c:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	2b07      	cmp	r3, #7
 8008564:	f040 80e4 	bne.w	8008730 <dns_cb+0x278>
    int resolved = 0;
 8008568:	2300      	movs	r3, #0
 800856a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    if (mg_dns_parse(c->recv.buf, c->recv.len, &dm) == false) {
 800856e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8008572:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800857a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800857e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008586:	f107 0210 	add.w	r2, r7, #16
 800858a:	4619      	mov	r1, r3
 800858c:	f7ff feaa 	bl	80082e4 <mg_dns_parse>
 8008590:	4603      	mov	r3, r0
 8008592:	f083 0301 	eor.w	r3, r3, #1
 8008596:	b2db      	uxtb	r3, r3
 8008598:	2b00      	cmp	r3, #0
 800859a:	d01e      	beq.n	80085da <dns_cb+0x122>
      MG_ERROR(("Unexpected DNS response:"));
 800859c:	4b7b      	ldr	r3, [pc, #492]	@ (800878c <dns_cb+0x2d4>)
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	dd09      	ble.n	80085b8 <dns_cb+0x100>
 80085a4:	4b7a      	ldr	r3, [pc, #488]	@ (8008790 <dns_cb+0x2d8>)
 80085a6:	f240 121f 	movw	r2, #287	@ 0x11f
 80085aa:	497a      	ldr	r1, [pc, #488]	@ (8008794 <dns_cb+0x2dc>)
 80085ac:	2001      	movs	r0, #1
 80085ae:	f006 f979 	bl	800e8a4 <mg_log_prefix>
 80085b2:	4879      	ldr	r0, [pc, #484]	@ (8008798 <dns_cb+0x2e0>)
 80085b4:	f006 f9c6 	bl	800e944 <mg_log>
      mg_hexdump(c->recv.buf, c->recv.len);
 80085b8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80085bc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80085c4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80085c8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085d0:	4619      	mov	r1, r3
 80085d2:	4610      	mov	r0, r2
 80085d4:	f006 f9ec 	bl	800e9b0 <mg_hexdump>
 80085d8:	e090      	b.n	80086fc <dns_cb+0x244>
      for (d = *head; d != NULL; d = tmp) {
 80085da:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 80085e4:	e085      	b.n	80086f2 <dns_cb+0x23a>
        tmp = d->next;
 80085e6:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
        if (dm.txnid != d->txnid) continue;
 80085f0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80085f4:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80085f8:	881a      	ldrh	r2, [r3, #0]
 80085fa:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80085fe:	8a1b      	ldrh	r3, [r3, #16]
 8008600:	429a      	cmp	r2, r3
 8008602:	d171      	bne.n	80086e8 <dns_cb+0x230>
        if (d->c->is_resolving) {
 8008604:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8008608:	685b      	ldr	r3, [r3, #4]
 800860a:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800860e:	f003 0308 	and.w	r3, r3, #8
 8008612:	b2db      	uxtb	r3, r3
 8008614:	2b00      	cmp	r3, #0
 8008616:	d04a      	beq.n	80086ae <dns_cb+0x1f6>
          if (dm.resolved) {
 8008618:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800861c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8008620:	789b      	ldrb	r3, [r3, #2]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d038      	beq.n	8008698 <dns_cb+0x1e0>
            dm.addr.port = d->c->rem.port;  // Save port
 8008626:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800862a:	685b      	ldr	r3, [r3, #4]
 800862c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800862e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8008632:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8008636:	829a      	strh	r2, [r3, #20]
            d->c->rem = dm.addr;            // Copy resolved address
 8008638:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800863c:	685a      	ldr	r2, [r3, #4]
 800863e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8008642:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8008646:	f102 041c 	add.w	r4, r2, #28
 800864a:	1d1d      	adds	r5, r3, #4
 800864c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800864e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008650:	682b      	ldr	r3, [r5, #0]
 8008652:	6023      	str	r3, [r4, #0]
            MG_DEBUG(
 8008654:	4b4d      	ldr	r3, [pc, #308]	@ (800878c <dns_cb+0x2d4>)
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	2b02      	cmp	r3, #2
 800865a:	dd16      	ble.n	800868a <dns_cb+0x1d2>
 800865c:	4b4c      	ldr	r3, [pc, #304]	@ (8008790 <dns_cb+0x2d8>)
 800865e:	f240 122b 	movw	r2, #299	@ 0x12b
 8008662:	494c      	ldr	r1, [pc, #304]	@ (8008794 <dns_cb+0x2dc>)
 8008664:	2003      	movs	r0, #3
 8008666:	f006 f91d 	bl	800e8a4 <mg_log_prefix>
 800866a:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800866e:	685b      	ldr	r3, [r3, #4]
 8008670:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8008672:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8008676:	685b      	ldr	r3, [r3, #4]
 8008678:	331c      	adds	r3, #28
 800867a:	f107 0210 	add.w	r2, r7, #16
 800867e:	3218      	adds	r2, #24
 8008680:	9300      	str	r3, [sp, #0]
 8008682:	4b46      	ldr	r3, [pc, #280]	@ (800879c <dns_cb+0x2e4>)
 8008684:	4846      	ldr	r0, [pc, #280]	@ (80087a0 <dns_cb+0x2e8>)
 8008686:	f006 f95d 	bl	800e944 <mg_log>
            mg_connect_resolved(d->c);
 800868a:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800868e:	685b      	ldr	r3, [r3, #4]
 8008690:	4618      	mov	r0, r3
 8008692:	f00a f865 	bl	8012760 <mg_connect_resolved>
 8008696:	e01d      	b.n	80086d4 <dns_cb+0x21c>
            mg_error(d->c, "%s DNS lookup failed", dm.name);
 8008698:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800869c:	6858      	ldr	r0, [r3, #4]
 800869e:	f107 0310 	add.w	r3, r7, #16
 80086a2:	3318      	adds	r3, #24
 80086a4:	461a      	mov	r2, r3
 80086a6:	493f      	ldr	r1, [pc, #252]	@ (80087a4 <dns_cb+0x2ec>)
 80086a8:	f000 fa84 	bl	8008bb4 <mg_error>
 80086ac:	e012      	b.n	80086d4 <dns_cb+0x21c>
          MG_ERROR(("%lu already resolved", d->c->id));
 80086ae:	4b37      	ldr	r3, [pc, #220]	@ (800878c <dns_cb+0x2d4>)
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	dd0e      	ble.n	80086d4 <dns_cb+0x21c>
 80086b6:	4b36      	ldr	r3, [pc, #216]	@ (8008790 <dns_cb+0x2d8>)
 80086b8:	f44f 729c 	mov.w	r2, #312	@ 0x138
 80086bc:	4935      	ldr	r1, [pc, #212]	@ (8008794 <dns_cb+0x2dc>)
 80086be:	2001      	movs	r0, #1
 80086c0:	f006 f8f0 	bl	800e8a4 <mg_log_prefix>
 80086c4:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80086c8:	685b      	ldr	r3, [r3, #4]
 80086ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80086cc:	4619      	mov	r1, r3
 80086ce:	4836      	ldr	r0, [pc, #216]	@ (80087a8 <dns_cb+0x2f0>)
 80086d0:	f006 f938 	bl	800e944 <mg_log>
        mg_dns_free(head, d);
 80086d4:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 80086d8:	f8d7 0134 	ldr.w	r0, [r7, #308]	@ 0x134
 80086dc:	f7ff fc68 	bl	8007fb0 <mg_dns_free>
        resolved = 1;
 80086e0:	2301      	movs	r3, #1
 80086e2:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 80086e6:	e000      	b.n	80086ea <dns_cb+0x232>
        if (dm.txnid != d->txnid) continue;
 80086e8:	bf00      	nop
      for (d = *head; d != NULL; d = tmp) {
 80086ea:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80086ee:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 80086f2:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	f47f af75 	bne.w	80085e6 <dns_cb+0x12e>
    if (!resolved) MG_ERROR(("stray DNS reply"));
 80086fc:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8008700:	2b00      	cmp	r3, #0
 8008702:	d10d      	bne.n	8008720 <dns_cb+0x268>
 8008704:	4b21      	ldr	r3, [pc, #132]	@ (800878c <dns_cb+0x2d4>)
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	2b00      	cmp	r3, #0
 800870a:	dd09      	ble.n	8008720 <dns_cb+0x268>
 800870c:	4b20      	ldr	r3, [pc, #128]	@ (8008790 <dns_cb+0x2d8>)
 800870e:	f44f 729f 	mov.w	r2, #318	@ 0x13e
 8008712:	4920      	ldr	r1, [pc, #128]	@ (8008794 <dns_cb+0x2dc>)
 8008714:	2001      	movs	r0, #1
 8008716:	f006 f8c5 	bl	800e8a4 <mg_log_prefix>
 800871a:	4824      	ldr	r0, [pc, #144]	@ (80087ac <dns_cb+0x2f4>)
 800871c:	f006 f912 	bl	800e944 <mg_log>
    c->recv.len = 0;
 8008720:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8008724:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	2200      	movs	r2, #0
 800872c:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800872e:	e026      	b.n	800877e <dns_cb+0x2c6>
  } else if (ev == MG_EV_CLOSE) {
 8008730:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8008734:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	2b09      	cmp	r3, #9
 800873c:	d11f      	bne.n	800877e <dns_cb+0x2c6>
    for (d = *head; d != NULL; d = tmp) {
 800873e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8008748:	e015      	b.n	8008776 <dns_cb+0x2be>
      tmp = d->next;
 800874a:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
      mg_error(d->c, "DNS error");
 8008754:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8008758:	685b      	ldr	r3, [r3, #4]
 800875a:	4915      	ldr	r1, [pc, #84]	@ (80087b0 <dns_cb+0x2f8>)
 800875c:	4618      	mov	r0, r3
 800875e:	f000 fa29 	bl	8008bb4 <mg_error>
      mg_dns_free(head, d);
 8008762:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8008766:	f8d7 0134 	ldr.w	r0, [r7, #308]	@ 0x134
 800876a:	f7ff fc21 	bl	8007fb0 <mg_dns_free>
    for (d = *head; d != NULL; d = tmp) {
 800876e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8008772:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8008776:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800877a:	2b00      	cmp	r3, #0
 800877c:	d1e5      	bne.n	800874a <dns_cb+0x292>
}
 800877e:	bf00      	nop
 8008780:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 8008784:	46bd      	mov	sp, r7
 8008786:	bdb0      	pop	{r4, r5, r7, pc}
 8008788:	08029c80 	.word	0x08029c80
 800878c:	24000258 	.word	0x24000258
 8008790:	0802d7e8 	.word	0x0802d7e8
 8008794:	08029c3c 	.word	0x08029c3c
 8008798:	08029c8c 	.word	0x08029c8c
 800879c:	08013303 	.word	0x08013303
 80087a0:	08029ca8 	.word	0x08029ca8
 80087a4:	08029cb8 	.word	0x08029cb8
 80087a8:	08029cd0 	.word	0x08029cd0
 80087ac:	08029ce8 	.word	0x08029ce8
 80087b0:	08029cf8 	.word	0x08029cf8

080087b4 <mg_dns_send>:

static bool mg_dns_send(struct mg_connection *c, const struct mg_str *name,
                        uint16_t txnid, bool ipv6) {
 80087b4:	b590      	push	{r4, r7, lr}
 80087b6:	b0cb      	sub	sp, #300	@ 0x12c
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	f507 7494 	add.w	r4, r7, #296	@ 0x128
 80087be:	f5a4 748e 	sub.w	r4, r4, #284	@ 0x11c
 80087c2:	6020      	str	r0, [r4, #0]
 80087c4:	f507 7094 	add.w	r0, r7, #296	@ 0x128
 80087c8:	f5a0 7090 	sub.w	r0, r0, #288	@ 0x120
 80087cc:	6001      	str	r1, [r0, #0]
 80087ce:	4619      	mov	r1, r3
 80087d0:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80087d4:	f5a3 7391 	sub.w	r3, r3, #290	@ 0x122
 80087d8:	801a      	strh	r2, [r3, #0]
 80087da:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80087de:	f2a3 1323 	subw	r3, r3, #291	@ 0x123
 80087e2:	460a      	mov	r2, r1
 80087e4:	701a      	strb	r2, [r3, #0]
  struct {
    struct mg_dns_header header;
    uint8_t data[256];
  } pkt;
  size_t i, n;
  memset(&pkt, 0, sizeof(pkt));
 80087e6:	f107 0314 	add.w	r3, r7, #20
 80087ea:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 80087ee:	2100      	movs	r1, #0
 80087f0:	4618      	mov	r0, r3
 80087f2:	f01e ff69 	bl	80276c8 <memset>
  pkt.header.txnid = mg_htons(txnid);
 80087f6:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80087fa:	f5a3 7391 	sub.w	r3, r3, #290	@ 0x122
 80087fe:	881b      	ldrh	r3, [r3, #0]
 8008800:	4618      	mov	r0, r3
 8008802:	f019 fae9 	bl	8021dd8 <mg_ntohs>
 8008806:	4603      	mov	r3, r0
 8008808:	461a      	mov	r2, r3
 800880a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800880e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8008812:	801a      	strh	r2, [r3, #0]
  pkt.header.flags = mg_htons(0x100);
 8008814:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8008818:	f019 fade 	bl	8021dd8 <mg_ntohs>
 800881c:	4603      	mov	r3, r0
 800881e:	461a      	mov	r2, r3
 8008820:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8008824:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8008828:	805a      	strh	r2, [r3, #2]
  pkt.header.num_questions = mg_htons(1);
 800882a:	2001      	movs	r0, #1
 800882c:	f019 fad4 	bl	8021dd8 <mg_ntohs>
 8008830:	4603      	mov	r3, r0
 8008832:	461a      	mov	r2, r3
 8008834:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8008838:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800883c:	809a      	strh	r2, [r3, #4]
  for (i = n = 0; i < sizeof(pkt.data) - 5; i++) {
 800883e:	2300      	movs	r3, #0
 8008840:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8008844:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8008848:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800884c:	e054      	b.n	80088f8 <mg_dns_send+0x144>
    if (name->buf[i] == '.' || i >= name->len) {
 800884e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8008852:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	681a      	ldr	r2, [r3, #0]
 800885a:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800885e:	4413      	add	r3, r2
 8008860:	781b      	ldrb	r3, [r3, #0]
 8008862:	2b2e      	cmp	r3, #46	@ 0x2e
 8008864:	d009      	beq.n	800887a <mg_dns_send+0xc6>
 8008866:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800886a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	685b      	ldr	r3, [r3, #4]
 8008872:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8008876:	429a      	cmp	r2, r3
 8008878:	d32f      	bcc.n	80088da <mg_dns_send+0x126>
      pkt.data[n] = (uint8_t) (i - n);
 800887a:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800887e:	b2da      	uxtb	r2, r3
 8008880:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8008884:	b2db      	uxtb	r3, r3
 8008886:	1ad3      	subs	r3, r2, r3
 8008888:	b2d9      	uxtb	r1, r3
 800888a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800888e:	f5a3 728a 	sub.w	r2, r3, #276	@ 0x114
 8008892:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8008896:	4413      	add	r3, r2
 8008898:	330c      	adds	r3, #12
 800889a:	460a      	mov	r2, r1
 800889c:	701a      	strb	r2, [r3, #0]
      memcpy(&pkt.data[n + 1], name->buf + n, i - n);
 800889e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80088a2:	3301      	adds	r3, #1
 80088a4:	f107 0214 	add.w	r2, r7, #20
 80088a8:	3308      	adds	r3, #8
 80088aa:	4413      	add	r3, r2
 80088ac:	1d18      	adds	r0, r3, #4
 80088ae:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80088b2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	681a      	ldr	r2, [r3, #0]
 80088ba:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80088be:	18d1      	adds	r1, r2, r3
 80088c0:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80088c4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80088c8:	1ad3      	subs	r3, r2, r3
 80088ca:	461a      	mov	r2, r3
 80088cc:	f01f f835 	bl	802793a <memcpy>
      n = i + 1;
 80088d0:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80088d4:	3301      	adds	r3, #1
 80088d6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    }
    if (i >= name->len) break;
 80088da:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80088de:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	685b      	ldr	r3, [r3, #4]
 80088e6:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80088ea:	429a      	cmp	r2, r3
 80088ec:	d209      	bcs.n	8008902 <mg_dns_send+0x14e>
  for (i = n = 0; i < sizeof(pkt.data) - 5; i++) {
 80088ee:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80088f2:	3301      	adds	r3, #1
 80088f4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80088f8:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80088fc:	2bfa      	cmp	r3, #250	@ 0xfa
 80088fe:	d9a6      	bls.n	800884e <mg_dns_send+0x9a>
 8008900:	e000      	b.n	8008904 <mg_dns_send+0x150>
    if (i >= name->len) break;
 8008902:	bf00      	nop
  }
  memcpy(&pkt.data[n], "\x00\x00\x01\x00\x01", 5);  // A query
 8008904:	f107 0214 	add.w	r2, r7, #20
 8008908:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800890c:	3308      	adds	r3, #8
 800890e:	4413      	add	r3, r2
 8008910:	3304      	adds	r3, #4
 8008912:	2205      	movs	r2, #5
 8008914:	4916      	ldr	r1, [pc, #88]	@ (8008970 <mg_dns_send+0x1bc>)
 8008916:	4618      	mov	r0, r3
 8008918:	f01f f80f 	bl	802793a <memcpy>
  n += 5;
 800891c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8008920:	3305      	adds	r3, #5
 8008922:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  if (ipv6) pkt.data[n - 3] = 0x1c;  // AAAA query
 8008926:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800892a:	f2a3 1323 	subw	r3, r3, #291	@ 0x123
 800892e:	781b      	ldrb	r3, [r3, #0]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d009      	beq.n	8008948 <mg_dns_send+0x194>
 8008934:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8008938:	3b03      	subs	r3, #3
 800893a:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 800893e:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 8008942:	4413      	add	r3, r2
 8008944:	221c      	movs	r2, #28
 8008946:	731a      	strb	r2, [r3, #12]
  // memcpy(&pkt.data[n], "\xc0\x0c\x00\x1c\x00\x01", 6);  // AAAA query
  // n += 6;
  return mg_send(c, &pkt, sizeof(pkt.header) + n);
 8008948:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800894c:	f103 020c 	add.w	r2, r3, #12
 8008950:	f107 0114 	add.w	r1, r7, #20
 8008954:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8008958:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800895c:	6818      	ldr	r0, [r3, #0]
 800895e:	f00a fa39 	bl	8012dd4 <mg_send>
 8008962:	4603      	mov	r3, r0
}
 8008964:	4618      	mov	r0, r3
 8008966:	f507 7796 	add.w	r7, r7, #300	@ 0x12c
 800896a:	46bd      	mov	sp, r7
 800896c:	bd90      	pop	{r4, r7, pc}
 800896e:	bf00      	nop
 8008970:	08029d04 	.word	0x08029d04

08008974 <mg_sendnsreq>:

static void mg_sendnsreq(struct mg_connection *c, struct mg_str *name, int ms,
                         struct mg_dns *dnsc, bool ipv6) {
 8008974:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8008978:	b088      	sub	sp, #32
 800897a:	af02      	add	r7, sp, #8
 800897c:	60f8      	str	r0, [r7, #12]
 800897e:	60b9      	str	r1, [r7, #8]
 8008980:	607a      	str	r2, [r7, #4]
 8008982:	603b      	str	r3, [r7, #0]
  struct dns_data *d = NULL;
 8008984:	2300      	movs	r3, #0
 8008986:	617b      	str	r3, [r7, #20]
  if (dnsc->url == NULL) {
 8008988:	683b      	ldr	r3, [r7, #0]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d104      	bne.n	800899a <mg_sendnsreq+0x26>
    mg_error(c, "DNS server URL is NULL. Call mg_mgr_init()");
 8008990:	494d      	ldr	r1, [pc, #308]	@ (8008ac8 <mg_sendnsreq+0x154>)
 8008992:	68f8      	ldr	r0, [r7, #12]
 8008994:	f000 f90e 	bl	8008bb4 <mg_error>
 8008998:	e017      	b.n	80089ca <mg_sendnsreq+0x56>
  } else if (dnsc->c == NULL) {
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	685b      	ldr	r3, [r3, #4]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d113      	bne.n	80089ca <mg_sendnsreq+0x56>
    dnsc->c = mg_connect(c->mgr, dnsc->url, NULL, NULL);
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	6858      	ldr	r0, [r3, #4]
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	6819      	ldr	r1, [r3, #0]
 80089aa:	2300      	movs	r3, #0
 80089ac:	2200      	movs	r2, #0
 80089ae:	f006 fbf7 	bl	800f1a0 <mg_connect>
 80089b2:	4602      	mov	r2, r0
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	605a      	str	r2, [r3, #4]
    if (dnsc->c != NULL) {
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	685b      	ldr	r3, [r3, #4]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d004      	beq.n	80089ca <mg_sendnsreq+0x56>
      dnsc->c->pfn = dns_cb;
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	685b      	ldr	r3, [r3, #4]
 80089c4:	4a41      	ldr	r2, [pc, #260]	@ (8008acc <mg_sendnsreq+0x158>)
 80089c6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      // dnsc->c->is_hexdumping = 1;
    }
  }
  if (dnsc->c == NULL) {
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	685b      	ldr	r3, [r3, #4]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d104      	bne.n	80089dc <mg_sendnsreq+0x68>
    mg_error(c, "resolver");
 80089d2:	493f      	ldr	r1, [pc, #252]	@ (8008ad0 <mg_sendnsreq+0x15c>)
 80089d4:	68f8      	ldr	r0, [r7, #12]
 80089d6:	f000 f8ed 	bl	8008bb4 <mg_error>
                name->buf, dnsc->url, d->txnid));
    if (!mg_dns_send(dnsc->c, name, d->txnid, ipv6)) {
      mg_error(dnsc->c, "DNS send");
    }
  }
}
 80089da:	e070      	b.n	8008abe <mg_sendnsreq+0x14a>
  } else if ((d = (struct dns_data *) calloc(1, sizeof(*d))) == NULL) {
 80089dc:	2118      	movs	r1, #24
 80089de:	2001      	movs	r0, #1
 80089e0:	f01c ffc4 	bl	802596c <calloc>
 80089e4:	4603      	mov	r3, r0
 80089e6:	617b      	str	r3, [r7, #20]
 80089e8:	697b      	ldr	r3, [r7, #20]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d104      	bne.n	80089f8 <mg_sendnsreq+0x84>
    mg_error(c, "resolve OOM");
 80089ee:	4939      	ldr	r1, [pc, #228]	@ (8008ad4 <mg_sendnsreq+0x160>)
 80089f0:	68f8      	ldr	r0, [r7, #12]
 80089f2:	f000 f8df 	bl	8008bb4 <mg_error>
}
 80089f6:	e062      	b.n	8008abe <mg_sendnsreq+0x14a>
    struct dns_data *reqs = (struct dns_data *) c->mgr->active_dns_requests;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	685b      	ldr	r3, [r3, #4]
 80089fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089fe:	613b      	str	r3, [r7, #16]
    d->txnid = reqs ? (uint16_t) (reqs->txnid + 1) : 1;
 8008a00:	693b      	ldr	r3, [r7, #16]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d004      	beq.n	8008a10 <mg_sendnsreq+0x9c>
 8008a06:	693b      	ldr	r3, [r7, #16]
 8008a08:	8a1b      	ldrh	r3, [r3, #16]
 8008a0a:	3301      	adds	r3, #1
 8008a0c:	b29a      	uxth	r2, r3
 8008a0e:	e000      	b.n	8008a12 <mg_sendnsreq+0x9e>
 8008a10:	2201      	movs	r2, #1
 8008a12:	697b      	ldr	r3, [r7, #20]
 8008a14:	821a      	strh	r2, [r3, #16]
    d->next = (struct dns_data *) c->mgr->active_dns_requests;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	685b      	ldr	r3, [r3, #4]
 8008a1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a1c:	697b      	ldr	r3, [r7, #20]
 8008a1e:	601a      	str	r2, [r3, #0]
    c->mgr->active_dns_requests = d;
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	685b      	ldr	r3, [r3, #4]
 8008a24:	697a      	ldr	r2, [r7, #20]
 8008a26:	62da      	str	r2, [r3, #44]	@ 0x2c
    d->expire = mg_millis() + (uint64_t) ms;
 8008a28:	f7f8 f892 	bl	8000b50 <mg_millis>
 8008a2c:	4602      	mov	r2, r0
 8008a2e:	460b      	mov	r3, r1
 8008a30:	6879      	ldr	r1, [r7, #4]
 8008a32:	17c8      	asrs	r0, r1, #31
 8008a34:	460c      	mov	r4, r1
 8008a36:	4605      	mov	r5, r0
 8008a38:	eb12 0804 	adds.w	r8, r2, r4
 8008a3c:	eb43 0905 	adc.w	r9, r3, r5
 8008a40:	697b      	ldr	r3, [r7, #20]
 8008a42:	e9c3 8902 	strd	r8, r9, [r3, #8]
    d->c = c;
 8008a46:	697b      	ldr	r3, [r7, #20]
 8008a48:	68fa      	ldr	r2, [r7, #12]
 8008a4a:	605a      	str	r2, [r3, #4]
    c->is_resolving = 1;
 8008a4c:	68fa      	ldr	r2, [r7, #12]
 8008a4e:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 8008a52:	f043 0308 	orr.w	r3, r3, #8
 8008a56:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
    MG_VERBOSE(("%lu resolving %.*s @ %s, txnid %hu", c->id, (int) name->len,
 8008a5a:	4b1f      	ldr	r3, [pc, #124]	@ (8008ad8 <mg_sendnsreq+0x164>)
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	2b03      	cmp	r3, #3
 8008a60:	dd18      	ble.n	8008a94 <mg_sendnsreq+0x120>
 8008a62:	4b1e      	ldr	r3, [pc, #120]	@ (8008adc <mg_sendnsreq+0x168>)
 8008a64:	f44f 72be 	mov.w	r2, #380	@ 0x17c
 8008a68:	491d      	ldr	r1, [pc, #116]	@ (8008ae0 <mg_sendnsreq+0x16c>)
 8008a6a:	2004      	movs	r0, #4
 8008a6c:	f005 ff1a 	bl	800e8a4 <mg_log_prefix>
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8008a74:	68bb      	ldr	r3, [r7, #8]
 8008a76:	685b      	ldr	r3, [r3, #4]
 8008a78:	461c      	mov	r4, r3
 8008a7a:	68bb      	ldr	r3, [r7, #8]
 8008a7c:	6818      	ldr	r0, [r3, #0]
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	697a      	ldr	r2, [r7, #20]
 8008a84:	8a12      	ldrh	r2, [r2, #16]
 8008a86:	9201      	str	r2, [sp, #4]
 8008a88:	9300      	str	r3, [sp, #0]
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	4622      	mov	r2, r4
 8008a8e:	4815      	ldr	r0, [pc, #84]	@ (8008ae4 <mg_sendnsreq+0x170>)
 8008a90:	f005 ff58 	bl	800e944 <mg_log>
    if (!mg_dns_send(dnsc->c, name, d->txnid, ipv6)) {
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	6858      	ldr	r0, [r3, #4]
 8008a98:	697b      	ldr	r3, [r7, #20]
 8008a9a:	8a1a      	ldrh	r2, [r3, #16]
 8008a9c:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8008aa0:	68b9      	ldr	r1, [r7, #8]
 8008aa2:	f7ff fe87 	bl	80087b4 <mg_dns_send>
 8008aa6:	4603      	mov	r3, r0
 8008aa8:	f083 0301 	eor.w	r3, r3, #1
 8008aac:	b2db      	uxtb	r3, r3
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d005      	beq.n	8008abe <mg_sendnsreq+0x14a>
      mg_error(dnsc->c, "DNS send");
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	685b      	ldr	r3, [r3, #4]
 8008ab6:	490c      	ldr	r1, [pc, #48]	@ (8008ae8 <mg_sendnsreq+0x174>)
 8008ab8:	4618      	mov	r0, r3
 8008aba:	f000 f87b 	bl	8008bb4 <mg_error>
}
 8008abe:	bf00      	nop
 8008ac0:	3718      	adds	r7, #24
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8008ac8:	08029d0c 	.word	0x08029d0c
 8008acc:	080084b9 	.word	0x080084b9
 8008ad0:	08029d38 	.word	0x08029d38
 8008ad4:	08029d44 	.word	0x08029d44
 8008ad8:	24000258 	.word	0x24000258
 8008adc:	0802d7f0 	.word	0x0802d7f0
 8008ae0:	08029c3c 	.word	0x08029c3c
 8008ae4:	08029d50 	.word	0x08029d50
 8008ae8:	08029d74 	.word	0x08029d74

08008aec <mg_resolve>:

void mg_resolve(struct mg_connection *c, const char *url) {
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b088      	sub	sp, #32
 8008af0:	af02      	add	r7, sp, #8
 8008af2:	6078      	str	r0, [r7, #4]
 8008af4:	6039      	str	r1, [r7, #0]
  struct mg_str host = mg_url_host(url);
 8008af6:	f107 030c 	add.w	r3, r7, #12
 8008afa:	6839      	ldr	r1, [r7, #0]
 8008afc:	4618      	mov	r0, r3
 8008afe:	f018 fff4 	bl	8021aea <mg_url_host>
  c->rem.port = mg_htons(mg_url_port(url));
 8008b02:	6838      	ldr	r0, [r7, #0]
 8008b04:	f019 f824 	bl	8021b50 <mg_url_port>
 8008b08:	4603      	mov	r3, r0
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	f019 f964 	bl	8021dd8 <mg_ntohs>
 8008b10:	4603      	mov	r3, r0
 8008b12:	461a      	mov	r2, r3
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	859a      	strh	r2, [r3, #44]	@ 0x2c
  if (mg_aton(host, &c->rem)) {
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	331c      	adds	r3, #28
 8008b1c:	461a      	mov	r2, r3
 8008b1e:	f107 030c 	add.w	r3, r7, #12
 8008b22:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008b26:	f006 fa6c 	bl	800f002 <mg_aton>
 8008b2a:	4603      	mov	r3, r0
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d003      	beq.n	8008b38 <mg_resolve+0x4c>
    // host is an IP address, do not fire name resolution
    mg_connect_resolved(c);
 8008b30:	6878      	ldr	r0, [r7, #4]
 8008b32:	f009 fe15 	bl	8012760 <mg_connect_resolved>
  } else {
    // host is not an IP, send DNS resolution request
    struct mg_dns *dns = c->mgr->use_dns6 ? &c->mgr->dns6 : &c->mgr->dns4;
    mg_sendnsreq(c, &host, c->mgr->dnstimeout, dns, c->mgr->use_dns6);
  }
}
 8008b36:	e019      	b.n	8008b6c <mg_resolve+0x80>
    struct mg_dns *dns = c->mgr->use_dns6 ? &c->mgr->dns6 : &c->mgr->dns4;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	685b      	ldr	r3, [r3, #4]
 8008b3c:	7e1b      	ldrb	r3, [r3, #24]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d003      	beq.n	8008b4a <mg_resolve+0x5e>
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	685b      	ldr	r3, [r3, #4]
 8008b46:	330c      	adds	r3, #12
 8008b48:	e002      	b.n	8008b50 <mg_resolve+0x64>
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	685b      	ldr	r3, [r3, #4]
 8008b4e:	3304      	adds	r3, #4
 8008b50:	617b      	str	r3, [r7, #20]
    mg_sendnsreq(c, &host, c->mgr->dnstimeout, dns, c->mgr->use_dns6);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	685b      	ldr	r3, [r3, #4]
 8008b56:	695a      	ldr	r2, [r3, #20]
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	685b      	ldr	r3, [r3, #4]
 8008b5c:	7e1b      	ldrb	r3, [r3, #24]
 8008b5e:	f107 010c 	add.w	r1, r7, #12
 8008b62:	9300      	str	r3, [sp, #0]
 8008b64:	697b      	ldr	r3, [r7, #20]
 8008b66:	6878      	ldr	r0, [r7, #4]
 8008b68:	f7ff ff04 	bl	8008974 <mg_sendnsreq>
}
 8008b6c:	bf00      	nop
 8008b6e:	3718      	adds	r7, #24
 8008b70:	46bd      	mov	sp, r7
 8008b72:	bd80      	pop	{r7, pc}

08008b74 <mg_call>:





void mg_call(struct mg_connection *c, int ev, void *ev_data) {
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b084      	sub	sp, #16
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	60f8      	str	r0, [r7, #12]
 8008b7c:	60b9      	str	r1, [r7, #8]
 8008b7e:	607a      	str	r2, [r7, #4]
  if (ev != MG_EV_POLL && ev < (int) (sizeof(names) / sizeof(names[0]))) {
    MG_PROF_ADD(c, names[ev]);
  }
#endif
  // Fire protocol handler first, user handler second. See #2559
  if (c->pfn != NULL) c->pfn(c, ev, ev_data);
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d006      	beq.n	8008b98 <mg_call+0x24>
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008b90:	687a      	ldr	r2, [r7, #4]
 8008b92:	68b9      	ldr	r1, [r7, #8]
 8008b94:	68f8      	ldr	r0, [r7, #12]
 8008b96:	4798      	blx	r3
  if (c->fn != NULL) c->fn(c, ev, ev_data);
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d005      	beq.n	8008bac <mg_call+0x38>
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008ba4:	687a      	ldr	r2, [r7, #4]
 8008ba6:	68b9      	ldr	r1, [r7, #8]
 8008ba8:	68f8      	ldr	r0, [r7, #12]
 8008baa:	4798      	blx	r3
}
 8008bac:	bf00      	nop
 8008bae:	3710      	adds	r7, #16
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	bd80      	pop	{r7, pc}

08008bb4 <mg_error>:

void mg_error(struct mg_connection *c, const char *fmt, ...) {
 8008bb4:	b40e      	push	{r1, r2, r3}
 8008bb6:	b580      	push	{r7, lr}
 8008bb8:	b095      	sub	sp, #84	@ 0x54
 8008bba:	af00      	add	r7, sp, #0
 8008bbc:	6078      	str	r0, [r7, #4]
  char buf[64];
  va_list ap;
  va_start(ap, fmt);
 8008bbe:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8008bc2:	60fb      	str	r3, [r7, #12]
  mg_vsnprintf(buf, sizeof(buf), fmt, &ap);
 8008bc4:	f107 030c 	add.w	r3, r7, #12
 8008bc8:	f107 0010 	add.w	r0, r7, #16
 8008bcc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008bce:	2140      	movs	r1, #64	@ 0x40
 8008bd0:	f00a fa7c 	bl	80130cc <mg_vsnprintf>
  va_end(ap);
  MG_ERROR(("%lu %ld %s", c->id, c->fd, buf));
 8008bd4:	4b14      	ldr	r3, [pc, #80]	@ (8008c28 <mg_error+0x74>)
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	dd0f      	ble.n	8008bfc <mg_error+0x48>
 8008bdc:	4b13      	ldr	r3, [pc, #76]	@ (8008c2c <mg_error+0x78>)
 8008bde:	f44f 72fb 	mov.w	r2, #502	@ 0x1f6
 8008be2:	4913      	ldr	r1, [pc, #76]	@ (8008c30 <mg_error+0x7c>)
 8008be4:	2001      	movs	r0, #1
 8008be6:	f005 fe5d 	bl	800e8a4 <mg_log_prefix>
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008bf2:	f107 0310 	add.w	r3, r7, #16
 8008bf6:	480f      	ldr	r0, [pc, #60]	@ (8008c34 <mg_error+0x80>)
 8008bf8:	f005 fea4 	bl	800e944 <mg_log>
  c->is_closing = 1;             // Set is_closing before sending MG_EV_CALL
 8008bfc:	687a      	ldr	r2, [r7, #4]
 8008bfe:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8008c02:	f043 0320 	orr.w	r3, r3, #32
 8008c06:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
  mg_call(c, MG_EV_ERROR, buf);  // Let user handler override it
 8008c0a:	f107 0310 	add.w	r3, r7, #16
 8008c0e:	461a      	mov	r2, r3
 8008c10:	2100      	movs	r1, #0
 8008c12:	6878      	ldr	r0, [r7, #4]
 8008c14:	f7ff ffae 	bl	8008b74 <mg_call>
}
 8008c18:	bf00      	nop
 8008c1a:	3754      	adds	r7, #84	@ 0x54
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008c22:	b003      	add	sp, #12
 8008c24:	4770      	bx	lr
 8008c26:	bf00      	nop
 8008c28:	24000258 	.word	0x24000258
 8008c2c:	0802d800 	.word	0x0802d800
 8008c30:	08029c3c 	.word	0x08029c3c
 8008c34:	08029dec 	.word	0x08029dec

08008c38 <mg_ota_flash_begin>:

static char *s_addr;      // Current address to write to
static size_t s_size;     // Firmware size to flash. In-progress indicator
static uint32_t s_crc32;  // Firmware checksum

bool mg_ota_flash_begin(size_t new_firmware_size, struct mg_flash *flash) {
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b084      	sub	sp, #16
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
 8008c40:	6039      	str	r1, [r7, #0]
  bool ok = false;
 8008c42:	2300      	movs	r3, #0
 8008c44:	73fb      	strb	r3, [r7, #15]
  if (s_size) {
 8008c46:	4b30      	ldr	r3, [pc, #192]	@ (8008d08 <mg_ota_flash_begin+0xd0>)
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d00e      	beq.n	8008c6c <mg_ota_flash_begin+0x34>
    MG_ERROR(("OTA already in progress. Call mg_ota_end()"));
 8008c4e:	4b2f      	ldr	r3, [pc, #188]	@ (8008d0c <mg_ota_flash_begin+0xd4>)
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	dd52      	ble.n	8008cfc <mg_ota_flash_begin+0xc4>
 8008c56:	4b2e      	ldr	r3, [pc, #184]	@ (8008d10 <mg_ota_flash_begin+0xd8>)
 8008c58:	f44f 7203 	mov.w	r2, #524	@ 0x20c
 8008c5c:	492d      	ldr	r1, [pc, #180]	@ (8008d14 <mg_ota_flash_begin+0xdc>)
 8008c5e:	2001      	movs	r0, #1
 8008c60:	f005 fe20 	bl	800e8a4 <mg_log_prefix>
 8008c64:	482c      	ldr	r0, [pc, #176]	@ (8008d18 <mg_ota_flash_begin+0xe0>)
 8008c66:	f005 fe6d 	bl	800e944 <mg_log>
 8008c6a:	e047      	b.n	8008cfc <mg_ota_flash_begin+0xc4>
  } else {
    size_t half = flash->size / 2;
 8008c6c:	683b      	ldr	r3, [r7, #0]
 8008c6e:	685b      	ldr	r3, [r3, #4]
 8008c70:	085b      	lsrs	r3, r3, #1
 8008c72:	60bb      	str	r3, [r7, #8]
    s_crc32 = 0;
 8008c74:	4b29      	ldr	r3, [pc, #164]	@ (8008d1c <mg_ota_flash_begin+0xe4>)
 8008c76:	2200      	movs	r2, #0
 8008c78:	601a      	str	r2, [r3, #0]
    s_addr = (char *) flash->start + half;
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	681a      	ldr	r2, [r3, #0]
 8008c7e:	68bb      	ldr	r3, [r7, #8]
 8008c80:	4413      	add	r3, r2
 8008c82:	4a27      	ldr	r2, [pc, #156]	@ (8008d20 <mg_ota_flash_begin+0xe8>)
 8008c84:	6013      	str	r3, [r2, #0]
    MG_DEBUG(("FW %lu bytes, max %lu", new_firmware_size, half));
 8008c86:	4b21      	ldr	r3, [pc, #132]	@ (8008d0c <mg_ota_flash_begin+0xd4>)
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	2b02      	cmp	r3, #2
 8008c8c:	dd0b      	ble.n	8008ca6 <mg_ota_flash_begin+0x6e>
 8008c8e:	4b20      	ldr	r3, [pc, #128]	@ (8008d10 <mg_ota_flash_begin+0xd8>)
 8008c90:	f240 2211 	movw	r2, #529	@ 0x211
 8008c94:	491f      	ldr	r1, [pc, #124]	@ (8008d14 <mg_ota_flash_begin+0xdc>)
 8008c96:	2003      	movs	r0, #3
 8008c98:	f005 fe04 	bl	800e8a4 <mg_log_prefix>
 8008c9c:	68ba      	ldr	r2, [r7, #8]
 8008c9e:	6879      	ldr	r1, [r7, #4]
 8008ca0:	4820      	ldr	r0, [pc, #128]	@ (8008d24 <mg_ota_flash_begin+0xec>)
 8008ca2:	f005 fe4f 	bl	800e944 <mg_log>
    if (new_firmware_size < half) {
 8008ca6:	687a      	ldr	r2, [r7, #4]
 8008ca8:	68bb      	ldr	r3, [r7, #8]
 8008caa:	429a      	cmp	r2, r3
 8008cac:	d216      	bcs.n	8008cdc <mg_ota_flash_begin+0xa4>
      ok = true;
 8008cae:	2301      	movs	r3, #1
 8008cb0:	73fb      	strb	r3, [r7, #15]
      s_size = new_firmware_size;
 8008cb2:	4a15      	ldr	r2, [pc, #84]	@ (8008d08 <mg_ota_flash_begin+0xd0>)
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	6013      	str	r3, [r2, #0]
      MG_INFO(("Starting OTA, firmware size %lu", s_size));
 8008cb8:	4b14      	ldr	r3, [pc, #80]	@ (8008d0c <mg_ota_flash_begin+0xd4>)
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	2b01      	cmp	r3, #1
 8008cbe:	dd1d      	ble.n	8008cfc <mg_ota_flash_begin+0xc4>
 8008cc0:	4b13      	ldr	r3, [pc, #76]	@ (8008d10 <mg_ota_flash_begin+0xd8>)
 8008cc2:	f240 2215 	movw	r2, #533	@ 0x215
 8008cc6:	4913      	ldr	r1, [pc, #76]	@ (8008d14 <mg_ota_flash_begin+0xdc>)
 8008cc8:	2002      	movs	r0, #2
 8008cca:	f005 fdeb 	bl	800e8a4 <mg_log_prefix>
 8008cce:	4b0e      	ldr	r3, [pc, #56]	@ (8008d08 <mg_ota_flash_begin+0xd0>)
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	4619      	mov	r1, r3
 8008cd4:	4814      	ldr	r0, [pc, #80]	@ (8008d28 <mg_ota_flash_begin+0xf0>)
 8008cd6:	f005 fe35 	bl	800e944 <mg_log>
 8008cda:	e00f      	b.n	8008cfc <mg_ota_flash_begin+0xc4>
    } else {
      MG_ERROR(("Firmware %lu is too big to fit %lu", new_firmware_size, half));
 8008cdc:	4b0b      	ldr	r3, [pc, #44]	@ (8008d0c <mg_ota_flash_begin+0xd4>)
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	dd0b      	ble.n	8008cfc <mg_ota_flash_begin+0xc4>
 8008ce4:	4b0a      	ldr	r3, [pc, #40]	@ (8008d10 <mg_ota_flash_begin+0xd8>)
 8008ce6:	f240 2217 	movw	r2, #535	@ 0x217
 8008cea:	490a      	ldr	r1, [pc, #40]	@ (8008d14 <mg_ota_flash_begin+0xdc>)
 8008cec:	2001      	movs	r0, #1
 8008cee:	f005 fdd9 	bl	800e8a4 <mg_log_prefix>
 8008cf2:	68ba      	ldr	r2, [r7, #8]
 8008cf4:	6879      	ldr	r1, [r7, #4]
 8008cf6:	480d      	ldr	r0, [pc, #52]	@ (8008d2c <mg_ota_flash_begin+0xf4>)
 8008cf8:	f005 fe24 	bl	800e944 <mg_log>
    }
  }
  return ok;
 8008cfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cfe:	4618      	mov	r0, r3
 8008d00:	3710      	adds	r7, #16
 8008d02:	46bd      	mov	sp, r7
 8008d04:	bd80      	pop	{r7, pc}
 8008d06:	bf00      	nop
 8008d08:	24002358 	.word	0x24002358
 8008d0c:	24000258 	.word	0x24000258
 8008d10:	0802d80c 	.word	0x0802d80c
 8008d14:	08029c3c 	.word	0x08029c3c
 8008d18:	08029df8 	.word	0x08029df8
 8008d1c:	2400235c 	.word	0x2400235c
 8008d20:	24002354 	.word	0x24002354
 8008d24:	08029e24 	.word	0x08029e24
 8008d28:	08029e3c 	.word	0x08029e3c
 8008d2c:	08029e5c 	.word	0x08029e5c

08008d30 <mg_ota_flash_write>:

bool mg_ota_flash_write(const void *buf, size_t len, struct mg_flash *flash) {
 8008d30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d34:	b08c      	sub	sp, #48	@ 0x30
 8008d36:	af02      	add	r7, sp, #8
 8008d38:	60f8      	str	r0, [r7, #12]
 8008d3a:	60b9      	str	r1, [r7, #8]
 8008d3c:	607a      	str	r2, [r7, #4]
  bool ok = false;
 8008d3e:	2300      	movs	r3, #0
 8008d40:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if (s_size == 0) {
 8008d44:	4b54      	ldr	r3, [pc, #336]	@ (8008e98 <mg_ota_flash_write+0x168>)
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d10f      	bne.n	8008d6c <mg_ota_flash_write+0x3c>
    MG_ERROR(("OTA is not started, call mg_ota_begin()"));
 8008d4c:	4b53      	ldr	r3, [pc, #332]	@ (8008e9c <mg_ota_flash_write+0x16c>)
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	f340 8099 	ble.w	8008e88 <mg_ota_flash_write+0x158>
 8008d56:	4b52      	ldr	r3, [pc, #328]	@ (8008ea0 <mg_ota_flash_write+0x170>)
 8008d58:	f44f 7208 	mov.w	r2, #544	@ 0x220
 8008d5c:	4951      	ldr	r1, [pc, #324]	@ (8008ea4 <mg_ota_flash_write+0x174>)
 8008d5e:	2001      	movs	r0, #1
 8008d60:	f005 fda0 	bl	800e8a4 <mg_log_prefix>
 8008d64:	4850      	ldr	r0, [pc, #320]	@ (8008ea8 <mg_ota_flash_write+0x178>)
 8008d66:	f005 fded 	bl	800e944 <mg_log>
 8008d6a:	e08d      	b.n	8008e88 <mg_ota_flash_write+0x158>
  } else {
    size_t len_aligned_down = MG_ROUND_DOWN(len, flash->align);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	68db      	ldr	r3, [r3, #12]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d009      	beq.n	8008d88 <mg_ota_flash_write+0x58>
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	68db      	ldr	r3, [r3, #12]
 8008d78:	68ba      	ldr	r2, [r7, #8]
 8008d7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d7e:	687a      	ldr	r2, [r7, #4]
 8008d80:	68d2      	ldr	r2, [r2, #12]
 8008d82:	fb02 f303 	mul.w	r3, r2, r3
 8008d86:	e000      	b.n	8008d8a <mg_ota_flash_write+0x5a>
 8008d88:	68bb      	ldr	r3, [r7, #8]
 8008d8a:	623b      	str	r3, [r7, #32]
    if (len_aligned_down) ok = flash->write_fn(s_addr, buf, len_aligned_down);
 8008d8c:	6a3b      	ldr	r3, [r7, #32]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d009      	beq.n	8008da6 <mg_ota_flash_write+0x76>
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	691b      	ldr	r3, [r3, #16]
 8008d96:	4a45      	ldr	r2, [pc, #276]	@ (8008eac <mg_ota_flash_write+0x17c>)
 8008d98:	6810      	ldr	r0, [r2, #0]
 8008d9a:	6a3a      	ldr	r2, [r7, #32]
 8008d9c:	68f9      	ldr	r1, [r7, #12]
 8008d9e:	4798      	blx	r3
 8008da0:	4603      	mov	r3, r0
 8008da2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (len_aligned_down < len) {
 8008da6:	6a3a      	ldr	r2, [r7, #32]
 8008da8:	68bb      	ldr	r3, [r7, #8]
 8008daa:	429a      	cmp	r2, r3
 8008dac:	d244      	bcs.n	8008e38 <mg_ota_flash_write+0x108>
 8008dae:	466b      	mov	r3, sp
 8008db0:	469a      	mov	sl, r3
      size_t left = len - len_aligned_down;
 8008db2:	68ba      	ldr	r2, [r7, #8]
 8008db4:	6a3b      	ldr	r3, [r7, #32]
 8008db6:	1ad3      	subs	r3, r2, r3
 8008db8:	61fb      	str	r3, [r7, #28]
      char tmp[flash->align];
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	68de      	ldr	r6, [r3, #12]
 8008dbe:	4633      	mov	r3, r6
 8008dc0:	3b01      	subs	r3, #1
 8008dc2:	61bb      	str	r3, [r7, #24]
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	46b0      	mov	r8, r6
 8008dc8:	4699      	mov	r9, r3
 8008dca:	f04f 0200 	mov.w	r2, #0
 8008dce:	f04f 0300 	mov.w	r3, #0
 8008dd2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008dd6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008dda:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008dde:	2300      	movs	r3, #0
 8008de0:	4634      	mov	r4, r6
 8008de2:	461d      	mov	r5, r3
 8008de4:	f04f 0200 	mov.w	r2, #0
 8008de8:	f04f 0300 	mov.w	r3, #0
 8008dec:	00eb      	lsls	r3, r5, #3
 8008dee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008df2:	00e2      	lsls	r2, r4, #3
 8008df4:	1df3      	adds	r3, r6, #7
 8008df6:	08db      	lsrs	r3, r3, #3
 8008df8:	00db      	lsls	r3, r3, #3
 8008dfa:	ebad 0d03 	sub.w	sp, sp, r3
 8008dfe:	ab02      	add	r3, sp, #8
 8008e00:	3300      	adds	r3, #0
 8008e02:	617b      	str	r3, [r7, #20]
      memset(tmp, 0xff, sizeof(tmp));
 8008e04:	4632      	mov	r2, r6
 8008e06:	21ff      	movs	r1, #255	@ 0xff
 8008e08:	6978      	ldr	r0, [r7, #20]
 8008e0a:	f01e fc5d 	bl	80276c8 <memset>
      memcpy(tmp, (char *) buf + len_aligned_down, left);
 8008e0e:	68fa      	ldr	r2, [r7, #12]
 8008e10:	6a3b      	ldr	r3, [r7, #32]
 8008e12:	4413      	add	r3, r2
 8008e14:	69fa      	ldr	r2, [r7, #28]
 8008e16:	4619      	mov	r1, r3
 8008e18:	6978      	ldr	r0, [r7, #20]
 8008e1a:	f01e fd8e 	bl	802793a <memcpy>
      ok = flash->write_fn(s_addr + len_aligned_down, tmp, sizeof(tmp));
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	691b      	ldr	r3, [r3, #16]
 8008e22:	4a22      	ldr	r2, [pc, #136]	@ (8008eac <mg_ota_flash_write+0x17c>)
 8008e24:	6811      	ldr	r1, [r2, #0]
 8008e26:	6a3a      	ldr	r2, [r7, #32]
 8008e28:	1888      	adds	r0, r1, r2
 8008e2a:	4632      	mov	r2, r6
 8008e2c:	6979      	ldr	r1, [r7, #20]
 8008e2e:	4798      	blx	r3
 8008e30:	4603      	mov	r3, r0
 8008e32:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008e36:	46d5      	mov	sp, sl
    }
    s_crc32 = mg_crc32(s_crc32, (char *) buf, len);  // Update CRC
 8008e38:	4b1d      	ldr	r3, [pc, #116]	@ (8008eb0 <mg_ota_flash_write+0x180>)
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	68ba      	ldr	r2, [r7, #8]
 8008e3e:	68f9      	ldr	r1, [r7, #12]
 8008e40:	4618      	mov	r0, r3
 8008e42:	f018 ff49 	bl	8021cd8 <mg_crc32>
 8008e46:	4603      	mov	r3, r0
 8008e48:	4a19      	ldr	r2, [pc, #100]	@ (8008eb0 <mg_ota_flash_write+0x180>)
 8008e4a:	6013      	str	r3, [r2, #0]
    MG_DEBUG(("%#x %p %lu -> %d", s_addr - len, buf, len, ok));
 8008e4c:	4b13      	ldr	r3, [pc, #76]	@ (8008e9c <mg_ota_flash_write+0x16c>)
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	2b02      	cmp	r3, #2
 8008e52:	dd13      	ble.n	8008e7c <mg_ota_flash_write+0x14c>
 8008e54:	4b12      	ldr	r3, [pc, #72]	@ (8008ea0 <mg_ota_flash_write+0x170>)
 8008e56:	f44f 720b 	mov.w	r2, #556	@ 0x22c
 8008e5a:	4912      	ldr	r1, [pc, #72]	@ (8008ea4 <mg_ota_flash_write+0x174>)
 8008e5c:	2003      	movs	r0, #3
 8008e5e:	f005 fd21 	bl	800e8a4 <mg_log_prefix>
 8008e62:	4b12      	ldr	r3, [pc, #72]	@ (8008eac <mg_ota_flash_write+0x17c>)
 8008e64:	681a      	ldr	r2, [r3, #0]
 8008e66:	68bb      	ldr	r3, [r7, #8]
 8008e68:	425b      	negs	r3, r3
 8008e6a:	18d1      	adds	r1, r2, r3
 8008e6c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008e70:	9300      	str	r3, [sp, #0]
 8008e72:	68bb      	ldr	r3, [r7, #8]
 8008e74:	68fa      	ldr	r2, [r7, #12]
 8008e76:	480f      	ldr	r0, [pc, #60]	@ (8008eb4 <mg_ota_flash_write+0x184>)
 8008e78:	f005 fd64 	bl	800e944 <mg_log>
    s_addr += len;
 8008e7c:	4b0b      	ldr	r3, [pc, #44]	@ (8008eac <mg_ota_flash_write+0x17c>)
 8008e7e:	681a      	ldr	r2, [r3, #0]
 8008e80:	68bb      	ldr	r3, [r7, #8]
 8008e82:	4413      	add	r3, r2
 8008e84:	4a09      	ldr	r2, [pc, #36]	@ (8008eac <mg_ota_flash_write+0x17c>)
 8008e86:	6013      	str	r3, [r2, #0]
  }
  return ok;
 8008e88:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	3728      	adds	r7, #40	@ 0x28
 8008e90:	46bd      	mov	sp, r7
 8008e92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e96:	bf00      	nop
 8008e98:	24002358 	.word	0x24002358
 8008e9c:	24000258 	.word	0x24000258
 8008ea0:	0802d820 	.word	0x0802d820
 8008ea4:	08029c3c 	.word	0x08029c3c
 8008ea8:	08029e80 	.word	0x08029e80
 8008eac:	24002354 	.word	0x24002354
 8008eb0:	2400235c 	.word	0x2400235c
 8008eb4:	08029ea8 	.word	0x08029ea8

08008eb8 <mg_ota_flash_end>:

bool mg_ota_flash_end(struct mg_flash *flash) {
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b088      	sub	sp, #32
 8008ebc:	af02      	add	r7, sp, #8
 8008ebe:	6078      	str	r0, [r7, #4]
  char *base = (char *) flash->start + flash->size / 2;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681a      	ldr	r2, [r3, #0]
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	685b      	ldr	r3, [r3, #4]
 8008ec8:	085b      	lsrs	r3, r3, #1
 8008eca:	4413      	add	r3, r2
 8008ecc:	613b      	str	r3, [r7, #16]
  bool ok = false;
 8008ece:	2300      	movs	r3, #0
 8008ed0:	75fb      	strb	r3, [r7, #23]
  if (s_size) {
 8008ed2:	4b2f      	ldr	r3, [pc, #188]	@ (8008f90 <mg_ota_flash_end+0xd8>)
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d040      	beq.n	8008f5c <mg_ota_flash_end+0xa4>
    size_t size = (size_t) (s_addr - base);
 8008eda:	4b2e      	ldr	r3, [pc, #184]	@ (8008f94 <mg_ota_flash_end+0xdc>)
 8008edc:	681a      	ldr	r2, [r3, #0]
 8008ede:	693b      	ldr	r3, [r7, #16]
 8008ee0:	1ad3      	subs	r3, r2, r3
 8008ee2:	60fb      	str	r3, [r7, #12]
    uint32_t crc32 = mg_crc32(0, base, s_size);
 8008ee4:	4b2a      	ldr	r3, [pc, #168]	@ (8008f90 <mg_ota_flash_end+0xd8>)
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	461a      	mov	r2, r3
 8008eea:	6939      	ldr	r1, [r7, #16]
 8008eec:	2000      	movs	r0, #0
 8008eee:	f018 fef3 	bl	8021cd8 <mg_crc32>
 8008ef2:	60b8      	str	r0, [r7, #8]
    if (size == s_size && crc32 == s_crc32) ok = true;
 8008ef4:	4b26      	ldr	r3, [pc, #152]	@ (8008f90 <mg_ota_flash_end+0xd8>)
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	68fa      	ldr	r2, [r7, #12]
 8008efa:	429a      	cmp	r2, r3
 8008efc:	d106      	bne.n	8008f0c <mg_ota_flash_end+0x54>
 8008efe:	4b26      	ldr	r3, [pc, #152]	@ (8008f98 <mg_ota_flash_end+0xe0>)
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	68ba      	ldr	r2, [r7, #8]
 8008f04:	429a      	cmp	r2, r3
 8008f06:	d101      	bne.n	8008f0c <mg_ota_flash_end+0x54>
 8008f08:	2301      	movs	r3, #1
 8008f0a:	75fb      	strb	r3, [r7, #23]
    MG_DEBUG(("CRC: %x/%x, size: %lu/%lu, status: %s", s_crc32, crc32, s_size,
 8008f0c:	4b23      	ldr	r3, [pc, #140]	@ (8008f9c <mg_ota_flash_end+0xe4>)
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	2b02      	cmp	r3, #2
 8008f12:	dd18      	ble.n	8008f46 <mg_ota_flash_end+0x8e>
 8008f14:	4b22      	ldr	r3, [pc, #136]	@ (8008fa0 <mg_ota_flash_end+0xe8>)
 8008f16:	f240 2239 	movw	r2, #569	@ 0x239
 8008f1a:	4922      	ldr	r1, [pc, #136]	@ (8008fa4 <mg_ota_flash_end+0xec>)
 8008f1c:	2003      	movs	r0, #3
 8008f1e:	f005 fcc1 	bl	800e8a4 <mg_log_prefix>
 8008f22:	4b1d      	ldr	r3, [pc, #116]	@ (8008f98 <mg_ota_flash_end+0xe0>)
 8008f24:	6819      	ldr	r1, [r3, #0]
 8008f26:	4b1a      	ldr	r3, [pc, #104]	@ (8008f90 <mg_ota_flash_end+0xd8>)
 8008f28:	681a      	ldr	r2, [r3, #0]
 8008f2a:	7dfb      	ldrb	r3, [r7, #23]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d001      	beq.n	8008f34 <mg_ota_flash_end+0x7c>
 8008f30:	4b1d      	ldr	r3, [pc, #116]	@ (8008fa8 <mg_ota_flash_end+0xf0>)
 8008f32:	e000      	b.n	8008f36 <mg_ota_flash_end+0x7e>
 8008f34:	4b1d      	ldr	r3, [pc, #116]	@ (8008fac <mg_ota_flash_end+0xf4>)
 8008f36:	9301      	str	r3, [sp, #4]
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	9300      	str	r3, [sp, #0]
 8008f3c:	4613      	mov	r3, r2
 8008f3e:	68ba      	ldr	r2, [r7, #8]
 8008f40:	481b      	ldr	r0, [pc, #108]	@ (8008fb0 <mg_ota_flash_end+0xf8>)
 8008f42:	f005 fcff 	bl	800e944 <mg_log>
              size, ok ? "ok" : "fail"));
    s_size = 0;
 8008f46:	4b12      	ldr	r3, [pc, #72]	@ (8008f90 <mg_ota_flash_end+0xd8>)
 8008f48:	2200      	movs	r2, #0
 8008f4a:	601a      	str	r2, [r3, #0]
    if (ok) ok = flash->swap_fn();
 8008f4c:	7dfb      	ldrb	r3, [r7, #23]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d004      	beq.n	8008f5c <mg_ota_flash_end+0xa4>
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	695b      	ldr	r3, [r3, #20]
 8008f56:	4798      	blx	r3
 8008f58:	4603      	mov	r3, r0
 8008f5a:	75fb      	strb	r3, [r7, #23]
  }
  MG_INFO(("Finishing OTA: %s", ok ? "ok" : "fail"));
 8008f5c:	4b0f      	ldr	r3, [pc, #60]	@ (8008f9c <mg_ota_flash_end+0xe4>)
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	2b01      	cmp	r3, #1
 8008f62:	dd10      	ble.n	8008f86 <mg_ota_flash_end+0xce>
 8008f64:	4b0e      	ldr	r3, [pc, #56]	@ (8008fa0 <mg_ota_flash_end+0xe8>)
 8008f66:	f240 223e 	movw	r2, #574	@ 0x23e
 8008f6a:	490e      	ldr	r1, [pc, #56]	@ (8008fa4 <mg_ota_flash_end+0xec>)
 8008f6c:	2002      	movs	r0, #2
 8008f6e:	f005 fc99 	bl	800e8a4 <mg_log_prefix>
 8008f72:	7dfb      	ldrb	r3, [r7, #23]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d001      	beq.n	8008f7c <mg_ota_flash_end+0xc4>
 8008f78:	4b0b      	ldr	r3, [pc, #44]	@ (8008fa8 <mg_ota_flash_end+0xf0>)
 8008f7a:	e000      	b.n	8008f7e <mg_ota_flash_end+0xc6>
 8008f7c:	4b0b      	ldr	r3, [pc, #44]	@ (8008fac <mg_ota_flash_end+0xf4>)
 8008f7e:	4619      	mov	r1, r3
 8008f80:	480c      	ldr	r0, [pc, #48]	@ (8008fb4 <mg_ota_flash_end+0xfc>)
 8008f82:	f005 fcdf 	bl	800e944 <mg_log>
  return ok;
 8008f86:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f88:	4618      	mov	r0, r3
 8008f8a:	3718      	adds	r7, #24
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	bd80      	pop	{r7, pc}
 8008f90:	24002358 	.word	0x24002358
 8008f94:	24002354 	.word	0x24002354
 8008f98:	2400235c 	.word	0x2400235c
 8008f9c:	24000258 	.word	0x24000258
 8008fa0:	0802d834 	.word	0x0802d834
 8008fa4:	08029c3c 	.word	0x08029c3c
 8008fa8:	08029ebc 	.word	0x08029ebc
 8008fac:	08029ec0 	.word	0x08029ec0
 8008fb0:	08029ec8 	.word	0x08029ec8
 8008fb4:	08029ef0 	.word	0x08029ef0

08008fb8 <is_digit>:
#endif




static bool is_digit(int c) {
 8008fb8:	b480      	push	{r7}
 8008fba:	b083      	sub	sp, #12
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
  return c >= '0' && c <= '9';
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	2b2f      	cmp	r3, #47	@ 0x2f
 8008fc4:	dd04      	ble.n	8008fd0 <is_digit+0x18>
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	2b39      	cmp	r3, #57	@ 0x39
 8008fca:	dc01      	bgt.n	8008fd0 <is_digit+0x18>
 8008fcc:	2301      	movs	r3, #1
 8008fce:	e000      	b.n	8008fd2 <is_digit+0x1a>
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	f003 0301 	and.w	r3, r3, #1
 8008fd6:	b2db      	uxtb	r3, r3
}
 8008fd8:	4618      	mov	r0, r3
 8008fda:	370c      	adds	r7, #12
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe2:	4770      	bx	lr

08008fe4 <addexp>:

static int addexp(char *buf, int e, int sign) {
 8008fe4:	b480      	push	{r7}
 8008fe6:	b087      	sub	sp, #28
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	60f8      	str	r0, [r7, #12]
 8008fec:	60b9      	str	r1, [r7, #8]
 8008fee:	607a      	str	r2, [r7, #4]
  int n = 0;
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	617b      	str	r3, [r7, #20]
  buf[n++] = 'e';
 8008ff4:	697b      	ldr	r3, [r7, #20]
 8008ff6:	1c5a      	adds	r2, r3, #1
 8008ff8:	617a      	str	r2, [r7, #20]
 8008ffa:	461a      	mov	r2, r3
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	4413      	add	r3, r2
 8009000:	2265      	movs	r2, #101	@ 0x65
 8009002:	701a      	strb	r2, [r3, #0]
  buf[n++] = (char) sign;
 8009004:	697b      	ldr	r3, [r7, #20]
 8009006:	1c5a      	adds	r2, r3, #1
 8009008:	617a      	str	r2, [r7, #20]
 800900a:	461a      	mov	r2, r3
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	4413      	add	r3, r2
 8009010:	687a      	ldr	r2, [r7, #4]
 8009012:	b2d2      	uxtb	r2, r2
 8009014:	701a      	strb	r2, [r3, #0]
  if (e > 400) return 0;
 8009016:	68bb      	ldr	r3, [r7, #8]
 8009018:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 800901c:	dd01      	ble.n	8009022 <addexp+0x3e>
 800901e:	2300      	movs	r3, #0
 8009020:	e057      	b.n	80090d2 <addexp+0xee>
  if (e < 10) buf[n++] = '0';
 8009022:	68bb      	ldr	r3, [r7, #8]
 8009024:	2b09      	cmp	r3, #9
 8009026:	dc07      	bgt.n	8009038 <addexp+0x54>
 8009028:	697b      	ldr	r3, [r7, #20]
 800902a:	1c5a      	adds	r2, r3, #1
 800902c:	617a      	str	r2, [r7, #20]
 800902e:	461a      	mov	r2, r3
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	4413      	add	r3, r2
 8009034:	2230      	movs	r2, #48	@ 0x30
 8009036:	701a      	strb	r2, [r3, #0]
  if (e >= 100) buf[n++] = (char) (e / 100 + '0'), e -= 100 * (e / 100);
 8009038:	68bb      	ldr	r3, [r7, #8]
 800903a:	2b63      	cmp	r3, #99	@ 0x63
 800903c:	dd1c      	ble.n	8009078 <addexp+0x94>
 800903e:	68bb      	ldr	r3, [r7, #8]
 8009040:	4a27      	ldr	r2, [pc, #156]	@ (80090e0 <addexp+0xfc>)
 8009042:	fb82 1203 	smull	r1, r2, r2, r3
 8009046:	1152      	asrs	r2, r2, #5
 8009048:	17db      	asrs	r3, r3, #31
 800904a:	1ad3      	subs	r3, r2, r3
 800904c:	b2da      	uxtb	r2, r3
 800904e:	697b      	ldr	r3, [r7, #20]
 8009050:	1c59      	adds	r1, r3, #1
 8009052:	6179      	str	r1, [r7, #20]
 8009054:	4619      	mov	r1, r3
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	440b      	add	r3, r1
 800905a:	3230      	adds	r2, #48	@ 0x30
 800905c:	b2d2      	uxtb	r2, r2
 800905e:	701a      	strb	r2, [r3, #0]
 8009060:	68bb      	ldr	r3, [r7, #8]
 8009062:	4a1f      	ldr	r2, [pc, #124]	@ (80090e0 <addexp+0xfc>)
 8009064:	fb82 1203 	smull	r1, r2, r2, r3
 8009068:	1151      	asrs	r1, r2, #5
 800906a:	17da      	asrs	r2, r3, #31
 800906c:	1a8a      	subs	r2, r1, r2
 800906e:	2164      	movs	r1, #100	@ 0x64
 8009070:	fb01 f202 	mul.w	r2, r1, r2
 8009074:	1a9b      	subs	r3, r3, r2
 8009076:	60bb      	str	r3, [r7, #8]
  if (e >= 10) buf[n++] = (char) (e / 10 + '0'), e -= 10 * (e / 10);
 8009078:	68bb      	ldr	r3, [r7, #8]
 800907a:	2b09      	cmp	r3, #9
 800907c:	dd1d      	ble.n	80090ba <addexp+0xd6>
 800907e:	68bb      	ldr	r3, [r7, #8]
 8009080:	4a18      	ldr	r2, [pc, #96]	@ (80090e4 <addexp+0x100>)
 8009082:	fb82 1203 	smull	r1, r2, r2, r3
 8009086:	1092      	asrs	r2, r2, #2
 8009088:	17db      	asrs	r3, r3, #31
 800908a:	1ad3      	subs	r3, r2, r3
 800908c:	b2da      	uxtb	r2, r3
 800908e:	697b      	ldr	r3, [r7, #20]
 8009090:	1c59      	adds	r1, r3, #1
 8009092:	6179      	str	r1, [r7, #20]
 8009094:	4619      	mov	r1, r3
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	440b      	add	r3, r1
 800909a:	3230      	adds	r2, #48	@ 0x30
 800909c:	b2d2      	uxtb	r2, r2
 800909e:	701a      	strb	r2, [r3, #0]
 80090a0:	68ba      	ldr	r2, [r7, #8]
 80090a2:	4b10      	ldr	r3, [pc, #64]	@ (80090e4 <addexp+0x100>)
 80090a4:	fb83 1302 	smull	r1, r3, r3, r2
 80090a8:	1099      	asrs	r1, r3, #2
 80090aa:	17d3      	asrs	r3, r2, #31
 80090ac:	1ac9      	subs	r1, r1, r3
 80090ae:	460b      	mov	r3, r1
 80090b0:	009b      	lsls	r3, r3, #2
 80090b2:	440b      	add	r3, r1
 80090b4:	005b      	lsls	r3, r3, #1
 80090b6:	1ad3      	subs	r3, r2, r3
 80090b8:	60bb      	str	r3, [r7, #8]
  buf[n++] = (char) (e + '0');
 80090ba:	68bb      	ldr	r3, [r7, #8]
 80090bc:	b2da      	uxtb	r2, r3
 80090be:	697b      	ldr	r3, [r7, #20]
 80090c0:	1c59      	adds	r1, r3, #1
 80090c2:	6179      	str	r1, [r7, #20]
 80090c4:	4619      	mov	r1, r3
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	440b      	add	r3, r1
 80090ca:	3230      	adds	r2, #48	@ 0x30
 80090cc:	b2d2      	uxtb	r2, r2
 80090ce:	701a      	strb	r2, [r3, #0]
  return n;
 80090d0:	697b      	ldr	r3, [r7, #20]
}
 80090d2:	4618      	mov	r0, r3
 80090d4:	371c      	adds	r7, #28
 80090d6:	46bd      	mov	sp, r7
 80090d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090dc:	4770      	bx	lr
 80090de:	bf00      	nop
 80090e0:	51eb851f 	.word	0x51eb851f
 80090e4:	66666667 	.word	0x66666667

080090e8 <xisinf>:

static int xisinf(double x) {
 80090e8:	b480      	push	{r7}
 80090ea:	b085      	sub	sp, #20
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	ed87 0b00 	vstr	d0, [r7]
  union {
    double f;
    uint64_t u;
  } ieee754 = {x};
 80090f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80090f6:	e9c7 2302 	strd	r2, r3, [r7, #8]
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) == 0x7ff00000 &&
 80090fa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80090fe:	f04f 0200 	mov.w	r2, #0
 8009102:	f04f 0300 	mov.w	r3, #0
 8009106:	000a      	movs	r2, r1
 8009108:	2300      	movs	r3, #0
 800910a:	4613      	mov	r3, r2
 800910c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009110:	4a08      	ldr	r2, [pc, #32]	@ (8009134 <xisinf+0x4c>)
 8009112:	4293      	cmp	r3, r2
 8009114:	d106      	bne.n	8009124 <xisinf+0x3c>
         ((unsigned) ieee754.u == 0);
 8009116:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800911a:	4613      	mov	r3, r2
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) == 0x7ff00000 &&
 800911c:	2b00      	cmp	r3, #0
 800911e:	d101      	bne.n	8009124 <xisinf+0x3c>
 8009120:	2301      	movs	r3, #1
 8009122:	e000      	b.n	8009126 <xisinf+0x3e>
 8009124:	2300      	movs	r3, #0
}
 8009126:	4618      	mov	r0, r3
 8009128:	3714      	adds	r7, #20
 800912a:	46bd      	mov	sp, r7
 800912c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009130:	4770      	bx	lr
 8009132:	bf00      	nop
 8009134:	7ff00000 	.word	0x7ff00000

08009138 <xisnan>:

static int xisnan(double x) {
 8009138:	b480      	push	{r7}
 800913a:	b085      	sub	sp, #20
 800913c:	af00      	add	r7, sp, #0
 800913e:	ed87 0b00 	vstr	d0, [r7]
  union {
    double f;
    uint64_t u;
  } ieee754 = {x};
 8009142:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009146:	e9c7 2302 	strd	r2, r3, [r7, #8]
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) +
 800914a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800914e:	f04f 0200 	mov.w	r2, #0
 8009152:	f04f 0300 	mov.w	r3, #0
 8009156:	000a      	movs	r2, r1
 8009158:	2300      	movs	r3, #0
 800915a:	4613      	mov	r3, r2
 800915c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
             ((unsigned) ieee754.u != 0) >
 8009160:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009164:	4613      	mov	r3, r2
 8009166:	2b00      	cmp	r3, #0
 8009168:	bf14      	ite	ne
 800916a:	2301      	movne	r3, #1
 800916c:	2300      	moveq	r3, #0
 800916e:	b2db      	uxtb	r3, r3
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) +
 8009170:	440b      	add	r3, r1
             ((unsigned) ieee754.u != 0) >
 8009172:	4a06      	ldr	r2, [pc, #24]	@ (800918c <xisnan+0x54>)
 8009174:	4293      	cmp	r3, r2
 8009176:	bf8c      	ite	hi
 8009178:	2301      	movhi	r3, #1
 800917a:	2300      	movls	r3, #0
 800917c:	b2db      	uxtb	r3, r3
         0x7ff00000;
}
 800917e:	4618      	mov	r0, r3
 8009180:	3714      	adds	r7, #20
 8009182:	46bd      	mov	sp, r7
 8009184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009188:	4770      	bx	lr
 800918a:	bf00      	nop
 800918c:	7ff00000 	.word	0x7ff00000

08009190 <mg_dtoa>:

static size_t mg_dtoa(char *dst, size_t dstlen, double d, int width, bool tz) {
 8009190:	b580      	push	{r7, lr}
 8009192:	b0a0      	sub	sp, #128	@ 0x80
 8009194:	af02      	add	r7, sp, #8
 8009196:	6178      	str	r0, [r7, #20]
 8009198:	6139      	str	r1, [r7, #16]
 800919a:	ed87 0b02 	vstr	d0, [r7, #8]
 800919e:	607a      	str	r2, [r7, #4]
 80091a0:	70fb      	strb	r3, [r7, #3]
  char buf[40];
  int i, s = 0, n = 0, e = 0;
 80091a2:	2300      	movs	r3, #0
 80091a4:	673b      	str	r3, [r7, #112]	@ 0x70
 80091a6:	2300      	movs	r3, #0
 80091a8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80091aa:	2300      	movs	r3, #0
 80091ac:	66bb      	str	r3, [r7, #104]	@ 0x68
  double t, mul, saved;
  if (d == 0.0) return mg_snprintf(dst, dstlen, "%s", "0");
 80091ae:	ed97 7b02 	vldr	d7, [r7, #8]
 80091b2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80091b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091ba:	d107      	bne.n	80091cc <mg_dtoa+0x3c>
 80091bc:	4bb8      	ldr	r3, [pc, #736]	@ (80094a0 <mg_dtoa+0x310>)
 80091be:	4ab9      	ldr	r2, [pc, #740]	@ (80094a4 <mg_dtoa+0x314>)
 80091c0:	6939      	ldr	r1, [r7, #16]
 80091c2:	6978      	ldr	r0, [r7, #20]
 80091c4:	f009 ffaa 	bl	801311c <mg_snprintf>
 80091c8:	4603      	mov	r3, r0
 80091ca:	e28d      	b.n	80096e8 <mg_dtoa+0x558>
  if (xisinf(d)) return mg_snprintf(dst, dstlen, "%s", d > 0 ? "inf" : "-inf");
 80091cc:	ed97 0b02 	vldr	d0, [r7, #8]
 80091d0:	f7ff ff8a 	bl	80090e8 <xisinf>
 80091d4:	4603      	mov	r3, r0
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d010      	beq.n	80091fc <mg_dtoa+0x6c>
 80091da:	ed97 7b02 	vldr	d7, [r7, #8]
 80091de:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80091e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091e6:	dd01      	ble.n	80091ec <mg_dtoa+0x5c>
 80091e8:	4baf      	ldr	r3, [pc, #700]	@ (80094a8 <mg_dtoa+0x318>)
 80091ea:	e000      	b.n	80091ee <mg_dtoa+0x5e>
 80091ec:	4baf      	ldr	r3, [pc, #700]	@ (80094ac <mg_dtoa+0x31c>)
 80091ee:	4aad      	ldr	r2, [pc, #692]	@ (80094a4 <mg_dtoa+0x314>)
 80091f0:	6939      	ldr	r1, [r7, #16]
 80091f2:	6978      	ldr	r0, [r7, #20]
 80091f4:	f009 ff92 	bl	801311c <mg_snprintf>
 80091f8:	4603      	mov	r3, r0
 80091fa:	e275      	b.n	80096e8 <mg_dtoa+0x558>
  if (xisnan(d)) return mg_snprintf(dst, dstlen, "%s", "nan");
 80091fc:	ed97 0b02 	vldr	d0, [r7, #8]
 8009200:	f7ff ff9a 	bl	8009138 <xisnan>
 8009204:	4603      	mov	r3, r0
 8009206:	2b00      	cmp	r3, #0
 8009208:	d007      	beq.n	800921a <mg_dtoa+0x8a>
 800920a:	4ba9      	ldr	r3, [pc, #676]	@ (80094b0 <mg_dtoa+0x320>)
 800920c:	4aa5      	ldr	r2, [pc, #660]	@ (80094a4 <mg_dtoa+0x314>)
 800920e:	6939      	ldr	r1, [r7, #16]
 8009210:	6978      	ldr	r0, [r7, #20]
 8009212:	f009 ff83 	bl	801311c <mg_snprintf>
 8009216:	4603      	mov	r3, r0
 8009218:	e266      	b.n	80096e8 <mg_dtoa+0x558>
  if (d < 0.0) d = -d, buf[s++] = '-';
 800921a:	ed97 7b02 	vldr	d7, [r7, #8]
 800921e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8009222:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009226:	d50d      	bpl.n	8009244 <mg_dtoa+0xb4>
 8009228:	ed97 7b02 	vldr	d7, [r7, #8]
 800922c:	eeb1 7b47 	vneg.f64	d7, d7
 8009230:	ed87 7b02 	vstr	d7, [r7, #8]
 8009234:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009236:	1c5a      	adds	r2, r3, #1
 8009238:	673a      	str	r2, [r7, #112]	@ 0x70
 800923a:	3378      	adds	r3, #120	@ 0x78
 800923c:	443b      	add	r3, r7
 800923e:	222d      	movs	r2, #45	@ 0x2d
 8009240:	f803 2c60 	strb.w	r2, [r3, #-96]

  // Round
  saved = d;
 8009244:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009248:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
  if (tz) {
 800924c:	78fb      	ldrb	r3, [r7, #3]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d024      	beq.n	800929c <mg_dtoa+0x10c>
    mul = 1.0;
 8009252:	f04f 0200 	mov.w	r2, #0
 8009256:	4b97      	ldr	r3, [pc, #604]	@ (80094b4 <mg_dtoa+0x324>)
 8009258:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
    while (d >= 10.0 && d / mul >= 10.0) mul *= 10.0;
 800925c:	e007      	b.n	800926e <mg_dtoa+0xde>
 800925e:	ed97 7b16 	vldr	d7, [r7, #88]	@ 0x58
 8009262:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8009266:	ee27 7b06 	vmul.f64	d7, d7, d6
 800926a:	ed87 7b16 	vstr	d7, [r7, #88]	@ 0x58
 800926e:	ed97 7b02 	vldr	d7, [r7, #8]
 8009272:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8009276:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800927a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800927e:	db12      	blt.n	80092a6 <mg_dtoa+0x116>
 8009280:	ed97 5b02 	vldr	d5, [r7, #8]
 8009284:	ed97 6b16 	vldr	d6, [r7, #88]	@ 0x58
 8009288:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800928c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8009290:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009294:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009298:	dae1      	bge.n	800925e <mg_dtoa+0xce>
 800929a:	e00d      	b.n	80092b8 <mg_dtoa+0x128>
  } else {
    mul = 0.1;
 800929c:	a37e      	add	r3, pc, #504	@ (adr r3, 8009498 <mg_dtoa+0x308>)
 800929e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092a2:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
  }

  while (d <= 1.0 && d / mul <= 1.0) mul /= 10.0;
 80092a6:	e007      	b.n	80092b8 <mg_dtoa+0x128>
 80092a8:	ed97 6b16 	vldr	d6, [r7, #88]	@ 0x58
 80092ac:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 80092b0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80092b4:	ed87 7b16 	vstr	d7, [r7, #88]	@ 0x58
 80092b8:	ed97 7b02 	vldr	d7, [r7, #8]
 80092bc:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80092c0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80092c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092c8:	d80c      	bhi.n	80092e4 <mg_dtoa+0x154>
 80092ca:	ed97 5b02 	vldr	d5, [r7, #8]
 80092ce:	ed97 6b16 	vldr	d6, [r7, #88]	@ 0x58
 80092d2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80092d6:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80092da:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80092de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092e2:	d9e1      	bls.n	80092a8 <mg_dtoa+0x118>
  for (i = 0, t = mul * 5; i < width; i++) t /= 10.0;
 80092e4:	2300      	movs	r3, #0
 80092e6:	677b      	str	r3, [r7, #116]	@ 0x74
 80092e8:	ed97 7b16 	vldr	d7, [r7, #88]	@ 0x58
 80092ec:	eeb1 6b04 	vmov.f64	d6, #20	@ 0x40a00000  5.0
 80092f0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80092f4:	ed87 7b18 	vstr	d7, [r7, #96]	@ 0x60
 80092f8:	e00a      	b.n	8009310 <mg_dtoa+0x180>
 80092fa:	ed97 6b18 	vldr	d6, [r7, #96]	@ 0x60
 80092fe:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 8009302:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8009306:	ed87 7b18 	vstr	d7, [r7, #96]	@ 0x60
 800930a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800930c:	3301      	adds	r3, #1
 800930e:	677b      	str	r3, [r7, #116]	@ 0x74
 8009310:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	429a      	cmp	r2, r3
 8009316:	dbf0      	blt.n	80092fa <mg_dtoa+0x16a>

  d += t;
 8009318:	ed97 6b02 	vldr	d6, [r7, #8]
 800931c:	ed97 7b18 	vldr	d7, [r7, #96]	@ 0x60
 8009320:	ee36 7b07 	vadd.f64	d7, d6, d7
 8009324:	ed87 7b02 	vstr	d7, [r7, #8]

  // Calculate exponent, and 'mul' for scientific representation
  mul = 1.0;
 8009328:	f04f 0200 	mov.w	r2, #0
 800932c:	4b61      	ldr	r3, [pc, #388]	@ (80094b4 <mg_dtoa+0x324>)
 800932e:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
  while (d >= 10.0 && d / mul >= 10.0) mul *= 10.0, e++;
 8009332:	e00a      	b.n	800934a <mg_dtoa+0x1ba>
 8009334:	ed97 7b16 	vldr	d7, [r7, #88]	@ 0x58
 8009338:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800933c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009340:	ed87 7b16 	vstr	d7, [r7, #88]	@ 0x58
 8009344:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009346:	3301      	adds	r3, #1
 8009348:	66bb      	str	r3, [r7, #104]	@ 0x68
 800934a:	ed97 7b02 	vldr	d7, [r7, #8]
 800934e:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8009352:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800935a:	db0c      	blt.n	8009376 <mg_dtoa+0x1e6>
 800935c:	ed97 5b02 	vldr	d5, [r7, #8]
 8009360:	ed97 6b16 	vldr	d6, [r7, #88]	@ 0x58
 8009364:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8009368:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800936c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009374:	dade      	bge.n	8009334 <mg_dtoa+0x1a4>
  while (d < 1.0 && d / mul < 1.0) mul /= 10.0, e--;
 8009376:	e00a      	b.n	800938e <mg_dtoa+0x1fe>
 8009378:	ed97 6b16 	vldr	d6, [r7, #88]	@ 0x58
 800937c:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 8009380:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8009384:	ed87 7b16 	vstr	d7, [r7, #88]	@ 0x58
 8009388:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800938a:	3b01      	subs	r3, #1
 800938c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800938e:	ed97 7b02 	vldr	d7, [r7, #8]
 8009392:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8009396:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800939a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800939e:	d50c      	bpl.n	80093ba <mg_dtoa+0x22a>
 80093a0:	ed97 5b02 	vldr	d5, [r7, #8]
 80093a4:	ed97 6b16 	vldr	d6, [r7, #88]	@ 0x58
 80093a8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80093ac:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80093b0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80093b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093b8:	d4de      	bmi.n	8009378 <mg_dtoa+0x1e8>
  // printf(" --> %g %d %g %g\n", saved, e, t, mul);

  if (tz && e >= width && width > 1) {
 80093ba:	78fb      	ldrb	r3, [r7, #3]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d031      	beq.n	8009424 <mg_dtoa+0x294>
 80093c0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	429a      	cmp	r2, r3
 80093c6:	db2d      	blt.n	8009424 <mg_dtoa+0x294>
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2b01      	cmp	r3, #1
 80093cc:	dd2a      	ble.n	8009424 <mg_dtoa+0x294>
    n = (int) mg_dtoa(buf, sizeof(buf), saved / mul, width, tz);
 80093ce:	ed97 6b12 	vldr	d6, [r7, #72]	@ 0x48
 80093d2:	ed97 7b16 	vldr	d7, [r7, #88]	@ 0x58
 80093d6:	ee86 5b07 	vdiv.f64	d5, d6, d7
 80093da:	78fb      	ldrb	r3, [r7, #3]
 80093dc:	f107 0018 	add.w	r0, r7, #24
 80093e0:	687a      	ldr	r2, [r7, #4]
 80093e2:	eeb0 0b45 	vmov.f64	d0, d5
 80093e6:	2128      	movs	r1, #40	@ 0x28
 80093e8:	f7ff fed2 	bl	8009190 <mg_dtoa>
 80093ec:	4603      	mov	r3, r0
 80093ee:	66fb      	str	r3, [r7, #108]	@ 0x6c
    // printf(" --> %.*g %d [%.*s]\n", 10, d / t, e, n, buf);
    n += addexp(buf + s + n, e, '+');
 80093f0:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80093f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80093f4:	4413      	add	r3, r2
 80093f6:	f107 0218 	add.w	r2, r7, #24
 80093fa:	4413      	add	r3, r2
 80093fc:	222b      	movs	r2, #43	@ 0x2b
 80093fe:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009400:	4618      	mov	r0, r3
 8009402:	f7ff fdef 	bl	8008fe4 <addexp>
 8009406:	4602      	mov	r2, r0
 8009408:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800940a:	4413      	add	r3, r2
 800940c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    return mg_snprintf(dst, dstlen, "%.*s", n, buf);
 800940e:	f107 0318 	add.w	r3, r7, #24
 8009412:	9300      	str	r3, [sp, #0]
 8009414:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009416:	4a28      	ldr	r2, [pc, #160]	@ (80094b8 <mg_dtoa+0x328>)
 8009418:	6939      	ldr	r1, [r7, #16]
 800941a:	6978      	ldr	r0, [r7, #20]
 800941c:	f009 fe7e 	bl	801311c <mg_snprintf>
 8009420:	4603      	mov	r3, r0
 8009422:	e161      	b.n	80096e8 <mg_dtoa+0x558>
  } else if (tz && e <= -width && width > 1) {
 8009424:	78fb      	ldrb	r3, [r7, #3]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d048      	beq.n	80094bc <mg_dtoa+0x32c>
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	425b      	negs	r3, r3
 800942e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8009430:	429a      	cmp	r2, r3
 8009432:	dc43      	bgt.n	80094bc <mg_dtoa+0x32c>
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	2b01      	cmp	r3, #1
 8009438:	dd40      	ble.n	80094bc <mg_dtoa+0x32c>
    n = (int) mg_dtoa(buf, sizeof(buf), saved / mul, width, tz);
 800943a:	ed97 6b12 	vldr	d6, [r7, #72]	@ 0x48
 800943e:	ed97 7b16 	vldr	d7, [r7, #88]	@ 0x58
 8009442:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8009446:	78fb      	ldrb	r3, [r7, #3]
 8009448:	f107 0018 	add.w	r0, r7, #24
 800944c:	687a      	ldr	r2, [r7, #4]
 800944e:	eeb0 0b45 	vmov.f64	d0, d5
 8009452:	2128      	movs	r1, #40	@ 0x28
 8009454:	f7ff fe9c 	bl	8009190 <mg_dtoa>
 8009458:	4603      	mov	r3, r0
 800945a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    // printf(" --> %.*g %d [%.*s]\n", 10, d / mul, e, n, buf);
    n += addexp(buf + s + n, -e, '-');
 800945c:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800945e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009460:	4413      	add	r3, r2
 8009462:	f107 0218 	add.w	r2, r7, #24
 8009466:	18d0      	adds	r0, r2, r3
 8009468:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800946a:	425b      	negs	r3, r3
 800946c:	222d      	movs	r2, #45	@ 0x2d
 800946e:	4619      	mov	r1, r3
 8009470:	f7ff fdb8 	bl	8008fe4 <addexp>
 8009474:	4602      	mov	r2, r0
 8009476:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009478:	4413      	add	r3, r2
 800947a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    return mg_snprintf(dst, dstlen, "%.*s", n, buf);
 800947c:	f107 0318 	add.w	r3, r7, #24
 8009480:	9300      	str	r3, [sp, #0]
 8009482:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009484:	4a0c      	ldr	r2, [pc, #48]	@ (80094b8 <mg_dtoa+0x328>)
 8009486:	6939      	ldr	r1, [r7, #16]
 8009488:	6978      	ldr	r0, [r7, #20]
 800948a:	f009 fe47 	bl	801311c <mg_snprintf>
 800948e:	4603      	mov	r3, r0
 8009490:	e12a      	b.n	80096e8 <mg_dtoa+0x558>
 8009492:	bf00      	nop
 8009494:	f3af 8000 	nop.w
 8009498:	9999999a 	.word	0x9999999a
 800949c:	3fb99999 	.word	0x3fb99999
 80094a0:	08029f04 	.word	0x08029f04
 80094a4:	08029f08 	.word	0x08029f08
 80094a8:	08029f0c 	.word	0x08029f0c
 80094ac:	08029f10 	.word	0x08029f10
 80094b0:	08029f18 	.word	0x08029f18
 80094b4:	3ff00000 	.word	0x3ff00000
 80094b8:	08029f1c 	.word	0x08029f1c
  } else {
    int targ_width = width;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	657b      	str	r3, [r7, #84]	@ 0x54
    for (i = 0, t = mul; t >= 1.0 && s + n < (int) sizeof(buf); i++) {
 80094c0:	2300      	movs	r3, #0
 80094c2:	677b      	str	r3, [r7, #116]	@ 0x74
 80094c4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80094c8:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
 80094cc:	e037      	b.n	800953e <mg_dtoa+0x3ae>
      int ch = (int) (d / t);
 80094ce:	ed97 5b02 	vldr	d5, [r7, #8]
 80094d2:	ed97 6b18 	vldr	d6, [r7, #96]	@ 0x60
 80094d6:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80094da:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80094de:	ee17 3a90 	vmov	r3, s15
 80094e2:	647b      	str	r3, [r7, #68]	@ 0x44
      if (n > 0 || ch > 0) buf[s + n++] = (char) (ch + '0');
 80094e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	dc02      	bgt.n	80094f0 <mg_dtoa+0x360>
 80094ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	dd0c      	ble.n	800950a <mg_dtoa+0x37a>
 80094f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80094f2:	b2da      	uxtb	r2, r3
 80094f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80094f6:	1c59      	adds	r1, r3, #1
 80094f8:	66f9      	str	r1, [r7, #108]	@ 0x6c
 80094fa:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 80094fc:	440b      	add	r3, r1
 80094fe:	3230      	adds	r2, #48	@ 0x30
 8009500:	b2d2      	uxtb	r2, r2
 8009502:	3378      	adds	r3, #120	@ 0x78
 8009504:	443b      	add	r3, r7
 8009506:	f803 2c60 	strb.w	r2, [r3, #-96]
      d -= ch * t;
 800950a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800950c:	ee07 3a90 	vmov	s15, r3
 8009510:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8009514:	ed97 7b18 	vldr	d7, [r7, #96]	@ 0x60
 8009518:	ee26 7b07 	vmul.f64	d7, d6, d7
 800951c:	ed97 6b02 	vldr	d6, [r7, #8]
 8009520:	ee36 7b47 	vsub.f64	d7, d6, d7
 8009524:	ed87 7b02 	vstr	d7, [r7, #8]
      t /= 10.0;
 8009528:	ed97 6b18 	vldr	d6, [r7, #96]	@ 0x60
 800952c:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 8009530:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8009534:	ed87 7b18 	vstr	d7, [r7, #96]	@ 0x60
    for (i = 0, t = mul; t >= 1.0 && s + n < (int) sizeof(buf); i++) {
 8009538:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800953a:	3301      	adds	r3, #1
 800953c:	677b      	str	r3, [r7, #116]	@ 0x74
 800953e:	ed97 7b18 	vldr	d7, [r7, #96]	@ 0x60
 8009542:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8009546:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800954a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800954e:	db04      	blt.n	800955a <mg_dtoa+0x3ca>
 8009550:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8009552:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009554:	4413      	add	r3, r2
 8009556:	2b27      	cmp	r3, #39	@ 0x27
 8009558:	ddb9      	ble.n	80094ce <mg_dtoa+0x33e>
    }
    // printf(" --> [%g] -> %g %g (%d) [%.*s]\n", saved, d, t, n, s + n, buf);
    if (n == 0) buf[s++] = '0';
 800955a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800955c:	2b00      	cmp	r3, #0
 800955e:	d118      	bne.n	8009592 <mg_dtoa+0x402>
 8009560:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009562:	1c5a      	adds	r2, r3, #1
 8009564:	673a      	str	r2, [r7, #112]	@ 0x70
 8009566:	3378      	adds	r3, #120	@ 0x78
 8009568:	443b      	add	r3, r7
 800956a:	2230      	movs	r2, #48	@ 0x30
 800956c:	f803 2c60 	strb.w	r2, [r3, #-96]
    while (t >= 1.0 && n + s < (int) sizeof(buf)) buf[n++] = '0', t /= 10.0;
 8009570:	e00f      	b.n	8009592 <mg_dtoa+0x402>
 8009572:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009574:	1c5a      	adds	r2, r3, #1
 8009576:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009578:	3378      	adds	r3, #120	@ 0x78
 800957a:	443b      	add	r3, r7
 800957c:	2230      	movs	r2, #48	@ 0x30
 800957e:	f803 2c60 	strb.w	r2, [r3, #-96]
 8009582:	ed97 6b18 	vldr	d6, [r7, #96]	@ 0x60
 8009586:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 800958a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800958e:	ed87 7b18 	vstr	d7, [r7, #96]	@ 0x60
 8009592:	ed97 7b18 	vldr	d7, [r7, #96]	@ 0x60
 8009596:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800959a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800959e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095a2:	db04      	blt.n	80095ae <mg_dtoa+0x41e>
 80095a4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80095a6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80095a8:	4413      	add	r3, r2
 80095aa:	2b27      	cmp	r3, #39	@ 0x27
 80095ac:	dde1      	ble.n	8009572 <mg_dtoa+0x3e2>
    if (s + n < (int) sizeof(buf)) buf[n + s++] = '.';
 80095ae:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80095b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80095b2:	4413      	add	r3, r2
 80095b4:	2b27      	cmp	r3, #39	@ 0x27
 80095b6:	dc09      	bgt.n	80095cc <mg_dtoa+0x43c>
 80095b8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80095ba:	1c5a      	adds	r2, r3, #1
 80095bc:	673a      	str	r2, [r7, #112]	@ 0x70
 80095be:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80095c0:	4413      	add	r3, r2
 80095c2:	3378      	adds	r3, #120	@ 0x78
 80095c4:	443b      	add	r3, r7
 80095c6:	222e      	movs	r2, #46	@ 0x2e
 80095c8:	f803 2c60 	strb.w	r2, [r3, #-96]
    // printf(" 1--> [%g] -> [%.*s]\n", saved, s + n, buf);
    if (!tz && n > 0) targ_width = width + n;
 80095cc:	78fb      	ldrb	r3, [r7, #3]
 80095ce:	f083 0301 	eor.w	r3, r3, #1
 80095d2:	b2db      	uxtb	r3, r3
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d006      	beq.n	80095e6 <mg_dtoa+0x456>
 80095d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80095da:	2b00      	cmp	r3, #0
 80095dc:	dd03      	ble.n	80095e6 <mg_dtoa+0x456>
 80095de:	687a      	ldr	r2, [r7, #4]
 80095e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80095e2:	4413      	add	r3, r2
 80095e4:	657b      	str	r3, [r7, #84]	@ 0x54
    for (i = 0, t = 0.1; s + n < (int) sizeof(buf) && n < targ_width; i++) {
 80095e6:	2300      	movs	r3, #0
 80095e8:	677b      	str	r3, [r7, #116]	@ 0x74
 80095ea:	a342      	add	r3, pc, #264	@ (adr r3, 80096f4 <mg_dtoa+0x564>)
 80095ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095f0:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
 80095f4:	e031      	b.n	800965a <mg_dtoa+0x4ca>
      int ch = (int) (d / t);
 80095f6:	ed97 5b02 	vldr	d5, [r7, #8]
 80095fa:	ed97 6b18 	vldr	d6, [r7, #96]	@ 0x60
 80095fe:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8009602:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8009606:	ee17 3a90 	vmov	r3, s15
 800960a:	643b      	str	r3, [r7, #64]	@ 0x40
      buf[s + n++] = (char) (ch + '0');
 800960c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800960e:	b2da      	uxtb	r2, r3
 8009610:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009612:	1c59      	adds	r1, r3, #1
 8009614:	66f9      	str	r1, [r7, #108]	@ 0x6c
 8009616:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8009618:	440b      	add	r3, r1
 800961a:	3230      	adds	r2, #48	@ 0x30
 800961c:	b2d2      	uxtb	r2, r2
 800961e:	3378      	adds	r3, #120	@ 0x78
 8009620:	443b      	add	r3, r7
 8009622:	f803 2c60 	strb.w	r2, [r3, #-96]
      d -= ch * t;
 8009626:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009628:	ee07 3a90 	vmov	s15, r3
 800962c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8009630:	ed97 7b18 	vldr	d7, [r7, #96]	@ 0x60
 8009634:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009638:	ed97 6b02 	vldr	d6, [r7, #8]
 800963c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8009640:	ed87 7b02 	vstr	d7, [r7, #8]
      t /= 10.0;
 8009644:	ed97 6b18 	vldr	d6, [r7, #96]	@ 0x60
 8009648:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 800964c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8009650:	ed87 7b18 	vstr	d7, [r7, #96]	@ 0x60
    for (i = 0, t = 0.1; s + n < (int) sizeof(buf) && n < targ_width; i++) {
 8009654:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009656:	3301      	adds	r3, #1
 8009658:	677b      	str	r3, [r7, #116]	@ 0x74
 800965a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800965c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800965e:	4413      	add	r3, r2
 8009660:	2b27      	cmp	r3, #39	@ 0x27
 8009662:	dc07      	bgt.n	8009674 <mg_dtoa+0x4e4>
 8009664:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009666:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009668:	429a      	cmp	r2, r3
 800966a:	dbc4      	blt.n	80095f6 <mg_dtoa+0x466>
    }
  }

  while (tz && n > 0 && buf[s + n - 1] == '0') n--;  // Trim trailing zeroes
 800966c:	e002      	b.n	8009674 <mg_dtoa+0x4e4>
 800966e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009670:	3b01      	subs	r3, #1
 8009672:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009674:	78fb      	ldrb	r3, [r7, #3]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d00c      	beq.n	8009694 <mg_dtoa+0x504>
 800967a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800967c:	2b00      	cmp	r3, #0
 800967e:	dd09      	ble.n	8009694 <mg_dtoa+0x504>
 8009680:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8009682:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009684:	4413      	add	r3, r2
 8009686:	3b01      	subs	r3, #1
 8009688:	3378      	adds	r3, #120	@ 0x78
 800968a:	443b      	add	r3, r7
 800968c:	f813 3c60 	ldrb.w	r3, [r3, #-96]
 8009690:	2b30      	cmp	r3, #48	@ 0x30
 8009692:	d0ec      	beq.n	800966e <mg_dtoa+0x4de>
  if (tz && n > 0 && buf[s + n - 1] == '.') n--;           // Trim trailing dot
 8009694:	78fb      	ldrb	r3, [r7, #3]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d00f      	beq.n	80096ba <mg_dtoa+0x52a>
 800969a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800969c:	2b00      	cmp	r3, #0
 800969e:	dd0c      	ble.n	80096ba <mg_dtoa+0x52a>
 80096a0:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80096a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80096a4:	4413      	add	r3, r2
 80096a6:	3b01      	subs	r3, #1
 80096a8:	3378      	adds	r3, #120	@ 0x78
 80096aa:	443b      	add	r3, r7
 80096ac:	f813 3c60 	ldrb.w	r3, [r3, #-96]
 80096b0:	2b2e      	cmp	r3, #46	@ 0x2e
 80096b2:	d102      	bne.n	80096ba <mg_dtoa+0x52a>
 80096b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80096b6:	3b01      	subs	r3, #1
 80096b8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  n += s;
 80096ba:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80096bc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80096be:	4413      	add	r3, r2
 80096c0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (n >= (int) sizeof(buf)) n = (int) sizeof(buf) - 1;
 80096c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80096c4:	2b27      	cmp	r3, #39	@ 0x27
 80096c6:	dd01      	ble.n	80096cc <mg_dtoa+0x53c>
 80096c8:	2327      	movs	r3, #39	@ 0x27
 80096ca:	66fb      	str	r3, [r7, #108]	@ 0x6c
  buf[n] = '\0';
 80096cc:	f107 0218 	add.w	r2, r7, #24
 80096d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80096d2:	4413      	add	r3, r2
 80096d4:	2200      	movs	r2, #0
 80096d6:	701a      	strb	r2, [r3, #0]
  return mg_snprintf(dst, dstlen, "%s", buf);
 80096d8:	f107 0318 	add.w	r3, r7, #24
 80096dc:	4a04      	ldr	r2, [pc, #16]	@ (80096f0 <mg_dtoa+0x560>)
 80096de:	6939      	ldr	r1, [r7, #16]
 80096e0:	6978      	ldr	r0, [r7, #20]
 80096e2:	f009 fd1b 	bl	801311c <mg_snprintf>
 80096e6:	4603      	mov	r3, r0
}
 80096e8:	4618      	mov	r0, r3
 80096ea:	3778      	adds	r7, #120	@ 0x78
 80096ec:	46bd      	mov	sp, r7
 80096ee:	bd80      	pop	{r7, pc}
 80096f0:	08029f08 	.word	0x08029f08
 80096f4:	9999999a 	.word	0x9999999a
 80096f8:	3fb99999 	.word	0x3fb99999

080096fc <mg_lld>:

static size_t mg_lld(char *buf, int64_t val, bool is_signed, bool is_hex) {
 80096fc:	b5b0      	push	{r4, r5, r7, lr}
 80096fe:	b08c      	sub	sp, #48	@ 0x30
 8009700:	af00      	add	r7, sp, #0
 8009702:	60f8      	str	r0, [r7, #12]
 8009704:	e9c7 2300 	strd	r2, r3, [r7]
  const char *letters = "0123456789abcdef";
 8009708:	4b53      	ldr	r3, [pc, #332]	@ (8009858 <mg_lld+0x15c>)
 800970a:	61bb      	str	r3, [r7, #24]
  uint64_t v = (uint64_t) val;
 800970c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009710:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
  size_t s = 0, n, i;
 8009714:	2300      	movs	r3, #0
 8009716:	627b      	str	r3, [r7, #36]	@ 0x24
  if (is_signed && val < 0) buf[s++] = '-', v = (uint64_t) (-val);
 8009718:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800971c:	2b00      	cmp	r3, #0
 800971e:	d012      	beq.n	8009746 <mg_lld+0x4a>
 8009720:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009724:	2b00      	cmp	r3, #0
 8009726:	da0e      	bge.n	8009746 <mg_lld+0x4a>
 8009728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800972a:	1c5a      	adds	r2, r3, #1
 800972c:	627a      	str	r2, [r7, #36]	@ 0x24
 800972e:	68fa      	ldr	r2, [r7, #12]
 8009730:	4413      	add	r3, r2
 8009732:	222d      	movs	r2, #45	@ 0x2d
 8009734:	701a      	strb	r2, [r3, #0]
 8009736:	e9d7 2300 	ldrd	r2, r3, [r7]
 800973a:	2100      	movs	r1, #0
 800973c:	4254      	negs	r4, r2
 800973e:	eb61 0503 	sbc.w	r5, r1, r3
 8009742:	e9c7 450a 	strd	r4, r5, [r7, #40]	@ 0x28
  // This loop prints a number in reverse order. I guess this is because we
  // write numbers from right to left: least significant digit comes last.
  // Maybe because we use Arabic numbers, and Arabs write RTL?
  if (is_hex) {
 8009746:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 800974a:	2b00      	cmp	r3, #0
 800974c:	d021      	beq.n	8009792 <mg_lld+0x96>
    for (n = 0; v; v >>= 4) buf[s + n++] = letters[v & 15];
 800974e:	2300      	movs	r3, #0
 8009750:	623b      	str	r3, [r7, #32]
 8009752:	e019      	b.n	8009788 <mg_lld+0x8c>
 8009754:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009756:	f003 030f 	and.w	r3, r3, #15
 800975a:	69ba      	ldr	r2, [r7, #24]
 800975c:	441a      	add	r2, r3
 800975e:	6a3b      	ldr	r3, [r7, #32]
 8009760:	1c59      	adds	r1, r3, #1
 8009762:	6239      	str	r1, [r7, #32]
 8009764:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009766:	440b      	add	r3, r1
 8009768:	68f9      	ldr	r1, [r7, #12]
 800976a:	440b      	add	r3, r1
 800976c:	7812      	ldrb	r2, [r2, #0]
 800976e:	701a      	strb	r2, [r3, #0]
 8009770:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8009774:	f04f 0200 	mov.w	r2, #0
 8009778:	f04f 0300 	mov.w	r3, #0
 800977c:	0902      	lsrs	r2, r0, #4
 800977e:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 8009782:	090b      	lsrs	r3, r1, #4
 8009784:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8009788:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800978c:	4313      	orrs	r3, r2
 800978e:	d1e1      	bne.n	8009754 <mg_lld+0x58>
 8009790:	e025      	b.n	80097de <mg_lld+0xe2>
  } else {
    for (n = 0; v; v /= 10) buf[s + n++] = letters[v % 10];
 8009792:	2300      	movs	r3, #0
 8009794:	623b      	str	r3, [r7, #32]
 8009796:	e01e      	b.n	80097d6 <mg_lld+0xda>
 8009798:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800979c:	f04f 020a 	mov.w	r2, #10
 80097a0:	f04f 0300 	mov.w	r3, #0
 80097a4:	f7f6 ffd8 	bl	8000758 <__aeabi_uldivmod>
 80097a8:	69bb      	ldr	r3, [r7, #24]
 80097aa:	441a      	add	r2, r3
 80097ac:	6a3b      	ldr	r3, [r7, #32]
 80097ae:	1c59      	adds	r1, r3, #1
 80097b0:	6239      	str	r1, [r7, #32]
 80097b2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80097b4:	440b      	add	r3, r1
 80097b6:	68f9      	ldr	r1, [r7, #12]
 80097b8:	440b      	add	r3, r1
 80097ba:	7812      	ldrb	r2, [r2, #0]
 80097bc:	701a      	strb	r2, [r3, #0]
 80097be:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80097c2:	f04f 020a 	mov.w	r2, #10
 80097c6:	f04f 0300 	mov.w	r3, #0
 80097ca:	f7f6 ffc5 	bl	8000758 <__aeabi_uldivmod>
 80097ce:	4602      	mov	r2, r0
 80097d0:	460b      	mov	r3, r1
 80097d2:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 80097d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80097da:	4313      	orrs	r3, r2
 80097dc:	d1dc      	bne.n	8009798 <mg_lld+0x9c>
  }
  // Reverse a string
  for (i = 0; i < n / 2; i++) {
 80097de:	2300      	movs	r3, #0
 80097e0:	61fb      	str	r3, [r7, #28]
 80097e2:	e022      	b.n	800982a <mg_lld+0x12e>
    char t = buf[s + i];
 80097e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80097e6:	69fb      	ldr	r3, [r7, #28]
 80097e8:	4413      	add	r3, r2
 80097ea:	68fa      	ldr	r2, [r7, #12]
 80097ec:	4413      	add	r3, r2
 80097ee:	781b      	ldrb	r3, [r3, #0]
 80097f0:	75fb      	strb	r3, [r7, #23]
    buf[s + i] = buf[s + n - i - 1], buf[s + n - i - 1] = t;
 80097f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80097f4:	6a3b      	ldr	r3, [r7, #32]
 80097f6:	441a      	add	r2, r3
 80097f8:	69fb      	ldr	r3, [r7, #28]
 80097fa:	1ad3      	subs	r3, r2, r3
 80097fc:	3b01      	subs	r3, #1
 80097fe:	68fa      	ldr	r2, [r7, #12]
 8009800:	441a      	add	r2, r3
 8009802:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009804:	69fb      	ldr	r3, [r7, #28]
 8009806:	440b      	add	r3, r1
 8009808:	68f9      	ldr	r1, [r7, #12]
 800980a:	440b      	add	r3, r1
 800980c:	7812      	ldrb	r2, [r2, #0]
 800980e:	701a      	strb	r2, [r3, #0]
 8009810:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009812:	6a3b      	ldr	r3, [r7, #32]
 8009814:	441a      	add	r2, r3
 8009816:	69fb      	ldr	r3, [r7, #28]
 8009818:	1ad3      	subs	r3, r2, r3
 800981a:	3b01      	subs	r3, #1
 800981c:	68fa      	ldr	r2, [r7, #12]
 800981e:	4413      	add	r3, r2
 8009820:	7dfa      	ldrb	r2, [r7, #23]
 8009822:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < n / 2; i++) {
 8009824:	69fb      	ldr	r3, [r7, #28]
 8009826:	3301      	adds	r3, #1
 8009828:	61fb      	str	r3, [r7, #28]
 800982a:	6a3b      	ldr	r3, [r7, #32]
 800982c:	085b      	lsrs	r3, r3, #1
 800982e:	69fa      	ldr	r2, [r7, #28]
 8009830:	429a      	cmp	r2, r3
 8009832:	d3d7      	bcc.n	80097e4 <mg_lld+0xe8>
  }
  if (val == 0) buf[n++] = '0';  // Handle special case
 8009834:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009838:	4313      	orrs	r3, r2
 800983a:	d106      	bne.n	800984a <mg_lld+0x14e>
 800983c:	6a3b      	ldr	r3, [r7, #32]
 800983e:	1c5a      	adds	r2, r3, #1
 8009840:	623a      	str	r2, [r7, #32]
 8009842:	68fa      	ldr	r2, [r7, #12]
 8009844:	4413      	add	r3, r2
 8009846:	2230      	movs	r2, #48	@ 0x30
 8009848:	701a      	strb	r2, [r3, #0]
  return n + s;
 800984a:	6a3a      	ldr	r2, [r7, #32]
 800984c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800984e:	4413      	add	r3, r2
}
 8009850:	4618      	mov	r0, r3
 8009852:	3730      	adds	r7, #48	@ 0x30
 8009854:	46bd      	mov	sp, r7
 8009856:	bdb0      	pop	{r4, r5, r7, pc}
 8009858:	08029f24 	.word	0x08029f24

0800985c <scpy>:

static size_t scpy(void (*out)(char, void *), void *ptr, char *buf,
                          size_t len) {
 800985c:	b580      	push	{r7, lr}
 800985e:	b086      	sub	sp, #24
 8009860:	af00      	add	r7, sp, #0
 8009862:	60f8      	str	r0, [r7, #12]
 8009864:	60b9      	str	r1, [r7, #8]
 8009866:	607a      	str	r2, [r7, #4]
 8009868:	603b      	str	r3, [r7, #0]
  size_t i = 0;
 800986a:	2300      	movs	r3, #0
 800986c:	617b      	str	r3, [r7, #20]
  while (i < len && buf[i] != '\0') out(buf[i++], ptr);
 800986e:	e009      	b.n	8009884 <scpy+0x28>
 8009870:	697b      	ldr	r3, [r7, #20]
 8009872:	1c5a      	adds	r2, r3, #1
 8009874:	617a      	str	r2, [r7, #20]
 8009876:	687a      	ldr	r2, [r7, #4]
 8009878:	4413      	add	r3, r2
 800987a:	781a      	ldrb	r2, [r3, #0]
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	68b9      	ldr	r1, [r7, #8]
 8009880:	4610      	mov	r0, r2
 8009882:	4798      	blx	r3
 8009884:	697a      	ldr	r2, [r7, #20]
 8009886:	683b      	ldr	r3, [r7, #0]
 8009888:	429a      	cmp	r2, r3
 800988a:	d205      	bcs.n	8009898 <scpy+0x3c>
 800988c:	687a      	ldr	r2, [r7, #4]
 800988e:	697b      	ldr	r3, [r7, #20]
 8009890:	4413      	add	r3, r2
 8009892:	781b      	ldrb	r3, [r3, #0]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d1eb      	bne.n	8009870 <scpy+0x14>
  return i;
 8009898:	697b      	ldr	r3, [r7, #20]
}
 800989a:	4618      	mov	r0, r3
 800989c:	3718      	adds	r7, #24
 800989e:	46bd      	mov	sp, r7
 80098a0:	bd80      	pop	{r7, pc}

080098a2 <mg_xprintf>:

size_t mg_xprintf(void (*out)(char, void *), void *ptr, const char *fmt, ...) {
 80098a2:	b40c      	push	{r2, r3}
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b084      	sub	sp, #16
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
 80098ac:	6039      	str	r1, [r7, #0]
  size_t len = 0;
 80098ae:	2300      	movs	r3, #0
 80098b0:	60fb      	str	r3, [r7, #12]
  va_list ap;
  va_start(ap, fmt);
 80098b2:	f107 031c 	add.w	r3, r7, #28
 80098b6:	60bb      	str	r3, [r7, #8]
  len = mg_vxprintf(out, ptr, fmt, &ap);
 80098b8:	f107 0308 	add.w	r3, r7, #8
 80098bc:	69ba      	ldr	r2, [r7, #24]
 80098be:	6839      	ldr	r1, [r7, #0]
 80098c0:	6878      	ldr	r0, [r7, #4]
 80098c2:	f000 f809 	bl	80098d8 <mg_vxprintf>
 80098c6:	60f8      	str	r0, [r7, #12]
  va_end(ap);
  return len;
 80098c8:	68fb      	ldr	r3, [r7, #12]
}
 80098ca:	4618      	mov	r0, r3
 80098cc:	3710      	adds	r7, #16
 80098ce:	46bd      	mov	sp, r7
 80098d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80098d4:	b002      	add	sp, #8
 80098d6:	4770      	bx	lr

080098d8 <mg_vxprintf>:

size_t mg_vxprintf(void (*out)(char, void *), void *param, const char *fmt,
                   va_list *ap) {
 80098d8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80098dc:	b0a6      	sub	sp, #152	@ 0x98
 80098de:	af02      	add	r7, sp, #8
 80098e0:	60f8      	str	r0, [r7, #12]
 80098e2:	60b9      	str	r1, [r7, #8]
 80098e4:	607a      	str	r2, [r7, #4]
 80098e6:	603b      	str	r3, [r7, #0]
  size_t i = 0, n = 0;
 80098e8:	2300      	movs	r3, #0
 80098ea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80098ee:	2300      	movs	r3, #0
 80098f0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  while (fmt[i] != '\0') {
 80098f4:	e383      	b.n	8009ffe <mg_vxprintf+0x726>
    if (fmt[i] == '%') {
 80098f6:	687a      	ldr	r2, [r7, #4]
 80098f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80098fc:	4413      	add	r3, r2
 80098fe:	781b      	ldrb	r3, [r3, #0]
 8009900:	2b25      	cmp	r3, #37	@ 0x25
 8009902:	f040 8369 	bne.w	8009fd8 <mg_vxprintf+0x700>
      size_t j, k, x = 0, is_long = 0, w = 0 /* width */, pr = ~0U /* prec */;
 8009906:	2300      	movs	r3, #0
 8009908:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800990a:	2300      	movs	r3, #0
 800990c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800990e:	2300      	movs	r3, #0
 8009910:	677b      	str	r3, [r7, #116]	@ 0x74
 8009912:	f04f 33ff 	mov.w	r3, #4294967295
 8009916:	673b      	str	r3, [r7, #112]	@ 0x70
      char pad = ' ', minus = 0, c = fmt[++i];
 8009918:	2320      	movs	r3, #32
 800991a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800991e:	2300      	movs	r3, #0
 8009920:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 8009924:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009928:	3301      	adds	r3, #1
 800992a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800992e:	687a      	ldr	r2, [r7, #4]
 8009930:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009934:	4413      	add	r3, r2
 8009936:	781b      	ldrb	r3, [r3, #0]
 8009938:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
      if (c == '#') x++, c = fmt[++i];
 800993c:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8009940:	2b23      	cmp	r3, #35	@ 0x23
 8009942:	d10e      	bne.n	8009962 <mg_vxprintf+0x8a>
 8009944:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009946:	3301      	adds	r3, #1
 8009948:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800994a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800994e:	3301      	adds	r3, #1
 8009950:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009954:	687a      	ldr	r2, [r7, #4]
 8009956:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800995a:	4413      	add	r3, r2
 800995c:	781b      	ldrb	r3, [r3, #0]
 800995e:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
      if (c == '-') minus++, c = fmt[++i];
 8009962:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8009966:	2b2d      	cmp	r3, #45	@ 0x2d
 8009968:	d110      	bne.n	800998c <mg_vxprintf+0xb4>
 800996a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800996e:	3301      	adds	r3, #1
 8009970:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 8009974:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009978:	3301      	adds	r3, #1
 800997a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800997e:	687a      	ldr	r2, [r7, #4]
 8009980:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009984:	4413      	add	r3, r2
 8009986:	781b      	ldrb	r3, [r3, #0]
 8009988:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
      if (c == '0') pad = '0', c = fmt[++i];
 800998c:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8009990:	2b30      	cmp	r3, #48	@ 0x30
 8009992:	d127      	bne.n	80099e4 <mg_vxprintf+0x10c>
 8009994:	2330      	movs	r3, #48	@ 0x30
 8009996:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800999a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800999e:	3301      	adds	r3, #1
 80099a0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80099a4:	687a      	ldr	r2, [r7, #4]
 80099a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80099aa:	4413      	add	r3, r2
 80099ac:	781b      	ldrb	r3, [r3, #0]
 80099ae:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
      while (is_digit(c)) w *= 10, w += (size_t) (c - '0'), c = fmt[++i];
 80099b2:	e017      	b.n	80099e4 <mg_vxprintf+0x10c>
 80099b4:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80099b6:	4613      	mov	r3, r2
 80099b8:	009b      	lsls	r3, r3, #2
 80099ba:	4413      	add	r3, r2
 80099bc:	005b      	lsls	r3, r3, #1
 80099be:	677b      	str	r3, [r7, #116]	@ 0x74
 80099c0:	f897 206e 	ldrb.w	r2, [r7, #110]	@ 0x6e
 80099c4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80099c6:	4413      	add	r3, r2
 80099c8:	3b30      	subs	r3, #48	@ 0x30
 80099ca:	677b      	str	r3, [r7, #116]	@ 0x74
 80099cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80099d0:	3301      	adds	r3, #1
 80099d2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80099d6:	687a      	ldr	r2, [r7, #4]
 80099d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80099dc:	4413      	add	r3, r2
 80099de:	781b      	ldrb	r3, [r3, #0]
 80099e0:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 80099e4:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80099e8:	4618      	mov	r0, r3
 80099ea:	f7ff fae5 	bl	8008fb8 <is_digit>
 80099ee:	4603      	mov	r3, r0
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d1df      	bne.n	80099b4 <mg_vxprintf+0xdc>
      if (c == '.') {
 80099f4:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80099f8:	2b2e      	cmp	r3, #46	@ 0x2e
 80099fa:	d153      	bne.n	8009aa4 <mg_vxprintf+0x1cc>
        c = fmt[++i];
 80099fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009a00:	3301      	adds	r3, #1
 8009a02:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009a06:	687a      	ldr	r2, [r7, #4]
 8009a08:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009a0c:	4413      	add	r3, r2
 8009a0e:	781b      	ldrb	r3, [r3, #0]
 8009a10:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
        if (c == '*') {
 8009a14:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8009a18:	2b2a      	cmp	r3, #42	@ 0x2a
 8009a1a:	d113      	bne.n	8009a44 <mg_vxprintf+0x16c>
          pr = (size_t) va_arg(*ap, int);
 8009a1c:	683b      	ldr	r3, [r7, #0]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	1d19      	adds	r1, r3, #4
 8009a22:	683a      	ldr	r2, [r7, #0]
 8009a24:	6011      	str	r1, [r2, #0]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	673b      	str	r3, [r7, #112]	@ 0x70
          c = fmt[++i];
 8009a2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009a2e:	3301      	adds	r3, #1
 8009a30:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009a34:	687a      	ldr	r2, [r7, #4]
 8009a36:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009a3a:	4413      	add	r3, r2
 8009a3c:	781b      	ldrb	r3, [r3, #0]
 8009a3e:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 8009a42:	e02f      	b.n	8009aa4 <mg_vxprintf+0x1cc>
        } else {
          pr = 0;
 8009a44:	2300      	movs	r3, #0
 8009a46:	673b      	str	r3, [r7, #112]	@ 0x70
          while (is_digit(c)) pr *= 10, pr += (size_t) (c - '0'), c = fmt[++i];
 8009a48:	e017      	b.n	8009a7a <mg_vxprintf+0x1a2>
 8009a4a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8009a4c:	4613      	mov	r3, r2
 8009a4e:	009b      	lsls	r3, r3, #2
 8009a50:	4413      	add	r3, r2
 8009a52:	005b      	lsls	r3, r3, #1
 8009a54:	673b      	str	r3, [r7, #112]	@ 0x70
 8009a56:	f897 206e 	ldrb.w	r2, [r7, #110]	@ 0x6e
 8009a5a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009a5c:	4413      	add	r3, r2
 8009a5e:	3b30      	subs	r3, #48	@ 0x30
 8009a60:	673b      	str	r3, [r7, #112]	@ 0x70
 8009a62:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009a66:	3301      	adds	r3, #1
 8009a68:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009a6c:	687a      	ldr	r2, [r7, #4]
 8009a6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009a72:	4413      	add	r3, r2
 8009a74:	781b      	ldrb	r3, [r3, #0]
 8009a76:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 8009a7a:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8009a7e:	4618      	mov	r0, r3
 8009a80:	f7ff fa9a 	bl	8008fb8 <is_digit>
 8009a84:	4603      	mov	r3, r0
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d1df      	bne.n	8009a4a <mg_vxprintf+0x172>
        }
      }
      while (c == 'h') c = fmt[++i];  // Treat h and hh as int
 8009a8a:	e00b      	b.n	8009aa4 <mg_vxprintf+0x1cc>
 8009a8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009a90:	3301      	adds	r3, #1
 8009a92:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009a96:	687a      	ldr	r2, [r7, #4]
 8009a98:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009a9c:	4413      	add	r3, r2
 8009a9e:	781b      	ldrb	r3, [r3, #0]
 8009aa0:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 8009aa4:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8009aa8:	2b68      	cmp	r3, #104	@ 0x68
 8009aaa:	d0ef      	beq.n	8009a8c <mg_vxprintf+0x1b4>
      if (c == 'l') {
 8009aac:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8009ab0:	2b6c      	cmp	r3, #108	@ 0x6c
 8009ab2:	d121      	bne.n	8009af8 <mg_vxprintf+0x220>
        is_long++, c = fmt[++i];
 8009ab4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009ab6:	3301      	adds	r3, #1
 8009ab8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009aba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009abe:	3301      	adds	r3, #1
 8009ac0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009ac4:	687a      	ldr	r2, [r7, #4]
 8009ac6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009aca:	4413      	add	r3, r2
 8009acc:	781b      	ldrb	r3, [r3, #0]
 8009ace:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
        if (c == 'l') is_long++, c = fmt[++i];
 8009ad2:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8009ad6:	2b6c      	cmp	r3, #108	@ 0x6c
 8009ad8:	d10e      	bne.n	8009af8 <mg_vxprintf+0x220>
 8009ada:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009adc:	3301      	adds	r3, #1
 8009ade:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009ae0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009ae4:	3301      	adds	r3, #1
 8009ae6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009aea:	687a      	ldr	r2, [r7, #4]
 8009aec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009af0:	4413      	add	r3, r2
 8009af2:	781b      	ldrb	r3, [r3, #0]
 8009af4:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
      }
      if (c == 'p') x = 1, is_long = 1;
 8009af8:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8009afc:	2b70      	cmp	r3, #112	@ 0x70
 8009afe:	d103      	bne.n	8009b08 <mg_vxprintf+0x230>
 8009b00:	2301      	movs	r3, #1
 8009b02:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009b04:	2301      	movs	r3, #1
 8009b06:	67bb      	str	r3, [r7, #120]	@ 0x78
      if (c == 'd' || c == 'u' || c == 'x' || c == 'X' || c == 'p' ||
 8009b08:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8009b0c:	2b64      	cmp	r3, #100	@ 0x64
 8009b0e:	d018      	beq.n	8009b42 <mg_vxprintf+0x26a>
 8009b10:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8009b14:	2b75      	cmp	r3, #117	@ 0x75
 8009b16:	d014      	beq.n	8009b42 <mg_vxprintf+0x26a>
 8009b18:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8009b1c:	2b78      	cmp	r3, #120	@ 0x78
 8009b1e:	d010      	beq.n	8009b42 <mg_vxprintf+0x26a>
 8009b20:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8009b24:	2b58      	cmp	r3, #88	@ 0x58
 8009b26:	d00c      	beq.n	8009b42 <mg_vxprintf+0x26a>
 8009b28:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8009b2c:	2b70      	cmp	r3, #112	@ 0x70
 8009b2e:	d008      	beq.n	8009b42 <mg_vxprintf+0x26a>
 8009b30:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8009b34:	2b67      	cmp	r3, #103	@ 0x67
 8009b36:	d004      	beq.n	8009b42 <mg_vxprintf+0x26a>
          c == 'g' || c == 'f') {
 8009b38:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8009b3c:	2b66      	cmp	r3, #102	@ 0x66
 8009b3e:	f040 816c 	bne.w	8009e1a <mg_vxprintf+0x542>
        bool s = (c == 'd'), h = (c == 'x' || c == 'X' || c == 'p');
 8009b42:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8009b46:	2b64      	cmp	r3, #100	@ 0x64
 8009b48:	bf0c      	ite	eq
 8009b4a:	2301      	moveq	r3, #1
 8009b4c:	2300      	movne	r3, #0
 8009b4e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8009b52:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8009b56:	2b78      	cmp	r3, #120	@ 0x78
 8009b58:	d007      	beq.n	8009b6a <mg_vxprintf+0x292>
 8009b5a:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8009b5e:	2b58      	cmp	r3, #88	@ 0x58
 8009b60:	d003      	beq.n	8009b6a <mg_vxprintf+0x292>
 8009b62:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8009b66:	2b70      	cmp	r3, #112	@ 0x70
 8009b68:	d101      	bne.n	8009b6e <mg_vxprintf+0x296>
 8009b6a:	2301      	movs	r3, #1
 8009b6c:	e000      	b.n	8009b70 <mg_vxprintf+0x298>
 8009b6e:	2300      	movs	r3, #0
 8009b70:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
 8009b74:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8009b78:	f003 0301 	and.w	r3, r3, #1
 8009b7c:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
        char tmp[40];
        size_t xl = x ? 2 : 0;
 8009b80:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d001      	beq.n	8009b8a <mg_vxprintf+0x2b2>
 8009b86:	2302      	movs	r3, #2
 8009b88:	e000      	b.n	8009b8c <mg_vxprintf+0x2b4>
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	65bb      	str	r3, [r7, #88]	@ 0x58
        if (c == 'g' || c == 'f') {
 8009b8e:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8009b92:	2b67      	cmp	r3, #103	@ 0x67
 8009b94:	d003      	beq.n	8009b9e <mg_vxprintf+0x2c6>
 8009b96:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8009b9a:	2b66      	cmp	r3, #102	@ 0x66
 8009b9c:	d124      	bne.n	8009be8 <mg_vxprintf+0x310>
          double v = va_arg(*ap, double);
 8009b9e:	683b      	ldr	r3, [r7, #0]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	3307      	adds	r3, #7
 8009ba4:	f023 0307 	bic.w	r3, r3, #7
 8009ba8:	f103 0108 	add.w	r1, r3, #8
 8009bac:	683a      	ldr	r2, [r7, #0]
 8009bae:	6011      	str	r1, [r2, #0]
 8009bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bb4:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
          if (pr == ~0U) pr = 6;
 8009bb8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009bba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bbe:	d101      	bne.n	8009bc4 <mg_vxprintf+0x2ec>
 8009bc0:	2306      	movs	r3, #6
 8009bc2:	673b      	str	r3, [r7, #112]	@ 0x70
          k = mg_dtoa(tmp, sizeof(tmp), v, (int) pr, c == 'g');
 8009bc4:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8009bc6:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8009bca:	2b67      	cmp	r3, #103	@ 0x67
 8009bcc:	bf0c      	ite	eq
 8009bce:	2301      	moveq	r3, #1
 8009bd0:	2300      	movne	r3, #0
 8009bd2:	b2db      	uxtb	r3, r3
 8009bd4:	f107 0014 	add.w	r0, r7, #20
 8009bd8:	ed97 0b10 	vldr	d0, [r7, #64]	@ 0x40
 8009bdc:	2128      	movs	r1, #40	@ 0x28
 8009bde:	f7ff fad7 	bl	8009190 <mg_dtoa>
 8009be2:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
        if (c == 'g' || c == 'f') {
 8009be6:	e069      	b.n	8009cbc <mg_vxprintf+0x3e4>
        } else if (is_long == 2) {
 8009be8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009bea:	2b02      	cmp	r3, #2
 8009bec:	d11c      	bne.n	8009c28 <mg_vxprintf+0x350>
          int64_t v = va_arg(*ap, int64_t);
 8009bee:	683b      	ldr	r3, [r7, #0]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	3307      	adds	r3, #7
 8009bf4:	f023 0307 	bic.w	r3, r3, #7
 8009bf8:	f103 0108 	add.w	r1, r3, #8
 8009bfc:	683a      	ldr	r2, [r7, #0]
 8009bfe:	6011      	str	r1, [r2, #0]
 8009c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c04:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
          k = mg_lld(tmp, v, s, h);
 8009c08:	f107 0114 	add.w	r1, r7, #20
 8009c0c:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8009c10:	9301      	str	r3, [sp, #4]
 8009c12:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009c16:	9300      	str	r3, [sp, #0]
 8009c18:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009c1c:	4608      	mov	r0, r1
 8009c1e:	f7ff fd6d 	bl	80096fc <mg_lld>
 8009c22:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
 8009c26:	e049      	b.n	8009cbc <mg_vxprintf+0x3e4>
        } else if (is_long == 1) {
 8009c28:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009c2a:	2b01      	cmp	r3, #1
 8009c2c:	d123      	bne.n	8009c76 <mg_vxprintf+0x39e>
          long v = va_arg(*ap, long);
 8009c2e:	683b      	ldr	r3, [r7, #0]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	1d19      	adds	r1, r3, #4
 8009c34:	683a      	ldr	r2, [r7, #0]
 8009c36:	6011      	str	r1, [r2, #0]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	653b      	str	r3, [r7, #80]	@ 0x50
          k = mg_lld(tmp, s ? (int64_t) v : (int64_t) (unsigned long) v, s, h);
 8009c3c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d004      	beq.n	8009c4e <mg_vxprintf+0x376>
 8009c44:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009c46:	17da      	asrs	r2, r3, #31
 8009c48:	461c      	mov	r4, r3
 8009c4a:	4615      	mov	r5, r2
 8009c4c:	e003      	b.n	8009c56 <mg_vxprintf+0x37e>
 8009c4e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009c50:	2200      	movs	r2, #0
 8009c52:	461c      	mov	r4, r3
 8009c54:	4615      	mov	r5, r2
 8009c56:	f107 0114 	add.w	r1, r7, #20
 8009c5a:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8009c5e:	9301      	str	r3, [sp, #4]
 8009c60:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009c64:	9300      	str	r3, [sp, #0]
 8009c66:	4622      	mov	r2, r4
 8009c68:	462b      	mov	r3, r5
 8009c6a:	4608      	mov	r0, r1
 8009c6c:	f7ff fd46 	bl	80096fc <mg_lld>
 8009c70:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
 8009c74:	e022      	b.n	8009cbc <mg_vxprintf+0x3e4>
        } else {
          int v = va_arg(*ap, int);
 8009c76:	683b      	ldr	r3, [r7, #0]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	1d19      	adds	r1, r3, #4
 8009c7c:	683a      	ldr	r2, [r7, #0]
 8009c7e:	6011      	str	r1, [r2, #0]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	657b      	str	r3, [r7, #84]	@ 0x54
          k = mg_lld(tmp, s ? (int64_t) v : (int64_t) (unsigned) v, s, h);
 8009c84:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d004      	beq.n	8009c96 <mg_vxprintf+0x3be>
 8009c8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009c8e:	17da      	asrs	r2, r3, #31
 8009c90:	4698      	mov	r8, r3
 8009c92:	4691      	mov	r9, r2
 8009c94:	e003      	b.n	8009c9e <mg_vxprintf+0x3c6>
 8009c96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009c98:	2200      	movs	r2, #0
 8009c9a:	4698      	mov	r8, r3
 8009c9c:	4691      	mov	r9, r2
 8009c9e:	f107 0114 	add.w	r1, r7, #20
 8009ca2:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8009ca6:	9301      	str	r3, [sp, #4]
 8009ca8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009cac:	9300      	str	r3, [sp, #0]
 8009cae:	4642      	mov	r2, r8
 8009cb0:	464b      	mov	r3, r9
 8009cb2:	4608      	mov	r0, r1
 8009cb4:	f7ff fd22 	bl	80096fc <mg_lld>
 8009cb8:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
        }
        for (j = 0; j < xl && w > 0; j++) w--;
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009cc2:	e007      	b.n	8009cd4 <mg_vxprintf+0x3fc>
 8009cc4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009cc6:	3b01      	subs	r3, #1
 8009cc8:	677b      	str	r3, [r7, #116]	@ 0x74
 8009cca:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009cce:	3301      	adds	r3, #1
 8009cd0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009cd4:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8009cd8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009cda:	429a      	cmp	r2, r3
 8009cdc:	d202      	bcs.n	8009ce4 <mg_vxprintf+0x40c>
 8009cde:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d1ef      	bne.n	8009cc4 <mg_vxprintf+0x3ec>
        for (j = 0; pad == ' ' && !minus && k < w && j + k < w; j++)
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009cea:	e011      	b.n	8009d10 <mg_vxprintf+0x438>
          n += scpy(out, param, &pad, 1);
 8009cec:	f107 023f 	add.w	r2, r7, #63	@ 0x3f
 8009cf0:	2301      	movs	r3, #1
 8009cf2:	68b9      	ldr	r1, [r7, #8]
 8009cf4:	68f8      	ldr	r0, [r7, #12]
 8009cf6:	f7ff fdb1 	bl	800985c <scpy>
 8009cfa:	4602      	mov	r2, r0
 8009cfc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009d00:	4413      	add	r3, r2
 8009d02:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; pad == ' ' && !minus && k < w && j + k < w; j++)
 8009d06:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009d0a:	3301      	adds	r3, #1
 8009d0c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009d10:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8009d14:	2b20      	cmp	r3, #32
 8009d16:	d110      	bne.n	8009d3a <mg_vxprintf+0x462>
 8009d18:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d10c      	bne.n	8009d3a <mg_vxprintf+0x462>
 8009d20:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009d24:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009d26:	429a      	cmp	r2, r3
 8009d28:	d207      	bcs.n	8009d3a <mg_vxprintf+0x462>
 8009d2a:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8009d2e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009d32:	4413      	add	r3, r2
 8009d34:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8009d36:	429a      	cmp	r2, r3
 8009d38:	d8d8      	bhi.n	8009cec <mg_vxprintf+0x414>
        n += scpy(out, param, (char *) "0x", xl);
 8009d3a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009d3c:	4ab7      	ldr	r2, [pc, #732]	@ (800a01c <mg_vxprintf+0x744>)
 8009d3e:	68b9      	ldr	r1, [r7, #8]
 8009d40:	68f8      	ldr	r0, [r7, #12]
 8009d42:	f7ff fd8b 	bl	800985c <scpy>
 8009d46:	4602      	mov	r2, r0
 8009d48:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009d4c:	4413      	add	r3, r2
 8009d4e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; pad == '0' && k < w && j + k < w; j++)
 8009d52:	2300      	movs	r3, #0
 8009d54:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009d58:	e011      	b.n	8009d7e <mg_vxprintf+0x4a6>
          n += scpy(out, param, &pad, 1);
 8009d5a:	f107 023f 	add.w	r2, r7, #63	@ 0x3f
 8009d5e:	2301      	movs	r3, #1
 8009d60:	68b9      	ldr	r1, [r7, #8]
 8009d62:	68f8      	ldr	r0, [r7, #12]
 8009d64:	f7ff fd7a 	bl	800985c <scpy>
 8009d68:	4602      	mov	r2, r0
 8009d6a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009d6e:	4413      	add	r3, r2
 8009d70:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; pad == '0' && k < w && j + k < w; j++)
 8009d74:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009d78:	3301      	adds	r3, #1
 8009d7a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009d7e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8009d82:	2b30      	cmp	r3, #48	@ 0x30
 8009d84:	d10c      	bne.n	8009da0 <mg_vxprintf+0x4c8>
 8009d86:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009d8a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009d8c:	429a      	cmp	r2, r3
 8009d8e:	d207      	bcs.n	8009da0 <mg_vxprintf+0x4c8>
 8009d90:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8009d94:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009d98:	4413      	add	r3, r2
 8009d9a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8009d9c:	429a      	cmp	r2, r3
 8009d9e:	d8dc      	bhi.n	8009d5a <mg_vxprintf+0x482>
        n += scpy(out, param, tmp, k);
 8009da0:	f107 0214 	add.w	r2, r7, #20
 8009da4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009da8:	68b9      	ldr	r1, [r7, #8]
 8009daa:	68f8      	ldr	r0, [r7, #12]
 8009dac:	f7ff fd56 	bl	800985c <scpy>
 8009db0:	4602      	mov	r2, r0
 8009db2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009db6:	4413      	add	r3, r2
 8009db8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; pad == ' ' && minus && k < w && j + k < w; j++)
 8009dbc:	2300      	movs	r3, #0
 8009dbe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009dc2:	e011      	b.n	8009de8 <mg_vxprintf+0x510>
          n += scpy(out, param, &pad, 1);
 8009dc4:	f107 023f 	add.w	r2, r7, #63	@ 0x3f
 8009dc8:	2301      	movs	r3, #1
 8009dca:	68b9      	ldr	r1, [r7, #8]
 8009dcc:	68f8      	ldr	r0, [r7, #12]
 8009dce:	f7ff fd45 	bl	800985c <scpy>
 8009dd2:	4602      	mov	r2, r0
 8009dd4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009dd8:	4413      	add	r3, r2
 8009dda:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; pad == ' ' && minus && k < w && j + k < w; j++)
 8009dde:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009de2:	3301      	adds	r3, #1
 8009de4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009de8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8009dec:	2b20      	cmp	r3, #32
 8009dee:	f040 80ea 	bne.w	8009fc6 <mg_vxprintf+0x6ee>
 8009df2:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	f000 80e5 	beq.w	8009fc6 <mg_vxprintf+0x6ee>
 8009dfc:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009e00:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009e02:	429a      	cmp	r2, r3
 8009e04:	f080 80df 	bcs.w	8009fc6 <mg_vxprintf+0x6ee>
 8009e08:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8009e0c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009e10:	4413      	add	r3, r2
 8009e12:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8009e14:	429a      	cmp	r2, r3
 8009e16:	d8d5      	bhi.n	8009dc4 <mg_vxprintf+0x4ec>
          c == 'g' || c == 'f') {
 8009e18:	e0d5      	b.n	8009fc6 <mg_vxprintf+0x6ee>
      } else if (c == 'm' || c == 'M') {
 8009e1a:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8009e1e:	2b6d      	cmp	r3, #109	@ 0x6d
 8009e20:	d003      	beq.n	8009e2a <mg_vxprintf+0x552>
 8009e22:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8009e26:	2b4d      	cmp	r3, #77	@ 0x4d
 8009e28:	d128      	bne.n	8009e7c <mg_vxprintf+0x5a4>
        mg_pm_t f = va_arg(*ap, mg_pm_t);
 8009e2a:	683b      	ldr	r3, [r7, #0]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	1d19      	adds	r1, r3, #4
 8009e30:	683a      	ldr	r2, [r7, #0]
 8009e32:	6011      	str	r1, [r2, #0]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	663b      	str	r3, [r7, #96]	@ 0x60
        if (c == 'm') out('"', param);
 8009e38:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8009e3c:	2b6d      	cmp	r3, #109	@ 0x6d
 8009e3e:	d103      	bne.n	8009e48 <mg_vxprintf+0x570>
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	68b9      	ldr	r1, [r7, #8]
 8009e44:	2022      	movs	r0, #34	@ 0x22
 8009e46:	4798      	blx	r3
        n += f(out, param, ap);
 8009e48:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009e4a:	683a      	ldr	r2, [r7, #0]
 8009e4c:	68b9      	ldr	r1, [r7, #8]
 8009e4e:	68f8      	ldr	r0, [r7, #12]
 8009e50:	4798      	blx	r3
 8009e52:	4602      	mov	r2, r0
 8009e54:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009e58:	4413      	add	r3, r2
 8009e5a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        if (c == 'm') n += 2, out('"', param);
 8009e5e:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8009e62:	2b6d      	cmp	r3, #109	@ 0x6d
 8009e64:	f040 80b1 	bne.w	8009fca <mg_vxprintf+0x6f2>
 8009e68:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009e6c:	3302      	adds	r3, #2
 8009e6e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	68b9      	ldr	r1, [r7, #8]
 8009e76:	2022      	movs	r0, #34	@ 0x22
 8009e78:	4798      	blx	r3
      } else if (c == 'm' || c == 'M') {
 8009e7a:	e0a6      	b.n	8009fca <mg_vxprintf+0x6f2>
      } else if (c == 'c') {
 8009e7c:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8009e80:	2b63      	cmp	r3, #99	@ 0x63
 8009e82:	d112      	bne.n	8009eaa <mg_vxprintf+0x5d2>
        int ch = va_arg(*ap, int);
 8009e84:	683b      	ldr	r3, [r7, #0]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	1d19      	adds	r1, r3, #4
 8009e8a:	683a      	ldr	r2, [r7, #0]
 8009e8c:	6011      	str	r1, [r2, #0]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	667b      	str	r3, [r7, #100]	@ 0x64
        out((char) ch, param);
 8009e92:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009e94:	b2da      	uxtb	r2, r3
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	68b9      	ldr	r1, [r7, #8]
 8009e9a:	4610      	mov	r0, r2
 8009e9c:	4798      	blx	r3
        n++;
 8009e9e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009ea2:	3301      	adds	r3, #1
 8009ea4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009ea8:	e090      	b.n	8009fcc <mg_vxprintf+0x6f4>
      } else if (c == 's') {
 8009eaa:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8009eae:	2b73      	cmp	r3, #115	@ 0x73
 8009eb0:	d16b      	bne.n	8009f8a <mg_vxprintf+0x6b2>
        char *p = va_arg(*ap, char *);
 8009eb2:	683b      	ldr	r3, [r7, #0]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	1d19      	adds	r1, r3, #4
 8009eb8:	683a      	ldr	r2, [r7, #0]
 8009eba:	6011      	str	r1, [r2, #0]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	66bb      	str	r3, [r7, #104]	@ 0x68
        if (pr == ~0U) pr = p == NULL ? 0 : strlen(p);
 8009ec0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009ec2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ec6:	d109      	bne.n	8009edc <mg_vxprintf+0x604>
 8009ec8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d004      	beq.n	8009ed8 <mg_vxprintf+0x600>
 8009ece:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8009ed0:	f7f6 fa7e 	bl	80003d0 <strlen>
 8009ed4:	4603      	mov	r3, r0
 8009ed6:	e000      	b.n	8009eda <mg_vxprintf+0x602>
 8009ed8:	2300      	movs	r3, #0
 8009eda:	673b      	str	r3, [r7, #112]	@ 0x70
        for (j = 0; !minus && pr < w && j + pr < w; j++)
 8009edc:	2300      	movs	r3, #0
 8009ede:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009ee2:	e011      	b.n	8009f08 <mg_vxprintf+0x630>
          n += scpy(out, param, &pad, 1);
 8009ee4:	f107 023f 	add.w	r2, r7, #63	@ 0x3f
 8009ee8:	2301      	movs	r3, #1
 8009eea:	68b9      	ldr	r1, [r7, #8]
 8009eec:	68f8      	ldr	r0, [r7, #12]
 8009eee:	f7ff fcb5 	bl	800985c <scpy>
 8009ef2:	4602      	mov	r2, r0
 8009ef4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009ef8:	4413      	add	r3, r2
 8009efa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; !minus && pr < w && j + pr < w; j++)
 8009efe:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009f02:	3301      	adds	r3, #1
 8009f04:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009f08:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d10a      	bne.n	8009f26 <mg_vxprintf+0x64e>
 8009f10:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8009f12:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009f14:	429a      	cmp	r2, r3
 8009f16:	d206      	bcs.n	8009f26 <mg_vxprintf+0x64e>
 8009f18:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8009f1c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009f1e:	4413      	add	r3, r2
 8009f20:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8009f22:	429a      	cmp	r2, r3
 8009f24:	d8de      	bhi.n	8009ee4 <mg_vxprintf+0x60c>
        n += scpy(out, param, p, pr);
 8009f26:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009f28:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8009f2a:	68b9      	ldr	r1, [r7, #8]
 8009f2c:	68f8      	ldr	r0, [r7, #12]
 8009f2e:	f7ff fc95 	bl	800985c <scpy>
 8009f32:	4602      	mov	r2, r0
 8009f34:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009f38:	4413      	add	r3, r2
 8009f3a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; minus && pr < w && j + pr < w; j++)
 8009f3e:	2300      	movs	r3, #0
 8009f40:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009f44:	e011      	b.n	8009f6a <mg_vxprintf+0x692>
          n += scpy(out, param, &pad, 1);
 8009f46:	f107 023f 	add.w	r2, r7, #63	@ 0x3f
 8009f4a:	2301      	movs	r3, #1
 8009f4c:	68b9      	ldr	r1, [r7, #8]
 8009f4e:	68f8      	ldr	r0, [r7, #12]
 8009f50:	f7ff fc84 	bl	800985c <scpy>
 8009f54:	4602      	mov	r2, r0
 8009f56:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009f5a:	4413      	add	r3, r2
 8009f5c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; minus && pr < w && j + pr < w; j++)
 8009f60:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009f64:	3301      	adds	r3, #1
 8009f66:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009f6a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d02c      	beq.n	8009fcc <mg_vxprintf+0x6f4>
 8009f72:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8009f74:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009f76:	429a      	cmp	r2, r3
 8009f78:	d228      	bcs.n	8009fcc <mg_vxprintf+0x6f4>
 8009f7a:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8009f7e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009f80:	4413      	add	r3, r2
 8009f82:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8009f84:	429a      	cmp	r2, r3
 8009f86:	d8de      	bhi.n	8009f46 <mg_vxprintf+0x66e>
 8009f88:	e020      	b.n	8009fcc <mg_vxprintf+0x6f4>
      } else if (c == '%') {
 8009f8a:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8009f8e:	2b25      	cmp	r3, #37	@ 0x25
 8009f90:	d109      	bne.n	8009fa6 <mg_vxprintf+0x6ce>
        out('%', param);
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	68b9      	ldr	r1, [r7, #8]
 8009f96:	2025      	movs	r0, #37	@ 0x25
 8009f98:	4798      	blx	r3
        n++;
 8009f9a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009f9e:	3301      	adds	r3, #1
 8009fa0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009fa4:	e012      	b.n	8009fcc <mg_vxprintf+0x6f4>
      } else {
        out('%', param);
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	68b9      	ldr	r1, [r7, #8]
 8009faa:	2025      	movs	r0, #37	@ 0x25
 8009fac:	4798      	blx	r3
        out(c, param);
 8009fae:	f897 206e 	ldrb.w	r2, [r7, #110]	@ 0x6e
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	68b9      	ldr	r1, [r7, #8]
 8009fb6:	4610      	mov	r0, r2
 8009fb8:	4798      	blx	r3
        n += 2;
 8009fba:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009fbe:	3302      	adds	r3, #2
 8009fc0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009fc4:	e002      	b.n	8009fcc <mg_vxprintf+0x6f4>
          c == 'g' || c == 'f') {
 8009fc6:	bf00      	nop
 8009fc8:	e000      	b.n	8009fcc <mg_vxprintf+0x6f4>
      } else if (c == 'm' || c == 'M') {
 8009fca:	bf00      	nop
      }
      i++;
 8009fcc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009fd0:	3301      	adds	r3, #1
 8009fd2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009fd6:	e012      	b.n	8009ffe <mg_vxprintf+0x726>
    } else {
      out(fmt[i], param), n++, i++;
 8009fd8:	687a      	ldr	r2, [r7, #4]
 8009fda:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009fde:	4413      	add	r3, r2
 8009fe0:	781a      	ldrb	r2, [r3, #0]
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	68b9      	ldr	r1, [r7, #8]
 8009fe6:	4610      	mov	r0, r2
 8009fe8:	4798      	blx	r3
 8009fea:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009fee:	3301      	adds	r3, #1
 8009ff0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009ff4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009ff8:	3301      	adds	r3, #1
 8009ffa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  while (fmt[i] != '\0') {
 8009ffe:	687a      	ldr	r2, [r7, #4]
 800a000:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a004:	4413      	add	r3, r2
 800a006:	781b      	ldrb	r3, [r3, #0]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	f47f ac74 	bne.w	80098f6 <mg_vxprintf+0x1e>
    }
  }
  return n;
 800a00e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
}
 800a012:	4618      	mov	r0, r3
 800a014:	3790      	adds	r7, #144	@ 0x90
 800a016:	46bd      	mov	sp, r7
 800a018:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800a01c:	08029f38 	.word	0x08029f38

0800a020 <mg_fs_open>:
#endif




struct mg_fd *mg_fs_open(struct mg_fs *fs, const char *path, int flags) {
 800a020:	b580      	push	{r7, lr}
 800a022:	b086      	sub	sp, #24
 800a024:	af00      	add	r7, sp, #0
 800a026:	60f8      	str	r0, [r7, #12]
 800a028:	60b9      	str	r1, [r7, #8]
 800a02a:	607a      	str	r2, [r7, #4]
  struct mg_fd *fd = (struct mg_fd *) calloc(1, sizeof(*fd));
 800a02c:	2108      	movs	r1, #8
 800a02e:	2001      	movs	r0, #1
 800a030:	f01b fc9c 	bl	802596c <calloc>
 800a034:	4603      	mov	r3, r0
 800a036:	617b      	str	r3, [r7, #20]
  if (fd != NULL) {
 800a038:	697b      	ldr	r3, [r7, #20]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d013      	beq.n	800a066 <mg_fs_open+0x46>
    fd->fd = fs->op(path, flags);
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	689b      	ldr	r3, [r3, #8]
 800a042:	6879      	ldr	r1, [r7, #4]
 800a044:	68b8      	ldr	r0, [r7, #8]
 800a046:	4798      	blx	r3
 800a048:	4602      	mov	r2, r0
 800a04a:	697b      	ldr	r3, [r7, #20]
 800a04c:	601a      	str	r2, [r3, #0]
    fd->fs = fs;
 800a04e:	697b      	ldr	r3, [r7, #20]
 800a050:	68fa      	ldr	r2, [r7, #12]
 800a052:	605a      	str	r2, [r3, #4]
    if (fd->fd == NULL) {
 800a054:	697b      	ldr	r3, [r7, #20]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d104      	bne.n	800a066 <mg_fs_open+0x46>
      free(fd);
 800a05c:	6978      	ldr	r0, [r7, #20]
 800a05e:	f01b fca9 	bl	80259b4 <free>
      fd = NULL;
 800a062:	2300      	movs	r3, #0
 800a064:	617b      	str	r3, [r7, #20]
    }
  }
  return fd;
 800a066:	697b      	ldr	r3, [r7, #20]
}
 800a068:	4618      	mov	r0, r3
 800a06a:	3718      	adds	r7, #24
 800a06c:	46bd      	mov	sp, r7
 800a06e:	bd80      	pop	{r7, pc}

0800a070 <mg_fs_close>:

void mg_fs_close(struct mg_fd *fd) {
 800a070:	b580      	push	{r7, lr}
 800a072:	b082      	sub	sp, #8
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
  if (fd != NULL) {
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d009      	beq.n	800a092 <mg_fs_close+0x22>
    fd->fs->cl(fd->fd);
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	685b      	ldr	r3, [r3, #4]
 800a082:	68db      	ldr	r3, [r3, #12]
 800a084:	687a      	ldr	r2, [r7, #4]
 800a086:	6812      	ldr	r2, [r2, #0]
 800a088:	4610      	mov	r0, r2
 800a08a:	4798      	blx	r3
    free(fd);
 800a08c:	6878      	ldr	r0, [r7, #4]
 800a08e:	f01b fc91 	bl	80259b4 <free>
  }
}
 800a092:	bf00      	nop
 800a094:	3708      	adds	r7, #8
 800a096:	46bd      	mov	sp, r7
 800a098:	bd80      	pop	{r7, pc}

0800a09a <is_dir_prefix>:
  size_t len = 0;
  const char *buf = mg_unpack(path, &len, NULL);
  return mg_str_n(buf, len);
}

static int is_dir_prefix(const char *prefix, size_t n, const char *path) {
 800a09a:	b580      	push	{r7, lr}
 800a09c:	b084      	sub	sp, #16
 800a09e:	af00      	add	r7, sp, #0
 800a0a0:	60f8      	str	r0, [r7, #12]
 800a0a2:	60b9      	str	r1, [r7, #8]
 800a0a4:	607a      	str	r2, [r7, #4]
  // MG_INFO(("[%.*s] [%s] %c", (int) n, prefix, path, path[n]));
  return n < strlen(path) && strncmp(prefix, path, n) == 0 &&
 800a0a6:	6878      	ldr	r0, [r7, #4]
 800a0a8:	f7f6 f992 	bl	80003d0 <strlen>
 800a0ac:	4602      	mov	r2, r0
 800a0ae:	68bb      	ldr	r3, [r7, #8]
 800a0b0:	4293      	cmp	r3, r2
 800a0b2:	d219      	bcs.n	800a0e8 <is_dir_prefix+0x4e>
 800a0b4:	68ba      	ldr	r2, [r7, #8]
 800a0b6:	6879      	ldr	r1, [r7, #4]
 800a0b8:	68f8      	ldr	r0, [r7, #12]
 800a0ba:	f01d fb1a 	bl	80276f2 <strncmp>
 800a0be:	4603      	mov	r3, r0
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d111      	bne.n	800a0e8 <is_dir_prefix+0x4e>
 800a0c4:	68bb      	ldr	r3, [r7, #8]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d00c      	beq.n	800a0e4 <is_dir_prefix+0x4a>
         (n == 0 || path[n] == '/' || path[n - 1] == '/');
 800a0ca:	687a      	ldr	r2, [r7, #4]
 800a0cc:	68bb      	ldr	r3, [r7, #8]
 800a0ce:	4413      	add	r3, r2
 800a0d0:	781b      	ldrb	r3, [r3, #0]
 800a0d2:	2b2f      	cmp	r3, #47	@ 0x2f
 800a0d4:	d006      	beq.n	800a0e4 <is_dir_prefix+0x4a>
 800a0d6:	68bb      	ldr	r3, [r7, #8]
 800a0d8:	3b01      	subs	r3, #1
 800a0da:	687a      	ldr	r2, [r7, #4]
 800a0dc:	4413      	add	r3, r2
 800a0de:	781b      	ldrb	r3, [r3, #0]
 800a0e0:	2b2f      	cmp	r3, #47	@ 0x2f
 800a0e2:	d101      	bne.n	800a0e8 <is_dir_prefix+0x4e>
  return n < strlen(path) && strncmp(prefix, path, n) == 0 &&
 800a0e4:	2301      	movs	r3, #1
 800a0e6:	e000      	b.n	800a0ea <is_dir_prefix+0x50>
 800a0e8:	2300      	movs	r3, #0
}
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	3710      	adds	r7, #16
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	bd80      	pop	{r7, pc}

0800a0f2 <packed_stat>:

static int packed_stat(const char *path, size_t *size, time_t *mtime) {
 800a0f2:	b580      	push	{r7, lr}
 800a0f4:	b088      	sub	sp, #32
 800a0f6:	af00      	add	r7, sp, #0
 800a0f8:	60f8      	str	r0, [r7, #12]
 800a0fa:	60b9      	str	r1, [r7, #8]
 800a0fc:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t i, n = strlen(path);
 800a0fe:	68f8      	ldr	r0, [r7, #12]
 800a100:	f7f6 f966 	bl	80003d0 <strlen>
 800a104:	61b8      	str	r0, [r7, #24]
  if (mg_unpack(path, size, mtime)) return MG_FS_READ;  // Regular file
 800a106:	687a      	ldr	r2, [r7, #4]
 800a108:	68b9      	ldr	r1, [r7, #8]
 800a10a:	68f8      	ldr	r0, [r7, #12]
 800a10c:	f019 f97e 	bl	802340c <mg_unpack>
 800a110:	4603      	mov	r3, r0
 800a112:	2b00      	cmp	r3, #0
 800a114:	d001      	beq.n	800a11a <packed_stat+0x28>
 800a116:	2301      	movs	r3, #1
 800a118:	e017      	b.n	800a14a <packed_stat+0x58>
  // Scan all files. If `path` is a dir prefix for any of them, it's a dir
  for (i = 0; (p = mg_unlist(i)) != NULL; i++) {
 800a11a:	2300      	movs	r3, #0
 800a11c:	61fb      	str	r3, [r7, #28]
 800a11e:	e00c      	b.n	800a13a <packed_stat+0x48>
    if (is_dir_prefix(path, n, p)) return MG_FS_DIR;
 800a120:	697a      	ldr	r2, [r7, #20]
 800a122:	69b9      	ldr	r1, [r7, #24]
 800a124:	68f8      	ldr	r0, [r7, #12]
 800a126:	f7ff ffb8 	bl	800a09a <is_dir_prefix>
 800a12a:	4603      	mov	r3, r0
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d001      	beq.n	800a134 <packed_stat+0x42>
 800a130:	2304      	movs	r3, #4
 800a132:	e00a      	b.n	800a14a <packed_stat+0x58>
  for (i = 0; (p = mg_unlist(i)) != NULL; i++) {
 800a134:	69fb      	ldr	r3, [r7, #28]
 800a136:	3301      	adds	r3, #1
 800a138:	61fb      	str	r3, [r7, #28]
 800a13a:	69f8      	ldr	r0, [r7, #28]
 800a13c:	f019 f952 	bl	80233e4 <mg_unlist>
 800a140:	6178      	str	r0, [r7, #20]
 800a142:	697b      	ldr	r3, [r7, #20]
 800a144:	2b00      	cmp	r3, #0
 800a146:	d1eb      	bne.n	800a120 <packed_stat+0x2e>
  }
  return 0;
 800a148:	2300      	movs	r3, #0
}
 800a14a:	4618      	mov	r0, r3
 800a14c:	3720      	adds	r7, #32
 800a14e:	46bd      	mov	sp, r7
 800a150:	bd80      	pop	{r7, pc}
	...

0800a154 <packed_list>:

static void packed_list(const char *dir, void (*fn)(const char *, void *),
                        void *userdata) {
 800a154:	b580      	push	{r7, lr}
 800a156:	b0be      	sub	sp, #248	@ 0xf8
 800a158:	af02      	add	r7, sp, #8
 800a15a:	60f8      	str	r0, [r7, #12]
 800a15c:	60b9      	str	r1, [r7, #8]
 800a15e:	607a      	str	r2, [r7, #4]
  char buf[MG_PATH_MAX], tmp[sizeof(buf)];
  const char *path, *begin, *end;
  size_t i, n = strlen(dir);
 800a160:	68f8      	ldr	r0, [r7, #12]
 800a162:	f7f6 f935 	bl	80003d0 <strlen>
 800a166:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4
  tmp[0] = '\0';  // Previously listed entry
 800a16a:	2300      	movs	r3, #0
 800a16c:	753b      	strb	r3, [r7, #20]
  for (i = 0; (path = mg_unlist(i)) != NULL; i++) {
 800a16e:	2300      	movs	r3, #0
 800a170:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a174:	e05a      	b.n	800a22c <packed_list+0xd8>
    if (!is_dir_prefix(dir, n, path)) continue;
 800a176:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800a17a:	f8d7 10e4 	ldr.w	r1, [r7, #228]	@ 0xe4
 800a17e:	68f8      	ldr	r0, [r7, #12]
 800a180:	f7ff ff8b 	bl	800a09a <is_dir_prefix>
 800a184:	4603      	mov	r3, r0
 800a186:	2b00      	cmp	r3, #0
 800a188:	d048      	beq.n	800a21c <packed_list+0xc8>
    begin = &path[n + 1];
 800a18a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a18e:	3301      	adds	r3, #1
 800a190:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800a194:	4413      	add	r3, r2
 800a196:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    end = strchr(begin, '/');
 800a19a:	212f      	movs	r1, #47	@ 0x2f
 800a19c:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 800a1a0:	f01d fa9a 	bl	80276d8 <strchr>
 800a1a4:	f8c7 00ec 	str.w	r0, [r7, #236]	@ 0xec
    if (end == NULL) end = begin + strlen(begin);
 800a1a8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d109      	bne.n	800a1c4 <packed_list+0x70>
 800a1b0:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 800a1b4:	f7f6 f90c 	bl	80003d0 <strlen>
 800a1b8:	4602      	mov	r2, r0
 800a1ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a1be:	4413      	add	r3, r2
 800a1c0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    mg_snprintf(buf, sizeof(buf), "%.*s", (int) (end - begin), begin);
 800a1c4:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800a1c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a1cc:	1ad2      	subs	r2, r2, r3
 800a1ce:	f107 0078 	add.w	r0, r7, #120	@ 0x78
 800a1d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a1d6:	9300      	str	r3, [sp, #0]
 800a1d8:	4613      	mov	r3, r2
 800a1da:	4a1c      	ldr	r2, [pc, #112]	@ (800a24c <packed_list+0xf8>)
 800a1dc:	2164      	movs	r1, #100	@ 0x64
 800a1de:	f008 ff9d 	bl	801311c <mg_snprintf>
    buf[sizeof(buf) - 1] = '\0';
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
    // If this entry has been already listed, skip
    // NOTE: we're assuming that file list is sorted alphabetically
    if (strcmp(buf, tmp) == 0) continue;
 800a1e8:	f107 0214 	add.w	r2, r7, #20
 800a1ec:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 800a1f0:	4611      	mov	r1, r2
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	f7f6 f88c 	bl	8000310 <strcmp>
 800a1f8:	4603      	mov	r3, r0
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d010      	beq.n	800a220 <packed_list+0xcc>
    fn(buf, userdata);  // Not yet listed, call user function
 800a1fe:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 800a202:	68bb      	ldr	r3, [r7, #8]
 800a204:	6879      	ldr	r1, [r7, #4]
 800a206:	4610      	mov	r0, r2
 800a208:	4798      	blx	r3
    strcpy(tmp, buf);   // And save this entry as listed
 800a20a:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 800a20e:	f107 0314 	add.w	r3, r7, #20
 800a212:	4611      	mov	r1, r2
 800a214:	4618      	mov	r0, r3
 800a216:	f01d fb88 	bl	802792a <strcpy>
 800a21a:	e002      	b.n	800a222 <packed_list+0xce>
    if (!is_dir_prefix(dir, n, path)) continue;
 800a21c:	bf00      	nop
 800a21e:	e000      	b.n	800a222 <packed_list+0xce>
    if (strcmp(buf, tmp) == 0) continue;
 800a220:	bf00      	nop
  for (i = 0; (path = mg_unlist(i)) != NULL; i++) {
 800a222:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800a226:	3301      	adds	r3, #1
 800a228:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a22c:	f8d7 00e8 	ldr.w	r0, [r7, #232]	@ 0xe8
 800a230:	f019 f8d8 	bl	80233e4 <mg_unlist>
 800a234:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0
 800a238:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d19a      	bne.n	800a176 <packed_list+0x22>
  }
}
 800a240:	bf00      	nop
 800a242:	bf00      	nop
 800a244:	37f0      	adds	r7, #240	@ 0xf0
 800a246:	46bd      	mov	sp, r7
 800a248:	bd80      	pop	{r7, pc}
 800a24a:	bf00      	nop
 800a24c:	08029f1c 	.word	0x08029f1c

0800a250 <packed_open>:

static void *packed_open(const char *path, int flags) {
 800a250:	b580      	push	{r7, lr}
 800a252:	b086      	sub	sp, #24
 800a254:	af00      	add	r7, sp, #0
 800a256:	6078      	str	r0, [r7, #4]
 800a258:	6039      	str	r1, [r7, #0]
  size_t size = 0;
 800a25a:	2300      	movs	r3, #0
 800a25c:	60fb      	str	r3, [r7, #12]
  const char *data = mg_unpack(path, &size, NULL);
 800a25e:	f107 030c 	add.w	r3, r7, #12
 800a262:	2200      	movs	r2, #0
 800a264:	4619      	mov	r1, r3
 800a266:	6878      	ldr	r0, [r7, #4]
 800a268:	f019 f8d0 	bl	802340c <mg_unpack>
 800a26c:	6178      	str	r0, [r7, #20]
  struct packed_file *fp = NULL;
 800a26e:	2300      	movs	r3, #0
 800a270:	613b      	str	r3, [r7, #16]
  if (data == NULL) return NULL;
 800a272:	697b      	ldr	r3, [r7, #20]
 800a274:	2b00      	cmp	r3, #0
 800a276:	d101      	bne.n	800a27c <packed_open+0x2c>
 800a278:	2300      	movs	r3, #0
 800a27a:	e016      	b.n	800a2aa <packed_open+0x5a>
  if (flags & MG_FS_WRITE) return NULL;
 800a27c:	683b      	ldr	r3, [r7, #0]
 800a27e:	f003 0302 	and.w	r3, r3, #2
 800a282:	2b00      	cmp	r3, #0
 800a284:	d001      	beq.n	800a28a <packed_open+0x3a>
 800a286:	2300      	movs	r3, #0
 800a288:	e00f      	b.n	800a2aa <packed_open+0x5a>
  if ((fp = (struct packed_file *) calloc(1, sizeof(*fp))) != NULL) {
 800a28a:	210c      	movs	r1, #12
 800a28c:	2001      	movs	r0, #1
 800a28e:	f01b fb6d 	bl	802596c <calloc>
 800a292:	4603      	mov	r3, r0
 800a294:	613b      	str	r3, [r7, #16]
 800a296:	693b      	ldr	r3, [r7, #16]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d005      	beq.n	800a2a8 <packed_open+0x58>
    fp->size = size;
 800a29c:	68fa      	ldr	r2, [r7, #12]
 800a29e:	693b      	ldr	r3, [r7, #16]
 800a2a0:	605a      	str	r2, [r3, #4]
    fp->data = data;
 800a2a2:	693b      	ldr	r3, [r7, #16]
 800a2a4:	697a      	ldr	r2, [r7, #20]
 800a2a6:	601a      	str	r2, [r3, #0]
  }
  return (void *) fp;
 800a2a8:	693b      	ldr	r3, [r7, #16]
}
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	3718      	adds	r7, #24
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	bd80      	pop	{r7, pc}

0800a2b2 <packed_close>:

static void packed_close(void *fp) {
 800a2b2:	b580      	push	{r7, lr}
 800a2b4:	b082      	sub	sp, #8
 800a2b6:	af00      	add	r7, sp, #0
 800a2b8:	6078      	str	r0, [r7, #4]
  if (fp != NULL) free(fp);
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d002      	beq.n	800a2c6 <packed_close+0x14>
 800a2c0:	6878      	ldr	r0, [r7, #4]
 800a2c2:	f01b fb77 	bl	80259b4 <free>
}
 800a2c6:	bf00      	nop
 800a2c8:	3708      	adds	r7, #8
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	bd80      	pop	{r7, pc}

0800a2ce <packed_read>:

static size_t packed_read(void *fd, void *buf, size_t len) {
 800a2ce:	b580      	push	{r7, lr}
 800a2d0:	b086      	sub	sp, #24
 800a2d2:	af00      	add	r7, sp, #0
 800a2d4:	60f8      	str	r0, [r7, #12]
 800a2d6:	60b9      	str	r1, [r7, #8]
 800a2d8:	607a      	str	r2, [r7, #4]
  struct packed_file *fp = (struct packed_file *) fd;
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	617b      	str	r3, [r7, #20]
  if (fp->pos + len > fp->size) len = fp->size - fp->pos;
 800a2de:	697b      	ldr	r3, [r7, #20]
 800a2e0:	689a      	ldr	r2, [r3, #8]
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	441a      	add	r2, r3
 800a2e6:	697b      	ldr	r3, [r7, #20]
 800a2e8:	685b      	ldr	r3, [r3, #4]
 800a2ea:	429a      	cmp	r2, r3
 800a2ec:	d905      	bls.n	800a2fa <packed_read+0x2c>
 800a2ee:	697b      	ldr	r3, [r7, #20]
 800a2f0:	685a      	ldr	r2, [r3, #4]
 800a2f2:	697b      	ldr	r3, [r7, #20]
 800a2f4:	689b      	ldr	r3, [r3, #8]
 800a2f6:	1ad3      	subs	r3, r2, r3
 800a2f8:	607b      	str	r3, [r7, #4]
  memcpy(buf, &fp->data[fp->pos], len);
 800a2fa:	697b      	ldr	r3, [r7, #20]
 800a2fc:	681a      	ldr	r2, [r3, #0]
 800a2fe:	697b      	ldr	r3, [r7, #20]
 800a300:	689b      	ldr	r3, [r3, #8]
 800a302:	4413      	add	r3, r2
 800a304:	687a      	ldr	r2, [r7, #4]
 800a306:	4619      	mov	r1, r3
 800a308:	68b8      	ldr	r0, [r7, #8]
 800a30a:	f01d fb16 	bl	802793a <memcpy>
  fp->pos += len;
 800a30e:	697b      	ldr	r3, [r7, #20]
 800a310:	689a      	ldr	r2, [r3, #8]
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	441a      	add	r2, r3
 800a316:	697b      	ldr	r3, [r7, #20]
 800a318:	609a      	str	r2, [r3, #8]
  return len;
 800a31a:	687b      	ldr	r3, [r7, #4]
}
 800a31c:	4618      	mov	r0, r3
 800a31e:	3718      	adds	r7, #24
 800a320:	46bd      	mov	sp, r7
 800a322:	bd80      	pop	{r7, pc}

0800a324 <packed_write>:

static size_t packed_write(void *fd, const void *buf, size_t len) {
 800a324:	b480      	push	{r7}
 800a326:	b085      	sub	sp, #20
 800a328:	af00      	add	r7, sp, #0
 800a32a:	60f8      	str	r0, [r7, #12]
 800a32c:	60b9      	str	r1, [r7, #8]
 800a32e:	607a      	str	r2, [r7, #4]
  (void) fd, (void) buf, (void) len;
  return 0;
 800a330:	2300      	movs	r3, #0
}
 800a332:	4618      	mov	r0, r3
 800a334:	3714      	adds	r7, #20
 800a336:	46bd      	mov	sp, r7
 800a338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33c:	4770      	bx	lr

0800a33e <packed_seek>:

static size_t packed_seek(void *fd, size_t offset) {
 800a33e:	b480      	push	{r7}
 800a340:	b085      	sub	sp, #20
 800a342:	af00      	add	r7, sp, #0
 800a344:	6078      	str	r0, [r7, #4]
 800a346:	6039      	str	r1, [r7, #0]
  struct packed_file *fp = (struct packed_file *) fd;
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	60fb      	str	r3, [r7, #12]
  fp->pos = offset;
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	683a      	ldr	r2, [r7, #0]
 800a350:	609a      	str	r2, [r3, #8]
  if (fp->pos > fp->size) fp->pos = fp->size;
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	689a      	ldr	r2, [r3, #8]
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	685b      	ldr	r3, [r3, #4]
 800a35a:	429a      	cmp	r2, r3
 800a35c:	d903      	bls.n	800a366 <packed_seek+0x28>
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	685a      	ldr	r2, [r3, #4]
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	609a      	str	r2, [r3, #8]
  return fp->pos;
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	689b      	ldr	r3, [r3, #8]
}
 800a36a:	4618      	mov	r0, r3
 800a36c:	3714      	adds	r7, #20
 800a36e:	46bd      	mov	sp, r7
 800a370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a374:	4770      	bx	lr

0800a376 <packed_rename>:

static bool packed_rename(const char *from, const char *to) {
 800a376:	b480      	push	{r7}
 800a378:	b083      	sub	sp, #12
 800a37a:	af00      	add	r7, sp, #0
 800a37c:	6078      	str	r0, [r7, #4]
 800a37e:	6039      	str	r1, [r7, #0]
  (void) from, (void) to;
  return false;
 800a380:	2300      	movs	r3, #0
}
 800a382:	4618      	mov	r0, r3
 800a384:	370c      	adds	r7, #12
 800a386:	46bd      	mov	sp, r7
 800a388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38c:	4770      	bx	lr

0800a38e <packed_remove>:

static bool packed_remove(const char *path) {
 800a38e:	b480      	push	{r7}
 800a390:	b083      	sub	sp, #12
 800a392:	af00      	add	r7, sp, #0
 800a394:	6078      	str	r0, [r7, #4]
  (void) path;
  return false;
 800a396:	2300      	movs	r3, #0
}
 800a398:	4618      	mov	r0, r3
 800a39a:	370c      	adds	r7, #12
 800a39c:	46bd      	mov	sp, r7
 800a39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a2:	4770      	bx	lr

0800a3a4 <packed_mkdir>:

static bool packed_mkdir(const char *path) {
 800a3a4:	b480      	push	{r7}
 800a3a6:	b083      	sub	sp, #12
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	6078      	str	r0, [r7, #4]
  (void) path;
  return false;
 800a3ac:	2300      	movs	r3, #0
}
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	370c      	adds	r7, #12
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b8:	4770      	bx	lr

0800a3ba <p_stat>:
  return mkdir(path, 0775) == 0;
}

#else

static int p_stat(const char *path, size_t *size, time_t *mtime) {
 800a3ba:	b480      	push	{r7}
 800a3bc:	b085      	sub	sp, #20
 800a3be:	af00      	add	r7, sp, #0
 800a3c0:	60f8      	str	r0, [r7, #12]
 800a3c2:	60b9      	str	r1, [r7, #8]
 800a3c4:	607a      	str	r2, [r7, #4]
  (void) path, (void) size, (void) mtime;
  return 0;
 800a3c6:	2300      	movs	r3, #0
}
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	3714      	adds	r7, #20
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d2:	4770      	bx	lr

0800a3d4 <p_list>:
static void p_list(const char *path, void (*fn)(const char *, void *),
                   void *userdata) {
 800a3d4:	b480      	push	{r7}
 800a3d6:	b085      	sub	sp, #20
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	60f8      	str	r0, [r7, #12]
 800a3dc:	60b9      	str	r1, [r7, #8]
 800a3de:	607a      	str	r2, [r7, #4]
  (void) path, (void) fn, (void) userdata;
}
 800a3e0:	bf00      	nop
 800a3e2:	3714      	adds	r7, #20
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ea:	4770      	bx	lr

0800a3ec <p_open>:
static void *p_open(const char *path, int flags) {
 800a3ec:	b480      	push	{r7}
 800a3ee:	b083      	sub	sp, #12
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	6078      	str	r0, [r7, #4]
 800a3f4:	6039      	str	r1, [r7, #0]
  (void) path, (void) flags;
  return NULL;
 800a3f6:	2300      	movs	r3, #0
}
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	370c      	adds	r7, #12
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a402:	4770      	bx	lr

0800a404 <p_close>:
static void p_close(void *fp) {
 800a404:	b480      	push	{r7}
 800a406:	b083      	sub	sp, #12
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]
  (void) fp;
}
 800a40c:	bf00      	nop
 800a40e:	370c      	adds	r7, #12
 800a410:	46bd      	mov	sp, r7
 800a412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a416:	4770      	bx	lr

0800a418 <p_read>:
static size_t p_read(void *fd, void *buf, size_t len) {
 800a418:	b480      	push	{r7}
 800a41a:	b085      	sub	sp, #20
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	60f8      	str	r0, [r7, #12]
 800a420:	60b9      	str	r1, [r7, #8]
 800a422:	607a      	str	r2, [r7, #4]
  (void) fd, (void) buf, (void) len;
  return 0;
 800a424:	2300      	movs	r3, #0
}
 800a426:	4618      	mov	r0, r3
 800a428:	3714      	adds	r7, #20
 800a42a:	46bd      	mov	sp, r7
 800a42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a430:	4770      	bx	lr

0800a432 <p_write>:
static size_t p_write(void *fd, const void *buf, size_t len) {
 800a432:	b480      	push	{r7}
 800a434:	b085      	sub	sp, #20
 800a436:	af00      	add	r7, sp, #0
 800a438:	60f8      	str	r0, [r7, #12]
 800a43a:	60b9      	str	r1, [r7, #8]
 800a43c:	607a      	str	r2, [r7, #4]
  (void) fd, (void) buf, (void) len;
  return 0;
 800a43e:	2300      	movs	r3, #0
}
 800a440:	4618      	mov	r0, r3
 800a442:	3714      	adds	r7, #20
 800a444:	46bd      	mov	sp, r7
 800a446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44a:	4770      	bx	lr

0800a44c <p_seek>:
static size_t p_seek(void *fd, size_t offset) {
 800a44c:	b480      	push	{r7}
 800a44e:	b083      	sub	sp, #12
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]
 800a454:	6039      	str	r1, [r7, #0]
  (void) fd, (void) offset;
  return (size_t) ~0;
 800a456:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a45a:	4618      	mov	r0, r3
 800a45c:	370c      	adds	r7, #12
 800a45e:	46bd      	mov	sp, r7
 800a460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a464:	4770      	bx	lr

0800a466 <p_rename>:
static bool p_rename(const char *from, const char *to) {
 800a466:	b480      	push	{r7}
 800a468:	b083      	sub	sp, #12
 800a46a:	af00      	add	r7, sp, #0
 800a46c:	6078      	str	r0, [r7, #4]
 800a46e:	6039      	str	r1, [r7, #0]
  (void) from, (void) to;
  return false;
 800a470:	2300      	movs	r3, #0
}
 800a472:	4618      	mov	r0, r3
 800a474:	370c      	adds	r7, #12
 800a476:	46bd      	mov	sp, r7
 800a478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47c:	4770      	bx	lr

0800a47e <p_remove>:
static bool p_remove(const char *path) {
 800a47e:	b480      	push	{r7}
 800a480:	b083      	sub	sp, #12
 800a482:	af00      	add	r7, sp, #0
 800a484:	6078      	str	r0, [r7, #4]
  (void) path;
  return false;
 800a486:	2300      	movs	r3, #0
}
 800a488:	4618      	mov	r0, r3
 800a48a:	370c      	adds	r7, #12
 800a48c:	46bd      	mov	sp, r7
 800a48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a492:	4770      	bx	lr

0800a494 <p_mkdir>:
static bool p_mkdir(const char *path) {
 800a494:	b480      	push	{r7}
 800a496:	b083      	sub	sp, #12
 800a498:	af00      	add	r7, sp, #0
 800a49a:	6078      	str	r0, [r7, #4]
  (void) path;
  return false;
 800a49c:	2300      	movs	r3, #0
}
 800a49e:	4618      	mov	r0, r3
 800a4a0:	370c      	adds	r7, #12
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a8:	4770      	bx	lr

0800a4aa <mg_ncasecmp>:





static int mg_ncasecmp(const char *s1, const char *s2, size_t len) {
 800a4aa:	b480      	push	{r7}
 800a4ac:	b089      	sub	sp, #36	@ 0x24
 800a4ae:	af00      	add	r7, sp, #0
 800a4b0:	60f8      	str	r0, [r7, #12]
 800a4b2:	60b9      	str	r1, [r7, #8]
 800a4b4:	607a      	str	r2, [r7, #4]
  int diff = 0;
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	61fb      	str	r3, [r7, #28]
  if (len > 0) do {
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d02d      	beq.n	800a51c <mg_ncasecmp+0x72>
      int c = *s1++, d = *s2++;
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	1c5a      	adds	r2, r3, #1
 800a4c4:	60fa      	str	r2, [r7, #12]
 800a4c6:	781b      	ldrb	r3, [r3, #0]
 800a4c8:	61bb      	str	r3, [r7, #24]
 800a4ca:	68bb      	ldr	r3, [r7, #8]
 800a4cc:	1c5a      	adds	r2, r3, #1
 800a4ce:	60ba      	str	r2, [r7, #8]
 800a4d0:	781b      	ldrb	r3, [r3, #0]
 800a4d2:	617b      	str	r3, [r7, #20]
      if (c >= 'A' && c <= 'Z') c += 'a' - 'A';
 800a4d4:	69bb      	ldr	r3, [r7, #24]
 800a4d6:	2b40      	cmp	r3, #64	@ 0x40
 800a4d8:	dd05      	ble.n	800a4e6 <mg_ncasecmp+0x3c>
 800a4da:	69bb      	ldr	r3, [r7, #24]
 800a4dc:	2b5a      	cmp	r3, #90	@ 0x5a
 800a4de:	dc02      	bgt.n	800a4e6 <mg_ncasecmp+0x3c>
 800a4e0:	69bb      	ldr	r3, [r7, #24]
 800a4e2:	3320      	adds	r3, #32
 800a4e4:	61bb      	str	r3, [r7, #24]
      if (d >= 'A' && d <= 'Z') d += 'a' - 'A';
 800a4e6:	697b      	ldr	r3, [r7, #20]
 800a4e8:	2b40      	cmp	r3, #64	@ 0x40
 800a4ea:	dd05      	ble.n	800a4f8 <mg_ncasecmp+0x4e>
 800a4ec:	697b      	ldr	r3, [r7, #20]
 800a4ee:	2b5a      	cmp	r3, #90	@ 0x5a
 800a4f0:	dc02      	bgt.n	800a4f8 <mg_ncasecmp+0x4e>
 800a4f2:	697b      	ldr	r3, [r7, #20]
 800a4f4:	3320      	adds	r3, #32
 800a4f6:	617b      	str	r3, [r7, #20]
      diff = c - d;
 800a4f8:	69ba      	ldr	r2, [r7, #24]
 800a4fa:	697b      	ldr	r3, [r7, #20]
 800a4fc:	1ad3      	subs	r3, r2, r3
 800a4fe:	61fb      	str	r3, [r7, #28]
    } while (diff == 0 && s1[-1] != '\0' && --len > 0);
 800a500:	69fb      	ldr	r3, [r7, #28]
 800a502:	2b00      	cmp	r3, #0
 800a504:	d10a      	bne.n	800a51c <mg_ncasecmp+0x72>
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	3b01      	subs	r3, #1
 800a50a:	781b      	ldrb	r3, [r3, #0]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d005      	beq.n	800a51c <mg_ncasecmp+0x72>
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	3b01      	subs	r3, #1
 800a514:	607b      	str	r3, [r7, #4]
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d1d1      	bne.n	800a4c0 <mg_ncasecmp+0x16>
  return diff;
 800a51c:	69fb      	ldr	r3, [r7, #28]
}
 800a51e:	4618      	mov	r0, r3
 800a520:	3724      	adds	r7, #36	@ 0x24
 800a522:	46bd      	mov	sp, r7
 800a524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a528:	4770      	bx	lr
	...

0800a52c <mg_to_size_t>:

bool mg_to_size_t(struct mg_str str, size_t *val);
bool mg_to_size_t(struct mg_str str, size_t *val) {
 800a52c:	b480      	push	{r7}
 800a52e:	b08b      	sub	sp, #44	@ 0x2c
 800a530:	af00      	add	r7, sp, #0
 800a532:	f107 0308 	add.w	r3, r7, #8
 800a536:	e883 0003 	stmia.w	r3, {r0, r1}
 800a53a:	607a      	str	r2, [r7, #4]
  size_t i = 0, max = (size_t) -1, max2 = max / 10, result = 0, ndigits = 0;
 800a53c:	2300      	movs	r3, #0
 800a53e:	627b      	str	r3, [r7, #36]	@ 0x24
 800a540:	f04f 33ff 	mov.w	r3, #4294967295
 800a544:	61bb      	str	r3, [r7, #24]
 800a546:	69bb      	ldr	r3, [r7, #24]
 800a548:	4a42      	ldr	r2, [pc, #264]	@ (800a654 <mg_to_size_t+0x128>)
 800a54a:	fba2 2303 	umull	r2, r3, r2, r3
 800a54e:	08db      	lsrs	r3, r3, #3
 800a550:	617b      	str	r3, [r7, #20]
 800a552:	2300      	movs	r3, #0
 800a554:	623b      	str	r3, [r7, #32]
 800a556:	2300      	movs	r3, #0
 800a558:	61fb      	str	r3, [r7, #28]
  while (i < str.len && (str.buf[i] == ' ' || str.buf[i] == '\t')) i++;
 800a55a:	e002      	b.n	800a562 <mg_to_size_t+0x36>
 800a55c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a55e:	3301      	adds	r3, #1
 800a560:	627b      	str	r3, [r7, #36]	@ 0x24
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a566:	429a      	cmp	r2, r3
 800a568:	d20b      	bcs.n	800a582 <mg_to_size_t+0x56>
 800a56a:	68ba      	ldr	r2, [r7, #8]
 800a56c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a56e:	4413      	add	r3, r2
 800a570:	781b      	ldrb	r3, [r3, #0]
 800a572:	2b20      	cmp	r3, #32
 800a574:	d0f2      	beq.n	800a55c <mg_to_size_t+0x30>
 800a576:	68ba      	ldr	r2, [r7, #8]
 800a578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a57a:	4413      	add	r3, r2
 800a57c:	781b      	ldrb	r3, [r3, #0]
 800a57e:	2b09      	cmp	r3, #9
 800a580:	d0ec      	beq.n	800a55c <mg_to_size_t+0x30>
  if (i < str.len && str.buf[i] == '-') return false;
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a586:	429a      	cmp	r2, r3
 800a588:	d22b      	bcs.n	800a5e2 <mg_to_size_t+0xb6>
 800a58a:	68ba      	ldr	r2, [r7, #8]
 800a58c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a58e:	4413      	add	r3, r2
 800a590:	781b      	ldrb	r3, [r3, #0]
 800a592:	2b2d      	cmp	r3, #45	@ 0x2d
 800a594:	d125      	bne.n	800a5e2 <mg_to_size_t+0xb6>
 800a596:	2300      	movs	r3, #0
 800a598:	e056      	b.n	800a648 <mg_to_size_t+0x11c>
  while (i < str.len && str.buf[i] >= '0' && str.buf[i] <= '9') {
    size_t digit = (size_t) (str.buf[i] - '0');
 800a59a:	68ba      	ldr	r2, [r7, #8]
 800a59c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a59e:	4413      	add	r3, r2
 800a5a0:	781b      	ldrb	r3, [r3, #0]
 800a5a2:	3b30      	subs	r3, #48	@ 0x30
 800a5a4:	613b      	str	r3, [r7, #16]
    if (result > max2) return false;  // Overflow
 800a5a6:	6a3a      	ldr	r2, [r7, #32]
 800a5a8:	697b      	ldr	r3, [r7, #20]
 800a5aa:	429a      	cmp	r2, r3
 800a5ac:	d901      	bls.n	800a5b2 <mg_to_size_t+0x86>
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	e04a      	b.n	800a648 <mg_to_size_t+0x11c>
    result *= 10;
 800a5b2:	6a3a      	ldr	r2, [r7, #32]
 800a5b4:	4613      	mov	r3, r2
 800a5b6:	009b      	lsls	r3, r3, #2
 800a5b8:	4413      	add	r3, r2
 800a5ba:	005b      	lsls	r3, r3, #1
 800a5bc:	623b      	str	r3, [r7, #32]
    if (result > max - digit) return false;  // Overflow
 800a5be:	69ba      	ldr	r2, [r7, #24]
 800a5c0:	693b      	ldr	r3, [r7, #16]
 800a5c2:	1ad3      	subs	r3, r2, r3
 800a5c4:	6a3a      	ldr	r2, [r7, #32]
 800a5c6:	429a      	cmp	r2, r3
 800a5c8:	d901      	bls.n	800a5ce <mg_to_size_t+0xa2>
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	e03c      	b.n	800a648 <mg_to_size_t+0x11c>
    result += digit;
 800a5ce:	6a3a      	ldr	r2, [r7, #32]
 800a5d0:	693b      	ldr	r3, [r7, #16]
 800a5d2:	4413      	add	r3, r2
 800a5d4:	623b      	str	r3, [r7, #32]
    i++, ndigits++;
 800a5d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5d8:	3301      	adds	r3, #1
 800a5da:	627b      	str	r3, [r7, #36]	@ 0x24
 800a5dc:	69fb      	ldr	r3, [r7, #28]
 800a5de:	3301      	adds	r3, #1
 800a5e0:	61fb      	str	r3, [r7, #28]
  while (i < str.len && str.buf[i] >= '0' && str.buf[i] <= '9') {
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a5e6:	429a      	cmp	r2, r3
 800a5e8:	d20f      	bcs.n	800a60a <mg_to_size_t+0xde>
 800a5ea:	68ba      	ldr	r2, [r7, #8]
 800a5ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5ee:	4413      	add	r3, r2
 800a5f0:	781b      	ldrb	r3, [r3, #0]
 800a5f2:	2b2f      	cmp	r3, #47	@ 0x2f
 800a5f4:	d909      	bls.n	800a60a <mg_to_size_t+0xde>
 800a5f6:	68ba      	ldr	r2, [r7, #8]
 800a5f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5fa:	4413      	add	r3, r2
 800a5fc:	781b      	ldrb	r3, [r3, #0]
 800a5fe:	2b39      	cmp	r3, #57	@ 0x39
 800a600:	d9cb      	bls.n	800a59a <mg_to_size_t+0x6e>
  }
  while (i < str.len && (str.buf[i] == ' ' || str.buf[i] == '\t')) i++;
 800a602:	e002      	b.n	800a60a <mg_to_size_t+0xde>
 800a604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a606:	3301      	adds	r3, #1
 800a608:	627b      	str	r3, [r7, #36]	@ 0x24
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a60e:	429a      	cmp	r2, r3
 800a610:	d20b      	bcs.n	800a62a <mg_to_size_t+0xfe>
 800a612:	68ba      	ldr	r2, [r7, #8]
 800a614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a616:	4413      	add	r3, r2
 800a618:	781b      	ldrb	r3, [r3, #0]
 800a61a:	2b20      	cmp	r3, #32
 800a61c:	d0f2      	beq.n	800a604 <mg_to_size_t+0xd8>
 800a61e:	68ba      	ldr	r2, [r7, #8]
 800a620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a622:	4413      	add	r3, r2
 800a624:	781b      	ldrb	r3, [r3, #0]
 800a626:	2b09      	cmp	r3, #9
 800a628:	d0ec      	beq.n	800a604 <mg_to_size_t+0xd8>
  if (ndigits == 0) return false;  // #2322: Content-Length = 1 * DIGIT
 800a62a:	69fb      	ldr	r3, [r7, #28]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d101      	bne.n	800a634 <mg_to_size_t+0x108>
 800a630:	2300      	movs	r3, #0
 800a632:	e009      	b.n	800a648 <mg_to_size_t+0x11c>
  if (i != str.len) return false;  // Ditto
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a638:	429a      	cmp	r2, r3
 800a63a:	d001      	beq.n	800a640 <mg_to_size_t+0x114>
 800a63c:	2300      	movs	r3, #0
 800a63e:	e003      	b.n	800a648 <mg_to_size_t+0x11c>
  *val = (size_t) result;
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	6a3a      	ldr	r2, [r7, #32]
 800a644:	601a      	str	r2, [r3, #0]
  return true;
 800a646:	2301      	movs	r3, #1
}
 800a648:	4618      	mov	r0, r3
 800a64a:	372c      	adds	r7, #44	@ 0x2c
 800a64c:	46bd      	mov	sp, r7
 800a64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a652:	4770      	bx	lr
 800a654:	cccccccd 	.word	0xcccccccd

0800a658 <mg_http_var>:
  } else {
    MG_ERROR(("%lu oom %d->%d ", c->id, (int) c->send.size, (int) need));
  }
}

struct mg_str mg_http_var(struct mg_str buf, struct mg_str name) {
 800a658:	b082      	sub	sp, #8
 800a65a:	b580      	push	{r7, lr}
 800a65c:	b08e      	sub	sp, #56	@ 0x38
 800a65e:	af02      	add	r7, sp, #8
 800a660:	60f8      	str	r0, [r7, #12]
 800a662:	1d38      	adds	r0, r7, #4
 800a664:	e880 0006 	stmia.w	r0, {r1, r2}
 800a668:	63fb      	str	r3, [r7, #60]	@ 0x3c
  struct mg_str entry, k, v, result = mg_str_n(NULL, 0);
 800a66a:	f107 0310 	add.w	r3, r7, #16
 800a66e:	2200      	movs	r2, #0
 800a670:	2100      	movs	r1, #0
 800a672:	4618      	mov	r0, r3
 800a674:	f00c f933 	bl	80168de <mg_str_n>
  while (mg_span(buf, &entry, &buf, '&')) {
 800a678:	e023      	b.n	800a6c2 <mg_http_var+0x6a>
    if (mg_span(entry, &k, &v, '=') && name.len == k.len &&
 800a67a:	f107 0318 	add.w	r3, r7, #24
 800a67e:	f107 0220 	add.w	r2, r7, #32
 800a682:	213d      	movs	r1, #61	@ 0x3d
 800a684:	9100      	str	r1, [sp, #0]
 800a686:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800a68a:	c903      	ldmia	r1, {r0, r1}
 800a68c:	f00c fb08 	bl	8016ca0 <mg_span>
 800a690:	4603      	mov	r3, r0
 800a692:	2b00      	cmp	r3, #0
 800a694:	d015      	beq.n	800a6c2 <mg_http_var+0x6a>
 800a696:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a69a:	429a      	cmp	r2, r3
 800a69c:	d111      	bne.n	800a6c2 <mg_http_var+0x6a>
        mg_ncasecmp(name.buf, k.buf, k.len) == 0) {
 800a69e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a6a0:	6a39      	ldr	r1, [r7, #32]
 800a6a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	f7ff ff00 	bl	800a4aa <mg_ncasecmp>
 800a6aa:	4603      	mov	r3, r0
    if (mg_span(entry, &k, &v, '=') && name.len == k.len &&
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d108      	bne.n	800a6c2 <mg_http_var+0x6a>
      result = v;
 800a6b0:	f107 0310 	add.w	r3, r7, #16
 800a6b4:	f107 0218 	add.w	r2, r7, #24
 800a6b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a6bc:	e883 0003 	stmia.w	r3, {r0, r1}
      break;
 800a6c0:	e00b      	b.n	800a6da <mg_http_var+0x82>
  while (mg_span(buf, &entry, &buf, '&')) {
 800a6c2:	1d3b      	adds	r3, r7, #4
 800a6c4:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800a6c8:	2126      	movs	r1, #38	@ 0x26
 800a6ca:	9100      	str	r1, [sp, #0]
 800a6cc:	1d39      	adds	r1, r7, #4
 800a6ce:	c903      	ldmia	r1, {r0, r1}
 800a6d0:	f00c fae6 	bl	8016ca0 <mg_span>
 800a6d4:	4603      	mov	r3, r0
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d1cf      	bne.n	800a67a <mg_http_var+0x22>
    }
  }
  return result;
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	461a      	mov	r2, r3
 800a6de:	f107 0310 	add.w	r3, r7, #16
 800a6e2:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a6e6:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800a6ea:	68f8      	ldr	r0, [r7, #12]
 800a6ec:	3730      	adds	r7, #48	@ 0x30
 800a6ee:	46bd      	mov	sp, r7
 800a6f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a6f4:	b002      	add	sp, #8
 800a6f6:	4770      	bx	lr

0800a6f8 <mg_http_get_var>:

int mg_http_get_var(const struct mg_str *buf, const char *name, char *dst,
                    size_t dst_len) {
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	b08c      	sub	sp, #48	@ 0x30
 800a6fc:	af02      	add	r7, sp, #8
 800a6fe:	60f8      	str	r0, [r7, #12]
 800a700:	60b9      	str	r1, [r7, #8]
 800a702:	607a      	str	r2, [r7, #4]
 800a704:	603b      	str	r3, [r7, #0]
  int len;
  if (dst != NULL && dst_len > 0) {
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d005      	beq.n	800a718 <mg_http_get_var+0x20>
 800a70c:	683b      	ldr	r3, [r7, #0]
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d002      	beq.n	800a718 <mg_http_get_var+0x20>
    dst[0] = '\0';  // If destination buffer is valid, always nul-terminate it
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	2200      	movs	r2, #0
 800a716:	701a      	strb	r2, [r3, #0]
  }
  if (dst == NULL || dst_len == 0) {
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d002      	beq.n	800a724 <mg_http_get_var+0x2c>
 800a71e:	683b      	ldr	r3, [r7, #0]
 800a720:	2b00      	cmp	r3, #0
 800a722:	d103      	bne.n	800a72c <mg_http_get_var+0x34>
    len = -2;  // Bad destination
 800a724:	f06f 0301 	mvn.w	r3, #1
 800a728:	627b      	str	r3, [r7, #36]	@ 0x24
 800a72a:	e033      	b.n	800a794 <mg_http_get_var+0x9c>
  } else if (buf->buf == NULL || name == NULL || buf->len == 0) {
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	2b00      	cmp	r3, #0
 800a732:	d006      	beq.n	800a742 <mg_http_get_var+0x4a>
 800a734:	68bb      	ldr	r3, [r7, #8]
 800a736:	2b00      	cmp	r3, #0
 800a738:	d003      	beq.n	800a742 <mg_http_get_var+0x4a>
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	685b      	ldr	r3, [r3, #4]
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d103      	bne.n	800a74a <mg_http_get_var+0x52>
    len = -1;  // Bad source
 800a742:	f04f 33ff 	mov.w	r3, #4294967295
 800a746:	627b      	str	r3, [r7, #36]	@ 0x24
 800a748:	e024      	b.n	800a794 <mg_http_get_var+0x9c>
  } else {
    struct mg_str v = mg_http_var(*buf, mg_str(name));
 800a74a:	f107 031c 	add.w	r3, r7, #28
 800a74e:	68b9      	ldr	r1, [r7, #8]
 800a750:	4618      	mov	r0, r3
 800a752:	f00c f8a7 	bl	80168a4 <mg_str_s>
 800a756:	f107 0014 	add.w	r0, r7, #20
 800a75a:	68fa      	ldr	r2, [r7, #12]
 800a75c:	6a3b      	ldr	r3, [r7, #32]
 800a75e:	9300      	str	r3, [sp, #0]
 800a760:	69fb      	ldr	r3, [r7, #28]
 800a762:	ca06      	ldmia	r2, {r1, r2}
 800a764:	f7ff ff78 	bl	800a658 <mg_http_var>
    if (v.buf == NULL) {
 800a768:	697b      	ldr	r3, [r7, #20]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d103      	bne.n	800a776 <mg_http_get_var+0x7e>
      len = -4;  // Name does not exist
 800a76e:	f06f 0303 	mvn.w	r3, #3
 800a772:	627b      	str	r3, [r7, #36]	@ 0x24
 800a774:	e00e      	b.n	800a794 <mg_http_get_var+0x9c>
    } else {
      len = mg_url_decode(v.buf, v.len, dst, dst_len, 1);
 800a776:	6978      	ldr	r0, [r7, #20]
 800a778:	69b9      	ldr	r1, [r7, #24]
 800a77a:	2301      	movs	r3, #1
 800a77c:	9300      	str	r3, [sp, #0]
 800a77e:	683b      	ldr	r3, [r7, #0]
 800a780:	687a      	ldr	r2, [r7, #4]
 800a782:	f000 f82e 	bl	800a7e2 <mg_url_decode>
 800a786:	6278      	str	r0, [r7, #36]	@ 0x24
      if (len < 0) len = -3;  // Failed to decode
 800a788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	da02      	bge.n	800a794 <mg_http_get_var+0x9c>
 800a78e:	f06f 0302 	mvn.w	r3, #2
 800a792:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  return len;
 800a794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a796:	4618      	mov	r0, r3
 800a798:	3728      	adds	r7, #40	@ 0x28
 800a79a:	46bd      	mov	sp, r7
 800a79c:	bd80      	pop	{r7, pc}

0800a79e <isx>:

static bool isx(int c) {
 800a79e:	b480      	push	{r7}
 800a7a0:	b083      	sub	sp, #12
 800a7a2:	af00      	add	r7, sp, #0
 800a7a4:	6078      	str	r0, [r7, #4]
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	2b2f      	cmp	r3, #47	@ 0x2f
 800a7aa:	dd02      	ble.n	800a7b2 <isx+0x14>
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	2b39      	cmp	r3, #57	@ 0x39
 800a7b0:	dd0b      	ble.n	800a7ca <isx+0x2c>
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	2b60      	cmp	r3, #96	@ 0x60
 800a7b6:	dd02      	ble.n	800a7be <isx+0x20>
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	2b66      	cmp	r3, #102	@ 0x66
 800a7bc:	dd05      	ble.n	800a7ca <isx+0x2c>
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	2b40      	cmp	r3, #64	@ 0x40
 800a7c2:	dd04      	ble.n	800a7ce <isx+0x30>
         (c >= 'A' && c <= 'F');
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	2b46      	cmp	r3, #70	@ 0x46
 800a7c8:	dc01      	bgt.n	800a7ce <isx+0x30>
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 800a7ca:	2301      	movs	r3, #1
 800a7cc:	e000      	b.n	800a7d0 <isx+0x32>
 800a7ce:	2300      	movs	r3, #0
 800a7d0:	f003 0301 	and.w	r3, r3, #1
 800a7d4:	b2db      	uxtb	r3, r3
}
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	370c      	adds	r7, #12
 800a7da:	46bd      	mov	sp, r7
 800a7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e0:	4770      	bx	lr

0800a7e2 <mg_url_decode>:

int mg_url_decode(const char *src, size_t src_len, char *dst, size_t dst_len,
                  int is_form_url_encoded) {
 800a7e2:	b580      	push	{r7, lr}
 800a7e4:	b08a      	sub	sp, #40	@ 0x28
 800a7e6:	af02      	add	r7, sp, #8
 800a7e8:	60f8      	str	r0, [r7, #12]
 800a7ea:	60b9      	str	r1, [r7, #8]
 800a7ec:	607a      	str	r2, [r7, #4]
 800a7ee:	603b      	str	r3, [r7, #0]
  size_t i, j;
  for (i = j = 0; i < src_len && j + 1 < dst_len; i++, j++) {
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	61bb      	str	r3, [r7, #24]
 800a7f4:	69bb      	ldr	r3, [r7, #24]
 800a7f6:	61fb      	str	r3, [r7, #28]
 800a7f8:	e059      	b.n	800a8ae <mg_url_decode+0xcc>
    if (src[i] == '%') {
 800a7fa:	68fa      	ldr	r2, [r7, #12]
 800a7fc:	69fb      	ldr	r3, [r7, #28]
 800a7fe:	4413      	add	r3, r2
 800a800:	781b      	ldrb	r3, [r3, #0]
 800a802:	2b25      	cmp	r3, #37	@ 0x25
 800a804:	d136      	bne.n	800a874 <mg_url_decode+0x92>
      // Use `i + 2 < src_len`, not `i < src_len - 2`, note small src_len
      if (i + 2 < src_len && isx(src[i + 1]) && isx(src[i + 2])) {
 800a806:	69fb      	ldr	r3, [r7, #28]
 800a808:	3302      	adds	r3, #2
 800a80a:	68ba      	ldr	r2, [r7, #8]
 800a80c:	429a      	cmp	r2, r3
 800a80e:	d92e      	bls.n	800a86e <mg_url_decode+0x8c>
 800a810:	69fb      	ldr	r3, [r7, #28]
 800a812:	3301      	adds	r3, #1
 800a814:	68fa      	ldr	r2, [r7, #12]
 800a816:	4413      	add	r3, r2
 800a818:	781b      	ldrb	r3, [r3, #0]
 800a81a:	4618      	mov	r0, r3
 800a81c:	f7ff ffbf 	bl	800a79e <isx>
 800a820:	4603      	mov	r3, r0
 800a822:	2b00      	cmp	r3, #0
 800a824:	d023      	beq.n	800a86e <mg_url_decode+0x8c>
 800a826:	69fb      	ldr	r3, [r7, #28]
 800a828:	3302      	adds	r3, #2
 800a82a:	68fa      	ldr	r2, [r7, #12]
 800a82c:	4413      	add	r3, r2
 800a82e:	781b      	ldrb	r3, [r3, #0]
 800a830:	4618      	mov	r0, r3
 800a832:	f7ff ffb4 	bl	800a79e <isx>
 800a836:	4603      	mov	r3, r0
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d018      	beq.n	800a86e <mg_url_decode+0x8c>
        mg_str_to_num(mg_str_n(src + i + 1, 2), 16, &dst[j], sizeof(uint8_t));
 800a83c:	69fb      	ldr	r3, [r7, #28]
 800a83e:	3301      	adds	r3, #1
 800a840:	68fa      	ldr	r2, [r7, #12]
 800a842:	18d1      	adds	r1, r2, r3
 800a844:	f107 0310 	add.w	r3, r7, #16
 800a848:	2202      	movs	r2, #2
 800a84a:	4618      	mov	r0, r3
 800a84c:	f00c f847 	bl	80168de <mg_str_n>
 800a850:	687a      	ldr	r2, [r7, #4]
 800a852:	69bb      	ldr	r3, [r7, #24]
 800a854:	4413      	add	r3, r2
 800a856:	2201      	movs	r2, #1
 800a858:	9200      	str	r2, [sp, #0]
 800a85a:	2210      	movs	r2, #16
 800a85c:	f107 0110 	add.w	r1, r7, #16
 800a860:	c903      	ldmia	r1, {r0, r1}
 800a862:	f00c fa7a 	bl	8016d5a <mg_str_to_num>
        i += 2;
 800a866:	69fb      	ldr	r3, [r7, #28]
 800a868:	3302      	adds	r3, #2
 800a86a:	61fb      	str	r3, [r7, #28]
 800a86c:	e019      	b.n	800a8a2 <mg_url_decode+0xc0>
      } else {
        return -1;
 800a86e:	f04f 33ff 	mov.w	r3, #4294967295
 800a872:	e03a      	b.n	800a8ea <mg_url_decode+0x108>
      }
    } else if (is_form_url_encoded && src[i] == '+') {
 800a874:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a876:	2b00      	cmp	r3, #0
 800a878:	d00b      	beq.n	800a892 <mg_url_decode+0xb0>
 800a87a:	68fa      	ldr	r2, [r7, #12]
 800a87c:	69fb      	ldr	r3, [r7, #28]
 800a87e:	4413      	add	r3, r2
 800a880:	781b      	ldrb	r3, [r3, #0]
 800a882:	2b2b      	cmp	r3, #43	@ 0x2b
 800a884:	d105      	bne.n	800a892 <mg_url_decode+0xb0>
      dst[j] = ' ';
 800a886:	687a      	ldr	r2, [r7, #4]
 800a888:	69bb      	ldr	r3, [r7, #24]
 800a88a:	4413      	add	r3, r2
 800a88c:	2220      	movs	r2, #32
 800a88e:	701a      	strb	r2, [r3, #0]
 800a890:	e007      	b.n	800a8a2 <mg_url_decode+0xc0>
    } else {
      dst[j] = src[i];
 800a892:	68fa      	ldr	r2, [r7, #12]
 800a894:	69fb      	ldr	r3, [r7, #28]
 800a896:	441a      	add	r2, r3
 800a898:	6879      	ldr	r1, [r7, #4]
 800a89a:	69bb      	ldr	r3, [r7, #24]
 800a89c:	440b      	add	r3, r1
 800a89e:	7812      	ldrb	r2, [r2, #0]
 800a8a0:	701a      	strb	r2, [r3, #0]
  for (i = j = 0; i < src_len && j + 1 < dst_len; i++, j++) {
 800a8a2:	69fb      	ldr	r3, [r7, #28]
 800a8a4:	3301      	adds	r3, #1
 800a8a6:	61fb      	str	r3, [r7, #28]
 800a8a8:	69bb      	ldr	r3, [r7, #24]
 800a8aa:	3301      	adds	r3, #1
 800a8ac:	61bb      	str	r3, [r7, #24]
 800a8ae:	69fa      	ldr	r2, [r7, #28]
 800a8b0:	68bb      	ldr	r3, [r7, #8]
 800a8b2:	429a      	cmp	r2, r3
 800a8b4:	d204      	bcs.n	800a8c0 <mg_url_decode+0xde>
 800a8b6:	69bb      	ldr	r3, [r7, #24]
 800a8b8:	3301      	adds	r3, #1
 800a8ba:	683a      	ldr	r2, [r7, #0]
 800a8bc:	429a      	cmp	r2, r3
 800a8be:	d89c      	bhi.n	800a7fa <mg_url_decode+0x18>
    }
  }
  if (j < dst_len) dst[j] = '\0';  // Null-terminate the destination
 800a8c0:	69ba      	ldr	r2, [r7, #24]
 800a8c2:	683b      	ldr	r3, [r7, #0]
 800a8c4:	429a      	cmp	r2, r3
 800a8c6:	d204      	bcs.n	800a8d2 <mg_url_decode+0xf0>
 800a8c8:	687a      	ldr	r2, [r7, #4]
 800a8ca:	69bb      	ldr	r3, [r7, #24]
 800a8cc:	4413      	add	r3, r2
 800a8ce:	2200      	movs	r2, #0
 800a8d0:	701a      	strb	r2, [r3, #0]
  return i >= src_len && j < dst_len ? (int) j : -1;
 800a8d2:	69fa      	ldr	r2, [r7, #28]
 800a8d4:	68bb      	ldr	r3, [r7, #8]
 800a8d6:	429a      	cmp	r2, r3
 800a8d8:	d305      	bcc.n	800a8e6 <mg_url_decode+0x104>
 800a8da:	69ba      	ldr	r2, [r7, #24]
 800a8dc:	683b      	ldr	r3, [r7, #0]
 800a8de:	429a      	cmp	r2, r3
 800a8e0:	d201      	bcs.n	800a8e6 <mg_url_decode+0x104>
 800a8e2:	69bb      	ldr	r3, [r7, #24]
 800a8e4:	e001      	b.n	800a8ea <mg_url_decode+0x108>
 800a8e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	3720      	adds	r7, #32
 800a8ee:	46bd      	mov	sp, r7
 800a8f0:	bd80      	pop	{r7, pc}

0800a8f2 <isok>:

static bool isok(uint8_t c) {
 800a8f2:	b480      	push	{r7}
 800a8f4:	b083      	sub	sp, #12
 800a8f6:	af00      	add	r7, sp, #0
 800a8f8:	4603      	mov	r3, r0
 800a8fa:	71fb      	strb	r3, [r7, #7]
  return c == '\n' || c == '\r' || c == '\t' || c >= ' ';
 800a8fc:	79fb      	ldrb	r3, [r7, #7]
 800a8fe:	2b0a      	cmp	r3, #10
 800a900:	d008      	beq.n	800a914 <isok+0x22>
 800a902:	79fb      	ldrb	r3, [r7, #7]
 800a904:	2b0d      	cmp	r3, #13
 800a906:	d005      	beq.n	800a914 <isok+0x22>
 800a908:	79fb      	ldrb	r3, [r7, #7]
 800a90a:	2b09      	cmp	r3, #9
 800a90c:	d002      	beq.n	800a914 <isok+0x22>
 800a90e:	79fb      	ldrb	r3, [r7, #7]
 800a910:	2b1f      	cmp	r3, #31
 800a912:	d901      	bls.n	800a918 <isok+0x26>
 800a914:	2301      	movs	r3, #1
 800a916:	e000      	b.n	800a91a <isok+0x28>
 800a918:	2300      	movs	r3, #0
 800a91a:	f003 0301 	and.w	r3, r3, #1
 800a91e:	b2db      	uxtb	r3, r3
}
 800a920:	4618      	mov	r0, r3
 800a922:	370c      	adds	r7, #12
 800a924:	46bd      	mov	sp, r7
 800a926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92a:	4770      	bx	lr

0800a92c <mg_http_get_request_len>:

int mg_http_get_request_len(const unsigned char *buf, size_t buf_len) {
 800a92c:	b580      	push	{r7, lr}
 800a92e:	b084      	sub	sp, #16
 800a930:	af00      	add	r7, sp, #0
 800a932:	6078      	str	r0, [r7, #4]
 800a934:	6039      	str	r1, [r7, #0]
  size_t i;
  for (i = 0; i < buf_len; i++) {
 800a936:	2300      	movs	r3, #0
 800a938:	60fb      	str	r3, [r7, #12]
 800a93a:	e03c      	b.n	800a9b6 <mg_http_get_request_len+0x8a>
    if (!isok(buf[i])) return -1;
 800a93c:	687a      	ldr	r2, [r7, #4]
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	4413      	add	r3, r2
 800a942:	781b      	ldrb	r3, [r3, #0]
 800a944:	4618      	mov	r0, r3
 800a946:	f7ff ffd4 	bl	800a8f2 <isok>
 800a94a:	4603      	mov	r3, r0
 800a94c:	f083 0301 	eor.w	r3, r3, #1
 800a950:	b2db      	uxtb	r3, r3
 800a952:	2b00      	cmp	r3, #0
 800a954:	d002      	beq.n	800a95c <mg_http_get_request_len+0x30>
 800a956:	f04f 33ff 	mov.w	r3, #4294967295
 800a95a:	e031      	b.n	800a9c0 <mg_http_get_request_len+0x94>
    if ((i > 0 && buf[i] == '\n' && buf[i - 1] == '\n') ||
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d00c      	beq.n	800a97c <mg_http_get_request_len+0x50>
 800a962:	687a      	ldr	r2, [r7, #4]
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	4413      	add	r3, r2
 800a968:	781b      	ldrb	r3, [r3, #0]
 800a96a:	2b0a      	cmp	r3, #10
 800a96c:	d106      	bne.n	800a97c <mg_http_get_request_len+0x50>
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	3b01      	subs	r3, #1
 800a972:	687a      	ldr	r2, [r7, #4]
 800a974:	4413      	add	r3, r2
 800a976:	781b      	ldrb	r3, [r3, #0]
 800a978:	2b0a      	cmp	r3, #10
 800a97a:	d016      	beq.n	800a9aa <mg_http_get_request_len+0x7e>
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	2b03      	cmp	r3, #3
 800a980:	d916      	bls.n	800a9b0 <mg_http_get_request_len+0x84>
        (i > 3 && buf[i] == '\n' && buf[i - 1] == '\r' && buf[i - 2] == '\n'))
 800a982:	687a      	ldr	r2, [r7, #4]
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	4413      	add	r3, r2
 800a988:	781b      	ldrb	r3, [r3, #0]
 800a98a:	2b0a      	cmp	r3, #10
 800a98c:	d110      	bne.n	800a9b0 <mg_http_get_request_len+0x84>
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	3b01      	subs	r3, #1
 800a992:	687a      	ldr	r2, [r7, #4]
 800a994:	4413      	add	r3, r2
 800a996:	781b      	ldrb	r3, [r3, #0]
 800a998:	2b0d      	cmp	r3, #13
 800a99a:	d109      	bne.n	800a9b0 <mg_http_get_request_len+0x84>
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	3b02      	subs	r3, #2
 800a9a0:	687a      	ldr	r2, [r7, #4]
 800a9a2:	4413      	add	r3, r2
 800a9a4:	781b      	ldrb	r3, [r3, #0]
 800a9a6:	2b0a      	cmp	r3, #10
 800a9a8:	d102      	bne.n	800a9b0 <mg_http_get_request_len+0x84>
      return (int) i + 1;
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	3301      	adds	r3, #1
 800a9ae:	e007      	b.n	800a9c0 <mg_http_get_request_len+0x94>
  for (i = 0; i < buf_len; i++) {
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	3301      	adds	r3, #1
 800a9b4:	60fb      	str	r3, [r7, #12]
 800a9b6:	68fa      	ldr	r2, [r7, #12]
 800a9b8:	683b      	ldr	r3, [r7, #0]
 800a9ba:	429a      	cmp	r2, r3
 800a9bc:	d3be      	bcc.n	800a93c <mg_http_get_request_len+0x10>
  }
  return 0;
 800a9be:	2300      	movs	r3, #0
}
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	3710      	adds	r7, #16
 800a9c4:	46bd      	mov	sp, r7
 800a9c6:	bd80      	pop	{r7, pc}

0800a9c8 <mg_http_get_header>:
struct mg_str *mg_http_get_header(struct mg_http_message *h, const char *name) {
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b088      	sub	sp, #32
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	6078      	str	r0, [r7, #4]
 800a9d0:	6039      	str	r1, [r7, #0]
  size_t i, n = strlen(name), max = sizeof(h->headers) / sizeof(h->headers[0]);
 800a9d2:	6838      	ldr	r0, [r7, #0]
 800a9d4:	f7f5 fcfc 	bl	80003d0 <strlen>
 800a9d8:	61b8      	str	r0, [r7, #24]
 800a9da:	231e      	movs	r3, #30
 800a9dc:	617b      	str	r3, [r7, #20]
  for (i = 0; i < max && h->headers[i].name.len > 0; i++) {
 800a9de:	2300      	movs	r3, #0
 800a9e0:	61fb      	str	r3, [r7, #28]
 800a9e2:	e01f      	b.n	800aa24 <mg_http_get_header+0x5c>
    struct mg_str *k = &h->headers[i].name, *v = &h->headers[i].value;
 800a9e4:	69fb      	ldr	r3, [r7, #28]
 800a9e6:	3302      	adds	r3, #2
 800a9e8:	011b      	lsls	r3, r3, #4
 800a9ea:	687a      	ldr	r2, [r7, #4]
 800a9ec:	4413      	add	r3, r2
 800a9ee:	613b      	str	r3, [r7, #16]
 800a9f0:	69fb      	ldr	r3, [r7, #28]
 800a9f2:	011b      	lsls	r3, r3, #4
 800a9f4:	3328      	adds	r3, #40	@ 0x28
 800a9f6:	687a      	ldr	r2, [r7, #4]
 800a9f8:	4413      	add	r3, r2
 800a9fa:	60fb      	str	r3, [r7, #12]
    if (n == k->len && mg_ncasecmp(k->buf, name, n) == 0) return v;
 800a9fc:	693b      	ldr	r3, [r7, #16]
 800a9fe:	685b      	ldr	r3, [r3, #4]
 800aa00:	69ba      	ldr	r2, [r7, #24]
 800aa02:	429a      	cmp	r2, r3
 800aa04:	d10b      	bne.n	800aa1e <mg_http_get_header+0x56>
 800aa06:	693b      	ldr	r3, [r7, #16]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	69ba      	ldr	r2, [r7, #24]
 800aa0c:	6839      	ldr	r1, [r7, #0]
 800aa0e:	4618      	mov	r0, r3
 800aa10:	f7ff fd4b 	bl	800a4aa <mg_ncasecmp>
 800aa14:	4603      	mov	r3, r0
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d101      	bne.n	800aa1e <mg_http_get_header+0x56>
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	e010      	b.n	800aa40 <mg_http_get_header+0x78>
  for (i = 0; i < max && h->headers[i].name.len > 0; i++) {
 800aa1e:	69fb      	ldr	r3, [r7, #28]
 800aa20:	3301      	adds	r3, #1
 800aa22:	61fb      	str	r3, [r7, #28]
 800aa24:	69fa      	ldr	r2, [r7, #28]
 800aa26:	697b      	ldr	r3, [r7, #20]
 800aa28:	429a      	cmp	r2, r3
 800aa2a:	d208      	bcs.n	800aa3e <mg_http_get_header+0x76>
 800aa2c:	687a      	ldr	r2, [r7, #4]
 800aa2e:	69fb      	ldr	r3, [r7, #28]
 800aa30:	3302      	adds	r3, #2
 800aa32:	011b      	lsls	r3, r3, #4
 800aa34:	4413      	add	r3, r2
 800aa36:	3304      	adds	r3, #4
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d1d2      	bne.n	800a9e4 <mg_http_get_header+0x1c>
  }
  return NULL;
 800aa3e:	2300      	movs	r3, #0
}
 800aa40:	4618      	mov	r0, r3
 800aa42:	3720      	adds	r7, #32
 800aa44:	46bd      	mov	sp, r7
 800aa46:	bd80      	pop	{r7, pc}

0800aa48 <vcb>:

// Is it a valid utf-8 continuation byte
static bool vcb(uint8_t c) {
 800aa48:	b480      	push	{r7}
 800aa4a:	b083      	sub	sp, #12
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	4603      	mov	r3, r0
 800aa50:	71fb      	strb	r3, [r7, #7]
  return (c & 0xc0) == 0x80;
 800aa52:	79fb      	ldrb	r3, [r7, #7]
 800aa54:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800aa58:	2b80      	cmp	r3, #128	@ 0x80
 800aa5a:	bf0c      	ite	eq
 800aa5c:	2301      	moveq	r3, #1
 800aa5e:	2300      	movne	r3, #0
 800aa60:	b2db      	uxtb	r3, r3
}
 800aa62:	4618      	mov	r0, r3
 800aa64:	370c      	adds	r7, #12
 800aa66:	46bd      	mov	sp, r7
 800aa68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6c:	4770      	bx	lr

0800aa6e <clen>:

// Get character length (valid utf-8). Used to parse method, URI, headers
static size_t clen(const char *s, const char *end) {
 800aa6e:	b580      	push	{r7, lr}
 800aa70:	b086      	sub	sp, #24
 800aa72:	af00      	add	r7, sp, #0
 800aa74:	6078      	str	r0, [r7, #4]
 800aa76:	6039      	str	r1, [r7, #0]
  const unsigned char *u = (unsigned char *) s, c = *u;
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	617b      	str	r3, [r7, #20]
 800aa7c:	697b      	ldr	r3, [r7, #20]
 800aa7e:	781b      	ldrb	r3, [r3, #0]
 800aa80:	74fb      	strb	r3, [r7, #19]
  long n = (long) (end - s);
 800aa82:	683a      	ldr	r2, [r7, #0]
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	1ad3      	subs	r3, r2, r3
 800aa88:	60fb      	str	r3, [r7, #12]
  if (c > ' ' && c <= '~') return 1;  // Usual ascii printed char
 800aa8a:	7cfb      	ldrb	r3, [r7, #19]
 800aa8c:	2b20      	cmp	r3, #32
 800aa8e:	d904      	bls.n	800aa9a <clen+0x2c>
 800aa90:	7cfb      	ldrb	r3, [r7, #19]
 800aa92:	2b7e      	cmp	r3, #126	@ 0x7e
 800aa94:	d801      	bhi.n	800aa9a <clen+0x2c>
 800aa96:	2301      	movs	r3, #1
 800aa98:	e054      	b.n	800ab44 <clen+0xd6>
  if ((c & 0xe0) == 0xc0 && n > 1 && vcb(u[1])) return 2;  // 2-byte UTF8
 800aa9a:	7cfb      	ldrb	r3, [r7, #19]
 800aa9c:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800aaa0:	2bc0      	cmp	r3, #192	@ 0xc0
 800aaa2:	d10d      	bne.n	800aac0 <clen+0x52>
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	2b01      	cmp	r3, #1
 800aaa8:	dd0a      	ble.n	800aac0 <clen+0x52>
 800aaaa:	697b      	ldr	r3, [r7, #20]
 800aaac:	3301      	adds	r3, #1
 800aaae:	781b      	ldrb	r3, [r3, #0]
 800aab0:	4618      	mov	r0, r3
 800aab2:	f7ff ffc9 	bl	800aa48 <vcb>
 800aab6:	4603      	mov	r3, r0
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d001      	beq.n	800aac0 <clen+0x52>
 800aabc:	2302      	movs	r3, #2
 800aabe:	e041      	b.n	800ab44 <clen+0xd6>
  if ((c & 0xf0) == 0xe0 && n > 2 && vcb(u[1]) && vcb(u[2])) return 3;
 800aac0:	7cfb      	ldrb	r3, [r7, #19]
 800aac2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800aac6:	2be0      	cmp	r3, #224	@ 0xe0
 800aac8:	d116      	bne.n	800aaf8 <clen+0x8a>
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	2b02      	cmp	r3, #2
 800aace:	dd13      	ble.n	800aaf8 <clen+0x8a>
 800aad0:	697b      	ldr	r3, [r7, #20]
 800aad2:	3301      	adds	r3, #1
 800aad4:	781b      	ldrb	r3, [r3, #0]
 800aad6:	4618      	mov	r0, r3
 800aad8:	f7ff ffb6 	bl	800aa48 <vcb>
 800aadc:	4603      	mov	r3, r0
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d00a      	beq.n	800aaf8 <clen+0x8a>
 800aae2:	697b      	ldr	r3, [r7, #20]
 800aae4:	3302      	adds	r3, #2
 800aae6:	781b      	ldrb	r3, [r3, #0]
 800aae8:	4618      	mov	r0, r3
 800aaea:	f7ff ffad 	bl	800aa48 <vcb>
 800aaee:	4603      	mov	r3, r0
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d001      	beq.n	800aaf8 <clen+0x8a>
 800aaf4:	2303      	movs	r3, #3
 800aaf6:	e025      	b.n	800ab44 <clen+0xd6>
  if ((c & 0xf8) == 0xf0 && n > 3 && vcb(u[1]) && vcb(u[2]) && vcb(u[3]))
 800aaf8:	7cfb      	ldrb	r3, [r7, #19]
 800aafa:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 800aafe:	2bf0      	cmp	r3, #240	@ 0xf0
 800ab00:	d11f      	bne.n	800ab42 <clen+0xd4>
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	2b03      	cmp	r3, #3
 800ab06:	dd1c      	ble.n	800ab42 <clen+0xd4>
 800ab08:	697b      	ldr	r3, [r7, #20]
 800ab0a:	3301      	adds	r3, #1
 800ab0c:	781b      	ldrb	r3, [r3, #0]
 800ab0e:	4618      	mov	r0, r3
 800ab10:	f7ff ff9a 	bl	800aa48 <vcb>
 800ab14:	4603      	mov	r3, r0
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d013      	beq.n	800ab42 <clen+0xd4>
 800ab1a:	697b      	ldr	r3, [r7, #20]
 800ab1c:	3302      	adds	r3, #2
 800ab1e:	781b      	ldrb	r3, [r3, #0]
 800ab20:	4618      	mov	r0, r3
 800ab22:	f7ff ff91 	bl	800aa48 <vcb>
 800ab26:	4603      	mov	r3, r0
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d00a      	beq.n	800ab42 <clen+0xd4>
 800ab2c:	697b      	ldr	r3, [r7, #20]
 800ab2e:	3303      	adds	r3, #3
 800ab30:	781b      	ldrb	r3, [r3, #0]
 800ab32:	4618      	mov	r0, r3
 800ab34:	f7ff ff88 	bl	800aa48 <vcb>
 800ab38:	4603      	mov	r3, r0
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d001      	beq.n	800ab42 <clen+0xd4>
    return 4;
 800ab3e:	2304      	movs	r3, #4
 800ab40:	e000      	b.n	800ab44 <clen+0xd6>
  return 0;
 800ab42:	2300      	movs	r3, #0
}
 800ab44:	4618      	mov	r0, r3
 800ab46:	3718      	adds	r7, #24
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	bd80      	pop	{r7, pc}

0800ab4c <skiptorn>:

// Skip until the newline. Return advanced `s`, or NULL on error
static const char *skiptorn(const char *s, const char *end, struct mg_str *v) {
 800ab4c:	b480      	push	{r7}
 800ab4e:	b085      	sub	sp, #20
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	60f8      	str	r0, [r7, #12]
 800ab54:	60b9      	str	r1, [r7, #8]
 800ab56:	607a      	str	r2, [r7, #4]
  v->buf = (char *) s;
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	68fa      	ldr	r2, [r7, #12]
 800ab5c:	601a      	str	r2, [r3, #0]
  while (s < end && s[0] != '\n' && s[0] != '\r') s++, v->len++;  // To newline
 800ab5e:	e007      	b.n	800ab70 <skiptorn+0x24>
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	3301      	adds	r3, #1
 800ab64:	60fb      	str	r3, [r7, #12]
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	685b      	ldr	r3, [r3, #4]
 800ab6a:	1c5a      	adds	r2, r3, #1
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	605a      	str	r2, [r3, #4]
 800ab70:	68fa      	ldr	r2, [r7, #12]
 800ab72:	68bb      	ldr	r3, [r7, #8]
 800ab74:	429a      	cmp	r2, r3
 800ab76:	d207      	bcs.n	800ab88 <skiptorn+0x3c>
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	781b      	ldrb	r3, [r3, #0]
 800ab7c:	2b0a      	cmp	r3, #10
 800ab7e:	d003      	beq.n	800ab88 <skiptorn+0x3c>
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	781b      	ldrb	r3, [r3, #0]
 800ab84:	2b0d      	cmp	r3, #13
 800ab86:	d1eb      	bne.n	800ab60 <skiptorn+0x14>
  if (s >= end || (s[0] == '\r' && s[1] != '\n')) return NULL;    // Stray \r
 800ab88:	68fa      	ldr	r2, [r7, #12]
 800ab8a:	68bb      	ldr	r3, [r7, #8]
 800ab8c:	429a      	cmp	r2, r3
 800ab8e:	d208      	bcs.n	800aba2 <skiptorn+0x56>
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	781b      	ldrb	r3, [r3, #0]
 800ab94:	2b0d      	cmp	r3, #13
 800ab96:	d106      	bne.n	800aba6 <skiptorn+0x5a>
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	3301      	adds	r3, #1
 800ab9c:	781b      	ldrb	r3, [r3, #0]
 800ab9e:	2b0a      	cmp	r3, #10
 800aba0:	d001      	beq.n	800aba6 <skiptorn+0x5a>
 800aba2:	2300      	movs	r3, #0
 800aba4:	e017      	b.n	800abd6 <skiptorn+0x8a>
  if (s < end && s[0] == '\r') s++;                               // Skip \r
 800aba6:	68fa      	ldr	r2, [r7, #12]
 800aba8:	68bb      	ldr	r3, [r7, #8]
 800abaa:	429a      	cmp	r2, r3
 800abac:	d206      	bcs.n	800abbc <skiptorn+0x70>
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	781b      	ldrb	r3, [r3, #0]
 800abb2:	2b0d      	cmp	r3, #13
 800abb4:	d102      	bne.n	800abbc <skiptorn+0x70>
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	3301      	adds	r3, #1
 800abba:	60fb      	str	r3, [r7, #12]
  if (s >= end || *s++ != '\n') return NULL;                      // Skip \n
 800abbc:	68fa      	ldr	r2, [r7, #12]
 800abbe:	68bb      	ldr	r3, [r7, #8]
 800abc0:	429a      	cmp	r2, r3
 800abc2:	d205      	bcs.n	800abd0 <skiptorn+0x84>
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	1c5a      	adds	r2, r3, #1
 800abc8:	60fa      	str	r2, [r7, #12]
 800abca:	781b      	ldrb	r3, [r3, #0]
 800abcc:	2b0a      	cmp	r3, #10
 800abce:	d001      	beq.n	800abd4 <skiptorn+0x88>
 800abd0:	2300      	movs	r3, #0
 800abd2:	e000      	b.n	800abd6 <skiptorn+0x8a>
  return s;
 800abd4:	68fb      	ldr	r3, [r7, #12]
}
 800abd6:	4618      	mov	r0, r3
 800abd8:	3714      	adds	r7, #20
 800abda:	46bd      	mov	sp, r7
 800abdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe0:	4770      	bx	lr

0800abe2 <mg_http_parse_headers>:

static bool mg_http_parse_headers(const char *s, const char *end,
                                  struct mg_http_header *h, size_t max_hdrs) {
 800abe2:	b580      	push	{r7, lr}
 800abe4:	b08a      	sub	sp, #40	@ 0x28
 800abe6:	af00      	add	r7, sp, #0
 800abe8:	60f8      	str	r0, [r7, #12]
 800abea:	60b9      	str	r1, [r7, #8]
 800abec:	607a      	str	r2, [r7, #4]
 800abee:	603b      	str	r3, [r7, #0]
  size_t i, n;
  for (i = 0; i < max_hdrs; i++) {
 800abf0:	2300      	movs	r3, #0
 800abf2:	627b      	str	r3, [r7, #36]	@ 0x24
 800abf4:	e09a      	b.n	800ad2c <mg_http_parse_headers+0x14a>
    struct mg_str k = {NULL, 0}, v = {NULL, 0};
 800abf6:	2300      	movs	r3, #0
 800abf8:	61bb      	str	r3, [r7, #24]
 800abfa:	2300      	movs	r3, #0
 800abfc:	61fb      	str	r3, [r7, #28]
 800abfe:	2300      	movs	r3, #0
 800ac00:	613b      	str	r3, [r7, #16]
 800ac02:	2300      	movs	r3, #0
 800ac04:	617b      	str	r3, [r7, #20]
    if (s >= end) return false;
 800ac06:	68fa      	ldr	r2, [r7, #12]
 800ac08:	68bb      	ldr	r3, [r7, #8]
 800ac0a:	429a      	cmp	r2, r3
 800ac0c:	d301      	bcc.n	800ac12 <mg_http_parse_headers+0x30>
 800ac0e:	2300      	movs	r3, #0
 800ac10:	e092      	b.n	800ad38 <mg_http_parse_headers+0x156>
    if (s[0] == '\n' || (s[0] == '\r' && s[1] == '\n')) break;
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	781b      	ldrb	r3, [r3, #0]
 800ac16:	2b0a      	cmp	r3, #10
 800ac18:	f000 808d 	beq.w	800ad36 <mg_http_parse_headers+0x154>
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	781b      	ldrb	r3, [r3, #0]
 800ac20:	2b0d      	cmp	r3, #13
 800ac22:	d105      	bne.n	800ac30 <mg_http_parse_headers+0x4e>
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	3301      	adds	r3, #1
 800ac28:	781b      	ldrb	r3, [r3, #0]
 800ac2a:	2b0a      	cmp	r3, #10
 800ac2c:	f000 8083 	beq.w	800ad36 <mg_http_parse_headers+0x154>
    k.buf = (char *) s;
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	61bb      	str	r3, [r7, #24]
    while (s < end && s[0] != ':' && (n = clen(s, end)) > 0) s += n, k.len += n;
 800ac34:	e007      	b.n	800ac46 <mg_http_parse_headers+0x64>
 800ac36:	68fa      	ldr	r2, [r7, #12]
 800ac38:	6a3b      	ldr	r3, [r7, #32]
 800ac3a:	4413      	add	r3, r2
 800ac3c:	60fb      	str	r3, [r7, #12]
 800ac3e:	69fa      	ldr	r2, [r7, #28]
 800ac40:	6a3b      	ldr	r3, [r7, #32]
 800ac42:	4413      	add	r3, r2
 800ac44:	61fb      	str	r3, [r7, #28]
 800ac46:	68fa      	ldr	r2, [r7, #12]
 800ac48:	68bb      	ldr	r3, [r7, #8]
 800ac4a:	429a      	cmp	r2, r3
 800ac4c:	d20b      	bcs.n	800ac66 <mg_http_parse_headers+0x84>
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	781b      	ldrb	r3, [r3, #0]
 800ac52:	2b3a      	cmp	r3, #58	@ 0x3a
 800ac54:	d007      	beq.n	800ac66 <mg_http_parse_headers+0x84>
 800ac56:	68b9      	ldr	r1, [r7, #8]
 800ac58:	68f8      	ldr	r0, [r7, #12]
 800ac5a:	f7ff ff08 	bl	800aa6e <clen>
 800ac5e:	6238      	str	r0, [r7, #32]
 800ac60:	6a3b      	ldr	r3, [r7, #32]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d1e7      	bne.n	800ac36 <mg_http_parse_headers+0x54>
    if (k.len == 0) return false;                     // Empty name
 800ac66:	69fb      	ldr	r3, [r7, #28]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d101      	bne.n	800ac70 <mg_http_parse_headers+0x8e>
 800ac6c:	2300      	movs	r3, #0
 800ac6e:	e063      	b.n	800ad38 <mg_http_parse_headers+0x156>
    if (s >= end || clen(s, end) == 0) return false;  // Invalid UTF-8
 800ac70:	68fa      	ldr	r2, [r7, #12]
 800ac72:	68bb      	ldr	r3, [r7, #8]
 800ac74:	429a      	cmp	r2, r3
 800ac76:	d206      	bcs.n	800ac86 <mg_http_parse_headers+0xa4>
 800ac78:	68b9      	ldr	r1, [r7, #8]
 800ac7a:	68f8      	ldr	r0, [r7, #12]
 800ac7c:	f7ff fef7 	bl	800aa6e <clen>
 800ac80:	4603      	mov	r3, r0
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d101      	bne.n	800ac8a <mg_http_parse_headers+0xa8>
 800ac86:	2300      	movs	r3, #0
 800ac88:	e056      	b.n	800ad38 <mg_http_parse_headers+0x156>
    if (*s++ != ':') return false;  // Invalid, not followed by :
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	1c5a      	adds	r2, r3, #1
 800ac8e:	60fa      	str	r2, [r7, #12]
 800ac90:	781b      	ldrb	r3, [r3, #0]
 800ac92:	2b3a      	cmp	r3, #58	@ 0x3a
 800ac94:	d004      	beq.n	800aca0 <mg_http_parse_headers+0xbe>
 800ac96:	2300      	movs	r3, #0
 800ac98:	e04e      	b.n	800ad38 <mg_http_parse_headers+0x156>
    // if (clen(s, end) == 0) return false;        // Invalid UTF-8
    while (s < end && (s[0] == ' ' || s[0] == '\t')) s++;  // Skip spaces
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	3301      	adds	r3, #1
 800ac9e:	60fb      	str	r3, [r7, #12]
 800aca0:	68fa      	ldr	r2, [r7, #12]
 800aca2:	68bb      	ldr	r3, [r7, #8]
 800aca4:	429a      	cmp	r2, r3
 800aca6:	d207      	bcs.n	800acb8 <mg_http_parse_headers+0xd6>
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	781b      	ldrb	r3, [r3, #0]
 800acac:	2b20      	cmp	r3, #32
 800acae:	d0f4      	beq.n	800ac9a <mg_http_parse_headers+0xb8>
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	781b      	ldrb	r3, [r3, #0]
 800acb4:	2b09      	cmp	r3, #9
 800acb6:	d0f0      	beq.n	800ac9a <mg_http_parse_headers+0xb8>
    if ((s = skiptorn(s, end, &v)) == NULL) return false;
 800acb8:	f107 0310 	add.w	r3, r7, #16
 800acbc:	461a      	mov	r2, r3
 800acbe:	68b9      	ldr	r1, [r7, #8]
 800acc0:	68f8      	ldr	r0, [r7, #12]
 800acc2:	f7ff ff43 	bl	800ab4c <skiptorn>
 800acc6:	60f8      	str	r0, [r7, #12]
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	2b00      	cmp	r3, #0
 800accc:	d104      	bne.n	800acd8 <mg_http_parse_headers+0xf6>
 800acce:	2300      	movs	r3, #0
 800acd0:	e032      	b.n	800ad38 <mg_http_parse_headers+0x156>
    while (v.len > 0 && (v.buf[v.len - 1] == ' ' || v.buf[v.len - 1] == '\t')) {
      v.len--;  // Trim spaces
 800acd2:	697b      	ldr	r3, [r7, #20]
 800acd4:	3b01      	subs	r3, #1
 800acd6:	617b      	str	r3, [r7, #20]
    while (v.len > 0 && (v.buf[v.len - 1] == ' ' || v.buf[v.len - 1] == '\t')) {
 800acd8:	697b      	ldr	r3, [r7, #20]
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d00d      	beq.n	800acfa <mg_http_parse_headers+0x118>
 800acde:	693a      	ldr	r2, [r7, #16]
 800ace0:	697b      	ldr	r3, [r7, #20]
 800ace2:	3b01      	subs	r3, #1
 800ace4:	4413      	add	r3, r2
 800ace6:	781b      	ldrb	r3, [r3, #0]
 800ace8:	2b20      	cmp	r3, #32
 800acea:	d0f2      	beq.n	800acd2 <mg_http_parse_headers+0xf0>
 800acec:	693a      	ldr	r2, [r7, #16]
 800acee:	697b      	ldr	r3, [r7, #20]
 800acf0:	3b01      	subs	r3, #1
 800acf2:	4413      	add	r3, r2
 800acf4:	781b      	ldrb	r3, [r3, #0]
 800acf6:	2b09      	cmp	r3, #9
 800acf8:	d0eb      	beq.n	800acd2 <mg_http_parse_headers+0xf0>
    }
    // MG_INFO(("--HH [%.*s] [%.*s]", (int) k.len, k.buf, (int) v.len, v.buf));
    h[i].name = k, h[i].value = v;  // Success. Assign values
 800acfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acfc:	011b      	lsls	r3, r3, #4
 800acfe:	687a      	ldr	r2, [r7, #4]
 800ad00:	4413      	add	r3, r2
 800ad02:	461a      	mov	r2, r3
 800ad04:	f107 0318 	add.w	r3, r7, #24
 800ad08:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ad0c:	e882 0003 	stmia.w	r2, {r0, r1}
 800ad10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad12:	011b      	lsls	r3, r3, #4
 800ad14:	687a      	ldr	r2, [r7, #4]
 800ad16:	4413      	add	r3, r2
 800ad18:	3308      	adds	r3, #8
 800ad1a:	f107 0210 	add.w	r2, r7, #16
 800ad1e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ad22:	e883 0003 	stmia.w	r3, {r0, r1}
  for (i = 0; i < max_hdrs; i++) {
 800ad26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad28:	3301      	adds	r3, #1
 800ad2a:	627b      	str	r3, [r7, #36]	@ 0x24
 800ad2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ad2e:	683b      	ldr	r3, [r7, #0]
 800ad30:	429a      	cmp	r2, r3
 800ad32:	f4ff af60 	bcc.w	800abf6 <mg_http_parse_headers+0x14>
  }
  return true;
 800ad36:	2301      	movs	r3, #1
}
 800ad38:	4618      	mov	r0, r3
 800ad3a:	3728      	adds	r7, #40	@ 0x28
 800ad3c:	46bd      	mov	sp, r7
 800ad3e:	bd80      	pop	{r7, pc}

0800ad40 <mg_http_parse>:

int mg_http_parse(const char *s, size_t len, struct mg_http_message *hm) {
 800ad40:	b580      	push	{r7, lr}
 800ad42:	b092      	sub	sp, #72	@ 0x48
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	60f8      	str	r0, [r7, #12]
 800ad48:	60b9      	str	r1, [r7, #8]
 800ad4a:	607a      	str	r2, [r7, #4]
  int is_response, req_len = mg_http_get_request_len((unsigned char *) s, len);
 800ad4c:	68b9      	ldr	r1, [r7, #8]
 800ad4e:	68f8      	ldr	r0, [r7, #12]
 800ad50:	f7ff fdec 	bl	800a92c <mg_http_get_request_len>
 800ad54:	6478      	str	r0, [r7, #68]	@ 0x44
  const char *end = s == NULL ? NULL : s + req_len, *qs;  // Cannot add to NULL
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d003      	beq.n	800ad64 <mg_http_parse+0x24>
 800ad5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ad5e:	68fa      	ldr	r2, [r7, #12]
 800ad60:	4413      	add	r3, r2
 800ad62:	e000      	b.n	800ad66 <mg_http_parse+0x26>
 800ad64:	2300      	movs	r3, #0
 800ad66:	643b      	str	r3, [r7, #64]	@ 0x40
  const struct mg_str *cl;
  size_t n;
  bool version_prefix_valid;

  memset(hm, 0, sizeof(*hm));
 800ad68:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800ad6c:	2100      	movs	r1, #0
 800ad6e:	6878      	ldr	r0, [r7, #4]
 800ad70:	f01c fcaa 	bl	80276c8 <memset>
  if (req_len <= 0) return req_len;
 800ad74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	dc01      	bgt.n	800ad7e <mg_http_parse+0x3e>
 800ad7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ad7c:	e18f      	b.n	800b09e <mg_http_parse+0x35e>

  hm->message.buf = hm->head.buf = (char *) s;
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	68fa      	ldr	r2, [r7, #12]
 800ad82:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
  hm->body.buf = (char *) end;
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ad96:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
  hm->head.len = (size_t) req_len;
 800ad9a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
  hm->message.len = hm->body.len = (size_t) -1;  // Set body length to infinite
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	f04f 32ff 	mov.w	r2, #4294967295
 800ada8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

  // Parse request line
  hm->method.buf = (char *) s;
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	68fa      	ldr	r2, [r7, #12]
 800adbc:	601a      	str	r2, [r3, #0]
  while (s < end && (n = clen(s, end)) > 0) s += n, hm->method.len += n;
 800adbe:	e009      	b.n	800add4 <mg_http_parse+0x94>
 800adc0:	68fa      	ldr	r2, [r7, #12]
 800adc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800adc4:	4413      	add	r3, r2
 800adc6:	60fb      	str	r3, [r7, #12]
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	685a      	ldr	r2, [r3, #4]
 800adcc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800adce:	441a      	add	r2, r3
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	605a      	str	r2, [r3, #4]
 800add4:	68fa      	ldr	r2, [r7, #12]
 800add6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800add8:	429a      	cmp	r2, r3
 800adda:	d20b      	bcs.n	800adf4 <mg_http_parse+0xb4>
 800addc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800adde:	68f8      	ldr	r0, [r7, #12]
 800ade0:	f7ff fe45 	bl	800aa6e <clen>
 800ade4:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800ade6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d1e9      	bne.n	800adc0 <mg_http_parse+0x80>
  while (s < end && s[0] == ' ') s++;  // Skip spaces
 800adec:	e002      	b.n	800adf4 <mg_http_parse+0xb4>
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	3301      	adds	r3, #1
 800adf2:	60fb      	str	r3, [r7, #12]
 800adf4:	68fa      	ldr	r2, [r7, #12]
 800adf6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800adf8:	429a      	cmp	r2, r3
 800adfa:	d203      	bcs.n	800ae04 <mg_http_parse+0xc4>
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	781b      	ldrb	r3, [r3, #0]
 800ae00:	2b20      	cmp	r3, #32
 800ae02:	d0f4      	beq.n	800adee <mg_http_parse+0xae>
  hm->uri.buf = (char *) s;
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	68fa      	ldr	r2, [r7, #12]
 800ae08:	609a      	str	r2, [r3, #8]
  while (s < end && (n = clen(s, end)) > 0) s += n, hm->uri.len += n;
 800ae0a:	e009      	b.n	800ae20 <mg_http_parse+0xe0>
 800ae0c:	68fa      	ldr	r2, [r7, #12]
 800ae0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ae10:	4413      	add	r3, r2
 800ae12:	60fb      	str	r3, [r7, #12]
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	68da      	ldr	r2, [r3, #12]
 800ae18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ae1a:	441a      	add	r2, r3
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	60da      	str	r2, [r3, #12]
 800ae20:	68fa      	ldr	r2, [r7, #12]
 800ae22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ae24:	429a      	cmp	r2, r3
 800ae26:	d20b      	bcs.n	800ae40 <mg_http_parse+0x100>
 800ae28:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ae2a:	68f8      	ldr	r0, [r7, #12]
 800ae2c:	f7ff fe1f 	bl	800aa6e <clen>
 800ae30:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800ae32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d1e9      	bne.n	800ae0c <mg_http_parse+0xcc>
  while (s < end && s[0] == ' ') s++;  // Skip spaces
 800ae38:	e002      	b.n	800ae40 <mg_http_parse+0x100>
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	3301      	adds	r3, #1
 800ae3e:	60fb      	str	r3, [r7, #12]
 800ae40:	68fa      	ldr	r2, [r7, #12]
 800ae42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ae44:	429a      	cmp	r2, r3
 800ae46:	d203      	bcs.n	800ae50 <mg_http_parse+0x110>
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	781b      	ldrb	r3, [r3, #0]
 800ae4c:	2b20      	cmp	r3, #32
 800ae4e:	d0f4      	beq.n	800ae3a <mg_http_parse+0xfa>
  is_response = hm->method.len > 5 &&
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	685b      	ldr	r3, [r3, #4]
 800ae54:	2b05      	cmp	r3, #5
 800ae56:	d90b      	bls.n	800ae70 <mg_http_parse+0x130>
                (mg_ncasecmp(hm->method.buf, "HTTP/", 5) == 0);
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	2205      	movs	r2, #5
 800ae5e:	4992      	ldr	r1, [pc, #584]	@ (800b0a8 <mg_http_parse+0x368>)
 800ae60:	4618      	mov	r0, r3
 800ae62:	f7ff fb22 	bl	800a4aa <mg_ncasecmp>
 800ae66:	4603      	mov	r3, r0
  is_response = hm->method.len > 5 &&
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d101      	bne.n	800ae70 <mg_http_parse+0x130>
 800ae6c:	2301      	movs	r3, #1
 800ae6e:	e000      	b.n	800ae72 <mg_http_parse+0x132>
 800ae70:	2300      	movs	r3, #0
 800ae72:	63bb      	str	r3, [r7, #56]	@ 0x38
  if ((s = skiptorn(s, end, &hm->proto)) == NULL) return false;
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	3318      	adds	r3, #24
 800ae78:	461a      	mov	r2, r3
 800ae7a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ae7c:	68f8      	ldr	r0, [r7, #12]
 800ae7e:	f7ff fe65 	bl	800ab4c <skiptorn>
 800ae82:	60f8      	str	r0, [r7, #12]
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d101      	bne.n	800ae8e <mg_http_parse+0x14e>
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	e107      	b.n	800b09e <mg_http_parse+0x35e>
  // If we're given a version, check that it is HTTP/x.x
  version_prefix_valid = hm->proto.len > 5 &&
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	69db      	ldr	r3, [r3, #28]
 800ae92:	2b05      	cmp	r3, #5
 800ae94:	d90b      	bls.n	800aeae <mg_http_parse+0x16e>
                         (mg_ncasecmp(hm->proto.buf, "HTTP/", 5) == 0);
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	699b      	ldr	r3, [r3, #24]
 800ae9a:	2205      	movs	r2, #5
 800ae9c:	4982      	ldr	r1, [pc, #520]	@ (800b0a8 <mg_http_parse+0x368>)
 800ae9e:	4618      	mov	r0, r3
 800aea0:	f7ff fb03 	bl	800a4aa <mg_ncasecmp>
 800aea4:	4603      	mov	r3, r0
  version_prefix_valid = hm->proto.len > 5 &&
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d101      	bne.n	800aeae <mg_http_parse+0x16e>
 800aeaa:	2301      	movs	r3, #1
 800aeac:	e000      	b.n	800aeb0 <mg_http_parse+0x170>
 800aeae:	2300      	movs	r3, #0
 800aeb0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800aeb4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800aeb8:	f003 0301 	and.w	r3, r3, #1
 800aebc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (!is_response && hm->proto.len > 0 &&
 800aec0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d12f      	bne.n	800af26 <mg_http_parse+0x1e6>
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	69db      	ldr	r3, [r3, #28]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d02b      	beq.n	800af26 <mg_http_parse+0x1e6>
    (!version_prefix_valid || hm->proto.len != 8 ||
 800aece:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800aed2:	f083 0301 	eor.w	r3, r3, #1
 800aed6:	b2db      	uxtb	r3, r3
  if (!is_response && hm->proto.len > 0 &&
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d121      	bne.n	800af20 <mg_http_parse+0x1e0>
    (!version_prefix_valid || hm->proto.len != 8 ||
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	69db      	ldr	r3, [r3, #28]
 800aee0:	2b08      	cmp	r3, #8
 800aee2:	d11d      	bne.n	800af20 <mg_http_parse+0x1e0>
    (hm->proto.buf[5] < '0' || hm->proto.buf[5] > '9') ||
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	699b      	ldr	r3, [r3, #24]
 800aee8:	3305      	adds	r3, #5
 800aeea:	781b      	ldrb	r3, [r3, #0]
    (!version_prefix_valid || hm->proto.len != 8 ||
 800aeec:	2b2f      	cmp	r3, #47	@ 0x2f
 800aeee:	d917      	bls.n	800af20 <mg_http_parse+0x1e0>
    (hm->proto.buf[5] < '0' || hm->proto.buf[5] > '9') ||
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	699b      	ldr	r3, [r3, #24]
 800aef4:	3305      	adds	r3, #5
 800aef6:	781b      	ldrb	r3, [r3, #0]
 800aef8:	2b39      	cmp	r3, #57	@ 0x39
 800aefa:	d811      	bhi.n	800af20 <mg_http_parse+0x1e0>
    (hm->proto.buf[6] != '.') ||
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	699b      	ldr	r3, [r3, #24]
 800af00:	3306      	adds	r3, #6
 800af02:	781b      	ldrb	r3, [r3, #0]
    (hm->proto.buf[5] < '0' || hm->proto.buf[5] > '9') ||
 800af04:	2b2e      	cmp	r3, #46	@ 0x2e
 800af06:	d10b      	bne.n	800af20 <mg_http_parse+0x1e0>
    (hm->proto.buf[7] < '0' || hm->proto.buf[7] > '9'))) {
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	699b      	ldr	r3, [r3, #24]
 800af0c:	3307      	adds	r3, #7
 800af0e:	781b      	ldrb	r3, [r3, #0]
    (hm->proto.buf[6] != '.') ||
 800af10:	2b2f      	cmp	r3, #47	@ 0x2f
 800af12:	d905      	bls.n	800af20 <mg_http_parse+0x1e0>
    (hm->proto.buf[7] < '0' || hm->proto.buf[7] > '9'))) {
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	699b      	ldr	r3, [r3, #24]
 800af18:	3307      	adds	r3, #7
 800af1a:	781b      	ldrb	r3, [r3, #0]
 800af1c:	2b39      	cmp	r3, #57	@ 0x39
 800af1e:	d902      	bls.n	800af26 <mg_http_parse+0x1e6>
    return -1;
 800af20:	f04f 33ff 	mov.w	r3, #4294967295
 800af24:	e0bb      	b.n	800b09e <mg_http_parse+0x35e>
  }

  // If URI contains '?' character, setup query string
  if ((qs = (const char *) memchr(hm->uri.buf, '?', hm->uri.len)) != NULL) {
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	6898      	ldr	r0, [r3, #8]
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	68db      	ldr	r3, [r3, #12]
 800af2e:	461a      	mov	r2, r3
 800af30:	213f      	movs	r1, #63	@ 0x3f
 800af32:	f7f5 f9fd 	bl	8000330 <memchr>
 800af36:	6338      	str	r0, [r7, #48]	@ 0x30
 800af38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d015      	beq.n	800af6a <mg_http_parse+0x22a>
    hm->query.buf = (char *) qs + 1;
 800af3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af40:	1c5a      	adds	r2, r3, #1
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	611a      	str	r2, [r3, #16]
    hm->query.len = (size_t) (&hm->uri.buf[hm->uri.len] - (qs + 1));
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	689a      	ldr	r2, [r3, #8]
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	68db      	ldr	r3, [r3, #12]
 800af4e:	441a      	add	r2, r3
 800af50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af52:	3301      	adds	r3, #1
 800af54:	1ad3      	subs	r3, r2, r3
 800af56:	461a      	mov	r2, r3
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	615a      	str	r2, [r3, #20]
    hm->uri.len = (size_t) (qs - hm->uri.buf);
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	689b      	ldr	r3, [r3, #8]
 800af60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800af62:	1ad3      	subs	r3, r2, r3
 800af64:	461a      	mov	r2, r3
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	60da      	str	r2, [r3, #12]
  }

  // Sanity check. Allow protocol/reason to be empty
  // Do this check after hm->method.len and hm->uri.len are finalised
  if (hm->method.len == 0 || hm->uri.len == 0) return -1;
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	685b      	ldr	r3, [r3, #4]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d003      	beq.n	800af7a <mg_http_parse+0x23a>
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	68db      	ldr	r3, [r3, #12]
 800af76:	2b00      	cmp	r3, #0
 800af78:	d102      	bne.n	800af80 <mg_http_parse+0x240>
 800af7a:	f04f 33ff 	mov.w	r3, #4294967295
 800af7e:	e08e      	b.n	800b09e <mg_http_parse+0x35e>

  if (!mg_http_parse_headers(s, end, hm->headers,
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	f103 0220 	add.w	r2, r3, #32
 800af86:	231e      	movs	r3, #30
 800af88:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800af8a:	68f8      	ldr	r0, [r7, #12]
 800af8c:	f7ff fe29 	bl	800abe2 <mg_http_parse_headers>
 800af90:	4603      	mov	r3, r0
 800af92:	f083 0301 	eor.w	r3, r3, #1
 800af96:	b2db      	uxtb	r3, r3
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d002      	beq.n	800afa2 <mg_http_parse+0x262>
                             sizeof(hm->headers) / sizeof(hm->headers[0])))
    return -1;  // error when parsing
 800af9c:	f04f 33ff 	mov.w	r3, #4294967295
 800afa0:	e07d      	b.n	800b09e <mg_http_parse+0x35e>
  if ((cl = mg_http_get_header(hm, "Content-Length")) != NULL) {
 800afa2:	4942      	ldr	r1, [pc, #264]	@ (800b0ac <mg_http_parse+0x36c>)
 800afa4:	6878      	ldr	r0, [r7, #4]
 800afa6:	f7ff fd0f 	bl	800a9c8 <mg_http_get_header>
 800afaa:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800afac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d018      	beq.n	800afe4 <mg_http_parse+0x2a4>
    if (mg_to_size_t(*cl, &hm->body.len) == false) return -1;
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	f503 7201 	add.w	r2, r3, #516	@ 0x204
 800afb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afba:	e893 0003 	ldmia.w	r3, {r0, r1}
 800afbe:	f7ff fab5 	bl	800a52c <mg_to_size_t>
 800afc2:	4603      	mov	r3, r0
 800afc4:	f083 0301 	eor.w	r3, r3, #1
 800afc8:	b2db      	uxtb	r3, r3
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d002      	beq.n	800afd4 <mg_http_parse+0x294>
 800afce:	f04f 33ff 	mov.w	r3, #4294967295
 800afd2:	e064      	b.n	800b09e <mg_http_parse+0x35e>
    hm->message.len = (size_t) req_len + hm->body.len;
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800afda:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800afdc:	441a      	add	r2, r3
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  // Therefore, if Content-Length is not specified and methods are
  // not one of PUT or POST, set body length to 0.
  //
  // So, if it is HTTP request, and Content-Length is not set,
  // and method is not (PUT or POST) then reset body length to zero.
  if (hm->body.len == (size_t) ~0 && !is_response &&
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800afea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afee:	d12a      	bne.n	800b046 <mg_http_parse+0x306>
 800aff0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d127      	bne.n	800b046 <mg_http_parse+0x306>
      mg_strcasecmp(hm->method, mg_str("PUT")) != 0 &&
 800aff6:	f107 0314 	add.w	r3, r7, #20
 800affa:	492d      	ldr	r1, [pc, #180]	@ (800b0b0 <mg_http_parse+0x370>)
 800affc:	4618      	mov	r0, r3
 800affe:	f00b fc51 	bl	80168a4 <mg_str_s>
 800b002:	6879      	ldr	r1, [r7, #4]
 800b004:	f107 0314 	add.w	r3, r7, #20
 800b008:	cb0c      	ldmia	r3, {r2, r3}
 800b00a:	c903      	ldmia	r1, {r0, r1}
 800b00c:	f00b fd0d 	bl	8016a2a <mg_strcasecmp>
 800b010:	4603      	mov	r3, r0
  if (hm->body.len == (size_t) ~0 && !is_response &&
 800b012:	2b00      	cmp	r3, #0
 800b014:	d017      	beq.n	800b046 <mg_http_parse+0x306>
      mg_strcasecmp(hm->method, mg_str("POST")) != 0) {
 800b016:	f107 031c 	add.w	r3, r7, #28
 800b01a:	4926      	ldr	r1, [pc, #152]	@ (800b0b4 <mg_http_parse+0x374>)
 800b01c:	4618      	mov	r0, r3
 800b01e:	f00b fc41 	bl	80168a4 <mg_str_s>
 800b022:	6879      	ldr	r1, [r7, #4]
 800b024:	f107 031c 	add.w	r3, r7, #28
 800b028:	cb0c      	ldmia	r3, {r2, r3}
 800b02a:	c903      	ldmia	r1, {r0, r1}
 800b02c:	f00b fcfd 	bl	8016a2a <mg_strcasecmp>
 800b030:	4603      	mov	r3, r0
      mg_strcasecmp(hm->method, mg_str("PUT")) != 0 &&
 800b032:	2b00      	cmp	r3, #0
 800b034:	d007      	beq.n	800b046 <mg_http_parse+0x306>
    hm->body.len = 0;
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	2200      	movs	r2, #0
 800b03a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    hm->message.len = (size_t) req_len;
 800b03e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  }

  // The 204 (No content) responses also have 0 body length
  if (hm->body.len == (size_t) ~0 && is_response &&
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800b04c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b050:	d11b      	bne.n	800b08a <mg_http_parse+0x34a>
 800b052:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b054:	2b00      	cmp	r3, #0
 800b056:	d018      	beq.n	800b08a <mg_http_parse+0x34a>
      mg_strcasecmp(hm->uri, mg_str("204")) == 0) {
 800b058:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b05c:	4916      	ldr	r1, [pc, #88]	@ (800b0b8 <mg_http_parse+0x378>)
 800b05e:	4618      	mov	r0, r3
 800b060:	f00b fc20 	bl	80168a4 <mg_str_s>
 800b064:	6879      	ldr	r1, [r7, #4]
 800b066:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b06a:	cb0c      	ldmia	r3, {r2, r3}
 800b06c:	3108      	adds	r1, #8
 800b06e:	c903      	ldmia	r1, {r0, r1}
 800b070:	f00b fcdb 	bl	8016a2a <mg_strcasecmp>
 800b074:	4603      	mov	r3, r0
  if (hm->body.len == (size_t) ~0 && is_response &&
 800b076:	2b00      	cmp	r3, #0
 800b078:	d107      	bne.n	800b08a <mg_http_parse+0x34a>
    hm->body.len = 0;
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	2200      	movs	r2, #0
 800b07e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    hm->message.len = (size_t) req_len;
 800b082:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  }
  if (hm->message.len < (size_t) req_len) return -1;  // Overflow protection
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800b090:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b092:	429a      	cmp	r2, r3
 800b094:	d202      	bcs.n	800b09c <mg_http_parse+0x35c>
 800b096:	f04f 33ff 	mov.w	r3, #4294967295
 800b09a:	e000      	b.n	800b09e <mg_http_parse+0x35e>

  return req_len;
 800b09c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800b09e:	4618      	mov	r0, r3
 800b0a0:	3748      	adds	r7, #72	@ 0x48
 800b0a2:	46bd      	mov	sp, r7
 800b0a4:	bd80      	pop	{r7, pc}
 800b0a6:	bf00      	nop
 800b0a8:	08029f98 	.word	0x08029f98
 800b0ac:	08029fa0 	.word	0x08029fa0
 800b0b0:	08029fb0 	.word	0x08029fb0
 800b0b4:	08029fb4 	.word	0x08029fb4
 800b0b8:	08029fbc 	.word	0x08029fbc

0800b0bc <mg_http_status_code_str>:
  mg_send(c, "\r\n", 2);
  if (len == 0) c->is_resp = 0;
}

// clang-format off
static const char *mg_http_status_code_str(int status_code) {
 800b0bc:	b480      	push	{r7}
 800b0be:	b083      	sub	sp, #12
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	6078      	str	r0, [r7, #4]
  switch (status_code) {
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	3b64      	subs	r3, #100	@ 0x64
 800b0c8:	f240 12f3 	movw	r2, #499	@ 0x1f3
 800b0cc:	4293      	cmp	r3, r2
 800b0ce:	f200 8469 	bhi.w	800b9a4 <mg_http_status_code_str+0x8e8>
 800b0d2:	a101      	add	r1, pc, #4	@ (adr r1, 800b0d8 <mg_http_status_code_str+0x1c>)
 800b0d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b0d8:	0800b8a9 	.word	0x0800b8a9
 800b0dc:	0800b8ad 	.word	0x0800b8ad
 800b0e0:	0800b8b1 	.word	0x0800b8b1
 800b0e4:	0800b9a5 	.word	0x0800b9a5
 800b0e8:	0800b9a5 	.word	0x0800b9a5
 800b0ec:	0800b9a5 	.word	0x0800b9a5
 800b0f0:	0800b9a5 	.word	0x0800b9a5
 800b0f4:	0800b9a5 	.word	0x0800b9a5
 800b0f8:	0800b9a5 	.word	0x0800b9a5
 800b0fc:	0800b9a5 	.word	0x0800b9a5
 800b100:	0800b9a5 	.word	0x0800b9a5
 800b104:	0800b9a5 	.word	0x0800b9a5
 800b108:	0800b9a5 	.word	0x0800b9a5
 800b10c:	0800b9a5 	.word	0x0800b9a5
 800b110:	0800b9a5 	.word	0x0800b9a5
 800b114:	0800b9a5 	.word	0x0800b9a5
 800b118:	0800b9a5 	.word	0x0800b9a5
 800b11c:	0800b9a5 	.word	0x0800b9a5
 800b120:	0800b9a5 	.word	0x0800b9a5
 800b124:	0800b9a5 	.word	0x0800b9a5
 800b128:	0800b9a5 	.word	0x0800b9a5
 800b12c:	0800b9a5 	.word	0x0800b9a5
 800b130:	0800b9a5 	.word	0x0800b9a5
 800b134:	0800b9a5 	.word	0x0800b9a5
 800b138:	0800b9a5 	.word	0x0800b9a5
 800b13c:	0800b9a5 	.word	0x0800b9a5
 800b140:	0800b9a5 	.word	0x0800b9a5
 800b144:	0800b9a5 	.word	0x0800b9a5
 800b148:	0800b9a5 	.word	0x0800b9a5
 800b14c:	0800b9a5 	.word	0x0800b9a5
 800b150:	0800b9a5 	.word	0x0800b9a5
 800b154:	0800b9a5 	.word	0x0800b9a5
 800b158:	0800b9a5 	.word	0x0800b9a5
 800b15c:	0800b9a5 	.word	0x0800b9a5
 800b160:	0800b9a5 	.word	0x0800b9a5
 800b164:	0800b9a5 	.word	0x0800b9a5
 800b168:	0800b9a5 	.word	0x0800b9a5
 800b16c:	0800b9a5 	.word	0x0800b9a5
 800b170:	0800b9a5 	.word	0x0800b9a5
 800b174:	0800b9a5 	.word	0x0800b9a5
 800b178:	0800b9a5 	.word	0x0800b9a5
 800b17c:	0800b9a5 	.word	0x0800b9a5
 800b180:	0800b9a5 	.word	0x0800b9a5
 800b184:	0800b9a5 	.word	0x0800b9a5
 800b188:	0800b9a5 	.word	0x0800b9a5
 800b18c:	0800b9a5 	.word	0x0800b9a5
 800b190:	0800b9a5 	.word	0x0800b9a5
 800b194:	0800b9a5 	.word	0x0800b9a5
 800b198:	0800b9a5 	.word	0x0800b9a5
 800b19c:	0800b9a5 	.word	0x0800b9a5
 800b1a0:	0800b9a5 	.word	0x0800b9a5
 800b1a4:	0800b9a5 	.word	0x0800b9a5
 800b1a8:	0800b9a5 	.word	0x0800b9a5
 800b1ac:	0800b9a5 	.word	0x0800b9a5
 800b1b0:	0800b9a5 	.word	0x0800b9a5
 800b1b4:	0800b9a5 	.word	0x0800b9a5
 800b1b8:	0800b9a5 	.word	0x0800b9a5
 800b1bc:	0800b9a5 	.word	0x0800b9a5
 800b1c0:	0800b9a5 	.word	0x0800b9a5
 800b1c4:	0800b9a5 	.word	0x0800b9a5
 800b1c8:	0800b9a5 	.word	0x0800b9a5
 800b1cc:	0800b9a5 	.word	0x0800b9a5
 800b1d0:	0800b9a5 	.word	0x0800b9a5
 800b1d4:	0800b9a5 	.word	0x0800b9a5
 800b1d8:	0800b9a5 	.word	0x0800b9a5
 800b1dc:	0800b9a5 	.word	0x0800b9a5
 800b1e0:	0800b9a5 	.word	0x0800b9a5
 800b1e4:	0800b9a5 	.word	0x0800b9a5
 800b1e8:	0800b9a5 	.word	0x0800b9a5
 800b1ec:	0800b9a5 	.word	0x0800b9a5
 800b1f0:	0800b9a5 	.word	0x0800b9a5
 800b1f4:	0800b9a5 	.word	0x0800b9a5
 800b1f8:	0800b9a5 	.word	0x0800b9a5
 800b1fc:	0800b9a5 	.word	0x0800b9a5
 800b200:	0800b9a5 	.word	0x0800b9a5
 800b204:	0800b9a5 	.word	0x0800b9a5
 800b208:	0800b9a5 	.word	0x0800b9a5
 800b20c:	0800b9a5 	.word	0x0800b9a5
 800b210:	0800b9a5 	.word	0x0800b9a5
 800b214:	0800b9a5 	.word	0x0800b9a5
 800b218:	0800b9a5 	.word	0x0800b9a5
 800b21c:	0800b9a5 	.word	0x0800b9a5
 800b220:	0800b9a5 	.word	0x0800b9a5
 800b224:	0800b9a5 	.word	0x0800b9a5
 800b228:	0800b9a5 	.word	0x0800b9a5
 800b22c:	0800b9a5 	.word	0x0800b9a5
 800b230:	0800b9a5 	.word	0x0800b9a5
 800b234:	0800b9a5 	.word	0x0800b9a5
 800b238:	0800b9a5 	.word	0x0800b9a5
 800b23c:	0800b9a5 	.word	0x0800b9a5
 800b240:	0800b9a5 	.word	0x0800b9a5
 800b244:	0800b9a5 	.word	0x0800b9a5
 800b248:	0800b9a5 	.word	0x0800b9a5
 800b24c:	0800b9a5 	.word	0x0800b9a5
 800b250:	0800b9a5 	.word	0x0800b9a5
 800b254:	0800b9a5 	.word	0x0800b9a5
 800b258:	0800b9a5 	.word	0x0800b9a5
 800b25c:	0800b9a5 	.word	0x0800b9a5
 800b260:	0800b9a5 	.word	0x0800b9a5
 800b264:	0800b9a5 	.word	0x0800b9a5
 800b268:	0800b8b5 	.word	0x0800b8b5
 800b26c:	0800b8b9 	.word	0x0800b8b9
 800b270:	0800b8bd 	.word	0x0800b8bd
 800b274:	0800b8c1 	.word	0x0800b8c1
 800b278:	0800b8c5 	.word	0x0800b8c5
 800b27c:	0800b8c9 	.word	0x0800b8c9
 800b280:	0800b8cd 	.word	0x0800b8cd
 800b284:	0800b8d1 	.word	0x0800b8d1
 800b288:	0800b8d5 	.word	0x0800b8d5
 800b28c:	0800b9a5 	.word	0x0800b9a5
 800b290:	0800b9a5 	.word	0x0800b9a5
 800b294:	0800b9a5 	.word	0x0800b9a5
 800b298:	0800b9a5 	.word	0x0800b9a5
 800b29c:	0800b9a5 	.word	0x0800b9a5
 800b2a0:	0800b9a5 	.word	0x0800b9a5
 800b2a4:	0800b9a5 	.word	0x0800b9a5
 800b2a8:	0800b9a5 	.word	0x0800b9a5
 800b2ac:	0800b9a5 	.word	0x0800b9a5
 800b2b0:	0800b9a5 	.word	0x0800b9a5
 800b2b4:	0800b9a5 	.word	0x0800b9a5
 800b2b8:	0800b9a5 	.word	0x0800b9a5
 800b2bc:	0800b9a5 	.word	0x0800b9a5
 800b2c0:	0800b9a5 	.word	0x0800b9a5
 800b2c4:	0800b9a5 	.word	0x0800b9a5
 800b2c8:	0800b9a5 	.word	0x0800b9a5
 800b2cc:	0800b9a5 	.word	0x0800b9a5
 800b2d0:	0800b8d9 	.word	0x0800b8d9
 800b2d4:	0800b9a5 	.word	0x0800b9a5
 800b2d8:	0800b9a5 	.word	0x0800b9a5
 800b2dc:	0800b9a5 	.word	0x0800b9a5
 800b2e0:	0800b9a5 	.word	0x0800b9a5
 800b2e4:	0800b9a5 	.word	0x0800b9a5
 800b2e8:	0800b9a5 	.word	0x0800b9a5
 800b2ec:	0800b9a5 	.word	0x0800b9a5
 800b2f0:	0800b9a5 	.word	0x0800b9a5
 800b2f4:	0800b9a5 	.word	0x0800b9a5
 800b2f8:	0800b9a5 	.word	0x0800b9a5
 800b2fc:	0800b9a5 	.word	0x0800b9a5
 800b300:	0800b9a5 	.word	0x0800b9a5
 800b304:	0800b9a5 	.word	0x0800b9a5
 800b308:	0800b9a5 	.word	0x0800b9a5
 800b30c:	0800b9a5 	.word	0x0800b9a5
 800b310:	0800b9a5 	.word	0x0800b9a5
 800b314:	0800b9a5 	.word	0x0800b9a5
 800b318:	0800b9a5 	.word	0x0800b9a5
 800b31c:	0800b9a5 	.word	0x0800b9a5
 800b320:	0800b9a5 	.word	0x0800b9a5
 800b324:	0800b9a5 	.word	0x0800b9a5
 800b328:	0800b9a5 	.word	0x0800b9a5
 800b32c:	0800b9a5 	.word	0x0800b9a5
 800b330:	0800b9a5 	.word	0x0800b9a5
 800b334:	0800b9a5 	.word	0x0800b9a5
 800b338:	0800b9a5 	.word	0x0800b9a5
 800b33c:	0800b9a5 	.word	0x0800b9a5
 800b340:	0800b9a5 	.word	0x0800b9a5
 800b344:	0800b9a5 	.word	0x0800b9a5
 800b348:	0800b9a5 	.word	0x0800b9a5
 800b34c:	0800b9a5 	.word	0x0800b9a5
 800b350:	0800b9a5 	.word	0x0800b9a5
 800b354:	0800b9a5 	.word	0x0800b9a5
 800b358:	0800b9a5 	.word	0x0800b9a5
 800b35c:	0800b9a5 	.word	0x0800b9a5
 800b360:	0800b9a5 	.word	0x0800b9a5
 800b364:	0800b9a5 	.word	0x0800b9a5
 800b368:	0800b9a5 	.word	0x0800b9a5
 800b36c:	0800b9a5 	.word	0x0800b9a5
 800b370:	0800b9a5 	.word	0x0800b9a5
 800b374:	0800b9a5 	.word	0x0800b9a5
 800b378:	0800b9a5 	.word	0x0800b9a5
 800b37c:	0800b9a5 	.word	0x0800b9a5
 800b380:	0800b9a5 	.word	0x0800b9a5
 800b384:	0800b9a5 	.word	0x0800b9a5
 800b388:	0800b9a5 	.word	0x0800b9a5
 800b38c:	0800b9a5 	.word	0x0800b9a5
 800b390:	0800b9a5 	.word	0x0800b9a5
 800b394:	0800b9a5 	.word	0x0800b9a5
 800b398:	0800b9a5 	.word	0x0800b9a5
 800b39c:	0800b9a5 	.word	0x0800b9a5
 800b3a0:	0800b9a5 	.word	0x0800b9a5
 800b3a4:	0800b9a5 	.word	0x0800b9a5
 800b3a8:	0800b9a5 	.word	0x0800b9a5
 800b3ac:	0800b9a5 	.word	0x0800b9a5
 800b3b0:	0800b9a5 	.word	0x0800b9a5
 800b3b4:	0800b9a5 	.word	0x0800b9a5
 800b3b8:	0800b9a5 	.word	0x0800b9a5
 800b3bc:	0800b9a5 	.word	0x0800b9a5
 800b3c0:	0800b9a5 	.word	0x0800b9a5
 800b3c4:	0800b9a5 	.word	0x0800b9a5
 800b3c8:	0800b9a5 	.word	0x0800b9a5
 800b3cc:	0800b9a5 	.word	0x0800b9a5
 800b3d0:	0800b9a5 	.word	0x0800b9a5
 800b3d4:	0800b9a5 	.word	0x0800b9a5
 800b3d8:	0800b9a5 	.word	0x0800b9a5
 800b3dc:	0800b9a5 	.word	0x0800b9a5
 800b3e0:	0800b9a5 	.word	0x0800b9a5
 800b3e4:	0800b9a5 	.word	0x0800b9a5
 800b3e8:	0800b9a5 	.word	0x0800b9a5
 800b3ec:	0800b9a5 	.word	0x0800b9a5
 800b3f0:	0800b9a5 	.word	0x0800b9a5
 800b3f4:	0800b9a5 	.word	0x0800b9a5
 800b3f8:	0800b8dd 	.word	0x0800b8dd
 800b3fc:	0800b8e1 	.word	0x0800b8e1
 800b400:	0800b8e5 	.word	0x0800b8e5
 800b404:	0800b8e9 	.word	0x0800b8e9
 800b408:	0800b8ed 	.word	0x0800b8ed
 800b40c:	0800b8f1 	.word	0x0800b8f1
 800b410:	0800b9a5 	.word	0x0800b9a5
 800b414:	0800b8f5 	.word	0x0800b8f5
 800b418:	0800b8f9 	.word	0x0800b8f9
 800b41c:	0800b9a5 	.word	0x0800b9a5
 800b420:	0800b9a5 	.word	0x0800b9a5
 800b424:	0800b9a5 	.word	0x0800b9a5
 800b428:	0800b9a5 	.word	0x0800b9a5
 800b42c:	0800b9a5 	.word	0x0800b9a5
 800b430:	0800b9a5 	.word	0x0800b9a5
 800b434:	0800b9a5 	.word	0x0800b9a5
 800b438:	0800b9a5 	.word	0x0800b9a5
 800b43c:	0800b9a5 	.word	0x0800b9a5
 800b440:	0800b9a5 	.word	0x0800b9a5
 800b444:	0800b9a5 	.word	0x0800b9a5
 800b448:	0800b9a5 	.word	0x0800b9a5
 800b44c:	0800b9a5 	.word	0x0800b9a5
 800b450:	0800b9a5 	.word	0x0800b9a5
 800b454:	0800b9a5 	.word	0x0800b9a5
 800b458:	0800b9a5 	.word	0x0800b9a5
 800b45c:	0800b9a5 	.word	0x0800b9a5
 800b460:	0800b9a5 	.word	0x0800b9a5
 800b464:	0800b9a5 	.word	0x0800b9a5
 800b468:	0800b9a5 	.word	0x0800b9a5
 800b46c:	0800b9a5 	.word	0x0800b9a5
 800b470:	0800b9a5 	.word	0x0800b9a5
 800b474:	0800b9a5 	.word	0x0800b9a5
 800b478:	0800b9a5 	.word	0x0800b9a5
 800b47c:	0800b9a5 	.word	0x0800b9a5
 800b480:	0800b9a5 	.word	0x0800b9a5
 800b484:	0800b9a5 	.word	0x0800b9a5
 800b488:	0800b9a5 	.word	0x0800b9a5
 800b48c:	0800b9a5 	.word	0x0800b9a5
 800b490:	0800b9a5 	.word	0x0800b9a5
 800b494:	0800b9a5 	.word	0x0800b9a5
 800b498:	0800b9a5 	.word	0x0800b9a5
 800b49c:	0800b9a5 	.word	0x0800b9a5
 800b4a0:	0800b9a5 	.word	0x0800b9a5
 800b4a4:	0800b9a5 	.word	0x0800b9a5
 800b4a8:	0800b9a5 	.word	0x0800b9a5
 800b4ac:	0800b9a5 	.word	0x0800b9a5
 800b4b0:	0800b9a5 	.word	0x0800b9a5
 800b4b4:	0800b9a5 	.word	0x0800b9a5
 800b4b8:	0800b9a5 	.word	0x0800b9a5
 800b4bc:	0800b9a5 	.word	0x0800b9a5
 800b4c0:	0800b9a5 	.word	0x0800b9a5
 800b4c4:	0800b9a5 	.word	0x0800b9a5
 800b4c8:	0800b9a5 	.word	0x0800b9a5
 800b4cc:	0800b9a5 	.word	0x0800b9a5
 800b4d0:	0800b9a5 	.word	0x0800b9a5
 800b4d4:	0800b9a5 	.word	0x0800b9a5
 800b4d8:	0800b9a5 	.word	0x0800b9a5
 800b4dc:	0800b9a5 	.word	0x0800b9a5
 800b4e0:	0800b9a5 	.word	0x0800b9a5
 800b4e4:	0800b9a5 	.word	0x0800b9a5
 800b4e8:	0800b9a5 	.word	0x0800b9a5
 800b4ec:	0800b9a5 	.word	0x0800b9a5
 800b4f0:	0800b9a5 	.word	0x0800b9a5
 800b4f4:	0800b9a5 	.word	0x0800b9a5
 800b4f8:	0800b9a5 	.word	0x0800b9a5
 800b4fc:	0800b9a5 	.word	0x0800b9a5
 800b500:	0800b9a5 	.word	0x0800b9a5
 800b504:	0800b9a5 	.word	0x0800b9a5
 800b508:	0800b9a5 	.word	0x0800b9a5
 800b50c:	0800b9a5 	.word	0x0800b9a5
 800b510:	0800b9a5 	.word	0x0800b9a5
 800b514:	0800b9a5 	.word	0x0800b9a5
 800b518:	0800b9a5 	.word	0x0800b9a5
 800b51c:	0800b9a5 	.word	0x0800b9a5
 800b520:	0800b9a5 	.word	0x0800b9a5
 800b524:	0800b9a5 	.word	0x0800b9a5
 800b528:	0800b9a5 	.word	0x0800b9a5
 800b52c:	0800b9a5 	.word	0x0800b9a5
 800b530:	0800b9a5 	.word	0x0800b9a5
 800b534:	0800b9a5 	.word	0x0800b9a5
 800b538:	0800b9a5 	.word	0x0800b9a5
 800b53c:	0800b9a5 	.word	0x0800b9a5
 800b540:	0800b9a5 	.word	0x0800b9a5
 800b544:	0800b9a5 	.word	0x0800b9a5
 800b548:	0800b9a5 	.word	0x0800b9a5
 800b54c:	0800b9a5 	.word	0x0800b9a5
 800b550:	0800b9a5 	.word	0x0800b9a5
 800b554:	0800b9a5 	.word	0x0800b9a5
 800b558:	0800b9a5 	.word	0x0800b9a5
 800b55c:	0800b9a5 	.word	0x0800b9a5
 800b560:	0800b9a5 	.word	0x0800b9a5
 800b564:	0800b9a5 	.word	0x0800b9a5
 800b568:	0800b9a5 	.word	0x0800b9a5
 800b56c:	0800b9a5 	.word	0x0800b9a5
 800b570:	0800b9a5 	.word	0x0800b9a5
 800b574:	0800b9a5 	.word	0x0800b9a5
 800b578:	0800b9a5 	.word	0x0800b9a5
 800b57c:	0800b9a5 	.word	0x0800b9a5
 800b580:	0800b9a5 	.word	0x0800b9a5
 800b584:	0800b9a5 	.word	0x0800b9a5
 800b588:	0800b8fd 	.word	0x0800b8fd
 800b58c:	0800b901 	.word	0x0800b901
 800b590:	0800b905 	.word	0x0800b905
 800b594:	0800b909 	.word	0x0800b909
 800b598:	0800b90d 	.word	0x0800b90d
 800b59c:	0800b911 	.word	0x0800b911
 800b5a0:	0800b915 	.word	0x0800b915
 800b5a4:	0800b919 	.word	0x0800b919
 800b5a8:	0800b91d 	.word	0x0800b91d
 800b5ac:	0800b921 	.word	0x0800b921
 800b5b0:	0800b925 	.word	0x0800b925
 800b5b4:	0800b929 	.word	0x0800b929
 800b5b8:	0800b92d 	.word	0x0800b92d
 800b5bc:	0800b931 	.word	0x0800b931
 800b5c0:	0800b935 	.word	0x0800b935
 800b5c4:	0800b939 	.word	0x0800b939
 800b5c8:	0800b93d 	.word	0x0800b93d
 800b5cc:	0800b941 	.word	0x0800b941
 800b5d0:	0800b945 	.word	0x0800b945
 800b5d4:	0800b9a5 	.word	0x0800b9a5
 800b5d8:	0800b9a5 	.word	0x0800b9a5
 800b5dc:	0800b949 	.word	0x0800b949
 800b5e0:	0800b94d 	.word	0x0800b94d
 800b5e4:	0800b951 	.word	0x0800b951
 800b5e8:	0800b955 	.word	0x0800b955
 800b5ec:	0800b9a5 	.word	0x0800b9a5
 800b5f0:	0800b959 	.word	0x0800b959
 800b5f4:	0800b9a5 	.word	0x0800b9a5
 800b5f8:	0800b95d 	.word	0x0800b95d
 800b5fc:	0800b961 	.word	0x0800b961
 800b600:	0800b9a5 	.word	0x0800b9a5
 800b604:	0800b965 	.word	0x0800b965
 800b608:	0800b9a5 	.word	0x0800b9a5
 800b60c:	0800b9a5 	.word	0x0800b9a5
 800b610:	0800b9a5 	.word	0x0800b9a5
 800b614:	0800b9a5 	.word	0x0800b9a5
 800b618:	0800b9a5 	.word	0x0800b9a5
 800b61c:	0800b9a5 	.word	0x0800b9a5
 800b620:	0800b9a5 	.word	0x0800b9a5
 800b624:	0800b9a5 	.word	0x0800b9a5
 800b628:	0800b9a5 	.word	0x0800b9a5
 800b62c:	0800b9a5 	.word	0x0800b9a5
 800b630:	0800b9a5 	.word	0x0800b9a5
 800b634:	0800b9a5 	.word	0x0800b9a5
 800b638:	0800b969 	.word	0x0800b969
 800b63c:	0800b9a5 	.word	0x0800b9a5
 800b640:	0800b9a5 	.word	0x0800b9a5
 800b644:	0800b9a5 	.word	0x0800b9a5
 800b648:	0800b9a5 	.word	0x0800b9a5
 800b64c:	0800b9a5 	.word	0x0800b9a5
 800b650:	0800b9a5 	.word	0x0800b9a5
 800b654:	0800b96d 	.word	0x0800b96d
 800b658:	0800b9a5 	.word	0x0800b9a5
 800b65c:	0800b9a5 	.word	0x0800b9a5
 800b660:	0800b9a5 	.word	0x0800b9a5
 800b664:	0800b9a5 	.word	0x0800b9a5
 800b668:	0800b9a5 	.word	0x0800b9a5
 800b66c:	0800b9a5 	.word	0x0800b9a5
 800b670:	0800b9a5 	.word	0x0800b9a5
 800b674:	0800b9a5 	.word	0x0800b9a5
 800b678:	0800b9a5 	.word	0x0800b9a5
 800b67c:	0800b9a5 	.word	0x0800b9a5
 800b680:	0800b9a5 	.word	0x0800b9a5
 800b684:	0800b9a5 	.word	0x0800b9a5
 800b688:	0800b9a5 	.word	0x0800b9a5
 800b68c:	0800b9a5 	.word	0x0800b9a5
 800b690:	0800b9a5 	.word	0x0800b9a5
 800b694:	0800b9a5 	.word	0x0800b9a5
 800b698:	0800b9a5 	.word	0x0800b9a5
 800b69c:	0800b9a5 	.word	0x0800b9a5
 800b6a0:	0800b9a5 	.word	0x0800b9a5
 800b6a4:	0800b9a5 	.word	0x0800b9a5
 800b6a8:	0800b9a5 	.word	0x0800b9a5
 800b6ac:	0800b9a5 	.word	0x0800b9a5
 800b6b0:	0800b9a5 	.word	0x0800b9a5
 800b6b4:	0800b9a5 	.word	0x0800b9a5
 800b6b8:	0800b9a5 	.word	0x0800b9a5
 800b6bc:	0800b9a5 	.word	0x0800b9a5
 800b6c0:	0800b9a5 	.word	0x0800b9a5
 800b6c4:	0800b9a5 	.word	0x0800b9a5
 800b6c8:	0800b9a5 	.word	0x0800b9a5
 800b6cc:	0800b9a5 	.word	0x0800b9a5
 800b6d0:	0800b9a5 	.word	0x0800b9a5
 800b6d4:	0800b9a5 	.word	0x0800b9a5
 800b6d8:	0800b9a5 	.word	0x0800b9a5
 800b6dc:	0800b9a5 	.word	0x0800b9a5
 800b6e0:	0800b9a5 	.word	0x0800b9a5
 800b6e4:	0800b9a5 	.word	0x0800b9a5
 800b6e8:	0800b9a5 	.word	0x0800b9a5
 800b6ec:	0800b9a5 	.word	0x0800b9a5
 800b6f0:	0800b9a5 	.word	0x0800b9a5
 800b6f4:	0800b9a5 	.word	0x0800b9a5
 800b6f8:	0800b9a5 	.word	0x0800b9a5
 800b6fc:	0800b9a5 	.word	0x0800b9a5
 800b700:	0800b9a5 	.word	0x0800b9a5
 800b704:	0800b9a5 	.word	0x0800b9a5
 800b708:	0800b9a5 	.word	0x0800b9a5
 800b70c:	0800b9a5 	.word	0x0800b9a5
 800b710:	0800b9a5 	.word	0x0800b9a5
 800b714:	0800b971 	.word	0x0800b971
 800b718:	0800b975 	.word	0x0800b975
 800b71c:	0800b979 	.word	0x0800b979
 800b720:	0800b97d 	.word	0x0800b97d
 800b724:	0800b981 	.word	0x0800b981
 800b728:	0800b985 	.word	0x0800b985
 800b72c:	0800b989 	.word	0x0800b989
 800b730:	0800b98d 	.word	0x0800b98d
 800b734:	0800b991 	.word	0x0800b991
 800b738:	0800b995 	.word	0x0800b995
 800b73c:	0800b9a5 	.word	0x0800b9a5
 800b740:	0800b999 	.word	0x0800b999
 800b744:	0800b99d 	.word	0x0800b99d
 800b748:	0800b9a5 	.word	0x0800b9a5
 800b74c:	0800b9a5 	.word	0x0800b9a5
 800b750:	0800b9a5 	.word	0x0800b9a5
 800b754:	0800b9a5 	.word	0x0800b9a5
 800b758:	0800b9a5 	.word	0x0800b9a5
 800b75c:	0800b9a5 	.word	0x0800b9a5
 800b760:	0800b9a5 	.word	0x0800b9a5
 800b764:	0800b9a5 	.word	0x0800b9a5
 800b768:	0800b9a5 	.word	0x0800b9a5
 800b76c:	0800b9a5 	.word	0x0800b9a5
 800b770:	0800b9a5 	.word	0x0800b9a5
 800b774:	0800b9a5 	.word	0x0800b9a5
 800b778:	0800b9a5 	.word	0x0800b9a5
 800b77c:	0800b9a5 	.word	0x0800b9a5
 800b780:	0800b9a5 	.word	0x0800b9a5
 800b784:	0800b9a5 	.word	0x0800b9a5
 800b788:	0800b9a5 	.word	0x0800b9a5
 800b78c:	0800b9a5 	.word	0x0800b9a5
 800b790:	0800b9a5 	.word	0x0800b9a5
 800b794:	0800b9a5 	.word	0x0800b9a5
 800b798:	0800b9a5 	.word	0x0800b9a5
 800b79c:	0800b9a5 	.word	0x0800b9a5
 800b7a0:	0800b9a5 	.word	0x0800b9a5
 800b7a4:	0800b9a5 	.word	0x0800b9a5
 800b7a8:	0800b9a5 	.word	0x0800b9a5
 800b7ac:	0800b9a5 	.word	0x0800b9a5
 800b7b0:	0800b9a5 	.word	0x0800b9a5
 800b7b4:	0800b9a5 	.word	0x0800b9a5
 800b7b8:	0800b9a5 	.word	0x0800b9a5
 800b7bc:	0800b9a5 	.word	0x0800b9a5
 800b7c0:	0800b9a5 	.word	0x0800b9a5
 800b7c4:	0800b9a5 	.word	0x0800b9a5
 800b7c8:	0800b9a5 	.word	0x0800b9a5
 800b7cc:	0800b9a5 	.word	0x0800b9a5
 800b7d0:	0800b9a5 	.word	0x0800b9a5
 800b7d4:	0800b9a5 	.word	0x0800b9a5
 800b7d8:	0800b9a5 	.word	0x0800b9a5
 800b7dc:	0800b9a5 	.word	0x0800b9a5
 800b7e0:	0800b9a5 	.word	0x0800b9a5
 800b7e4:	0800b9a5 	.word	0x0800b9a5
 800b7e8:	0800b9a5 	.word	0x0800b9a5
 800b7ec:	0800b9a5 	.word	0x0800b9a5
 800b7f0:	0800b9a5 	.word	0x0800b9a5
 800b7f4:	0800b9a5 	.word	0x0800b9a5
 800b7f8:	0800b9a5 	.word	0x0800b9a5
 800b7fc:	0800b9a5 	.word	0x0800b9a5
 800b800:	0800b9a5 	.word	0x0800b9a5
 800b804:	0800b9a5 	.word	0x0800b9a5
 800b808:	0800b9a5 	.word	0x0800b9a5
 800b80c:	0800b9a5 	.word	0x0800b9a5
 800b810:	0800b9a5 	.word	0x0800b9a5
 800b814:	0800b9a5 	.word	0x0800b9a5
 800b818:	0800b9a5 	.word	0x0800b9a5
 800b81c:	0800b9a5 	.word	0x0800b9a5
 800b820:	0800b9a5 	.word	0x0800b9a5
 800b824:	0800b9a5 	.word	0x0800b9a5
 800b828:	0800b9a5 	.word	0x0800b9a5
 800b82c:	0800b9a5 	.word	0x0800b9a5
 800b830:	0800b9a5 	.word	0x0800b9a5
 800b834:	0800b9a5 	.word	0x0800b9a5
 800b838:	0800b9a5 	.word	0x0800b9a5
 800b83c:	0800b9a5 	.word	0x0800b9a5
 800b840:	0800b9a5 	.word	0x0800b9a5
 800b844:	0800b9a5 	.word	0x0800b9a5
 800b848:	0800b9a5 	.word	0x0800b9a5
 800b84c:	0800b9a5 	.word	0x0800b9a5
 800b850:	0800b9a5 	.word	0x0800b9a5
 800b854:	0800b9a5 	.word	0x0800b9a5
 800b858:	0800b9a5 	.word	0x0800b9a5
 800b85c:	0800b9a5 	.word	0x0800b9a5
 800b860:	0800b9a5 	.word	0x0800b9a5
 800b864:	0800b9a5 	.word	0x0800b9a5
 800b868:	0800b9a5 	.word	0x0800b9a5
 800b86c:	0800b9a5 	.word	0x0800b9a5
 800b870:	0800b9a5 	.word	0x0800b9a5
 800b874:	0800b9a5 	.word	0x0800b9a5
 800b878:	0800b9a5 	.word	0x0800b9a5
 800b87c:	0800b9a5 	.word	0x0800b9a5
 800b880:	0800b9a5 	.word	0x0800b9a5
 800b884:	0800b9a5 	.word	0x0800b9a5
 800b888:	0800b9a5 	.word	0x0800b9a5
 800b88c:	0800b9a5 	.word	0x0800b9a5
 800b890:	0800b9a5 	.word	0x0800b9a5
 800b894:	0800b9a5 	.word	0x0800b9a5
 800b898:	0800b9a5 	.word	0x0800b9a5
 800b89c:	0800b9a5 	.word	0x0800b9a5
 800b8a0:	0800b9a5 	.word	0x0800b9a5
 800b8a4:	0800b9a1 	.word	0x0800b9a1
    case 100: return "Continue";
 800b8a8:	4b42      	ldr	r3, [pc, #264]	@ (800b9b4 <mg_http_status_code_str+0x8f8>)
 800b8aa:	e07c      	b.n	800b9a6 <mg_http_status_code_str+0x8ea>
    case 101: return "Switching Protocols";
 800b8ac:	4b42      	ldr	r3, [pc, #264]	@ (800b9b8 <mg_http_status_code_str+0x8fc>)
 800b8ae:	e07a      	b.n	800b9a6 <mg_http_status_code_str+0x8ea>
    case 102: return "Processing";
 800b8b0:	4b42      	ldr	r3, [pc, #264]	@ (800b9bc <mg_http_status_code_str+0x900>)
 800b8b2:	e078      	b.n	800b9a6 <mg_http_status_code_str+0x8ea>
    case 200: return "OK";
 800b8b4:	4b42      	ldr	r3, [pc, #264]	@ (800b9c0 <mg_http_status_code_str+0x904>)
 800b8b6:	e076      	b.n	800b9a6 <mg_http_status_code_str+0x8ea>
    case 201: return "Created";
 800b8b8:	4b42      	ldr	r3, [pc, #264]	@ (800b9c4 <mg_http_status_code_str+0x908>)
 800b8ba:	e074      	b.n	800b9a6 <mg_http_status_code_str+0x8ea>
    case 202: return "Accepted";
 800b8bc:	4b42      	ldr	r3, [pc, #264]	@ (800b9c8 <mg_http_status_code_str+0x90c>)
 800b8be:	e072      	b.n	800b9a6 <mg_http_status_code_str+0x8ea>
    case 203: return "Non-authoritative Information";
 800b8c0:	4b42      	ldr	r3, [pc, #264]	@ (800b9cc <mg_http_status_code_str+0x910>)
 800b8c2:	e070      	b.n	800b9a6 <mg_http_status_code_str+0x8ea>
    case 204: return "No Content";
 800b8c4:	4b42      	ldr	r3, [pc, #264]	@ (800b9d0 <mg_http_status_code_str+0x914>)
 800b8c6:	e06e      	b.n	800b9a6 <mg_http_status_code_str+0x8ea>
    case 205: return "Reset Content";
 800b8c8:	4b42      	ldr	r3, [pc, #264]	@ (800b9d4 <mg_http_status_code_str+0x918>)
 800b8ca:	e06c      	b.n	800b9a6 <mg_http_status_code_str+0x8ea>
    case 206: return "Partial Content";
 800b8cc:	4b42      	ldr	r3, [pc, #264]	@ (800b9d8 <mg_http_status_code_str+0x91c>)
 800b8ce:	e06a      	b.n	800b9a6 <mg_http_status_code_str+0x8ea>
    case 207: return "Multi-Status";
 800b8d0:	4b42      	ldr	r3, [pc, #264]	@ (800b9dc <mg_http_status_code_str+0x920>)
 800b8d2:	e068      	b.n	800b9a6 <mg_http_status_code_str+0x8ea>
    case 208: return "Already Reported";
 800b8d4:	4b42      	ldr	r3, [pc, #264]	@ (800b9e0 <mg_http_status_code_str+0x924>)
 800b8d6:	e066      	b.n	800b9a6 <mg_http_status_code_str+0x8ea>
    case 226: return "IM Used";
 800b8d8:	4b42      	ldr	r3, [pc, #264]	@ (800b9e4 <mg_http_status_code_str+0x928>)
 800b8da:	e064      	b.n	800b9a6 <mg_http_status_code_str+0x8ea>
    case 300: return "Multiple Choices";
 800b8dc:	4b42      	ldr	r3, [pc, #264]	@ (800b9e8 <mg_http_status_code_str+0x92c>)
 800b8de:	e062      	b.n	800b9a6 <mg_http_status_code_str+0x8ea>
    case 301: return "Moved Permanently";
 800b8e0:	4b42      	ldr	r3, [pc, #264]	@ (800b9ec <mg_http_status_code_str+0x930>)
 800b8e2:	e060      	b.n	800b9a6 <mg_http_status_code_str+0x8ea>
    case 302: return "Found";
 800b8e4:	4b42      	ldr	r3, [pc, #264]	@ (800b9f0 <mg_http_status_code_str+0x934>)
 800b8e6:	e05e      	b.n	800b9a6 <mg_http_status_code_str+0x8ea>
    case 303: return "See Other";
 800b8e8:	4b42      	ldr	r3, [pc, #264]	@ (800b9f4 <mg_http_status_code_str+0x938>)
 800b8ea:	e05c      	b.n	800b9a6 <mg_http_status_code_str+0x8ea>
    case 304: return "Not Modified";
 800b8ec:	4b42      	ldr	r3, [pc, #264]	@ (800b9f8 <mg_http_status_code_str+0x93c>)
 800b8ee:	e05a      	b.n	800b9a6 <mg_http_status_code_str+0x8ea>
    case 305: return "Use Proxy";
 800b8f0:	4b42      	ldr	r3, [pc, #264]	@ (800b9fc <mg_http_status_code_str+0x940>)
 800b8f2:	e058      	b.n	800b9a6 <mg_http_status_code_str+0x8ea>
    case 307: return "Temporary Redirect";
 800b8f4:	4b42      	ldr	r3, [pc, #264]	@ (800ba00 <mg_http_status_code_str+0x944>)
 800b8f6:	e056      	b.n	800b9a6 <mg_http_status_code_str+0x8ea>
    case 308: return "Permanent Redirect";
 800b8f8:	4b42      	ldr	r3, [pc, #264]	@ (800ba04 <mg_http_status_code_str+0x948>)
 800b8fa:	e054      	b.n	800b9a6 <mg_http_status_code_str+0x8ea>
    case 400: return "Bad Request";
 800b8fc:	4b42      	ldr	r3, [pc, #264]	@ (800ba08 <mg_http_status_code_str+0x94c>)
 800b8fe:	e052      	b.n	800b9a6 <mg_http_status_code_str+0x8ea>
    case 401: return "Unauthorized";
 800b900:	4b42      	ldr	r3, [pc, #264]	@ (800ba0c <mg_http_status_code_str+0x950>)
 800b902:	e050      	b.n	800b9a6 <mg_http_status_code_str+0x8ea>
    case 402: return "Payment Required";
 800b904:	4b42      	ldr	r3, [pc, #264]	@ (800ba10 <mg_http_status_code_str+0x954>)
 800b906:	e04e      	b.n	800b9a6 <mg_http_status_code_str+0x8ea>
    case 403: return "Forbidden";
 800b908:	4b42      	ldr	r3, [pc, #264]	@ (800ba14 <mg_http_status_code_str+0x958>)
 800b90a:	e04c      	b.n	800b9a6 <mg_http_status_code_str+0x8ea>
    case 404: return "Not Found";
 800b90c:	4b42      	ldr	r3, [pc, #264]	@ (800ba18 <mg_http_status_code_str+0x95c>)
 800b90e:	e04a      	b.n	800b9a6 <mg_http_status_code_str+0x8ea>
    case 405: return "Method Not Allowed";
 800b910:	4b42      	ldr	r3, [pc, #264]	@ (800ba1c <mg_http_status_code_str+0x960>)
 800b912:	e048      	b.n	800b9a6 <mg_http_status_code_str+0x8ea>
    case 406: return "Not Acceptable";
 800b914:	4b42      	ldr	r3, [pc, #264]	@ (800ba20 <mg_http_status_code_str+0x964>)
 800b916:	e046      	b.n	800b9a6 <mg_http_status_code_str+0x8ea>
    case 407: return "Proxy Authentication Required";
 800b918:	4b42      	ldr	r3, [pc, #264]	@ (800ba24 <mg_http_status_code_str+0x968>)
 800b91a:	e044      	b.n	800b9a6 <mg_http_status_code_str+0x8ea>
    case 408: return "Request Timeout";
 800b91c:	4b42      	ldr	r3, [pc, #264]	@ (800ba28 <mg_http_status_code_str+0x96c>)
 800b91e:	e042      	b.n	800b9a6 <mg_http_status_code_str+0x8ea>
    case 409: return "Conflict";
 800b920:	4b42      	ldr	r3, [pc, #264]	@ (800ba2c <mg_http_status_code_str+0x970>)
 800b922:	e040      	b.n	800b9a6 <mg_http_status_code_str+0x8ea>
    case 410: return "Gone";
 800b924:	4b42      	ldr	r3, [pc, #264]	@ (800ba30 <mg_http_status_code_str+0x974>)
 800b926:	e03e      	b.n	800b9a6 <mg_http_status_code_str+0x8ea>
    case 411: return "Length Required";
 800b928:	4b42      	ldr	r3, [pc, #264]	@ (800ba34 <mg_http_status_code_str+0x978>)
 800b92a:	e03c      	b.n	800b9a6 <mg_http_status_code_str+0x8ea>
    case 412: return "Precondition Failed";
 800b92c:	4b42      	ldr	r3, [pc, #264]	@ (800ba38 <mg_http_status_code_str+0x97c>)
 800b92e:	e03a      	b.n	800b9a6 <mg_http_status_code_str+0x8ea>
    case 413: return "Payload Too Large";
 800b930:	4b42      	ldr	r3, [pc, #264]	@ (800ba3c <mg_http_status_code_str+0x980>)
 800b932:	e038      	b.n	800b9a6 <mg_http_status_code_str+0x8ea>
    case 414: return "Request-URI Too Long";
 800b934:	4b42      	ldr	r3, [pc, #264]	@ (800ba40 <mg_http_status_code_str+0x984>)
 800b936:	e036      	b.n	800b9a6 <mg_http_status_code_str+0x8ea>
    case 415: return "Unsupported Media Type";
 800b938:	4b42      	ldr	r3, [pc, #264]	@ (800ba44 <mg_http_status_code_str+0x988>)
 800b93a:	e034      	b.n	800b9a6 <mg_http_status_code_str+0x8ea>
    case 416: return "Requested Range Not Satisfiable";
 800b93c:	4b42      	ldr	r3, [pc, #264]	@ (800ba48 <mg_http_status_code_str+0x98c>)
 800b93e:	e032      	b.n	800b9a6 <mg_http_status_code_str+0x8ea>
    case 417: return "Expectation Failed";
 800b940:	4b42      	ldr	r3, [pc, #264]	@ (800ba4c <mg_http_status_code_str+0x990>)
 800b942:	e030      	b.n	800b9a6 <mg_http_status_code_str+0x8ea>
    case 418: return "I'm a teapot";
 800b944:	4b42      	ldr	r3, [pc, #264]	@ (800ba50 <mg_http_status_code_str+0x994>)
 800b946:	e02e      	b.n	800b9a6 <mg_http_status_code_str+0x8ea>
    case 421: return "Misdirected Request";
 800b948:	4b42      	ldr	r3, [pc, #264]	@ (800ba54 <mg_http_status_code_str+0x998>)
 800b94a:	e02c      	b.n	800b9a6 <mg_http_status_code_str+0x8ea>
    case 422: return "Unprocessable Entity";
 800b94c:	4b42      	ldr	r3, [pc, #264]	@ (800ba58 <mg_http_status_code_str+0x99c>)
 800b94e:	e02a      	b.n	800b9a6 <mg_http_status_code_str+0x8ea>
    case 423: return "Locked";
 800b950:	4b42      	ldr	r3, [pc, #264]	@ (800ba5c <mg_http_status_code_str+0x9a0>)
 800b952:	e028      	b.n	800b9a6 <mg_http_status_code_str+0x8ea>
    case 424: return "Failed Dependency";
 800b954:	4b42      	ldr	r3, [pc, #264]	@ (800ba60 <mg_http_status_code_str+0x9a4>)
 800b956:	e026      	b.n	800b9a6 <mg_http_status_code_str+0x8ea>
    case 426: return "Upgrade Required";
 800b958:	4b42      	ldr	r3, [pc, #264]	@ (800ba64 <mg_http_status_code_str+0x9a8>)
 800b95a:	e024      	b.n	800b9a6 <mg_http_status_code_str+0x8ea>
    case 428: return "Precondition Required";
 800b95c:	4b42      	ldr	r3, [pc, #264]	@ (800ba68 <mg_http_status_code_str+0x9ac>)
 800b95e:	e022      	b.n	800b9a6 <mg_http_status_code_str+0x8ea>
    case 429: return "Too Many Requests";
 800b960:	4b42      	ldr	r3, [pc, #264]	@ (800ba6c <mg_http_status_code_str+0x9b0>)
 800b962:	e020      	b.n	800b9a6 <mg_http_status_code_str+0x8ea>
    case 431: return "Request Header Fields Too Large";
 800b964:	4b42      	ldr	r3, [pc, #264]	@ (800ba70 <mg_http_status_code_str+0x9b4>)
 800b966:	e01e      	b.n	800b9a6 <mg_http_status_code_str+0x8ea>
    case 444: return "Connection Closed Without Response";
 800b968:	4b42      	ldr	r3, [pc, #264]	@ (800ba74 <mg_http_status_code_str+0x9b8>)
 800b96a:	e01c      	b.n	800b9a6 <mg_http_status_code_str+0x8ea>
    case 451: return "Unavailable For Legal Reasons";
 800b96c:	4b42      	ldr	r3, [pc, #264]	@ (800ba78 <mg_http_status_code_str+0x9bc>)
 800b96e:	e01a      	b.n	800b9a6 <mg_http_status_code_str+0x8ea>
    case 499: return "Client Closed Request";
 800b970:	4b42      	ldr	r3, [pc, #264]	@ (800ba7c <mg_http_status_code_str+0x9c0>)
 800b972:	e018      	b.n	800b9a6 <mg_http_status_code_str+0x8ea>
    case 500: return "Internal Server Error";
 800b974:	4b42      	ldr	r3, [pc, #264]	@ (800ba80 <mg_http_status_code_str+0x9c4>)
 800b976:	e016      	b.n	800b9a6 <mg_http_status_code_str+0x8ea>
    case 501: return "Not Implemented";
 800b978:	4b42      	ldr	r3, [pc, #264]	@ (800ba84 <mg_http_status_code_str+0x9c8>)
 800b97a:	e014      	b.n	800b9a6 <mg_http_status_code_str+0x8ea>
    case 502: return "Bad Gateway";
 800b97c:	4b42      	ldr	r3, [pc, #264]	@ (800ba88 <mg_http_status_code_str+0x9cc>)
 800b97e:	e012      	b.n	800b9a6 <mg_http_status_code_str+0x8ea>
    case 503: return "Service Unavailable";
 800b980:	4b42      	ldr	r3, [pc, #264]	@ (800ba8c <mg_http_status_code_str+0x9d0>)
 800b982:	e010      	b.n	800b9a6 <mg_http_status_code_str+0x8ea>
    case 504: return "Gateway Timeout";
 800b984:	4b42      	ldr	r3, [pc, #264]	@ (800ba90 <mg_http_status_code_str+0x9d4>)
 800b986:	e00e      	b.n	800b9a6 <mg_http_status_code_str+0x8ea>
    case 505: return "HTTP Version Not Supported";
 800b988:	4b42      	ldr	r3, [pc, #264]	@ (800ba94 <mg_http_status_code_str+0x9d8>)
 800b98a:	e00c      	b.n	800b9a6 <mg_http_status_code_str+0x8ea>
    case 506: return "Variant Also Negotiates";
 800b98c:	4b42      	ldr	r3, [pc, #264]	@ (800ba98 <mg_http_status_code_str+0x9dc>)
 800b98e:	e00a      	b.n	800b9a6 <mg_http_status_code_str+0x8ea>
    case 507: return "Insufficient Storage";
 800b990:	4b42      	ldr	r3, [pc, #264]	@ (800ba9c <mg_http_status_code_str+0x9e0>)
 800b992:	e008      	b.n	800b9a6 <mg_http_status_code_str+0x8ea>
    case 508: return "Loop Detected";
 800b994:	4b42      	ldr	r3, [pc, #264]	@ (800baa0 <mg_http_status_code_str+0x9e4>)
 800b996:	e006      	b.n	800b9a6 <mg_http_status_code_str+0x8ea>
    case 510: return "Not Extended";
 800b998:	4b42      	ldr	r3, [pc, #264]	@ (800baa4 <mg_http_status_code_str+0x9e8>)
 800b99a:	e004      	b.n	800b9a6 <mg_http_status_code_str+0x8ea>
    case 511: return "Network Authentication Required";
 800b99c:	4b42      	ldr	r3, [pc, #264]	@ (800baa8 <mg_http_status_code_str+0x9ec>)
 800b99e:	e002      	b.n	800b9a6 <mg_http_status_code_str+0x8ea>
    case 599: return "Network Connect Timeout Error";
 800b9a0:	4b42      	ldr	r3, [pc, #264]	@ (800baac <mg_http_status_code_str+0x9f0>)
 800b9a2:	e000      	b.n	800b9a6 <mg_http_status_code_str+0x8ea>
    default: return "";
 800b9a4:	4b42      	ldr	r3, [pc, #264]	@ (800bab0 <mg_http_status_code_str+0x9f4>)
  }
}
 800b9a6:	4618      	mov	r0, r3
 800b9a8:	370c      	adds	r7, #12
 800b9aa:	46bd      	mov	sp, r7
 800b9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b0:	4770      	bx	lr
 800b9b2:	bf00      	nop
 800b9b4:	08029fdc 	.word	0x08029fdc
 800b9b8:	08029fe8 	.word	0x08029fe8
 800b9bc:	08029ffc 	.word	0x08029ffc
 800b9c0:	0802a008 	.word	0x0802a008
 800b9c4:	0802a00c 	.word	0x0802a00c
 800b9c8:	0802a014 	.word	0x0802a014
 800b9cc:	0802a020 	.word	0x0802a020
 800b9d0:	0802a040 	.word	0x0802a040
 800b9d4:	0802a04c 	.word	0x0802a04c
 800b9d8:	0802a05c 	.word	0x0802a05c
 800b9dc:	0802a06c 	.word	0x0802a06c
 800b9e0:	0802a07c 	.word	0x0802a07c
 800b9e4:	0802a090 	.word	0x0802a090
 800b9e8:	0802a098 	.word	0x0802a098
 800b9ec:	0802a0ac 	.word	0x0802a0ac
 800b9f0:	0802a0c0 	.word	0x0802a0c0
 800b9f4:	0802a0c8 	.word	0x0802a0c8
 800b9f8:	0802a0d4 	.word	0x0802a0d4
 800b9fc:	0802a0e4 	.word	0x0802a0e4
 800ba00:	0802a0f0 	.word	0x0802a0f0
 800ba04:	0802a104 	.word	0x0802a104
 800ba08:	0802a118 	.word	0x0802a118
 800ba0c:	0802a124 	.word	0x0802a124
 800ba10:	0802a134 	.word	0x0802a134
 800ba14:	0802a148 	.word	0x0802a148
 800ba18:	0802a154 	.word	0x0802a154
 800ba1c:	0802a160 	.word	0x0802a160
 800ba20:	0802a174 	.word	0x0802a174
 800ba24:	0802a184 	.word	0x0802a184
 800ba28:	0802a1a4 	.word	0x0802a1a4
 800ba2c:	0802a1b4 	.word	0x0802a1b4
 800ba30:	0802a1c0 	.word	0x0802a1c0
 800ba34:	0802a1c8 	.word	0x0802a1c8
 800ba38:	0802a1d8 	.word	0x0802a1d8
 800ba3c:	0802a1ec 	.word	0x0802a1ec
 800ba40:	0802a200 	.word	0x0802a200
 800ba44:	0802a218 	.word	0x0802a218
 800ba48:	0802a230 	.word	0x0802a230
 800ba4c:	0802a250 	.word	0x0802a250
 800ba50:	0802a264 	.word	0x0802a264
 800ba54:	0802a274 	.word	0x0802a274
 800ba58:	0802a288 	.word	0x0802a288
 800ba5c:	0802a2a0 	.word	0x0802a2a0
 800ba60:	0802a2a8 	.word	0x0802a2a8
 800ba64:	0802a2bc 	.word	0x0802a2bc
 800ba68:	0802a2d0 	.word	0x0802a2d0
 800ba6c:	0802a2e8 	.word	0x0802a2e8
 800ba70:	0802a2fc 	.word	0x0802a2fc
 800ba74:	0802a31c 	.word	0x0802a31c
 800ba78:	0802a340 	.word	0x0802a340
 800ba7c:	0802a360 	.word	0x0802a360
 800ba80:	0802a378 	.word	0x0802a378
 800ba84:	0802a390 	.word	0x0802a390
 800ba88:	0802a3a0 	.word	0x0802a3a0
 800ba8c:	0802a3ac 	.word	0x0802a3ac
 800ba90:	0802a3c0 	.word	0x0802a3c0
 800ba94:	0802a3d0 	.word	0x0802a3d0
 800ba98:	0802a3ec 	.word	0x0802a3ec
 800ba9c:	0802a404 	.word	0x0802a404
 800baa0:	0802a41c 	.word	0x0802a41c
 800baa4:	0802a42c 	.word	0x0802a42c
 800baa8:	0802a43c 	.word	0x0802a43c
 800baac:	0802a45c 	.word	0x0802a45c
 800bab0:	0802a47c 	.word	0x0802a47c

0800bab4 <mg_http_reply>:
// clang-format on

void mg_http_reply(struct mg_connection *c, int code, const char *headers,
                   const char *fmt, ...) {
 800bab4:	b408      	push	{r3}
 800bab6:	b580      	push	{r7, lr}
 800bab8:	b08b      	sub	sp, #44	@ 0x2c
 800baba:	af02      	add	r7, sp, #8
 800babc:	60f8      	str	r0, [r7, #12]
 800babe:	60b9      	str	r1, [r7, #8]
 800bac0:	607a      	str	r2, [r7, #4]
  va_list ap;
  size_t len;
  mg_printf(c, "HTTP/1.1 %d %s\r\n%sContent-Length:            \r\n\r\n", code,
 800bac2:	68b8      	ldr	r0, [r7, #8]
 800bac4:	f7ff fafa 	bl	800b0bc <mg_http_status_code_str>
 800bac8:	4602      	mov	r2, r0
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d001      	beq.n	800bad4 <mg_http_reply+0x20>
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	e000      	b.n	800bad6 <mg_http_reply+0x22>
 800bad4:	4b1f      	ldr	r3, [pc, #124]	@ (800bb54 <mg_http_reply+0xa0>)
 800bad6:	9300      	str	r3, [sp, #0]
 800bad8:	4613      	mov	r3, r2
 800bada:	68ba      	ldr	r2, [r7, #8]
 800badc:	491e      	ldr	r1, [pc, #120]	@ (800bb58 <mg_http_reply+0xa4>)
 800bade:	68f8      	ldr	r0, [r7, #12]
 800bae0:	f003 f83c 	bl	800eb5c <mg_printf>
            mg_http_status_code_str(code), headers == NULL ? "" : headers);
  len = c->send.len;
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bae8:	61fb      	str	r3, [r7, #28]
  va_start(ap, fmt);
 800baea:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800baee:	617b      	str	r3, [r7, #20]
  mg_vxprintf(mg_pfn_iobuf, &c->send, fmt, &ap);
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 800baf6:	f107 0314 	add.w	r3, r7, #20
 800bafa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bafc:	4817      	ldr	r0, [pc, #92]	@ (800bb5c <mg_http_reply+0xa8>)
 800bafe:	f7fd feeb 	bl	80098d8 <mg_vxprintf>
  va_end(ap);
  if (c->send.len > 16) {
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bb06:	2b10      	cmp	r3, #16
 800bb08:	d916      	bls.n	800bb38 <mg_http_reply+0x84>
    size_t n = mg_snprintf((char *) &c->send.buf[len - 15], 11, "%-10lu",
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800bb0e:	69fb      	ldr	r3, [r7, #28]
 800bb10:	3b0f      	subs	r3, #15
 800bb12:	18d0      	adds	r0, r2, r3
                           (unsigned long) (c->send.len - len));
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bb18:	69fb      	ldr	r3, [r7, #28]
 800bb1a:	1ad3      	subs	r3, r2, r3
    size_t n = mg_snprintf((char *) &c->send.buf[len - 15], 11, "%-10lu",
 800bb1c:	4a10      	ldr	r2, [pc, #64]	@ (800bb60 <mg_http_reply+0xac>)
 800bb1e:	210b      	movs	r1, #11
 800bb20:	f007 fafc 	bl	801311c <mg_snprintf>
 800bb24:	61b8      	str	r0, [r7, #24]
    c->send.buf[len - 15 + n] = ' ';  // Change ending 0 to space
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800bb2a:	69f9      	ldr	r1, [r7, #28]
 800bb2c:	69bb      	ldr	r3, [r7, #24]
 800bb2e:	440b      	add	r3, r1
 800bb30:	3b0f      	subs	r3, #15
 800bb32:	4413      	add	r3, r2
 800bb34:	2220      	movs	r2, #32
 800bb36:	701a      	strb	r2, [r3, #0]
  }
  c->is_resp = 0;
 800bb38:	68fa      	ldr	r2, [r7, #12]
 800bb3a:	f892 30ae 	ldrb.w	r3, [r2, #174]	@ 0xae
 800bb3e:	f023 0301 	bic.w	r3, r3, #1
 800bb42:	f882 30ae 	strb.w	r3, [r2, #174]	@ 0xae
}
 800bb46:	bf00      	nop
 800bb48:	3724      	adds	r7, #36	@ 0x24
 800bb4a:	46bd      	mov	sp, r7
 800bb4c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bb50:	b001      	add	sp, #4
 800bb52:	4770      	bx	lr
 800bb54:	0802a47c 	.word	0x0802a47c
 800bb58:	0802a480 	.word	0x0802a480
 800bb5c:	080130ad 	.word	0x080130ad
 800bb60:	0802a4b4 	.word	0x0802a4b4

0800bb64 <restore_http_cb>:

static void http_cb(struct mg_connection *, int, void *);
static void restore_http_cb(struct mg_connection *c) {
 800bb64:	b580      	push	{r7, lr}
 800bb66:	b082      	sub	sp, #8
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	6078      	str	r0, [r7, #4]
  mg_fs_close((struct mg_fd *) c->pfn_data);
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bb72:	4618      	mov	r0, r3
 800bb74:	f7fe fa7c 	bl	800a070 <mg_fs_close>
  c->pfn_data = NULL;
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	2200      	movs	r2, #0
 800bb7c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  c->pfn = http_cb;
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	4a07      	ldr	r2, [pc, #28]	@ (800bba0 <restore_http_cb+0x3c>)
 800bb84:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  c->is_resp = 0;
 800bb88:	687a      	ldr	r2, [r7, #4]
 800bb8a:	f892 30ae 	ldrb.w	r3, [r2, #174]	@ 0xae
 800bb8e:	f023 0301 	bic.w	r3, r3, #1
 800bb92:	f882 30ae 	strb.w	r3, [r2, #174]	@ 0xae
}
 800bb96:	bf00      	nop
 800bb98:	3708      	adds	r7, #8
 800bb9a:	46bd      	mov	sp, r7
 800bb9c:	bd80      	pop	{r7, pc}
 800bb9e:	bf00      	nop
 800bba0:	0800ced5 	.word	0x0800ced5

0800bba4 <mg_http_etag>:

char *mg_http_etag(char *buf, size_t len, size_t size, time_t mtime);
char *mg_http_etag(char *buf, size_t len, size_t size, time_t mtime) {
 800bba4:	b5b0      	push	{r4, r5, r7, lr}
 800bba6:	b088      	sub	sp, #32
 800bba8:	af04      	add	r7, sp, #16
 800bbaa:	60f8      	str	r0, [r7, #12]
 800bbac:	60b9      	str	r1, [r7, #8]
 800bbae:	607a      	str	r2, [r7, #4]
  mg_snprintf(buf, len, "\"%lld.%lld\"", (int64_t) mtime, (int64_t) size);
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	2200      	movs	r2, #0
 800bbb4:	461c      	mov	r4, r3
 800bbb6:	4615      	mov	r5, r2
 800bbb8:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800bbbc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800bbc0:	e9cd 2300 	strd	r2, r3, [sp]
 800bbc4:	4a04      	ldr	r2, [pc, #16]	@ (800bbd8 <mg_http_etag+0x34>)
 800bbc6:	68b9      	ldr	r1, [r7, #8]
 800bbc8:	68f8      	ldr	r0, [r7, #12]
 800bbca:	f007 faa7 	bl	801311c <mg_snprintf>
  return buf;
 800bbce:	68fb      	ldr	r3, [r7, #12]
}
 800bbd0:	4618      	mov	r0, r3
 800bbd2:	3710      	adds	r7, #16
 800bbd4:	46bd      	mov	sp, r7
 800bbd6:	bdb0      	pop	{r4, r5, r7, pc}
 800bbd8:	0802a4bc 	.word	0x0802a4bc

0800bbdc <static_cb>:

static void static_cb(struct mg_connection *c, int ev, void *ev_data) {
 800bbdc:	b580      	push	{r7, lr}
 800bbde:	b08a      	sub	sp, #40	@ 0x28
 800bbe0:	af00      	add	r7, sp, #0
 800bbe2:	60f8      	str	r0, [r7, #12]
 800bbe4:	60b9      	str	r1, [r7, #8]
 800bbe6:	607a      	str	r2, [r7, #4]
  if (ev == MG_EV_WRITE || ev == MG_EV_POLL) {
 800bbe8:	68bb      	ldr	r3, [r7, #8]
 800bbea:	2b08      	cmp	r3, #8
 800bbec:	d002      	beq.n	800bbf4 <static_cb+0x18>
 800bbee:	68bb      	ldr	r3, [r7, #8]
 800bbf0:	2b02      	cmp	r3, #2
 800bbf2:	d148      	bne.n	800bc86 <static_cb+0xaa>
    struct mg_fd *fd = (struct mg_fd *) c->pfn_data;
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bbfa:	623b      	str	r3, [r7, #32]
    // Read to send IO buffer directly, avoid extra on-stack buffer
    size_t n, max = MG_IO_SIZE, space;
 800bbfc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bc00:	61fb      	str	r3, [r7, #28]
    size_t *cl = (size_t *) &c->data[(sizeof(c->data) - sizeof(size_t)) /
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	33a4      	adds	r3, #164	@ 0xa4
 800bc06:	61bb      	str	r3, [r7, #24]
                                     sizeof(size_t) * sizeof(size_t)];
    if (c->send.size < max) mg_iobuf_resize(&c->send, max);
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bc0c:	69fa      	ldr	r2, [r7, #28]
 800bc0e:	429a      	cmp	r2, r3
 800bc10:	d905      	bls.n	800bc1e <static_cb+0x42>
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	3348      	adds	r3, #72	@ 0x48
 800bc16:	69f9      	ldr	r1, [r7, #28]
 800bc18:	4618      	mov	r0, r3
 800bc1a:	f001 fd4d 	bl	800d6b8 <mg_iobuf_resize>
    if (c->send.len >= c->send.size) return;  // Rate limit
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bc26:	429a      	cmp	r2, r3
 800bc28:	d234      	bcs.n	800bc94 <static_cb+0xb8>
    if ((space = c->send.size - c->send.len) > *cl) space = *cl;
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bc32:	1ad3      	subs	r3, r2, r3
 800bc34:	627b      	str	r3, [r7, #36]	@ 0x24
 800bc36:	69bb      	ldr	r3, [r7, #24]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bc3c:	429a      	cmp	r2, r3
 800bc3e:	d902      	bls.n	800bc46 <static_cb+0x6a>
 800bc40:	69bb      	ldr	r3, [r7, #24]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	627b      	str	r3, [r7, #36]	@ 0x24
    n = fd->fs->rd(fd->fd, c->send.buf + c->send.len, space);
 800bc46:	6a3b      	ldr	r3, [r7, #32]
 800bc48:	685b      	ldr	r3, [r3, #4]
 800bc4a:	691b      	ldr	r3, [r3, #16]
 800bc4c:	6a3a      	ldr	r2, [r7, #32]
 800bc4e:	6810      	ldr	r0, [r2, #0]
 800bc50:	68fa      	ldr	r2, [r7, #12]
 800bc52:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 800bc54:	68fa      	ldr	r2, [r7, #12]
 800bc56:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800bc58:	4411      	add	r1, r2
 800bc5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bc5c:	4798      	blx	r3
 800bc5e:	6178      	str	r0, [r7, #20]
    c->send.len += n;
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bc64:	697b      	ldr	r3, [r7, #20]
 800bc66:	441a      	add	r2, r3
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	651a      	str	r2, [r3, #80]	@ 0x50
    *cl -= n;
 800bc6c:	69bb      	ldr	r3, [r7, #24]
 800bc6e:	681a      	ldr	r2, [r3, #0]
 800bc70:	697b      	ldr	r3, [r7, #20]
 800bc72:	1ad2      	subs	r2, r2, r3
 800bc74:	69bb      	ldr	r3, [r7, #24]
 800bc76:	601a      	str	r2, [r3, #0]
    if (n == 0) restore_http_cb(c);
 800bc78:	697b      	ldr	r3, [r7, #20]
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d10c      	bne.n	800bc98 <static_cb+0xbc>
 800bc7e:	68f8      	ldr	r0, [r7, #12]
 800bc80:	f7ff ff70 	bl	800bb64 <restore_http_cb>
  if (ev == MG_EV_WRITE || ev == MG_EV_POLL) {
 800bc84:	e008      	b.n	800bc98 <static_cb+0xbc>
  } else if (ev == MG_EV_CLOSE) {
 800bc86:	68bb      	ldr	r3, [r7, #8]
 800bc88:	2b09      	cmp	r3, #9
 800bc8a:	d106      	bne.n	800bc9a <static_cb+0xbe>
    restore_http_cb(c);
 800bc8c:	68f8      	ldr	r0, [r7, #12]
 800bc8e:	f7ff ff69 	bl	800bb64 <restore_http_cb>
 800bc92:	e002      	b.n	800bc9a <static_cb+0xbe>
    if (c->send.len >= c->send.size) return;  // Rate limit
 800bc94:	bf00      	nop
 800bc96:	e000      	b.n	800bc9a <static_cb+0xbe>
  if (ev == MG_EV_WRITE || ev == MG_EV_POLL) {
 800bc98:	bf00      	nop
  }
  (void) ev_data;
}
 800bc9a:	3728      	adds	r7, #40	@ 0x28
 800bc9c:	46bd      	mov	sp, r7
 800bc9e:	bd80      	pop	{r7, pc}

0800bca0 <guess_content_type>:
    MG_C_STR("3gp"), MG_C_STR("video/3gpp"),
    {0, 0},
};
// clang-format on

static struct mg_str guess_content_type(struct mg_str path, const char *extra) {
 800bca0:	b590      	push	{r4, r7, lr}
 800bca2:	b093      	sub	sp, #76	@ 0x4c
 800bca4:	af02      	add	r7, sp, #8
 800bca6:	60f8      	str	r0, [r7, #12]
 800bca8:	1d38      	adds	r0, r7, #4
 800bcaa:	e880 0006 	stmia.w	r0, {r1, r2}
 800bcae:	603b      	str	r3, [r7, #0]
  struct mg_str entry, k, v, s = mg_str(extra), asterisk = mg_str_n("*", 1);
 800bcb0:	f107 031c 	add.w	r3, r7, #28
 800bcb4:	6839      	ldr	r1, [r7, #0]
 800bcb6:	4618      	mov	r0, r3
 800bcb8:	f00a fdf4 	bl	80168a4 <mg_str_s>
 800bcbc:	f107 0314 	add.w	r3, r7, #20
 800bcc0:	2201      	movs	r2, #1
 800bcc2:	4943      	ldr	r1, [pc, #268]	@ (800bdd0 <guess_content_type+0x130>)
 800bcc4:	4618      	mov	r0, r3
 800bcc6:	f00a fe0a 	bl	80168de <mg_str_n>
  size_t i = 0;
 800bcca:	2300      	movs	r3, #0
 800bccc:	63fb      	str	r3, [r7, #60]	@ 0x3c

  // Shrink path to its extension only
  while (i < path.len && path.buf[path.len - i - 1] != '.') i++;
 800bcce:	e002      	b.n	800bcd6 <guess_content_type+0x36>
 800bcd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bcd2:	3301      	adds	r3, #1
 800bcd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bcd6:	68bb      	ldr	r3, [r7, #8]
 800bcd8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800bcda:	429a      	cmp	r2, r3
 800bcdc:	d208      	bcs.n	800bcf0 <guess_content_type+0x50>
 800bcde:	687a      	ldr	r2, [r7, #4]
 800bce0:	68b9      	ldr	r1, [r7, #8]
 800bce2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bce4:	1acb      	subs	r3, r1, r3
 800bce6:	3b01      	subs	r3, #1
 800bce8:	4413      	add	r3, r2
 800bcea:	781b      	ldrb	r3, [r3, #0]
 800bcec:	2b2e      	cmp	r3, #46	@ 0x2e
 800bcee:	d1ef      	bne.n	800bcd0 <guess_content_type+0x30>
  path.buf += path.len - i;
 800bcf0:	687a      	ldr	r2, [r7, #4]
 800bcf2:	68b9      	ldr	r1, [r7, #8]
 800bcf4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bcf6:	1acb      	subs	r3, r1, r3
 800bcf8:	4413      	add	r3, r2
 800bcfa:	607b      	str	r3, [r7, #4]
  path.len = i;
 800bcfc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bcfe:	60bb      	str	r3, [r7, #8]

  // Process user-provided mime type overrides, if any
  while (mg_span(s, &entry, &s, ',')) {
 800bd00:	e02b      	b.n	800bd5a <guess_content_type+0xba>
    if (mg_span(entry, &k, &v, '=') &&
 800bd02:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bd06:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800bd0a:	213d      	movs	r1, #61	@ 0x3d
 800bd0c:	9100      	str	r1, [sp, #0]
 800bd0e:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 800bd12:	c903      	ldmia	r1, {r0, r1}
 800bd14:	f00a ffc4 	bl	8016ca0 <mg_span>
 800bd18:	4603      	mov	r3, r0
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d01d      	beq.n	800bd5a <guess_content_type+0xba>
        (mg_strcmp(asterisk, k) == 0 || mg_strcmp(path, k) == 0))
 800bd1e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800bd22:	cb0c      	ldmia	r3, {r2, r3}
 800bd24:	f107 0114 	add.w	r1, r7, #20
 800bd28:	c903      	ldmia	r1, {r0, r1}
 800bd2a:	f00a fe3c 	bl	80169a6 <mg_strcmp>
 800bd2e:	4603      	mov	r3, r0
    if (mg_span(entry, &k, &v, '=') &&
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d009      	beq.n	800bd48 <guess_content_type+0xa8>
        (mg_strcmp(asterisk, k) == 0 || mg_strcmp(path, k) == 0))
 800bd34:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800bd38:	cb0c      	ldmia	r3, {r2, r3}
 800bd3a:	1d39      	adds	r1, r7, #4
 800bd3c:	c903      	ldmia	r1, {r0, r1}
 800bd3e:	f00a fe32 	bl	80169a6 <mg_strcmp>
 800bd42:	4603      	mov	r3, r0
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d108      	bne.n	800bd5a <guess_content_type+0xba>
      return v;
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	461a      	mov	r2, r3
 800bd4c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bd50:	e893 0003 	ldmia.w	r3, {r0, r1}
 800bd54:	e882 0003 	stmia.w	r2, {r0, r1}
 800bd58:	e036      	b.n	800bdc8 <guess_content_type+0x128>
  while (mg_span(s, &entry, &s, ',')) {
 800bd5a:	f107 031c 	add.w	r3, r7, #28
 800bd5e:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800bd62:	212c      	movs	r1, #44	@ 0x2c
 800bd64:	9100      	str	r1, [sp, #0]
 800bd66:	f107 011c 	add.w	r1, r7, #28
 800bd6a:	c903      	ldmia	r1, {r0, r1}
 800bd6c:	f00a ff98 	bl	8016ca0 <mg_span>
 800bd70:	4603      	mov	r3, r0
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d1c5      	bne.n	800bd02 <guess_content_type+0x62>
  }

  // Process built-in mime types
  for (i = 0; s_known_types[i].buf != NULL; i += 2) {
 800bd76:	2300      	movs	r3, #0
 800bd78:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bd7a:	e01a      	b.n	800bdb2 <guess_content_type+0x112>
    if (mg_strcmp(path, s_known_types[i]) == 0) return s_known_types[i + 1];
 800bd7c:	4a15      	ldr	r2, [pc, #84]	@ (800bdd4 <guess_content_type+0x134>)
 800bd7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd80:	00db      	lsls	r3, r3, #3
 800bd82:	4413      	add	r3, r2
 800bd84:	cb0c      	ldmia	r3, {r2, r3}
 800bd86:	1d39      	adds	r1, r7, #4
 800bd88:	c903      	ldmia	r1, {r0, r1}
 800bd8a:	f00a fe0c 	bl	80169a6 <mg_strcmp>
 800bd8e:	4603      	mov	r3, r0
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d10b      	bne.n	800bdac <guess_content_type+0x10c>
 800bd94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd96:	3301      	adds	r3, #1
 800bd98:	68f9      	ldr	r1, [r7, #12]
 800bd9a:	4a0e      	ldr	r2, [pc, #56]	@ (800bdd4 <guess_content_type+0x134>)
 800bd9c:	460c      	mov	r4, r1
 800bd9e:	00db      	lsls	r3, r3, #3
 800bda0:	4413      	add	r3, r2
 800bda2:	e893 0003 	ldmia.w	r3, {r0, r1}
 800bda6:	e884 0003 	stmia.w	r4, {r0, r1}
 800bdaa:	e00d      	b.n	800bdc8 <guess_content_type+0x128>
  for (i = 0; s_known_types[i].buf != NULL; i += 2) {
 800bdac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bdae:	3302      	adds	r3, #2
 800bdb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bdb2:	4a08      	ldr	r2, [pc, #32]	@ (800bdd4 <guess_content_type+0x134>)
 800bdb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bdb6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d1de      	bne.n	800bd7c <guess_content_type+0xdc>
  }

  return mg_str("text/plain; charset=utf-8");
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	4905      	ldr	r1, [pc, #20]	@ (800bdd8 <guess_content_type+0x138>)
 800bdc2:	4618      	mov	r0, r3
 800bdc4:	f00a fd6e 	bl	80168a4 <mg_str_s>
}
 800bdc8:	68f8      	ldr	r0, [r7, #12]
 800bdca:	3744      	adds	r7, #68	@ 0x44
 800bdcc:	46bd      	mov	sp, r7
 800bdce:	bd90      	pop	{r4, r7, pc}
 800bdd0:	0802a72c 	.word	0x0802a72c
 800bdd4:	24000060 	.word	0x24000060
 800bdd8:	0802a5a8 	.word	0x0802a5a8

0800bddc <getrange>:

static int getrange(struct mg_str *s, size_t *a, size_t *b) {
 800bddc:	b580      	push	{r7, lr}
 800bdde:	b08c      	sub	sp, #48	@ 0x30
 800bde0:	af02      	add	r7, sp, #8
 800bde2:	60f8      	str	r0, [r7, #12]
 800bde4:	60b9      	str	r1, [r7, #8]
 800bde6:	607a      	str	r2, [r7, #4]
  size_t i, numparsed = 0;
 800bde8:	2300      	movs	r3, #0
 800bdea:	623b      	str	r3, [r7, #32]
  for (i = 0; i + 6 < s->len; i++) {
 800bdec:	2300      	movs	r3, #0
 800bdee:	627b      	str	r3, [r7, #36]	@ 0x24
 800bdf0:	e058      	b.n	800bea4 <getrange+0xc8>
    struct mg_str k, v = mg_str_n(s->buf + i + 6, s->len - i - 6);
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	681a      	ldr	r2, [r3, #0]
 800bdf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdf8:	3306      	adds	r3, #6
 800bdfa:	18d1      	adds	r1, r2, r3
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	685a      	ldr	r2, [r3, #4]
 800be00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be02:	1ad3      	subs	r3, r2, r3
 800be04:	1f9a      	subs	r2, r3, #6
 800be06:	f107 0310 	add.w	r3, r7, #16
 800be0a:	4618      	mov	r0, r3
 800be0c:	f00a fd67 	bl	80168de <mg_str_n>
    if (memcmp(&s->buf[i], "bytes=", 6) != 0) continue;
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	681a      	ldr	r2, [r3, #0]
 800be14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be16:	4413      	add	r3, r2
 800be18:	2206      	movs	r2, #6
 800be1a:	4929      	ldr	r1, [pc, #164]	@ (800bec0 <getrange+0xe4>)
 800be1c:	4618      	mov	r0, r3
 800be1e:	f01b fc29 	bl	8027674 <memcmp>
 800be22:	4603      	mov	r3, r0
 800be24:	2b00      	cmp	r3, #0
 800be26:	d139      	bne.n	800be9c <getrange+0xc0>
    if (mg_span(v, &k, &v, '-')) {
 800be28:	f107 0310 	add.w	r3, r7, #16
 800be2c:	f107 0218 	add.w	r2, r7, #24
 800be30:	212d      	movs	r1, #45	@ 0x2d
 800be32:	9100      	str	r1, [sp, #0]
 800be34:	f107 0110 	add.w	r1, r7, #16
 800be38:	c903      	ldmia	r1, {r0, r1}
 800be3a:	f00a ff31 	bl	8016ca0 <mg_span>
 800be3e:	4603      	mov	r3, r0
 800be40:	2b00      	cmp	r3, #0
 800be42:	d01d      	beq.n	800be80 <getrange+0xa4>
      if (mg_to_size_t(k, a)) numparsed++;
 800be44:	68ba      	ldr	r2, [r7, #8]
 800be46:	f107 0318 	add.w	r3, r7, #24
 800be4a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800be4e:	f7fe fb6d 	bl	800a52c <mg_to_size_t>
 800be52:	4603      	mov	r3, r0
 800be54:	2b00      	cmp	r3, #0
 800be56:	d002      	beq.n	800be5e <getrange+0x82>
 800be58:	6a3b      	ldr	r3, [r7, #32]
 800be5a:	3301      	adds	r3, #1
 800be5c:	623b      	str	r3, [r7, #32]
      if (v.len > 0 && mg_to_size_t(v, b)) numparsed++;
 800be5e:	697b      	ldr	r3, [r7, #20]
 800be60:	2b00      	cmp	r3, #0
 800be62:	d026      	beq.n	800beb2 <getrange+0xd6>
 800be64:	687a      	ldr	r2, [r7, #4]
 800be66:	f107 0310 	add.w	r3, r7, #16
 800be6a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800be6e:	f7fe fb5d 	bl	800a52c <mg_to_size_t>
 800be72:	4603      	mov	r3, r0
 800be74:	2b00      	cmp	r3, #0
 800be76:	d01c      	beq.n	800beb2 <getrange+0xd6>
 800be78:	6a3b      	ldr	r3, [r7, #32]
 800be7a:	3301      	adds	r3, #1
 800be7c:	623b      	str	r3, [r7, #32]
    } else {
      if (mg_to_size_t(v, a)) numparsed++;
    }
    break;
 800be7e:	e018      	b.n	800beb2 <getrange+0xd6>
      if (mg_to_size_t(v, a)) numparsed++;
 800be80:	68ba      	ldr	r2, [r7, #8]
 800be82:	f107 0310 	add.w	r3, r7, #16
 800be86:	e893 0003 	ldmia.w	r3, {r0, r1}
 800be8a:	f7fe fb4f 	bl	800a52c <mg_to_size_t>
 800be8e:	4603      	mov	r3, r0
 800be90:	2b00      	cmp	r3, #0
 800be92:	d00e      	beq.n	800beb2 <getrange+0xd6>
 800be94:	6a3b      	ldr	r3, [r7, #32]
 800be96:	3301      	adds	r3, #1
 800be98:	623b      	str	r3, [r7, #32]
 800be9a:	e00b      	b.n	800beb4 <getrange+0xd8>
    if (memcmp(&s->buf[i], "bytes=", 6) != 0) continue;
 800be9c:	bf00      	nop
  for (i = 0; i + 6 < s->len; i++) {
 800be9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bea0:	3301      	adds	r3, #1
 800bea2:	627b      	str	r3, [r7, #36]	@ 0x24
 800bea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bea6:	1d9a      	adds	r2, r3, #6
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	685b      	ldr	r3, [r3, #4]
 800beac:	429a      	cmp	r2, r3
 800beae:	d3a0      	bcc.n	800bdf2 <getrange+0x16>
 800beb0:	e000      	b.n	800beb4 <getrange+0xd8>
    break;
 800beb2:	bf00      	nop
  }
  return (int) numparsed;
 800beb4:	6a3b      	ldr	r3, [r7, #32]
}
 800beb6:	4618      	mov	r0, r3
 800beb8:	3728      	adds	r7, #40	@ 0x28
 800beba:	46bd      	mov	sp, r7
 800bebc:	bd80      	pop	{r7, pc}
 800bebe:	bf00      	nop
 800bec0:	0802a730 	.word	0x0802a730

0800bec4 <mg_http_serve_file>:

void mg_http_serve_file(struct mg_connection *c, struct mg_http_message *hm,
                        const char *path,
                        const struct mg_http_serve_opts *opts) {
 800bec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bec8:	b0f3      	sub	sp, #460	@ 0x1cc
 800beca:	af0a      	add	r7, sp, #40	@ 0x28
 800becc:	f507 74d0 	add.w	r4, r7, #416	@ 0x1a0
 800bed0:	f5a4 74be 	sub.w	r4, r4, #380	@ 0x17c
 800bed4:	6020      	str	r0, [r4, #0]
 800bed6:	f507 70d0 	add.w	r0, r7, #416	@ 0x1a0
 800beda:	f5a0 70c0 	sub.w	r0, r0, #384	@ 0x180
 800bede:	6001      	str	r1, [r0, #0]
 800bee0:	f507 71d0 	add.w	r1, r7, #416	@ 0x1a0
 800bee4:	f5a1 71c2 	sub.w	r1, r1, #388	@ 0x184
 800bee8:	600a      	str	r2, [r1, #0]
 800beea:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 800beee:	f5a2 72c4 	sub.w	r2, r2, #392	@ 0x188
 800bef2:	6013      	str	r3, [r2, #0]
  char etag[64], tmp[MG_PATH_MAX];
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 800bef4:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800bef8:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	695b      	ldr	r3, [r3, #20]
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d006      	beq.n	800bf12 <mg_http_serve_file+0x4e>
 800bf04:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800bf08:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	695b      	ldr	r3, [r3, #20]
 800bf10:	e000      	b.n	800bf14 <mg_http_serve_file+0x50>
 800bf12:	4ba4      	ldr	r3, [pc, #656]	@ (800c1a4 <mg_http_serve_file+0x2e0>)
 800bf14:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  struct mg_fd *fd = NULL;
 800bf18:	2300      	movs	r3, #0
 800bf1a:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
  size_t size = 0;
 800bf1e:	2300      	movs	r3, #0
 800bf20:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  time_t mtime = 0;
 800bf24:	f04f 0200 	mov.w	r2, #0
 800bf28:	f04f 0300 	mov.w	r3, #0
 800bf2c:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0
  struct mg_str *inm = NULL;
 800bf30:	2300      	movs	r3, #0
 800bf32:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
  struct mg_str mime = guess_content_type(mg_str(path), opts->mime_types);
 800bf36:	f507 72aa 	add.w	r2, r7, #340	@ 0x154
 800bf3a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800bf3e:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800bf42:	6819      	ldr	r1, [r3, #0]
 800bf44:	4610      	mov	r0, r2
 800bf46:	f00a fcad 	bl	80168a4 <mg_str_s>
 800bf4a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800bf4e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	68db      	ldr	r3, [r3, #12]
 800bf56:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 800bf5a:	f5a2 7084 	sub.w	r0, r2, #264	@ 0x108
 800bf5e:	f507 72aa 	add.w	r2, r7, #340	@ 0x154
 800bf62:	ca06      	ldmia	r2, {r1, r2}
 800bf64:	f7ff fe9c 	bl	800bca0 <guess_content_type>
  bool gzip = false;
 800bf68:	2300      	movs	r3, #0
 800bf6a:	f887 319b 	strb.w	r3, [r7, #411]	@ 0x19b

  if (path != NULL) {
 800bf6e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800bf72:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d05c      	beq.n	800c036 <mg_http_serve_file+0x172>
    // If a browser sends us "Accept-Encoding: gzip", try to open .gz first
    struct mg_str *ae = mg_http_get_header(hm, "Accept-Encoding");
 800bf7c:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800bf80:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800bf84:	4988      	ldr	r1, [pc, #544]	@ (800c1a8 <mg_http_serve_file+0x2e4>)
 800bf86:	6818      	ldr	r0, [r3, #0]
 800bf88:	f7fe fd1e 	bl	800a9c8 <mg_http_get_header>
 800bf8c:	f8c7 0184 	str.w	r0, [r7, #388]	@ 0x184
    if (ae != NULL) {
 800bf90:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d03e      	beq.n	800c016 <mg_http_serve_file+0x152>
      char *ae_ = mg_mprintf("%.*s", ae->len, ae->buf);
 800bf98:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800bf9c:	6859      	ldr	r1, [r3, #4]
 800bf9e:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	461a      	mov	r2, r3
 800bfa6:	4881      	ldr	r0, [pc, #516]	@ (800c1ac <mg_http_serve_file+0x2e8>)
 800bfa8:	f007 f8ee 	bl	8013188 <mg_mprintf>
 800bfac:	f8c7 0180 	str.w	r0, [r7, #384]	@ 0x180
      if (ae_ != NULL && strstr(ae_, "gzip") != NULL) {
 800bfb0:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d02a      	beq.n	800c00e <mg_http_serve_file+0x14a>
 800bfb8:	497d      	ldr	r1, [pc, #500]	@ (800c1b0 <mg_http_serve_file+0x2ec>)
 800bfba:	f8d7 0180 	ldr.w	r0, [r7, #384]	@ 0x180
 800bfbe:	f01b fbd3 	bl	8027768 <strstr>
 800bfc2:	4603      	mov	r3, r0
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d022      	beq.n	800c00e <mg_http_serve_file+0x14a>
        mg_snprintf(tmp, sizeof(tmp), "%s.gz", path);
 800bfc8:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800bfcc:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800bfd0:	f107 00b0 	add.w	r0, r7, #176	@ 0xb0
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	4a77      	ldr	r2, [pc, #476]	@ (800c1b4 <mg_http_serve_file+0x2f0>)
 800bfd8:	2164      	movs	r1, #100	@ 0x64
 800bfda:	f007 f89f 	bl	801311c <mg_snprintf>
        fd = mg_fs_open(fs, tmp, MG_FS_READ);
 800bfde:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 800bfe2:	2201      	movs	r2, #1
 800bfe4:	4619      	mov	r1, r3
 800bfe6:	f8d7 018c 	ldr.w	r0, [r7, #396]	@ 0x18c
 800bfea:	f7fe f819 	bl	800a020 <mg_fs_open>
 800bfee:	f8c7 019c 	str.w	r0, [r7, #412]	@ 0x19c
        if (fd != NULL) gzip = true, path = tmp;
 800bff2:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d009      	beq.n	800c00e <mg_http_serve_file+0x14a>
 800bffa:	2301      	movs	r3, #1
 800bffc:	f887 319b 	strb.w	r3, [r7, #411]	@ 0x19b
 800c000:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800c004:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800c008:	f107 02b0 	add.w	r2, r7, #176	@ 0xb0
 800c00c:	601a      	str	r2, [r3, #0]
      }
      free(ae_);
 800c00e:	f8d7 0180 	ldr.w	r0, [r7, #384]	@ 0x180
 800c012:	f019 fccf 	bl	80259b4 <free>
    }
    // No luck opening .gz? Open what we've told to open
    if (fd == NULL) fd = mg_fs_open(fs, path, MG_FS_READ);
 800c016:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d10b      	bne.n	800c036 <mg_http_serve_file+0x172>
 800c01e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800c022:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800c026:	2201      	movs	r2, #1
 800c028:	6819      	ldr	r1, [r3, #0]
 800c02a:	f8d7 018c 	ldr.w	r0, [r7, #396]	@ 0x18c
 800c02e:	f7fd fff7 	bl	800a020 <mg_fs_open>
 800c032:	f8c7 019c 	str.w	r0, [r7, #412]	@ 0x19c
  }

  // Failed to open, and page404 is configured? Open it, then
  if (fd == NULL && opts->page404 != NULL) {
 800c036:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d144      	bne.n	800c0c8 <mg_http_serve_file+0x204>
 800c03e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800c042:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	691b      	ldr	r3, [r3, #16]
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d03c      	beq.n	800c0c8 <mg_http_serve_file+0x204>
    fd = mg_fs_open(fs, opts->page404, MG_FS_READ);
 800c04e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800c052:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	691b      	ldr	r3, [r3, #16]
 800c05a:	2201      	movs	r2, #1
 800c05c:	4619      	mov	r1, r3
 800c05e:	f8d7 018c 	ldr.w	r0, [r7, #396]	@ 0x18c
 800c062:	f7fd ffdd 	bl	800a020 <mg_fs_open>
 800c066:	f8c7 019c 	str.w	r0, [r7, #412]	@ 0x19c
    path = opts->page404;
 800c06a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800c06e:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800c072:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 800c076:	f5a2 72c4 	sub.w	r2, r2, #392	@ 0x188
 800c07a:	6812      	ldr	r2, [r2, #0]
 800c07c:	6912      	ldr	r2, [r2, #16]
 800c07e:	601a      	str	r2, [r3, #0]
    mime = guess_content_type(mg_str(path), opts->mime_types);
 800c080:	f507 72ae 	add.w	r2, r7, #348	@ 0x15c
 800c084:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800c088:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800c08c:	6819      	ldr	r1, [r3, #0]
 800c08e:	4610      	mov	r0, r2
 800c090:	f00a fc08 	bl	80168a4 <mg_str_s>
 800c094:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800c098:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	68db      	ldr	r3, [r3, #12]
 800c0a0:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 800c0a4:	f5a2 7484 	sub.w	r4, r2, #264	@ 0x108
 800c0a8:	f107 0010 	add.w	r0, r7, #16
 800c0ac:	f507 72ae 	add.w	r2, r7, #348	@ 0x15c
 800c0b0:	ca06      	ldmia	r2, {r1, r2}
 800c0b2:	f7ff fdf5 	bl	800bca0 <guess_content_type>
 800c0b6:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800c0ba:	f5a3 72c8 	sub.w	r2, r3, #400	@ 0x190
 800c0be:	4623      	mov	r3, r4
 800c0c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c0c4:	e883 0003 	stmia.w	r3, {r0, r1}
  }

  if (fd == NULL || fs->st(path, &size, &mtime) == 0) {
 800c0c8:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d00f      	beq.n	800c0f0 <mg_http_serve_file+0x22c>
 800c0d0:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 800c0d4:	681c      	ldr	r4, [r3, #0]
 800c0d6:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 800c0da:	f107 01ac 	add.w	r1, r7, #172	@ 0xac
 800c0de:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800c0e2:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800c0e6:	6818      	ldr	r0, [r3, #0]
 800c0e8:	47a0      	blx	r4
 800c0ea:	4603      	mov	r3, r0
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d114      	bne.n	800c11a <mg_http_serve_file+0x256>
    mg_http_reply(c, 404, opts->extra_headers, "Not found\n");
 800c0f0:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800c0f4:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	689a      	ldr	r2, [r3, #8]
 800c0fc:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800c100:	f5a3 70be 	sub.w	r0, r3, #380	@ 0x17c
 800c104:	4b2c      	ldr	r3, [pc, #176]	@ (800c1b8 <mg_http_serve_file+0x2f4>)
 800c106:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 800c10a:	6800      	ldr	r0, [r0, #0]
 800c10c:	f7ff fcd2 	bl	800bab4 <mg_http_reply>
    mg_fs_close(fd);
 800c110:	f8d7 019c 	ldr.w	r0, [r7, #412]	@ 0x19c
 800c114:	f7fd ffac 	bl	800a070 <mg_fs_close>
 800c118:	e190      	b.n	800c43c <mg_http_serve_file+0x578>
    // NOTE: mg_http_etag() call should go first!
  } else if (mg_http_etag(etag, sizeof(etag), size, mtime) != NULL &&
 800c11a:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 800c11e:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 800c122:	f507 708a 	add.w	r0, r7, #276	@ 0x114
 800c126:	e9cd 2300 	strd	r2, r3, [sp]
 800c12a:	460a      	mov	r2, r1
 800c12c:	2140      	movs	r1, #64	@ 0x40
 800c12e:	f7ff fd39 	bl	800bba4 <mg_http_etag>
 800c132:	4603      	mov	r3, r0
 800c134:	2b00      	cmp	r3, #0
 800c136:	d045      	beq.n	800c1c4 <mg_http_serve_file+0x300>
             (inm = mg_http_get_header(hm, "If-None-Match")) != NULL &&
 800c138:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800c13c:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800c140:	491e      	ldr	r1, [pc, #120]	@ (800c1bc <mg_http_serve_file+0x2f8>)
 800c142:	6818      	ldr	r0, [r3, #0]
 800c144:	f7fe fc40 	bl	800a9c8 <mg_http_get_header>
 800c148:	f8c7 0188 	str.w	r0, [r7, #392]	@ 0x188
  } else if (mg_http_etag(etag, sizeof(etag), size, mtime) != NULL &&
 800c14c:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 800c150:	2b00      	cmp	r3, #0
 800c152:	d037      	beq.n	800c1c4 <mg_http_serve_file+0x300>
             mg_strcasecmp(*inm, mg_str(etag)) == 0) {
 800c154:	f507 73b2 	add.w	r3, r7, #356	@ 0x164
 800c158:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 800c15c:	4611      	mov	r1, r2
 800c15e:	4618      	mov	r0, r3
 800c160:	f00a fba0 	bl	80168a4 <mg_str_s>
 800c164:	f8d7 1188 	ldr.w	r1, [r7, #392]	@ 0x188
 800c168:	f507 73b2 	add.w	r3, r7, #356	@ 0x164
 800c16c:	cb0c      	ldmia	r3, {r2, r3}
 800c16e:	c903      	ldmia	r1, {r0, r1}
 800c170:	f00a fc5b 	bl	8016a2a <mg_strcasecmp>
 800c174:	4603      	mov	r3, r0
             (inm = mg_http_get_header(hm, "If-None-Match")) != NULL &&
 800c176:	2b00      	cmp	r3, #0
 800c178:	d124      	bne.n	800c1c4 <mg_http_serve_file+0x300>
    mg_fs_close(fd);
 800c17a:	f8d7 019c 	ldr.w	r0, [r7, #412]	@ 0x19c
 800c17e:	f7fd ff77 	bl	800a070 <mg_fs_close>
    mg_http_reply(c, 304, opts->extra_headers, "");
 800c182:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800c186:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	689a      	ldr	r2, [r3, #8]
 800c18e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800c192:	f5a3 70be 	sub.w	r0, r3, #380	@ 0x17c
 800c196:	4b0a      	ldr	r3, [pc, #40]	@ (800c1c0 <mg_http_serve_file+0x2fc>)
 800c198:	f44f 7198 	mov.w	r1, #304	@ 0x130
 800c19c:	6800      	ldr	r0, [r0, #0]
 800c19e:	f7ff fc89 	bl	800bab4 <mg_http_reply>
 800c1a2:	e14b      	b.n	800c43c <mg_http_serve_file+0x578>
 800c1a4:	24000038 	.word	0x24000038
 800c1a8:	0802a738 	.word	0x0802a738
 800c1ac:	08029f1c 	.word	0x08029f1c
 800c1b0:	0802a748 	.word	0x0802a748
 800c1b4:	0802a750 	.word	0x0802a750
 800c1b8:	0802a758 	.word	0x0802a758
 800c1bc:	0802a764 	.word	0x0802a764
 800c1c0:	0802a47c 	.word	0x0802a47c
  } else {
    int n, status = 200;
 800c1c4:	23c8      	movs	r3, #200	@ 0xc8
 800c1c6:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
    char range[100];
    size_t r1 = 0, r2 = 0, cl = size;
 800c1ca:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800c1ce:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800c1d2:	2200      	movs	r2, #0
 800c1d4:	601a      	str	r2, [r3, #0]
 800c1d6:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800c1da:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800c1de:	2200      	movs	r2, #0
 800c1e0:	601a      	str	r2, [r3, #0]
 800c1e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c1e6:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190

    // Handle Range header
    struct mg_str *rh = mg_http_get_header(hm, "Range");
 800c1ea:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800c1ee:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800c1f2:	4995      	ldr	r1, [pc, #596]	@ (800c448 <mg_http_serve_file+0x584>)
 800c1f4:	6818      	ldr	r0, [r3, #0]
 800c1f6:	f7fe fbe7 	bl	800a9c8 <mg_http_get_header>
 800c1fa:	f8c7 017c 	str.w	r0, [r7, #380]	@ 0x17c
    range[0] = '\0';
 800c1fe:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800c202:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800c206:	2200      	movs	r2, #0
 800c208:	701a      	strb	r2, [r3, #0]
    if (rh != NULL && (n = getrange(rh, &r1, &r2)) > 0) {
 800c20a:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 800c20e:	2b00      	cmp	r3, #0
 800c210:	f000 808e 	beq.w	800c330 <mg_http_serve_file+0x46c>
 800c214:	f107 0290 	add.w	r2, r7, #144	@ 0x90
 800c218:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800c21c:	4619      	mov	r1, r3
 800c21e:	f8d7 017c 	ldr.w	r0, [r7, #380]	@ 0x17c
 800c222:	f7ff fddb 	bl	800bddc <getrange>
 800c226:	f8c7 0178 	str.w	r0, [r7, #376]	@ 0x178
 800c22a:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 800c22e:	2b00      	cmp	r3, #0
 800c230:	dd7e      	ble.n	800c330 <mg_http_serve_file+0x46c>
      // If range is specified like "400-", set second limit to content len
      if (n == 1) r2 = cl - 1;
 800c232:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 800c236:	2b01      	cmp	r3, #1
 800c238:	d107      	bne.n	800c24a <mg_http_serve_file+0x386>
 800c23a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800c23e:	1e5a      	subs	r2, r3, #1
 800c240:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800c244:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800c248:	601a      	str	r2, [r3, #0]
      if (r1 > r2 || r2 >= cl) {
 800c24a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800c24e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800c252:	681a      	ldr	r2, [r3, #0]
 800c254:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800c258:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	429a      	cmp	r2, r3
 800c260:	d808      	bhi.n	800c274 <mg_http_serve_file+0x3b0>
 800c262:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800c266:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	f8d7 2190 	ldr.w	r2, [r7, #400]	@ 0x190
 800c270:	429a      	cmp	r2, r3
 800c272:	d817      	bhi.n	800c2a4 <mg_http_serve_file+0x3e0>
        status = 416;
 800c274:	f44f 73d0 	mov.w	r3, #416	@ 0x1a0
 800c278:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
        cl = 0;
 800c27c:	2300      	movs	r3, #0
 800c27e:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
        mg_snprintf(range, sizeof(range), "Content-Range: bytes */%lld\r\n",
 800c282:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c286:	2200      	movs	r2, #0
 800c288:	60bb      	str	r3, [r7, #8]
 800c28a:	60fa      	str	r2, [r7, #12]
 800c28c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800c290:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800c294:	e9cd 1200 	strd	r1, r2, [sp]
 800c298:	4a6c      	ldr	r2, [pc, #432]	@ (800c44c <mg_http_serve_file+0x588>)
 800c29a:	2164      	movs	r1, #100	@ 0x64
 800c29c:	4618      	mov	r0, r3
 800c29e:	f006 ff3d 	bl	801311c <mg_snprintf>
 800c2a2:	e045      	b.n	800c330 <mg_http_serve_file+0x46c>
                    (int64_t) size);
      } else {
        status = 206;
 800c2a4:	23ce      	movs	r3, #206	@ 0xce
 800c2a6:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
        cl = r2 - r1 + 1;
 800c2aa:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800c2ae:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800c2b2:	681a      	ldr	r2, [r3, #0]
 800c2b4:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800c2b8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	1ad3      	subs	r3, r2, r3
 800c2c0:	3301      	adds	r3, #1
 800c2c2:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
        mg_snprintf(range, sizeof(range),
 800c2c6:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800c2ca:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	2200      	movs	r2, #0
 800c2d2:	469a      	mov	sl, r3
 800c2d4:	4693      	mov	fp, r2
                    "Content-Range: bytes %llu-%llu/%llu\r\n", (uint64_t) r1,
                    (uint64_t) (r1 + cl - 1), (uint64_t) size);
 800c2d6:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800c2da:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800c2de:	681a      	ldr	r2, [r3, #0]
 800c2e0:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800c2e4:	4413      	add	r3, r2
 800c2e6:	3b01      	subs	r3, #1
        mg_snprintf(range, sizeof(range),
 800c2e8:	2200      	movs	r2, #0
 800c2ea:	461d      	mov	r5, r3
 800c2ec:	4616      	mov	r6, r2
 800c2ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c2f2:	2200      	movs	r2, #0
 800c2f4:	603b      	str	r3, [r7, #0]
 800c2f6:	607a      	str	r2, [r7, #4]
 800c2f8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800c2fc:	e9d7 1200 	ldrd	r1, r2, [r7]
 800c300:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800c304:	e9cd 5602 	strd	r5, r6, [sp, #8]
 800c308:	e9cd ab00 	strd	sl, fp, [sp]
 800c30c:	4a50      	ldr	r2, [pc, #320]	@ (800c450 <mg_http_serve_file+0x58c>)
 800c30e:	2164      	movs	r1, #100	@ 0x64
 800c310:	4618      	mov	r0, r3
 800c312:	f006 ff03 	bl	801311c <mg_snprintf>
        fs->sk(fd->fd, r1);
 800c316:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 800c31a:	699b      	ldr	r3, [r3, #24]
 800c31c:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 800c320:	6810      	ldr	r0, [r2, #0]
 800c322:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 800c326:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 800c32a:	6812      	ldr	r2, [r2, #0]
 800c32c:	4611      	mov	r1, r2
 800c32e:	4798      	blx	r3
      }
    }
    mg_printf(c,
 800c330:	f8d7 0194 	ldr.w	r0, [r7, #404]	@ 0x194
 800c334:	f7fe fec2 	bl	800b0bc <mg_http_status_code_str>
 800c338:	4604      	mov	r4, r0
              "HTTP/1.1 %d %s\r\n"
              "Content-Type: %.*s\r\n"
              "Etag: %s\r\n"
              "Content-Length: %llu\r\n"
              "%s%s%s\r\n",
              status, mg_http_status_code_str(status), (int) mime.len, mime.buf,
 800c33a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800c33e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c342:	685b      	ldr	r3, [r3, #4]
    mg_printf(c,
 800c344:	461d      	mov	r5, r3
 800c346:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800c34a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c34e:	681a      	ldr	r2, [r3, #0]
 800c350:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800c354:	2100      	movs	r1, #0
 800c356:	4698      	mov	r8, r3
 800c358:	4689      	mov	r9, r1
 800c35a:	f897 319b 	ldrb.w	r3, [r7, #411]	@ 0x19b
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d001      	beq.n	800c366 <mg_http_serve_file+0x4a2>
 800c362:	493c      	ldr	r1, [pc, #240]	@ (800c454 <mg_http_serve_file+0x590>)
 800c364:	e000      	b.n	800c368 <mg_http_serve_file+0x4a4>
 800c366:	493c      	ldr	r1, [pc, #240]	@ (800c458 <mg_http_serve_file+0x594>)
              etag, (uint64_t) cl, gzip ? "Content-Encoding: gzip\r\n" : "",
              range, opts->extra_headers ? opts->extra_headers : "");
 800c368:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800c36c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	689b      	ldr	r3, [r3, #8]
    mg_printf(c,
 800c374:	2b00      	cmp	r3, #0
 800c376:	d006      	beq.n	800c386 <mg_http_serve_file+0x4c2>
 800c378:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800c37c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	689b      	ldr	r3, [r3, #8]
 800c384:	e000      	b.n	800c388 <mg_http_serve_file+0x4c4>
 800c386:	4b34      	ldr	r3, [pc, #208]	@ (800c458 <mg_http_serve_file+0x594>)
 800c388:	f507 70d0 	add.w	r0, r7, #416	@ 0x1a0
 800c38c:	f5a0 70be 	sub.w	r0, r0, #380	@ 0x17c
 800c390:	9308      	str	r3, [sp, #32]
 800c392:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800c396:	9307      	str	r3, [sp, #28]
 800c398:	9106      	str	r1, [sp, #24]
 800c39a:	e9cd 8904 	strd	r8, r9, [sp, #16]
 800c39e:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 800c3a2:	9302      	str	r3, [sp, #8]
 800c3a4:	9201      	str	r2, [sp, #4]
 800c3a6:	9500      	str	r5, [sp, #0]
 800c3a8:	4623      	mov	r3, r4
 800c3aa:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 800c3ae:	492b      	ldr	r1, [pc, #172]	@ (800c45c <mg_http_serve_file+0x598>)
 800c3b0:	6800      	ldr	r0, [r0, #0]
 800c3b2:	f002 fbd3 	bl	800eb5c <mg_printf>
    if (mg_strcasecmp(hm->method, mg_str("HEAD")) == 0) {
 800c3b6:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 800c3ba:	4929      	ldr	r1, [pc, #164]	@ (800c460 <mg_http_serve_file+0x59c>)
 800c3bc:	4618      	mov	r0, r3
 800c3be:	f00a fa71 	bl	80168a4 <mg_str_s>
 800c3c2:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800c3c6:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800c3ca:	6819      	ldr	r1, [r3, #0]
 800c3cc:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 800c3d0:	cb0c      	ldmia	r3, {r2, r3}
 800c3d2:	c903      	ldmia	r1, {r0, r1}
 800c3d4:	f00a fb29 	bl	8016a2a <mg_strcasecmp>
 800c3d8:	4603      	mov	r3, r0
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d10f      	bne.n	800c3fe <mg_http_serve_file+0x53a>
      c->is_resp = 0;
 800c3de:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800c3e2:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800c3e6:	681a      	ldr	r2, [r3, #0]
 800c3e8:	f892 30ae 	ldrb.w	r3, [r2, #174]	@ 0xae
 800c3ec:	f023 0301 	bic.w	r3, r3, #1
 800c3f0:	f882 30ae 	strb.w	r3, [r2, #174]	@ 0xae
      mg_fs_close(fd);
 800c3f4:	f8d7 019c 	ldr.w	r0, [r7, #412]	@ 0x19c
 800c3f8:	f7fd fe3a 	bl	800a070 <mg_fs_close>
      c->pfn = static_cb;
      c->pfn_data = fd;
      *clp = cl;
    }
  }
}
 800c3fc:	e01e      	b.n	800c43c <mg_http_serve_file+0x578>
      size_t *clp = (size_t *) &c->data[(sizeof(c->data) - sizeof(size_t)) /
 800c3fe:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800c402:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	33a4      	adds	r3, #164	@ 0xa4
 800c40a:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
      c->pfn = static_cb;
 800c40e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800c412:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	4a12      	ldr	r2, [pc, #72]	@ (800c464 <mg_http_serve_file+0x5a0>)
 800c41a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      c->pfn_data = fd;
 800c41e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800c422:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 800c42c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      *clp = cl;
 800c430:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 800c434:	f8d7 2190 	ldr.w	r2, [r7, #400]	@ 0x190
 800c438:	601a      	str	r2, [r3, #0]
}
 800c43a:	e7ff      	b.n	800c43c <mg_http_serve_file+0x578>
 800c43c:	bf00      	nop
 800c43e:	f507 77d2 	add.w	r7, r7, #420	@ 0x1a4
 800c442:	46bd      	mov	sp, r7
 800c444:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c448:	0802a774 	.word	0x0802a774
 800c44c:	0802a77c 	.word	0x0802a77c
 800c450:	0802a79c 	.word	0x0802a79c
 800c454:	0802a7c4 	.word	0x0802a7c4
 800c458:	0802a47c 	.word	0x0802a47c
 800c45c:	0802a7e0 	.word	0x0802a7e0
 800c460:	0802a830 	.word	0x0802a830
 800c464:	0800bbdd 	.word	0x0800bbdd

0800c468 <uri_to_path2>:
#endif

// Resolve requested file into `path` and return its fs->st() result
static int uri_to_path2(struct mg_connection *c, struct mg_http_message *hm,
                        struct mg_fs *fs, struct mg_str url, struct mg_str dir,
                        char *path, size_t path_size) {
 800c468:	b082      	sub	sp, #8
 800c46a:	b590      	push	{r4, r7, lr}
 800c46c:	b08f      	sub	sp, #60	@ 0x3c
 800c46e:	af02      	add	r7, sp, #8
 800c470:	60f8      	str	r0, [r7, #12]
 800c472:	60b9      	str	r1, [r7, #8]
 800c474:	607a      	str	r2, [r7, #4]
 800c476:	647b      	str	r3, [r7, #68]	@ 0x44
  int flags, tmp;
  // Append URI to the root_dir, and sanitize it
  size_t n = mg_snprintf(path, path_size, "%.*s", (int) dir.len, dir.buf);
 800c478:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c47a:	461a      	mov	r2, r3
 800c47c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c47e:	9300      	str	r3, [sp, #0]
 800c480:	4613      	mov	r3, r2
 800c482:	4a9c      	ldr	r2, [pc, #624]	@ (800c6f4 <uri_to_path2+0x28c>)
 800c484:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800c486:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800c488:	f006 fe48 	bl	801311c <mg_snprintf>
 800c48c:	6278      	str	r0, [r7, #36]	@ 0x24
  if (n + 2 >= path_size) {
 800c48e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c490:	3302      	adds	r3, #2
 800c492:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c494:	429a      	cmp	r2, r3
 800c496:	d809      	bhi.n	800c4ac <uri_to_path2+0x44>
    mg_http_reply(c, 400, "", "Exceeded path size");
 800c498:	4b97      	ldr	r3, [pc, #604]	@ (800c6f8 <uri_to_path2+0x290>)
 800c49a:	4a98      	ldr	r2, [pc, #608]	@ (800c6fc <uri_to_path2+0x294>)
 800c49c:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 800c4a0:	68f8      	ldr	r0, [r7, #12]
 800c4a2:	f7ff fb07 	bl	800bab4 <mg_http_reply>
    return -1;
 800c4a6:	f04f 33ff 	mov.w	r3, #4294967295
 800c4aa:	e143      	b.n	800c734 <uri_to_path2+0x2cc>
  }
  path[path_size - 1] = '\0';
 800c4ac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c4ae:	3b01      	subs	r3, #1
 800c4b0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c4b2:	4413      	add	r3, r2
 800c4b4:	2200      	movs	r2, #0
 800c4b6:	701a      	strb	r2, [r3, #0]
  // Terminate root dir with slash
  if (n > 0 && path[n - 1] != '/') path[n++] = '/', path[n] = '\0';
 800c4b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d012      	beq.n	800c4e4 <uri_to_path2+0x7c>
 800c4be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4c0:	3b01      	subs	r3, #1
 800c4c2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c4c4:	4413      	add	r3, r2
 800c4c6:	781b      	ldrb	r3, [r3, #0]
 800c4c8:	2b2f      	cmp	r3, #47	@ 0x2f
 800c4ca:	d00b      	beq.n	800c4e4 <uri_to_path2+0x7c>
 800c4cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4ce:	1c5a      	adds	r2, r3, #1
 800c4d0:	627a      	str	r2, [r7, #36]	@ 0x24
 800c4d2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c4d4:	4413      	add	r3, r2
 800c4d6:	222f      	movs	r2, #47	@ 0x2f
 800c4d8:	701a      	strb	r2, [r3, #0]
 800c4da:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c4dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4de:	4413      	add	r3, r2
 800c4e0:	2200      	movs	r2, #0
 800c4e2:	701a      	strb	r2, [r3, #0]
  if (url.len < hm->uri.len) {
 800c4e4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c4e6:	68bb      	ldr	r3, [r7, #8]
 800c4e8:	68db      	ldr	r3, [r3, #12]
 800c4ea:	429a      	cmp	r2, r3
 800c4ec:	d212      	bcs.n	800c514 <uri_to_path2+0xac>
    mg_url_decode(hm->uri.buf + url.len, hm->uri.len - url.len, path + n,
 800c4ee:	68bb      	ldr	r3, [r7, #8]
 800c4f0:	689a      	ldr	r2, [r3, #8]
 800c4f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c4f4:	18d0      	adds	r0, r2, r3
 800c4f6:	68bb      	ldr	r3, [r7, #8]
 800c4f8:	68da      	ldr	r2, [r3, #12]
 800c4fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c4fc:	1ad1      	subs	r1, r2, r3
 800c4fe:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c502:	18d4      	adds	r4, r2, r3
 800c504:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c508:	1ad3      	subs	r3, r2, r3
 800c50a:	2200      	movs	r2, #0
 800c50c:	9200      	str	r2, [sp, #0]
 800c50e:	4622      	mov	r2, r4
 800c510:	f7fe f967 	bl	800a7e2 <mg_url_decode>
                  path_size - n, 0);
  }
  path[path_size - 1] = '\0';  // Double-check
 800c514:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c516:	3b01      	subs	r3, #1
 800c518:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c51a:	4413      	add	r3, r2
 800c51c:	2200      	movs	r2, #0
 800c51e:	701a      	strb	r2, [r3, #0]
  if (!mg_path_is_sane(mg_str_n(path, path_size))) {
 800c520:	f107 0314 	add.w	r3, r7, #20
 800c524:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c526:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c528:	4618      	mov	r0, r3
 800c52a:	f00a f9d8 	bl	80168de <mg_str_n>
 800c52e:	f107 0314 	add.w	r3, r7, #20
 800c532:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c536:	f015 fc09 	bl	8021d4c <mg_path_is_sane>
 800c53a:	4603      	mov	r3, r0
 800c53c:	f083 0301 	eor.w	r3, r3, #1
 800c540:	b2db      	uxtb	r3, r3
 800c542:	2b00      	cmp	r3, #0
 800c544:	d009      	beq.n	800c55a <uri_to_path2+0xf2>
    mg_http_reply(c, 400, "", "Invalid path");
 800c546:	4b6e      	ldr	r3, [pc, #440]	@ (800c700 <uri_to_path2+0x298>)
 800c548:	4a6c      	ldr	r2, [pc, #432]	@ (800c6fc <uri_to_path2+0x294>)
 800c54a:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 800c54e:	68f8      	ldr	r0, [r7, #12]
 800c550:	f7ff fab0 	bl	800bab4 <mg_http_reply>
    return -1;
 800c554:	f04f 33ff 	mov.w	r3, #4294967295
 800c558:	e0ec      	b.n	800c734 <uri_to_path2+0x2cc>
  }
  n = strlen(path);
 800c55a:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800c55c:	f7f3 ff38 	bl	80003d0 <strlen>
 800c560:	6278      	str	r0, [r7, #36]	@ 0x24
  while (n > 1 && path[n - 1] == '/') path[--n] = 0;  // Trim trailing slashes
 800c562:	e007      	b.n	800c574 <uri_to_path2+0x10c>
 800c564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c566:	3b01      	subs	r3, #1
 800c568:	627b      	str	r3, [r7, #36]	@ 0x24
 800c56a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c56c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c56e:	4413      	add	r3, r2
 800c570:	2200      	movs	r2, #0
 800c572:	701a      	strb	r2, [r3, #0]
 800c574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c576:	2b01      	cmp	r3, #1
 800c578:	d906      	bls.n	800c588 <uri_to_path2+0x120>
 800c57a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c57c:	3b01      	subs	r3, #1
 800c57e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c580:	4413      	add	r3, r2
 800c582:	781b      	ldrb	r3, [r3, #0]
 800c584:	2b2f      	cmp	r3, #47	@ 0x2f
 800c586:	d0ed      	beq.n	800c564 <uri_to_path2+0xfc>
  flags = mg_strcmp(hm->uri, mg_str("/")) == 0 ? MG_FS_DIR
 800c588:	f107 031c 	add.w	r3, r7, #28
 800c58c:	495d      	ldr	r1, [pc, #372]	@ (800c704 <uri_to_path2+0x29c>)
 800c58e:	4618      	mov	r0, r3
 800c590:	f00a f988 	bl	80168a4 <mg_str_s>
 800c594:	68b9      	ldr	r1, [r7, #8]
 800c596:	f107 031c 	add.w	r3, r7, #28
 800c59a:	cb0c      	ldmia	r3, {r2, r3}
 800c59c:	3108      	adds	r1, #8
 800c59e:	c903      	ldmia	r1, {r0, r1}
 800c5a0:	f00a fa01 	bl	80169a6 <mg_strcmp>
 800c5a4:	4603      	mov	r3, r0
                                               : fs->st(path, NULL, NULL);
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d007      	beq.n	800c5ba <uri_to_path2+0x152>
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	2200      	movs	r2, #0
 800c5b0:	2100      	movs	r1, #0
 800c5b2:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800c5b4:	4798      	blx	r3
 800c5b6:	4603      	mov	r3, r0
 800c5b8:	e000      	b.n	800c5bc <uri_to_path2+0x154>
 800c5ba:	2304      	movs	r3, #4
  flags = mg_strcmp(hm->uri, mg_str("/")) == 0 ? MG_FS_DIR
 800c5bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MG_VERBOSE(("%lu %.*s -> %s %d", c->id, (int) hm->uri.len, hm->uri.buf, path,
 800c5be:	4b52      	ldr	r3, [pc, #328]	@ (800c708 <uri_to_path2+0x2a0>)
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	2b03      	cmp	r3, #3
 800c5c4:	dd16      	ble.n	800c5f4 <uri_to_path2+0x18c>
 800c5c6:	4b51      	ldr	r3, [pc, #324]	@ (800c70c <uri_to_path2+0x2a4>)
 800c5c8:	f640 02ca 	movw	r2, #2250	@ 0x8ca
 800c5cc:	4950      	ldr	r1, [pc, #320]	@ (800c710 <uri_to_path2+0x2a8>)
 800c5ce:	2004      	movs	r0, #4
 800c5d0:	f002 f968 	bl	800e8a4 <mg_log_prefix>
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800c5d8:	68bb      	ldr	r3, [r7, #8]
 800c5da:	68db      	ldr	r3, [r3, #12]
 800c5dc:	4618      	mov	r0, r3
 800c5de:	68bb      	ldr	r3, [r7, #8]
 800c5e0:	689a      	ldr	r2, [r3, #8]
 800c5e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5e4:	9301      	str	r3, [sp, #4]
 800c5e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c5e8:	9300      	str	r3, [sp, #0]
 800c5ea:	4613      	mov	r3, r2
 800c5ec:	4602      	mov	r2, r0
 800c5ee:	4849      	ldr	r0, [pc, #292]	@ (800c714 <uri_to_path2+0x2ac>)
 800c5f0:	f002 f9a8 	bl	800e944 <mg_log>
              flags));
  if (flags == 0) {
 800c5f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	f000 809b 	beq.w	800c732 <uri_to_path2+0x2ca>
    // Do nothing - let's caller decide
  } else if ((flags & MG_FS_DIR) && hm->uri.len > 0 &&
 800c5fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5fe:	f003 0304 	and.w	r3, r3, #4
 800c602:	2b00      	cmp	r3, #0
 800c604:	d020      	beq.n	800c648 <uri_to_path2+0x1e0>
 800c606:	68bb      	ldr	r3, [r7, #8]
 800c608:	68db      	ldr	r3, [r3, #12]
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d01c      	beq.n	800c648 <uri_to_path2+0x1e0>
             hm->uri.buf[hm->uri.len - 1] != '/') {
 800c60e:	68bb      	ldr	r3, [r7, #8]
 800c610:	689a      	ldr	r2, [r3, #8]
 800c612:	68bb      	ldr	r3, [r7, #8]
 800c614:	68db      	ldr	r3, [r3, #12]
 800c616:	3b01      	subs	r3, #1
 800c618:	4413      	add	r3, r2
 800c61a:	781b      	ldrb	r3, [r3, #0]
  } else if ((flags & MG_FS_DIR) && hm->uri.len > 0 &&
 800c61c:	2b2f      	cmp	r3, #47	@ 0x2f
 800c61e:	d013      	beq.n	800c648 <uri_to_path2+0x1e0>
    mg_printf(c,
              "HTTP/1.1 301 Moved\r\n"
              "Location: %.*s/\r\n"
              "Content-Length: 0\r\n"
              "\r\n",
              (int) hm->uri.len, hm->uri.buf);
 800c620:	68bb      	ldr	r3, [r7, #8]
 800c622:	68db      	ldr	r3, [r3, #12]
    mg_printf(c,
 800c624:	461a      	mov	r2, r3
 800c626:	68bb      	ldr	r3, [r7, #8]
 800c628:	689b      	ldr	r3, [r3, #8]
 800c62a:	493b      	ldr	r1, [pc, #236]	@ (800c718 <uri_to_path2+0x2b0>)
 800c62c:	68f8      	ldr	r0, [r7, #12]
 800c62e:	f002 fa95 	bl	800eb5c <mg_printf>
    c->is_resp = 0;
 800c632:	68fa      	ldr	r2, [r7, #12]
 800c634:	f892 30ae 	ldrb.w	r3, [r2, #174]	@ 0xae
 800c638:	f023 0301 	bic.w	r3, r3, #1
 800c63c:	f882 30ae 	strb.w	r3, [r2, #174]	@ 0xae
    flags = -1;
 800c640:	f04f 33ff 	mov.w	r3, #4294967295
 800c644:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c646:	e074      	b.n	800c732 <uri_to_path2+0x2ca>
  } else if (flags & MG_FS_DIR) {
 800c648:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c64a:	f003 0304 	and.w	r3, r3, #4
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d06f      	beq.n	800c732 <uri_to_path2+0x2ca>
    if (((mg_snprintf(path + n, path_size - n, "/" MG_HTTP_INDEX) > 0 &&
 800c652:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c656:	18d0      	adds	r0, r2, r3
 800c658:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c65a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c65c:	1ad3      	subs	r3, r2, r3
 800c65e:	4a2f      	ldr	r2, [pc, #188]	@ (800c71c <uri_to_path2+0x2b4>)
 800c660:	4619      	mov	r1, r3
 800c662:	f006 fd5b 	bl	801311c <mg_snprintf>
 800c666:	4603      	mov	r3, r0
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d009      	beq.n	800c680 <uri_to_path2+0x218>
          (tmp = fs->st(path, NULL, NULL)) != 0) ||
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	2200      	movs	r2, #0
 800c672:	2100      	movs	r1, #0
 800c674:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800c676:	4798      	blx	r3
 800c678:	62b8      	str	r0, [r7, #40]	@ 0x28
    if (((mg_snprintf(path + n, path_size - n, "/" MG_HTTP_INDEX) > 0 &&
 800c67a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d116      	bne.n	800c6ae <uri_to_path2+0x246>
         (mg_snprintf(path + n, path_size - n, "/index.shtml") > 0 &&
 800c680:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c684:	18d0      	adds	r0, r2, r3
 800c686:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c68a:	1ad3      	subs	r3, r2, r3
 800c68c:	4a24      	ldr	r2, [pc, #144]	@ (800c720 <uri_to_path2+0x2b8>)
 800c68e:	4619      	mov	r1, r3
 800c690:	f006 fd44 	bl	801311c <mg_snprintf>
 800c694:	4603      	mov	r3, r0
          (tmp = fs->st(path, NULL, NULL)) != 0) ||
 800c696:	2b00      	cmp	r3, #0
 800c698:	d00c      	beq.n	800c6b4 <uri_to_path2+0x24c>
          (tmp = fs->st(path, NULL, NULL)) != 0))) {
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	2200      	movs	r2, #0
 800c6a0:	2100      	movs	r1, #0
 800c6a2:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800c6a4:	4798      	blx	r3
 800c6a6:	62b8      	str	r0, [r7, #40]	@ 0x28
         (mg_snprintf(path + n, path_size - n, "/index.shtml") > 0 &&
 800c6a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d002      	beq.n	800c6b4 <uri_to_path2+0x24c>
      flags = tmp;
 800c6ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c6b2:	e03e      	b.n	800c732 <uri_to_path2+0x2ca>
    } else if ((mg_snprintf(path + n, path_size - n, "/" MG_HTTP_INDEX ".gz") >
 800c6b4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c6b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6b8:	18d0      	adds	r0, r2, r3
 800c6ba:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c6bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6be:	1ad3      	subs	r3, r2, r3
 800c6c0:	4a18      	ldr	r2, [pc, #96]	@ (800c724 <uri_to_path2+0x2bc>)
 800c6c2:	4619      	mov	r1, r3
 800c6c4:	f006 fd2a 	bl	801311c <mg_snprintf>
 800c6c8:	4603      	mov	r3, r0
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d02c      	beq.n	800c728 <uri_to_path2+0x2c0>
                    0 &&
                (tmp = fs->st(path, NULL, NULL)) !=
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	2200      	movs	r2, #0
 800c6d4:	2100      	movs	r1, #0
 800c6d6:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800c6d8:	4798      	blx	r3
 800c6da:	62b8      	str	r0, [r7, #40]	@ 0x28
                    0 &&
 800c6dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d022      	beq.n	800c728 <uri_to_path2+0x2c0>
                    0)) {  // check for gzipped index
      flags = tmp;
 800c6e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      path[n + 1 + strlen(MG_HTTP_INDEX)] =
 800c6e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6e8:	330b      	adds	r3, #11
 800c6ea:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c6ec:	4413      	add	r3, r2
 800c6ee:	2200      	movs	r2, #0
 800c6f0:	701a      	strb	r2, [r3, #0]
 800c6f2:	e01e      	b.n	800c732 <uri_to_path2+0x2ca>
 800c6f4:	08029f1c 	.word	0x08029f1c
 800c6f8:	0802a838 	.word	0x0802a838
 800c6fc:	0802a47c 	.word	0x0802a47c
 800c700:	0802a84c 	.word	0x0802a84c
 800c704:	0802a85c 	.word	0x0802a85c
 800c708:	24000258 	.word	0x24000258
 800c70c:	0802d848 	.word	0x0802d848
 800c710:	08029c3c 	.word	0x08029c3c
 800c714:	0802a860 	.word	0x0802a860
 800c718:	0802a874 	.word	0x0802a874
 800c71c:	0802a8b0 	.word	0x0802a8b0
 800c720:	0802a8bc 	.word	0x0802a8bc
 800c724:	0802a8cc 	.word	0x0802a8cc
          '\0';  // Remove appended .gz in index file name
    } else {
      path[n] = '\0';  // Remove appended index file name
 800c728:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c72a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c72c:	4413      	add	r3, r2
 800c72e:	2200      	movs	r2, #0
 800c730:	701a      	strb	r2, [r3, #0]
    }
  }
  return flags;
 800c732:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800c734:	4618      	mov	r0, r3
 800c736:	3734      	adds	r7, #52	@ 0x34
 800c738:	46bd      	mov	sp, r7
 800c73a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800c73e:	b002      	add	sp, #8
 800c740:	4770      	bx	lr
 800c742:	bf00      	nop

0800c744 <uri_to_path>:

static int uri_to_path(struct mg_connection *c, struct mg_http_message *hm,
                       const struct mg_http_serve_opts *opts, char *path,
                       size_t path_size) {
 800c744:	b580      	push	{r7, lr}
 800c746:	b09c      	sub	sp, #112	@ 0x70
 800c748:	af06      	add	r7, sp, #24
 800c74a:	6178      	str	r0, [r7, #20]
 800c74c:	6139      	str	r1, [r7, #16]
 800c74e:	60fa      	str	r2, [r7, #12]
 800c750:	60bb      	str	r3, [r7, #8]
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	695b      	ldr	r3, [r3, #20]
 800c756:	2b00      	cmp	r3, #0
 800c758:	d002      	beq.n	800c760 <uri_to_path+0x1c>
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	695b      	ldr	r3, [r3, #20]
 800c75e:	e000      	b.n	800c762 <uri_to_path+0x1e>
 800c760:	4b5b      	ldr	r3, [pc, #364]	@ (800c8d0 <uri_to_path+0x18c>)
 800c762:	657b      	str	r3, [r7, #84]	@ 0x54
  struct mg_str k, v, part, s = mg_str(opts->root_dir), u = {NULL, 0}, p = u;
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	681a      	ldr	r2, [r3, #0]
 800c768:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800c76c:	4611      	mov	r1, r2
 800c76e:	4618      	mov	r0, r3
 800c770:	f00a f898 	bl	80168a4 <mg_str_s>
 800c774:	2300      	movs	r3, #0
 800c776:	627b      	str	r3, [r7, #36]	@ 0x24
 800c778:	2300      	movs	r3, #0
 800c77a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c77c:	f107 031c 	add.w	r3, r7, #28
 800c780:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800c784:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c788:	e883 0003 	stmia.w	r3, {r0, r1}
  while (mg_span(s, &part, &s, ',')) {
 800c78c:	e078      	b.n	800c880 <uri_to_path+0x13c>
    if (!mg_span(part, &k, &v, '=')) k = part, v = mg_str_n(NULL, 0);
 800c78e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800c792:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 800c796:	213d      	movs	r1, #61	@ 0x3d
 800c798:	9100      	str	r1, [sp, #0]
 800c79a:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 800c79e:	c903      	ldmia	r1, {r0, r1}
 800c7a0:	f00a fa7e 	bl	8016ca0 <mg_span>
 800c7a4:	4603      	mov	r3, r0
 800c7a6:	f083 0301 	eor.w	r3, r3, #1
 800c7aa:	b2db      	uxtb	r3, r3
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d014      	beq.n	800c7da <uri_to_path+0x96>
 800c7b0:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800c7b4:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800c7b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c7bc:	e883 0003 	stmia.w	r3, {r0, r1}
 800c7c0:	463b      	mov	r3, r7
 800c7c2:	2200      	movs	r2, #0
 800c7c4:	2100      	movs	r1, #0
 800c7c6:	4618      	mov	r0, r3
 800c7c8:	f00a f889 	bl	80168de <mg_str_n>
 800c7cc:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800c7d0:	463a      	mov	r2, r7
 800c7d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c7d6:	e883 0003 	stmia.w	r3, {r0, r1}
    if (v.len == 0) v = k, k = mg_str("/"), u = k, p = v;
 800c7da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d123      	bne.n	800c828 <uri_to_path+0xe4>
 800c7e0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800c7e4:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 800c7e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c7ec:	e883 0003 	stmia.w	r3, {r0, r1}
 800c7f0:	463b      	mov	r3, r7
 800c7f2:	4938      	ldr	r1, [pc, #224]	@ (800c8d4 <uri_to_path+0x190>)
 800c7f4:	4618      	mov	r0, r3
 800c7f6:	f00a f855 	bl	80168a4 <mg_str_s>
 800c7fa:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800c7fe:	463a      	mov	r2, r7
 800c800:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c804:	e883 0003 	stmia.w	r3, {r0, r1}
 800c808:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c80c:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 800c810:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c814:	e883 0003 	stmia.w	r3, {r0, r1}
 800c818:	f107 031c 	add.w	r3, r7, #28
 800c81c:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 800c820:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c824:	e883 0003 	stmia.w	r3, {r0, r1}
    if (hm->uri.len < k.len) continue;
 800c828:	693b      	ldr	r3, [r7, #16]
 800c82a:	68da      	ldr	r2, [r3, #12]
 800c82c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c82e:	429a      	cmp	r2, r3
 800c830:	d323      	bcc.n	800c87a <uri_to_path+0x136>
    if (mg_strcmp(k, mg_str_n(hm->uri.buf, k.len)) != 0) continue;
 800c832:	693b      	ldr	r3, [r7, #16]
 800c834:	6899      	ldr	r1, [r3, #8]
 800c836:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c838:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800c83c:	4618      	mov	r0, r3
 800c83e:	f00a f84e 	bl	80168de <mg_str_n>
 800c842:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800c846:	cb0c      	ldmia	r3, {r2, r3}
 800c848:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 800c84c:	c903      	ldmia	r1, {r0, r1}
 800c84e:	f00a f8aa 	bl	80169a6 <mg_strcmp>
 800c852:	4603      	mov	r3, r0
 800c854:	2b00      	cmp	r3, #0
 800c856:	d112      	bne.n	800c87e <uri_to_path+0x13a>
    u = k, p = v;
 800c858:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c85c:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 800c860:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c864:	e883 0003 	stmia.w	r3, {r0, r1}
 800c868:	f107 031c 	add.w	r3, r7, #28
 800c86c:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 800c870:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c874:	e883 0003 	stmia.w	r3, {r0, r1}
 800c878:	e002      	b.n	800c880 <uri_to_path+0x13c>
    if (hm->uri.len < k.len) continue;
 800c87a:	bf00      	nop
 800c87c:	e000      	b.n	800c880 <uri_to_path+0x13c>
    if (mg_strcmp(k, mg_str_n(hm->uri.buf, k.len)) != 0) continue;
 800c87e:	bf00      	nop
  while (mg_span(s, &part, &s, ',')) {
 800c880:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800c884:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800c888:	212c      	movs	r1, #44	@ 0x2c
 800c88a:	9100      	str	r1, [sp, #0]
 800c88c:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 800c890:	c903      	ldmia	r1, {r0, r1}
 800c892:	f00a fa05 	bl	8016ca0 <mg_span>
 800c896:	4603      	mov	r3, r0
 800c898:	2b00      	cmp	r3, #0
 800c89a:	f47f af78 	bne.w	800c78e <uri_to_path+0x4a>
  }
  return uri_to_path2(c, hm, fs, u, p, path, path_size);
 800c89e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c8a0:	9304      	str	r3, [sp, #16]
 800c8a2:	68bb      	ldr	r3, [r7, #8]
 800c8a4:	9303      	str	r3, [sp, #12]
 800c8a6:	aa01      	add	r2, sp, #4
 800c8a8:	f107 031c 	add.w	r3, r7, #28
 800c8ac:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c8b0:	e882 0003 	stmia.w	r2, {r0, r1}
 800c8b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8b6:	9300      	str	r3, [sp, #0]
 800c8b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8ba:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c8bc:	6939      	ldr	r1, [r7, #16]
 800c8be:	6978      	ldr	r0, [r7, #20]
 800c8c0:	f7ff fdd2 	bl	800c468 <uri_to_path2>
 800c8c4:	4603      	mov	r3, r0
}
 800c8c6:	4618      	mov	r0, r3
 800c8c8:	3758      	adds	r7, #88	@ 0x58
 800c8ca:	46bd      	mov	sp, r7
 800c8cc:	bd80      	pop	{r7, pc}
 800c8ce:	bf00      	nop
 800c8d0:	24000038 	.word	0x24000038
 800c8d4:	0802a85c 	.word	0x0802a85c

0800c8d8 <mg_http_serve_dir>:

void mg_http_serve_dir(struct mg_connection *c, struct mg_http_message *hm,
                       const struct mg_http_serve_opts *opts) {
 800c8d8:	b580      	push	{r7, lr}
 800c8da:	b0a6      	sub	sp, #152	@ 0x98
 800c8dc:	af02      	add	r7, sp, #8
 800c8de:	60f8      	str	r0, [r7, #12]
 800c8e0:	60b9      	str	r1, [r7, #8]
 800c8e2:	607a      	str	r2, [r7, #4]
  char path[MG_PATH_MAX];
  const char *sp = opts->ssi_pattern;
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	685b      	ldr	r3, [r3, #4]
 800c8e8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  int flags = uri_to_path(c, hm, opts, path, sizeof(path));
 800c8ec:	f107 0314 	add.w	r3, r7, #20
 800c8f0:	2264      	movs	r2, #100	@ 0x64
 800c8f2:	9200      	str	r2, [sp, #0]
 800c8f4:	687a      	ldr	r2, [r7, #4]
 800c8f6:	68b9      	ldr	r1, [r7, #8]
 800c8f8:	68f8      	ldr	r0, [r7, #12]
 800c8fa:	f7ff ff23 	bl	800c744 <uri_to_path>
 800c8fe:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
  if (flags < 0) {
 800c902:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c906:	2b00      	cmp	r3, #0
 800c908:	db41      	blt.n	800c98e <mg_http_serve_dir+0xb6>
    // Do nothing: the response has already been sent by uri_to_path()
  } else if (flags & MG_FS_DIR) {
 800c90a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c90e:	f003 0304 	and.w	r3, r3, #4
 800c912:	2b00      	cmp	r3, #0
 800c914:	d007      	beq.n	800c926 <mg_http_serve_dir+0x4e>
#if MG_ENABLE_DIRLIST
    listdir(c, hm, opts, path);
#else
    mg_http_reply(c, 403, "", "Forbidden\n");
 800c916:	4b20      	ldr	r3, [pc, #128]	@ (800c998 <mg_http_serve_dir+0xc0>)
 800c918:	4a20      	ldr	r2, [pc, #128]	@ (800c99c <mg_http_serve_dir+0xc4>)
 800c91a:	f240 1193 	movw	r1, #403	@ 0x193
 800c91e:	68f8      	ldr	r0, [r7, #12]
 800c920:	f7ff f8c8 	bl	800bab4 <mg_http_reply>
  } else if (flags && sp != NULL && mg_match(mg_str(path), mg_str(sp), NULL)) {
    mg_http_serve_ssi(c, opts->root_dir, path);
  } else {
    mg_http_serve_file(c, hm, path, opts);
  }
}
 800c924:	e033      	b.n	800c98e <mg_http_serve_dir+0xb6>
  } else if (flags && sp != NULL && mg_match(mg_str(path), mg_str(sp), NULL)) {
 800c926:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d028      	beq.n	800c980 <mg_http_serve_dir+0xa8>
 800c92e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c932:	2b00      	cmp	r3, #0
 800c934:	d024      	beq.n	800c980 <mg_http_serve_dir+0xa8>
 800c936:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 800c93a:	f107 0214 	add.w	r2, r7, #20
 800c93e:	4611      	mov	r1, r2
 800c940:	4618      	mov	r0, r3
 800c942:	f009 ffaf 	bl	80168a4 <mg_str_s>
 800c946:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800c94a:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 800c94e:	4618      	mov	r0, r3
 800c950:	f009 ffa8 	bl	80168a4 <mg_str_s>
 800c954:	2300      	movs	r3, #0
 800c956:	9300      	str	r3, [sp, #0]
 800c958:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800c95c:	cb0c      	ldmia	r3, {r2, r3}
 800c95e:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 800c962:	c903      	ldmia	r1, {r0, r1}
 800c964:	f00a f8a8 	bl	8016ab8 <mg_match>
 800c968:	4603      	mov	r3, r0
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d008      	beq.n	800c980 <mg_http_serve_dir+0xa8>
    mg_http_serve_ssi(c, opts->root_dir, path);
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	f107 0214 	add.w	r2, r7, #20
 800c976:	4619      	mov	r1, r3
 800c978:	68f8      	ldr	r0, [r7, #12]
 800c97a:	f009 ff7f 	bl	801687c <mg_http_serve_ssi>
}
 800c97e:	e006      	b.n	800c98e <mg_http_serve_dir+0xb6>
    mg_http_serve_file(c, hm, path, opts);
 800c980:	f107 0214 	add.w	r2, r7, #20
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	68b9      	ldr	r1, [r7, #8]
 800c988:	68f8      	ldr	r0, [r7, #12]
 800c98a:	f7ff fa9b 	bl	800bec4 <mg_http_serve_file>
}
 800c98e:	bf00      	nop
 800c990:	3790      	adds	r7, #144	@ 0x90
 800c992:	46bd      	mov	sp, r7
 800c994:	bd80      	pop	{r7, pc}
 800c996:	bf00      	nop
 800c998:	0802a8dc 	.word	0x0802a8dc
 800c99c:	0802a47c 	.word	0x0802a47c

0800c9a0 <mg_http_creds>:
  if (len > 0) buf[len - 1] = '\0';           // Always.
  return n;
}

void mg_http_creds(struct mg_http_message *hm, char *user, size_t userlen,
                   char *pass, size_t passlen) {
 800c9a0:	b590      	push	{r4, r7, lr}
 800c9a2:	b0cf      	sub	sp, #316	@ 0x13c
 800c9a4:	af02      	add	r7, sp, #8
 800c9a6:	f507 7498 	add.w	r4, r7, #304	@ 0x130
 800c9aa:	f5a4 7492 	sub.w	r4, r4, #292	@ 0x124
 800c9ae:	6020      	str	r0, [r4, #0]
 800c9b0:	f507 7098 	add.w	r0, r7, #304	@ 0x130
 800c9b4:	f5a0 7094 	sub.w	r0, r0, #296	@ 0x128
 800c9b8:	6001      	str	r1, [r0, #0]
 800c9ba:	f507 7198 	add.w	r1, r7, #304	@ 0x130
 800c9be:	f5a1 7196 	sub.w	r1, r1, #300	@ 0x12c
 800c9c2:	600a      	str	r2, [r1, #0]
 800c9c4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800c9c8:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 800c9cc:	6013      	str	r3, [r2, #0]
  struct mg_str *v = mg_http_get_header(hm, "Authorization");
 800c9ce:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c9d2:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800c9d6:	497a      	ldr	r1, [pc, #488]	@ (800cbc0 <mg_http_creds+0x220>)
 800c9d8:	6818      	ldr	r0, [r3, #0]
 800c9da:	f7fd fff5 	bl	800a9c8 <mg_http_get_header>
 800c9de:	f8c7 012c 	str.w	r0, [r7, #300]	@ 0x12c
  user[0] = pass[0] = '\0';
 800c9e2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c9e6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	2200      	movs	r2, #0
 800c9ee:	701a      	strb	r2, [r3, #0]
 800c9f0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c9f4:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	781a      	ldrb	r2, [r3, #0]
 800c9fc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ca00:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	701a      	strb	r2, [r3, #0]
  if (v != NULL && v->len > 6 && memcmp(v->buf, "Basic ", 6) == 0) {
 800ca08:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d05e      	beq.n	800cace <mg_http_creds+0x12e>
 800ca10:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ca14:	685b      	ldr	r3, [r3, #4]
 800ca16:	2b06      	cmp	r3, #6
 800ca18:	d959      	bls.n	800cace <mg_http_creds+0x12e>
 800ca1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	2206      	movs	r2, #6
 800ca22:	4968      	ldr	r1, [pc, #416]	@ (800cbc4 <mg_http_creds+0x224>)
 800ca24:	4618      	mov	r0, r3
 800ca26:	f01a fe25 	bl	8027674 <memcmp>
 800ca2a:	4603      	mov	r3, r0
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d14e      	bne.n	800cace <mg_http_creds+0x12e>
    char buf[256];
    size_t n = mg_base64_decode(v->buf + 6, v->len - 6, buf, sizeof(buf));
 800ca30:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	1d98      	adds	r0, r3, #6
 800ca38:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ca3c:	685b      	ldr	r3, [r3, #4]
 800ca3e:	1f99      	subs	r1, r3, #6
 800ca40:	f107 0214 	add.w	r2, r7, #20
 800ca44:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ca48:	f7fb fa10 	bl	8007e6c <mg_base64_decode>
 800ca4c:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128
    const char *p = (const char *) memchr(buf, ':', n > 0 ? n : 0);
 800ca50:	f107 0314 	add.w	r3, r7, #20
 800ca54:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800ca58:	213a      	movs	r1, #58	@ 0x3a
 800ca5a:	4618      	mov	r0, r3
 800ca5c:	f7f3 fc68 	bl	8000330 <memchr>
 800ca60:	f8c7 0124 	str.w	r0, [r7, #292]	@ 0x124
    if (p != NULL) {
 800ca64:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	f000 80a2 	beq.w	800cbb2 <mg_http_creds+0x212>
      mg_snprintf(user, userlen, "%.*s", p - buf, buf);
 800ca6e:	f107 0314 	add.w	r3, r7, #20
 800ca72:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800ca76:	1ad2      	subs	r2, r2, r3
 800ca78:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ca7c:	f5a3 7196 	sub.w	r1, r3, #300	@ 0x12c
 800ca80:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ca84:	f5a3 7094 	sub.w	r0, r3, #296	@ 0x128
 800ca88:	f107 0314 	add.w	r3, r7, #20
 800ca8c:	9300      	str	r3, [sp, #0]
 800ca8e:	4613      	mov	r3, r2
 800ca90:	4a4d      	ldr	r2, [pc, #308]	@ (800cbc8 <mg_http_creds+0x228>)
 800ca92:	6809      	ldr	r1, [r1, #0]
 800ca94:	6800      	ldr	r0, [r0, #0]
 800ca96:	f006 fb41 	bl	801311c <mg_snprintf>
      mg_snprintf(pass, passlen, "%.*s", n - (size_t) (p - buf) - 1, p + 1);
 800ca9a:	f107 0314 	add.w	r3, r7, #20
 800ca9e:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800caa2:	1ad3      	subs	r3, r2, r3
 800caa4:	461a      	mov	r2, r3
 800caa6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800caaa:	1a9b      	subs	r3, r3, r2
 800caac:	1e5a      	subs	r2, r3, #1
 800caae:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800cab2:	3301      	adds	r3, #1
 800cab4:	f507 7198 	add.w	r1, r7, #304	@ 0x130
 800cab8:	f5a1 7098 	sub.w	r0, r1, #304	@ 0x130
 800cabc:	9300      	str	r3, [sp, #0]
 800cabe:	4613      	mov	r3, r2
 800cac0:	4a41      	ldr	r2, [pc, #260]	@ (800cbc8 <mg_http_creds+0x228>)
 800cac2:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800cac6:	6800      	ldr	r0, [r0, #0]
 800cac8:	f006 fb28 	bl	801311c <mg_snprintf>
  if (v != NULL && v->len > 6 && memcmp(v->buf, "Basic ", 6) == 0) {
 800cacc:	e071      	b.n	800cbb2 <mg_http_creds+0x212>
    }
  } else if (v != NULL && v->len > 7 && memcmp(v->buf, "Bearer ", 7) == 0) {
 800cace:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d024      	beq.n	800cb20 <mg_http_creds+0x180>
 800cad6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800cada:	685b      	ldr	r3, [r3, #4]
 800cadc:	2b07      	cmp	r3, #7
 800cade:	d91f      	bls.n	800cb20 <mg_http_creds+0x180>
 800cae0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	2207      	movs	r2, #7
 800cae8:	4938      	ldr	r1, [pc, #224]	@ (800cbcc <mg_http_creds+0x22c>)
 800caea:	4618      	mov	r0, r3
 800caec:	f01a fdc2 	bl	8027674 <memcmp>
 800caf0:	4603      	mov	r3, r0
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d114      	bne.n	800cb20 <mg_http_creds+0x180>
    mg_snprintf(pass, passlen, "%.*s", (int) v->len - 7, v->buf + 7);
 800caf6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800cafa:	685b      	ldr	r3, [r3, #4]
 800cafc:	1fda      	subs	r2, r3, #7
 800cafe:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	3307      	adds	r3, #7
 800cb06:	f507 7198 	add.w	r1, r7, #304	@ 0x130
 800cb0a:	f5a1 7098 	sub.w	r0, r1, #304	@ 0x130
 800cb0e:	9300      	str	r3, [sp, #0]
 800cb10:	4613      	mov	r3, r2
 800cb12:	4a2d      	ldr	r2, [pc, #180]	@ (800cbc8 <mg_http_creds+0x228>)
 800cb14:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800cb18:	6800      	ldr	r0, [r0, #0]
 800cb1a:	f006 faff 	bl	801311c <mg_snprintf>
 800cb1e:	e049      	b.n	800cbb4 <mg_http_creds+0x214>
  } else if ((v = mg_http_get_header(hm, "Cookie")) != NULL) {
 800cb20:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800cb24:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800cb28:	4929      	ldr	r1, [pc, #164]	@ (800cbd0 <mg_http_creds+0x230>)
 800cb2a:	6818      	ldr	r0, [r3, #0]
 800cb2c:	f7fd ff4c 	bl	800a9c8 <mg_http_get_header>
 800cb30:	f8c7 012c 	str.w	r0, [r7, #300]	@ 0x12c
 800cb34:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d028      	beq.n	800cb8e <mg_http_creds+0x1ee>
    struct mg_str t = mg_http_get_header_var(*v, mg_str_n("access_token", 12));
 800cb3c:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 800cb40:	220c      	movs	r2, #12
 800cb42:	4924      	ldr	r1, [pc, #144]	@ (800cbd4 <mg_http_creds+0x234>)
 800cb44:	4618      	mov	r0, r3
 800cb46:	f009 feca 	bl	80168de <mg_str_n>
 800cb4a:	f507 708a 	add.w	r0, r7, #276	@ 0x114
 800cb4e:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 800cb52:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800cb56:	9300      	str	r3, [sp, #0]
 800cb58:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800cb5c:	ca06      	ldmia	r2, {r1, r2}
 800cb5e:	f000 f864 	bl	800cc2a <mg_http_get_header_var>
    if (t.len > 0) mg_snprintf(pass, passlen, "%.*s", (int) t.len, t.buf);
 800cb62:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d024      	beq.n	800cbb4 <mg_http_creds+0x214>
 800cb6a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800cb6e:	4619      	mov	r1, r3
 800cb70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cb74:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800cb78:	f5a2 7098 	sub.w	r0, r2, #304	@ 0x130
 800cb7c:	9300      	str	r3, [sp, #0]
 800cb7e:	460b      	mov	r3, r1
 800cb80:	4a11      	ldr	r2, [pc, #68]	@ (800cbc8 <mg_http_creds+0x228>)
 800cb82:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800cb86:	6800      	ldr	r0, [r0, #0]
 800cb88:	f006 fac8 	bl	801311c <mg_snprintf>
  } else {
    mg_http_get_var(&hm->query, "access_token", pass, passlen);
  }
}
 800cb8c:	e012      	b.n	800cbb4 <mg_http_creds+0x214>
    mg_http_get_var(&hm->query, "access_token", pass, passlen);
 800cb8e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800cb92:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	f103 0010 	add.w	r0, r3, #16
 800cb9c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800cba0:	f5a3 7298 	sub.w	r2, r3, #304	@ 0x130
 800cba4:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800cba8:	6812      	ldr	r2, [r2, #0]
 800cbaa:	490a      	ldr	r1, [pc, #40]	@ (800cbd4 <mg_http_creds+0x234>)
 800cbac:	f7fd fda4 	bl	800a6f8 <mg_http_get_var>
}
 800cbb0:	e000      	b.n	800cbb4 <mg_http_creds+0x214>
  if (v != NULL && v->len > 6 && memcmp(v->buf, "Basic ", 6) == 0) {
 800cbb2:	bf00      	nop
}
 800cbb4:	bf00      	nop
 800cbb6:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 800cbba:	46bd      	mov	sp, r7
 800cbbc:	bd90      	pop	{r4, r7, pc}
 800cbbe:	bf00      	nop
 800cbc0:	0802a8f0 	.word	0x0802a8f0
 800cbc4:	0802a900 	.word	0x0802a900
 800cbc8:	08029f1c 	.word	0x08029f1c
 800cbcc:	0802a908 	.word	0x0802a908
 800cbd0:	0802a910 	.word	0x0802a910
 800cbd4:	0802a918 	.word	0x0802a918

0800cbd8 <stripquotes>:

static struct mg_str stripquotes(struct mg_str s) {
 800cbd8:	b580      	push	{r7, lr}
 800cbda:	b084      	sub	sp, #16
 800cbdc:	af00      	add	r7, sp, #0
 800cbde:	60f8      	str	r0, [r7, #12]
 800cbe0:	1d3b      	adds	r3, r7, #4
 800cbe2:	e883 0006 	stmia.w	r3, {r1, r2}
  return s.len > 1 && s.buf[0] == '"' && s.buf[s.len - 1] == '"'
 800cbe6:	68bb      	ldr	r3, [r7, #8]
             ? mg_str_n(s.buf + 1, s.len - 2)
             : s;
 800cbe8:	2b01      	cmp	r3, #1
 800cbea:	d913      	bls.n	800cc14 <stripquotes+0x3c>
  return s.len > 1 && s.buf[0] == '"' && s.buf[s.len - 1] == '"'
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	781b      	ldrb	r3, [r3, #0]
 800cbf0:	2b22      	cmp	r3, #34	@ 0x22
 800cbf2:	d10f      	bne.n	800cc14 <stripquotes+0x3c>
 800cbf4:	687a      	ldr	r2, [r7, #4]
 800cbf6:	68bb      	ldr	r3, [r7, #8]
 800cbf8:	3b01      	subs	r3, #1
 800cbfa:	4413      	add	r3, r2
 800cbfc:	781b      	ldrb	r3, [r3, #0]
 800cbfe:	2b22      	cmp	r3, #34	@ 0x22
 800cc00:	d108      	bne.n	800cc14 <stripquotes+0x3c>
             ? mg_str_n(s.buf + 1, s.len - 2)
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	1c59      	adds	r1, r3, #1
 800cc06:	68bb      	ldr	r3, [r7, #8]
 800cc08:	1e9a      	subs	r2, r3, #2
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	4618      	mov	r0, r3
 800cc0e:	f009 fe66 	bl	80168de <mg_str_n>
             : s;
 800cc12:	e006      	b.n	800cc22 <stripquotes+0x4a>
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	461a      	mov	r2, r3
 800cc18:	1d3b      	adds	r3, r7, #4
 800cc1a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800cc1e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800cc22:	68f8      	ldr	r0, [r7, #12]
 800cc24:	3710      	adds	r7, #16
 800cc26:	46bd      	mov	sp, r7
 800cc28:	bd80      	pop	{r7, pc}

0800cc2a <mg_http_get_header_var>:

struct mg_str mg_http_get_header_var(struct mg_str s, struct mg_str v) {
 800cc2a:	b082      	sub	sp, #8
 800cc2c:	b580      	push	{r7, lr}
 800cc2e:	b08c      	sub	sp, #48	@ 0x30
 800cc30:	af00      	add	r7, sp, #0
 800cc32:	60f8      	str	r0, [r7, #12]
 800cc34:	1d38      	adds	r0, r7, #4
 800cc36:	e880 0006 	stmia.w	r0, {r1, r2}
 800cc3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  size_t i;
  for (i = 0; v.len > 0 && i + v.len + 2 < s.len; i++) {
 800cc3c:	2300      	movs	r3, #0
 800cc3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cc40:	e072      	b.n	800cd28 <mg_http_get_header_var+0xfe>
    if (s.buf[i + v.len] == '=' && memcmp(&s.buf[i], v.buf, v.len) == 0) {
 800cc42:	687a      	ldr	r2, [r7, #4]
 800cc44:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800cc46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc48:	440b      	add	r3, r1
 800cc4a:	4413      	add	r3, r2
 800cc4c:	781b      	ldrb	r3, [r3, #0]
 800cc4e:	2b3d      	cmp	r3, #61	@ 0x3d
 800cc50:	d167      	bne.n	800cd22 <mg_http_get_header_var+0xf8>
 800cc52:	687a      	ldr	r2, [r7, #4]
 800cc54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc56:	4413      	add	r3, r2
 800cc58:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800cc5a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800cc5c:	4618      	mov	r0, r3
 800cc5e:	f01a fd09 	bl	8027674 <memcmp>
 800cc62:	4603      	mov	r3, r0
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d15c      	bne.n	800cd22 <mg_http_get_header_var+0xf8>
      const char *p = &s.buf[i + v.len + 1], *b = p, *x = &s.buf[s.len];
 800cc68:	687a      	ldr	r2, [r7, #4]
 800cc6a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800cc6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc6e:	440b      	add	r3, r1
 800cc70:	3301      	adds	r3, #1
 800cc72:	4413      	add	r3, r2
 800cc74:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cc76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc78:	627b      	str	r3, [r7, #36]	@ 0x24
 800cc7a:	687a      	ldr	r2, [r7, #4]
 800cc7c:	68bb      	ldr	r3, [r7, #8]
 800cc7e:	4413      	add	r3, r2
 800cc80:	623b      	str	r3, [r7, #32]
      int q = p < x && *p == '"' ? 1 : 0;
 800cc82:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cc84:	6a3b      	ldr	r3, [r7, #32]
 800cc86:	429a      	cmp	r2, r3
 800cc88:	d205      	bcs.n	800cc96 <mg_http_get_header_var+0x6c>
 800cc8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc8c:	781b      	ldrb	r3, [r3, #0]
 800cc8e:	2b22      	cmp	r3, #34	@ 0x22
 800cc90:	d101      	bne.n	800cc96 <mg_http_get_header_var+0x6c>
 800cc92:	2301      	movs	r3, #1
 800cc94:	e000      	b.n	800cc98 <mg_http_get_header_var+0x6e>
 800cc96:	2300      	movs	r3, #0
 800cc98:	61fb      	str	r3, [r7, #28]
      while (p < x &&
 800cc9a:	e002      	b.n	800cca2 <mg_http_get_header_var+0x78>
             (q ? p == b || *p != '"' : *p != ';' && *p != ' ' && *p != ','))
        p++;
 800cc9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc9e:	3301      	adds	r3, #1
 800cca0:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (p < x &&
 800cca2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cca4:	6a3b      	ldr	r3, [r7, #32]
 800cca6:	429a      	cmp	r2, r3
 800cca8:	d227      	bcs.n	800ccfa <mg_http_get_header_var+0xd0>
 800ccaa:	69fb      	ldr	r3, [r7, #28]
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d010      	beq.n	800ccd2 <mg_http_get_header_var+0xa8>
             (q ? p == b || *p != '"' : *p != ';' && *p != ' ' && *p != ','))
 800ccb0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ccb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccb4:	429a      	cmp	r2, r3
 800ccb6:	d003      	beq.n	800ccc0 <mg_http_get_header_var+0x96>
 800ccb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ccba:	781b      	ldrb	r3, [r3, #0]
 800ccbc:	2b22      	cmp	r3, #34	@ 0x22
 800ccbe:	d001      	beq.n	800ccc4 <mg_http_get_header_var+0x9a>
 800ccc0:	2301      	movs	r3, #1
 800ccc2:	e000      	b.n	800ccc6 <mg_http_get_header_var+0x9c>
 800ccc4:	2300      	movs	r3, #0
      while (p < x &&
 800ccc6:	f003 0301 	and.w	r3, r3, #1
 800ccca:	b2db      	uxtb	r3, r3
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d1e5      	bne.n	800cc9c <mg_http_get_header_var+0x72>
 800ccd0:	e013      	b.n	800ccfa <mg_http_get_header_var+0xd0>
             (q ? p == b || *p != '"' : *p != ';' && *p != ' ' && *p != ','))
 800ccd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ccd4:	781b      	ldrb	r3, [r3, #0]
 800ccd6:	2b3b      	cmp	r3, #59	@ 0x3b
 800ccd8:	d009      	beq.n	800ccee <mg_http_get_header_var+0xc4>
 800ccda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ccdc:	781b      	ldrb	r3, [r3, #0]
 800ccde:	2b20      	cmp	r3, #32
 800cce0:	d005      	beq.n	800ccee <mg_http_get_header_var+0xc4>
 800cce2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cce4:	781b      	ldrb	r3, [r3, #0]
 800cce6:	2b2c      	cmp	r3, #44	@ 0x2c
 800cce8:	d001      	beq.n	800ccee <mg_http_get_header_var+0xc4>
 800ccea:	2301      	movs	r3, #1
 800ccec:	e000      	b.n	800ccf0 <mg_http_get_header_var+0xc6>
 800ccee:	2300      	movs	r3, #0
      while (p < x &&
 800ccf0:	f003 0301 	and.w	r3, r3, #1
 800ccf4:	b2db      	uxtb	r3, r3
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d1d0      	bne.n	800cc9c <mg_http_get_header_var+0x72>
      // MG_INFO(("[%.*s] [%.*s] [%.*s]", (int) s.len, s.buf, (int) v.len,
      // v.buf, (int) (p - b), b));
      return stripquotes(mg_str_n(b, (size_t) (p - b + q)));
 800ccfa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ccfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccfe:	1ad2      	subs	r2, r2, r3
 800cd00:	69fb      	ldr	r3, [r7, #28]
 800cd02:	4413      	add	r3, r2
 800cd04:	461a      	mov	r2, r3
 800cd06:	f107 0314 	add.w	r3, r7, #20
 800cd0a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800cd0c:	4618      	mov	r0, r3
 800cd0e:	f009 fde6 	bl	80168de <mg_str_n>
 800cd12:	68f8      	ldr	r0, [r7, #12]
 800cd14:	f107 0314 	add.w	r3, r7, #20
 800cd18:	e893 0006 	ldmia.w	r3, {r1, r2}
 800cd1c:	f7ff ff5c 	bl	800cbd8 <stripquotes>
 800cd20:	e012      	b.n	800cd48 <mg_http_get_header_var+0x11e>
  for (i = 0; v.len > 0 && i + v.len + 2 < s.len; i++) {
 800cd22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd24:	3301      	adds	r3, #1
 800cd26:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cd28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d006      	beq.n	800cd3c <mg_http_get_header_var+0x112>
 800cd2e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800cd30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd32:	4413      	add	r3, r2
 800cd34:	1c9a      	adds	r2, r3, #2
 800cd36:	68bb      	ldr	r3, [r7, #8]
 800cd38:	429a      	cmp	r2, r3
 800cd3a:	d382      	bcc.n	800cc42 <mg_http_get_header_var+0x18>
    }
  }
  return mg_str_n(NULL, 0);
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	2200      	movs	r2, #0
 800cd40:	2100      	movs	r1, #0
 800cd42:	4618      	mov	r0, r3
 800cd44:	f009 fdcb 	bl	80168de <mg_str_n>
}
 800cd48:	68f8      	ldr	r0, [r7, #12]
 800cd4a:	3730      	adds	r7, #48	@ 0x30
 800cd4c:	46bd      	mov	sp, r7
 800cd4e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800cd52:	b002      	add	sp, #8
 800cd54:	4770      	bx	lr

0800cd56 <mg_http_status>:
    }
  }
  return res;
}

int mg_http_status(const struct mg_http_message *hm) {
 800cd56:	b580      	push	{r7, lr}
 800cd58:	b082      	sub	sp, #8
 800cd5a:	af00      	add	r7, sp, #0
 800cd5c:	6078      	str	r0, [r7, #4]
  return atoi(hm->uri.buf);
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	689b      	ldr	r3, [r3, #8]
 800cd62:	4618      	mov	r0, r3
 800cd64:	f018 fdfd 	bl	8025962 <atoi>
 800cd68:	4603      	mov	r3, r0
}
 800cd6a:	4618      	mov	r0, r3
 800cd6c:	3708      	adds	r7, #8
 800cd6e:	46bd      	mov	sp, r7
 800cd70:	bd80      	pop	{r7, pc}

0800cd72 <is_hex_digit>:

static bool is_hex_digit(int c) {
 800cd72:	b480      	push	{r7}
 800cd74:	b083      	sub	sp, #12
 800cd76:	af00      	add	r7, sp, #0
 800cd78:	6078      	str	r0, [r7, #4]
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	2b2f      	cmp	r3, #47	@ 0x2f
 800cd7e:	dd02      	ble.n	800cd86 <is_hex_digit+0x14>
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	2b39      	cmp	r3, #57	@ 0x39
 800cd84:	dd0b      	ble.n	800cd9e <is_hex_digit+0x2c>
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	2b60      	cmp	r3, #96	@ 0x60
 800cd8a:	dd02      	ble.n	800cd92 <is_hex_digit+0x20>
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	2b66      	cmp	r3, #102	@ 0x66
 800cd90:	dd05      	ble.n	800cd9e <is_hex_digit+0x2c>
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	2b40      	cmp	r3, #64	@ 0x40
 800cd96:	dd04      	ble.n	800cda2 <is_hex_digit+0x30>
         (c >= 'A' && c <= 'F');
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	2b46      	cmp	r3, #70	@ 0x46
 800cd9c:	dc01      	bgt.n	800cda2 <is_hex_digit+0x30>
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 800cd9e:	2301      	movs	r3, #1
 800cda0:	e000      	b.n	800cda4 <is_hex_digit+0x32>
 800cda2:	2300      	movs	r3, #0
 800cda4:	f003 0301 	and.w	r3, r3, #1
 800cda8:	b2db      	uxtb	r3, r3
}
 800cdaa:	4618      	mov	r0, r3
 800cdac:	370c      	adds	r7, #12
 800cdae:	46bd      	mov	sp, r7
 800cdb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdb4:	4770      	bx	lr

0800cdb6 <skip_chunk>:

static int skip_chunk(const char *buf, int len, int *pl, int *dl) {
 800cdb6:	b580      	push	{r7, lr}
 800cdb8:	b08a      	sub	sp, #40	@ 0x28
 800cdba:	af02      	add	r7, sp, #8
 800cdbc:	60f8      	str	r0, [r7, #12]
 800cdbe:	60b9      	str	r1, [r7, #8]
 800cdc0:	607a      	str	r2, [r7, #4]
 800cdc2:	603b      	str	r3, [r7, #0]
  int i = 0, n = 0;
 800cdc4:	2300      	movs	r3, #0
 800cdc6:	61fb      	str	r3, [r7, #28]
 800cdc8:	2300      	movs	r3, #0
 800cdca:	613b      	str	r3, [r7, #16]
  if (len < 3) return 0;
 800cdcc:	68bb      	ldr	r3, [r7, #8]
 800cdce:	2b02      	cmp	r3, #2
 800cdd0:	dc04      	bgt.n	800cddc <skip_chunk+0x26>
 800cdd2:	2300      	movs	r3, #0
 800cdd4:	e07a      	b.n	800cecc <skip_chunk+0x116>
  while (i < len && is_hex_digit(buf[i])) i++;
 800cdd6:	69fb      	ldr	r3, [r7, #28]
 800cdd8:	3301      	adds	r3, #1
 800cdda:	61fb      	str	r3, [r7, #28]
 800cddc:	69fa      	ldr	r2, [r7, #28]
 800cdde:	68bb      	ldr	r3, [r7, #8]
 800cde0:	429a      	cmp	r2, r3
 800cde2:	da09      	bge.n	800cdf8 <skip_chunk+0x42>
 800cde4:	69fb      	ldr	r3, [r7, #28]
 800cde6:	68fa      	ldr	r2, [r7, #12]
 800cde8:	4413      	add	r3, r2
 800cdea:	781b      	ldrb	r3, [r3, #0]
 800cdec:	4618      	mov	r0, r3
 800cdee:	f7ff ffc0 	bl	800cd72 <is_hex_digit>
 800cdf2:	4603      	mov	r3, r0
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d1ee      	bne.n	800cdd6 <skip_chunk+0x20>
  if (i == 0) return -1;                     // Error, no length specified
 800cdf8:	69fb      	ldr	r3, [r7, #28]
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d102      	bne.n	800ce04 <skip_chunk+0x4e>
 800cdfe:	f04f 33ff 	mov.w	r3, #4294967295
 800ce02:	e063      	b.n	800cecc <skip_chunk+0x116>
  if (i > (int) sizeof(int) * 2) return -1;  // Chunk length is too big
 800ce04:	69fb      	ldr	r3, [r7, #28]
 800ce06:	2b08      	cmp	r3, #8
 800ce08:	dd02      	ble.n	800ce10 <skip_chunk+0x5a>
 800ce0a:	f04f 33ff 	mov.w	r3, #4294967295
 800ce0e:	e05d      	b.n	800cecc <skip_chunk+0x116>
  if (len < i + 1 || buf[i] != '\r' || buf[i + 1] != '\n') return -1;  // Error
 800ce10:	69fa      	ldr	r2, [r7, #28]
 800ce12:	68bb      	ldr	r3, [r7, #8]
 800ce14:	429a      	cmp	r2, r3
 800ce16:	da0c      	bge.n	800ce32 <skip_chunk+0x7c>
 800ce18:	69fb      	ldr	r3, [r7, #28]
 800ce1a:	68fa      	ldr	r2, [r7, #12]
 800ce1c:	4413      	add	r3, r2
 800ce1e:	781b      	ldrb	r3, [r3, #0]
 800ce20:	2b0d      	cmp	r3, #13
 800ce22:	d106      	bne.n	800ce32 <skip_chunk+0x7c>
 800ce24:	69fb      	ldr	r3, [r7, #28]
 800ce26:	3301      	adds	r3, #1
 800ce28:	68fa      	ldr	r2, [r7, #12]
 800ce2a:	4413      	add	r3, r2
 800ce2c:	781b      	ldrb	r3, [r3, #0]
 800ce2e:	2b0a      	cmp	r3, #10
 800ce30:	d002      	beq.n	800ce38 <skip_chunk+0x82>
 800ce32:	f04f 33ff 	mov.w	r3, #4294967295
 800ce36:	e049      	b.n	800cecc <skip_chunk+0x116>
  if (mg_str_to_num(mg_str_n(buf, (size_t) i), 16, &n, sizeof(int)) == false)
 800ce38:	69fa      	ldr	r2, [r7, #28]
 800ce3a:	f107 0314 	add.w	r3, r7, #20
 800ce3e:	68f9      	ldr	r1, [r7, #12]
 800ce40:	4618      	mov	r0, r3
 800ce42:	f009 fd4c 	bl	80168de <mg_str_n>
 800ce46:	f107 0310 	add.w	r3, r7, #16
 800ce4a:	2204      	movs	r2, #4
 800ce4c:	9200      	str	r2, [sp, #0]
 800ce4e:	2210      	movs	r2, #16
 800ce50:	f107 0114 	add.w	r1, r7, #20
 800ce54:	c903      	ldmia	r1, {r0, r1}
 800ce56:	f009 ff80 	bl	8016d5a <mg_str_to_num>
 800ce5a:	4603      	mov	r3, r0
 800ce5c:	f083 0301 	eor.w	r3, r3, #1
 800ce60:	b2db      	uxtb	r3, r3
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d002      	beq.n	800ce6c <skip_chunk+0xb6>
    return -1;                    // Decode chunk length, overflow
 800ce66:	f04f 33ff 	mov.w	r3, #4294967295
 800ce6a:	e02f      	b.n	800cecc <skip_chunk+0x116>
  if (n < 0) return -1;           // Error. TODO(): some checks now redundant
 800ce6c:	693b      	ldr	r3, [r7, #16]
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	da02      	bge.n	800ce78 <skip_chunk+0xc2>
 800ce72:	f04f 33ff 	mov.w	r3, #4294967295
 800ce76:	e029      	b.n	800cecc <skip_chunk+0x116>
  if (n > len - i - 4) return 0;  // Chunk not yet fully buffered
 800ce78:	68ba      	ldr	r2, [r7, #8]
 800ce7a:	69fb      	ldr	r3, [r7, #28]
 800ce7c:	1ad3      	subs	r3, r2, r3
 800ce7e:	1eda      	subs	r2, r3, #3
 800ce80:	693b      	ldr	r3, [r7, #16]
 800ce82:	429a      	cmp	r2, r3
 800ce84:	dc01      	bgt.n	800ce8a <skip_chunk+0xd4>
 800ce86:	2300      	movs	r3, #0
 800ce88:	e020      	b.n	800cecc <skip_chunk+0x116>
  if (buf[i + n + 2] != '\r' || buf[i + n + 3] != '\n') return -1;  // Error
 800ce8a:	693a      	ldr	r2, [r7, #16]
 800ce8c:	69fb      	ldr	r3, [r7, #28]
 800ce8e:	4413      	add	r3, r2
 800ce90:	3302      	adds	r3, #2
 800ce92:	68fa      	ldr	r2, [r7, #12]
 800ce94:	4413      	add	r3, r2
 800ce96:	781b      	ldrb	r3, [r3, #0]
 800ce98:	2b0d      	cmp	r3, #13
 800ce9a:	d108      	bne.n	800ceae <skip_chunk+0xf8>
 800ce9c:	693a      	ldr	r2, [r7, #16]
 800ce9e:	69fb      	ldr	r3, [r7, #28]
 800cea0:	4413      	add	r3, r2
 800cea2:	3303      	adds	r3, #3
 800cea4:	68fa      	ldr	r2, [r7, #12]
 800cea6:	4413      	add	r3, r2
 800cea8:	781b      	ldrb	r3, [r3, #0]
 800ceaa:	2b0a      	cmp	r3, #10
 800ceac:	d002      	beq.n	800ceb4 <skip_chunk+0xfe>
 800ceae:	f04f 33ff 	mov.w	r3, #4294967295
 800ceb2:	e00b      	b.n	800cecc <skip_chunk+0x116>
  *pl = i + 2, *dl = n;
 800ceb4:	69fb      	ldr	r3, [r7, #28]
 800ceb6:	1c9a      	adds	r2, r3, #2
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	601a      	str	r2, [r3, #0]
 800cebc:	693a      	ldr	r2, [r7, #16]
 800cebe:	683b      	ldr	r3, [r7, #0]
 800cec0:	601a      	str	r2, [r3, #0]
  return i + 2 + n + 2;
 800cec2:	69fb      	ldr	r3, [r7, #28]
 800cec4:	1c9a      	adds	r2, r3, #2
 800cec6:	693b      	ldr	r3, [r7, #16]
 800cec8:	4413      	add	r3, r2
 800ceca:	3302      	adds	r3, #2
}
 800cecc:	4618      	mov	r0, r3
 800cece:	3720      	adds	r7, #32
 800ced0:	46bd      	mov	sp, r7
 800ced2:	bd80      	pop	{r7, pc}

0800ced4 <http_cb>:

static void http_cb(struct mg_connection *c, int ev, void *ev_data) {
 800ced4:	b580      	push	{r7, lr}
 800ced6:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800ceda:	af00      	add	r7, sp, #0
 800cedc:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800cee0:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800cee4:	6018      	str	r0, [r3, #0]
 800cee6:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800ceea:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 800ceee:	6019      	str	r1, [r3, #0]
 800cef0:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800cef4:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 800cef8:	601a      	str	r2, [r3, #0]
  if (ev == MG_EV_READ || ev == MG_EV_CLOSE ||
 800cefa:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800cefe:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	2b07      	cmp	r3, #7
 800cf06:	d031      	beq.n	800cf6c <http_cb+0x98>
 800cf08:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800cf0c:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	2b09      	cmp	r3, #9
 800cf14:	d02a      	beq.n	800cf6c <http_cb+0x98>
 800cf16:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800cf1a:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	2b02      	cmp	r3, #2
 800cf22:	f040 8368 	bne.w	800d5f6 <http_cb+0x722>
      (ev == MG_EV_POLL && c->is_accepted && !c->is_draining &&
 800cf26:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800cf2a:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800cf34:	f003 0304 	and.w	r3, r3, #4
 800cf38:	b2db      	uxtb	r3, r3
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	f000 835b 	beq.w	800d5f6 <http_cb+0x722>
 800cf40:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800cf44:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800cf4e:	f003 0310 	and.w	r3, r3, #16
 800cf52:	b2db      	uxtb	r3, r3
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	f040 834e 	bne.w	800d5f6 <http_cb+0x722>
       c->recv.len > 0)) {  // see #2796
 800cf5a:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800cf5e:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
      (ev == MG_EV_POLL && c->is_accepted && !c->is_draining &&
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	f000 8345 	beq.w	800d5f6 <http_cb+0x722>
    struct mg_http_message hm;
    size_t ofs = 0;  // Parsing offset
 800cf6c:	2300      	movs	r3, #0
 800cf6e:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
    while (c->is_resp == 0 && ofs < c->recv.len) {
 800cf72:	e313      	b.n	800d59c <http_cb+0x6c8>
      const char *buf = (char *) c->recv.buf + ofs;
 800cf74:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800cf78:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cf80:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 800cf84:	4413      	add	r3, r2
 800cf86:	f8c7 3278 	str.w	r3, [r7, #632]	@ 0x278
      int n = mg_http_parse(buf, c->recv.len - ofs, &hm);
 800cf8a:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800cf8e:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800cf96:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 800cf9a:	1ad3      	subs	r3, r2, r3
 800cf9c:	f107 0210 	add.w	r2, r7, #16
 800cfa0:	4619      	mov	r1, r3
 800cfa2:	f8d7 0278 	ldr.w	r0, [r7, #632]	@ 0x278
 800cfa6:	f7fd fecb 	bl	800ad40 <mg_http_parse>
 800cfaa:	f8c7 0274 	str.w	r0, [r7, #628]	@ 0x274
      struct mg_str *te;  // Transfer - encoding header
      bool is_chunked = false;
 800cfae:	2300      	movs	r3, #0
 800cfb0:	f887 3283 	strb.w	r3, [r7, #643]	@ 0x283
      size_t old_len = c->recv.len;
 800cfb4:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800cfb8:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cfc0:	f8c7 3270 	str.w	r3, [r7, #624]	@ 0x270
      if (n < 0) {
 800cfc4:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	da38      	bge.n	800d03e <http_cb+0x16a>
        // We don't use mg_error() here, to avoid closing pipelined requests
        // prematurely, see #2592
        MG_ERROR(("HTTP parse, %lu bytes", c->recv.len));
 800cfcc:	4bb7      	ldr	r3, [pc, #732]	@ (800d2ac <http_cb+0x3d8>)
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	dd10      	ble.n	800cff6 <http_cb+0x122>
 800cfd4:	4bb6      	ldr	r3, [pc, #728]	@ (800d2b0 <http_cb+0x3dc>)
 800cfd6:	f640 12a6 	movw	r2, #2470	@ 0x9a6
 800cfda:	49b6      	ldr	r1, [pc, #728]	@ (800d2b4 <http_cb+0x3e0>)
 800cfdc:	2001      	movs	r0, #1
 800cfde:	f001 fc61 	bl	800e8a4 <mg_log_prefix>
 800cfe2:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800cfe6:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cfee:	4619      	mov	r1, r3
 800cff0:	48b1      	ldr	r0, [pc, #708]	@ (800d2b8 <http_cb+0x3e4>)
 800cff2:	f001 fca7 	bl	800e944 <mg_log>
        c->is_draining = 1;
 800cff6:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800cffa:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800cffe:	681a      	ldr	r2, [r3, #0]
 800d000:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 800d004:	f043 0310 	orr.w	r3, r3, #16
 800d008:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
        mg_hexdump(buf, c->recv.len - ofs > 16 ? 16 : c->recv.len - ofs);
 800d00c:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800d010:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d018:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 800d01c:	1ad3      	subs	r3, r2, r3
 800d01e:	2b10      	cmp	r3, #16
 800d020:	bf28      	it	cs
 800d022:	2310      	movcs	r3, #16
 800d024:	4619      	mov	r1, r3
 800d026:	f8d7 0278 	ldr.w	r0, [r7, #632]	@ 0x278
 800d02a:	f001 fcc1 	bl	800e9b0 <mg_hexdump>
        c->recv.len = 0;
 800d02e:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800d032:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	2200      	movs	r2, #0
 800d03a:	641a      	str	r2, [r3, #64]	@ 0x40
        return;
 800d03c:	e2db      	b.n	800d5f6 <http_cb+0x722>
      }
      if (n == 0) break;                 // Request is not buffered yet
 800d03e:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 800d042:	2b00      	cmp	r3, #0
 800d044:	f000 82c2 	beq.w	800d5cc <http_cb+0x6f8>
      mg_call(c, MG_EV_HTTP_HDRS, &hm);  // Got all HTTP headers
 800d048:	f107 0210 	add.w	r2, r7, #16
 800d04c:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800d050:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800d054:	210a      	movs	r1, #10
 800d056:	6818      	ldr	r0, [r3, #0]
 800d058:	f7fb fd8c 	bl	8008b74 <mg_call>
      if (c->recv.len != old_len) {
 800d05c:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800d060:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d068:	f8d7 2270 	ldr.w	r2, [r7, #624]	@ 0x270
 800d06c:	429a      	cmp	r2, r3
 800d06e:	d01d      	beq.n	800d0ac <http_cb+0x1d8>
        // User manipulated received data. Wash our hands
        MG_DEBUG(("%lu detaching HTTP handler", c->id));
 800d070:	4b8e      	ldr	r3, [pc, #568]	@ (800d2ac <http_cb+0x3d8>)
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	2b02      	cmp	r3, #2
 800d076:	dd10      	ble.n	800d09a <http_cb+0x1c6>
 800d078:	4b8d      	ldr	r3, [pc, #564]	@ (800d2b0 <http_cb+0x3dc>)
 800d07a:	f44f 621b 	mov.w	r2, #2480	@ 0x9b0
 800d07e:	498d      	ldr	r1, [pc, #564]	@ (800d2b4 <http_cb+0x3e0>)
 800d080:	2003      	movs	r0, #3
 800d082:	f001 fc0f 	bl	800e8a4 <mg_log_prefix>
 800d086:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800d08a:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d092:	4619      	mov	r1, r3
 800d094:	4889      	ldr	r0, [pc, #548]	@ (800d2bc <http_cb+0x3e8>)
 800d096:	f001 fc55 	bl	800e944 <mg_log>
        c->pfn = NULL;
 800d09a:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800d09e:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	2200      	movs	r2, #0
 800d0a6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        return;
 800d0aa:	e2a4      	b.n	800d5f6 <http_cb+0x722>
      }
      if (ev == MG_EV_CLOSE) {           // If client did not set Content-Length
 800d0ac:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800d0b0:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	2b09      	cmp	r3, #9
 800d0b8:	d128      	bne.n	800d10c <http_cb+0x238>
        hm.message.len = c->recv.len - ofs;  // and closes now, deliver MSG
 800d0ba:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800d0be:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d0c6:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 800d0ca:	1ad2      	subs	r2, r2, r3
 800d0cc:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800d0d0:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 800d0d4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
        hm.body.len = hm.message.len - (size_t) (hm.body.buf - hm.message.buf);
 800d0d8:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800d0dc:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 800d0e0:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800d0e4:	f507 7222 	add.w	r2, r7, #648	@ 0x288
 800d0e8:	f5a2 721e 	sub.w	r2, r2, #632	@ 0x278
 800d0ec:	f8d2 1200 	ldr.w	r1, [r2, #512]	@ 0x200
 800d0f0:	f507 7222 	add.w	r2, r7, #648	@ 0x288
 800d0f4:	f5a2 721e 	sub.w	r2, r2, #632	@ 0x278
 800d0f8:	f8d2 2210 	ldr.w	r2, [r2, #528]	@ 0x210
 800d0fc:	1a8a      	subs	r2, r1, r2
 800d0fe:	1a9a      	subs	r2, r3, r2
 800d100:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800d104:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 800d108:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
      }
      if ((te = mg_http_get_header(&hm, "Transfer-Encoding")) != NULL) {
 800d10c:	f107 0310 	add.w	r3, r7, #16
 800d110:	496b      	ldr	r1, [pc, #428]	@ (800d2c0 <http_cb+0x3ec>)
 800d112:	4618      	mov	r0, r3
 800d114:	f7fd fc58 	bl	800a9c8 <mg_http_get_header>
 800d118:	f8c7 026c 	str.w	r0, [r7, #620]	@ 0x26c
 800d11c:	f8d7 326c 	ldr.w	r3, [r7, #620]	@ 0x26c
 800d120:	2b00      	cmp	r3, #0
 800d122:	d01d      	beq.n	800d160 <http_cb+0x28c>
        if (mg_strcasecmp(*te, mg_str("chunked")) == 0) {
 800d124:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 800d128:	4966      	ldr	r1, [pc, #408]	@ (800d2c4 <http_cb+0x3f0>)
 800d12a:	4618      	mov	r0, r3
 800d12c:	f009 fbba 	bl	80168a4 <mg_str_s>
 800d130:	f8d7 126c 	ldr.w	r1, [r7, #620]	@ 0x26c
 800d134:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 800d138:	cb0c      	ldmia	r3, {r2, r3}
 800d13a:	c903      	ldmia	r1, {r0, r1}
 800d13c:	f009 fc75 	bl	8016a2a <mg_strcasecmp>
 800d140:	4603      	mov	r3, r0
 800d142:	2b00      	cmp	r3, #0
 800d144:	d103      	bne.n	800d14e <http_cb+0x27a>
          is_chunked = true;
 800d146:	2301      	movs	r3, #1
 800d148:	f887 3283 	strb.w	r3, [r7, #643]	@ 0x283
 800d14c:	e0cf      	b.n	800d2ee <http_cb+0x41a>
        } else {
          mg_error(c, "Invalid Transfer-Encoding");  // See #2460
 800d14e:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800d152:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800d156:	495c      	ldr	r1, [pc, #368]	@ (800d2c8 <http_cb+0x3f4>)
 800d158:	6818      	ldr	r0, [r3, #0]
 800d15a:	f7fb fd2b 	bl	8008bb4 <mg_error>
          return;
 800d15e:	e24a      	b.n	800d5f6 <http_cb+0x722>
        }
      } else if (mg_http_get_header(&hm, "Content-length") == NULL) {
 800d160:	f107 0310 	add.w	r3, r7, #16
 800d164:	4959      	ldr	r1, [pc, #356]	@ (800d2cc <http_cb+0x3f8>)
 800d166:	4618      	mov	r0, r3
 800d168:	f7fd fc2e 	bl	800a9c8 <mg_http_get_header>
 800d16c:	4603      	mov	r3, r0
 800d16e:	2b00      	cmp	r3, #0
 800d170:	f040 80bd 	bne.w	800d2ee <http_cb+0x41a>
        // #2593: HTTP packets must contain either Transfer-Encoding or
        // Content-length
        bool is_response = mg_ncasecmp(hm.method.buf, "HTTP/", 5) == 0;
 800d174:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800d178:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	2205      	movs	r2, #5
 800d180:	4953      	ldr	r1, [pc, #332]	@ (800d2d0 <http_cb+0x3fc>)
 800d182:	4618      	mov	r0, r3
 800d184:	f7fd f991 	bl	800a4aa <mg_ncasecmp>
 800d188:	4603      	mov	r3, r0
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	bf0c      	ite	eq
 800d18e:	2301      	moveq	r3, #1
 800d190:	2300      	movne	r3, #0
 800d192:	f887 326b 	strb.w	r3, [r7, #619]	@ 0x26b
        bool require_content_len = false;
 800d196:	2300      	movs	r3, #0
 800d198:	f887 3282 	strb.w	r3, [r7, #642]	@ 0x282
        if (!is_response && (mg_strcasecmp(hm.method, mg_str("POST")) == 0 ||
 800d19c:	f897 326b 	ldrb.w	r3, [r7, #619]	@ 0x26b
 800d1a0:	f083 0301 	eor.w	r3, r3, #1
 800d1a4:	b2db      	uxtb	r3, r3
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d030      	beq.n	800d20c <http_cb+0x338>
 800d1aa:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 800d1ae:	4949      	ldr	r1, [pc, #292]	@ (800d2d4 <http_cb+0x400>)
 800d1b0:	4618      	mov	r0, r3
 800d1b2:	f009 fb77 	bl	80168a4 <mg_str_s>
 800d1b6:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800d1ba:	f5a3 711e 	sub.w	r1, r3, #632	@ 0x278
 800d1be:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 800d1c2:	cb0c      	ldmia	r3, {r2, r3}
 800d1c4:	c903      	ldmia	r1, {r0, r1}
 800d1c6:	f009 fc30 	bl	8016a2a <mg_strcasecmp>
 800d1ca:	4603      	mov	r3, r0
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d012      	beq.n	800d1f6 <http_cb+0x322>
                             mg_strcasecmp(hm.method, mg_str("PUT")) == 0)) {
 800d1d0:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800d1d4:	4940      	ldr	r1, [pc, #256]	@ (800d2d8 <http_cb+0x404>)
 800d1d6:	4618      	mov	r0, r3
 800d1d8:	f009 fb64 	bl	80168a4 <mg_str_s>
 800d1dc:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800d1e0:	f5a3 711e 	sub.w	r1, r3, #632	@ 0x278
 800d1e4:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800d1e8:	cb0c      	ldmia	r3, {r2, r3}
 800d1ea:	c903      	ldmia	r1, {r0, r1}
 800d1ec:	f009 fc1d 	bl	8016a2a <mg_strcasecmp>
 800d1f0:	4603      	mov	r3, r0
        if (!is_response && (mg_strcasecmp(hm.method, mg_str("POST")) == 0 ||
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d10a      	bne.n	800d20c <http_cb+0x338>
          // POST and PUT should include an entity body. Therefore, they should
          // contain a Content-length header. Other requests can also contain a
          // body, but their content has no defined semantics (RFC 7231)
          require_content_len = true;
 800d1f6:	2301      	movs	r3, #1
 800d1f8:	f887 3282 	strb.w	r3, [r7, #642]	@ 0x282
          ofs += (size_t) n;  // this request has been processed
 800d1fc:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 800d200:	f8d7 2284 	ldr.w	r2, [r7, #644]	@ 0x284
 800d204:	4413      	add	r3, r2
 800d206:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
 800d20a:	e022      	b.n	800d252 <http_cb+0x37e>
        } else if (is_response) {
 800d20c:	f897 326b 	ldrb.w	r3, [r7, #619]	@ 0x26b
 800d210:	2b00      	cmp	r3, #0
 800d212:	d01e      	beq.n	800d252 <http_cb+0x37e>
          // HTTP spec 7.2 Entity body: All other responses must include a body
          // or Content-Length header field defined with a value of 0.
          int status = mg_http_status(&hm);
 800d214:	f107 0310 	add.w	r3, r7, #16
 800d218:	4618      	mov	r0, r3
 800d21a:	f7ff fd9c 	bl	800cd56 <mg_http_status>
 800d21e:	f8c7 0264 	str.w	r0, [r7, #612]	@ 0x264
          require_content_len = status >= 200 && status != 204 && status != 304;
 800d222:	f8d7 3264 	ldr.w	r3, [r7, #612]	@ 0x264
 800d226:	2bc7      	cmp	r3, #199	@ 0xc7
 800d228:	dd0a      	ble.n	800d240 <http_cb+0x36c>
 800d22a:	f8d7 3264 	ldr.w	r3, [r7, #612]	@ 0x264
 800d22e:	2bcc      	cmp	r3, #204	@ 0xcc
 800d230:	d006      	beq.n	800d240 <http_cb+0x36c>
 800d232:	f8d7 3264 	ldr.w	r3, [r7, #612]	@ 0x264
 800d236:	f5b3 7f98 	cmp.w	r3, #304	@ 0x130
 800d23a:	d001      	beq.n	800d240 <http_cb+0x36c>
 800d23c:	2301      	movs	r3, #1
 800d23e:	e000      	b.n	800d242 <http_cb+0x36e>
 800d240:	2300      	movs	r3, #0
 800d242:	f887 3282 	strb.w	r3, [r7, #642]	@ 0x282
 800d246:	f897 3282 	ldrb.w	r3, [r7, #642]	@ 0x282
 800d24a:	f003 0301 	and.w	r3, r3, #1
 800d24e:	f887 3282 	strb.w	r3, [r7, #642]	@ 0x282
        }
        if (require_content_len) {
 800d252:	f897 3282 	ldrb.w	r3, [r7, #642]	@ 0x282
 800d256:	2b00      	cmp	r3, #0
 800d258:	d049      	beq.n	800d2ee <http_cb+0x41a>
          if (!c->is_client) mg_http_reply(c, 411, "", "");
 800d25a:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800d25e:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800d268:	f003 0302 	and.w	r3, r3, #2
 800d26c:	b2db      	uxtb	r3, r3
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d10a      	bne.n	800d288 <http_cb+0x3b4>
 800d272:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800d276:	f5a3 701f 	sub.w	r0, r3, #636	@ 0x27c
 800d27a:	4b18      	ldr	r3, [pc, #96]	@ (800d2dc <http_cb+0x408>)
 800d27c:	4a17      	ldr	r2, [pc, #92]	@ (800d2dc <http_cb+0x408>)
 800d27e:	f240 119b 	movw	r1, #411	@ 0x19b
 800d282:	6800      	ldr	r0, [r0, #0]
 800d284:	f7fe fc16 	bl	800bab4 <mg_http_reply>
          MG_ERROR(("Content length missing from %s", is_response ? "response" : "request"));
 800d288:	4b08      	ldr	r3, [pc, #32]	@ (800d2ac <http_cb+0x3d8>)
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	dd2e      	ble.n	800d2ee <http_cb+0x41a>
 800d290:	4b07      	ldr	r3, [pc, #28]	@ (800d2b0 <http_cb+0x3dc>)
 800d292:	f640 12d3 	movw	r2, #2515	@ 0x9d3
 800d296:	4907      	ldr	r1, [pc, #28]	@ (800d2b4 <http_cb+0x3e0>)
 800d298:	2001      	movs	r0, #1
 800d29a:	f001 fb03 	bl	800e8a4 <mg_log_prefix>
 800d29e:	f897 326b 	ldrb.w	r3, [r7, #619]	@ 0x26b
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d01e      	beq.n	800d2e4 <http_cb+0x410>
 800d2a6:	4b0e      	ldr	r3, [pc, #56]	@ (800d2e0 <http_cb+0x40c>)
 800d2a8:	e01d      	b.n	800d2e6 <http_cb+0x412>
 800d2aa:	bf00      	nop
 800d2ac:	24000258 	.word	0x24000258
 800d2b0:	0802d858 	.word	0x0802d858
 800d2b4:	08029c3c 	.word	0x08029c3c
 800d2b8:	0802a9d0 	.word	0x0802a9d0
 800d2bc:	0802a9e8 	.word	0x0802a9e8
 800d2c0:	0802aa04 	.word	0x0802aa04
 800d2c4:	0802aa18 	.word	0x0802aa18
 800d2c8:	0802aa20 	.word	0x0802aa20
 800d2cc:	0802aa3c 	.word	0x0802aa3c
 800d2d0:	08029f98 	.word	0x08029f98
 800d2d4:	08029fb4 	.word	0x08029fb4
 800d2d8:	08029fb0 	.word	0x08029fb0
 800d2dc:	0802a47c 	.word	0x0802a47c
 800d2e0:	0802aa4c 	.word	0x0802aa4c
 800d2e4:	4bc6      	ldr	r3, [pc, #792]	@ (800d600 <http_cb+0x72c>)
 800d2e6:	4619      	mov	r1, r3
 800d2e8:	48c6      	ldr	r0, [pc, #792]	@ (800d604 <http_cb+0x730>)
 800d2ea:	f001 fb2b 	bl	800e944 <mg_log>
        }
      }

      if (is_chunked) {
 800d2ee:	f897 3283 	ldrb.w	r3, [r7, #643]	@ 0x283
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	f000 80c9 	beq.w	800d48a <http_cb+0x5b6>
        // For chunked data, strip off prefixes and suffixes from chunks
        // and relocate them right after the headers, then report a message
        char *s = (char *) c->recv.buf + ofs + n;
 800d2f8:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800d2fc:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d304:	f8d7 1274 	ldr.w	r1, [r7, #628]	@ 0x274
 800d308:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 800d30c:	440b      	add	r3, r1
 800d30e:	4413      	add	r3, r2
 800d310:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
        int o = 0, pl, dl, cl, len = (int) (c->recv.len - ofs - (size_t) n);
 800d314:	2300      	movs	r3, #0
 800d316:	f8c7 327c 	str.w	r3, [r7, #636]	@ 0x27c
 800d31a:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800d31e:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d326:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 800d32a:	1ad2      	subs	r2, r2, r3
 800d32c:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 800d330:	1ad3      	subs	r3, r2, r3
 800d332:	f8c7 3258 	str.w	r3, [r7, #600]	@ 0x258

        // Find zero-length chunk (the end of the body)
        while ((cl = skip_chunk(s + o, len - o, &pl, &dl)) > 0 && dl) o += cl;
 800d336:	e006      	b.n	800d346 <http_cb+0x472>
 800d338:	f8d7 227c 	ldr.w	r2, [r7, #636]	@ 0x27c
 800d33c:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 800d340:	4413      	add	r3, r2
 800d342:	f8c7 327c 	str.w	r3, [r7, #636]	@ 0x27c
 800d346:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 800d34a:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 800d34e:	18d0      	adds	r0, r2, r3
 800d350:	f8d7 2258 	ldr.w	r2, [r7, #600]	@ 0x258
 800d354:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 800d358:	1ad1      	subs	r1, r2, r3
 800d35a:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800d35e:	f507 720b 	add.w	r2, r7, #556	@ 0x22c
 800d362:	f7ff fd28 	bl	800cdb6 <skip_chunk>
 800d366:	f8c7 0254 	str.w	r0, [r7, #596]	@ 0x254
 800d36a:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 800d36e:	2b00      	cmp	r3, #0
 800d370:	dd03      	ble.n	800d37a <http_cb+0x4a6>
 800d372:	f8d7 3228 	ldr.w	r3, [r7, #552]	@ 0x228
 800d376:	2b00      	cmp	r3, #0
 800d378:	d1de      	bne.n	800d338 <http_cb+0x464>
        if (cl == 0) break;  // No zero-len chunk, buffer more data
 800d37a:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 800d37e:	2b00      	cmp	r3, #0
 800d380:	f000 8126 	beq.w	800d5d0 <http_cb+0x6fc>
        if (cl < 0) {
 800d384:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 800d388:	2b00      	cmp	r3, #0
 800d38a:	da08      	bge.n	800d39e <http_cb+0x4ca>
          mg_error(c, "Invalid chunk");
 800d38c:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800d390:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800d394:	499c      	ldr	r1, [pc, #624]	@ (800d608 <http_cb+0x734>)
 800d396:	6818      	ldr	r0, [r3, #0]
 800d398:	f7fb fc0c 	bl	8008bb4 <mg_error>
          break;
 800d39c:	e11b      	b.n	800d5d6 <http_cb+0x702>
        }

        // Zero chunk found. Second pass: strip + relocate
        o = 0, hm.body.len = 0, hm.message.len = (size_t) n;
 800d39e:	2300      	movs	r3, #0
 800d3a0:	f8c7 327c 	str.w	r3, [r7, #636]	@ 0x27c
 800d3a4:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800d3a8:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 800d3ac:	2200      	movs	r2, #0
 800d3ae:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800d3b2:	f8d7 2274 	ldr.w	r2, [r7, #628]	@ 0x274
 800d3b6:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800d3ba:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 800d3be:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
        while ((cl = skip_chunk(s + o, len - o, &pl, &dl)) > 0) {
 800d3c2:	e03e      	b.n	800d442 <http_cb+0x56e>
          memmove(s + hm.body.len, s + o + pl, (size_t) dl);
 800d3c4:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800d3c8:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 800d3cc:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800d3d0:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 800d3d4:	18d0      	adds	r0, r2, r3
 800d3d6:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 800d3da:	f8d7 222c 	ldr.w	r2, [r7, #556]	@ 0x22c
 800d3de:	4413      	add	r3, r2
 800d3e0:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 800d3e4:	4413      	add	r3, r2
 800d3e6:	f8d7 2228 	ldr.w	r2, [r7, #552]	@ 0x228
 800d3ea:	4619      	mov	r1, r3
 800d3ec:	f01a f952 	bl	8027694 <memmove>
          o += cl, hm.body.len += (size_t) dl, hm.message.len += (size_t) dl;
 800d3f0:	f8d7 227c 	ldr.w	r2, [r7, #636]	@ 0x27c
 800d3f4:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 800d3f8:	4413      	add	r3, r2
 800d3fa:	f8c7 327c 	str.w	r3, [r7, #636]	@ 0x27c
 800d3fe:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800d402:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 800d406:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800d40a:	f8d7 2228 	ldr.w	r2, [r7, #552]	@ 0x228
 800d40e:	441a      	add	r2, r3
 800d410:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800d414:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 800d418:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800d41c:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800d420:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 800d424:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800d428:	f8d7 2228 	ldr.w	r2, [r7, #552]	@ 0x228
 800d42c:	441a      	add	r2, r3
 800d42e:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800d432:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 800d436:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
          if (dl == 0) break;
 800d43a:	f8d7 3228 	ldr.w	r3, [r7, #552]	@ 0x228
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d016      	beq.n	800d470 <http_cb+0x59c>
        while ((cl = skip_chunk(s + o, len - o, &pl, &dl)) > 0) {
 800d442:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 800d446:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 800d44a:	18d0      	adds	r0, r2, r3
 800d44c:	f8d7 2258 	ldr.w	r2, [r7, #600]	@ 0x258
 800d450:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 800d454:	1ad1      	subs	r1, r2, r3
 800d456:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800d45a:	f507 720b 	add.w	r2, r7, #556	@ 0x22c
 800d45e:	f7ff fcaa 	bl	800cdb6 <skip_chunk>
 800d462:	f8c7 0254 	str.w	r0, [r7, #596]	@ 0x254
 800d466:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	dcaa      	bgt.n	800d3c4 <http_cb+0x4f0>
 800d46e:	e000      	b.n	800d472 <http_cb+0x59e>
          if (dl == 0) break;
 800d470:	bf00      	nop
        }
        ofs += (size_t) (n + o);
 800d472:	f8d7 2274 	ldr.w	r2, [r7, #628]	@ 0x274
 800d476:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 800d47a:	4413      	add	r3, r2
 800d47c:	461a      	mov	r2, r3
 800d47e:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 800d482:	4413      	add	r3, r2
 800d484:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
 800d488:	e026      	b.n	800d4d8 <http_cb+0x604>
      } else {  // Normal, non-chunked data
        size_t len = c->recv.len - ofs - (size_t) n;
 800d48a:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800d48e:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d496:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 800d49a:	1ad2      	subs	r2, r2, r3
 800d49c:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 800d4a0:	1ad3      	subs	r3, r2, r3
 800d4a2:	f8c7 3260 	str.w	r3, [r7, #608]	@ 0x260
        if (hm.body.len > len) break;  // Buffer more data
 800d4a6:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800d4aa:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 800d4ae:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800d4b2:	f8d7 2260 	ldr.w	r2, [r7, #608]	@ 0x260
 800d4b6:	429a      	cmp	r2, r3
 800d4b8:	f0c0 808c 	bcc.w	800d5d4 <http_cb+0x700>
        ofs += (size_t) n + hm.body.len;
 800d4bc:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800d4c0:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 800d4c4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800d4c8:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 800d4cc:	4413      	add	r3, r2
 800d4ce:	f8d7 2284 	ldr.w	r2, [r7, #644]	@ 0x284
 800d4d2:	4413      	add	r3, r2
 800d4d4:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
      }

      if (c->is_accepted) c->is_resp = 1;  // Start generating response
 800d4d8:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800d4dc:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800d4e0:	681b      	ldr	r3, [r3, #0]
 800d4e2:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800d4e6:	f003 0304 	and.w	r3, r3, #4
 800d4ea:	b2db      	uxtb	r3, r3
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d00a      	beq.n	800d506 <http_cb+0x632>
 800d4f0:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800d4f4:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800d4f8:	681a      	ldr	r2, [r3, #0]
 800d4fa:	f892 30ae 	ldrb.w	r3, [r2, #174]	@ 0xae
 800d4fe:	f043 0301 	orr.w	r3, r3, #1
 800d502:	f882 30ae 	strb.w	r3, [r2, #174]	@ 0xae
      mg_call(c, MG_EV_HTTP_MSG, &hm);     // User handler can clear is_resp
 800d506:	f107 0210 	add.w	r2, r7, #16
 800d50a:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800d50e:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800d512:	210b      	movs	r1, #11
 800d514:	6818      	ldr	r0, [r3, #0]
 800d516:	f7fb fb2d 	bl	8008b74 <mg_call>
      if (c->is_accepted && !c->is_resp) {
 800d51a:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800d51e:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800d528:	f003 0304 	and.w	r3, r3, #4
 800d52c:	b2db      	uxtb	r3, r3
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d034      	beq.n	800d59c <http_cb+0x6c8>
 800d532:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800d536:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	f893 30ae 	ldrb.w	r3, [r3, #174]	@ 0xae
 800d540:	f003 0301 	and.w	r3, r3, #1
 800d544:	b2db      	uxtb	r3, r3
 800d546:	2b00      	cmp	r3, #0
 800d548:	d128      	bne.n	800d59c <http_cb+0x6c8>
        struct mg_str *cc = mg_http_get_header(&hm, "Connection");
 800d54a:	f107 0310 	add.w	r3, r7, #16
 800d54e:	492f      	ldr	r1, [pc, #188]	@ (800d60c <http_cb+0x738>)
 800d550:	4618      	mov	r0, r3
 800d552:	f7fd fa39 	bl	800a9c8 <mg_http_get_header>
 800d556:	f8c7 0250 	str.w	r0, [r7, #592]	@ 0x250
        if (cc != NULL && mg_strcasecmp(*cc, mg_str("close")) == 0) {
 800d55a:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d01c      	beq.n	800d59c <http_cb+0x6c8>
 800d562:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 800d566:	492a      	ldr	r1, [pc, #168]	@ (800d610 <http_cb+0x73c>)
 800d568:	4618      	mov	r0, r3
 800d56a:	f009 f99b 	bl	80168a4 <mg_str_s>
 800d56e:	f8d7 1250 	ldr.w	r1, [r7, #592]	@ 0x250
 800d572:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 800d576:	cb0c      	ldmia	r3, {r2, r3}
 800d578:	c903      	ldmia	r1, {r0, r1}
 800d57a:	f009 fa56 	bl	8016a2a <mg_strcasecmp>
 800d57e:	4603      	mov	r3, r0
 800d580:	2b00      	cmp	r3, #0
 800d582:	d10b      	bne.n	800d59c <http_cb+0x6c8>
          c->is_draining = 1;  // honor "Connection: close"
 800d584:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800d588:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800d58c:	681a      	ldr	r2, [r3, #0]
 800d58e:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 800d592:	f043 0310 	orr.w	r3, r3, #16
 800d596:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
          break;
 800d59a:	e01c      	b.n	800d5d6 <http_cb+0x702>
    while (c->is_resp == 0 && ofs < c->recv.len) {
 800d59c:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800d5a0:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	f893 30ae 	ldrb.w	r3, [r3, #174]	@ 0xae
 800d5aa:	f003 0301 	and.w	r3, r3, #1
 800d5ae:	b2db      	uxtb	r3, r3
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d110      	bne.n	800d5d6 <http_cb+0x702>
 800d5b4:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800d5b8:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d5c0:	f8d7 2284 	ldr.w	r2, [r7, #644]	@ 0x284
 800d5c4:	429a      	cmp	r2, r3
 800d5c6:	f4ff acd5 	bcc.w	800cf74 <http_cb+0xa0>
 800d5ca:	e004      	b.n	800d5d6 <http_cb+0x702>
      if (n == 0) break;                 // Request is not buffered yet
 800d5cc:	bf00      	nop
 800d5ce:	e002      	b.n	800d5d6 <http_cb+0x702>
        if (cl == 0) break;  // No zero-len chunk, buffer more data
 800d5d0:	bf00      	nop
 800d5d2:	e000      	b.n	800d5d6 <http_cb+0x702>
        if (hm.body.len > len) break;  // Buffer more data
 800d5d4:	bf00      	nop
        }
      }
    }
    if (ofs > 0) mg_iobuf_del(&c->recv, 0, ofs);  // Delete processed data
 800d5d6:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d00b      	beq.n	800d5f6 <http_cb+0x722>
 800d5de:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800d5e2:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	3338      	adds	r3, #56	@ 0x38
 800d5ea:	f8d7 2284 	ldr.w	r2, [r7, #644]	@ 0x284
 800d5ee:	2100      	movs	r1, #0
 800d5f0:	4618      	mov	r0, r3
 800d5f2:	f000 f93f 	bl	800d874 <mg_iobuf_del>
  }
  (void) ev_data;
}
 800d5f6:	f507 7722 	add.w	r7, r7, #648	@ 0x288
 800d5fa:	46bd      	mov	sp, r7
 800d5fc:	bd80      	pop	{r7, pc}
 800d5fe:	bf00      	nop
 800d600:	0802aa58 	.word	0x0802aa58
 800d604:	0802aa60 	.word	0x0802aa60
 800d608:	0802aa80 	.word	0x0802aa80
 800d60c:	0802aa90 	.word	0x0802aa90
 800d610:	0802aa9c 	.word	0x0802aa9c

0800d614 <mg_http_connect>:
  while (done == false) mg_mgr_poll(&mgr, 100);
  mg_mgr_free(&mgr);
}

struct mg_connection *mg_http_connect(struct mg_mgr *mgr, const char *url,
                                      mg_event_handler_t fn, void *fn_data) {
 800d614:	b580      	push	{r7, lr}
 800d616:	b086      	sub	sp, #24
 800d618:	af00      	add	r7, sp, #0
 800d61a:	60f8      	str	r0, [r7, #12]
 800d61c:	60b9      	str	r1, [r7, #8]
 800d61e:	607a      	str	r2, [r7, #4]
 800d620:	603b      	str	r3, [r7, #0]
  struct mg_connection *c = mg_connect(mgr, url, fn, fn_data);
 800d622:	683b      	ldr	r3, [r7, #0]
 800d624:	687a      	ldr	r2, [r7, #4]
 800d626:	68b9      	ldr	r1, [r7, #8]
 800d628:	68f8      	ldr	r0, [r7, #12]
 800d62a:	f001 fdb9 	bl	800f1a0 <mg_connect>
 800d62e:	6178      	str	r0, [r7, #20]
  if (c != NULL) c->pfn = http_cb;
 800d630:	697b      	ldr	r3, [r7, #20]
 800d632:	2b00      	cmp	r3, #0
 800d634:	d003      	beq.n	800d63e <mg_http_connect+0x2a>
 800d636:	697b      	ldr	r3, [r7, #20]
 800d638:	4a03      	ldr	r2, [pc, #12]	@ (800d648 <mg_http_connect+0x34>)
 800d63a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  return c;
 800d63e:	697b      	ldr	r3, [r7, #20]
}
 800d640:	4618      	mov	r0, r3
 800d642:	3718      	adds	r7, #24
 800d644:	46bd      	mov	sp, r7
 800d646:	bd80      	pop	{r7, pc}
 800d648:	0800ced5 	.word	0x0800ced5

0800d64c <mg_http_listen>:

struct mg_connection *mg_http_listen(struct mg_mgr *mgr, const char *url,
                                     mg_event_handler_t fn, void *fn_data) {
 800d64c:	b580      	push	{r7, lr}
 800d64e:	b086      	sub	sp, #24
 800d650:	af00      	add	r7, sp, #0
 800d652:	60f8      	str	r0, [r7, #12]
 800d654:	60b9      	str	r1, [r7, #8]
 800d656:	607a      	str	r2, [r7, #4]
 800d658:	603b      	str	r3, [r7, #0]
  struct mg_connection *c = mg_listen(mgr, url, fn, fn_data);
 800d65a:	683b      	ldr	r3, [r7, #0]
 800d65c:	687a      	ldr	r2, [r7, #4]
 800d65e:	68b9      	ldr	r1, [r7, #8]
 800d660:	68f8      	ldr	r0, [r7, #12]
 800d662:	f001 fe3b 	bl	800f2dc <mg_listen>
 800d666:	6178      	str	r0, [r7, #20]
  if (c != NULL) c->pfn = http_cb;
 800d668:	697b      	ldr	r3, [r7, #20]
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d003      	beq.n	800d676 <mg_http_listen+0x2a>
 800d66e:	697b      	ldr	r3, [r7, #20]
 800d670:	4a03      	ldr	r2, [pc, #12]	@ (800d680 <mg_http_listen+0x34>)
 800d672:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  return c;
 800d676:	697b      	ldr	r3, [r7, #20]
}
 800d678:	4618      	mov	r0, r3
 800d67a:	3718      	adds	r7, #24
 800d67c:	46bd      	mov	sp, r7
 800d67e:	bd80      	pop	{r7, pc}
 800d680:	0800ced5 	.word	0x0800ced5

0800d684 <roundup>:





static size_t roundup(size_t size, size_t align) {
 800d684:	b480      	push	{r7}
 800d686:	b083      	sub	sp, #12
 800d688:	af00      	add	r7, sp, #0
 800d68a:	6078      	str	r0, [r7, #4]
 800d68c:	6039      	str	r1, [r7, #0]
  return align == 0 ? size : (size + align - 1) / align * align;
 800d68e:	683b      	ldr	r3, [r7, #0]
 800d690:	2b00      	cmp	r3, #0
 800d692:	d00a      	beq.n	800d6aa <roundup+0x26>
 800d694:	687a      	ldr	r2, [r7, #4]
 800d696:	683b      	ldr	r3, [r7, #0]
 800d698:	4413      	add	r3, r2
 800d69a:	1e5a      	subs	r2, r3, #1
 800d69c:	683b      	ldr	r3, [r7, #0]
 800d69e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d6a2:	683a      	ldr	r2, [r7, #0]
 800d6a4:	fb02 f303 	mul.w	r3, r2, r3
 800d6a8:	e000      	b.n	800d6ac <roundup+0x28>
 800d6aa:	687b      	ldr	r3, [r7, #4]
}
 800d6ac:	4618      	mov	r0, r3
 800d6ae:	370c      	adds	r7, #12
 800d6b0:	46bd      	mov	sp, r7
 800d6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6b6:	4770      	bx	lr

0800d6b8 <mg_iobuf_resize>:

int mg_iobuf_resize(struct mg_iobuf *io, size_t new_size) {
 800d6b8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800d6bc:	b088      	sub	sp, #32
 800d6be:	af02      	add	r7, sp, #8
 800d6c0:	6078      	str	r0, [r7, #4]
 800d6c2:	6039      	str	r1, [r7, #0]
  int ok = 1;
 800d6c4:	2301      	movs	r3, #1
 800d6c6:	617b      	str	r3, [r7, #20]
  new_size = roundup(new_size, io->align);
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	68db      	ldr	r3, [r3, #12]
 800d6cc:	4619      	mov	r1, r3
 800d6ce:	6838      	ldr	r0, [r7, #0]
 800d6d0:	f7ff ffd8 	bl	800d684 <roundup>
 800d6d4:	6038      	str	r0, [r7, #0]
  if (new_size == 0) {
 800d6d6:	683b      	ldr	r3, [r7, #0]
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d117      	bne.n	800d70c <mg_iobuf_resize+0x54>
    mg_bzero(io->buf, io->size);
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	681a      	ldr	r2, [r3, #0]
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	685b      	ldr	r3, [r3, #4]
 800d6e4:	4619      	mov	r1, r3
 800d6e6:	4610      	mov	r0, r2
 800d6e8:	f014 fa96 	bl	8021c18 <mg_bzero>
    free(io->buf);
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	4618      	mov	r0, r3
 800d6f2:	f018 f95f 	bl	80259b4 <free>
    io->buf = NULL;
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	2200      	movs	r2, #0
 800d6fa:	601a      	str	r2, [r3, #0]
    io->len = io->size = 0;
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	2200      	movs	r2, #0
 800d700:	605a      	str	r2, [r3, #4]
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	685a      	ldr	r2, [r3, #4]
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	609a      	str	r2, [r3, #8]
 800d70a:	e053      	b.n	800d7b4 <mg_iobuf_resize+0xfc>
  } else if (new_size != io->size) {
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	685b      	ldr	r3, [r3, #4]
 800d710:	683a      	ldr	r2, [r7, #0]
 800d712:	429a      	cmp	r2, r3
 800d714:	d04e      	beq.n	800d7b4 <mg_iobuf_resize+0xfc>
    // NOTE(lsm): do not use realloc here. Use calloc/free only, to ease the
    // porting to some obscure platforms like FreeRTOS
    void *p = calloc(1, new_size);
 800d716:	6839      	ldr	r1, [r7, #0]
 800d718:	2001      	movs	r0, #1
 800d71a:	f018 f927 	bl	802596c <calloc>
 800d71e:	4603      	mov	r3, r0
 800d720:	613b      	str	r3, [r7, #16]
    if (p != NULL) {
 800d722:	693b      	ldr	r3, [r7, #16]
 800d724:	2b00      	cmp	r3, #0
 800d726:	d028      	beq.n	800d77a <mg_iobuf_resize+0xc2>
      size_t len = new_size < io->len ? new_size : io->len;
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	689b      	ldr	r3, [r3, #8]
 800d72c:	683a      	ldr	r2, [r7, #0]
 800d72e:	4293      	cmp	r3, r2
 800d730:	bf28      	it	cs
 800d732:	4613      	movcs	r3, r2
 800d734:	60fb      	str	r3, [r7, #12]
      if (len > 0 && io->buf != NULL) memmove(p, io->buf, len);
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d00a      	beq.n	800d752 <mg_iobuf_resize+0x9a>
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	2b00      	cmp	r3, #0
 800d742:	d006      	beq.n	800d752 <mg_iobuf_resize+0x9a>
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	68fa      	ldr	r2, [r7, #12]
 800d74a:	4619      	mov	r1, r3
 800d74c:	6938      	ldr	r0, [r7, #16]
 800d74e:	f019 ffa1 	bl	8027694 <memmove>
      mg_bzero(io->buf, io->size);
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	681a      	ldr	r2, [r3, #0]
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	685b      	ldr	r3, [r3, #4]
 800d75a:	4619      	mov	r1, r3
 800d75c:	4610      	mov	r0, r2
 800d75e:	f014 fa5b 	bl	8021c18 <mg_bzero>
      free(io->buf);
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	4618      	mov	r0, r3
 800d768:	f018 f924 	bl	80259b4 <free>
      io->buf = (unsigned char *) p;
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	693a      	ldr	r2, [r7, #16]
 800d770:	601a      	str	r2, [r3, #0]
      io->size = new_size;
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	683a      	ldr	r2, [r7, #0]
 800d776:	605a      	str	r2, [r3, #4]
 800d778:	e01c      	b.n	800d7b4 <mg_iobuf_resize+0xfc>
    } else {
      ok = 0;
 800d77a:	2300      	movs	r3, #0
 800d77c:	617b      	str	r3, [r7, #20]
      MG_ERROR(("%lld->%lld", (uint64_t) io->size, (uint64_t) new_size));
 800d77e:	4b10      	ldr	r3, [pc, #64]	@ (800d7c0 <mg_iobuf_resize+0x108>)
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	2b00      	cmp	r3, #0
 800d784:	dd16      	ble.n	800d7b4 <mg_iobuf_resize+0xfc>
 800d786:	4b0f      	ldr	r3, [pc, #60]	@ (800d7c4 <mg_iobuf_resize+0x10c>)
 800d788:	f640 224d 	movw	r2, #2637	@ 0xa4d
 800d78c:	490e      	ldr	r1, [pc, #56]	@ (800d7c8 <mg_iobuf_resize+0x110>)
 800d78e:	2001      	movs	r0, #1
 800d790:	f001 f888 	bl	800e8a4 <mg_log_prefix>
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	685b      	ldr	r3, [r3, #4]
 800d798:	2200      	movs	r2, #0
 800d79a:	4698      	mov	r8, r3
 800d79c:	4691      	mov	r9, r2
 800d79e:	683b      	ldr	r3, [r7, #0]
 800d7a0:	2200      	movs	r2, #0
 800d7a2:	461c      	mov	r4, r3
 800d7a4:	4615      	mov	r5, r2
 800d7a6:	e9cd 4500 	strd	r4, r5, [sp]
 800d7aa:	4642      	mov	r2, r8
 800d7ac:	464b      	mov	r3, r9
 800d7ae:	4807      	ldr	r0, [pc, #28]	@ (800d7cc <mg_iobuf_resize+0x114>)
 800d7b0:	f001 f8c8 	bl	800e944 <mg_log>
    }
  }
  return ok;
 800d7b4:	697b      	ldr	r3, [r7, #20]
}
 800d7b6:	4618      	mov	r0, r3
 800d7b8:	3718      	adds	r7, #24
 800d7ba:	46bd      	mov	sp, r7
 800d7bc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800d7c0:	24000258 	.word	0x24000258
 800d7c4:	0802d860 	.word	0x0802d860
 800d7c8:	08029c3c 	.word	0x08029c3c
 800d7cc:	0802aadc 	.word	0x0802aadc

0800d7d0 <mg_iobuf_add>:
  io->size = io->len = 0;
  return mg_iobuf_resize(io, size);
}

size_t mg_iobuf_add(struct mg_iobuf *io, size_t ofs, const void *buf,
                    size_t len) {
 800d7d0:	b580      	push	{r7, lr}
 800d7d2:	b086      	sub	sp, #24
 800d7d4:	af00      	add	r7, sp, #0
 800d7d6:	60f8      	str	r0, [r7, #12]
 800d7d8:	60b9      	str	r1, [r7, #8]
 800d7da:	607a      	str	r2, [r7, #4]
 800d7dc:	603b      	str	r3, [r7, #0]
  size_t new_size = roundup(io->len + len, io->align);
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	689a      	ldr	r2, [r3, #8]
 800d7e2:	683b      	ldr	r3, [r7, #0]
 800d7e4:	441a      	add	r2, r3
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	68db      	ldr	r3, [r3, #12]
 800d7ea:	4619      	mov	r1, r3
 800d7ec:	4610      	mov	r0, r2
 800d7ee:	f7ff ff49 	bl	800d684 <roundup>
 800d7f2:	6178      	str	r0, [r7, #20]
  mg_iobuf_resize(io, new_size);      // Attempt to resize
 800d7f4:	6979      	ldr	r1, [r7, #20]
 800d7f6:	68f8      	ldr	r0, [r7, #12]
 800d7f8:	f7ff ff5e 	bl	800d6b8 <mg_iobuf_resize>
  if (new_size != io->size) len = 0;  // Resize failure, append nothing
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	685b      	ldr	r3, [r3, #4]
 800d800:	697a      	ldr	r2, [r7, #20]
 800d802:	429a      	cmp	r2, r3
 800d804:	d001      	beq.n	800d80a <mg_iobuf_add+0x3a>
 800d806:	2300      	movs	r3, #0
 800d808:	603b      	str	r3, [r7, #0]
  if (ofs < io->len) memmove(io->buf + ofs + len, io->buf + ofs, io->len - ofs);
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	689b      	ldr	r3, [r3, #8]
 800d80e:	68ba      	ldr	r2, [r7, #8]
 800d810:	429a      	cmp	r2, r3
 800d812:	d210      	bcs.n	800d836 <mg_iobuf_add+0x66>
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	681a      	ldr	r2, [r3, #0]
 800d818:	68b9      	ldr	r1, [r7, #8]
 800d81a:	683b      	ldr	r3, [r7, #0]
 800d81c:	440b      	add	r3, r1
 800d81e:	18d0      	adds	r0, r2, r3
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	681a      	ldr	r2, [r3, #0]
 800d824:	68bb      	ldr	r3, [r7, #8]
 800d826:	18d1      	adds	r1, r2, r3
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	689a      	ldr	r2, [r3, #8]
 800d82c:	68bb      	ldr	r3, [r7, #8]
 800d82e:	1ad3      	subs	r3, r2, r3
 800d830:	461a      	mov	r2, r3
 800d832:	f019 ff2f 	bl	8027694 <memmove>
  if (buf != NULL) memmove(io->buf + ofs, buf, len);
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d008      	beq.n	800d84e <mg_iobuf_add+0x7e>
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	681a      	ldr	r2, [r3, #0]
 800d840:	68bb      	ldr	r3, [r7, #8]
 800d842:	4413      	add	r3, r2
 800d844:	683a      	ldr	r2, [r7, #0]
 800d846:	6879      	ldr	r1, [r7, #4]
 800d848:	4618      	mov	r0, r3
 800d84a:	f019 ff23 	bl	8027694 <memmove>
  if (ofs > io->len) io->len += ofs - io->len;
 800d84e:	68fb      	ldr	r3, [r7, #12]
 800d850:	689b      	ldr	r3, [r3, #8]
 800d852:	68ba      	ldr	r2, [r7, #8]
 800d854:	429a      	cmp	r2, r3
 800d856:	d902      	bls.n	800d85e <mg_iobuf_add+0x8e>
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	68ba      	ldr	r2, [r7, #8]
 800d85c:	609a      	str	r2, [r3, #8]
  io->len += len;
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	689a      	ldr	r2, [r3, #8]
 800d862:	683b      	ldr	r3, [r7, #0]
 800d864:	441a      	add	r2, r3
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	609a      	str	r2, [r3, #8]
  return len;
 800d86a:	683b      	ldr	r3, [r7, #0]
}
 800d86c:	4618      	mov	r0, r3
 800d86e:	3718      	adds	r7, #24
 800d870:	46bd      	mov	sp, r7
 800d872:	bd80      	pop	{r7, pc}

0800d874 <mg_iobuf_del>:

size_t mg_iobuf_del(struct mg_iobuf *io, size_t ofs, size_t len) {
 800d874:	b580      	push	{r7, lr}
 800d876:	b084      	sub	sp, #16
 800d878:	af00      	add	r7, sp, #0
 800d87a:	60f8      	str	r0, [r7, #12]
 800d87c:	60b9      	str	r1, [r7, #8]
 800d87e:	607a      	str	r2, [r7, #4]
  if (ofs > io->len) ofs = io->len;
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	689b      	ldr	r3, [r3, #8]
 800d884:	68ba      	ldr	r2, [r7, #8]
 800d886:	429a      	cmp	r2, r3
 800d888:	d902      	bls.n	800d890 <mg_iobuf_del+0x1c>
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	689b      	ldr	r3, [r3, #8]
 800d88e:	60bb      	str	r3, [r7, #8]
  if (ofs + len > io->len) len = io->len - ofs;
 800d890:	68ba      	ldr	r2, [r7, #8]
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	441a      	add	r2, r3
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	689b      	ldr	r3, [r3, #8]
 800d89a:	429a      	cmp	r2, r3
 800d89c:	d904      	bls.n	800d8a8 <mg_iobuf_del+0x34>
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	689a      	ldr	r2, [r3, #8]
 800d8a2:	68bb      	ldr	r3, [r7, #8]
 800d8a4:	1ad3      	subs	r3, r2, r3
 800d8a6:	607b      	str	r3, [r7, #4]
  if (io->buf) memmove(io->buf + ofs, io->buf + ofs + len, io->len - ofs - len);
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d012      	beq.n	800d8d6 <mg_iobuf_del+0x62>
 800d8b0:	68fb      	ldr	r3, [r7, #12]
 800d8b2:	681a      	ldr	r2, [r3, #0]
 800d8b4:	68bb      	ldr	r3, [r7, #8]
 800d8b6:	18d0      	adds	r0, r2, r3
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	681a      	ldr	r2, [r3, #0]
 800d8bc:	68b9      	ldr	r1, [r7, #8]
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	440b      	add	r3, r1
 800d8c2:	18d1      	adds	r1, r2, r3
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	689a      	ldr	r2, [r3, #8]
 800d8c8:	68bb      	ldr	r3, [r7, #8]
 800d8ca:	1ad2      	subs	r2, r2, r3
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	1ad3      	subs	r3, r2, r3
 800d8d0:	461a      	mov	r2, r3
 800d8d2:	f019 fedf 	bl	8027694 <memmove>
  if (io->buf) mg_bzero(io->buf + io->len - len, len);
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d00a      	beq.n	800d8f4 <mg_iobuf_del+0x80>
 800d8de:	68fb      	ldr	r3, [r7, #12]
 800d8e0:	681a      	ldr	r2, [r3, #0]
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	6899      	ldr	r1, [r3, #8]
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	1acb      	subs	r3, r1, r3
 800d8ea:	4413      	add	r3, r2
 800d8ec:	6879      	ldr	r1, [r7, #4]
 800d8ee:	4618      	mov	r0, r3
 800d8f0:	f014 f992 	bl	8021c18 <mg_bzero>
  io->len -= len;
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	689a      	ldr	r2, [r3, #8]
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	1ad2      	subs	r2, r2, r3
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	609a      	str	r2, [r3, #8]
  return len;
 800d900:	687b      	ldr	r3, [r7, #4]
}
 800d902:	4618      	mov	r0, r3
 800d904:	3710      	adds	r7, #16
 800d906:	46bd      	mov	sp, r7
 800d908:	bd80      	pop	{r7, pc}

0800d90a <mg_iobuf_free>:

void mg_iobuf_free(struct mg_iobuf *io) {
 800d90a:	b580      	push	{r7, lr}
 800d90c:	b082      	sub	sp, #8
 800d90e:	af00      	add	r7, sp, #0
 800d910:	6078      	str	r0, [r7, #4]
  mg_iobuf_resize(io, 0);
 800d912:	2100      	movs	r1, #0
 800d914:	6878      	ldr	r0, [r7, #4]
 800d916:	f7ff fecf 	bl	800d6b8 <mg_iobuf_resize>
}
 800d91a:	bf00      	nop
 800d91c:	3708      	adds	r7, #8
 800d91e:	46bd      	mov	sp, r7
 800d920:	bd80      	pop	{r7, pc}
	...

0800d924 <escapeseq>:
#endif




static const char *escapeseq(int esc) {
 800d924:	b480      	push	{r7}
 800d926:	b083      	sub	sp, #12
 800d928:	af00      	add	r7, sp, #0
 800d92a:	6078      	str	r0, [r7, #4]
  return esc ? "\b\f\n\r\t\\\"" : "bfnrt\\\"";
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d001      	beq.n	800d936 <escapeseq+0x12>
 800d932:	4b04      	ldr	r3, [pc, #16]	@ (800d944 <escapeseq+0x20>)
 800d934:	e000      	b.n	800d938 <escapeseq+0x14>
 800d936:	4b04      	ldr	r3, [pc, #16]	@ (800d948 <escapeseq+0x24>)
}
 800d938:	4618      	mov	r0, r3
 800d93a:	370c      	adds	r7, #12
 800d93c:	46bd      	mov	sp, r7
 800d93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d942:	4770      	bx	lr
 800d944:	0802aae8 	.word	0x0802aae8
 800d948:	0802aaf0 	.word	0x0802aaf0

0800d94c <json_esc>:

static char json_esc(int c, int esc) {
 800d94c:	b580      	push	{r7, lr}
 800d94e:	b086      	sub	sp, #24
 800d950:	af00      	add	r7, sp, #0
 800d952:	6078      	str	r0, [r7, #4]
 800d954:	6039      	str	r1, [r7, #0]
  const char *p, *esc1 = escapeseq(esc), *esc2 = escapeseq(!esc);
 800d956:	6838      	ldr	r0, [r7, #0]
 800d958:	f7ff ffe4 	bl	800d924 <escapeseq>
 800d95c:	6138      	str	r0, [r7, #16]
 800d95e:	683b      	ldr	r3, [r7, #0]
 800d960:	2b00      	cmp	r3, #0
 800d962:	bf0c      	ite	eq
 800d964:	2301      	moveq	r3, #1
 800d966:	2300      	movne	r3, #0
 800d968:	b2db      	uxtb	r3, r3
 800d96a:	4618      	mov	r0, r3
 800d96c:	f7ff ffda 	bl	800d924 <escapeseq>
 800d970:	60f8      	str	r0, [r7, #12]
  for (p = esc1; *p != '\0'; p++) {
 800d972:	693b      	ldr	r3, [r7, #16]
 800d974:	617b      	str	r3, [r7, #20]
 800d976:	e010      	b.n	800d99a <json_esc+0x4e>
    if (*p == c) return esc2[p - esc1];
 800d978:	697b      	ldr	r3, [r7, #20]
 800d97a:	781b      	ldrb	r3, [r3, #0]
 800d97c:	461a      	mov	r2, r3
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	4293      	cmp	r3, r2
 800d982:	d107      	bne.n	800d994 <json_esc+0x48>
 800d984:	697a      	ldr	r2, [r7, #20]
 800d986:	693b      	ldr	r3, [r7, #16]
 800d988:	1ad3      	subs	r3, r2, r3
 800d98a:	461a      	mov	r2, r3
 800d98c:	68fb      	ldr	r3, [r7, #12]
 800d98e:	4413      	add	r3, r2
 800d990:	781b      	ldrb	r3, [r3, #0]
 800d992:	e007      	b.n	800d9a4 <json_esc+0x58>
  for (p = esc1; *p != '\0'; p++) {
 800d994:	697b      	ldr	r3, [r7, #20]
 800d996:	3301      	adds	r3, #1
 800d998:	617b      	str	r3, [r7, #20]
 800d99a:	697b      	ldr	r3, [r7, #20]
 800d99c:	781b      	ldrb	r3, [r3, #0]
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d1ea      	bne.n	800d978 <json_esc+0x2c>
  }
  return 0;
 800d9a2:	2300      	movs	r3, #0
}
 800d9a4:	4618      	mov	r0, r3
 800d9a6:	3718      	adds	r7, #24
 800d9a8:	46bd      	mov	sp, r7
 800d9aa:	bd80      	pop	{r7, pc}

0800d9ac <mg_pass_string>:

static int mg_pass_string(const char *s, int len) {
 800d9ac:	b580      	push	{r7, lr}
 800d9ae:	b084      	sub	sp, #16
 800d9b0:	af00      	add	r7, sp, #0
 800d9b2:	6078      	str	r0, [r7, #4]
 800d9b4:	6039      	str	r1, [r7, #0]
  int i;
  for (i = 0; i < len; i++) {
 800d9b6:	2300      	movs	r3, #0
 800d9b8:	60fb      	str	r3, [r7, #12]
 800d9ba:	e02e      	b.n	800da1a <mg_pass_string+0x6e>
    if (s[i] == '\\' && i + 1 < len && json_esc(s[i + 1], 1)) {
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	687a      	ldr	r2, [r7, #4]
 800d9c0:	4413      	add	r3, r2
 800d9c2:	781b      	ldrb	r3, [r3, #0]
 800d9c4:	2b5c      	cmp	r3, #92	@ 0x5c
 800d9c6:	d114      	bne.n	800d9f2 <mg_pass_string+0x46>
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	3301      	adds	r3, #1
 800d9cc:	683a      	ldr	r2, [r7, #0]
 800d9ce:	429a      	cmp	r2, r3
 800d9d0:	dd0f      	ble.n	800d9f2 <mg_pass_string+0x46>
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	3301      	adds	r3, #1
 800d9d6:	687a      	ldr	r2, [r7, #4]
 800d9d8:	4413      	add	r3, r2
 800d9da:	781b      	ldrb	r3, [r3, #0]
 800d9dc:	2101      	movs	r1, #1
 800d9de:	4618      	mov	r0, r3
 800d9e0:	f7ff ffb4 	bl	800d94c <json_esc>
 800d9e4:	4603      	mov	r3, r0
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d003      	beq.n	800d9f2 <mg_pass_string+0x46>
      i++;
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	3301      	adds	r3, #1
 800d9ee:	60fb      	str	r3, [r7, #12]
 800d9f0:	e010      	b.n	800da14 <mg_pass_string+0x68>
    } else if (s[i] == '\0') {
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	687a      	ldr	r2, [r7, #4]
 800d9f6:	4413      	add	r3, r2
 800d9f8:	781b      	ldrb	r3, [r3, #0]
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d102      	bne.n	800da04 <mg_pass_string+0x58>
      return MG_JSON_INVALID;
 800d9fe:	f06f 0301 	mvn.w	r3, #1
 800da02:	e010      	b.n	800da26 <mg_pass_string+0x7a>
    } else if (s[i] == '"') {
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	687a      	ldr	r2, [r7, #4]
 800da08:	4413      	add	r3, r2
 800da0a:	781b      	ldrb	r3, [r3, #0]
 800da0c:	2b22      	cmp	r3, #34	@ 0x22
 800da0e:	d101      	bne.n	800da14 <mg_pass_string+0x68>
      return i;
 800da10:	68fb      	ldr	r3, [r7, #12]
 800da12:	e008      	b.n	800da26 <mg_pass_string+0x7a>
  for (i = 0; i < len; i++) {
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	3301      	adds	r3, #1
 800da18:	60fb      	str	r3, [r7, #12]
 800da1a:	68fa      	ldr	r2, [r7, #12]
 800da1c:	683b      	ldr	r3, [r7, #0]
 800da1e:	429a      	cmp	r2, r3
 800da20:	dbcc      	blt.n	800d9bc <mg_pass_string+0x10>
    }
  }
  return MG_JSON_INVALID;
 800da22:	f06f 0301 	mvn.w	r3, #1
}
 800da26:	4618      	mov	r0, r3
 800da28:	3710      	adds	r7, #16
 800da2a:	46bd      	mov	sp, r7
 800da2c:	bd80      	pop	{r7, pc}
	...

0800da30 <mg_atod>:

static double mg_atod(const char *p, int len, int *numlen) {
 800da30:	b480      	push	{r7}
 800da32:	b091      	sub	sp, #68	@ 0x44
 800da34:	af00      	add	r7, sp, #0
 800da36:	60f8      	str	r0, [r7, #12]
 800da38:	60b9      	str	r1, [r7, #8]
 800da3a:	607a      	str	r2, [r7, #4]
  double d = 0.0;
 800da3c:	f04f 0200 	mov.w	r2, #0
 800da40:	f04f 0300 	mov.w	r3, #0
 800da44:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
  int i = 0, sign = 1;
 800da48:	2300      	movs	r3, #0
 800da4a:	637b      	str	r3, [r7, #52]	@ 0x34
 800da4c:	2301      	movs	r3, #1
 800da4e:	633b      	str	r3, [r7, #48]	@ 0x30

  // Sign
  if (i < len && *p == '-') {
 800da50:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800da52:	68bb      	ldr	r3, [r7, #8]
 800da54:	429a      	cmp	r2, r3
 800da56:	da0a      	bge.n	800da6e <mg_atod+0x3e>
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	781b      	ldrb	r3, [r3, #0]
 800da5c:	2b2d      	cmp	r3, #45	@ 0x2d
 800da5e:	d106      	bne.n	800da6e <mg_atod+0x3e>
    sign = -1, i++;
 800da60:	f04f 33ff 	mov.w	r3, #4294967295
 800da64:	633b      	str	r3, [r7, #48]	@ 0x30
 800da66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800da68:	3301      	adds	r3, #1
 800da6a:	637b      	str	r3, [r7, #52]	@ 0x34
 800da6c:	e00a      	b.n	800da84 <mg_atod+0x54>
  } else if (i < len && *p == '+') {
 800da6e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800da70:	68bb      	ldr	r3, [r7, #8]
 800da72:	429a      	cmp	r2, r3
 800da74:	da21      	bge.n	800daba <mg_atod+0x8a>
 800da76:	68fb      	ldr	r3, [r7, #12]
 800da78:	781b      	ldrb	r3, [r3, #0]
 800da7a:	2b2b      	cmp	r3, #43	@ 0x2b
 800da7c:	d11d      	bne.n	800daba <mg_atod+0x8a>
    i++;
 800da7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800da80:	3301      	adds	r3, #1
 800da82:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  // Decimal
  for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 800da84:	e019      	b.n	800daba <mg_atod+0x8a>
    d *= 10.0;
 800da86:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 800da8a:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800da8e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800da92:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
    d += p[i] - '0';
 800da96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800da98:	68fa      	ldr	r2, [r7, #12]
 800da9a:	4413      	add	r3, r2
 800da9c:	781b      	ldrb	r3, [r3, #0]
 800da9e:	3b30      	subs	r3, #48	@ 0x30
 800daa0:	ee07 3a90 	vmov	s15, r3
 800daa4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800daa8:	ed97 6b0e 	vldr	d6, [r7, #56]	@ 0x38
 800daac:	ee36 7b07 	vadd.f64	d7, d6, d7
 800dab0:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
  for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 800dab4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dab6:	3301      	adds	r3, #1
 800dab8:	637b      	str	r3, [r7, #52]	@ 0x34
 800daba:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dabc:	68bb      	ldr	r3, [r7, #8]
 800dabe:	429a      	cmp	r2, r3
 800dac0:	da0b      	bge.n	800dada <mg_atod+0xaa>
 800dac2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dac4:	68fa      	ldr	r2, [r7, #12]
 800dac6:	4413      	add	r3, r2
 800dac8:	781b      	ldrb	r3, [r3, #0]
 800daca:	2b2f      	cmp	r3, #47	@ 0x2f
 800dacc:	d905      	bls.n	800dada <mg_atod+0xaa>
 800dace:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dad0:	68fa      	ldr	r2, [r7, #12]
 800dad2:	4413      	add	r3, r2
 800dad4:	781b      	ldrb	r3, [r3, #0]
 800dad6:	2b39      	cmp	r3, #57	@ 0x39
 800dad8:	d9d5      	bls.n	800da86 <mg_atod+0x56>
  }
  d *= sign;
 800dada:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dadc:	ee07 3a90 	vmov	s15, r3
 800dae0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800dae4:	ed97 6b0e 	vldr	d6, [r7, #56]	@ 0x38
 800dae8:	ee26 7b07 	vmul.f64	d7, d6, d7
 800daec:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38

  // Fractional
  if (i < len && p[i] == '.') {
 800daf0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800daf2:	68bb      	ldr	r3, [r7, #8]
 800daf4:	429a      	cmp	r2, r3
 800daf6:	da51      	bge.n	800db9c <mg_atod+0x16c>
 800daf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dafa:	68fa      	ldr	r2, [r7, #12]
 800dafc:	4413      	add	r3, r2
 800dafe:	781b      	ldrb	r3, [r3, #0]
 800db00:	2b2e      	cmp	r3, #46	@ 0x2e
 800db02:	d14b      	bne.n	800db9c <mg_atod+0x16c>
    double frac = 0.0, base = 0.1;
 800db04:	f04f 0200 	mov.w	r2, #0
 800db08:	f04f 0300 	mov.w	r3, #0
 800db0c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 800db10:	a36d      	add	r3, pc, #436	@ (adr r3, 800dcc8 <mg_atod+0x298>)
 800db12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db16:	e9c7 2308 	strd	r2, r3, [r7, #32]
    i++;
 800db1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800db1c:	3301      	adds	r3, #1
 800db1e:	637b      	str	r3, [r7, #52]	@ 0x34
    for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 800db20:	e01d      	b.n	800db5e <mg_atod+0x12e>
      frac += base * (p[i] - '0');
 800db22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800db24:	68fa      	ldr	r2, [r7, #12]
 800db26:	4413      	add	r3, r2
 800db28:	781b      	ldrb	r3, [r3, #0]
 800db2a:	3b30      	subs	r3, #48	@ 0x30
 800db2c:	ee07 3a90 	vmov	s15, r3
 800db30:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800db34:	ed97 7b08 	vldr	d7, [r7, #32]
 800db38:	ee26 7b07 	vmul.f64	d7, d6, d7
 800db3c:	ed97 6b0a 	vldr	d6, [r7, #40]	@ 0x28
 800db40:	ee36 7b07 	vadd.f64	d7, d6, d7
 800db44:	ed87 7b0a 	vstr	d7, [r7, #40]	@ 0x28
      base /= 10.0;
 800db48:	ed97 6b08 	vldr	d6, [r7, #32]
 800db4c:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 800db50:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800db54:	ed87 7b08 	vstr	d7, [r7, #32]
    for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 800db58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800db5a:	3301      	adds	r3, #1
 800db5c:	637b      	str	r3, [r7, #52]	@ 0x34
 800db5e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800db60:	68bb      	ldr	r3, [r7, #8]
 800db62:	429a      	cmp	r2, r3
 800db64:	da0b      	bge.n	800db7e <mg_atod+0x14e>
 800db66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800db68:	68fa      	ldr	r2, [r7, #12]
 800db6a:	4413      	add	r3, r2
 800db6c:	781b      	ldrb	r3, [r3, #0]
 800db6e:	2b2f      	cmp	r3, #47	@ 0x2f
 800db70:	d905      	bls.n	800db7e <mg_atod+0x14e>
 800db72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800db74:	68fa      	ldr	r2, [r7, #12]
 800db76:	4413      	add	r3, r2
 800db78:	781b      	ldrb	r3, [r3, #0]
 800db7a:	2b39      	cmp	r3, #57	@ 0x39
 800db7c:	d9d1      	bls.n	800db22 <mg_atod+0xf2>
    }
    d += frac * sign;
 800db7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db80:	ee07 3a90 	vmov	s15, r3
 800db84:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800db88:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 800db8c:	ee26 7b07 	vmul.f64	d7, d6, d7
 800db90:	ed97 6b0e 	vldr	d6, [r7, #56]	@ 0x38
 800db94:	ee36 7b07 	vadd.f64	d7, d6, d7
 800db98:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
  }

  // Exponential
  if (i < len && (p[i] == 'e' || p[i] == 'E')) {
 800db9c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800db9e:	68bb      	ldr	r3, [r7, #8]
 800dba0:	429a      	cmp	r2, r3
 800dba2:	da7e      	bge.n	800dca2 <mg_atod+0x272>
 800dba4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dba6:	68fa      	ldr	r2, [r7, #12]
 800dba8:	4413      	add	r3, r2
 800dbaa:	781b      	ldrb	r3, [r3, #0]
 800dbac:	2b65      	cmp	r3, #101	@ 0x65
 800dbae:	d005      	beq.n	800dbbc <mg_atod+0x18c>
 800dbb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dbb2:	68fa      	ldr	r2, [r7, #12]
 800dbb4:	4413      	add	r3, r2
 800dbb6:	781b      	ldrb	r3, [r3, #0]
 800dbb8:	2b45      	cmp	r3, #69	@ 0x45
 800dbba:	d172      	bne.n	800dca2 <mg_atod+0x272>
    int j, exp = 0, minus = 0;
 800dbbc:	2300      	movs	r3, #0
 800dbbe:	61bb      	str	r3, [r7, #24]
 800dbc0:	2300      	movs	r3, #0
 800dbc2:	617b      	str	r3, [r7, #20]
    i++;
 800dbc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dbc6:	3301      	adds	r3, #1
 800dbc8:	637b      	str	r3, [r7, #52]	@ 0x34
    if (i < len && p[i] == '-') minus = 1, i++;
 800dbca:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dbcc:	68bb      	ldr	r3, [r7, #8]
 800dbce:	429a      	cmp	r2, r3
 800dbd0:	da0a      	bge.n	800dbe8 <mg_atod+0x1b8>
 800dbd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dbd4:	68fa      	ldr	r2, [r7, #12]
 800dbd6:	4413      	add	r3, r2
 800dbd8:	781b      	ldrb	r3, [r3, #0]
 800dbda:	2b2d      	cmp	r3, #45	@ 0x2d
 800dbdc:	d104      	bne.n	800dbe8 <mg_atod+0x1b8>
 800dbde:	2301      	movs	r3, #1
 800dbe0:	617b      	str	r3, [r7, #20]
 800dbe2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dbe4:	3301      	adds	r3, #1
 800dbe6:	637b      	str	r3, [r7, #52]	@ 0x34
    if (i < len && p[i] == '+') i++;
 800dbe8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dbea:	68bb      	ldr	r3, [r7, #8]
 800dbec:	429a      	cmp	r2, r3
 800dbee:	da19      	bge.n	800dc24 <mg_atod+0x1f4>
 800dbf0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dbf2:	68fa      	ldr	r2, [r7, #12]
 800dbf4:	4413      	add	r3, r2
 800dbf6:	781b      	ldrb	r3, [r3, #0]
 800dbf8:	2b2b      	cmp	r3, #43	@ 0x2b
 800dbfa:	d113      	bne.n	800dc24 <mg_atod+0x1f4>
 800dbfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dbfe:	3301      	adds	r3, #1
 800dc00:	637b      	str	r3, [r7, #52]	@ 0x34
    while (i < len && p[i] >= '0' && p[i] <= '9' && exp < 308)
 800dc02:	e00f      	b.n	800dc24 <mg_atod+0x1f4>
      exp = exp * 10 + (p[i++] - '0');
 800dc04:	69ba      	ldr	r2, [r7, #24]
 800dc06:	4613      	mov	r3, r2
 800dc08:	009b      	lsls	r3, r3, #2
 800dc0a:	4413      	add	r3, r2
 800dc0c:	005b      	lsls	r3, r3, #1
 800dc0e:	4619      	mov	r1, r3
 800dc10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dc12:	1c5a      	adds	r2, r3, #1
 800dc14:	637a      	str	r2, [r7, #52]	@ 0x34
 800dc16:	461a      	mov	r2, r3
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	4413      	add	r3, r2
 800dc1c:	781b      	ldrb	r3, [r3, #0]
 800dc1e:	3b30      	subs	r3, #48	@ 0x30
 800dc20:	440b      	add	r3, r1
 800dc22:	61bb      	str	r3, [r7, #24]
    while (i < len && p[i] >= '0' && p[i] <= '9' && exp < 308)
 800dc24:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dc26:	68bb      	ldr	r3, [r7, #8]
 800dc28:	429a      	cmp	r2, r3
 800dc2a:	da0f      	bge.n	800dc4c <mg_atod+0x21c>
 800dc2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dc2e:	68fa      	ldr	r2, [r7, #12]
 800dc30:	4413      	add	r3, r2
 800dc32:	781b      	ldrb	r3, [r3, #0]
 800dc34:	2b2f      	cmp	r3, #47	@ 0x2f
 800dc36:	d909      	bls.n	800dc4c <mg_atod+0x21c>
 800dc38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dc3a:	68fa      	ldr	r2, [r7, #12]
 800dc3c:	4413      	add	r3, r2
 800dc3e:	781b      	ldrb	r3, [r3, #0]
 800dc40:	2b39      	cmp	r3, #57	@ 0x39
 800dc42:	d803      	bhi.n	800dc4c <mg_atod+0x21c>
 800dc44:	69bb      	ldr	r3, [r7, #24]
 800dc46:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 800dc4a:	dbdb      	blt.n	800dc04 <mg_atod+0x1d4>
    if (minus) exp = -exp;
 800dc4c:	697b      	ldr	r3, [r7, #20]
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d002      	beq.n	800dc58 <mg_atod+0x228>
 800dc52:	69bb      	ldr	r3, [r7, #24]
 800dc54:	425b      	negs	r3, r3
 800dc56:	61bb      	str	r3, [r7, #24]
    for (j = 0; j < exp; j++) d *= 10.0;
 800dc58:	2300      	movs	r3, #0
 800dc5a:	61fb      	str	r3, [r7, #28]
 800dc5c:	e00a      	b.n	800dc74 <mg_atod+0x244>
 800dc5e:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 800dc62:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800dc66:	ee27 7b06 	vmul.f64	d7, d7, d6
 800dc6a:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
 800dc6e:	69fb      	ldr	r3, [r7, #28]
 800dc70:	3301      	adds	r3, #1
 800dc72:	61fb      	str	r3, [r7, #28]
 800dc74:	69fa      	ldr	r2, [r7, #28]
 800dc76:	69bb      	ldr	r3, [r7, #24]
 800dc78:	429a      	cmp	r2, r3
 800dc7a:	dbf0      	blt.n	800dc5e <mg_atod+0x22e>
    for (j = 0; j < -exp; j++) d /= 10.0;
 800dc7c:	2300      	movs	r3, #0
 800dc7e:	61fb      	str	r3, [r7, #28]
 800dc80:	e00a      	b.n	800dc98 <mg_atod+0x268>
 800dc82:	ed97 6b0e 	vldr	d6, [r7, #56]	@ 0x38
 800dc86:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 800dc8a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800dc8e:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
 800dc92:	69fb      	ldr	r3, [r7, #28]
 800dc94:	3301      	adds	r3, #1
 800dc96:	61fb      	str	r3, [r7, #28]
 800dc98:	69bb      	ldr	r3, [r7, #24]
 800dc9a:	425b      	negs	r3, r3
 800dc9c:	69fa      	ldr	r2, [r7, #28]
 800dc9e:	429a      	cmp	r2, r3
 800dca0:	dbef      	blt.n	800dc82 <mg_atod+0x252>
  }

  if (numlen != NULL) *numlen = i;
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d002      	beq.n	800dcae <mg_atod+0x27e>
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dcac:	601a      	str	r2, [r3, #0]
  return d;
 800dcae:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800dcb2:	ec43 2b17 	vmov	d7, r2, r3
}
 800dcb6:	eeb0 0b47 	vmov.f64	d0, d7
 800dcba:	3744      	adds	r7, #68	@ 0x44
 800dcbc:	46bd      	mov	sp, r7
 800dcbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcc2:	4770      	bx	lr
 800dcc4:	f3af 8000 	nop.w
 800dcc8:	9999999a 	.word	0x9999999a
 800dccc:	3fb99999 	.word	0x3fb99999

0800dcd0 <mg_json_next>:

// Iterate over object or array elements
size_t mg_json_next(struct mg_str obj, size_t ofs, struct mg_str *key,
                    struct mg_str *val) {
 800dcd0:	b590      	push	{r4, r7, lr}
 800dcd2:	b08d      	sub	sp, #52	@ 0x34
 800dcd4:	af00      	add	r7, sp, #0
 800dcd6:	f107 0410 	add.w	r4, r7, #16
 800dcda:	e884 0003 	stmia.w	r4, {r0, r1}
 800dcde:	60fa      	str	r2, [r7, #12]
 800dce0:	60bb      	str	r3, [r7, #8]
  if (ofs >= obj.len) {
 800dce2:	697b      	ldr	r3, [r7, #20]
 800dce4:	68fa      	ldr	r2, [r7, #12]
 800dce6:	429a      	cmp	r2, r3
 800dce8:	d302      	bcc.n	800dcf0 <mg_json_next+0x20>
    ofs = 0;  // Out of boundaries, stop scanning
 800dcea:	2300      	movs	r3, #0
 800dcec:	60fb      	str	r3, [r7, #12]
 800dcee:	e133      	b.n	800df58 <mg_json_next+0x288>
  } else if (obj.len < 2 || (*obj.buf != '{' && *obj.buf != '[')) {
 800dcf0:	697b      	ldr	r3, [r7, #20]
 800dcf2:	2b01      	cmp	r3, #1
 800dcf4:	d907      	bls.n	800dd06 <mg_json_next+0x36>
 800dcf6:	693b      	ldr	r3, [r7, #16]
 800dcf8:	781b      	ldrb	r3, [r3, #0]
 800dcfa:	2b7b      	cmp	r3, #123	@ 0x7b
 800dcfc:	d006      	beq.n	800dd0c <mg_json_next+0x3c>
 800dcfe:	693b      	ldr	r3, [r7, #16]
 800dd00:	781b      	ldrb	r3, [r3, #0]
 800dd02:	2b5b      	cmp	r3, #91	@ 0x5b
 800dd04:	d002      	beq.n	800dd0c <mg_json_next+0x3c>
    ofs = 0;  // Not an array or object, stop
 800dd06:	2300      	movs	r3, #0
 800dd08:	60fb      	str	r3, [r7, #12]
 800dd0a:	e125      	b.n	800df58 <mg_json_next+0x288>
  } else {
    struct mg_str sub = mg_str_n(obj.buf + ofs, obj.len - ofs);
 800dd0c:	693a      	ldr	r2, [r7, #16]
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	18d1      	adds	r1, r2, r3
 800dd12:	697a      	ldr	r2, [r7, #20]
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	1ad2      	subs	r2, r2, r3
 800dd18:	f107 0320 	add.w	r3, r7, #32
 800dd1c:	4618      	mov	r0, r3
 800dd1e:	f008 fdde 	bl	80168de <mg_str_n>
    if (ofs == 0) ofs++, sub.buf++, sub.len--;
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d108      	bne.n	800dd3a <mg_json_next+0x6a>
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	3301      	adds	r3, #1
 800dd2c:	60fb      	str	r3, [r7, #12]
 800dd2e:	6a3b      	ldr	r3, [r7, #32]
 800dd30:	3301      	adds	r3, #1
 800dd32:	623b      	str	r3, [r7, #32]
 800dd34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd36:	3b01      	subs	r3, #1
 800dd38:	627b      	str	r3, [r7, #36]	@ 0x24
    if (*obj.buf == '[') {  // Iterate over an array
 800dd3a:	693b      	ldr	r3, [r7, #16]
 800dd3c:	781b      	ldrb	r3, [r3, #0]
 800dd3e:	2b5b      	cmp	r3, #91	@ 0x5b
 800dd40:	d146      	bne.n	800ddd0 <mg_json_next+0x100>
      int n = 0, o = mg_json_get(sub, "$", &n);
 800dd42:	2300      	movs	r3, #0
 800dd44:	61fb      	str	r3, [r7, #28]
 800dd46:	f107 031c 	add.w	r3, r7, #28
 800dd4a:	4a86      	ldr	r2, [pc, #536]	@ (800df64 <mg_json_next+0x294>)
 800dd4c:	f107 0120 	add.w	r1, r7, #32
 800dd50:	c903      	ldmia	r1, {r0, r1}
 800dd52:	f000 f909 	bl	800df68 <mg_json_get>
 800dd56:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (n < 0 || o < 0 || (size_t) (o + n) > sub.len) {
 800dd58:	69fb      	ldr	r3, [r7, #28]
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	db09      	blt.n	800dd72 <mg_json_next+0xa2>
 800dd5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	db06      	blt.n	800dd72 <mg_json_next+0xa2>
 800dd64:	69fa      	ldr	r2, [r7, #28]
 800dd66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd68:	4413      	add	r3, r2
 800dd6a:	461a      	mov	r2, r3
 800dd6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd6e:	429a      	cmp	r2, r3
 800dd70:	d902      	bls.n	800dd78 <mg_json_next+0xa8>
        ofs = 0;  // Error parsing key, stop scanning
 800dd72:	2300      	movs	r3, #0
 800dd74:	60fb      	str	r3, [r7, #12]
 800dd76:	e0b6      	b.n	800dee6 <mg_json_next+0x216>
      } else {
        if (key) *key = mg_str_n(NULL, 0);
 800dd78:	68bb      	ldr	r3, [r7, #8]
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d00c      	beq.n	800dd98 <mg_json_next+0xc8>
 800dd7e:	68bc      	ldr	r4, [r7, #8]
 800dd80:	463b      	mov	r3, r7
 800dd82:	2200      	movs	r2, #0
 800dd84:	2100      	movs	r1, #0
 800dd86:	4618      	mov	r0, r3
 800dd88:	f008 fda9 	bl	80168de <mg_str_n>
 800dd8c:	4622      	mov	r2, r4
 800dd8e:	463b      	mov	r3, r7
 800dd90:	e893 0003 	ldmia.w	r3, {r0, r1}
 800dd94:	e882 0003 	stmia.w	r2, {r0, r1}
        if (val) *val = mg_str_n(sub.buf + o, (size_t) n);
 800dd98:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d00f      	beq.n	800ddbe <mg_json_next+0xee>
 800dd9e:	6a3a      	ldr	r2, [r7, #32]
 800dda0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dda2:	18d1      	adds	r1, r2, r3
 800dda4:	69fb      	ldr	r3, [r7, #28]
 800dda6:	461a      	mov	r2, r3
 800dda8:	6c3c      	ldr	r4, [r7, #64]	@ 0x40
 800ddaa:	463b      	mov	r3, r7
 800ddac:	4618      	mov	r0, r3
 800ddae:	f008 fd96 	bl	80168de <mg_str_n>
 800ddb2:	4622      	mov	r2, r4
 800ddb4:	463b      	mov	r3, r7
 800ddb6:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ddba:	e882 0003 	stmia.w	r2, {r0, r1}
        ofs = (size_t) (&sub.buf[o + n] - obj.buf);
 800ddbe:	6a3b      	ldr	r3, [r7, #32]
 800ddc0:	69f9      	ldr	r1, [r7, #28]
 800ddc2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ddc4:	440a      	add	r2, r1
 800ddc6:	441a      	add	r2, r3
 800ddc8:	693b      	ldr	r3, [r7, #16]
 800ddca:	1ad3      	subs	r3, r2, r3
 800ddcc:	60fb      	str	r3, [r7, #12]
 800ddce:	e08e      	b.n	800deee <mg_json_next+0x21e>
      }
    } else {  // Iterate over an object
      int n = 0, o = mg_json_get(sub, "$", &n);
 800ddd0:	2300      	movs	r3, #0
 800ddd2:	61bb      	str	r3, [r7, #24]
 800ddd4:	f107 0318 	add.w	r3, r7, #24
 800ddd8:	4a62      	ldr	r2, [pc, #392]	@ (800df64 <mg_json_next+0x294>)
 800ddda:	f107 0120 	add.w	r1, r7, #32
 800ddde:	c903      	ldmia	r1, {r0, r1}
 800dde0:	f000 f8c2 	bl	800df68 <mg_json_get>
 800dde4:	62f8      	str	r0, [r7, #44]	@ 0x2c
      if (n < 0 || o < 0 || (size_t) (o + n) > sub.len) {
 800dde6:	69bb      	ldr	r3, [r7, #24]
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	db09      	blt.n	800de00 <mg_json_next+0x130>
 800ddec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	db06      	blt.n	800de00 <mg_json_next+0x130>
 800ddf2:	69ba      	ldr	r2, [r7, #24]
 800ddf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ddf6:	4413      	add	r3, r2
 800ddf8:	461a      	mov	r2, r3
 800ddfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddfc:	429a      	cmp	r2, r3
 800ddfe:	d902      	bls.n	800de06 <mg_json_next+0x136>
        ofs = 0;  // Error parsing key, stop scanning
 800de00:	2300      	movs	r3, #0
 800de02:	60fb      	str	r3, [r7, #12]
 800de04:	e06f      	b.n	800dee6 <mg_json_next+0x216>
      } else {
        if (key) *key = mg_str_n(sub.buf + o, (size_t) n);
 800de06:	68bb      	ldr	r3, [r7, #8]
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d00f      	beq.n	800de2c <mg_json_next+0x15c>
 800de0c:	6a3a      	ldr	r2, [r7, #32]
 800de0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de10:	18d1      	adds	r1, r2, r3
 800de12:	69bb      	ldr	r3, [r7, #24]
 800de14:	461a      	mov	r2, r3
 800de16:	68bc      	ldr	r4, [r7, #8]
 800de18:	463b      	mov	r3, r7
 800de1a:	4618      	mov	r0, r3
 800de1c:	f008 fd5f 	bl	80168de <mg_str_n>
 800de20:	4622      	mov	r2, r4
 800de22:	463b      	mov	r3, r7
 800de24:	e893 0003 	ldmia.w	r3, {r0, r1}
 800de28:	e882 0003 	stmia.w	r2, {r0, r1}
        sub.buf += o + n, sub.len -= (size_t) (o + n);
 800de2c:	6a3b      	ldr	r3, [r7, #32]
 800de2e:	69b9      	ldr	r1, [r7, #24]
 800de30:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800de32:	440a      	add	r2, r1
 800de34:	4413      	add	r3, r2
 800de36:	623b      	str	r3, [r7, #32]
 800de38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de3a:	69b9      	ldr	r1, [r7, #24]
 800de3c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800de3e:	440a      	add	r2, r1
 800de40:	1a9b      	subs	r3, r3, r2
 800de42:	627b      	str	r3, [r7, #36]	@ 0x24
        while (sub.len > 0 && *sub.buf != ':') sub.len--, sub.buf++;
 800de44:	e005      	b.n	800de52 <mg_json_next+0x182>
 800de46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de48:	3b01      	subs	r3, #1
 800de4a:	627b      	str	r3, [r7, #36]	@ 0x24
 800de4c:	6a3b      	ldr	r3, [r7, #32]
 800de4e:	3301      	adds	r3, #1
 800de50:	623b      	str	r3, [r7, #32]
 800de52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de54:	2b00      	cmp	r3, #0
 800de56:	d003      	beq.n	800de60 <mg_json_next+0x190>
 800de58:	6a3b      	ldr	r3, [r7, #32]
 800de5a:	781b      	ldrb	r3, [r3, #0]
 800de5c:	2b3a      	cmp	r3, #58	@ 0x3a
 800de5e:	d1f2      	bne.n	800de46 <mg_json_next+0x176>
        if (sub.len > 0 && *sub.buf == ':') sub.len--, sub.buf++;
 800de60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de62:	2b00      	cmp	r3, #0
 800de64:	d009      	beq.n	800de7a <mg_json_next+0x1aa>
 800de66:	6a3b      	ldr	r3, [r7, #32]
 800de68:	781b      	ldrb	r3, [r3, #0]
 800de6a:	2b3a      	cmp	r3, #58	@ 0x3a
 800de6c:	d105      	bne.n	800de7a <mg_json_next+0x1aa>
 800de6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de70:	3b01      	subs	r3, #1
 800de72:	627b      	str	r3, [r7, #36]	@ 0x24
 800de74:	6a3b      	ldr	r3, [r7, #32]
 800de76:	3301      	adds	r3, #1
 800de78:	623b      	str	r3, [r7, #32]
        n = 0, o = mg_json_get(sub, "$", &n);
 800de7a:	2300      	movs	r3, #0
 800de7c:	61bb      	str	r3, [r7, #24]
 800de7e:	f107 0318 	add.w	r3, r7, #24
 800de82:	4a38      	ldr	r2, [pc, #224]	@ (800df64 <mg_json_next+0x294>)
 800de84:	f107 0120 	add.w	r1, r7, #32
 800de88:	c903      	ldmia	r1, {r0, r1}
 800de8a:	f000 f86d 	bl	800df68 <mg_json_get>
 800de8e:	62f8      	str	r0, [r7, #44]	@ 0x2c
        if (n < 0 || o < 0 || (size_t) (o + n) > sub.len) {
 800de90:	69bb      	ldr	r3, [r7, #24]
 800de92:	2b00      	cmp	r3, #0
 800de94:	db09      	blt.n	800deaa <mg_json_next+0x1da>
 800de96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de98:	2b00      	cmp	r3, #0
 800de9a:	db06      	blt.n	800deaa <mg_json_next+0x1da>
 800de9c:	69ba      	ldr	r2, [r7, #24]
 800de9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dea0:	4413      	add	r3, r2
 800dea2:	461a      	mov	r2, r3
 800dea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dea6:	429a      	cmp	r2, r3
 800dea8:	d902      	bls.n	800deb0 <mg_json_next+0x1e0>
          ofs = 0;  // Error parsing value, stop scanning
 800deaa:	2300      	movs	r3, #0
 800deac:	60fb      	str	r3, [r7, #12]
 800deae:	e01a      	b.n	800dee6 <mg_json_next+0x216>
        } else {
          if (val) *val = mg_str_n(sub.buf + o, (size_t) n);
 800deb0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d00f      	beq.n	800ded6 <mg_json_next+0x206>
 800deb6:	6a3a      	ldr	r2, [r7, #32]
 800deb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800deba:	18d1      	adds	r1, r2, r3
 800debc:	69bb      	ldr	r3, [r7, #24]
 800debe:	461a      	mov	r2, r3
 800dec0:	6c3c      	ldr	r4, [r7, #64]	@ 0x40
 800dec2:	463b      	mov	r3, r7
 800dec4:	4618      	mov	r0, r3
 800dec6:	f008 fd0a 	bl	80168de <mg_str_n>
 800deca:	4622      	mov	r2, r4
 800decc:	463b      	mov	r3, r7
 800dece:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ded2:	e882 0003 	stmia.w	r2, {r0, r1}
          ofs = (size_t) (&sub.buf[o + n] - obj.buf);
 800ded6:	6a3b      	ldr	r3, [r7, #32]
 800ded8:	69b9      	ldr	r1, [r7, #24]
 800deda:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dedc:	440a      	add	r2, r1
 800dede:	441a      	add	r2, r3
 800dee0:	693b      	ldr	r3, [r7, #16]
 800dee2:	1ad3      	subs	r3, r2, r3
 800dee4:	60fb      	str	r3, [r7, #12]
        }
      }
    }
    // MG_INFO(("SUB ofs %u %.*s", ofs, sub.len, sub.buf));
    while (ofs && ofs < obj.len &&
 800dee6:	e002      	b.n	800deee <mg_json_next+0x21e>
           (obj.buf[ofs] == ' ' || obj.buf[ofs] == '\t' ||
            obj.buf[ofs] == '\n' || obj.buf[ofs] == '\r')) {
      ofs++;
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	3301      	adds	r3, #1
 800deec:	60fb      	str	r3, [r7, #12]
    while (ofs && ofs < obj.len &&
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	2b00      	cmp	r3, #0
 800def2:	d01b      	beq.n	800df2c <mg_json_next+0x25c>
 800def4:	697b      	ldr	r3, [r7, #20]
 800def6:	68fa      	ldr	r2, [r7, #12]
 800def8:	429a      	cmp	r2, r3
 800defa:	d217      	bcs.n	800df2c <mg_json_next+0x25c>
           (obj.buf[ofs] == ' ' || obj.buf[ofs] == '\t' ||
 800defc:	693a      	ldr	r2, [r7, #16]
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	4413      	add	r3, r2
 800df02:	781b      	ldrb	r3, [r3, #0]
    while (ofs && ofs < obj.len &&
 800df04:	2b20      	cmp	r3, #32
 800df06:	d0ef      	beq.n	800dee8 <mg_json_next+0x218>
           (obj.buf[ofs] == ' ' || obj.buf[ofs] == '\t' ||
 800df08:	693a      	ldr	r2, [r7, #16]
 800df0a:	68fb      	ldr	r3, [r7, #12]
 800df0c:	4413      	add	r3, r2
 800df0e:	781b      	ldrb	r3, [r3, #0]
 800df10:	2b09      	cmp	r3, #9
 800df12:	d0e9      	beq.n	800dee8 <mg_json_next+0x218>
            obj.buf[ofs] == '\n' || obj.buf[ofs] == '\r')) {
 800df14:	693a      	ldr	r2, [r7, #16]
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	4413      	add	r3, r2
 800df1a:	781b      	ldrb	r3, [r3, #0]
           (obj.buf[ofs] == ' ' || obj.buf[ofs] == '\t' ||
 800df1c:	2b0a      	cmp	r3, #10
 800df1e:	d0e3      	beq.n	800dee8 <mg_json_next+0x218>
            obj.buf[ofs] == '\n' || obj.buf[ofs] == '\r')) {
 800df20:	693a      	ldr	r2, [r7, #16]
 800df22:	68fb      	ldr	r3, [r7, #12]
 800df24:	4413      	add	r3, r2
 800df26:	781b      	ldrb	r3, [r3, #0]
 800df28:	2b0d      	cmp	r3, #13
 800df2a:	d0dd      	beq.n	800dee8 <mg_json_next+0x218>
    }
    if (ofs && ofs < obj.len && obj.buf[ofs] == ',') ofs++;
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d00c      	beq.n	800df4c <mg_json_next+0x27c>
 800df32:	697b      	ldr	r3, [r7, #20]
 800df34:	68fa      	ldr	r2, [r7, #12]
 800df36:	429a      	cmp	r2, r3
 800df38:	d208      	bcs.n	800df4c <mg_json_next+0x27c>
 800df3a:	693a      	ldr	r2, [r7, #16]
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	4413      	add	r3, r2
 800df40:	781b      	ldrb	r3, [r3, #0]
 800df42:	2b2c      	cmp	r3, #44	@ 0x2c
 800df44:	d102      	bne.n	800df4c <mg_json_next+0x27c>
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	3301      	adds	r3, #1
 800df4a:	60fb      	str	r3, [r7, #12]
    if (ofs > obj.len) ofs = 0;
 800df4c:	697b      	ldr	r3, [r7, #20]
 800df4e:	68fa      	ldr	r2, [r7, #12]
 800df50:	429a      	cmp	r2, r3
 800df52:	d901      	bls.n	800df58 <mg_json_next+0x288>
 800df54:	2300      	movs	r3, #0
 800df56:	60fb      	str	r3, [r7, #12]
  }
  return ofs;
 800df58:	68fb      	ldr	r3, [r7, #12]
}
 800df5a:	4618      	mov	r0, r3
 800df5c:	3734      	adds	r7, #52	@ 0x34
 800df5e:	46bd      	mov	sp, r7
 800df60:	bd90      	pop	{r4, r7, pc}
 800df62:	bf00      	nop
 800df64:	0802aaf8 	.word	0x0802aaf8

0800df68 <mg_json_get>:

int mg_json_get(struct mg_str json, const char *path, int *toklen) {
 800df68:	b590      	push	{r4, r7, lr}
 800df6a:	b09b      	sub	sp, #108	@ 0x6c
 800df6c:	af00      	add	r7, sp, #0
 800df6e:	f107 0408 	add.w	r4, r7, #8
 800df72:	e884 0003 	stmia.w	r4, {r0, r1}
 800df76:	607a      	str	r2, [r7, #4]
 800df78:	603b      	str	r3, [r7, #0]
  const char *s = json.buf;
 800df7a:	68bb      	ldr	r3, [r7, #8]
 800df7c:	647b      	str	r3, [r7, #68]	@ 0x44
  int len = (int) json.len;
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	643b      	str	r3, [r7, #64]	@ 0x40
  enum { S_VALUE, S_KEY, S_COLON, S_COMMA_OR_EOO } expecting = S_VALUE;
 800df82:	2300      	movs	r3, #0
 800df84:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  unsigned char nesting[MG_JSON_MAX_DEPTH];
  int i = 0;             // Current offset in `s`
 800df88:	2300      	movs	r3, #0
 800df8a:	663b      	str	r3, [r7, #96]	@ 0x60
  int j = 0;             // Offset in `s` we're looking for (return value)
 800df8c:	2300      	movs	r3, #0
 800df8e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  int depth = 0;         // Current depth (nesting level)
 800df90:	2300      	movs	r3, #0
 800df92:	65bb      	str	r3, [r7, #88]	@ 0x58
  int ed = 0;            // Expected depth
 800df94:	2300      	movs	r3, #0
 800df96:	657b      	str	r3, [r7, #84]	@ 0x54
  int pos = 1;           // Current position in `path`
 800df98:	2301      	movs	r3, #1
 800df9a:	653b      	str	r3, [r7, #80]	@ 0x50
  int ci = -1, ei = -1;  // Current and expected index in array
 800df9c:	f04f 33ff 	mov.w	r3, #4294967295
 800dfa0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800dfa2:	f04f 33ff 	mov.w	r3, #4294967295
 800dfa6:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (toklen) *toklen = 0;
 800dfa8:	683b      	ldr	r3, [r7, #0]
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d002      	beq.n	800dfb4 <mg_json_get+0x4c>
 800dfae:	683b      	ldr	r3, [r7, #0]
 800dfb0:	2200      	movs	r2, #0
 800dfb2:	601a      	str	r2, [r3, #0]
  if (path[0] != '$') return MG_JSON_INVALID;
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	781b      	ldrb	r3, [r3, #0]
 800dfb8:	2b24      	cmp	r3, #36	@ 0x24
 800dfba:	d002      	beq.n	800dfc2 <mg_json_get+0x5a>
 800dfbc:	f06f 0301 	mvn.w	r3, #1
 800dfc0:	e308      	b.n	800e5d4 <mg_json_get+0x66c>
    if (c != nesting[depth - 1] + 2) return MG_JSON_INVALID; \
    depth--;                                                 \
    MG_CHECKRET(x);                                          \
  } while (0)

  for (i = 0; i < len; i++) {
 800dfc2:	2300      	movs	r3, #0
 800dfc4:	663b      	str	r3, [r7, #96]	@ 0x60
 800dfc6:	e2fe      	b.n	800e5c6 <mg_json_get+0x65e>
    unsigned char c = ((unsigned char *) s)[i];
 800dfc8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800dfca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800dfcc:	4413      	add	r3, r2
 800dfce:	781b      	ldrb	r3, [r3, #0]
 800dfd0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    if (c == ' ' || c == '\t' || c == '\n' || c == '\r') continue;
 800dfd4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800dfd8:	2b20      	cmp	r3, #32
 800dfda:	f000 82ee 	beq.w	800e5ba <mg_json_get+0x652>
 800dfde:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800dfe2:	2b09      	cmp	r3, #9
 800dfe4:	f000 82e9 	beq.w	800e5ba <mg_json_get+0x652>
 800dfe8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800dfec:	2b0a      	cmp	r3, #10
 800dfee:	f000 82e4 	beq.w	800e5ba <mg_json_get+0x652>
 800dff2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800dff6:	2b0d      	cmp	r3, #13
 800dff8:	f000 82df 	beq.w	800e5ba <mg_json_get+0x652>
    switch (expecting) {
 800dffc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800e000:	2b03      	cmp	r3, #3
 800e002:	f200 82dd 	bhi.w	800e5c0 <mg_json_get+0x658>
 800e006:	a201      	add	r2, pc, #4	@ (adr r2, 800e00c <mg_json_get+0xa4>)
 800e008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e00c:	0800e01d 	.word	0x0800e01d
 800e010:	0800e305 	.word	0x0800e305
 800e014:	0800e493 	.word	0x0800e493
 800e018:	0800e4a9 	.word	0x0800e4a9
      case S_VALUE:
        // p("V %s [%.*s] %d %d %d %d\n", path, pos, path, depth, ed, ci, ei);
        if (depth == ed) j = i;
 800e01c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e01e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e020:	429a      	cmp	r2, r3
 800e022:	d101      	bne.n	800e028 <mg_json_get+0xc0>
 800e024:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e026:	65fb      	str	r3, [r7, #92]	@ 0x5c
        if (c == '{') {
 800e028:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800e02c:	2b7b      	cmp	r3, #123	@ 0x7b
 800e02e:	d12b      	bne.n	800e088 <mg_json_get+0x120>
          if (depth >= (int) sizeof(nesting)) return MG_JSON_TOO_DEEP;
 800e030:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e032:	2b1d      	cmp	r3, #29
 800e034:	dd02      	ble.n	800e03c <mg_json_get+0xd4>
 800e036:	f04f 33ff 	mov.w	r3, #4294967295
 800e03a:	e2cb      	b.n	800e5d4 <mg_json_get+0x66c>
          if (depth == ed && path[pos] == '.' && ci == ei) {
 800e03c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e03e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e040:	429a      	cmp	r2, r3
 800e042:	d114      	bne.n	800e06e <mg_json_get+0x106>
 800e044:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e046:	687a      	ldr	r2, [r7, #4]
 800e048:	4413      	add	r3, r2
 800e04a:	781b      	ldrb	r3, [r3, #0]
 800e04c:	2b2e      	cmp	r3, #46	@ 0x2e
 800e04e:	d10e      	bne.n	800e06e <mg_json_get+0x106>
 800e050:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e052:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e054:	429a      	cmp	r2, r3
 800e056:	d10a      	bne.n	800e06e <mg_json_get+0x106>
            // If we start the object, reset array indices
            ed++, pos++, ci = ei = -1;
 800e058:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e05a:	3301      	adds	r3, #1
 800e05c:	657b      	str	r3, [r7, #84]	@ 0x54
 800e05e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e060:	3301      	adds	r3, #1
 800e062:	653b      	str	r3, [r7, #80]	@ 0x50
 800e064:	f04f 33ff 	mov.w	r3, #4294967295
 800e068:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e06a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e06c:	64fb      	str	r3, [r7, #76]	@ 0x4c
          }
          nesting[depth++] = c;
 800e06e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e070:	1c5a      	adds	r2, r3, #1
 800e072:	65ba      	str	r2, [r7, #88]	@ 0x58
 800e074:	3368      	adds	r3, #104	@ 0x68
 800e076:	443b      	add	r3, r7
 800e078:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800e07c:	f803 2c54 	strb.w	r2, [r3, #-84]
          expecting = S_KEY;
 800e080:	2301      	movs	r3, #1
 800e082:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
          break;
 800e086:	e29b      	b.n	800e5c0 <mg_json_get+0x658>
        } else if (c == '[') {
 800e088:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800e08c:	2b5b      	cmp	r3, #91	@ 0x5b
 800e08e:	d14e      	bne.n	800e12e <mg_json_get+0x1c6>
          if (depth >= (int) sizeof(nesting)) return MG_JSON_TOO_DEEP;
 800e090:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e092:	2b1d      	cmp	r3, #29
 800e094:	dd02      	ble.n	800e09c <mg_json_get+0x134>
 800e096:	f04f 33ff 	mov.w	r3, #4294967295
 800e09a:	e29b      	b.n	800e5d4 <mg_json_get+0x66c>
          if (depth == ed && path[pos] == '[' && ei == ci) {
 800e09c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e09e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e0a0:	429a      	cmp	r2, r3
 800e0a2:	d13a      	bne.n	800e11a <mg_json_get+0x1b2>
 800e0a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e0a6:	687a      	ldr	r2, [r7, #4]
 800e0a8:	4413      	add	r3, r2
 800e0aa:	781b      	ldrb	r3, [r3, #0]
 800e0ac:	2b5b      	cmp	r3, #91	@ 0x5b
 800e0ae:	d134      	bne.n	800e11a <mg_json_get+0x1b2>
 800e0b0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e0b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e0b4:	429a      	cmp	r2, r3
 800e0b6:	d130      	bne.n	800e11a <mg_json_get+0x1b2>
            ed++, pos++, ci = 0;
 800e0b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e0ba:	3301      	adds	r3, #1
 800e0bc:	657b      	str	r3, [r7, #84]	@ 0x54
 800e0be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e0c0:	3301      	adds	r3, #1
 800e0c2:	653b      	str	r3, [r7, #80]	@ 0x50
 800e0c4:	2300      	movs	r3, #0
 800e0c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
            for (ei = 0; path[pos] != ']' && path[pos] != '\0'; pos++) {
 800e0c8:	2300      	movs	r3, #0
 800e0ca:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e0cc:	e010      	b.n	800e0f0 <mg_json_get+0x188>
              ei *= 10;
 800e0ce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e0d0:	4613      	mov	r3, r2
 800e0d2:	009b      	lsls	r3, r3, #2
 800e0d4:	4413      	add	r3, r2
 800e0d6:	005b      	lsls	r3, r3, #1
 800e0d8:	64bb      	str	r3, [r7, #72]	@ 0x48
              ei += path[pos] - '0';
 800e0da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e0dc:	687a      	ldr	r2, [r7, #4]
 800e0de:	4413      	add	r3, r2
 800e0e0:	781b      	ldrb	r3, [r3, #0]
 800e0e2:	3b30      	subs	r3, #48	@ 0x30
 800e0e4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e0e6:	4413      	add	r3, r2
 800e0e8:	64bb      	str	r3, [r7, #72]	@ 0x48
            for (ei = 0; path[pos] != ']' && path[pos] != '\0'; pos++) {
 800e0ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e0ec:	3301      	adds	r3, #1
 800e0ee:	653b      	str	r3, [r7, #80]	@ 0x50
 800e0f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e0f2:	687a      	ldr	r2, [r7, #4]
 800e0f4:	4413      	add	r3, r2
 800e0f6:	781b      	ldrb	r3, [r3, #0]
 800e0f8:	2b5d      	cmp	r3, #93	@ 0x5d
 800e0fa:	d005      	beq.n	800e108 <mg_json_get+0x1a0>
 800e0fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e0fe:	687a      	ldr	r2, [r7, #4]
 800e100:	4413      	add	r3, r2
 800e102:	781b      	ldrb	r3, [r3, #0]
 800e104:	2b00      	cmp	r3, #0
 800e106:	d1e2      	bne.n	800e0ce <mg_json_get+0x166>
            }
            if (path[pos] != 0) pos++;
 800e108:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e10a:	687a      	ldr	r2, [r7, #4]
 800e10c:	4413      	add	r3, r2
 800e10e:	781b      	ldrb	r3, [r3, #0]
 800e110:	2b00      	cmp	r3, #0
 800e112:	d002      	beq.n	800e11a <mg_json_get+0x1b2>
 800e114:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e116:	3301      	adds	r3, #1
 800e118:	653b      	str	r3, [r7, #80]	@ 0x50
          }
          nesting[depth++] = c;
 800e11a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e11c:	1c5a      	adds	r2, r3, #1
 800e11e:	65ba      	str	r2, [r7, #88]	@ 0x58
 800e120:	3368      	adds	r3, #104	@ 0x68
 800e122:	443b      	add	r3, r7
 800e124:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800e128:	f803 2c54 	strb.w	r2, [r3, #-84]
          break;
 800e12c:	e248      	b.n	800e5c0 <mg_json_get+0x658>
        } else if (c == ']' && depth > 0) {  // Empty array
 800e12e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800e132:	2b5d      	cmp	r3, #93	@ 0x5d
 800e134:	d13a      	bne.n	800e1ac <mg_json_get+0x244>
 800e136:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e138:	2b00      	cmp	r3, #0
 800e13a:	dd37      	ble.n	800e1ac <mg_json_get+0x244>
          MG_EOO(']');
 800e13c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e13e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e140:	429a      	cmp	r2, r3
 800e142:	d106      	bne.n	800e152 <mg_json_get+0x1ea>
 800e144:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e146:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e148:	429a      	cmp	r2, r3
 800e14a:	d002      	beq.n	800e152 <mg_json_get+0x1ea>
 800e14c:	f06f 0302 	mvn.w	r3, #2
 800e150:	e240      	b.n	800e5d4 <mg_json_get+0x66c>
 800e152:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800e156:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e158:	3b01      	subs	r3, #1
 800e15a:	3368      	adds	r3, #104	@ 0x68
 800e15c:	443b      	add	r3, r7
 800e15e:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 800e162:	3302      	adds	r3, #2
 800e164:	429a      	cmp	r2, r3
 800e166:	d002      	beq.n	800e16e <mg_json_get+0x206>
 800e168:	f06f 0301 	mvn.w	r3, #1
 800e16c:	e232      	b.n	800e5d4 <mg_json_get+0x66c>
 800e16e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e170:	3b01      	subs	r3, #1
 800e172:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e174:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e176:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e178:	429a      	cmp	r2, r3
 800e17a:	f040 809c 	bne.w	800e2b6 <mg_json_get+0x34e>
 800e17e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e180:	687a      	ldr	r2, [r7, #4]
 800e182:	4413      	add	r3, r2
 800e184:	781b      	ldrb	r3, [r3, #0]
 800e186:	2b00      	cmp	r3, #0
 800e188:	f040 8095 	bne.w	800e2b6 <mg_json_get+0x34e>
 800e18c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e18e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e190:	429a      	cmp	r2, r3
 800e192:	f040 8090 	bne.w	800e2b6 <mg_json_get+0x34e>
 800e196:	683b      	ldr	r3, [r7, #0]
 800e198:	2b00      	cmp	r3, #0
 800e19a:	d005      	beq.n	800e1a8 <mg_json_get+0x240>
 800e19c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800e19e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e1a0:	1ad3      	subs	r3, r2, r3
 800e1a2:	1c5a      	adds	r2, r3, #1
 800e1a4:	683b      	ldr	r3, [r7, #0]
 800e1a6:	601a      	str	r2, [r3, #0]
 800e1a8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e1aa:	e213      	b.n	800e5d4 <mg_json_get+0x66c>
        } else if (c == 't' && i + 3 < len && memcmp(&s[i], "true", 4) == 0) {
 800e1ac:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800e1b0:	2b74      	cmp	r3, #116	@ 0x74
 800e1b2:	d113      	bne.n	800e1dc <mg_json_get+0x274>
 800e1b4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e1b6:	3303      	adds	r3, #3
 800e1b8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e1ba:	429a      	cmp	r2, r3
 800e1bc:	dd0e      	ble.n	800e1dc <mg_json_get+0x274>
 800e1be:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e1c0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e1c2:	4413      	add	r3, r2
 800e1c4:	2204      	movs	r2, #4
 800e1c6:	4998      	ldr	r1, [pc, #608]	@ (800e428 <mg_json_get+0x4c0>)
 800e1c8:	4618      	mov	r0, r3
 800e1ca:	f019 fa53 	bl	8027674 <memcmp>
 800e1ce:	4603      	mov	r3, r0
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d103      	bne.n	800e1dc <mg_json_get+0x274>
          i += 3;
 800e1d4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e1d6:	3303      	adds	r3, #3
 800e1d8:	663b      	str	r3, [r7, #96]	@ 0x60
 800e1da:	e06c      	b.n	800e2b6 <mg_json_get+0x34e>
        } else if (c == 'n' && i + 3 < len && memcmp(&s[i], "null", 4) == 0) {
 800e1dc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800e1e0:	2b6e      	cmp	r3, #110	@ 0x6e
 800e1e2:	d113      	bne.n	800e20c <mg_json_get+0x2a4>
 800e1e4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e1e6:	3303      	adds	r3, #3
 800e1e8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e1ea:	429a      	cmp	r2, r3
 800e1ec:	dd0e      	ble.n	800e20c <mg_json_get+0x2a4>
 800e1ee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e1f0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e1f2:	4413      	add	r3, r2
 800e1f4:	2204      	movs	r2, #4
 800e1f6:	498d      	ldr	r1, [pc, #564]	@ (800e42c <mg_json_get+0x4c4>)
 800e1f8:	4618      	mov	r0, r3
 800e1fa:	f019 fa3b 	bl	8027674 <memcmp>
 800e1fe:	4603      	mov	r3, r0
 800e200:	2b00      	cmp	r3, #0
 800e202:	d103      	bne.n	800e20c <mg_json_get+0x2a4>
          i += 3;
 800e204:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e206:	3303      	adds	r3, #3
 800e208:	663b      	str	r3, [r7, #96]	@ 0x60
 800e20a:	e054      	b.n	800e2b6 <mg_json_get+0x34e>
        } else if (c == 'f' && i + 4 < len && memcmp(&s[i], "false", 5) == 0) {
 800e20c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800e210:	2b66      	cmp	r3, #102	@ 0x66
 800e212:	d113      	bne.n	800e23c <mg_json_get+0x2d4>
 800e214:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e216:	3304      	adds	r3, #4
 800e218:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e21a:	429a      	cmp	r2, r3
 800e21c:	dd0e      	ble.n	800e23c <mg_json_get+0x2d4>
 800e21e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e220:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e222:	4413      	add	r3, r2
 800e224:	2205      	movs	r2, #5
 800e226:	4982      	ldr	r1, [pc, #520]	@ (800e430 <mg_json_get+0x4c8>)
 800e228:	4618      	mov	r0, r3
 800e22a:	f019 fa23 	bl	8027674 <memcmp>
 800e22e:	4603      	mov	r3, r0
 800e230:	2b00      	cmp	r3, #0
 800e232:	d103      	bne.n	800e23c <mg_json_get+0x2d4>
          i += 4;
 800e234:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e236:	3304      	adds	r3, #4
 800e238:	663b      	str	r3, [r7, #96]	@ 0x60
 800e23a:	e03c      	b.n	800e2b6 <mg_json_get+0x34e>
        } else if (c == '-' || ((c >= '0' && c <= '9'))) {
 800e23c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800e240:	2b2d      	cmp	r3, #45	@ 0x2d
 800e242:	d007      	beq.n	800e254 <mg_json_get+0x2ec>
 800e244:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800e248:	2b2f      	cmp	r3, #47	@ 0x2f
 800e24a:	d916      	bls.n	800e27a <mg_json_get+0x312>
 800e24c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800e250:	2b39      	cmp	r3, #57	@ 0x39
 800e252:	d812      	bhi.n	800e27a <mg_json_get+0x312>
          int numlen = 0;
 800e254:	2300      	movs	r3, #0
 800e256:	613b      	str	r3, [r7, #16]
          mg_atod(&s[i], len - i, &numlen);
 800e258:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e25a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e25c:	18d0      	adds	r0, r2, r3
 800e25e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e260:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e262:	1ad3      	subs	r3, r2, r3
 800e264:	f107 0210 	add.w	r2, r7, #16
 800e268:	4619      	mov	r1, r3
 800e26a:	f7ff fbe1 	bl	800da30 <mg_atod>
          i += numlen - 1;
 800e26e:	693b      	ldr	r3, [r7, #16]
 800e270:	3b01      	subs	r3, #1
 800e272:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800e274:	4413      	add	r3, r2
 800e276:	663b      	str	r3, [r7, #96]	@ 0x60
        } else if (c == '-' || ((c >= '0' && c <= '9'))) {
 800e278:	e01d      	b.n	800e2b6 <mg_json_get+0x34e>
        } else if (c == '"') {
 800e27a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800e27e:	2b22      	cmp	r3, #34	@ 0x22
 800e280:	d116      	bne.n	800e2b0 <mg_json_get+0x348>
          int n = mg_pass_string(&s[i + 1], len - i - 1);
 800e282:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e284:	3301      	adds	r3, #1
 800e286:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e288:	18d0      	adds	r0, r2, r3
 800e28a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e28c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e28e:	1ad3      	subs	r3, r2, r3
 800e290:	3b01      	subs	r3, #1
 800e292:	4619      	mov	r1, r3
 800e294:	f7ff fb8a 	bl	800d9ac <mg_pass_string>
 800e298:	6378      	str	r0, [r7, #52]	@ 0x34
          if (n < 0) return n;
 800e29a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	da01      	bge.n	800e2a4 <mg_json_get+0x33c>
 800e2a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e2a2:	e197      	b.n	800e5d4 <mg_json_get+0x66c>
          i += n + 1;
 800e2a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e2a6:	3301      	adds	r3, #1
 800e2a8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800e2aa:	4413      	add	r3, r2
 800e2ac:	663b      	str	r3, [r7, #96]	@ 0x60
 800e2ae:	e002      	b.n	800e2b6 <mg_json_get+0x34e>
        } else {
          return MG_JSON_INVALID;
 800e2b0:	f06f 0301 	mvn.w	r3, #1
 800e2b4:	e18e      	b.n	800e5d4 <mg_json_get+0x66c>
        }
        MG_CHECKRET('V');
 800e2b6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e2b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e2ba:	429a      	cmp	r2, r3
 800e2bc:	d114      	bne.n	800e2e8 <mg_json_get+0x380>
 800e2be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e2c0:	687a      	ldr	r2, [r7, #4]
 800e2c2:	4413      	add	r3, r2
 800e2c4:	781b      	ldrb	r3, [r3, #0]
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d10e      	bne.n	800e2e8 <mg_json_get+0x380>
 800e2ca:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e2cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e2ce:	429a      	cmp	r2, r3
 800e2d0:	d10a      	bne.n	800e2e8 <mg_json_get+0x380>
 800e2d2:	683b      	ldr	r3, [r7, #0]
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d005      	beq.n	800e2e4 <mg_json_get+0x37c>
 800e2d8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800e2da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e2dc:	1ad3      	subs	r3, r2, r3
 800e2de:	1c5a      	adds	r2, r3, #1
 800e2e0:	683b      	ldr	r3, [r7, #0]
 800e2e2:	601a      	str	r2, [r3, #0]
 800e2e4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e2e6:	e175      	b.n	800e5d4 <mg_json_get+0x66c>
        if (depth == ed && ei >= 0) ci++;
 800e2e8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e2ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e2ec:	429a      	cmp	r2, r3
 800e2ee:	d105      	bne.n	800e2fc <mg_json_get+0x394>
 800e2f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	db02      	blt.n	800e2fc <mg_json_get+0x394>
 800e2f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e2f8:	3301      	adds	r3, #1
 800e2fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
        expecting = S_COMMA_OR_EOO;
 800e2fc:	2303      	movs	r3, #3
 800e2fe:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        break;
 800e302:	e15d      	b.n	800e5c0 <mg_json_get+0x658>

      case S_KEY:
        if (c == '"') {
 800e304:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800e308:	2b22      	cmp	r3, #34	@ 0x22
 800e30a:	d170      	bne.n	800e3ee <mg_json_get+0x486>
          int n = mg_pass_string(&s[i + 1], len - i - 1);
 800e30c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e30e:	3301      	adds	r3, #1
 800e310:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e312:	18d0      	adds	r0, r2, r3
 800e314:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e316:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e318:	1ad3      	subs	r3, r2, r3
 800e31a:	3b01      	subs	r3, #1
 800e31c:	4619      	mov	r1, r3
 800e31e:	f7ff fb45 	bl	800d9ac <mg_pass_string>
 800e322:	63b8      	str	r0, [r7, #56]	@ 0x38
          if (n < 0) return n;
 800e324:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e326:	2b00      	cmp	r3, #0
 800e328:	da01      	bge.n	800e32e <mg_json_get+0x3c6>
 800e32a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e32c:	e152      	b.n	800e5d4 <mg_json_get+0x66c>
          if (i + 1 + n >= len) return MG_JSON_NOT_FOUND;
 800e32e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e330:	1c5a      	adds	r2, r3, #1
 800e332:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e334:	4413      	add	r3, r2
 800e336:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e338:	429a      	cmp	r2, r3
 800e33a:	dc02      	bgt.n	800e342 <mg_json_get+0x3da>
 800e33c:	f06f 0302 	mvn.w	r3, #2
 800e340:	e148      	b.n	800e5d4 <mg_json_get+0x66c>
          if (depth < ed) return MG_JSON_NOT_FOUND;
 800e342:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e344:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e346:	429a      	cmp	r2, r3
 800e348:	da02      	bge.n	800e350 <mg_json_get+0x3e8>
 800e34a:	f06f 0302 	mvn.w	r3, #2
 800e34e:	e141      	b.n	800e5d4 <mg_json_get+0x66c>
          if (depth == ed && path[pos - 1] != '.') return MG_JSON_NOT_FOUND;
 800e350:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e352:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e354:	429a      	cmp	r2, r3
 800e356:	d109      	bne.n	800e36c <mg_json_get+0x404>
 800e358:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e35a:	3b01      	subs	r3, #1
 800e35c:	687a      	ldr	r2, [r7, #4]
 800e35e:	4413      	add	r3, r2
 800e360:	781b      	ldrb	r3, [r3, #0]
 800e362:	2b2e      	cmp	r3, #46	@ 0x2e
 800e364:	d002      	beq.n	800e36c <mg_json_get+0x404>
 800e366:	f06f 0302 	mvn.w	r3, #2
 800e36a:	e133      	b.n	800e5d4 <mg_json_get+0x66c>
          // printf("K %s [%.*s] [%.*s] %d %d %d %d %d\n", path, pos, path, n,
          //        &s[i + 1], n, depth, ed, ci, ei);
          //  NOTE(cpq): in the check sequence below is important.
          //  strncmp() must go first: it fails fast if the remaining length
          //  of the path is smaller than `n`.
          if (depth == ed && path[pos - 1] == '.' &&
 800e36c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e36e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e370:	429a      	cmp	r2, r3
 800e372:	d133      	bne.n	800e3dc <mg_json_get+0x474>
 800e374:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e376:	3b01      	subs	r3, #1
 800e378:	687a      	ldr	r2, [r7, #4]
 800e37a:	4413      	add	r3, r2
 800e37c:	781b      	ldrb	r3, [r3, #0]
 800e37e:	2b2e      	cmp	r3, #46	@ 0x2e
 800e380:	d12c      	bne.n	800e3dc <mg_json_get+0x474>
              strncmp(&s[i + 1], &path[pos], (size_t) n) == 0 &&
 800e382:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e384:	3301      	adds	r3, #1
 800e386:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e388:	18d0      	adds	r0, r2, r3
 800e38a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e38c:	687a      	ldr	r2, [r7, #4]
 800e38e:	4413      	add	r3, r2
 800e390:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e392:	4619      	mov	r1, r3
 800e394:	f019 f9ad 	bl	80276f2 <strncmp>
 800e398:	4603      	mov	r3, r0
          if (depth == ed && path[pos - 1] == '.' &&
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d11e      	bne.n	800e3dc <mg_json_get+0x474>
              (path[pos + n] == '\0' || path[pos + n] == '.' ||
 800e39e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e3a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3a2:	4413      	add	r3, r2
 800e3a4:	461a      	mov	r2, r3
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	4413      	add	r3, r2
 800e3aa:	781b      	ldrb	r3, [r3, #0]
              strncmp(&s[i + 1], &path[pos], (size_t) n) == 0 &&
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d011      	beq.n	800e3d4 <mg_json_get+0x46c>
              (path[pos + n] == '\0' || path[pos + n] == '.' ||
 800e3b0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e3b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3b4:	4413      	add	r3, r2
 800e3b6:	461a      	mov	r2, r3
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	4413      	add	r3, r2
 800e3bc:	781b      	ldrb	r3, [r3, #0]
 800e3be:	2b2e      	cmp	r3, #46	@ 0x2e
 800e3c0:	d008      	beq.n	800e3d4 <mg_json_get+0x46c>
               path[pos + n] == '[')) {
 800e3c2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e3c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3c6:	4413      	add	r3, r2
 800e3c8:	461a      	mov	r2, r3
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	4413      	add	r3, r2
 800e3ce:	781b      	ldrb	r3, [r3, #0]
              (path[pos + n] == '\0' || path[pos + n] == '.' ||
 800e3d0:	2b5b      	cmp	r3, #91	@ 0x5b
 800e3d2:	d103      	bne.n	800e3dc <mg_json_get+0x474>
            pos += n;
 800e3d4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e3d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3d8:	4413      	add	r3, r2
 800e3da:	653b      	str	r3, [r7, #80]	@ 0x50
          }
          i += n + 1;
 800e3dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3de:	3301      	adds	r3, #1
 800e3e0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800e3e2:	4413      	add	r3, r2
 800e3e4:	663b      	str	r3, [r7, #96]	@ 0x60
          expecting = S_COLON;
 800e3e6:	2302      	movs	r3, #2
 800e3e8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
          expecting = S_COMMA_OR_EOO;
          if (depth == ed && ei >= 0) ci++;
        } else {
          return MG_JSON_INVALID;
        }
        break;
 800e3ec:	e0e7      	b.n	800e5be <mg_json_get+0x656>
        } else if (c == '}') {  // Empty object
 800e3ee:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800e3f2:	2b7d      	cmp	r3, #125	@ 0x7d
 800e3f4:	d14a      	bne.n	800e48c <mg_json_get+0x524>
          MG_EOO('}');
 800e3f6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e3f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e3fa:	429a      	cmp	r2, r3
 800e3fc:	d106      	bne.n	800e40c <mg_json_get+0x4a4>
 800e3fe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e400:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e402:	429a      	cmp	r2, r3
 800e404:	d002      	beq.n	800e40c <mg_json_get+0x4a4>
 800e406:	f06f 0302 	mvn.w	r3, #2
 800e40a:	e0e3      	b.n	800e5d4 <mg_json_get+0x66c>
 800e40c:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800e410:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e412:	3b01      	subs	r3, #1
 800e414:	3368      	adds	r3, #104	@ 0x68
 800e416:	443b      	add	r3, r7
 800e418:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 800e41c:	3302      	adds	r3, #2
 800e41e:	429a      	cmp	r2, r3
 800e420:	d008      	beq.n	800e434 <mg_json_get+0x4cc>
 800e422:	f06f 0301 	mvn.w	r3, #1
 800e426:	e0d5      	b.n	800e5d4 <mg_json_get+0x66c>
 800e428:	0802aafc 	.word	0x0802aafc
 800e42c:	0802ab04 	.word	0x0802ab04
 800e430:	0802ab0c 	.word	0x0802ab0c
 800e434:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e436:	3b01      	subs	r3, #1
 800e438:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e43a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e43c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e43e:	429a      	cmp	r2, r3
 800e440:	d114      	bne.n	800e46c <mg_json_get+0x504>
 800e442:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e444:	687a      	ldr	r2, [r7, #4]
 800e446:	4413      	add	r3, r2
 800e448:	781b      	ldrb	r3, [r3, #0]
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d10e      	bne.n	800e46c <mg_json_get+0x504>
 800e44e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e450:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e452:	429a      	cmp	r2, r3
 800e454:	d10a      	bne.n	800e46c <mg_json_get+0x504>
 800e456:	683b      	ldr	r3, [r7, #0]
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d005      	beq.n	800e468 <mg_json_get+0x500>
 800e45c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800e45e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e460:	1ad3      	subs	r3, r2, r3
 800e462:	1c5a      	adds	r2, r3, #1
 800e464:	683b      	ldr	r3, [r7, #0]
 800e466:	601a      	str	r2, [r3, #0]
 800e468:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e46a:	e0b3      	b.n	800e5d4 <mg_json_get+0x66c>
          expecting = S_COMMA_OR_EOO;
 800e46c:	2303      	movs	r3, #3
 800e46e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
          if (depth == ed && ei >= 0) ci++;
 800e472:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e474:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e476:	429a      	cmp	r2, r3
 800e478:	f040 80a1 	bne.w	800e5be <mg_json_get+0x656>
 800e47c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e47e:	2b00      	cmp	r3, #0
 800e480:	f2c0 809d 	blt.w	800e5be <mg_json_get+0x656>
 800e484:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e486:	3301      	adds	r3, #1
 800e488:	64fb      	str	r3, [r7, #76]	@ 0x4c
        break;
 800e48a:	e098      	b.n	800e5be <mg_json_get+0x656>
          return MG_JSON_INVALID;
 800e48c:	f06f 0301 	mvn.w	r3, #1
 800e490:	e0a0      	b.n	800e5d4 <mg_json_get+0x66c>

      case S_COLON:
        if (c == ':') {
 800e492:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800e496:	2b3a      	cmp	r3, #58	@ 0x3a
 800e498:	d103      	bne.n	800e4a2 <mg_json_get+0x53a>
          expecting = S_VALUE;
 800e49a:	2300      	movs	r3, #0
 800e49c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        } else {
          return MG_JSON_INVALID;
        }
        break;
 800e4a0:	e08e      	b.n	800e5c0 <mg_json_get+0x658>
          return MG_JSON_INVALID;
 800e4a2:	f06f 0301 	mvn.w	r3, #1
 800e4a6:	e095      	b.n	800e5d4 <mg_json_get+0x66c>

      case S_COMMA_OR_EOO:
        if (depth <= 0) {
 800e4a8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	dc02      	bgt.n	800e4b4 <mg_json_get+0x54c>
          return MG_JSON_INVALID;
 800e4ae:	f06f 0301 	mvn.w	r3, #1
 800e4b2:	e08f      	b.n	800e5d4 <mg_json_get+0x66c>
        } else if (c == ',') {
 800e4b4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800e4b8:	2b2c      	cmp	r3, #44	@ 0x2c
 800e4ba:	d10d      	bne.n	800e4d8 <mg_json_get+0x570>
          expecting = (nesting[depth - 1] == '{') ? S_KEY : S_VALUE;
 800e4bc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e4be:	3b01      	subs	r3, #1
 800e4c0:	3368      	adds	r3, #104	@ 0x68
 800e4c2:	443b      	add	r3, r7
 800e4c4:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 800e4c8:	2b7b      	cmp	r3, #123	@ 0x7b
 800e4ca:	bf0c      	ite	eq
 800e4cc:	2301      	moveq	r3, #1
 800e4ce:	2300      	movne	r3, #0
 800e4d0:	b2db      	uxtb	r3, r3
 800e4d2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
          MG_EOO('O');
          if (depth == ed && ei >= 0) ci++;
        } else {
          return MG_JSON_INVALID;
        }
        break;
 800e4d6:	e073      	b.n	800e5c0 <mg_json_get+0x658>
        } else if (c == ']' || c == '}') {
 800e4d8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800e4dc:	2b5d      	cmp	r3, #93	@ 0x5d
 800e4de:	d003      	beq.n	800e4e8 <mg_json_get+0x580>
 800e4e0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800e4e4:	2b7d      	cmp	r3, #125	@ 0x7d
 800e4e6:	d163      	bne.n	800e5b0 <mg_json_get+0x648>
          if (depth == ed && c == '}' && path[pos - 1] == '.')
 800e4e8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e4ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e4ec:	429a      	cmp	r2, r3
 800e4ee:	d10d      	bne.n	800e50c <mg_json_get+0x5a4>
 800e4f0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800e4f4:	2b7d      	cmp	r3, #125	@ 0x7d
 800e4f6:	d109      	bne.n	800e50c <mg_json_get+0x5a4>
 800e4f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e4fa:	3b01      	subs	r3, #1
 800e4fc:	687a      	ldr	r2, [r7, #4]
 800e4fe:	4413      	add	r3, r2
 800e500:	781b      	ldrb	r3, [r3, #0]
 800e502:	2b2e      	cmp	r3, #46	@ 0x2e
 800e504:	d102      	bne.n	800e50c <mg_json_get+0x5a4>
            return MG_JSON_NOT_FOUND;
 800e506:	f06f 0302 	mvn.w	r3, #2
 800e50a:	e063      	b.n	800e5d4 <mg_json_get+0x66c>
          if (depth == ed && c == ']' && path[pos - 1] == ',')
 800e50c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e50e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e510:	429a      	cmp	r2, r3
 800e512:	d10d      	bne.n	800e530 <mg_json_get+0x5c8>
 800e514:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800e518:	2b5d      	cmp	r3, #93	@ 0x5d
 800e51a:	d109      	bne.n	800e530 <mg_json_get+0x5c8>
 800e51c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e51e:	3b01      	subs	r3, #1
 800e520:	687a      	ldr	r2, [r7, #4]
 800e522:	4413      	add	r3, r2
 800e524:	781b      	ldrb	r3, [r3, #0]
 800e526:	2b2c      	cmp	r3, #44	@ 0x2c
 800e528:	d102      	bne.n	800e530 <mg_json_get+0x5c8>
            return MG_JSON_NOT_FOUND;
 800e52a:	f06f 0302 	mvn.w	r3, #2
 800e52e:	e051      	b.n	800e5d4 <mg_json_get+0x66c>
          MG_EOO('O');
 800e530:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e532:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e534:	429a      	cmp	r2, r3
 800e536:	d106      	bne.n	800e546 <mg_json_get+0x5de>
 800e538:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e53a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e53c:	429a      	cmp	r2, r3
 800e53e:	d002      	beq.n	800e546 <mg_json_get+0x5de>
 800e540:	f06f 0302 	mvn.w	r3, #2
 800e544:	e046      	b.n	800e5d4 <mg_json_get+0x66c>
 800e546:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800e54a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e54c:	3b01      	subs	r3, #1
 800e54e:	3368      	adds	r3, #104	@ 0x68
 800e550:	443b      	add	r3, r7
 800e552:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 800e556:	3302      	adds	r3, #2
 800e558:	429a      	cmp	r2, r3
 800e55a:	d002      	beq.n	800e562 <mg_json_get+0x5fa>
 800e55c:	f06f 0301 	mvn.w	r3, #1
 800e560:	e038      	b.n	800e5d4 <mg_json_get+0x66c>
 800e562:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e564:	3b01      	subs	r3, #1
 800e566:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e568:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e56a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e56c:	429a      	cmp	r2, r3
 800e56e:	d114      	bne.n	800e59a <mg_json_get+0x632>
 800e570:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e572:	687a      	ldr	r2, [r7, #4]
 800e574:	4413      	add	r3, r2
 800e576:	781b      	ldrb	r3, [r3, #0]
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d10e      	bne.n	800e59a <mg_json_get+0x632>
 800e57c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e57e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e580:	429a      	cmp	r2, r3
 800e582:	d10a      	bne.n	800e59a <mg_json_get+0x632>
 800e584:	683b      	ldr	r3, [r7, #0]
 800e586:	2b00      	cmp	r3, #0
 800e588:	d005      	beq.n	800e596 <mg_json_get+0x62e>
 800e58a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800e58c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e58e:	1ad3      	subs	r3, r2, r3
 800e590:	1c5a      	adds	r2, r3, #1
 800e592:	683b      	ldr	r3, [r7, #0]
 800e594:	601a      	str	r2, [r3, #0]
 800e596:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e598:	e01c      	b.n	800e5d4 <mg_json_get+0x66c>
          if (depth == ed && ei >= 0) ci++;
 800e59a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e59c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e59e:	429a      	cmp	r2, r3
 800e5a0:	d109      	bne.n	800e5b6 <mg_json_get+0x64e>
 800e5a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	db06      	blt.n	800e5b6 <mg_json_get+0x64e>
 800e5a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e5aa:	3301      	adds	r3, #1
 800e5ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e5ae:	e002      	b.n	800e5b6 <mg_json_get+0x64e>
          return MG_JSON_INVALID;
 800e5b0:	f06f 0301 	mvn.w	r3, #1
 800e5b4:	e00e      	b.n	800e5d4 <mg_json_get+0x66c>
          if (depth == ed && ei >= 0) ci++;
 800e5b6:	bf00      	nop
        break;
 800e5b8:	e002      	b.n	800e5c0 <mg_json_get+0x658>
    if (c == ' ' || c == '\t' || c == '\n' || c == '\r') continue;
 800e5ba:	bf00      	nop
 800e5bc:	e000      	b.n	800e5c0 <mg_json_get+0x658>
        break;
 800e5be:	bf00      	nop
  for (i = 0; i < len; i++) {
 800e5c0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e5c2:	3301      	adds	r3, #1
 800e5c4:	663b      	str	r3, [r7, #96]	@ 0x60
 800e5c6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800e5c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e5ca:	429a      	cmp	r2, r3
 800e5cc:	f6ff acfc 	blt.w	800dfc8 <mg_json_get+0x60>
    }
  }
  return MG_JSON_NOT_FOUND;
 800e5d0:	f06f 0302 	mvn.w	r3, #2
}
 800e5d4:	4618      	mov	r0, r3
 800e5d6:	376c      	adds	r7, #108	@ 0x6c
 800e5d8:	46bd      	mov	sp, r7
 800e5da:	bd90      	pop	{r4, r7, pc}

0800e5dc <mg_json_get_tok>:

struct mg_str mg_json_get_tok(struct mg_str json, const char *path) {
 800e5dc:	b580      	push	{r7, lr}
 800e5de:	b086      	sub	sp, #24
 800e5e0:	af00      	add	r7, sp, #0
 800e5e2:	60f8      	str	r0, [r7, #12]
 800e5e4:	1d38      	adds	r0, r7, #4
 800e5e6:	e880 0006 	stmia.w	r0, {r1, r2}
 800e5ea:	603b      	str	r3, [r7, #0]
  int len = 0, ofs = mg_json_get(json, path, &len);
 800e5ec:	2300      	movs	r3, #0
 800e5ee:	613b      	str	r3, [r7, #16]
 800e5f0:	f107 0310 	add.w	r3, r7, #16
 800e5f4:	683a      	ldr	r2, [r7, #0]
 800e5f6:	1d39      	adds	r1, r7, #4
 800e5f8:	c903      	ldmia	r1, {r0, r1}
 800e5fa:	f7ff fcb5 	bl	800df68 <mg_json_get>
 800e5fe:	6178      	str	r0, [r7, #20]
  return mg_str_n(ofs < 0 ? NULL : json.buf + ofs,
 800e600:	697b      	ldr	r3, [r7, #20]
 800e602:	2b00      	cmp	r3, #0
 800e604:	db03      	blt.n	800e60e <mg_json_get_tok+0x32>
 800e606:	687a      	ldr	r2, [r7, #4]
 800e608:	697b      	ldr	r3, [r7, #20]
 800e60a:	4413      	add	r3, r2
 800e60c:	e000      	b.n	800e610 <mg_json_get_tok+0x34>
 800e60e:	2300      	movs	r3, #0
                  (size_t) (len < 0 ? 0 : len));
 800e610:	693a      	ldr	r2, [r7, #16]
 800e612:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
  return mg_str_n(ofs < 0 ? NULL : json.buf + ofs,
 800e616:	68f8      	ldr	r0, [r7, #12]
 800e618:	4619      	mov	r1, r3
 800e61a:	f008 f960 	bl	80168de <mg_str_n>
}
 800e61e:	68f8      	ldr	r0, [r7, #12]
 800e620:	3718      	adds	r7, #24
 800e622:	46bd      	mov	sp, r7
 800e624:	bd80      	pop	{r7, pc}

0800e626 <mg_json_get_num>:

bool mg_json_get_num(struct mg_str json, const char *path, double *v) {
 800e626:	b590      	push	{r4, r7, lr}
 800e628:	b089      	sub	sp, #36	@ 0x24
 800e62a:	af00      	add	r7, sp, #0
 800e62c:	f107 0408 	add.w	r4, r7, #8
 800e630:	e884 0003 	stmia.w	r4, {r0, r1}
 800e634:	607a      	str	r2, [r7, #4]
 800e636:	603b      	str	r3, [r7, #0]
  int n, toklen, found = 0;
 800e638:	2300      	movs	r3, #0
 800e63a:	61fb      	str	r3, [r7, #28]
  if ((n = mg_json_get(json, path, &toklen)) >= 0 &&
 800e63c:	f107 0314 	add.w	r3, r7, #20
 800e640:	687a      	ldr	r2, [r7, #4]
 800e642:	f107 0108 	add.w	r1, r7, #8
 800e646:	c903      	ldmia	r1, {r0, r1}
 800e648:	f7ff fc8e 	bl	800df68 <mg_json_get>
 800e64c:	61b8      	str	r0, [r7, #24]
 800e64e:	69bb      	ldr	r3, [r7, #24]
 800e650:	2b00      	cmp	r3, #0
 800e652:	db23      	blt.n	800e69c <mg_json_get_num+0x76>
      (json.buf[n] == '-' || (json.buf[n] >= '0' && json.buf[n] <= '9'))) {
 800e654:	68ba      	ldr	r2, [r7, #8]
 800e656:	69bb      	ldr	r3, [r7, #24]
 800e658:	4413      	add	r3, r2
 800e65a:	781b      	ldrb	r3, [r3, #0]
  if ((n = mg_json_get(json, path, &toklen)) >= 0 &&
 800e65c:	2b2d      	cmp	r3, #45	@ 0x2d
 800e65e:	d00b      	beq.n	800e678 <mg_json_get_num+0x52>
      (json.buf[n] == '-' || (json.buf[n] >= '0' && json.buf[n] <= '9'))) {
 800e660:	68ba      	ldr	r2, [r7, #8]
 800e662:	69bb      	ldr	r3, [r7, #24]
 800e664:	4413      	add	r3, r2
 800e666:	781b      	ldrb	r3, [r3, #0]
 800e668:	2b2f      	cmp	r3, #47	@ 0x2f
 800e66a:	d917      	bls.n	800e69c <mg_json_get_num+0x76>
 800e66c:	68ba      	ldr	r2, [r7, #8]
 800e66e:	69bb      	ldr	r3, [r7, #24]
 800e670:	4413      	add	r3, r2
 800e672:	781b      	ldrb	r3, [r3, #0]
 800e674:	2b39      	cmp	r3, #57	@ 0x39
 800e676:	d811      	bhi.n	800e69c <mg_json_get_num+0x76>
    if (v != NULL) *v = mg_atod(json.buf + n, toklen, NULL);
 800e678:	683b      	ldr	r3, [r7, #0]
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d00c      	beq.n	800e698 <mg_json_get_num+0x72>
 800e67e:	68ba      	ldr	r2, [r7, #8]
 800e680:	69bb      	ldr	r3, [r7, #24]
 800e682:	4413      	add	r3, r2
 800e684:	6979      	ldr	r1, [r7, #20]
 800e686:	2200      	movs	r2, #0
 800e688:	4618      	mov	r0, r3
 800e68a:	f7ff f9d1 	bl	800da30 <mg_atod>
 800e68e:	eeb0 7b40 	vmov.f64	d7, d0
 800e692:	683b      	ldr	r3, [r7, #0]
 800e694:	ed83 7b00 	vstr	d7, [r3]
    found = 1;
 800e698:	2301      	movs	r3, #1
 800e69a:	61fb      	str	r3, [r7, #28]
  }
  return found;
 800e69c:	69fb      	ldr	r3, [r7, #28]
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	bf14      	ite	ne
 800e6a2:	2301      	movne	r3, #1
 800e6a4:	2300      	moveq	r3, #0
 800e6a6:	b2db      	uxtb	r3, r3
}
 800e6a8:	4618      	mov	r0, r3
 800e6aa:	3724      	adds	r7, #36	@ 0x24
 800e6ac:	46bd      	mov	sp, r7
 800e6ae:	bd90      	pop	{r4, r7, pc}

0800e6b0 <mg_json_get_bool>:

bool mg_json_get_bool(struct mg_str json, const char *path, bool *v) {
 800e6b0:	b590      	push	{r4, r7, lr}
 800e6b2:	b087      	sub	sp, #28
 800e6b4:	af00      	add	r7, sp, #0
 800e6b6:	f107 0408 	add.w	r4, r7, #8
 800e6ba:	e884 0003 	stmia.w	r4, {r0, r1}
 800e6be:	607a      	str	r2, [r7, #4]
 800e6c0:	603b      	str	r3, [r7, #0]
  int found = 0, off = mg_json_get(json, path, NULL);
 800e6c2:	2300      	movs	r3, #0
 800e6c4:	617b      	str	r3, [r7, #20]
 800e6c6:	2300      	movs	r3, #0
 800e6c8:	687a      	ldr	r2, [r7, #4]
 800e6ca:	f107 0108 	add.w	r1, r7, #8
 800e6ce:	c903      	ldmia	r1, {r0, r1}
 800e6d0:	f7ff fc4a 	bl	800df68 <mg_json_get>
 800e6d4:	6138      	str	r0, [r7, #16]
  if (off >= 0 && (json.buf[off] == 't' || json.buf[off] == 'f')) {
 800e6d6:	693b      	ldr	r3, [r7, #16]
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	db1b      	blt.n	800e714 <mg_json_get_bool+0x64>
 800e6dc:	68ba      	ldr	r2, [r7, #8]
 800e6de:	693b      	ldr	r3, [r7, #16]
 800e6e0:	4413      	add	r3, r2
 800e6e2:	781b      	ldrb	r3, [r3, #0]
 800e6e4:	2b74      	cmp	r3, #116	@ 0x74
 800e6e6:	d005      	beq.n	800e6f4 <mg_json_get_bool+0x44>
 800e6e8:	68ba      	ldr	r2, [r7, #8]
 800e6ea:	693b      	ldr	r3, [r7, #16]
 800e6ec:	4413      	add	r3, r2
 800e6ee:	781b      	ldrb	r3, [r3, #0]
 800e6f0:	2b66      	cmp	r3, #102	@ 0x66
 800e6f2:	d10f      	bne.n	800e714 <mg_json_get_bool+0x64>
    if (v != NULL) *v = json.buf[off] == 't';
 800e6f4:	683b      	ldr	r3, [r7, #0]
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d00a      	beq.n	800e710 <mg_json_get_bool+0x60>
 800e6fa:	68ba      	ldr	r2, [r7, #8]
 800e6fc:	693b      	ldr	r3, [r7, #16]
 800e6fe:	4413      	add	r3, r2
 800e700:	781b      	ldrb	r3, [r3, #0]
 800e702:	2b74      	cmp	r3, #116	@ 0x74
 800e704:	bf0c      	ite	eq
 800e706:	2301      	moveq	r3, #1
 800e708:	2300      	movne	r3, #0
 800e70a:	b2da      	uxtb	r2, r3
 800e70c:	683b      	ldr	r3, [r7, #0]
 800e70e:	701a      	strb	r2, [r3, #0]
    found = 1;
 800e710:	2301      	movs	r3, #1
 800e712:	617b      	str	r3, [r7, #20]
  }
  return found;
 800e714:	697b      	ldr	r3, [r7, #20]
 800e716:	2b00      	cmp	r3, #0
 800e718:	bf14      	ite	ne
 800e71a:	2301      	movne	r3, #1
 800e71c:	2300      	moveq	r3, #0
 800e71e:	b2db      	uxtb	r3, r3
}
 800e720:	4618      	mov	r0, r3
 800e722:	371c      	adds	r7, #28
 800e724:	46bd      	mov	sp, r7
 800e726:	bd90      	pop	{r4, r7, pc}

0800e728 <mg_json_unescape>:

bool mg_json_unescape(struct mg_str s, char *to, size_t n) {
 800e728:	b590      	push	{r4, r7, lr}
 800e72a:	b08d      	sub	sp, #52	@ 0x34
 800e72c:	af02      	add	r7, sp, #8
 800e72e:	f107 0408 	add.w	r4, r7, #8
 800e732:	e884 0003 	stmia.w	r4, {r0, r1}
 800e736:	607a      	str	r2, [r7, #4]
 800e738:	603b      	str	r3, [r7, #0]
  size_t i, j;
  for (i = 0, j = 0; i < s.len && j < n; i++, j++) {
 800e73a:	2300      	movs	r3, #0
 800e73c:	627b      	str	r3, [r7, #36]	@ 0x24
 800e73e:	2300      	movs	r3, #0
 800e740:	623b      	str	r3, [r7, #32]
 800e742:	e064      	b.n	800e80e <mg_json_unescape+0xe6>
    if (s.buf[i] == '\\' && i + 5 < s.len && s.buf[i + 1] == 'u') {
 800e744:	68ba      	ldr	r2, [r7, #8]
 800e746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e748:	4413      	add	r3, r2
 800e74a:	781b      	ldrb	r3, [r3, #0]
 800e74c:	2b5c      	cmp	r3, #92	@ 0x5c
 800e74e:	d12c      	bne.n	800e7aa <mg_json_unescape+0x82>
 800e750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e752:	1d5a      	adds	r2, r3, #5
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	429a      	cmp	r2, r3
 800e758:	d227      	bcs.n	800e7aa <mg_json_unescape+0x82>
 800e75a:	68ba      	ldr	r2, [r7, #8]
 800e75c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e75e:	3301      	adds	r3, #1
 800e760:	4413      	add	r3, r2
 800e762:	781b      	ldrb	r3, [r3, #0]
 800e764:	2b75      	cmp	r3, #117	@ 0x75
 800e766:	d120      	bne.n	800e7aa <mg_json_unescape+0x82>
      //  \uXXXX escape. We process simple one-byte chars \u00xx within ASCII
      //  range. More complex chars would require dragging in a UTF8 library,
      //  which is too much for us
      if (mg_str_to_num(mg_str_n(s.buf + i + 2, 4), 16, &to[j],
 800e768:	68ba      	ldr	r2, [r7, #8]
 800e76a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e76c:	3302      	adds	r3, #2
 800e76e:	18d1      	adds	r1, r2, r3
 800e770:	f107 0314 	add.w	r3, r7, #20
 800e774:	2204      	movs	r2, #4
 800e776:	4618      	mov	r0, r3
 800e778:	f008 f8b1 	bl	80168de <mg_str_n>
 800e77c:	687a      	ldr	r2, [r7, #4]
 800e77e:	6a3b      	ldr	r3, [r7, #32]
 800e780:	4413      	add	r3, r2
 800e782:	2201      	movs	r2, #1
 800e784:	9200      	str	r2, [sp, #0]
 800e786:	2210      	movs	r2, #16
 800e788:	f107 0114 	add.w	r1, r7, #20
 800e78c:	c903      	ldmia	r1, {r0, r1}
 800e78e:	f008 fae4 	bl	8016d5a <mg_str_to_num>
 800e792:	4603      	mov	r3, r0
                        sizeof(uint8_t)) == false)
 800e794:	f083 0301 	eor.w	r3, r3, #1
 800e798:	b2db      	uxtb	r3, r3
      if (mg_str_to_num(mg_str_n(s.buf + i + 2, 4), 16, &to[j],
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d001      	beq.n	800e7a2 <mg_json_unescape+0x7a>
        return false;
 800e79e:	2300      	movs	r3, #0
 800e7a0:	e04c      	b.n	800e83c <mg_json_unescape+0x114>
      i += 5;
 800e7a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7a4:	3305      	adds	r3, #5
 800e7a6:	627b      	str	r3, [r7, #36]	@ 0x24
 800e7a8:	e02b      	b.n	800e802 <mg_json_unescape+0xda>
    } else if (s.buf[i] == '\\' && i + 1 < s.len) {
 800e7aa:	68ba      	ldr	r2, [r7, #8]
 800e7ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7ae:	4413      	add	r3, r2
 800e7b0:	781b      	ldrb	r3, [r3, #0]
 800e7b2:	2b5c      	cmp	r3, #92	@ 0x5c
 800e7b4:	d11d      	bne.n	800e7f2 <mg_json_unescape+0xca>
 800e7b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7b8:	1c5a      	adds	r2, r3, #1
 800e7ba:	68fb      	ldr	r3, [r7, #12]
 800e7bc:	429a      	cmp	r2, r3
 800e7be:	d218      	bcs.n	800e7f2 <mg_json_unescape+0xca>
      char c = json_esc(s.buf[i + 1], 0);
 800e7c0:	68ba      	ldr	r2, [r7, #8]
 800e7c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7c4:	3301      	adds	r3, #1
 800e7c6:	4413      	add	r3, r2
 800e7c8:	781b      	ldrb	r3, [r3, #0]
 800e7ca:	2100      	movs	r1, #0
 800e7cc:	4618      	mov	r0, r3
 800e7ce:	f7ff f8bd 	bl	800d94c <json_esc>
 800e7d2:	4603      	mov	r3, r0
 800e7d4:	77fb      	strb	r3, [r7, #31]
      if (c == 0) return false;
 800e7d6:	7ffb      	ldrb	r3, [r7, #31]
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d101      	bne.n	800e7e0 <mg_json_unescape+0xb8>
 800e7dc:	2300      	movs	r3, #0
 800e7de:	e02d      	b.n	800e83c <mg_json_unescape+0x114>
      to[j] = c;
 800e7e0:	687a      	ldr	r2, [r7, #4]
 800e7e2:	6a3b      	ldr	r3, [r7, #32]
 800e7e4:	4413      	add	r3, r2
 800e7e6:	7ffa      	ldrb	r2, [r7, #31]
 800e7e8:	701a      	strb	r2, [r3, #0]
      i++;
 800e7ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7ec:	3301      	adds	r3, #1
 800e7ee:	627b      	str	r3, [r7, #36]	@ 0x24
    } else if (s.buf[i] == '\\' && i + 1 < s.len) {
 800e7f0:	e007      	b.n	800e802 <mg_json_unescape+0xda>
    } else {
      to[j] = s.buf[i];
 800e7f2:	68ba      	ldr	r2, [r7, #8]
 800e7f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7f6:	441a      	add	r2, r3
 800e7f8:	6879      	ldr	r1, [r7, #4]
 800e7fa:	6a3b      	ldr	r3, [r7, #32]
 800e7fc:	440b      	add	r3, r1
 800e7fe:	7812      	ldrb	r2, [r2, #0]
 800e800:	701a      	strb	r2, [r3, #0]
  for (i = 0, j = 0; i < s.len && j < n; i++, j++) {
 800e802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e804:	3301      	adds	r3, #1
 800e806:	627b      	str	r3, [r7, #36]	@ 0x24
 800e808:	6a3b      	ldr	r3, [r7, #32]
 800e80a:	3301      	adds	r3, #1
 800e80c:	623b      	str	r3, [r7, #32]
 800e80e:	68fb      	ldr	r3, [r7, #12]
 800e810:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e812:	429a      	cmp	r2, r3
 800e814:	d203      	bcs.n	800e81e <mg_json_unescape+0xf6>
 800e816:	6a3a      	ldr	r2, [r7, #32]
 800e818:	683b      	ldr	r3, [r7, #0]
 800e81a:	429a      	cmp	r2, r3
 800e81c:	d392      	bcc.n	800e744 <mg_json_unescape+0x1c>
    }
  }
  if (j >= n) return false;
 800e81e:	6a3a      	ldr	r2, [r7, #32]
 800e820:	683b      	ldr	r3, [r7, #0]
 800e822:	429a      	cmp	r2, r3
 800e824:	d301      	bcc.n	800e82a <mg_json_unescape+0x102>
 800e826:	2300      	movs	r3, #0
 800e828:	e008      	b.n	800e83c <mg_json_unescape+0x114>
  if (n > 0) to[j] = '\0';
 800e82a:	683b      	ldr	r3, [r7, #0]
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	d004      	beq.n	800e83a <mg_json_unescape+0x112>
 800e830:	687a      	ldr	r2, [r7, #4]
 800e832:	6a3b      	ldr	r3, [r7, #32]
 800e834:	4413      	add	r3, r2
 800e836:	2200      	movs	r2, #0
 800e838:	701a      	strb	r2, [r3, #0]
  return true;
 800e83a:	2301      	movs	r3, #1
}
 800e83c:	4618      	mov	r0, r3
 800e83e:	372c      	adds	r7, #44	@ 0x2c
 800e840:	46bd      	mov	sp, r7
 800e842:	bd90      	pop	{r4, r7, pc}

0800e844 <logc>:
void mg_log_set_fn(mg_pfn_t fn, void *param) {
  s_log_func = fn;
  s_log_func_param = param;
}

static void logc(unsigned char c) {
 800e844:	b580      	push	{r7, lr}
 800e846:	b082      	sub	sp, #8
 800e848:	af00      	add	r7, sp, #0
 800e84a:	4603      	mov	r3, r0
 800e84c:	71fb      	strb	r3, [r7, #7]
  s_log_func((char) c, s_log_func_param);
 800e84e:	4b05      	ldr	r3, [pc, #20]	@ (800e864 <logc+0x20>)
 800e850:	681b      	ldr	r3, [r3, #0]
 800e852:	4a05      	ldr	r2, [pc, #20]	@ (800e868 <logc+0x24>)
 800e854:	6811      	ldr	r1, [r2, #0]
 800e856:	79fa      	ldrb	r2, [r7, #7]
 800e858:	4610      	mov	r0, r2
 800e85a:	4798      	blx	r3
}
 800e85c:	bf00      	nop
 800e85e:	3708      	adds	r7, #8
 800e860:	46bd      	mov	sp, r7
 800e862:	bd80      	pop	{r7, pc}
 800e864:	2400025c 	.word	0x2400025c
 800e868:	24002360 	.word	0x24002360

0800e86c <logs>:

static void logs(const char *buf, size_t len) {
 800e86c:	b580      	push	{r7, lr}
 800e86e:	b084      	sub	sp, #16
 800e870:	af00      	add	r7, sp, #0
 800e872:	6078      	str	r0, [r7, #4]
 800e874:	6039      	str	r1, [r7, #0]
  size_t i;
  for (i = 0; i < len; i++) logc(((unsigned char *) buf)[i]);
 800e876:	2300      	movs	r3, #0
 800e878:	60fb      	str	r3, [r7, #12]
 800e87a:	e009      	b.n	800e890 <logs+0x24>
 800e87c:	687a      	ldr	r2, [r7, #4]
 800e87e:	68fb      	ldr	r3, [r7, #12]
 800e880:	4413      	add	r3, r2
 800e882:	781b      	ldrb	r3, [r3, #0]
 800e884:	4618      	mov	r0, r3
 800e886:	f7ff ffdd 	bl	800e844 <logc>
 800e88a:	68fb      	ldr	r3, [r7, #12]
 800e88c:	3301      	adds	r3, #1
 800e88e:	60fb      	str	r3, [r7, #12]
 800e890:	68fa      	ldr	r2, [r7, #12]
 800e892:	683b      	ldr	r3, [r7, #0]
 800e894:	429a      	cmp	r2, r3
 800e896:	d3f1      	bcc.n	800e87c <logs+0x10>
}
 800e898:	bf00      	nop
 800e89a:	bf00      	nop
 800e89c:	3710      	adds	r7, #16
 800e89e:	46bd      	mov	sp, r7
 800e8a0:	bd80      	pop	{r7, pc}
	...

0800e8a4 <mg_log_prefix>:

#if MG_ENABLE_CUSTOM_LOG
// Let user define their own mg_log_prefix() and mg_log()
#else
void mg_log_prefix(int level, const char *file, int line, const char *fname) {
 800e8a4:	b590      	push	{r4, r7, lr}
 800e8a6:	b099      	sub	sp, #100	@ 0x64
 800e8a8:	af06      	add	r7, sp, #24
 800e8aa:	60f8      	str	r0, [r7, #12]
 800e8ac:	60b9      	str	r1, [r7, #8]
 800e8ae:	607a      	str	r2, [r7, #4]
 800e8b0:	603b      	str	r3, [r7, #0]
  const char *p = strrchr(file, '/');
 800e8b2:	212f      	movs	r1, #47	@ 0x2f
 800e8b4:	68b8      	ldr	r0, [r7, #8]
 800e8b6:	f018 ff41 	bl	802773c <strrchr>
 800e8ba:	6478      	str	r0, [r7, #68]	@ 0x44
  char buf[41];
  size_t n;
  if (p == NULL) p = strrchr(file, '\\');
 800e8bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	d104      	bne.n	800e8cc <mg_log_prefix+0x28>
 800e8c2:	215c      	movs	r1, #92	@ 0x5c
 800e8c4:	68b8      	ldr	r0, [r7, #8]
 800e8c6:	f018 ff39 	bl	802773c <strrchr>
 800e8ca:	6478      	str	r0, [r7, #68]	@ 0x44
  n = mg_snprintf(buf, sizeof(buf), "%-6llx %d %s:%d:%s", mg_millis(), level,
 800e8cc:	f7f2 f940 	bl	8000b50 <mg_millis>
 800e8d0:	4602      	mov	r2, r0
 800e8d2:	460b      	mov	r3, r1
 800e8d4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800e8d6:	2900      	cmp	r1, #0
 800e8d8:	d002      	beq.n	800e8e0 <mg_log_prefix+0x3c>
 800e8da:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800e8dc:	3101      	adds	r1, #1
 800e8de:	e000      	b.n	800e8e2 <mg_log_prefix+0x3e>
 800e8e0:	68b9      	ldr	r1, [r7, #8]
 800e8e2:	f107 0414 	add.w	r4, r7, #20
 800e8e6:	6838      	ldr	r0, [r7, #0]
 800e8e8:	9005      	str	r0, [sp, #20]
 800e8ea:	6878      	ldr	r0, [r7, #4]
 800e8ec:	9004      	str	r0, [sp, #16]
 800e8ee:	9103      	str	r1, [sp, #12]
 800e8f0:	68f9      	ldr	r1, [r7, #12]
 800e8f2:	9102      	str	r1, [sp, #8]
 800e8f4:	e9cd 2300 	strd	r2, r3, [sp]
 800e8f8:	4a11      	ldr	r2, [pc, #68]	@ (800e940 <mg_log_prefix+0x9c>)
 800e8fa:	2129      	movs	r1, #41	@ 0x29
 800e8fc:	4620      	mov	r0, r4
 800e8fe:	f004 fc0d 	bl	801311c <mg_snprintf>
 800e902:	6438      	str	r0, [r7, #64]	@ 0x40
                  p == NULL ? file : p + 1, line, fname);
  if (n > sizeof(buf) - 2) n = sizeof(buf) - 2;
 800e904:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e906:	2b27      	cmp	r3, #39	@ 0x27
 800e908:	d90a      	bls.n	800e920 <mg_log_prefix+0x7c>
 800e90a:	2327      	movs	r3, #39	@ 0x27
 800e90c:	643b      	str	r3, [r7, #64]	@ 0x40
  while (n < sizeof(buf)) buf[n++] = ' ';
 800e90e:	e007      	b.n	800e920 <mg_log_prefix+0x7c>
 800e910:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e912:	1c5a      	adds	r2, r3, #1
 800e914:	643a      	str	r2, [r7, #64]	@ 0x40
 800e916:	3348      	adds	r3, #72	@ 0x48
 800e918:	443b      	add	r3, r7
 800e91a:	2220      	movs	r2, #32
 800e91c:	f803 2c34 	strb.w	r2, [r3, #-52]
 800e920:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e922:	2b28      	cmp	r3, #40	@ 0x28
 800e924:	d9f4      	bls.n	800e910 <mg_log_prefix+0x6c>
  logs(buf, n - 1);
 800e926:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e928:	1e5a      	subs	r2, r3, #1
 800e92a:	f107 0314 	add.w	r3, r7, #20
 800e92e:	4611      	mov	r1, r2
 800e930:	4618      	mov	r0, r3
 800e932:	f7ff ff9b 	bl	800e86c <logs>
}
 800e936:	bf00      	nop
 800e938:	374c      	adds	r7, #76	@ 0x4c
 800e93a:	46bd      	mov	sp, r7
 800e93c:	bd90      	pop	{r4, r7, pc}
 800e93e:	bf00      	nop
 800e940:	0802ab14 	.word	0x0802ab14

0800e944 <mg_log>:

void mg_log(const char *fmt, ...) {
 800e944:	b40f      	push	{r0, r1, r2, r3}
 800e946:	b580      	push	{r7, lr}
 800e948:	b082      	sub	sp, #8
 800e94a:	af00      	add	r7, sp, #0
  va_list ap;
  va_start(ap, fmt);
 800e94c:	f107 0314 	add.w	r3, r7, #20
 800e950:	607b      	str	r3, [r7, #4]
  mg_vxprintf(s_log_func, s_log_func_param, fmt, &ap);
 800e952:	4b09      	ldr	r3, [pc, #36]	@ (800e978 <mg_log+0x34>)
 800e954:	6818      	ldr	r0, [r3, #0]
 800e956:	4b09      	ldr	r3, [pc, #36]	@ (800e97c <mg_log+0x38>)
 800e958:	6819      	ldr	r1, [r3, #0]
 800e95a:	1d3b      	adds	r3, r7, #4
 800e95c:	693a      	ldr	r2, [r7, #16]
 800e95e:	f7fa ffbb 	bl	80098d8 <mg_vxprintf>
  va_end(ap);
  logs("\r\n", 2);
 800e962:	2102      	movs	r1, #2
 800e964:	4806      	ldr	r0, [pc, #24]	@ (800e980 <mg_log+0x3c>)
 800e966:	f7ff ff81 	bl	800e86c <logs>
}
 800e96a:	bf00      	nop
 800e96c:	3708      	adds	r7, #8
 800e96e:	46bd      	mov	sp, r7
 800e970:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e974:	b004      	add	sp, #16
 800e976:	4770      	bx	lr
 800e978:	2400025c 	.word	0x2400025c
 800e97c:	24002360 	.word	0x24002360
 800e980:	08029f84 	.word	0x08029f84

0800e984 <nibble>:
#endif

static unsigned char nibble(unsigned c) {
 800e984:	b480      	push	{r7}
 800e986:	b083      	sub	sp, #12
 800e988:	af00      	add	r7, sp, #0
 800e98a:	6078      	str	r0, [r7, #4]
  return (unsigned char) (c < 10 ? c + '0' : c + 'W');
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	2b09      	cmp	r3, #9
 800e990:	d804      	bhi.n	800e99c <nibble+0x18>
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	b2db      	uxtb	r3, r3
 800e996:	3330      	adds	r3, #48	@ 0x30
 800e998:	b2db      	uxtb	r3, r3
 800e99a:	e003      	b.n	800e9a4 <nibble+0x20>
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	b2db      	uxtb	r3, r3
 800e9a0:	3357      	adds	r3, #87	@ 0x57
 800e9a2:	b2db      	uxtb	r3, r3
}
 800e9a4:	4618      	mov	r0, r3
 800e9a6:	370c      	adds	r7, #12
 800e9a8:	46bd      	mov	sp, r7
 800e9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ae:	4770      	bx	lr

0800e9b0 <mg_hexdump>:

#define ISPRINT(x) ((x) >= ' ' && (x) <= '~')
void mg_hexdump(const void *buf, size_t len) {
 800e9b0:	b580      	push	{r7, lr}
 800e9b2:	b08a      	sub	sp, #40	@ 0x28
 800e9b4:	af00      	add	r7, sp, #0
 800e9b6:	6078      	str	r0, [r7, #4]
 800e9b8:	6039      	str	r1, [r7, #0]
  const unsigned char *p = (const unsigned char *) buf;
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	61fb      	str	r3, [r7, #28]
  unsigned char ascii[16], alen = 0;
 800e9be:	2300      	movs	r3, #0
 800e9c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  size_t i;
  for (i = 0; i < len; i++) {
 800e9c4:	2300      	movs	r3, #0
 800e9c6:	623b      	str	r3, [r7, #32]
 800e9c8:	e07b      	b.n	800eac2 <mg_hexdump+0x112>
    if ((i % 16) == 0) {
 800e9ca:	6a3b      	ldr	r3, [r7, #32]
 800e9cc:	f003 030f 	and.w	r3, r3, #15
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d13b      	bne.n	800ea4c <mg_hexdump+0x9c>
      // Print buffered ascii chars
      if (i > 0)
 800e9d4:	6a3b      	ldr	r3, [r7, #32]
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d010      	beq.n	800e9fc <mg_hexdump+0x4c>
        logs("  ", 2), logs((char *) ascii, 16), logs("\r\n", 2), alen = 0;
 800e9da:	2102      	movs	r1, #2
 800e9dc:	484e      	ldr	r0, [pc, #312]	@ (800eb18 <mg_hexdump+0x168>)
 800e9de:	f7ff ff45 	bl	800e86c <logs>
 800e9e2:	f107 030c 	add.w	r3, r7, #12
 800e9e6:	2110      	movs	r1, #16
 800e9e8:	4618      	mov	r0, r3
 800e9ea:	f7ff ff3f 	bl	800e86c <logs>
 800e9ee:	2102      	movs	r1, #2
 800e9f0:	484a      	ldr	r0, [pc, #296]	@ (800eb1c <mg_hexdump+0x16c>)
 800e9f2:	f7ff ff3b 	bl	800e86c <logs>
 800e9f6:	2300      	movs	r3, #0
 800e9f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      // Print hex address, then \t
      logc(nibble((i >> 12) & 15)), logc(nibble((i >> 8) & 15)),
 800e9fc:	6a3b      	ldr	r3, [r7, #32]
 800e9fe:	0b1b      	lsrs	r3, r3, #12
 800ea00:	f003 030f 	and.w	r3, r3, #15
 800ea04:	4618      	mov	r0, r3
 800ea06:	f7ff ffbd 	bl	800e984 <nibble>
 800ea0a:	4603      	mov	r3, r0
 800ea0c:	4618      	mov	r0, r3
 800ea0e:	f7ff ff19 	bl	800e844 <logc>
 800ea12:	6a3b      	ldr	r3, [r7, #32]
 800ea14:	0a1b      	lsrs	r3, r3, #8
 800ea16:	f003 030f 	and.w	r3, r3, #15
 800ea1a:	4618      	mov	r0, r3
 800ea1c:	f7ff ffb2 	bl	800e984 <nibble>
 800ea20:	4603      	mov	r3, r0
 800ea22:	4618      	mov	r0, r3
 800ea24:	f7ff ff0e 	bl	800e844 <logc>
          logc(nibble((i >> 4) & 15)), logc('0'), logs("   ", 3);
 800ea28:	6a3b      	ldr	r3, [r7, #32]
 800ea2a:	091b      	lsrs	r3, r3, #4
 800ea2c:	f003 030f 	and.w	r3, r3, #15
 800ea30:	4618      	mov	r0, r3
 800ea32:	f7ff ffa7 	bl	800e984 <nibble>
 800ea36:	4603      	mov	r3, r0
 800ea38:	4618      	mov	r0, r3
 800ea3a:	f7ff ff03 	bl	800e844 <logc>
 800ea3e:	2030      	movs	r0, #48	@ 0x30
 800ea40:	f7ff ff00 	bl	800e844 <logc>
 800ea44:	2103      	movs	r1, #3
 800ea46:	4836      	ldr	r0, [pc, #216]	@ (800eb20 <mg_hexdump+0x170>)
 800ea48:	f7ff ff10 	bl	800e86c <logs>
    }
    logc(nibble(p[i] >> 4)), logc(nibble(p[i] & 15));  // Two nibbles, e.g. c5
 800ea4c:	69fa      	ldr	r2, [r7, #28]
 800ea4e:	6a3b      	ldr	r3, [r7, #32]
 800ea50:	4413      	add	r3, r2
 800ea52:	781b      	ldrb	r3, [r3, #0]
 800ea54:	091b      	lsrs	r3, r3, #4
 800ea56:	b2db      	uxtb	r3, r3
 800ea58:	4618      	mov	r0, r3
 800ea5a:	f7ff ff93 	bl	800e984 <nibble>
 800ea5e:	4603      	mov	r3, r0
 800ea60:	4618      	mov	r0, r3
 800ea62:	f7ff feef 	bl	800e844 <logc>
 800ea66:	69fa      	ldr	r2, [r7, #28]
 800ea68:	6a3b      	ldr	r3, [r7, #32]
 800ea6a:	4413      	add	r3, r2
 800ea6c:	781b      	ldrb	r3, [r3, #0]
 800ea6e:	f003 030f 	and.w	r3, r3, #15
 800ea72:	4618      	mov	r0, r3
 800ea74:	f7ff ff86 	bl	800e984 <nibble>
 800ea78:	4603      	mov	r3, r0
 800ea7a:	4618      	mov	r0, r3
 800ea7c:	f7ff fee2 	bl	800e844 <logc>
    logc(' ');                                         // Space after hex number
 800ea80:	2020      	movs	r0, #32
 800ea82:	f7ff fedf 	bl	800e844 <logc>
    ascii[alen++] = ISPRINT(p[i]) ? p[i] : '.';        // Add to the ascii buf
 800ea86:	69fa      	ldr	r2, [r7, #28]
 800ea88:	6a3b      	ldr	r3, [r7, #32]
 800ea8a:	4413      	add	r3, r2
 800ea8c:	781b      	ldrb	r3, [r3, #0]
 800ea8e:	2b1f      	cmp	r3, #31
 800ea90:	d90a      	bls.n	800eaa8 <mg_hexdump+0xf8>
 800ea92:	69fa      	ldr	r2, [r7, #28]
 800ea94:	6a3b      	ldr	r3, [r7, #32]
 800ea96:	4413      	add	r3, r2
 800ea98:	781b      	ldrb	r3, [r3, #0]
 800ea9a:	2b7e      	cmp	r3, #126	@ 0x7e
 800ea9c:	d804      	bhi.n	800eaa8 <mg_hexdump+0xf8>
 800ea9e:	69fa      	ldr	r2, [r7, #28]
 800eaa0:	6a3b      	ldr	r3, [r7, #32]
 800eaa2:	4413      	add	r3, r2
 800eaa4:	781a      	ldrb	r2, [r3, #0]
 800eaa6:	e000      	b.n	800eaaa <mg_hexdump+0xfa>
 800eaa8:	222e      	movs	r2, #46	@ 0x2e
 800eaaa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800eaae:	1c59      	adds	r1, r3, #1
 800eab0:	f887 1027 	strb.w	r1, [r7, #39]	@ 0x27
 800eab4:	3328      	adds	r3, #40	@ 0x28
 800eab6:	443b      	add	r3, r7
 800eab8:	f803 2c1c 	strb.w	r2, [r3, #-28]
  for (i = 0; i < len; i++) {
 800eabc:	6a3b      	ldr	r3, [r7, #32]
 800eabe:	3301      	adds	r3, #1
 800eac0:	623b      	str	r3, [r7, #32]
 800eac2:	6a3a      	ldr	r2, [r7, #32]
 800eac4:	683b      	ldr	r3, [r7, #0]
 800eac6:	429a      	cmp	r2, r3
 800eac8:	f4ff af7f 	bcc.w	800e9ca <mg_hexdump+0x1a>
  }
  while (alen < 16) logs("   ", 3), ascii[alen++] = ' ';
 800eacc:	e00d      	b.n	800eaea <mg_hexdump+0x13a>
 800eace:	2103      	movs	r1, #3
 800ead0:	4813      	ldr	r0, [pc, #76]	@ (800eb20 <mg_hexdump+0x170>)
 800ead2:	f7ff fecb 	bl	800e86c <logs>
 800ead6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800eada:	1c5a      	adds	r2, r3, #1
 800eadc:	f887 2027 	strb.w	r2, [r7, #39]	@ 0x27
 800eae0:	3328      	adds	r3, #40	@ 0x28
 800eae2:	443b      	add	r3, r7
 800eae4:	2220      	movs	r2, #32
 800eae6:	f803 2c1c 	strb.w	r2, [r3, #-28]
 800eaea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800eaee:	2b0f      	cmp	r3, #15
 800eaf0:	d9ed      	bls.n	800eace <mg_hexdump+0x11e>
  logs("  ", 2), logs((char *) ascii, 16), logs("\r\n", 2);
 800eaf2:	2102      	movs	r1, #2
 800eaf4:	4808      	ldr	r0, [pc, #32]	@ (800eb18 <mg_hexdump+0x168>)
 800eaf6:	f7ff feb9 	bl	800e86c <logs>
 800eafa:	f107 030c 	add.w	r3, r7, #12
 800eafe:	2110      	movs	r1, #16
 800eb00:	4618      	mov	r0, r3
 800eb02:	f7ff feb3 	bl	800e86c <logs>
 800eb06:	2102      	movs	r1, #2
 800eb08:	4804      	ldr	r0, [pc, #16]	@ (800eb1c <mg_hexdump+0x16c>)
 800eb0a:	f7ff feaf 	bl	800e86c <logs>
}
 800eb0e:	bf00      	nop
 800eb10:	3728      	adds	r7, #40	@ 0x28
 800eb12:	46bd      	mov	sp, r7
 800eb14:	bd80      	pop	{r7, pc}
 800eb16:	bf00      	nop
 800eb18:	0802ab28 	.word	0x0802ab28
 800eb1c:	08029f84 	.word	0x08029f84
 800eb20:	0802ab2c 	.word	0x0802ab2c

0800eb24 <mg_vprintf>:





size_t mg_vprintf(struct mg_connection *c, const char *fmt, va_list *ap) {
 800eb24:	b580      	push	{r7, lr}
 800eb26:	b086      	sub	sp, #24
 800eb28:	af00      	add	r7, sp, #0
 800eb2a:	60f8      	str	r0, [r7, #12]
 800eb2c:	60b9      	str	r1, [r7, #8]
 800eb2e:	607a      	str	r2, [r7, #4]
  size_t old = c->send.len;
 800eb30:	68fb      	ldr	r3, [r7, #12]
 800eb32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800eb34:	617b      	str	r3, [r7, #20]
  mg_vxprintf(mg_pfn_iobuf, &c->send, fmt, ap);
 800eb36:	68fb      	ldr	r3, [r7, #12]
 800eb38:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	68ba      	ldr	r2, [r7, #8]
 800eb40:	4805      	ldr	r0, [pc, #20]	@ (800eb58 <mg_vprintf+0x34>)
 800eb42:	f7fa fec9 	bl	80098d8 <mg_vxprintf>
  return c->send.len - old;
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800eb4a:	697b      	ldr	r3, [r7, #20]
 800eb4c:	1ad3      	subs	r3, r2, r3
}
 800eb4e:	4618      	mov	r0, r3
 800eb50:	3718      	adds	r7, #24
 800eb52:	46bd      	mov	sp, r7
 800eb54:	bd80      	pop	{r7, pc}
 800eb56:	bf00      	nop
 800eb58:	080130ad 	.word	0x080130ad

0800eb5c <mg_printf>:

size_t mg_printf(struct mg_connection *c, const char *fmt, ...) {
 800eb5c:	b40e      	push	{r1, r2, r3}
 800eb5e:	b580      	push	{r7, lr}
 800eb60:	b085      	sub	sp, #20
 800eb62:	af00      	add	r7, sp, #0
 800eb64:	6078      	str	r0, [r7, #4]
  size_t len = 0;
 800eb66:	2300      	movs	r3, #0
 800eb68:	60fb      	str	r3, [r7, #12]
  va_list ap;
  va_start(ap, fmt);
 800eb6a:	f107 0320 	add.w	r3, r7, #32
 800eb6e:	60bb      	str	r3, [r7, #8]
  len = mg_vprintf(c, fmt, &ap);
 800eb70:	f107 0308 	add.w	r3, r7, #8
 800eb74:	461a      	mov	r2, r3
 800eb76:	69f9      	ldr	r1, [r7, #28]
 800eb78:	6878      	ldr	r0, [r7, #4]
 800eb7a:	f7ff ffd3 	bl	800eb24 <mg_vprintf>
 800eb7e:	60f8      	str	r0, [r7, #12]
  va_end(ap);
  return len;
 800eb80:	68fb      	ldr	r3, [r7, #12]
}
 800eb82:	4618      	mov	r0, r3
 800eb84:	3714      	adds	r7, #20
 800eb86:	46bd      	mov	sp, r7
 800eb88:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800eb8c:	b003      	add	sp, #12
 800eb8e:	4770      	bx	lr

0800eb90 <mg_atonl>:

static bool mg_atonl(struct mg_str str, struct mg_addr *addr) {
 800eb90:	b580      	push	{r7, lr}
 800eb92:	b088      	sub	sp, #32
 800eb94:	af00      	add	r7, sp, #0
 800eb96:	f107 0308 	add.w	r3, r7, #8
 800eb9a:	e883 0003 	stmia.w	r3, {r0, r1}
 800eb9e:	607a      	str	r2, [r7, #4]
  uint32_t localhost = mg_htonl(0x7f000001);
 800eba0:	4811      	ldr	r0, [pc, #68]	@ (800ebe8 <mg_atonl+0x58>)
 800eba2:	f013 f930 	bl	8021e06 <mg_ntohl>
 800eba6:	4603      	mov	r3, r0
 800eba8:	617b      	str	r3, [r7, #20]
  if (mg_strcasecmp(str, mg_str("localhost")) != 0) return false;
 800ebaa:	f107 0318 	add.w	r3, r7, #24
 800ebae:	490f      	ldr	r1, [pc, #60]	@ (800ebec <mg_atonl+0x5c>)
 800ebb0:	4618      	mov	r0, r3
 800ebb2:	f007 fe77 	bl	80168a4 <mg_str_s>
 800ebb6:	f107 0318 	add.w	r3, r7, #24
 800ebba:	cb0c      	ldmia	r3, {r2, r3}
 800ebbc:	f107 0108 	add.w	r1, r7, #8
 800ebc0:	c903      	ldmia	r1, {r0, r1}
 800ebc2:	f007 ff32 	bl	8016a2a <mg_strcasecmp>
 800ebc6:	4603      	mov	r3, r0
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	d001      	beq.n	800ebd0 <mg_atonl+0x40>
 800ebcc:	2300      	movs	r3, #0
 800ebce:	e006      	b.n	800ebde <mg_atonl+0x4e>
  memcpy(addr->ip, &localhost, sizeof(uint32_t));
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	697a      	ldr	r2, [r7, #20]
 800ebd4:	601a      	str	r2, [r3, #0]
  addr->is_ip6 = false;
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	2200      	movs	r2, #0
 800ebda:	74da      	strb	r2, [r3, #19]
  return true;
 800ebdc:	2301      	movs	r3, #1
}
 800ebde:	4618      	mov	r0, r3
 800ebe0:	3720      	adds	r7, #32
 800ebe2:	46bd      	mov	sp, r7
 800ebe4:	bd80      	pop	{r7, pc}
 800ebe6:	bf00      	nop
 800ebe8:	7f000001 	.word	0x7f000001
 800ebec:	0802abd0 	.word	0x0802abd0

0800ebf0 <mg_atone>:

static bool mg_atone(struct mg_str str, struct mg_addr *addr) {
 800ebf0:	b580      	push	{r7, lr}
 800ebf2:	b084      	sub	sp, #16
 800ebf4:	af00      	add	r7, sp, #0
 800ebf6:	f107 0308 	add.w	r3, r7, #8
 800ebfa:	e883 0003 	stmia.w	r3, {r0, r1}
 800ebfe:	607a      	str	r2, [r7, #4]
  if (str.len > 0) return false;
 800ec00:	68fb      	ldr	r3, [r7, #12]
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	d001      	beq.n	800ec0a <mg_atone+0x1a>
 800ec06:	2300      	movs	r3, #0
 800ec08:	e009      	b.n	800ec1e <mg_atone+0x2e>
  memset(addr->ip, 0, sizeof(addr->ip));
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	2210      	movs	r2, #16
 800ec0e:	2100      	movs	r1, #0
 800ec10:	4618      	mov	r0, r3
 800ec12:	f018 fd59 	bl	80276c8 <memset>
  addr->is_ip6 = false;
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	2200      	movs	r2, #0
 800ec1a:	74da      	strb	r2, [r3, #19]
  return true;
 800ec1c:	2301      	movs	r3, #1
}
 800ec1e:	4618      	mov	r0, r3
 800ec20:	3710      	adds	r7, #16
 800ec22:	46bd      	mov	sp, r7
 800ec24:	bd80      	pop	{r7, pc}

0800ec26 <mg_aton4>:

static bool mg_aton4(struct mg_str str, struct mg_addr *addr) {
 800ec26:	b480      	push	{r7}
 800ec28:	b089      	sub	sp, #36	@ 0x24
 800ec2a:	af00      	add	r7, sp, #0
 800ec2c:	f107 0308 	add.w	r3, r7, #8
 800ec30:	e883 0003 	stmia.w	r3, {r0, r1}
 800ec34:	607a      	str	r2, [r7, #4]
  uint8_t data[4] = {0, 0, 0, 0};
 800ec36:	2300      	movs	r3, #0
 800ec38:	613b      	str	r3, [r7, #16]
  size_t i, num_dots = 0;
 800ec3a:	2300      	movs	r3, #0
 800ec3c:	61bb      	str	r3, [r7, #24]
  for (i = 0; i < str.len; i++) {
 800ec3e:	2300      	movs	r3, #0
 800ec40:	61fb      	str	r3, [r7, #28]
 800ec42:	e049      	b.n	800ecd8 <mg_aton4+0xb2>
    if (str.buf[i] >= '0' && str.buf[i] <= '9') {
 800ec44:	68ba      	ldr	r2, [r7, #8]
 800ec46:	69fb      	ldr	r3, [r7, #28]
 800ec48:	4413      	add	r3, r2
 800ec4a:	781b      	ldrb	r3, [r3, #0]
 800ec4c:	2b2f      	cmp	r3, #47	@ 0x2f
 800ec4e:	d925      	bls.n	800ec9c <mg_aton4+0x76>
 800ec50:	68ba      	ldr	r2, [r7, #8]
 800ec52:	69fb      	ldr	r3, [r7, #28]
 800ec54:	4413      	add	r3, r2
 800ec56:	781b      	ldrb	r3, [r3, #0]
 800ec58:	2b39      	cmp	r3, #57	@ 0x39
 800ec5a:	d81f      	bhi.n	800ec9c <mg_aton4+0x76>
      int octet = data[num_dots] * 10 + (str.buf[i] - '0');
 800ec5c:	f107 0210 	add.w	r2, r7, #16
 800ec60:	69bb      	ldr	r3, [r7, #24]
 800ec62:	4413      	add	r3, r2
 800ec64:	781b      	ldrb	r3, [r3, #0]
 800ec66:	461a      	mov	r2, r3
 800ec68:	4613      	mov	r3, r2
 800ec6a:	009b      	lsls	r3, r3, #2
 800ec6c:	4413      	add	r3, r2
 800ec6e:	005b      	lsls	r3, r3, #1
 800ec70:	4619      	mov	r1, r3
 800ec72:	68ba      	ldr	r2, [r7, #8]
 800ec74:	69fb      	ldr	r3, [r7, #28]
 800ec76:	4413      	add	r3, r2
 800ec78:	781b      	ldrb	r3, [r3, #0]
 800ec7a:	3b30      	subs	r3, #48	@ 0x30
 800ec7c:	440b      	add	r3, r1
 800ec7e:	617b      	str	r3, [r7, #20]
      if (octet > 255) return false;
 800ec80:	697b      	ldr	r3, [r7, #20]
 800ec82:	2bff      	cmp	r3, #255	@ 0xff
 800ec84:	dd01      	ble.n	800ec8a <mg_aton4+0x64>
 800ec86:	2300      	movs	r3, #0
 800ec88:	e03d      	b.n	800ed06 <mg_aton4+0xe0>
      data[num_dots] = (uint8_t) octet;
 800ec8a:	697b      	ldr	r3, [r7, #20]
 800ec8c:	b2d9      	uxtb	r1, r3
 800ec8e:	f107 0210 	add.w	r2, r7, #16
 800ec92:	69bb      	ldr	r3, [r7, #24]
 800ec94:	4413      	add	r3, r2
 800ec96:	460a      	mov	r2, r1
 800ec98:	701a      	strb	r2, [r3, #0]
    if (str.buf[i] >= '0' && str.buf[i] <= '9') {
 800ec9a:	e01a      	b.n	800ecd2 <mg_aton4+0xac>
    } else if (str.buf[i] == '.') {
 800ec9c:	68ba      	ldr	r2, [r7, #8]
 800ec9e:	69fb      	ldr	r3, [r7, #28]
 800eca0:	4413      	add	r3, r2
 800eca2:	781b      	ldrb	r3, [r3, #0]
 800eca4:	2b2e      	cmp	r3, #46	@ 0x2e
 800eca6:	d112      	bne.n	800ecce <mg_aton4+0xa8>
      if (num_dots >= 3 || i == 0 || str.buf[i - 1] == '.') return false;
 800eca8:	69bb      	ldr	r3, [r7, #24]
 800ecaa:	2b02      	cmp	r3, #2
 800ecac:	d809      	bhi.n	800ecc2 <mg_aton4+0x9c>
 800ecae:	69fb      	ldr	r3, [r7, #28]
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	d006      	beq.n	800ecc2 <mg_aton4+0x9c>
 800ecb4:	68ba      	ldr	r2, [r7, #8]
 800ecb6:	69fb      	ldr	r3, [r7, #28]
 800ecb8:	3b01      	subs	r3, #1
 800ecba:	4413      	add	r3, r2
 800ecbc:	781b      	ldrb	r3, [r3, #0]
 800ecbe:	2b2e      	cmp	r3, #46	@ 0x2e
 800ecc0:	d101      	bne.n	800ecc6 <mg_aton4+0xa0>
 800ecc2:	2300      	movs	r3, #0
 800ecc4:	e01f      	b.n	800ed06 <mg_aton4+0xe0>
      num_dots++;
 800ecc6:	69bb      	ldr	r3, [r7, #24]
 800ecc8:	3301      	adds	r3, #1
 800ecca:	61bb      	str	r3, [r7, #24]
 800eccc:	e001      	b.n	800ecd2 <mg_aton4+0xac>
    } else {
      return false;
 800ecce:	2300      	movs	r3, #0
 800ecd0:	e019      	b.n	800ed06 <mg_aton4+0xe0>
  for (i = 0; i < str.len; i++) {
 800ecd2:	69fb      	ldr	r3, [r7, #28]
 800ecd4:	3301      	adds	r3, #1
 800ecd6:	61fb      	str	r3, [r7, #28]
 800ecd8:	68fb      	ldr	r3, [r7, #12]
 800ecda:	69fa      	ldr	r2, [r7, #28]
 800ecdc:	429a      	cmp	r2, r3
 800ecde:	d3b1      	bcc.n	800ec44 <mg_aton4+0x1e>
    }
  }
  if (num_dots != 3 || str.buf[i - 1] == '.') return false;
 800ece0:	69bb      	ldr	r3, [r7, #24]
 800ece2:	2b03      	cmp	r3, #3
 800ece4:	d106      	bne.n	800ecf4 <mg_aton4+0xce>
 800ece6:	68ba      	ldr	r2, [r7, #8]
 800ece8:	69fb      	ldr	r3, [r7, #28]
 800ecea:	3b01      	subs	r3, #1
 800ecec:	4413      	add	r3, r2
 800ecee:	781b      	ldrb	r3, [r3, #0]
 800ecf0:	2b2e      	cmp	r3, #46	@ 0x2e
 800ecf2:	d101      	bne.n	800ecf8 <mg_aton4+0xd2>
 800ecf4:	2300      	movs	r3, #0
 800ecf6:	e006      	b.n	800ed06 <mg_aton4+0xe0>
  memcpy(&addr->ip, data, sizeof(data));
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	693a      	ldr	r2, [r7, #16]
 800ecfc:	601a      	str	r2, [r3, #0]
  addr->is_ip6 = false;
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	2200      	movs	r2, #0
 800ed02:	74da      	strb	r2, [r3, #19]
  return true;
 800ed04:	2301      	movs	r3, #1
}
 800ed06:	4618      	mov	r0, r3
 800ed08:	3724      	adds	r7, #36	@ 0x24
 800ed0a:	46bd      	mov	sp, r7
 800ed0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed10:	4770      	bx	lr

0800ed12 <mg_v4mapped>:

static bool mg_v4mapped(struct mg_str str, struct mg_addr *addr) {
 800ed12:	b580      	push	{r7, lr}
 800ed14:	b088      	sub	sp, #32
 800ed16:	af00      	add	r7, sp, #0
 800ed18:	f107 0308 	add.w	r3, r7, #8
 800ed1c:	e883 0003 	stmia.w	r3, {r0, r1}
 800ed20:	607a      	str	r2, [r7, #4]
  int i;
  uint32_t ipv4;
  if (str.len < 14) return false;
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	2b0d      	cmp	r3, #13
 800ed26:	d801      	bhi.n	800ed2c <mg_v4mapped+0x1a>
 800ed28:	2300      	movs	r3, #0
 800ed2a:	e056      	b.n	800edda <mg_v4mapped+0xc8>
  if (str.buf[0] != ':' || str.buf[1] != ':' || str.buf[6] != ':') return false;
 800ed2c:	68bb      	ldr	r3, [r7, #8]
 800ed2e:	781b      	ldrb	r3, [r3, #0]
 800ed30:	2b3a      	cmp	r3, #58	@ 0x3a
 800ed32:	d109      	bne.n	800ed48 <mg_v4mapped+0x36>
 800ed34:	68bb      	ldr	r3, [r7, #8]
 800ed36:	3301      	adds	r3, #1
 800ed38:	781b      	ldrb	r3, [r3, #0]
 800ed3a:	2b3a      	cmp	r3, #58	@ 0x3a
 800ed3c:	d104      	bne.n	800ed48 <mg_v4mapped+0x36>
 800ed3e:	68bb      	ldr	r3, [r7, #8]
 800ed40:	3306      	adds	r3, #6
 800ed42:	781b      	ldrb	r3, [r3, #0]
 800ed44:	2b3a      	cmp	r3, #58	@ 0x3a
 800ed46:	d001      	beq.n	800ed4c <mg_v4mapped+0x3a>
 800ed48:	2300      	movs	r3, #0
 800ed4a:	e046      	b.n	800edda <mg_v4mapped+0xc8>
  for (i = 2; i < 6; i++) {
 800ed4c:	2302      	movs	r3, #2
 800ed4e:	61fb      	str	r3, [r7, #28]
 800ed50:	e010      	b.n	800ed74 <mg_v4mapped+0x62>
    if (str.buf[i] != 'f' && str.buf[i] != 'F') return false;
 800ed52:	68ba      	ldr	r2, [r7, #8]
 800ed54:	69fb      	ldr	r3, [r7, #28]
 800ed56:	4413      	add	r3, r2
 800ed58:	781b      	ldrb	r3, [r3, #0]
 800ed5a:	2b66      	cmp	r3, #102	@ 0x66
 800ed5c:	d007      	beq.n	800ed6e <mg_v4mapped+0x5c>
 800ed5e:	68ba      	ldr	r2, [r7, #8]
 800ed60:	69fb      	ldr	r3, [r7, #28]
 800ed62:	4413      	add	r3, r2
 800ed64:	781b      	ldrb	r3, [r3, #0]
 800ed66:	2b46      	cmp	r3, #70	@ 0x46
 800ed68:	d001      	beq.n	800ed6e <mg_v4mapped+0x5c>
 800ed6a:	2300      	movs	r3, #0
 800ed6c:	e035      	b.n	800edda <mg_v4mapped+0xc8>
  for (i = 2; i < 6; i++) {
 800ed6e:	69fb      	ldr	r3, [r7, #28]
 800ed70:	3301      	adds	r3, #1
 800ed72:	61fb      	str	r3, [r7, #28]
 800ed74:	69fb      	ldr	r3, [r7, #28]
 800ed76:	2b05      	cmp	r3, #5
 800ed78:	ddeb      	ble.n	800ed52 <mg_v4mapped+0x40>
  }
  // struct mg_str s = mg_str_n(&str.buf[7], str.len - 7);
  if (!mg_aton4(mg_str_n(&str.buf[7], str.len - 7), addr)) return false;
 800ed7a:	68bb      	ldr	r3, [r7, #8]
 800ed7c:	1dd9      	adds	r1, r3, #7
 800ed7e:	68fb      	ldr	r3, [r7, #12]
 800ed80:	1fda      	subs	r2, r3, #7
 800ed82:	f107 0314 	add.w	r3, r7, #20
 800ed86:	4618      	mov	r0, r3
 800ed88:	f007 fda9 	bl	80168de <mg_str_n>
 800ed8c:	687a      	ldr	r2, [r7, #4]
 800ed8e:	f107 0314 	add.w	r3, r7, #20
 800ed92:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ed96:	f7ff ff46 	bl	800ec26 <mg_aton4>
 800ed9a:	4603      	mov	r3, r0
 800ed9c:	f083 0301 	eor.w	r3, r3, #1
 800eda0:	b2db      	uxtb	r3, r3
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	d001      	beq.n	800edaa <mg_v4mapped+0x98>
 800eda6:	2300      	movs	r3, #0
 800eda8:	e017      	b.n	800edda <mg_v4mapped+0xc8>
  memcpy(&ipv4, addr->ip, sizeof(ipv4));
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	681b      	ldr	r3, [r3, #0]
 800edae:	613b      	str	r3, [r7, #16]
  memset(addr->ip, 0, sizeof(addr->ip));
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	2210      	movs	r2, #16
 800edb4:	2100      	movs	r1, #0
 800edb6:	4618      	mov	r0, r3
 800edb8:	f018 fc86 	bl	80276c8 <memset>
  addr->ip[10] = addr->ip[11] = 255;
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	22ff      	movs	r2, #255	@ 0xff
 800edc0:	72da      	strb	r2, [r3, #11]
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	7ada      	ldrb	r2, [r3, #11]
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	729a      	strb	r2, [r3, #10]
  memcpy(&addr->ip[12], &ipv4, 4);
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	330c      	adds	r3, #12
 800edce:	693a      	ldr	r2, [r7, #16]
 800edd0:	601a      	str	r2, [r3, #0]
  addr->is_ip6 = true;
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	2201      	movs	r2, #1
 800edd6:	74da      	strb	r2, [r3, #19]
  return true;
 800edd8:	2301      	movs	r3, #1
}
 800edda:	4618      	mov	r0, r3
 800eddc:	3720      	adds	r7, #32
 800edde:	46bd      	mov	sp, r7
 800ede0:	bd80      	pop	{r7, pc}

0800ede2 <mg_aton6>:

static bool mg_aton6(struct mg_str str, struct mg_addr *addr) {
 800ede2:	b580      	push	{r7, lr}
 800ede4:	b090      	sub	sp, #64	@ 0x40
 800ede6:	af02      	add	r7, sp, #8
 800ede8:	f107 0308 	add.w	r3, r7, #8
 800edec:	e883 0003 	stmia.w	r3, {r0, r1}
 800edf0:	607a      	str	r2, [r7, #4]
  size_t i, j = 0, n = 0, dc = 42;
 800edf2:	2300      	movs	r3, #0
 800edf4:	633b      	str	r3, [r7, #48]	@ 0x30
 800edf6:	2300      	movs	r3, #0
 800edf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800edfa:	232a      	movs	r3, #42	@ 0x2a
 800edfc:	62bb      	str	r3, [r7, #40]	@ 0x28
  addr->scope_id = 0;
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	2200      	movs	r2, #0
 800ee02:	749a      	strb	r2, [r3, #18]
  if (str.len > 2 && str.buf[0] == '[') str.buf++, str.len -= 2;
 800ee04:	68fb      	ldr	r3, [r7, #12]
 800ee06:	2b02      	cmp	r3, #2
 800ee08:	d909      	bls.n	800ee1e <mg_aton6+0x3c>
 800ee0a:	68bb      	ldr	r3, [r7, #8]
 800ee0c:	781b      	ldrb	r3, [r3, #0]
 800ee0e:	2b5b      	cmp	r3, #91	@ 0x5b
 800ee10:	d105      	bne.n	800ee1e <mg_aton6+0x3c>
 800ee12:	68bb      	ldr	r3, [r7, #8]
 800ee14:	3301      	adds	r3, #1
 800ee16:	60bb      	str	r3, [r7, #8]
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	3b02      	subs	r3, #2
 800ee1c:	60fb      	str	r3, [r7, #12]
  if (mg_v4mapped(str, addr)) return true;
 800ee1e:	687a      	ldr	r2, [r7, #4]
 800ee20:	f107 0308 	add.w	r3, r7, #8
 800ee24:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ee28:	f7ff ff73 	bl	800ed12 <mg_v4mapped>
 800ee2c:	4603      	mov	r3, r0
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	d001      	beq.n	800ee36 <mg_aton6+0x54>
 800ee32:	2301      	movs	r3, #1
 800ee34:	e0e1      	b.n	800effa <mg_aton6+0x218>
  for (i = 0; i < str.len; i++) {
 800ee36:	2300      	movs	r3, #0
 800ee38:	637b      	str	r3, [r7, #52]	@ 0x34
 800ee3a:	e0b0      	b.n	800ef9e <mg_aton6+0x1bc>
    if ((str.buf[i] >= '0' && str.buf[i] <= '9') ||
 800ee3c:	68ba      	ldr	r2, [r7, #8]
 800ee3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ee40:	4413      	add	r3, r2
 800ee42:	781b      	ldrb	r3, [r3, #0]
 800ee44:	2b2f      	cmp	r3, #47	@ 0x2f
 800ee46:	d905      	bls.n	800ee54 <mg_aton6+0x72>
 800ee48:	68ba      	ldr	r2, [r7, #8]
 800ee4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ee4c:	4413      	add	r3, r2
 800ee4e:	781b      	ldrb	r3, [r3, #0]
 800ee50:	2b39      	cmp	r3, #57	@ 0x39
 800ee52:	d917      	bls.n	800ee84 <mg_aton6+0xa2>
        (str.buf[i] >= 'a' && str.buf[i] <= 'f') ||
 800ee54:	68ba      	ldr	r2, [r7, #8]
 800ee56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ee58:	4413      	add	r3, r2
 800ee5a:	781b      	ldrb	r3, [r3, #0]
    if ((str.buf[i] >= '0' && str.buf[i] <= '9') ||
 800ee5c:	2b60      	cmp	r3, #96	@ 0x60
 800ee5e:	d905      	bls.n	800ee6c <mg_aton6+0x8a>
        (str.buf[i] >= 'a' && str.buf[i] <= 'f') ||
 800ee60:	68ba      	ldr	r2, [r7, #8]
 800ee62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ee64:	4413      	add	r3, r2
 800ee66:	781b      	ldrb	r3, [r3, #0]
 800ee68:	2b66      	cmp	r3, #102	@ 0x66
 800ee6a:	d90b      	bls.n	800ee84 <mg_aton6+0xa2>
        (str.buf[i] >= 'A' && str.buf[i] <= 'F')) {
 800ee6c:	68ba      	ldr	r2, [r7, #8]
 800ee6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ee70:	4413      	add	r3, r2
 800ee72:	781b      	ldrb	r3, [r3, #0]
        (str.buf[i] >= 'a' && str.buf[i] <= 'f') ||
 800ee74:	2b40      	cmp	r3, #64	@ 0x40
 800ee76:	d933      	bls.n	800eee0 <mg_aton6+0xfe>
        (str.buf[i] >= 'A' && str.buf[i] <= 'F')) {
 800ee78:	68ba      	ldr	r2, [r7, #8]
 800ee7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ee7c:	4413      	add	r3, r2
 800ee7e:	781b      	ldrb	r3, [r3, #0]
 800ee80:	2b46      	cmp	r3, #70	@ 0x46
 800ee82:	d82d      	bhi.n	800eee0 <mg_aton6+0xfe>
      unsigned long val = 0;  // TODO(): This loops on chars, refactor
 800ee84:	2300      	movs	r3, #0
 800ee86:	617b      	str	r3, [r7, #20]
      if (i > j + 3) return false;
 800ee88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee8a:	3303      	adds	r3, #3
 800ee8c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ee8e:	429a      	cmp	r2, r3
 800ee90:	d901      	bls.n	800ee96 <mg_aton6+0xb4>
 800ee92:	2300      	movs	r3, #0
 800ee94:	e0b1      	b.n	800effa <mg_aton6+0x218>
      // MG_DEBUG(("%lu %lu [%.*s]", i, j, (int) (i - j + 1), &str.buf[j]));
      mg_str_to_num(mg_str_n(&str.buf[j], i - j + 1), 16, &val, sizeof(val));
 800ee96:	68ba      	ldr	r2, [r7, #8]
 800ee98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee9a:	18d1      	adds	r1, r2, r3
 800ee9c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ee9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eea0:	1ad3      	subs	r3, r2, r3
 800eea2:	1c5a      	adds	r2, r3, #1
 800eea4:	f107 0318 	add.w	r3, r7, #24
 800eea8:	4618      	mov	r0, r3
 800eeaa:	f007 fd18 	bl	80168de <mg_str_n>
 800eeae:	f107 0314 	add.w	r3, r7, #20
 800eeb2:	2204      	movs	r2, #4
 800eeb4:	9200      	str	r2, [sp, #0]
 800eeb6:	2210      	movs	r2, #16
 800eeb8:	f107 0118 	add.w	r1, r7, #24
 800eebc:	c903      	ldmia	r1, {r0, r1}
 800eebe:	f007 ff4c 	bl	8016d5a <mg_str_to_num>
      addr->ip[n] = (uint8_t) ((val >> 8) & 255);
 800eec2:	697b      	ldr	r3, [r7, #20]
 800eec4:	0a1b      	lsrs	r3, r3, #8
 800eec6:	b2d9      	uxtb	r1, r3
 800eec8:	687a      	ldr	r2, [r7, #4]
 800eeca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eecc:	4413      	add	r3, r2
 800eece:	460a      	mov	r2, r1
 800eed0:	701a      	strb	r2, [r3, #0]
      addr->ip[n + 1] = (uint8_t) (val & 255);
 800eed2:	697a      	ldr	r2, [r7, #20]
 800eed4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eed6:	3301      	adds	r3, #1
 800eed8:	b2d1      	uxtb	r1, r2
 800eeda:	687a      	ldr	r2, [r7, #4]
 800eedc:	54d1      	strb	r1, [r2, r3]
        (str.buf[i] >= 'A' && str.buf[i] <= 'F')) {
 800eede:	e05b      	b.n	800ef98 <mg_aton6+0x1b6>
    } else if (str.buf[i] == ':') {
 800eee0:	68ba      	ldr	r2, [r7, #8]
 800eee2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eee4:	4413      	add	r3, r2
 800eee6:	781b      	ldrb	r3, [r3, #0]
 800eee8:	2b3a      	cmp	r3, #58	@ 0x3a
 800eeea:	d134      	bne.n	800ef56 <mg_aton6+0x174>
      j = i + 1;
 800eeec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eeee:	3301      	adds	r3, #1
 800eef0:	633b      	str	r3, [r7, #48]	@ 0x30
      if (i > 0 && str.buf[i - 1] == ':') {
 800eef2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	d014      	beq.n	800ef22 <mg_aton6+0x140>
 800eef8:	68ba      	ldr	r2, [r7, #8]
 800eefa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eefc:	3b01      	subs	r3, #1
 800eefe:	4413      	add	r3, r2
 800ef00:	781b      	ldrb	r3, [r3, #0]
 800ef02:	2b3a      	cmp	r3, #58	@ 0x3a
 800ef04:	d10d      	bne.n	800ef22 <mg_aton6+0x140>
        dc = n;  // Double colon
 800ef06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef08:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (i > 1 && str.buf[i - 2] == ':') return false;
 800ef0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ef0c:	2b01      	cmp	r3, #1
 800ef0e:	d90f      	bls.n	800ef30 <mg_aton6+0x14e>
 800ef10:	68ba      	ldr	r2, [r7, #8]
 800ef12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ef14:	3b02      	subs	r3, #2
 800ef16:	4413      	add	r3, r2
 800ef18:	781b      	ldrb	r3, [r3, #0]
 800ef1a:	2b3a      	cmp	r3, #58	@ 0x3a
 800ef1c:	d108      	bne.n	800ef30 <mg_aton6+0x14e>
 800ef1e:	2300      	movs	r3, #0
 800ef20:	e06b      	b.n	800effa <mg_aton6+0x218>
      } else if (i > 0) {
 800ef22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d004      	beq.n	800ef32 <mg_aton6+0x150>
        n += 2;
 800ef28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef2a:	3302      	adds	r3, #2
 800ef2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ef2e:	e000      	b.n	800ef32 <mg_aton6+0x150>
        if (i > 1 && str.buf[i - 2] == ':') return false;
 800ef30:	bf00      	nop
      }
      if (n > 14) return false;
 800ef32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef34:	2b0e      	cmp	r3, #14
 800ef36:	d901      	bls.n	800ef3c <mg_aton6+0x15a>
 800ef38:	2300      	movs	r3, #0
 800ef3a:	e05e      	b.n	800effa <mg_aton6+0x218>
      addr->ip[n] = addr->ip[n + 1] = 0;  // For trailing ::
 800ef3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef3e:	3301      	adds	r3, #1
 800ef40:	687a      	ldr	r2, [r7, #4]
 800ef42:	2100      	movs	r1, #0
 800ef44:	54d1      	strb	r1, [r2, r3]
 800ef46:	687a      	ldr	r2, [r7, #4]
 800ef48:	5cd1      	ldrb	r1, [r2, r3]
 800ef4a:	687a      	ldr	r2, [r7, #4]
 800ef4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef4e:	4413      	add	r3, r2
 800ef50:	460a      	mov	r2, r1
 800ef52:	701a      	strb	r2, [r3, #0]
 800ef54:	e020      	b.n	800ef98 <mg_aton6+0x1b6>
    } else if (str.buf[i] == '%') {       // Scope ID, last in string
 800ef56:	68ba      	ldr	r2, [r7, #8]
 800ef58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ef5a:	4413      	add	r3, r2
 800ef5c:	781b      	ldrb	r3, [r3, #0]
 800ef5e:	2b25      	cmp	r3, #37	@ 0x25
 800ef60:	d118      	bne.n	800ef94 <mg_aton6+0x1b2>
      return mg_str_to_num(mg_str_n(&str.buf[i + 1], str.len - i - 1), 10,
 800ef62:	68ba      	ldr	r2, [r7, #8]
 800ef64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ef66:	3301      	adds	r3, #1
 800ef68:	18d1      	adds	r1, r2, r3
 800ef6a:	68fa      	ldr	r2, [r7, #12]
 800ef6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ef6e:	1ad3      	subs	r3, r2, r3
 800ef70:	1e5a      	subs	r2, r3, #1
 800ef72:	f107 0320 	add.w	r3, r7, #32
 800ef76:	4618      	mov	r0, r3
 800ef78:	f007 fcb1 	bl	80168de <mg_str_n>
                           &addr->scope_id, sizeof(uint8_t));
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	3312      	adds	r3, #18
      return mg_str_to_num(mg_str_n(&str.buf[i + 1], str.len - i - 1), 10,
 800ef80:	2201      	movs	r2, #1
 800ef82:	9200      	str	r2, [sp, #0]
 800ef84:	220a      	movs	r2, #10
 800ef86:	f107 0120 	add.w	r1, r7, #32
 800ef8a:	c903      	ldmia	r1, {r0, r1}
 800ef8c:	f007 fee5 	bl	8016d5a <mg_str_to_num>
 800ef90:	4603      	mov	r3, r0
 800ef92:	e032      	b.n	800effa <mg_aton6+0x218>
    } else {
      return false;
 800ef94:	2300      	movs	r3, #0
 800ef96:	e030      	b.n	800effa <mg_aton6+0x218>
  for (i = 0; i < str.len; i++) {
 800ef98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ef9a:	3301      	adds	r3, #1
 800ef9c:	637b      	str	r3, [r7, #52]	@ 0x34
 800ef9e:	68fb      	ldr	r3, [r7, #12]
 800efa0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800efa2:	429a      	cmp	r2, r3
 800efa4:	f4ff af4a 	bcc.w	800ee3c <mg_aton6+0x5a>
    }
  }
  if (n < 14 && dc == 42) return false;
 800efa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800efaa:	2b0d      	cmp	r3, #13
 800efac:	d804      	bhi.n	800efb8 <mg_aton6+0x1d6>
 800efae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800efb0:	2b2a      	cmp	r3, #42	@ 0x2a
 800efb2:	d101      	bne.n	800efb8 <mg_aton6+0x1d6>
 800efb4:	2300      	movs	r3, #0
 800efb6:	e020      	b.n	800effa <mg_aton6+0x218>
  if (n < 14) {
 800efb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800efba:	2b0d      	cmp	r3, #13
 800efbc:	d819      	bhi.n	800eff2 <mg_aton6+0x210>
    memmove(&addr->ip[dc + (14 - n)], &addr->ip[dc], n - dc + 2);
 800efbe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800efc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800efc2:	1ad3      	subs	r3, r2, r3
 800efc4:	330e      	adds	r3, #14
 800efc6:	687a      	ldr	r2, [r7, #4]
 800efc8:	18d0      	adds	r0, r2, r3
 800efca:	687a      	ldr	r2, [r7, #4]
 800efcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800efce:	18d1      	adds	r1, r2, r3
 800efd0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800efd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800efd4:	1ad3      	subs	r3, r2, r3
 800efd6:	3302      	adds	r3, #2
 800efd8:	461a      	mov	r2, r3
 800efda:	f018 fb5b 	bl	8027694 <memmove>
    memset(&addr->ip[dc], 0, 14 - n);
 800efde:	687a      	ldr	r2, [r7, #4]
 800efe0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800efe2:	18d0      	adds	r0, r2, r3
 800efe4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800efe6:	f1c3 030e 	rsb	r3, r3, #14
 800efea:	461a      	mov	r2, r3
 800efec:	2100      	movs	r1, #0
 800efee:	f018 fb6b 	bl	80276c8 <memset>
  }

  addr->is_ip6 = true;
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	2201      	movs	r2, #1
 800eff6:	74da      	strb	r2, [r3, #19]
  return true;
 800eff8:	2301      	movs	r3, #1
}
 800effa:	4618      	mov	r0, r3
 800effc:	3738      	adds	r7, #56	@ 0x38
 800effe:	46bd      	mov	sp, r7
 800f000:	bd80      	pop	{r7, pc}

0800f002 <mg_aton>:

bool mg_aton(struct mg_str str, struct mg_addr *addr) {
 800f002:	b580      	push	{r7, lr}
 800f004:	b084      	sub	sp, #16
 800f006:	af00      	add	r7, sp, #0
 800f008:	f107 0308 	add.w	r3, r7, #8
 800f00c:	e883 0003 	stmia.w	r3, {r0, r1}
 800f010:	607a      	str	r2, [r7, #4]
  // MG_INFO(("[%.*s]", (int) str.len, str.buf));
  return mg_atone(str, addr) || mg_atonl(str, addr) || mg_aton4(str, addr) ||
 800f012:	687a      	ldr	r2, [r7, #4]
 800f014:	f107 0308 	add.w	r3, r7, #8
 800f018:	e893 0003 	ldmia.w	r3, {r0, r1}
 800f01c:	f7ff fde8 	bl	800ebf0 <mg_atone>
 800f020:	4603      	mov	r3, r0
 800f022:	2b00      	cmp	r3, #0
 800f024:	d11d      	bne.n	800f062 <mg_aton+0x60>
 800f026:	687a      	ldr	r2, [r7, #4]
 800f028:	f107 0308 	add.w	r3, r7, #8
 800f02c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800f030:	f7ff fdae 	bl	800eb90 <mg_atonl>
 800f034:	4603      	mov	r3, r0
 800f036:	2b00      	cmp	r3, #0
 800f038:	d113      	bne.n	800f062 <mg_aton+0x60>
 800f03a:	687a      	ldr	r2, [r7, #4]
 800f03c:	f107 0308 	add.w	r3, r7, #8
 800f040:	e893 0003 	ldmia.w	r3, {r0, r1}
 800f044:	f7ff fdef 	bl	800ec26 <mg_aton4>
 800f048:	4603      	mov	r3, r0
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d109      	bne.n	800f062 <mg_aton+0x60>
         mg_aton6(str, addr);
 800f04e:	687a      	ldr	r2, [r7, #4]
 800f050:	f107 0308 	add.w	r3, r7, #8
 800f054:	e893 0003 	ldmia.w	r3, {r0, r1}
 800f058:	f7ff fec3 	bl	800ede2 <mg_aton6>
 800f05c:	4603      	mov	r3, r0
  return mg_atone(str, addr) || mg_atonl(str, addr) || mg_aton4(str, addr) ||
 800f05e:	2b00      	cmp	r3, #0
 800f060:	d001      	beq.n	800f066 <mg_aton+0x64>
 800f062:	2301      	movs	r3, #1
 800f064:	e000      	b.n	800f068 <mg_aton+0x66>
 800f066:	2300      	movs	r3, #0
 800f068:	f003 0301 	and.w	r3, r3, #1
 800f06c:	b2db      	uxtb	r3, r3
}
 800f06e:	4618      	mov	r0, r3
 800f070:	3710      	adds	r7, #16
 800f072:	46bd      	mov	sp, r7
 800f074:	bd80      	pop	{r7, pc}

0800f076 <mg_alloc_conn>:

struct mg_connection *mg_alloc_conn(struct mg_mgr *mgr) {
 800f076:	b580      	push	{r7, lr}
 800f078:	b084      	sub	sp, #16
 800f07a:	af00      	add	r7, sp, #0
 800f07c:	6078      	str	r0, [r7, #4]
  struct mg_connection *c =
      (struct mg_connection *) calloc(1, sizeof(*c) + mgr->extraconnsize);
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f082:	33b0      	adds	r3, #176	@ 0xb0
 800f084:	4619      	mov	r1, r3
 800f086:	2001      	movs	r0, #1
 800f088:	f016 fc70 	bl	802596c <calloc>
 800f08c:	4603      	mov	r3, r0
 800f08e:	60fb      	str	r3, [r7, #12]
  if (c != NULL) {
 800f090:	68fb      	ldr	r3, [r7, #12]
 800f092:	2b00      	cmp	r3, #0
 800f094:	d017      	beq.n	800f0c6 <mg_alloc_conn+0x50>
    c->mgr = mgr;
 800f096:	68fb      	ldr	r3, [r7, #12]
 800f098:	687a      	ldr	r2, [r7, #4]
 800f09a:	605a      	str	r2, [r3, #4]
    c->send.align = c->recv.align = c->rtls.align = MG_IO_SIZE;
 800f09c:	68fb      	ldr	r3, [r7, #12]
 800f09e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f0a2:	675a      	str	r2, [r3, #116]	@ 0x74
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 800f0a8:	68fb      	ldr	r3, [r7, #12]
 800f0aa:	645a      	str	r2, [r3, #68]	@ 0x44
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f0b0:	68fb      	ldr	r3, [r7, #12]
 800f0b2:	655a      	str	r2, [r3, #84]	@ 0x54
    c->id = ++mgr->nextid;
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	69db      	ldr	r3, [r3, #28]
 800f0b8:	1c5a      	adds	r2, r3, #1
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	61da      	str	r2, [r3, #28]
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	69da      	ldr	r2, [r3, #28]
 800f0c2:	68fb      	ldr	r3, [r7, #12]
 800f0c4:	635a      	str	r2, [r3, #52]	@ 0x34
    MG_PROF_INIT(c);
  }
  return c;
 800f0c6:	68fb      	ldr	r3, [r7, #12]
}
 800f0c8:	4618      	mov	r0, r3
 800f0ca:	3710      	adds	r7, #16
 800f0cc:	46bd      	mov	sp, r7
 800f0ce:	bd80      	pop	{r7, pc}

0800f0d0 <mg_close_conn>:

void mg_close_conn(struct mg_connection *c) {
 800f0d0:	b580      	push	{r7, lr}
 800f0d2:	b084      	sub	sp, #16
 800f0d4:	af00      	add	r7, sp, #0
 800f0d6:	6078      	str	r0, [r7, #4]
  mg_resolve_cancel(c);  // Close any pending DNS query
 800f0d8:	6878      	ldr	r0, [r7, #4]
 800f0da:	f7f8 ff84 	bl	8007fe6 <mg_resolve_cancel>
  LIST_DELETE(struct mg_connection, &c->mgr->conns, c);
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	685b      	ldr	r3, [r3, #4]
 800f0e2:	60fb      	str	r3, [r7, #12]
 800f0e4:	e002      	b.n	800f0ec <mg_close_conn+0x1c>
 800f0e6:	68fb      	ldr	r3, [r7, #12]
 800f0e8:	681b      	ldr	r3, [r3, #0]
 800f0ea:	60fb      	str	r3, [r7, #12]
 800f0ec:	68fb      	ldr	r3, [r7, #12]
 800f0ee:	681b      	ldr	r3, [r3, #0]
 800f0f0:	687a      	ldr	r2, [r7, #4]
 800f0f2:	429a      	cmp	r2, r3
 800f0f4:	d1f7      	bne.n	800f0e6 <mg_close_conn+0x16>
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	681a      	ldr	r2, [r3, #0]
 800f0fa:	68fb      	ldr	r3, [r7, #12]
 800f0fc:	601a      	str	r2, [r3, #0]
  if (c == c->mgr->dns4.c) c->mgr->dns4.c = NULL;
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	685b      	ldr	r3, [r3, #4]
 800f102:	689b      	ldr	r3, [r3, #8]
 800f104:	687a      	ldr	r2, [r7, #4]
 800f106:	429a      	cmp	r2, r3
 800f108:	d103      	bne.n	800f112 <mg_close_conn+0x42>
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	685b      	ldr	r3, [r3, #4]
 800f10e:	2200      	movs	r2, #0
 800f110:	609a      	str	r2, [r3, #8]
  if (c == c->mgr->dns6.c) c->mgr->dns6.c = NULL;
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	685b      	ldr	r3, [r3, #4]
 800f116:	691b      	ldr	r3, [r3, #16]
 800f118:	687a      	ldr	r2, [r7, #4]
 800f11a:	429a      	cmp	r2, r3
 800f11c:	d103      	bne.n	800f126 <mg_close_conn+0x56>
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	685b      	ldr	r3, [r3, #4]
 800f122:	2200      	movs	r2, #0
 800f124:	611a      	str	r2, [r3, #16]
  // Order of operations is important. `MG_EV_CLOSE` event must be fired
  // before we deallocate received data, see #1331
  mg_call(c, MG_EV_CLOSE, NULL);
 800f126:	2200      	movs	r2, #0
 800f128:	2109      	movs	r1, #9
 800f12a:	6878      	ldr	r0, [r7, #4]
 800f12c:	f7f9 fd22 	bl	8008b74 <mg_call>
  MG_DEBUG(("%lu %ld closed", c->id, c->fd));
 800f130:	4b17      	ldr	r3, [pc, #92]	@ (800f190 <mg_close_conn+0xc0>)
 800f132:	681b      	ldr	r3, [r3, #0]
 800f134:	2b02      	cmp	r3, #2
 800f136:	dd0e      	ble.n	800f156 <mg_close_conn+0x86>
 800f138:	4b16      	ldr	r3, [pc, #88]	@ (800f194 <mg_close_conn+0xc4>)
 800f13a:	f640 72bb 	movw	r2, #4027	@ 0xfbb
 800f13e:	4916      	ldr	r1, [pc, #88]	@ (800f198 <mg_close_conn+0xc8>)
 800f140:	2003      	movs	r0, #3
 800f142:	f7ff fbaf 	bl	800e8a4 <mg_log_prefix>
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f14e:	461a      	mov	r2, r3
 800f150:	4812      	ldr	r0, [pc, #72]	@ (800f19c <mg_close_conn+0xcc>)
 800f152:	f7ff fbf7 	bl	800e944 <mg_log>
  MG_PROF_DUMP(c);
  MG_PROF_FREE(c);

  mg_tls_free(c);
 800f156:	6878      	ldr	r0, [r7, #4]
 800f158:	f00c f8c0 	bl	801b2dc <mg_tls_free>
  mg_iobuf_free(&c->recv);
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	3338      	adds	r3, #56	@ 0x38
 800f160:	4618      	mov	r0, r3
 800f162:	f7fe fbd2 	bl	800d90a <mg_iobuf_free>
  mg_iobuf_free(&c->send);
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	3348      	adds	r3, #72	@ 0x48
 800f16a:	4618      	mov	r0, r3
 800f16c:	f7fe fbcd 	bl	800d90a <mg_iobuf_free>
  mg_iobuf_free(&c->rtls);
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	3368      	adds	r3, #104	@ 0x68
 800f174:	4618      	mov	r0, r3
 800f176:	f7fe fbc8 	bl	800d90a <mg_iobuf_free>
  mg_bzero((unsigned char *) c, sizeof(*c));
 800f17a:	21b0      	movs	r1, #176	@ 0xb0
 800f17c:	6878      	ldr	r0, [r7, #4]
 800f17e:	f012 fd4b 	bl	8021c18 <mg_bzero>
  free(c);
 800f182:	6878      	ldr	r0, [r7, #4]
 800f184:	f016 fc16 	bl	80259b4 <free>
}
 800f188:	bf00      	nop
 800f18a:	3710      	adds	r7, #16
 800f18c:	46bd      	mov	sp, r7
 800f18e:	bd80      	pop	{r7, pc}
 800f190:	24000258 	.word	0x24000258
 800f194:	0802d870 	.word	0x0802d870
 800f198:	08029c3c 	.word	0x08029c3c
 800f19c:	0802abdc 	.word	0x0802abdc

0800f1a0 <mg_connect>:

struct mg_connection *mg_connect(struct mg_mgr *mgr, const char *url,
                                 mg_event_handler_t fn, void *fn_data) {
 800f1a0:	b580      	push	{r7, lr}
 800f1a2:	b086      	sub	sp, #24
 800f1a4:	af00      	add	r7, sp, #0
 800f1a6:	60f8      	str	r0, [r7, #12]
 800f1a8:	60b9      	str	r1, [r7, #8]
 800f1aa:	607a      	str	r2, [r7, #4]
 800f1ac:	603b      	str	r3, [r7, #0]
  struct mg_connection *c = NULL;
 800f1ae:	2300      	movs	r3, #0
 800f1b0:	617b      	str	r3, [r7, #20]
  if (url == NULL || url[0] == '\0') {
 800f1b2:	68bb      	ldr	r3, [r7, #8]
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	d003      	beq.n	800f1c0 <mg_connect+0x20>
 800f1b8:	68bb      	ldr	r3, [r7, #8]
 800f1ba:	781b      	ldrb	r3, [r3, #0]
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	d10e      	bne.n	800f1de <mg_connect+0x3e>
    MG_ERROR(("null url"));
 800f1c0:	4b3f      	ldr	r3, [pc, #252]	@ (800f2c0 <mg_connect+0x120>)
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	dd76      	ble.n	800f2b6 <mg_connect+0x116>
 800f1c8:	4b3e      	ldr	r3, [pc, #248]	@ (800f2c4 <mg_connect+0x124>)
 800f1ca:	f640 72cb 	movw	r2, #4043	@ 0xfcb
 800f1ce:	493e      	ldr	r1, [pc, #248]	@ (800f2c8 <mg_connect+0x128>)
 800f1d0:	2001      	movs	r0, #1
 800f1d2:	f7ff fb67 	bl	800e8a4 <mg_log_prefix>
 800f1d6:	483d      	ldr	r0, [pc, #244]	@ (800f2cc <mg_connect+0x12c>)
 800f1d8:	f7ff fbb4 	bl	800e944 <mg_log>
 800f1dc:	e06b      	b.n	800f2b6 <mg_connect+0x116>
  } else if ((c = mg_alloc_conn(mgr)) == NULL) {
 800f1de:	68f8      	ldr	r0, [r7, #12]
 800f1e0:	f7ff ff49 	bl	800f076 <mg_alloc_conn>
 800f1e4:	6178      	str	r0, [r7, #20]
 800f1e6:	697b      	ldr	r3, [r7, #20]
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	d10e      	bne.n	800f20a <mg_connect+0x6a>
    MG_ERROR(("OOM"));
 800f1ec:	4b34      	ldr	r3, [pc, #208]	@ (800f2c0 <mg_connect+0x120>)
 800f1ee:	681b      	ldr	r3, [r3, #0]
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	dd60      	ble.n	800f2b6 <mg_connect+0x116>
 800f1f4:	4b33      	ldr	r3, [pc, #204]	@ (800f2c4 <mg_connect+0x124>)
 800f1f6:	f640 72cd 	movw	r2, #4045	@ 0xfcd
 800f1fa:	4933      	ldr	r1, [pc, #204]	@ (800f2c8 <mg_connect+0x128>)
 800f1fc:	2001      	movs	r0, #1
 800f1fe:	f7ff fb51 	bl	800e8a4 <mg_log_prefix>
 800f202:	4833      	ldr	r0, [pc, #204]	@ (800f2d0 <mg_connect+0x130>)
 800f204:	f7ff fb9e 	bl	800e944 <mg_log>
 800f208:	e055      	b.n	800f2b6 <mg_connect+0x116>
  } else {
    LIST_ADD_HEAD(struct mg_connection, &mgr->conns, c);
 800f20a:	68fb      	ldr	r3, [r7, #12]
 800f20c:	681a      	ldr	r2, [r3, #0]
 800f20e:	697b      	ldr	r3, [r7, #20]
 800f210:	601a      	str	r2, [r3, #0]
 800f212:	68fb      	ldr	r3, [r7, #12]
 800f214:	697a      	ldr	r2, [r7, #20]
 800f216:	601a      	str	r2, [r3, #0]
    c->is_udp = (strncmp(url, "udp:", 4) == 0);
 800f218:	2204      	movs	r2, #4
 800f21a:	492e      	ldr	r1, [pc, #184]	@ (800f2d4 <mg_connect+0x134>)
 800f21c:	68b8      	ldr	r0, [r7, #8]
 800f21e:	f018 fa68 	bl	80276f2 <strncmp>
 800f222:	4603      	mov	r3, r0
 800f224:	2b00      	cmp	r3, #0
 800f226:	bf0c      	ite	eq
 800f228:	2301      	moveq	r3, #1
 800f22a:	2300      	movne	r3, #0
 800f22c:	b2d9      	uxtb	r1, r3
 800f22e:	697a      	ldr	r2, [r7, #20]
 800f230:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 800f234:	f361 0300 	bfi	r3, r1, #0, #1
 800f238:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
    c->fd = (void *) (size_t) MG_INVALID_SOCKET;
 800f23c:	697b      	ldr	r3, [r7, #20]
 800f23e:	f04f 32ff 	mov.w	r2, #4294967295
 800f242:	631a      	str	r2, [r3, #48]	@ 0x30
    c->fn = fn;
 800f244:	697b      	ldr	r3, [r7, #20]
 800f246:	687a      	ldr	r2, [r7, #4]
 800f248:	679a      	str	r2, [r3, #120]	@ 0x78
    c->is_client = true;
 800f24a:	697a      	ldr	r2, [r7, #20]
 800f24c:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 800f250:	f043 0302 	orr.w	r3, r3, #2
 800f254:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
    c->fn_data = fn_data;
 800f258:	697b      	ldr	r3, [r7, #20]
 800f25a:	683a      	ldr	r2, [r7, #0]
 800f25c:	67da      	str	r2, [r3, #124]	@ 0x7c
    c->is_tls = (mg_url_is_ssl(url) != 0);
 800f25e:	68b8      	ldr	r0, [r7, #8]
 800f260:	f012 fb7a 	bl	8021958 <mg_url_is_ssl>
 800f264:	4603      	mov	r3, r0
 800f266:	2b00      	cmp	r3, #0
 800f268:	bf14      	ite	ne
 800f26a:	2301      	movne	r3, #1
 800f26c:	2300      	moveq	r3, #0
 800f26e:	b2d9      	uxtb	r1, r3
 800f270:	697a      	ldr	r2, [r7, #20]
 800f272:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 800f276:	f361 1386 	bfi	r3, r1, #6, #1
 800f27a:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
    mg_call(c, MG_EV_OPEN, (void *) url);
 800f27e:	68ba      	ldr	r2, [r7, #8]
 800f280:	2101      	movs	r1, #1
 800f282:	6978      	ldr	r0, [r7, #20]
 800f284:	f7f9 fc76 	bl	8008b74 <mg_call>
    MG_DEBUG(("%lu %ld %s", c->id, c->fd, url));
 800f288:	4b0d      	ldr	r3, [pc, #52]	@ (800f2c0 <mg_connect+0x120>)
 800f28a:	681b      	ldr	r3, [r3, #0]
 800f28c:	2b02      	cmp	r3, #2
 800f28e:	dd0e      	ble.n	800f2ae <mg_connect+0x10e>
 800f290:	4b0c      	ldr	r3, [pc, #48]	@ (800f2c4 <mg_connect+0x124>)
 800f292:	f640 72d7 	movw	r2, #4055	@ 0xfd7
 800f296:	490c      	ldr	r1, [pc, #48]	@ (800f2c8 <mg_connect+0x128>)
 800f298:	2003      	movs	r0, #3
 800f29a:	f7ff fb03 	bl	800e8a4 <mg_log_prefix>
 800f29e:	697b      	ldr	r3, [r7, #20]
 800f2a0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800f2a2:	697b      	ldr	r3, [r7, #20]
 800f2a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f2a6:	68bb      	ldr	r3, [r7, #8]
 800f2a8:	480b      	ldr	r0, [pc, #44]	@ (800f2d8 <mg_connect+0x138>)
 800f2aa:	f7ff fb4b 	bl	800e944 <mg_log>
    mg_resolve(c, url);
 800f2ae:	68b9      	ldr	r1, [r7, #8]
 800f2b0:	6978      	ldr	r0, [r7, #20]
 800f2b2:	f7f9 fc1b 	bl	8008aec <mg_resolve>
  }
  return c;
 800f2b6:	697b      	ldr	r3, [r7, #20]
}
 800f2b8:	4618      	mov	r0, r3
 800f2ba:	3718      	adds	r7, #24
 800f2bc:	46bd      	mov	sp, r7
 800f2be:	bd80      	pop	{r7, pc}
 800f2c0:	24000258 	.word	0x24000258
 800f2c4:	0802d880 	.word	0x0802d880
 800f2c8:	08029c3c 	.word	0x08029c3c
 800f2cc:	0802abec 	.word	0x0802abec
 800f2d0:	0802abf8 	.word	0x0802abf8
 800f2d4:	0802abfc 	.word	0x0802abfc
 800f2d8:	08029dec 	.word	0x08029dec

0800f2dc <mg_listen>:

struct mg_connection *mg_listen(struct mg_mgr *mgr, const char *url,
                                mg_event_handler_t fn, void *fn_data) {
 800f2dc:	b580      	push	{r7, lr}
 800f2de:	b086      	sub	sp, #24
 800f2e0:	af00      	add	r7, sp, #0
 800f2e2:	60f8      	str	r0, [r7, #12]
 800f2e4:	60b9      	str	r1, [r7, #8]
 800f2e6:	607a      	str	r2, [r7, #4]
 800f2e8:	603b      	str	r3, [r7, #0]
  struct mg_connection *c = NULL;
 800f2ea:	2300      	movs	r3, #0
 800f2ec:	617b      	str	r3, [r7, #20]
  if ((c = mg_alloc_conn(mgr)) == NULL) {
 800f2ee:	68f8      	ldr	r0, [r7, #12]
 800f2f0:	f7ff fec1 	bl	800f076 <mg_alloc_conn>
 800f2f4:	6178      	str	r0, [r7, #20]
 800f2f6:	697b      	ldr	r3, [r7, #20]
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d10f      	bne.n	800f31c <mg_listen+0x40>
    MG_ERROR(("OOM %s", url));
 800f2fc:	4b43      	ldr	r3, [pc, #268]	@ (800f40c <mg_listen+0x130>)
 800f2fe:	681b      	ldr	r3, [r3, #0]
 800f300:	2b00      	cmp	r3, #0
 800f302:	dd7d      	ble.n	800f400 <mg_listen+0x124>
 800f304:	4b42      	ldr	r3, [pc, #264]	@ (800f410 <mg_listen+0x134>)
 800f306:	f640 72e1 	movw	r2, #4065	@ 0xfe1
 800f30a:	4942      	ldr	r1, [pc, #264]	@ (800f414 <mg_listen+0x138>)
 800f30c:	2001      	movs	r0, #1
 800f30e:	f7ff fac9 	bl	800e8a4 <mg_log_prefix>
 800f312:	68b9      	ldr	r1, [r7, #8]
 800f314:	4840      	ldr	r0, [pc, #256]	@ (800f418 <mg_listen+0x13c>)
 800f316:	f7ff fb15 	bl	800e944 <mg_log>
 800f31a:	e071      	b.n	800f400 <mg_listen+0x124>
  } else if (!mg_open_listener(c, url)) {
 800f31c:	68b9      	ldr	r1, [r7, #8]
 800f31e:	6978      	ldr	r0, [r7, #20]
 800f320:	f003 fb06 	bl	8012930 <mg_open_listener>
 800f324:	4603      	mov	r3, r0
 800f326:	f083 0301 	eor.w	r3, r3, #1
 800f32a:	b2db      	uxtb	r3, r3
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	d019      	beq.n	800f364 <mg_listen+0x88>
    MG_ERROR(("Failed: %s, errno %d", url, errno));
 800f330:	4b36      	ldr	r3, [pc, #216]	@ (800f40c <mg_listen+0x130>)
 800f332:	681b      	ldr	r3, [r3, #0]
 800f334:	2b00      	cmp	r3, #0
 800f336:	dd0f      	ble.n	800f358 <mg_listen+0x7c>
 800f338:	4b35      	ldr	r3, [pc, #212]	@ (800f410 <mg_listen+0x134>)
 800f33a:	f640 72e3 	movw	r2, #4067	@ 0xfe3
 800f33e:	4935      	ldr	r1, [pc, #212]	@ (800f414 <mg_listen+0x138>)
 800f340:	2001      	movs	r0, #1
 800f342:	f7ff faaf 	bl	800e8a4 <mg_log_prefix>
 800f346:	f018 fac3 	bl	80278d0 <__errno>
 800f34a:	4603      	mov	r3, r0
 800f34c:	681b      	ldr	r3, [r3, #0]
 800f34e:	461a      	mov	r2, r3
 800f350:	68b9      	ldr	r1, [r7, #8]
 800f352:	4832      	ldr	r0, [pc, #200]	@ (800f41c <mg_listen+0x140>)
 800f354:	f7ff faf6 	bl	800e944 <mg_log>
    MG_PROF_FREE(c);
    free(c);
 800f358:	6978      	ldr	r0, [r7, #20]
 800f35a:	f016 fb2b 	bl	80259b4 <free>
    c = NULL;
 800f35e:	2300      	movs	r3, #0
 800f360:	617b      	str	r3, [r7, #20]
 800f362:	e04d      	b.n	800f400 <mg_listen+0x124>
  } else {
    c->is_listening = 1;
 800f364:	697a      	ldr	r2, [r7, #20]
 800f366:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 800f36a:	f043 0301 	orr.w	r3, r3, #1
 800f36e:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
    c->is_udp = strncmp(url, "udp:", 4) == 0;
 800f372:	2204      	movs	r2, #4
 800f374:	492a      	ldr	r1, [pc, #168]	@ (800f420 <mg_listen+0x144>)
 800f376:	68b8      	ldr	r0, [r7, #8]
 800f378:	f018 f9bb 	bl	80276f2 <strncmp>
 800f37c:	4603      	mov	r3, r0
 800f37e:	2b00      	cmp	r3, #0
 800f380:	bf0c      	ite	eq
 800f382:	2301      	moveq	r3, #1
 800f384:	2300      	movne	r3, #0
 800f386:	b2d9      	uxtb	r1, r3
 800f388:	697a      	ldr	r2, [r7, #20]
 800f38a:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 800f38e:	f361 0300 	bfi	r3, r1, #0, #1
 800f392:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
    LIST_ADD_HEAD(struct mg_connection, &mgr->conns, c);
 800f396:	68fb      	ldr	r3, [r7, #12]
 800f398:	681a      	ldr	r2, [r3, #0]
 800f39a:	697b      	ldr	r3, [r7, #20]
 800f39c:	601a      	str	r2, [r3, #0]
 800f39e:	68fb      	ldr	r3, [r7, #12]
 800f3a0:	697a      	ldr	r2, [r7, #20]
 800f3a2:	601a      	str	r2, [r3, #0]
    c->fn = fn;
 800f3a4:	697b      	ldr	r3, [r7, #20]
 800f3a6:	687a      	ldr	r2, [r7, #4]
 800f3a8:	679a      	str	r2, [r3, #120]	@ 0x78
    c->fn_data = fn_data;
 800f3aa:	697b      	ldr	r3, [r7, #20]
 800f3ac:	683a      	ldr	r2, [r7, #0]
 800f3ae:	67da      	str	r2, [r3, #124]	@ 0x7c
    c->is_tls = (mg_url_is_ssl(url) != 0);
 800f3b0:	68b8      	ldr	r0, [r7, #8]
 800f3b2:	f012 fad1 	bl	8021958 <mg_url_is_ssl>
 800f3b6:	4603      	mov	r3, r0
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	bf14      	ite	ne
 800f3bc:	2301      	movne	r3, #1
 800f3be:	2300      	moveq	r3, #0
 800f3c0:	b2d9      	uxtb	r1, r3
 800f3c2:	697a      	ldr	r2, [r7, #20]
 800f3c4:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 800f3c8:	f361 1386 	bfi	r3, r1, #6, #1
 800f3cc:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
    mg_call(c, MG_EV_OPEN, NULL);
 800f3d0:	2200      	movs	r2, #0
 800f3d2:	2101      	movs	r1, #1
 800f3d4:	6978      	ldr	r0, [r7, #20]
 800f3d6:	f7f9 fbcd 	bl	8008b74 <mg_call>
    MG_DEBUG(("%lu %ld %s", c->id, c->fd, url));
 800f3da:	4b0c      	ldr	r3, [pc, #48]	@ (800f40c <mg_listen+0x130>)
 800f3dc:	681b      	ldr	r3, [r3, #0]
 800f3de:	2b02      	cmp	r3, #2
 800f3e0:	dd0e      	ble.n	800f400 <mg_listen+0x124>
 800f3e2:	4b0b      	ldr	r3, [pc, #44]	@ (800f410 <mg_listen+0x134>)
 800f3e4:	f640 72ef 	movw	r2, #4079	@ 0xfef
 800f3e8:	490a      	ldr	r1, [pc, #40]	@ (800f414 <mg_listen+0x138>)
 800f3ea:	2003      	movs	r0, #3
 800f3ec:	f7ff fa5a 	bl	800e8a4 <mg_log_prefix>
 800f3f0:	697b      	ldr	r3, [r7, #20]
 800f3f2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800f3f4:	697b      	ldr	r3, [r7, #20]
 800f3f6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f3f8:	68bb      	ldr	r3, [r7, #8]
 800f3fa:	480a      	ldr	r0, [pc, #40]	@ (800f424 <mg_listen+0x148>)
 800f3fc:	f7ff faa2 	bl	800e944 <mg_log>
  }
  return c;
 800f400:	697b      	ldr	r3, [r7, #20]
}
 800f402:	4618      	mov	r0, r3
 800f404:	3718      	adds	r7, #24
 800f406:	46bd      	mov	sp, r7
 800f408:	bd80      	pop	{r7, pc}
 800f40a:	bf00      	nop
 800f40c:	24000258 	.word	0x24000258
 800f410:	0802d88c 	.word	0x0802d88c
 800f414:	08029c3c 	.word	0x08029c3c
 800f418:	0802ac04 	.word	0x0802ac04
 800f41c:	0802ac0c 	.word	0x0802ac0c
 800f420:	0802abfc 	.word	0x0802abfc
 800f424:	08029dec 	.word	0x08029dec

0800f428 <mg_timer_add>:
  }
  return c;
}

struct mg_timer *mg_timer_add(struct mg_mgr *mgr, uint64_t milliseconds,
                              unsigned flags, void (*fn)(void *), void *arg) {
 800f428:	b580      	push	{r7, lr}
 800f42a:	b08a      	sub	sp, #40	@ 0x28
 800f42c:	af04      	add	r7, sp, #16
 800f42e:	60f8      	str	r0, [r7, #12]
 800f430:	e9c7 2300 	strd	r2, r3, [r7]
  struct mg_timer *t = (struct mg_timer *) calloc(1, sizeof(*t));
 800f434:	2120      	movs	r1, #32
 800f436:	2001      	movs	r0, #1
 800f438:	f016 fa98 	bl	802596c <calloc>
 800f43c:	4603      	mov	r3, r0
 800f43e:	617b      	str	r3, [r7, #20]
  if (t != NULL) {
 800f440:	697b      	ldr	r3, [r7, #20]
 800f442:	2b00      	cmp	r3, #0
 800f444:	d011      	beq.n	800f46a <mg_timer_add+0x42>
    flags |= MG_TIMER_AUTODELETE;  // We have calloc-ed it, so autodelete
 800f446:	6a3b      	ldr	r3, [r7, #32]
 800f448:	f043 0308 	orr.w	r3, r3, #8
 800f44c:	623b      	str	r3, [r7, #32]
    mg_timer_init(&mgr->timers, t, milliseconds, flags, fn, arg);
 800f44e:	68fb      	ldr	r3, [r7, #12]
 800f450:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800f454:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f456:	9302      	str	r3, [sp, #8]
 800f458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f45a:	9301      	str	r3, [sp, #4]
 800f45c:	6a3b      	ldr	r3, [r7, #32]
 800f45e:	9300      	str	r3, [sp, #0]
 800f460:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f464:	6979      	ldr	r1, [r7, #20]
 800f466:	f007 feab 	bl	80171c0 <mg_timer_init>
  }
  return t;
 800f46a:	697b      	ldr	r3, [r7, #20]
}
 800f46c:	4618      	mov	r0, r3
 800f46e:	3718      	adds	r7, #24
 800f470:	46bd      	mov	sp, r7
 800f472:	bd80      	pop	{r7, pc}

0800f474 <mg_mgr_init>:
#if MG_ENABLE_TCPIP
  if (mgr->ifp) mg_tcpip_free(mgr->ifp);
#endif
}

void mg_mgr_init(struct mg_mgr *mgr) {
 800f474:	b580      	push	{r7, lr}
 800f476:	b082      	sub	sp, #8
 800f478:	af00      	add	r7, sp, #0
 800f47a:	6078      	str	r0, [r7, #4]
  memset(mgr, 0, sizeof(*mgr));
 800f47c:	2244      	movs	r2, #68	@ 0x44
 800f47e:	2100      	movs	r1, #0
 800f480:	6878      	ldr	r0, [r7, #4]
 800f482:	f018 f921 	bl	80276c8 <memset>
#if MG_ENABLE_EPOLL
  if ((mgr->epoll_fd = epoll_create1(EPOLL_CLOEXEC)) < 0)
    MG_ERROR(("epoll_create1 errno %d", errno));
#else
  mgr->epoll_fd = -1;
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	f04f 32ff 	mov.w	r2, #4294967295
 800f48c:	635a      	str	r2, [r3, #52]	@ 0x34
#elif defined(__unix) || defined(__unix__) || defined(__APPLE__)
  // Ignore SIGPIPE signal, so if client cancels the request, it
  // won't kill the whole process.
  signal(SIGPIPE, SIG_IGN);
#elif MG_ENABLE_TCPIP_DRIVER_INIT && defined(MG_TCPIP_DRIVER_INIT)
  MG_TCPIP_DRIVER_INIT(mgr);
 800f48e:	4b34      	ldr	r3, [pc, #208]	@ (800f560 <mg_mgr_init+0xec>)
 800f490:	2204      	movs	r2, #4
 800f492:	601a      	str	r2, [r3, #0]
 800f494:	4b32      	ldr	r3, [pc, #200]	@ (800f560 <mg_mgr_init+0xec>)
 800f496:	2200      	movs	r2, #0
 800f498:	711a      	strb	r2, [r3, #4]
 800f49a:	4b31      	ldr	r3, [pc, #196]	@ (800f560 <mg_mgr_init+0xec>)
 800f49c:	2202      	movs	r2, #2
 800f49e:	715a      	strb	r2, [r3, #5]
 800f4a0:	4830      	ldr	r0, [pc, #192]	@ (800f564 <mg_mgr_init+0xf0>)
 800f4a2:	f012 fcb0 	bl	8021e06 <mg_ntohl>
 800f4a6:	4603      	mov	r3, r0
 800f4a8:	4a2f      	ldr	r2, [pc, #188]	@ (800f568 <mg_mgr_init+0xf4>)
 800f4aa:	6093      	str	r3, [r2, #8]
 800f4ac:	482f      	ldr	r0, [pc, #188]	@ (800f56c <mg_mgr_init+0xf8>)
 800f4ae:	f012 fcaa 	bl	8021e06 <mg_ntohl>
 800f4b2:	4603      	mov	r3, r0
 800f4b4:	4a2c      	ldr	r2, [pc, #176]	@ (800f568 <mg_mgr_init+0xf4>)
 800f4b6:	60d3      	str	r3, [r2, #12]
 800f4b8:	482d      	ldr	r0, [pc, #180]	@ (800f570 <mg_mgr_init+0xfc>)
 800f4ba:	f012 fca4 	bl	8021e06 <mg_ntohl>
 800f4be:	4603      	mov	r3, r0
 800f4c0:	4a29      	ldr	r2, [pc, #164]	@ (800f568 <mg_mgr_init+0xf4>)
 800f4c2:	6113      	str	r3, [r2, #16]
 800f4c4:	4b28      	ldr	r3, [pc, #160]	@ (800f568 <mg_mgr_init+0xf4>)
 800f4c6:	4a2b      	ldr	r2, [pc, #172]	@ (800f574 <mg_mgr_init+0x100>)
 800f4c8:	625a      	str	r2, [r3, #36]	@ 0x24
 800f4ca:	4b27      	ldr	r3, [pc, #156]	@ (800f568 <mg_mgr_init+0xf4>)
 800f4cc:	4a24      	ldr	r2, [pc, #144]	@ (800f560 <mg_mgr_init+0xec>)
 800f4ce:	629a      	str	r2, [r3, #40]	@ 0x28
 800f4d0:	4b25      	ldr	r3, [pc, #148]	@ (800f568 <mg_mgr_init+0xf4>)
 800f4d2:	2202      	movs	r2, #2
 800f4d4:	701a      	strb	r2, [r3, #0]
 800f4d6:	4b28      	ldr	r3, [pc, #160]	@ (800f578 <mg_mgr_init+0x104>)
 800f4d8:	681b      	ldr	r3, [r3, #0]
 800f4da:	b2da      	uxtb	r2, r3
 800f4dc:	4b22      	ldr	r3, [pc, #136]	@ (800f568 <mg_mgr_init+0xf4>)
 800f4de:	705a      	strb	r2, [r3, #1]
 800f4e0:	4b25      	ldr	r3, [pc, #148]	@ (800f578 <mg_mgr_init+0x104>)
 800f4e2:	681b      	ldr	r3, [r3, #0]
 800f4e4:	0a9b      	lsrs	r3, r3, #10
 800f4e6:	b2da      	uxtb	r2, r3
 800f4e8:	4b1f      	ldr	r3, [pc, #124]	@ (800f568 <mg_mgr_init+0xf4>)
 800f4ea:	709a      	strb	r2, [r3, #2]
 800f4ec:	4b22      	ldr	r3, [pc, #136]	@ (800f578 <mg_mgr_init+0x104>)
 800f4ee:	681b      	ldr	r3, [r3, #0]
 800f4f0:	0cdb      	lsrs	r3, r3, #19
 800f4f2:	b2da      	uxtb	r2, r3
 800f4f4:	4b1c      	ldr	r3, [pc, #112]	@ (800f568 <mg_mgr_init+0xf4>)
 800f4f6:	70da      	strb	r2, [r3, #3]
 800f4f8:	4b20      	ldr	r3, [pc, #128]	@ (800f57c <mg_mgr_init+0x108>)
 800f4fa:	681b      	ldr	r3, [r3, #0]
 800f4fc:	b2da      	uxtb	r2, r3
 800f4fe:	4b1a      	ldr	r3, [pc, #104]	@ (800f568 <mg_mgr_init+0xf4>)
 800f500:	711a      	strb	r2, [r3, #4]
 800f502:	4b1f      	ldr	r3, [pc, #124]	@ (800f580 <mg_mgr_init+0x10c>)
 800f504:	681b      	ldr	r3, [r3, #0]
 800f506:	b2da      	uxtb	r2, r3
 800f508:	4b17      	ldr	r3, [pc, #92]	@ (800f568 <mg_mgr_init+0xf4>)
 800f50a:	715a      	strb	r2, [r3, #5]
 800f50c:	4916      	ldr	r1, [pc, #88]	@ (800f568 <mg_mgr_init+0xf4>)
 800f50e:	6878      	ldr	r0, [r7, #4]
 800f510:	f002 ffb4 	bl	801247c <mg_tcpip_init>
 800f514:	4b1b      	ldr	r3, [pc, #108]	@ (800f584 <mg_mgr_init+0x110>)
 800f516:	681b      	ldr	r3, [r3, #0]
 800f518:	2b01      	cmp	r3, #1
 800f51a:	dd0b      	ble.n	800f534 <mg_mgr_init+0xc0>
 800f51c:	4b1a      	ldr	r3, [pc, #104]	@ (800f588 <mg_mgr_init+0x114>)
 800f51e:	f241 023b 	movw	r2, #4155	@ 0x103b
 800f522:	491a      	ldr	r1, [pc, #104]	@ (800f58c <mg_mgr_init+0x118>)
 800f524:	2002      	movs	r0, #2
 800f526:	f7ff f9bd 	bl	800e8a4 <mg_log_prefix>
 800f52a:	4a0f      	ldr	r2, [pc, #60]	@ (800f568 <mg_mgr_init+0xf4>)
 800f52c:	4918      	ldr	r1, [pc, #96]	@ (800f590 <mg_mgr_init+0x11c>)
 800f52e:	4819      	ldr	r0, [pc, #100]	@ (800f594 <mg_mgr_init+0x120>)
 800f530:	f7ff fa08 	bl	800e944 <mg_log>
#endif
  mgr->pipe = MG_INVALID_SOCKET;
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	f04f 32ff 	mov.w	r2, #4294967295
 800f53a:	641a      	str	r2, [r3, #64]	@ 0x40
  mgr->dnstimeout = 3000;
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800f542:	615a      	str	r2, [r3, #20]
  mgr->dns4.url = "udp://8.8.8.8:53";
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	4a14      	ldr	r2, [pc, #80]	@ (800f598 <mg_mgr_init+0x124>)
 800f548:	605a      	str	r2, [r3, #4]
  mgr->dns6.url = "udp://[2001:4860:4860::8888]:53";
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	4a13      	ldr	r2, [pc, #76]	@ (800f59c <mg_mgr_init+0x128>)
 800f54e:	60da      	str	r2, [r3, #12]
  mg_tls_ctx_init(mgr);
 800f550:	6878      	ldr	r0, [r7, #4]
 800f552:	f00c f81e 	bl	801b592 <mg_tls_ctx_init>
}
 800f556:	bf00      	nop
 800f558:	3708      	adds	r7, #8
 800f55a:	46bd      	mov	sp, r7
 800f55c:	bd80      	pop	{r7, pc}
 800f55e:	bf00      	nop
 800f560:	24005450 	.word	0x24005450
 800f564:	c0a80119 	.word	0xc0a80119
 800f568:	24005458 	.word	0x24005458
 800f56c:	ffff0000 	.word	0xffff0000
 800f570:	c0a80101 	.word	0xc0a80101
 800f574:	240002a0 	.word	0x240002a0
 800f578:	1ff1e800 	.word	0x1ff1e800
 800f57c:	1ff1e804 	.word	0x1ff1e804
 800f580:	1ff1e808 	.word	0x1ff1e808
 800f584:	24000258 	.word	0x24000258
 800f588:	0802d898 	.word	0x0802d898
 800f58c:	08029c3c 	.word	0x08029c3c
 800f590:	08013399 	.word	0x08013399
 800f594:	0802ac3c 	.word	0x0802ac3c
 800f598:	0802ac54 	.word	0x0802ac54
 800f59c:	0802ac68 	.word	0x0802ac68

0800f5a0 <mg_tcpip_call>:
  struct tcp *tcp;
  struct udp *udp;
  struct dhcp *dhcp;
};

static void mg_tcpip_call(struct mg_tcpip_if *ifp, int ev, void *ev_data) {
 800f5a0:	b580      	push	{r7, lr}
 800f5a2:	b084      	sub	sp, #16
 800f5a4:	af00      	add	r7, sp, #0
 800f5a6:	60f8      	str	r0, [r7, #12]
 800f5a8:	60b9      	str	r1, [r7, #8]
 800f5aa:	607a      	str	r2, [r7, #4]
  if (ifp->fn != NULL) ifp->fn(ifp, ev, ev_data);
 800f5ac:	68fb      	ldr	r3, [r7, #12]
 800f5ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	d005      	beq.n	800f5c0 <mg_tcpip_call+0x20>
 800f5b4:	68fb      	ldr	r3, [r7, #12]
 800f5b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f5b8:	687a      	ldr	r2, [r7, #4]
 800f5ba:	68b9      	ldr	r1, [r7, #8]
 800f5bc:	68f8      	ldr	r0, [r7, #12]
 800f5be:	4798      	blx	r3
}
 800f5c0:	bf00      	nop
 800f5c2:	3710      	adds	r7, #16
 800f5c4:	46bd      	mov	sp, r7
 800f5c6:	bd80      	pop	{r7, pc}

0800f5c8 <mkpay>:

static void send_syn(struct mg_connection *c);

static void mkpay(struct pkt *pkt, void *p) {
 800f5c8:	b590      	push	{r4, r7, lr}
 800f5ca:	b085      	sub	sp, #20
 800f5cc:	af00      	add	r7, sp, #0
 800f5ce:	60f8      	str	r0, [r7, #12]
 800f5d0:	60b9      	str	r1, [r7, #8]
  pkt->pay =
      mg_str_n((char *) p, (size_t) (&pkt->raw.buf[pkt->raw.len] - (char *) p));
 800f5d2:	68fb      	ldr	r3, [r7, #12]
 800f5d4:	681a      	ldr	r2, [r3, #0]
 800f5d6:	68fb      	ldr	r3, [r7, #12]
 800f5d8:	685b      	ldr	r3, [r3, #4]
 800f5da:	441a      	add	r2, r3
 800f5dc:	68bb      	ldr	r3, [r7, #8]
 800f5de:	1ad3      	subs	r3, r2, r3
 800f5e0:	461a      	mov	r2, r3
 800f5e2:	68fc      	ldr	r4, [r7, #12]
 800f5e4:	463b      	mov	r3, r7
 800f5e6:	68b9      	ldr	r1, [r7, #8]
 800f5e8:	4618      	mov	r0, r3
 800f5ea:	f007 f978 	bl	80168de <mg_str_n>
 800f5ee:	f104 0308 	add.w	r3, r4, #8
 800f5f2:	463a      	mov	r2, r7
 800f5f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f5f8:	e883 0003 	stmia.w	r3, {r0, r1}
}
 800f5fc:	bf00      	nop
 800f5fe:	3714      	adds	r7, #20
 800f600:	46bd      	mov	sp, r7
 800f602:	bd90      	pop	{r4, r7, pc}

0800f604 <csumup>:

static uint32_t csumup(uint32_t sum, const void *buf, size_t len) {
 800f604:	b480      	push	{r7}
 800f606:	b087      	sub	sp, #28
 800f608:	af00      	add	r7, sp, #0
 800f60a:	60f8      	str	r0, [r7, #12]
 800f60c:	60b9      	str	r1, [r7, #8]
 800f60e:	607a      	str	r2, [r7, #4]
  size_t i;
  const uint8_t *p = (const uint8_t *) buf;
 800f610:	68bb      	ldr	r3, [r7, #8]
 800f612:	613b      	str	r3, [r7, #16]
  for (i = 0; i < len; i++) sum += i & 1 ? p[i] : ((uint32_t) p[i]) << 8;
 800f614:	2300      	movs	r3, #0
 800f616:	617b      	str	r3, [r7, #20]
 800f618:	e014      	b.n	800f644 <csumup+0x40>
 800f61a:	697b      	ldr	r3, [r7, #20]
 800f61c:	f003 0301 	and.w	r3, r3, #1
 800f620:	2b00      	cmp	r3, #0
 800f622:	d004      	beq.n	800f62e <csumup+0x2a>
 800f624:	693a      	ldr	r2, [r7, #16]
 800f626:	697b      	ldr	r3, [r7, #20]
 800f628:	4413      	add	r3, r2
 800f62a:	781b      	ldrb	r3, [r3, #0]
 800f62c:	e004      	b.n	800f638 <csumup+0x34>
 800f62e:	693a      	ldr	r2, [r7, #16]
 800f630:	697b      	ldr	r3, [r7, #20]
 800f632:	4413      	add	r3, r2
 800f634:	781b      	ldrb	r3, [r3, #0]
 800f636:	021b      	lsls	r3, r3, #8
 800f638:	68fa      	ldr	r2, [r7, #12]
 800f63a:	4413      	add	r3, r2
 800f63c:	60fb      	str	r3, [r7, #12]
 800f63e:	697b      	ldr	r3, [r7, #20]
 800f640:	3301      	adds	r3, #1
 800f642:	617b      	str	r3, [r7, #20]
 800f644:	697a      	ldr	r2, [r7, #20]
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	429a      	cmp	r2, r3
 800f64a:	d3e6      	bcc.n	800f61a <csumup+0x16>
  return sum;
 800f64c:	68fb      	ldr	r3, [r7, #12]
}
 800f64e:	4618      	mov	r0, r3
 800f650:	371c      	adds	r7, #28
 800f652:	46bd      	mov	sp, r7
 800f654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f658:	4770      	bx	lr

0800f65a <csumfin>:

static uint16_t csumfin(uint32_t sum) {
 800f65a:	b580      	push	{r7, lr}
 800f65c:	b082      	sub	sp, #8
 800f65e:	af00      	add	r7, sp, #0
 800f660:	6078      	str	r0, [r7, #4]
  while (sum >> 16) sum = (sum & 0xffff) + (sum >> 16);
 800f662:	e005      	b.n	800f670 <csumfin+0x16>
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	b29a      	uxth	r2, r3
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	0c1b      	lsrs	r3, r3, #16
 800f66c:	4413      	add	r3, r2
 800f66e:	607b      	str	r3, [r7, #4]
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	0c1b      	lsrs	r3, r3, #16
 800f674:	2b00      	cmp	r3, #0
 800f676:	d1f5      	bne.n	800f664 <csumfin+0xa>
  return mg_htons(~sum & 0xffff);
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	b29b      	uxth	r3, r3
 800f67c:	43db      	mvns	r3, r3
 800f67e:	b29b      	uxth	r3, r3
 800f680:	4618      	mov	r0, r3
 800f682:	f012 fba9 	bl	8021dd8 <mg_ntohs>
 800f686:	4603      	mov	r3, r0
}
 800f688:	4618      	mov	r0, r3
 800f68a:	3708      	adds	r7, #8
 800f68c:	46bd      	mov	sp, r7
 800f68e:	bd80      	pop	{r7, pc}

0800f690 <ipcsum>:

static uint16_t ipcsum(const void *buf, size_t len) {
 800f690:	b580      	push	{r7, lr}
 800f692:	b084      	sub	sp, #16
 800f694:	af00      	add	r7, sp, #0
 800f696:	6078      	str	r0, [r7, #4]
 800f698:	6039      	str	r1, [r7, #0]
  uint32_t sum = csumup(0, buf, len);
 800f69a:	683a      	ldr	r2, [r7, #0]
 800f69c:	6879      	ldr	r1, [r7, #4]
 800f69e:	2000      	movs	r0, #0
 800f6a0:	f7ff ffb0 	bl	800f604 <csumup>
 800f6a4:	60f8      	str	r0, [r7, #12]
  return csumfin(sum);
 800f6a6:	68f8      	ldr	r0, [r7, #12]
 800f6a8:	f7ff ffd7 	bl	800f65a <csumfin>
 800f6ac:	4603      	mov	r3, r0
}
 800f6ae:	4618      	mov	r0, r3
 800f6b0:	3710      	adds	r7, #16
 800f6b2:	46bd      	mov	sp, r7
 800f6b4:	bd80      	pop	{r7, pc}
	...

0800f6b8 <settmout>:

static void settmout(struct mg_connection *c, uint8_t type) {
 800f6b8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800f6bc:	b088      	sub	sp, #32
 800f6be:	af02      	add	r7, sp, #8
 800f6c0:	6078      	str	r0, [r7, #4]
 800f6c2:	460b      	mov	r3, r1
 800f6c4:	70fb      	strb	r3, [r7, #3]
  struct mg_tcpip_if *ifp = c->mgr->ifp;
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	685b      	ldr	r3, [r3, #4]
 800f6ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f6cc:	617b      	str	r3, [r7, #20]
  struct connstate *s = (struct connstate *) (c + 1);
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	33b0      	adds	r3, #176	@ 0xb0
 800f6d2:	613b      	str	r3, [r7, #16]
  unsigned n = type == MIP_TTYPE_ACK   ? MIP_TCP_ACK_MS
               : type == MIP_TTYPE_ARP ? MIP_ARP_RESP_MS
 800f6d4:	78fb      	ldrb	r3, [r7, #3]
 800f6d6:	2b01      	cmp	r3, #1
 800f6d8:	d013      	beq.n	800f702 <settmout+0x4a>
 800f6da:	78fb      	ldrb	r3, [r7, #3]
 800f6dc:	2b02      	cmp	r3, #2
 800f6de:	d00e      	beq.n	800f6fe <settmout+0x46>
 800f6e0:	78fb      	ldrb	r3, [r7, #3]
 800f6e2:	2b03      	cmp	r3, #3
 800f6e4:	d008      	beq.n	800f6f8 <settmout+0x40>
 800f6e6:	78fb      	ldrb	r3, [r7, #3]
 800f6e8:	2b04      	cmp	r3, #4
 800f6ea:	d102      	bne.n	800f6f2 <settmout+0x3a>
 800f6ec:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f6f0:	e008      	b.n	800f704 <settmout+0x4c>
 800f6f2:	f64a 73c8 	movw	r3, #45000	@ 0xafc8
 800f6f6:	e005      	b.n	800f704 <settmout+0x4c>
 800f6f8:	f643 2398 	movw	r3, #15000	@ 0x3a98
 800f6fc:	e002      	b.n	800f704 <settmout+0x4c>
 800f6fe:	2364      	movs	r3, #100	@ 0x64
 800f700:	e000      	b.n	800f704 <settmout+0x4c>
 800f702:	2396      	movs	r3, #150	@ 0x96
  unsigned n = type == MIP_TTYPE_ACK   ? MIP_TCP_ACK_MS
 800f704:	60fb      	str	r3, [r7, #12]
               : type == MIP_TTYPE_SYN ? MIP_TCP_SYN_MS
               : type == MIP_TTYPE_FIN ? MIP_TCP_FIN_MS
                                       : MIP_TCP_KEEPALIVE_MS;
  if (s->ttype == MIP_TTYPE_FIN) return;  // skip if 3-way closing
 800f706:	693b      	ldr	r3, [r7, #16]
 800f708:	f893 3020 	ldrb.w	r3, [r3, #32]
 800f70c:	2b04      	cmp	r3, #4
 800f70e:	d029      	beq.n	800f764 <settmout+0xac>
  s->timer = ifp->now + n;
 800f710:	697b      	ldr	r3, [r7, #20]
 800f712:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 800f716:	68f9      	ldr	r1, [r7, #12]
 800f718:	2000      	movs	r0, #0
 800f71a:	460c      	mov	r4, r1
 800f71c:	4605      	mov	r5, r0
 800f71e:	eb12 0804 	adds.w	r8, r2, r4
 800f722:	eb43 0905 	adc.w	r9, r3, r5
 800f726:	693b      	ldr	r3, [r7, #16]
 800f728:	e9c3 8902 	strd	r8, r9, [r3, #8]
  s->ttype = type;
 800f72c:	693b      	ldr	r3, [r7, #16]
 800f72e:	78fa      	ldrb	r2, [r7, #3]
 800f730:	f883 2020 	strb.w	r2, [r3, #32]
  MG_VERBOSE(("%lu %d -> %llx", c->id, type, s->timer));
 800f734:	4b0e      	ldr	r3, [pc, #56]	@ (800f770 <settmout+0xb8>)
 800f736:	681b      	ldr	r3, [r3, #0]
 800f738:	2b03      	cmp	r3, #3
 800f73a:	dd14      	ble.n	800f766 <settmout+0xae>
 800f73c:	4b0d      	ldr	r3, [pc, #52]	@ (800f774 <settmout+0xbc>)
 800f73e:	f241 02fd 	movw	r2, #4349	@ 0x10fd
 800f742:	490d      	ldr	r1, [pc, #52]	@ (800f778 <settmout+0xc0>)
 800f744:	2004      	movs	r0, #4
 800f746:	f7ff f8ad 	bl	800e8a4 <mg_log_prefix>
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800f74e:	78f8      	ldrb	r0, [r7, #3]
 800f750:	693b      	ldr	r3, [r7, #16]
 800f752:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800f756:	e9cd 2300 	strd	r2, r3, [sp]
 800f75a:	4602      	mov	r2, r0
 800f75c:	4807      	ldr	r0, [pc, #28]	@ (800f77c <settmout+0xc4>)
 800f75e:	f7ff f8f1 	bl	800e944 <mg_log>
 800f762:	e000      	b.n	800f766 <settmout+0xae>
  if (s->ttype == MIP_TTYPE_FIN) return;  // skip if 3-way closing
 800f764:	bf00      	nop
}
 800f766:	3718      	adds	r7, #24
 800f768:	46bd      	mov	sp, r7
 800f76a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800f76e:	bf00      	nop
 800f770:	24000258 	.word	0x24000258
 800f774:	0802d8a4 	.word	0x0802d8a4
 800f778:	08029c3c 	.word	0x08029c3c
 800f77c:	0802ac88 	.word	0x0802ac88

0800f780 <ether_output>:

static size_t ether_output(struct mg_tcpip_if *ifp, size_t len) {
 800f780:	b580      	push	{r7, lr}
 800f782:	b084      	sub	sp, #16
 800f784:	af00      	add	r7, sp, #0
 800f786:	6078      	str	r0, [r7, #4]
 800f788:	6039      	str	r1, [r7, #0]
  size_t n = ifp->driver->tx(ifp->tx.buf, len, ifp);
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f78e:	685b      	ldr	r3, [r3, #4]
 800f790:	687a      	ldr	r2, [r7, #4]
 800f792:	6950      	ldr	r0, [r2, #20]
 800f794:	687a      	ldr	r2, [r7, #4]
 800f796:	6839      	ldr	r1, [r7, #0]
 800f798:	4798      	blx	r3
 800f79a:	60f8      	str	r0, [r7, #12]
  if (n == len) ifp->nsent++;
 800f79c:	68fa      	ldr	r2, [r7, #12]
 800f79e:	683b      	ldr	r3, [r7, #0]
 800f7a0:	429a      	cmp	r2, r3
 800f7a2:	d104      	bne.n	800f7ae <ether_output+0x2e>
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f7a8:	1c5a      	adds	r2, r3, #1
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	67da      	str	r2, [r3, #124]	@ 0x7c
  return n;
 800f7ae:	68fb      	ldr	r3, [r7, #12]
}
 800f7b0:	4618      	mov	r0, r3
 800f7b2:	3710      	adds	r7, #16
 800f7b4:	46bd      	mov	sp, r7
 800f7b6:	bd80      	pop	{r7, pc}

0800f7b8 <mg_tcpip_arp_request>:

void mg_tcpip_arp_request(struct mg_tcpip_if *ifp, uint32_t ip, uint8_t *mac) {
 800f7b8:	b580      	push	{r7, lr}
 800f7ba:	b086      	sub	sp, #24
 800f7bc:	af00      	add	r7, sp, #0
 800f7be:	60f8      	str	r0, [r7, #12]
 800f7c0:	60b9      	str	r1, [r7, #8]
 800f7c2:	607a      	str	r2, [r7, #4]
  struct eth *eth = (struct eth *) ifp->tx.buf;
 800f7c4:	68fb      	ldr	r3, [r7, #12]
 800f7c6:	695b      	ldr	r3, [r3, #20]
 800f7c8:	617b      	str	r3, [r7, #20]
  struct arp *arp = (struct arp *) (eth + 1);
 800f7ca:	697b      	ldr	r3, [r7, #20]
 800f7cc:	330e      	adds	r3, #14
 800f7ce:	613b      	str	r3, [r7, #16]
  memset(eth->dst, 255, sizeof(eth->dst));
 800f7d0:	697b      	ldr	r3, [r7, #20]
 800f7d2:	2206      	movs	r2, #6
 800f7d4:	21ff      	movs	r1, #255	@ 0xff
 800f7d6:	4618      	mov	r0, r3
 800f7d8:	f017 ff76 	bl	80276c8 <memset>
  memcpy(eth->src, ifp->mac, sizeof(eth->src));
 800f7dc:	697b      	ldr	r3, [r7, #20]
 800f7de:	3306      	adds	r3, #6
 800f7e0:	68f9      	ldr	r1, [r7, #12]
 800f7e2:	2206      	movs	r2, #6
 800f7e4:	4618      	mov	r0, r3
 800f7e6:	f018 f8a8 	bl	802793a <memcpy>
  eth->type = mg_htons(0x806);
 800f7ea:	f640 0006 	movw	r0, #2054	@ 0x806
 800f7ee:	f012 faf3 	bl	8021dd8 <mg_ntohs>
 800f7f2:	4603      	mov	r3, r0
 800f7f4:	461a      	mov	r2, r3
 800f7f6:	697b      	ldr	r3, [r7, #20]
 800f7f8:	819a      	strh	r2, [r3, #12]
  memset(arp, 0, sizeof(*arp));
 800f7fa:	221c      	movs	r2, #28
 800f7fc:	2100      	movs	r1, #0
 800f7fe:	6938      	ldr	r0, [r7, #16]
 800f800:	f017 ff62 	bl	80276c8 <memset>
  arp->fmt = mg_htons(1), arp->pro = mg_htons(0x800), arp->hlen = 6,
 800f804:	2001      	movs	r0, #1
 800f806:	f012 fae7 	bl	8021dd8 <mg_ntohs>
 800f80a:	4603      	mov	r3, r0
 800f80c:	461a      	mov	r2, r3
 800f80e:	693b      	ldr	r3, [r7, #16]
 800f810:	801a      	strh	r2, [r3, #0]
 800f812:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800f816:	f012 fadf 	bl	8021dd8 <mg_ntohs>
 800f81a:	4603      	mov	r3, r0
 800f81c:	461a      	mov	r2, r3
 800f81e:	693b      	ldr	r3, [r7, #16]
 800f820:	805a      	strh	r2, [r3, #2]
 800f822:	693b      	ldr	r3, [r7, #16]
 800f824:	2206      	movs	r2, #6
 800f826:	711a      	strb	r2, [r3, #4]
  arp->plen = 4;
 800f828:	693b      	ldr	r3, [r7, #16]
 800f82a:	2204      	movs	r2, #4
 800f82c:	715a      	strb	r2, [r3, #5]
  arp->op = mg_htons(1), arp->tpa = ip, arp->spa = ifp->ip;
 800f82e:	2001      	movs	r0, #1
 800f830:	f012 fad2 	bl	8021dd8 <mg_ntohs>
 800f834:	4603      	mov	r3, r0
 800f836:	461a      	mov	r2, r3
 800f838:	693b      	ldr	r3, [r7, #16]
 800f83a:	80da      	strh	r2, [r3, #6]
 800f83c:	693b      	ldr	r3, [r7, #16]
 800f83e:	68ba      	ldr	r2, [r7, #8]
 800f840:	619a      	str	r2, [r3, #24]
 800f842:	68fb      	ldr	r3, [r7, #12]
 800f844:	689a      	ldr	r2, [r3, #8]
 800f846:	693b      	ldr	r3, [r7, #16]
 800f848:	f8c3 200e 	str.w	r2, [r3, #14]
  memcpy(arp->sha, ifp->mac, sizeof(arp->sha));
 800f84c:	693b      	ldr	r3, [r7, #16]
 800f84e:	3308      	adds	r3, #8
 800f850:	68f9      	ldr	r1, [r7, #12]
 800f852:	2206      	movs	r2, #6
 800f854:	4618      	mov	r0, r3
 800f856:	f018 f870 	bl	802793a <memcpy>
  if (mac != NULL) memcpy(arp->tha, mac, sizeof(arp->tha));
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	d006      	beq.n	800f86e <mg_tcpip_arp_request+0xb6>
 800f860:	693b      	ldr	r3, [r7, #16]
 800f862:	3312      	adds	r3, #18
 800f864:	2206      	movs	r2, #6
 800f866:	6879      	ldr	r1, [r7, #4]
 800f868:	4618      	mov	r0, r3
 800f86a:	f018 f866 	bl	802793a <memcpy>
  ether_output(ifp, PDIFF(eth, arp + 1));
 800f86e:	693b      	ldr	r3, [r7, #16]
 800f870:	f103 021c 	add.w	r2, r3, #28
 800f874:	697b      	ldr	r3, [r7, #20]
 800f876:	1ad3      	subs	r3, r2, r3
 800f878:	4619      	mov	r1, r3
 800f87a:	68f8      	ldr	r0, [r7, #12]
 800f87c:	f7ff ff80 	bl	800f780 <ether_output>
}
 800f880:	bf00      	nop
 800f882:	3718      	adds	r7, #24
 800f884:	46bd      	mov	sp, r7
 800f886:	bd80      	pop	{r7, pc}

0800f888 <onstatechange>:

static void onstatechange(struct mg_tcpip_if *ifp) {
 800f888:	b580      	push	{r7, lr}
 800f88a:	b082      	sub	sp, #8
 800f88c:	af00      	add	r7, sp, #0
 800f88e:	6078      	str	r0, [r7, #4]
  if (ifp->state == MG_TCPIP_STATE_READY) {
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f896:	2b04      	cmp	r3, #4
 800f898:	d135      	bne.n	800f906 <onstatechange+0x7e>
    MG_INFO(("READY, IP: %M", mg_print_ip4, &ifp->ip));
 800f89a:	4b45      	ldr	r3, [pc, #276]	@ (800f9b0 <onstatechange+0x128>)
 800f89c:	681b      	ldr	r3, [r3, #0]
 800f89e:	2b01      	cmp	r3, #1
 800f8a0:	dd0d      	ble.n	800f8be <onstatechange+0x36>
 800f8a2:	4b44      	ldr	r3, [pc, #272]	@ (800f9b4 <onstatechange+0x12c>)
 800f8a4:	f241 1217 	movw	r2, #4375	@ 0x1117
 800f8a8:	4943      	ldr	r1, [pc, #268]	@ (800f9b8 <onstatechange+0x130>)
 800f8aa:	2002      	movs	r0, #2
 800f8ac:	f7fe fffa 	bl	800e8a4 <mg_log_prefix>
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	3308      	adds	r3, #8
 800f8b4:	461a      	mov	r2, r3
 800f8b6:	4941      	ldr	r1, [pc, #260]	@ (800f9bc <onstatechange+0x134>)
 800f8b8:	4841      	ldr	r0, [pc, #260]	@ (800f9c0 <onstatechange+0x138>)
 800f8ba:	f7ff f843 	bl	800e944 <mg_log>
    MG_INFO(("       GW: %M", mg_print_ip4, &ifp->gw));
 800f8be:	4b3c      	ldr	r3, [pc, #240]	@ (800f9b0 <onstatechange+0x128>)
 800f8c0:	681b      	ldr	r3, [r3, #0]
 800f8c2:	2b01      	cmp	r3, #1
 800f8c4:	dd0d      	ble.n	800f8e2 <onstatechange+0x5a>
 800f8c6:	4b3b      	ldr	r3, [pc, #236]	@ (800f9b4 <onstatechange+0x12c>)
 800f8c8:	f241 1218 	movw	r2, #4376	@ 0x1118
 800f8cc:	493a      	ldr	r1, [pc, #232]	@ (800f9b8 <onstatechange+0x130>)
 800f8ce:	2002      	movs	r0, #2
 800f8d0:	f7fe ffe8 	bl	800e8a4 <mg_log_prefix>
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	3310      	adds	r3, #16
 800f8d8:	461a      	mov	r2, r3
 800f8da:	4938      	ldr	r1, [pc, #224]	@ (800f9bc <onstatechange+0x134>)
 800f8dc:	4839      	ldr	r0, [pc, #228]	@ (800f9c4 <onstatechange+0x13c>)
 800f8de:	f7ff f831 	bl	800e944 <mg_log>
    MG_INFO(("      MAC: %M", mg_print_mac, &ifp->mac));
 800f8e2:	4b33      	ldr	r3, [pc, #204]	@ (800f9b0 <onstatechange+0x128>)
 800f8e4:	681b      	ldr	r3, [r3, #0]
 800f8e6:	2b01      	cmp	r3, #1
 800f8e8:	dd57      	ble.n	800f99a <onstatechange+0x112>
 800f8ea:	4b32      	ldr	r3, [pc, #200]	@ (800f9b4 <onstatechange+0x12c>)
 800f8ec:	f241 1219 	movw	r2, #4377	@ 0x1119
 800f8f0:	4931      	ldr	r1, [pc, #196]	@ (800f9b8 <onstatechange+0x130>)
 800f8f2:	2002      	movs	r0, #2
 800f8f4:	f7fe ffd6 	bl	800e8a4 <mg_log_prefix>
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	461a      	mov	r2, r3
 800f8fc:	4932      	ldr	r1, [pc, #200]	@ (800f9c8 <onstatechange+0x140>)
 800f8fe:	4833      	ldr	r0, [pc, #204]	@ (800f9cc <onstatechange+0x144>)
 800f900:	f7ff f820 	bl	800e944 <mg_log>
 800f904:	e049      	b.n	800f99a <onstatechange+0x112>
  } else if (ifp->state == MG_TCPIP_STATE_IP) {
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f90c:	2b03      	cmp	r3, #3
 800f90e:	d115      	bne.n	800f93c <onstatechange+0xb4>
    MG_ERROR(("Got IP"));
 800f910:	4b27      	ldr	r3, [pc, #156]	@ (800f9b0 <onstatechange+0x128>)
 800f912:	681b      	ldr	r3, [r3, #0]
 800f914:	2b00      	cmp	r3, #0
 800f916:	dd09      	ble.n	800f92c <onstatechange+0xa4>
 800f918:	4b26      	ldr	r3, [pc, #152]	@ (800f9b4 <onstatechange+0x12c>)
 800f91a:	f241 121b 	movw	r2, #4379	@ 0x111b
 800f91e:	4926      	ldr	r1, [pc, #152]	@ (800f9b8 <onstatechange+0x130>)
 800f920:	2001      	movs	r0, #1
 800f922:	f7fe ffbf 	bl	800e8a4 <mg_log_prefix>
 800f926:	482a      	ldr	r0, [pc, #168]	@ (800f9d0 <onstatechange+0x148>)
 800f928:	f7ff f80c 	bl	800e944 <mg_log>
    mg_tcpip_arp_request(ifp, ifp->gw, NULL);  // unsolicited GW ARP request
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	691b      	ldr	r3, [r3, #16]
 800f930:	2200      	movs	r2, #0
 800f932:	4619      	mov	r1, r3
 800f934:	6878      	ldr	r0, [r7, #4]
 800f936:	f7ff ff3f 	bl	800f7b8 <mg_tcpip_arp_request>
 800f93a:	e02e      	b.n	800f99a <onstatechange+0x112>
  } else if (ifp->state == MG_TCPIP_STATE_UP) {
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f942:	2b01      	cmp	r3, #1
 800f944:	d116      	bne.n	800f974 <onstatechange+0xec>
    MG_ERROR(("Link up"));
 800f946:	4b1a      	ldr	r3, [pc, #104]	@ (800f9b0 <onstatechange+0x128>)
 800f948:	681b      	ldr	r3, [r3, #0]
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	dd09      	ble.n	800f962 <onstatechange+0xda>
 800f94e:	4b19      	ldr	r3, [pc, #100]	@ (800f9b4 <onstatechange+0x12c>)
 800f950:	f241 121e 	movw	r2, #4382	@ 0x111e
 800f954:	4918      	ldr	r1, [pc, #96]	@ (800f9b8 <onstatechange+0x130>)
 800f956:	2001      	movs	r0, #1
 800f958:	f7fe ffa4 	bl	800e8a4 <mg_log_prefix>
 800f95c:	481d      	ldr	r0, [pc, #116]	@ (800f9d4 <onstatechange+0x14c>)
 800f95e:	f7fe fff1 	bl	800e944 <mg_log>
    srand((unsigned int) mg_millis());
 800f962:	f7f1 f8f5 	bl	8000b50 <mg_millis>
 800f966:	4602      	mov	r2, r0
 800f968:	460b      	mov	r3, r1
 800f96a:	4613      	mov	r3, r2
 800f96c:	4618      	mov	r0, r3
 800f96e:	f016 f8d7 	bl	8025b20 <srand>
 800f972:	e012      	b.n	800f99a <onstatechange+0x112>
  } else if (ifp->state == MG_TCPIP_STATE_DOWN) {
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	d10d      	bne.n	800f99a <onstatechange+0x112>
    MG_ERROR(("Link down"));
 800f97e:	4b0c      	ldr	r3, [pc, #48]	@ (800f9b0 <onstatechange+0x128>)
 800f980:	681b      	ldr	r3, [r3, #0]
 800f982:	2b00      	cmp	r3, #0
 800f984:	dd09      	ble.n	800f99a <onstatechange+0x112>
 800f986:	4b0b      	ldr	r3, [pc, #44]	@ (800f9b4 <onstatechange+0x12c>)
 800f988:	f241 1221 	movw	r2, #4385	@ 0x1121
 800f98c:	490a      	ldr	r1, [pc, #40]	@ (800f9b8 <onstatechange+0x130>)
 800f98e:	2001      	movs	r0, #1
 800f990:	f7fe ff88 	bl	800e8a4 <mg_log_prefix>
 800f994:	4810      	ldr	r0, [pc, #64]	@ (800f9d8 <onstatechange+0x150>)
 800f996:	f7fe ffd5 	bl	800e944 <mg_log>
  }
  mg_tcpip_call(ifp, MG_TCPIP_EV_ST_CHG, &ifp->state);
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	3384      	adds	r3, #132	@ 0x84
 800f99e:	461a      	mov	r2, r3
 800f9a0:	2100      	movs	r1, #0
 800f9a2:	6878      	ldr	r0, [r7, #4]
 800f9a4:	f7ff fdfc 	bl	800f5a0 <mg_tcpip_call>
}
 800f9a8:	bf00      	nop
 800f9aa:	3708      	adds	r7, #8
 800f9ac:	46bd      	mov	sp, r7
 800f9ae:	bd80      	pop	{r7, pc}
 800f9b0:	24000258 	.word	0x24000258
 800f9b4:	0802d8b0 	.word	0x0802d8b0
 800f9b8:	08029c3c 	.word	0x08029c3c
 800f9bc:	080132d5 	.word	0x080132d5
 800f9c0:	0802ac98 	.word	0x0802ac98
 800f9c4:	0802aca8 	.word	0x0802aca8
 800f9c8:	08013399 	.word	0x08013399
 800f9cc:	0802acb8 	.word	0x0802acb8
 800f9d0:	0802acc8 	.word	0x0802acc8
 800f9d4:	0802acd0 	.word	0x0802acd0
 800f9d8:	0802acd8 	.word	0x0802acd8

0800f9dc <tx_ip>:

static struct ip *tx_ip(struct mg_tcpip_if *ifp, uint8_t *mac_dst,
                        uint8_t proto, uint32_t ip_src, uint32_t ip_dst,
                        size_t plen) {
 800f9dc:	b580      	push	{r7, lr}
 800f9de:	b086      	sub	sp, #24
 800f9e0:	af00      	add	r7, sp, #0
 800f9e2:	60f8      	str	r0, [r7, #12]
 800f9e4:	60b9      	str	r1, [r7, #8]
 800f9e6:	603b      	str	r3, [r7, #0]
 800f9e8:	4613      	mov	r3, r2
 800f9ea:	71fb      	strb	r3, [r7, #7]
  struct eth *eth = (struct eth *) ifp->tx.buf;
 800f9ec:	68fb      	ldr	r3, [r7, #12]
 800f9ee:	695b      	ldr	r3, [r3, #20]
 800f9f0:	617b      	str	r3, [r7, #20]
  struct ip *ip = (struct ip *) (eth + 1);
 800f9f2:	697b      	ldr	r3, [r7, #20]
 800f9f4:	330e      	adds	r3, #14
 800f9f6:	613b      	str	r3, [r7, #16]
  memcpy(eth->dst, mac_dst, sizeof(eth->dst));
 800f9f8:	697b      	ldr	r3, [r7, #20]
 800f9fa:	2206      	movs	r2, #6
 800f9fc:	68b9      	ldr	r1, [r7, #8]
 800f9fe:	4618      	mov	r0, r3
 800fa00:	f017 ff9b 	bl	802793a <memcpy>
  memcpy(eth->src, ifp->mac, sizeof(eth->src));  // Use our MAC
 800fa04:	697b      	ldr	r3, [r7, #20]
 800fa06:	3306      	adds	r3, #6
 800fa08:	68f9      	ldr	r1, [r7, #12]
 800fa0a:	2206      	movs	r2, #6
 800fa0c:	4618      	mov	r0, r3
 800fa0e:	f017 ff94 	bl	802793a <memcpy>
  eth->type = mg_htons(0x800);
 800fa12:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800fa16:	f012 f9df 	bl	8021dd8 <mg_ntohs>
 800fa1a:	4603      	mov	r3, r0
 800fa1c:	461a      	mov	r2, r3
 800fa1e:	697b      	ldr	r3, [r7, #20]
 800fa20:	819a      	strh	r2, [r3, #12]
  memset(ip, 0, sizeof(*ip));
 800fa22:	2214      	movs	r2, #20
 800fa24:	2100      	movs	r1, #0
 800fa26:	6938      	ldr	r0, [r7, #16]
 800fa28:	f017 fe4e 	bl	80276c8 <memset>
  ip->ver = 0x45;               // Version 4, header length 5 words
 800fa2c:	693b      	ldr	r3, [r7, #16]
 800fa2e:	2245      	movs	r2, #69	@ 0x45
 800fa30:	701a      	strb	r2, [r3, #0]
  ip->frag = mg_htons(0x4000);  // Don't fragment
 800fa32:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800fa36:	f012 f9cf 	bl	8021dd8 <mg_ntohs>
 800fa3a:	4603      	mov	r3, r0
 800fa3c:	461a      	mov	r2, r3
 800fa3e:	693b      	ldr	r3, [r7, #16]
 800fa40:	80da      	strh	r2, [r3, #6]
  ip->len = mg_htons((uint16_t) (sizeof(*ip) + plen));
 800fa42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa44:	b29b      	uxth	r3, r3
 800fa46:	3314      	adds	r3, #20
 800fa48:	b29b      	uxth	r3, r3
 800fa4a:	4618      	mov	r0, r3
 800fa4c:	f012 f9c4 	bl	8021dd8 <mg_ntohs>
 800fa50:	4603      	mov	r3, r0
 800fa52:	461a      	mov	r2, r3
 800fa54:	693b      	ldr	r3, [r7, #16]
 800fa56:	805a      	strh	r2, [r3, #2]
  ip->ttl = 64;
 800fa58:	693b      	ldr	r3, [r7, #16]
 800fa5a:	2240      	movs	r2, #64	@ 0x40
 800fa5c:	721a      	strb	r2, [r3, #8]
  ip->proto = proto;
 800fa5e:	693b      	ldr	r3, [r7, #16]
 800fa60:	79fa      	ldrb	r2, [r7, #7]
 800fa62:	725a      	strb	r2, [r3, #9]
  ip->src = ip_src;
 800fa64:	693b      	ldr	r3, [r7, #16]
 800fa66:	683a      	ldr	r2, [r7, #0]
 800fa68:	60da      	str	r2, [r3, #12]
  ip->dst = ip_dst;
 800fa6a:	693b      	ldr	r3, [r7, #16]
 800fa6c:	6a3a      	ldr	r2, [r7, #32]
 800fa6e:	611a      	str	r2, [r3, #16]
  ip->csum = ipcsum(ip, sizeof(*ip));
 800fa70:	2114      	movs	r1, #20
 800fa72:	6938      	ldr	r0, [r7, #16]
 800fa74:	f7ff fe0c 	bl	800f690 <ipcsum>
 800fa78:	4603      	mov	r3, r0
 800fa7a:	461a      	mov	r2, r3
 800fa7c:	693b      	ldr	r3, [r7, #16]
 800fa7e:	815a      	strh	r2, [r3, #10]
  return ip;
 800fa80:	693b      	ldr	r3, [r7, #16]
}
 800fa82:	4618      	mov	r0, r3
 800fa84:	3718      	adds	r7, #24
 800fa86:	46bd      	mov	sp, r7
 800fa88:	bd80      	pop	{r7, pc}

0800fa8a <tx_udp>:

static void tx_udp(struct mg_tcpip_if *ifp, uint8_t *mac_dst, uint32_t ip_src,
                   uint16_t sport, uint32_t ip_dst, uint16_t dport,
                   const void *buf, size_t len) {
 800fa8a:	b580      	push	{r7, lr}
 800fa8c:	b08a      	sub	sp, #40	@ 0x28
 800fa8e:	af02      	add	r7, sp, #8
 800fa90:	60f8      	str	r0, [r7, #12]
 800fa92:	60b9      	str	r1, [r7, #8]
 800fa94:	607a      	str	r2, [r7, #4]
 800fa96:	807b      	strh	r3, [r7, #2]
  struct ip *ip =
      tx_ip(ifp, mac_dst, 17, ip_src, ip_dst, len + sizeof(struct udp));
 800fa98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fa9a:	3308      	adds	r3, #8
 800fa9c:	9301      	str	r3, [sp, #4]
 800fa9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800faa0:	9300      	str	r3, [sp, #0]
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	2211      	movs	r2, #17
 800faa6:	68b9      	ldr	r1, [r7, #8]
 800faa8:	68f8      	ldr	r0, [r7, #12]
 800faaa:	f7ff ff97 	bl	800f9dc <tx_ip>
 800faae:	61f8      	str	r0, [r7, #28]
  struct udp *udp = (struct udp *) (ip + 1);
 800fab0:	69fb      	ldr	r3, [r7, #28]
 800fab2:	3314      	adds	r3, #20
 800fab4:	61bb      	str	r3, [r7, #24]
  // MG_DEBUG(("UDP XX LEN %d %d", (int) len, (int) ifp->tx.len));
  udp->sport = sport;
 800fab6:	69bb      	ldr	r3, [r7, #24]
 800fab8:	887a      	ldrh	r2, [r7, #2]
 800faba:	801a      	strh	r2, [r3, #0]
  udp->dport = dport;
 800fabc:	69bb      	ldr	r3, [r7, #24]
 800fabe:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800fac0:	805a      	strh	r2, [r3, #2]
  udp->len = mg_htons((uint16_t) (sizeof(*udp) + len));
 800fac2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fac4:	b29b      	uxth	r3, r3
 800fac6:	3308      	adds	r3, #8
 800fac8:	b29b      	uxth	r3, r3
 800faca:	4618      	mov	r0, r3
 800facc:	f012 f984 	bl	8021dd8 <mg_ntohs>
 800fad0:	4603      	mov	r3, r0
 800fad2:	461a      	mov	r2, r3
 800fad4:	69bb      	ldr	r3, [r7, #24]
 800fad6:	809a      	strh	r2, [r3, #4]
  udp->csum = 0;
 800fad8:	69bb      	ldr	r3, [r7, #24]
 800fada:	2200      	movs	r2, #0
 800fadc:	719a      	strb	r2, [r3, #6]
 800fade:	2200      	movs	r2, #0
 800fae0:	71da      	strb	r2, [r3, #7]
  uint32_t cs = csumup(0, udp, sizeof(*udp));
 800fae2:	2208      	movs	r2, #8
 800fae4:	69b9      	ldr	r1, [r7, #24]
 800fae6:	2000      	movs	r0, #0
 800fae8:	f7ff fd8c 	bl	800f604 <csumup>
 800faec:	6178      	str	r0, [r7, #20]
  cs = csumup(cs, buf, len);
 800faee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800faf0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800faf2:	6978      	ldr	r0, [r7, #20]
 800faf4:	f7ff fd86 	bl	800f604 <csumup>
 800faf8:	6178      	str	r0, [r7, #20]
  cs = csumup(cs, &ip->src, sizeof(ip->src));
 800fafa:	69fb      	ldr	r3, [r7, #28]
 800fafc:	330c      	adds	r3, #12
 800fafe:	2204      	movs	r2, #4
 800fb00:	4619      	mov	r1, r3
 800fb02:	6978      	ldr	r0, [r7, #20]
 800fb04:	f7ff fd7e 	bl	800f604 <csumup>
 800fb08:	6178      	str	r0, [r7, #20]
  cs = csumup(cs, &ip->dst, sizeof(ip->dst));
 800fb0a:	69fb      	ldr	r3, [r7, #28]
 800fb0c:	3310      	adds	r3, #16
 800fb0e:	2204      	movs	r2, #4
 800fb10:	4619      	mov	r1, r3
 800fb12:	6978      	ldr	r0, [r7, #20]
 800fb14:	f7ff fd76 	bl	800f604 <csumup>
 800fb18:	6178      	str	r0, [r7, #20]
  cs += (uint32_t) (ip->proto + sizeof(*udp) + len);
 800fb1a:	69fb      	ldr	r3, [r7, #28]
 800fb1c:	7a5b      	ldrb	r3, [r3, #9]
 800fb1e:	461a      	mov	r2, r3
 800fb20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fb22:	441a      	add	r2, r3
 800fb24:	697b      	ldr	r3, [r7, #20]
 800fb26:	4413      	add	r3, r2
 800fb28:	3308      	adds	r3, #8
 800fb2a:	617b      	str	r3, [r7, #20]
  udp->csum = csumfin(cs);
 800fb2c:	6978      	ldr	r0, [r7, #20]
 800fb2e:	f7ff fd94 	bl	800f65a <csumfin>
 800fb32:	4603      	mov	r3, r0
 800fb34:	461a      	mov	r2, r3
 800fb36:	69bb      	ldr	r3, [r7, #24]
 800fb38:	80da      	strh	r2, [r3, #6]
  memmove(udp + 1, buf, len);
 800fb3a:	69bb      	ldr	r3, [r7, #24]
 800fb3c:	3308      	adds	r3, #8
 800fb3e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800fb40:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800fb42:	4618      	mov	r0, r3
 800fb44:	f017 fda6 	bl	8027694 <memmove>
  // MG_DEBUG(("UDP LEN %d %d", (int) len, (int) ifp->frame_len));
  ether_output(ifp, sizeof(struct eth) + sizeof(*ip) + sizeof(*udp) + len);
 800fb48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fb4a:	332a      	adds	r3, #42	@ 0x2a
 800fb4c:	4619      	mov	r1, r3
 800fb4e:	68f8      	ldr	r0, [r7, #12]
 800fb50:	f7ff fe16 	bl	800f780 <ether_output>
}
 800fb54:	bf00      	nop
 800fb56:	3720      	adds	r7, #32
 800fb58:	46bd      	mov	sp, r7
 800fb5a:	bd80      	pop	{r7, pc}

0800fb5c <tx_dhcp>:

static void tx_dhcp(struct mg_tcpip_if *ifp, uint8_t *mac_dst, uint32_t ip_src,
                    uint32_t ip_dst, uint8_t *opts, size_t optslen,
                    bool ciaddr) {
 800fb5c:	b5b0      	push	{r4, r5, r7, lr}
 800fb5e:	b0d0      	sub	sp, #320	@ 0x140
 800fb60:	af04      	add	r7, sp, #16
 800fb62:	f507 7498 	add.w	r4, r7, #304	@ 0x130
 800fb66:	f5a4 7492 	sub.w	r4, r4, #292	@ 0x124
 800fb6a:	6020      	str	r0, [r4, #0]
 800fb6c:	f507 7098 	add.w	r0, r7, #304	@ 0x130
 800fb70:	f5a0 7094 	sub.w	r0, r0, #296	@ 0x128
 800fb74:	6001      	str	r1, [r0, #0]
 800fb76:	f507 7198 	add.w	r1, r7, #304	@ 0x130
 800fb7a:	f5a1 7196 	sub.w	r1, r1, #300	@ 0x12c
 800fb7e:	600a      	str	r2, [r1, #0]
 800fb80:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800fb84:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 800fb88:	6013      	str	r3, [r2, #0]
  // https://datatracker.ietf.org/doc/html/rfc2132#section-9.6
  struct dhcp dhcp = {1, 1, 6, 0, 0, 0, 0, 0, 0, 0, 0, {0}, 0, {0}};
 800fb8a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fb8e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800fb92:	4a38      	ldr	r2, [pc, #224]	@ (800fc74 <tx_dhcp+0x118>)
 800fb94:	4618      	mov	r0, r3
 800fb96:	4611      	mov	r1, r2
 800fb98:	f44f 738d 	mov.w	r3, #282	@ 0x11a
 800fb9c:	461a      	mov	r2, r3
 800fb9e:	f017 fecc 	bl	802793a <memcpy>
  dhcp.magic = mg_htonl(0x63825363);
 800fba2:	4835      	ldr	r0, [pc, #212]	@ (800fc78 <tx_dhcp+0x11c>)
 800fba4:	f012 f92f 	bl	8021e06 <mg_ntohl>
 800fba8:	4602      	mov	r2, r0
 800fbaa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fbae:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800fbb2:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
  memcpy(&dhcp.hwaddr, ifp->mac, sizeof(ifp->mac));
 800fbb6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fbba:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800fbbe:	6819      	ldr	r1, [r3, #0]
 800fbc0:	f107 0314 	add.w	r3, r7, #20
 800fbc4:	331c      	adds	r3, #28
 800fbc6:	2206      	movs	r2, #6
 800fbc8:	4618      	mov	r0, r3
 800fbca:	f017 feb6 	bl	802793a <memcpy>
  memcpy(&dhcp.xid, ifp->mac + 2, sizeof(dhcp.xid));
 800fbce:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fbd2:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800fbd6:	681b      	ldr	r3, [r3, #0]
 800fbd8:	3302      	adds	r3, #2
 800fbda:	681b      	ldr	r3, [r3, #0]
 800fbdc:	461a      	mov	r2, r3
 800fbde:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fbe2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800fbe6:	605a      	str	r2, [r3, #4]
  memcpy(&dhcp.options, opts, optslen);
 800fbe8:	f107 0314 	add.w	r3, r7, #20
 800fbec:	33f0      	adds	r3, #240	@ 0xf0
 800fbee:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 800fbf2:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800fbf6:	4618      	mov	r0, r3
 800fbf8:	f017 fe9f 	bl	802793a <memcpy>
  if (ciaddr) dhcp.ciaddr = ip_src;
 800fbfc:	f897 3148 	ldrb.w	r3, [r7, #328]	@ 0x148
 800fc00:	2b00      	cmp	r3, #0
 800fc02:	d009      	beq.n	800fc18 <tx_dhcp+0xbc>
 800fc04:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fc08:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800fc0c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800fc10:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 800fc14:	6812      	ldr	r2, [r2, #0]
 800fc16:	60da      	str	r2, [r3, #12]
  tx_udp(ifp, mac_dst, ip_src, mg_htons(68), ip_dst, mg_htons(67), &dhcp,
 800fc18:	2044      	movs	r0, #68	@ 0x44
 800fc1a:	f012 f8dd 	bl	8021dd8 <mg_ntohs>
 800fc1e:	4603      	mov	r3, r0
 800fc20:	461d      	mov	r5, r3
 800fc22:	2043      	movs	r0, #67	@ 0x43
 800fc24:	f012 f8d8 	bl	8021dd8 <mg_ntohs>
 800fc28:	4603      	mov	r3, r0
 800fc2a:	461c      	mov	r4, r3
 800fc2c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fc30:	f5a3 7296 	sub.w	r2, r3, #300	@ 0x12c
 800fc34:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fc38:	f5a3 7194 	sub.w	r1, r3, #296	@ 0x128
 800fc3c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fc40:	f5a3 7092 	sub.w	r0, r3, #292	@ 0x124
 800fc44:	f44f 738d 	mov.w	r3, #282	@ 0x11a
 800fc48:	9303      	str	r3, [sp, #12]
 800fc4a:	f107 0314 	add.w	r3, r7, #20
 800fc4e:	9302      	str	r3, [sp, #8]
 800fc50:	9401      	str	r4, [sp, #4]
 800fc52:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fc56:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800fc5a:	681b      	ldr	r3, [r3, #0]
 800fc5c:	9300      	str	r3, [sp, #0]
 800fc5e:	462b      	mov	r3, r5
 800fc60:	6812      	ldr	r2, [r2, #0]
 800fc62:	6809      	ldr	r1, [r1, #0]
 800fc64:	6800      	ldr	r0, [r0, #0]
 800fc66:	f7ff ff10 	bl	800fa8a <tx_udp>
         sizeof(dhcp));
}
 800fc6a:	bf00      	nop
 800fc6c:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800fc70:	46bd      	mov	sp, r7
 800fc72:	bdb0      	pop	{r4, r5, r7, pc}
 800fc74:	0802ace4 	.word	0x0802ace4
 800fc78:	63825363 	.word	0x63825363

0800fc7c <tx_dhcp_request_sel>:

static const uint8_t broadcast[] = {255, 255, 255, 255, 255, 255};

// RFC-2131 #4.3.6, #4.4.1; RFC-2132 #9.8
static void tx_dhcp_request_sel(struct mg_tcpip_if *ifp, uint32_t ip_req,
                                uint32_t ip_srv) {
 800fc7c:	b580      	push	{r7, lr}
 800fc7e:	b096      	sub	sp, #88	@ 0x58
 800fc80:	af04      	add	r7, sp, #16
 800fc82:	60f8      	str	r0, [r7, #12]
 800fc84:	60b9      	str	r1, [r7, #8]
 800fc86:	607a      	str	r2, [r7, #4]
  uint8_t extra = (uint8_t) ((ifp->enable_req_dns ? 1 : 0) +
 800fc88:	68fb      	ldr	r3, [r7, #12]
 800fc8a:	7fdb      	ldrb	r3, [r3, #31]
 800fc8c:	2b00      	cmp	r3, #0
 800fc8e:	d001      	beq.n	800fc94 <tx_dhcp_request_sel+0x18>
 800fc90:	2201      	movs	r2, #1
 800fc92:	e000      	b.n	800fc96 <tx_dhcp_request_sel+0x1a>
 800fc94:	2200      	movs	r2, #0
                             (ifp->enable_req_sntp ? 1 : 0));
 800fc96:	68fb      	ldr	r3, [r7, #12]
 800fc98:	f893 3020 	ldrb.w	r3, [r3, #32]
  uint8_t extra = (uint8_t) ((ifp->enable_req_dns ? 1 : 0) +
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	d001      	beq.n	800fca4 <tx_dhcp_request_sel+0x28>
 800fca0:	2301      	movs	r3, #1
 800fca2:	e000      	b.n	800fca6 <tx_dhcp_request_sel+0x2a>
 800fca4:	2300      	movs	r3, #0
 800fca6:	4413      	add	r3, r2
 800fca8:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  size_t len = strlen(ifp->dhcp_name);
 800fcac:	68fb      	ldr	r3, [r7, #12]
 800fcae:	3344      	adds	r3, #68	@ 0x44
 800fcb0:	4618      	mov	r0, r3
 800fcb2:	f7f0 fb8d 	bl	80003d0 <strlen>
 800fcb6:	63f8      	str	r0, [r7, #60]	@ 0x3c
  size_t olen = 21 + len + extra + 2 + 1;  // Total length of options
 800fcb8:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 800fcbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fcbe:	4413      	add	r3, r2
 800fcc0:	3318      	adds	r3, #24
 800fcc2:	63bb      	str	r3, [r7, #56]	@ 0x38
#define OPTS_MAXLEN (21 + sizeof(ifp->dhcp_name) + 2 + 2 + 1)
  uint8_t opts[OPTS_MAXLEN];  // Allocate options (max size possible)
  uint8_t *p = opts;
 800fcc4:	f107 0310 	add.w	r3, r7, #16
 800fcc8:	647b      	str	r3, [r7, #68]	@ 0x44
  assert(olen <= sizeof(opts));
 800fcca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fccc:	2b26      	cmp	r3, #38	@ 0x26
 800fcce:	d906      	bls.n	800fcde <tx_dhcp_request_sel+0x62>
 800fcd0:	4b50      	ldr	r3, [pc, #320]	@ (800fe14 <tx_dhcp_request_sel+0x198>)
 800fcd2:	4a51      	ldr	r2, [pc, #324]	@ (800fe18 <tx_dhcp_request_sel+0x19c>)
 800fcd4:	f241 116a 	movw	r1, #4458	@ 0x116a
 800fcd8:	4850      	ldr	r0, [pc, #320]	@ (800fe1c <tx_dhcp_request_sel+0x1a0>)
 800fcda:	f015 fe21 	bl	8025920 <__assert_func>
  memset(opts, 0, sizeof(opts));
 800fcde:	f107 0310 	add.w	r3, r7, #16
 800fce2:	2226      	movs	r2, #38	@ 0x26
 800fce4:	2100      	movs	r1, #0
 800fce6:	4618      	mov	r0, r3
 800fce8:	f017 fcee 	bl	80276c8 <memset>
  *p++ = 53, *p++ = 1, *p++ = 3;                       // Type: DHCP request
 800fcec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fcee:	1c5a      	adds	r2, r3, #1
 800fcf0:	647a      	str	r2, [r7, #68]	@ 0x44
 800fcf2:	2235      	movs	r2, #53	@ 0x35
 800fcf4:	701a      	strb	r2, [r3, #0]
 800fcf6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fcf8:	1c5a      	adds	r2, r3, #1
 800fcfa:	647a      	str	r2, [r7, #68]	@ 0x44
 800fcfc:	2201      	movs	r2, #1
 800fcfe:	701a      	strb	r2, [r3, #0]
 800fd00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fd02:	1c5a      	adds	r2, r3, #1
 800fd04:	647a      	str	r2, [r7, #68]	@ 0x44
 800fd06:	2203      	movs	r2, #3
 800fd08:	701a      	strb	r2, [r3, #0]
  *p++ = 54, *p++ = 4, memcpy(p, &ip_srv, 4), p += 4;  // DHCP server ID
 800fd0a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fd0c:	1c5a      	adds	r2, r3, #1
 800fd0e:	647a      	str	r2, [r7, #68]	@ 0x44
 800fd10:	2236      	movs	r2, #54	@ 0x36
 800fd12:	701a      	strb	r2, [r3, #0]
 800fd14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fd16:	1c5a      	adds	r2, r3, #1
 800fd18:	647a      	str	r2, [r7, #68]	@ 0x44
 800fd1a:	2204      	movs	r2, #4
 800fd1c:	701a      	strb	r2, [r3, #0]
 800fd1e:	687a      	ldr	r2, [r7, #4]
 800fd20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fd22:	601a      	str	r2, [r3, #0]
 800fd24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fd26:	3304      	adds	r3, #4
 800fd28:	647b      	str	r3, [r7, #68]	@ 0x44
  *p++ = 50, *p++ = 4, memcpy(p, &ip_req, 4), p += 4;  // Requested IP
 800fd2a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fd2c:	1c5a      	adds	r2, r3, #1
 800fd2e:	647a      	str	r2, [r7, #68]	@ 0x44
 800fd30:	2232      	movs	r2, #50	@ 0x32
 800fd32:	701a      	strb	r2, [r3, #0]
 800fd34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fd36:	1c5a      	adds	r2, r3, #1
 800fd38:	647a      	str	r2, [r7, #68]	@ 0x44
 800fd3a:	2204      	movs	r2, #4
 800fd3c:	701a      	strb	r2, [r3, #0]
 800fd3e:	68ba      	ldr	r2, [r7, #8]
 800fd40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fd42:	601a      	str	r2, [r3, #0]
 800fd44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fd46:	3304      	adds	r3, #4
 800fd48:	647b      	str	r3, [r7, #68]	@ 0x44
  *p++ = 12, *p++ = (uint8_t) (len & 255);             // DHCP host
 800fd4a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fd4c:	1c5a      	adds	r2, r3, #1
 800fd4e:	647a      	str	r2, [r7, #68]	@ 0x44
 800fd50:	220c      	movs	r2, #12
 800fd52:	701a      	strb	r2, [r3, #0]
 800fd54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fd56:	1c5a      	adds	r2, r3, #1
 800fd58:	647a      	str	r2, [r7, #68]	@ 0x44
 800fd5a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800fd5c:	b2d2      	uxtb	r2, r2
 800fd5e:	701a      	strb	r2, [r3, #0]
  memcpy(p, ifp->dhcp_name, len), p += len;            // name
 800fd60:	68fb      	ldr	r3, [r7, #12]
 800fd62:	3344      	adds	r3, #68	@ 0x44
 800fd64:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800fd66:	4619      	mov	r1, r3
 800fd68:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800fd6a:	f017 fde6 	bl	802793a <memcpy>
 800fd6e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800fd70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fd72:	4413      	add	r3, r2
 800fd74:	647b      	str	r3, [r7, #68]	@ 0x44
  *p++ = 55, *p++ = 2 + extra, *p++ = 1, *p++ = 3;     // GW, MASK
 800fd76:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fd78:	1c5a      	adds	r2, r3, #1
 800fd7a:	647a      	str	r2, [r7, #68]	@ 0x44
 800fd7c:	2237      	movs	r2, #55	@ 0x37
 800fd7e:	701a      	strb	r2, [r3, #0]
 800fd80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fd82:	1c5a      	adds	r2, r3, #1
 800fd84:	647a      	str	r2, [r7, #68]	@ 0x44
 800fd86:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 800fd8a:	3202      	adds	r2, #2
 800fd8c:	b2d2      	uxtb	r2, r2
 800fd8e:	701a      	strb	r2, [r3, #0]
 800fd90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fd92:	1c5a      	adds	r2, r3, #1
 800fd94:	647a      	str	r2, [r7, #68]	@ 0x44
 800fd96:	2201      	movs	r2, #1
 800fd98:	701a      	strb	r2, [r3, #0]
 800fd9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fd9c:	1c5a      	adds	r2, r3, #1
 800fd9e:	647a      	str	r2, [r7, #68]	@ 0x44
 800fda0:	2203      	movs	r2, #3
 800fda2:	701a      	strb	r2, [r3, #0]
  if (ifp->enable_req_dns) *p++ = 6;                   // DNS
 800fda4:	68fb      	ldr	r3, [r7, #12]
 800fda6:	7fdb      	ldrb	r3, [r3, #31]
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	d004      	beq.n	800fdb6 <tx_dhcp_request_sel+0x13a>
 800fdac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fdae:	1c5a      	adds	r2, r3, #1
 800fdb0:	647a      	str	r2, [r7, #68]	@ 0x44
 800fdb2:	2206      	movs	r2, #6
 800fdb4:	701a      	strb	r2, [r3, #0]
  if (ifp->enable_req_sntp) *p++ = 42;                 // SNTP
 800fdb6:	68fb      	ldr	r3, [r7, #12]
 800fdb8:	f893 3020 	ldrb.w	r3, [r3, #32]
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	d004      	beq.n	800fdca <tx_dhcp_request_sel+0x14e>
 800fdc0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fdc2:	1c5a      	adds	r2, r3, #1
 800fdc4:	647a      	str	r2, [r7, #68]	@ 0x44
 800fdc6:	222a      	movs	r2, #42	@ 0x2a
 800fdc8:	701a      	strb	r2, [r3, #0]
  *p++ = 255;                                          // End of options
 800fdca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fdcc:	1c5a      	adds	r2, r3, #1
 800fdce:	647a      	str	r2, [r7, #68]	@ 0x44
 800fdd0:	22ff      	movs	r2, #255	@ 0xff
 800fdd2:	701a      	strb	r2, [r3, #0]
  // assert((size_t) (p - opts) < olen);
  tx_dhcp(ifp, (uint8_t *) broadcast, 0, 0xffffffff, opts, olen, 0);
 800fdd4:	2300      	movs	r3, #0
 800fdd6:	9302      	str	r3, [sp, #8]
 800fdd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fdda:	9301      	str	r3, [sp, #4]
 800fddc:	f107 0310 	add.w	r3, r7, #16
 800fde0:	9300      	str	r3, [sp, #0]
 800fde2:	f04f 33ff 	mov.w	r3, #4294967295
 800fde6:	2200      	movs	r2, #0
 800fde8:	490d      	ldr	r1, [pc, #52]	@ (800fe20 <tx_dhcp_request_sel+0x1a4>)
 800fdea:	68f8      	ldr	r0, [r7, #12]
 800fdec:	f7ff feb6 	bl	800fb5c <tx_dhcp>
  MG_DEBUG(("DHCP req sent"));
 800fdf0:	4b0c      	ldr	r3, [pc, #48]	@ (800fe24 <tx_dhcp_request_sel+0x1a8>)
 800fdf2:	681b      	ldr	r3, [r3, #0]
 800fdf4:	2b02      	cmp	r3, #2
 800fdf6:	dd09      	ble.n	800fe0c <tx_dhcp_request_sel+0x190>
 800fdf8:	4b07      	ldr	r3, [pc, #28]	@ (800fe18 <tx_dhcp_request_sel+0x19c>)
 800fdfa:	f241 1277 	movw	r2, #4471	@ 0x1177
 800fdfe:	4907      	ldr	r1, [pc, #28]	@ (800fe1c <tx_dhcp_request_sel+0x1a0>)
 800fe00:	2003      	movs	r0, #3
 800fe02:	f7fe fd4f 	bl	800e8a4 <mg_log_prefix>
 800fe06:	4808      	ldr	r0, [pc, #32]	@ (800fe28 <tx_dhcp_request_sel+0x1ac>)
 800fe08:	f7fe fd9c 	bl	800e944 <mg_log>
}
 800fe0c:	bf00      	nop
 800fe0e:	3748      	adds	r7, #72	@ 0x48
 800fe10:	46bd      	mov	sp, r7
 800fe12:	bd80      	pop	{r7, pc}
 800fe14:	0802ae00 	.word	0x0802ae00
 800fe18:	0802d8c0 	.word	0x0802d8c0
 800fe1c:	08029c3c 	.word	0x08029c3c
 800fe20:	0802d378 	.word	0x0802d378
 800fe24:	24000258 	.word	0x24000258
 800fe28:	0802ae18 	.word	0x0802ae18

0800fe2c <tx_dhcp_request_re>:

// RFC-2131 #4.3.6, #4.4.5 (renewing: unicast, rebinding: bcast)
static void tx_dhcp_request_re(struct mg_tcpip_if *ifp, uint8_t *mac_dst,
                               uint32_t ip_src, uint32_t ip_dst) {
 800fe2c:	b580      	push	{r7, lr}
 800fe2e:	b08a      	sub	sp, #40	@ 0x28
 800fe30:	af04      	add	r7, sp, #16
 800fe32:	60f8      	str	r0, [r7, #12]
 800fe34:	60b9      	str	r1, [r7, #8]
 800fe36:	607a      	str	r2, [r7, #4]
 800fe38:	603b      	str	r3, [r7, #0]
  uint8_t opts[] = {
 800fe3a:	4b10      	ldr	r3, [pc, #64]	@ (800fe7c <tx_dhcp_request_re+0x50>)
 800fe3c:	617b      	str	r3, [r7, #20]
      53, 1, 3,  // Type: DHCP request
      255        // End of options
  };
  tx_dhcp(ifp, mac_dst, ip_src, ip_dst, opts, sizeof(opts), true);
 800fe3e:	2301      	movs	r3, #1
 800fe40:	9302      	str	r3, [sp, #8]
 800fe42:	2304      	movs	r3, #4
 800fe44:	9301      	str	r3, [sp, #4]
 800fe46:	f107 0314 	add.w	r3, r7, #20
 800fe4a:	9300      	str	r3, [sp, #0]
 800fe4c:	683b      	ldr	r3, [r7, #0]
 800fe4e:	687a      	ldr	r2, [r7, #4]
 800fe50:	68b9      	ldr	r1, [r7, #8]
 800fe52:	68f8      	ldr	r0, [r7, #12]
 800fe54:	f7ff fe82 	bl	800fb5c <tx_dhcp>
  MG_DEBUG(("DHCP req sent"));
 800fe58:	4b09      	ldr	r3, [pc, #36]	@ (800fe80 <tx_dhcp_request_re+0x54>)
 800fe5a:	681b      	ldr	r3, [r3, #0]
 800fe5c:	2b02      	cmp	r3, #2
 800fe5e:	dd09      	ble.n	800fe74 <tx_dhcp_request_re+0x48>
 800fe60:	4b08      	ldr	r3, [pc, #32]	@ (800fe84 <tx_dhcp_request_re+0x58>)
 800fe62:	f241 1282 	movw	r2, #4482	@ 0x1182
 800fe66:	4908      	ldr	r1, [pc, #32]	@ (800fe88 <tx_dhcp_request_re+0x5c>)
 800fe68:	2003      	movs	r0, #3
 800fe6a:	f7fe fd1b 	bl	800e8a4 <mg_log_prefix>
 800fe6e:	4807      	ldr	r0, [pc, #28]	@ (800fe8c <tx_dhcp_request_re+0x60>)
 800fe70:	f7fe fd68 	bl	800e944 <mg_log>
}
 800fe74:	bf00      	nop
 800fe76:	3718      	adds	r7, #24
 800fe78:	46bd      	mov	sp, r7
 800fe7a:	bd80      	pop	{r7, pc}
 800fe7c:	ff030135 	.word	0xff030135
 800fe80:	24000258 	.word	0x24000258
 800fe84:	0802d8d4 	.word	0x0802d8d4
 800fe88:	08029c3c 	.word	0x08029c3c
 800fe8c:	0802ae18 	.word	0x0802ae18

0800fe90 <tx_dhcp_discover>:

static void tx_dhcp_discover(struct mg_tcpip_if *ifp) {
 800fe90:	b580      	push	{r7, lr}
 800fe92:	b088      	sub	sp, #32
 800fe94:	af04      	add	r7, sp, #16
 800fe96:	6078      	str	r0, [r7, #4]
  uint8_t opts[] = {
 800fe98:	4a14      	ldr	r2, [pc, #80]	@ (800feec <tx_dhcp_discover+0x5c>)
 800fe9a:	f107 0308 	add.w	r3, r7, #8
 800fe9e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fea2:	e883 0003 	stmia.w	r3, {r0, r1}
      53, 1, 1,     // Type: DHCP discover
      55, 2, 1, 3,  // Parameters: ip, mask
      255           // End of options
  };
  tx_dhcp(ifp, (uint8_t *) broadcast, 0, 0xffffffff, opts, sizeof(opts), false);
 800fea6:	2300      	movs	r3, #0
 800fea8:	9302      	str	r3, [sp, #8]
 800feaa:	2308      	movs	r3, #8
 800feac:	9301      	str	r3, [sp, #4]
 800feae:	f107 0308 	add.w	r3, r7, #8
 800feb2:	9300      	str	r3, [sp, #0]
 800feb4:	f04f 33ff 	mov.w	r3, #4294967295
 800feb8:	2200      	movs	r2, #0
 800feba:	490d      	ldr	r1, [pc, #52]	@ (800fef0 <tx_dhcp_discover+0x60>)
 800febc:	6878      	ldr	r0, [r7, #4]
 800febe:	f7ff fe4d 	bl	800fb5c <tx_dhcp>
  MG_DEBUG(("DHCP discover sent. Our MAC: %M", mg_print_mac, ifp->mac));
 800fec2:	4b0c      	ldr	r3, [pc, #48]	@ (800fef4 <tx_dhcp_discover+0x64>)
 800fec4:	681b      	ldr	r3, [r3, #0]
 800fec6:	2b02      	cmp	r3, #2
 800fec8:	dd0c      	ble.n	800fee4 <tx_dhcp_discover+0x54>
 800feca:	4b0b      	ldr	r3, [pc, #44]	@ (800fef8 <tx_dhcp_discover+0x68>)
 800fecc:	f241 128c 	movw	r2, #4492	@ 0x118c
 800fed0:	490a      	ldr	r1, [pc, #40]	@ (800fefc <tx_dhcp_discover+0x6c>)
 800fed2:	2003      	movs	r0, #3
 800fed4:	f7fe fce6 	bl	800e8a4 <mg_log_prefix>
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	461a      	mov	r2, r3
 800fedc:	4908      	ldr	r1, [pc, #32]	@ (800ff00 <tx_dhcp_discover+0x70>)
 800fede:	4809      	ldr	r0, [pc, #36]	@ (800ff04 <tx_dhcp_discover+0x74>)
 800fee0:	f7fe fd30 	bl	800e944 <mg_log>
}
 800fee4:	bf00      	nop
 800fee6:	3710      	adds	r7, #16
 800fee8:	46bd      	mov	sp, r7
 800feea:	bd80      	pop	{r7, pc}
 800feec:	0802ae48 	.word	0x0802ae48
 800fef0:	0802d378 	.word	0x0802d378
 800fef4:	24000258 	.word	0x24000258
 800fef8:	0802d8e8 	.word	0x0802d8e8
 800fefc:	08029c3c 	.word	0x08029c3c
 800ff00:	08013399 	.word	0x08013399
 800ff04:	0802ae28 	.word	0x0802ae28

0800ff08 <getpeer>:

static struct mg_connection *getpeer(struct mg_mgr *mgr, struct pkt *pkt,
                                     bool lsn) {
 800ff08:	b580      	push	{r7, lr}
 800ff0a:	b086      	sub	sp, #24
 800ff0c:	af00      	add	r7, sp, #0
 800ff0e:	60f8      	str	r0, [r7, #12]
 800ff10:	60b9      	str	r1, [r7, #8]
 800ff12:	4613      	mov	r3, r2
 800ff14:	71fb      	strb	r3, [r7, #7]
  struct mg_connection *c = NULL;
 800ff16:	2300      	movs	r3, #0
 800ff18:	617b      	str	r3, [r7, #20]
  for (c = mgr->conns; c != NULL; c = c->next) {
 800ff1a:	68fb      	ldr	r3, [r7, #12]
 800ff1c:	681b      	ldr	r3, [r3, #0]
 800ff1e:	617b      	str	r3, [r7, #20]
 800ff20:	e057      	b.n	800ffd2 <getpeer+0xca>
    if (c->is_arplooking && pkt->arp &&
 800ff22:	697b      	ldr	r3, [r7, #20]
 800ff24:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800ff28:	f003 0310 	and.w	r3, r3, #16
 800ff2c:	b2db      	uxtb	r3, r3
 800ff2e:	2b00      	cmp	r3, #0
 800ff30:	d010      	beq.n	800ff54 <getpeer+0x4c>
 800ff32:	68bb      	ldr	r3, [r7, #8]
 800ff34:	699b      	ldr	r3, [r3, #24]
 800ff36:	2b00      	cmp	r3, #0
 800ff38:	d00c      	beq.n	800ff54 <getpeer+0x4c>
        memcmp(&pkt->arp->spa, c->rem.ip, sizeof(pkt->arp->spa)) == 0)
 800ff3a:	68bb      	ldr	r3, [r7, #8]
 800ff3c:	699b      	ldr	r3, [r3, #24]
 800ff3e:	f103 000e 	add.w	r0, r3, #14
 800ff42:	697b      	ldr	r3, [r7, #20]
 800ff44:	331c      	adds	r3, #28
 800ff46:	2204      	movs	r2, #4
 800ff48:	4619      	mov	r1, r3
 800ff4a:	f017 fb93 	bl	8027674 <memcmp>
 800ff4e:	4603      	mov	r3, r0
    if (c->is_arplooking && pkt->arp &&
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	d042      	beq.n	800ffda <getpeer+0xd2>
      break;
    if (c->is_udp && pkt->udp && c->loc.port == pkt->udp->dport) break;
 800ff54:	697b      	ldr	r3, [r7, #20]
 800ff56:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800ff5a:	f003 0301 	and.w	r3, r3, #1
 800ff5e:	b2db      	uxtb	r3, r3
 800ff60:	2b00      	cmp	r3, #0
 800ff62:	d00b      	beq.n	800ff7c <getpeer+0x74>
 800ff64:	68bb      	ldr	r3, [r7, #8]
 800ff66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ff68:	2b00      	cmp	r3, #0
 800ff6a:	d007      	beq.n	800ff7c <getpeer+0x74>
 800ff6c:	697b      	ldr	r3, [r7, #20]
 800ff6e:	8b1a      	ldrh	r2, [r3, #24]
 800ff70:	68bb      	ldr	r3, [r7, #8]
 800ff72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ff74:	885b      	ldrh	r3, [r3, #2]
 800ff76:	b29b      	uxth	r3, r3
 800ff78:	429a      	cmp	r2, r3
 800ff7a:	d030      	beq.n	800ffde <getpeer+0xd6>
    if (!c->is_udp && pkt->tcp && c->loc.port == pkt->tcp->dport &&
 800ff7c:	697b      	ldr	r3, [r7, #20]
 800ff7e:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800ff82:	f003 0301 	and.w	r3, r3, #1
 800ff86:	b2db      	uxtb	r3, r3
 800ff88:	2b00      	cmp	r3, #0
 800ff8a:	d11f      	bne.n	800ffcc <getpeer+0xc4>
 800ff8c:	68bb      	ldr	r3, [r7, #8]
 800ff8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ff90:	2b00      	cmp	r3, #0
 800ff92:	d01b      	beq.n	800ffcc <getpeer+0xc4>
 800ff94:	697b      	ldr	r3, [r7, #20]
 800ff96:	8b1a      	ldrh	r2, [r3, #24]
 800ff98:	68bb      	ldr	r3, [r7, #8]
 800ff9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ff9c:	885b      	ldrh	r3, [r3, #2]
 800ff9e:	b29b      	uxth	r3, r3
 800ffa0:	429a      	cmp	r2, r3
 800ffa2:	d113      	bne.n	800ffcc <getpeer+0xc4>
        lsn == c->is_listening && (lsn || c->rem.port == pkt->tcp->sport))
 800ffa4:	697b      	ldr	r3, [r7, #20]
 800ffa6:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800ffaa:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800ffae:	b2db      	uxtb	r3, r3
    if (!c->is_udp && pkt->tcp && c->loc.port == pkt->tcp->dport &&
 800ffb0:	79fa      	ldrb	r2, [r7, #7]
 800ffb2:	429a      	cmp	r2, r3
 800ffb4:	d10a      	bne.n	800ffcc <getpeer+0xc4>
        lsn == c->is_listening && (lsn || c->rem.port == pkt->tcp->sport))
 800ffb6:	79fb      	ldrb	r3, [r7, #7]
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	d111      	bne.n	800ffe0 <getpeer+0xd8>
 800ffbc:	697b      	ldr	r3, [r7, #20]
 800ffbe:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800ffc0:	68bb      	ldr	r3, [r7, #8]
 800ffc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ffc4:	881b      	ldrh	r3, [r3, #0]
 800ffc6:	b29b      	uxth	r3, r3
 800ffc8:	429a      	cmp	r2, r3
 800ffca:	d009      	beq.n	800ffe0 <getpeer+0xd8>
  for (c = mgr->conns; c != NULL; c = c->next) {
 800ffcc:	697b      	ldr	r3, [r7, #20]
 800ffce:	681b      	ldr	r3, [r3, #0]
 800ffd0:	617b      	str	r3, [r7, #20]
 800ffd2:	697b      	ldr	r3, [r7, #20]
 800ffd4:	2b00      	cmp	r3, #0
 800ffd6:	d1a4      	bne.n	800ff22 <getpeer+0x1a>
 800ffd8:	e002      	b.n	800ffe0 <getpeer+0xd8>
      break;
 800ffda:	bf00      	nop
 800ffdc:	e000      	b.n	800ffe0 <getpeer+0xd8>
    if (c->is_udp && pkt->udp && c->loc.port == pkt->udp->dport) break;
 800ffde:	bf00      	nop
      break;
  }
  return c;
 800ffe0:	697b      	ldr	r3, [r7, #20]
}
 800ffe2:	4618      	mov	r0, r3
 800ffe4:	3718      	adds	r7, #24
 800ffe6:	46bd      	mov	sp, r7
 800ffe8:	bd80      	pop	{r7, pc}
	...

0800ffec <rx_arp>:

static void mac_resolved(struct mg_connection *c);

static void rx_arp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 800ffec:	b5b0      	push	{r4, r5, r7, lr}
 800ffee:	b088      	sub	sp, #32
 800fff0:	af02      	add	r7, sp, #8
 800fff2:	6078      	str	r0, [r7, #4]
 800fff4:	6039      	str	r1, [r7, #0]
  if (pkt->arp->op == mg_htons(1) && pkt->arp->tpa == ifp->ip) {
 800fff6:	683b      	ldr	r3, [r7, #0]
 800fff8:	699b      	ldr	r3, [r3, #24]
 800fffa:	88db      	ldrh	r3, [r3, #6]
 800fffc:	b29c      	uxth	r4, r3
 800fffe:	2001      	movs	r0, #1
 8010000:	f011 feea 	bl	8021dd8 <mg_ntohs>
 8010004:	4603      	mov	r3, r0
 8010006:	429c      	cmp	r4, r3
 8010008:	d176      	bne.n	80100f8 <rx_arp+0x10c>
 801000a:	683b      	ldr	r3, [r7, #0]
 801000c:	699b      	ldr	r3, [r3, #24]
 801000e:	699a      	ldr	r2, [r3, #24]
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	689b      	ldr	r3, [r3, #8]
 8010014:	429a      	cmp	r2, r3
 8010016:	d16f      	bne.n	80100f8 <rx_arp+0x10c>
    // ARP request. Make a response, then send
    // MG_DEBUG(("ARP op %d %M: %M", mg_ntohs(pkt->arp->op), mg_print_ip4,
    //          &pkt->arp->spa, mg_print_ip4, &pkt->arp->tpa));
    struct eth *eth = (struct eth *) ifp->tx.buf;
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	695b      	ldr	r3, [r3, #20]
 801001c:	617b      	str	r3, [r7, #20]
    struct arp *arp = (struct arp *) (eth + 1);
 801001e:	697b      	ldr	r3, [r7, #20]
 8010020:	330e      	adds	r3, #14
 8010022:	613b      	str	r3, [r7, #16]
    memcpy(eth->dst, pkt->eth->src, sizeof(eth->dst));
 8010024:	6978      	ldr	r0, [r7, #20]
 8010026:	683b      	ldr	r3, [r7, #0]
 8010028:	691b      	ldr	r3, [r3, #16]
 801002a:	3306      	adds	r3, #6
 801002c:	2206      	movs	r2, #6
 801002e:	4619      	mov	r1, r3
 8010030:	f017 fc83 	bl	802793a <memcpy>
    memcpy(eth->src, ifp->mac, sizeof(eth->src));
 8010034:	697b      	ldr	r3, [r7, #20]
 8010036:	3306      	adds	r3, #6
 8010038:	6879      	ldr	r1, [r7, #4]
 801003a:	2206      	movs	r2, #6
 801003c:	4618      	mov	r0, r3
 801003e:	f017 fc7c 	bl	802793a <memcpy>
    eth->type = mg_htons(0x806);
 8010042:	f640 0006 	movw	r0, #2054	@ 0x806
 8010046:	f011 fec7 	bl	8021dd8 <mg_ntohs>
 801004a:	4603      	mov	r3, r0
 801004c:	461a      	mov	r2, r3
 801004e:	697b      	ldr	r3, [r7, #20]
 8010050:	819a      	strh	r2, [r3, #12]
    *arp = *pkt->arp;
 8010052:	683b      	ldr	r3, [r7, #0]
 8010054:	699a      	ldr	r2, [r3, #24]
 8010056:	693b      	ldr	r3, [r7, #16]
 8010058:	6814      	ldr	r4, [r2, #0]
 801005a:	6850      	ldr	r0, [r2, #4]
 801005c:	6891      	ldr	r1, [r2, #8]
 801005e:	68d5      	ldr	r5, [r2, #12]
 8010060:	601c      	str	r4, [r3, #0]
 8010062:	6058      	str	r0, [r3, #4]
 8010064:	6099      	str	r1, [r3, #8]
 8010066:	60dd      	str	r5, [r3, #12]
 8010068:	6914      	ldr	r4, [r2, #16]
 801006a:	6950      	ldr	r0, [r2, #20]
 801006c:	6991      	ldr	r1, [r2, #24]
 801006e:	611c      	str	r4, [r3, #16]
 8010070:	6158      	str	r0, [r3, #20]
 8010072:	6199      	str	r1, [r3, #24]
    arp->op = mg_htons(2);
 8010074:	2002      	movs	r0, #2
 8010076:	f011 feaf 	bl	8021dd8 <mg_ntohs>
 801007a:	4603      	mov	r3, r0
 801007c:	461a      	mov	r2, r3
 801007e:	693b      	ldr	r3, [r7, #16]
 8010080:	80da      	strh	r2, [r3, #6]
    memcpy(arp->tha, pkt->arp->sha, sizeof(pkt->arp->tha));
 8010082:	693b      	ldr	r3, [r7, #16]
 8010084:	f103 0012 	add.w	r0, r3, #18
 8010088:	683b      	ldr	r3, [r7, #0]
 801008a:	699b      	ldr	r3, [r3, #24]
 801008c:	3308      	adds	r3, #8
 801008e:	2206      	movs	r2, #6
 8010090:	4619      	mov	r1, r3
 8010092:	f017 fc52 	bl	802793a <memcpy>
    memcpy(arp->sha, ifp->mac, sizeof(pkt->arp->sha));
 8010096:	693b      	ldr	r3, [r7, #16]
 8010098:	3308      	adds	r3, #8
 801009a:	6879      	ldr	r1, [r7, #4]
 801009c:	2206      	movs	r2, #6
 801009e:	4618      	mov	r0, r3
 80100a0:	f017 fc4b 	bl	802793a <memcpy>
    arp->tpa = pkt->arp->spa;
 80100a4:	683b      	ldr	r3, [r7, #0]
 80100a6:	699b      	ldr	r3, [r3, #24]
 80100a8:	f8d3 200e 	ldr.w	r2, [r3, #14]
 80100ac:	693b      	ldr	r3, [r7, #16]
 80100ae:	619a      	str	r2, [r3, #24]
    arp->spa = ifp->ip;
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	689a      	ldr	r2, [r3, #8]
 80100b4:	693b      	ldr	r3, [r7, #16]
 80100b6:	f8c3 200e 	str.w	r2, [r3, #14]
    MG_DEBUG(("ARP: tell %M we're %M", mg_print_ip4, &arp->tpa, mg_print_mac,
 80100ba:	4b4e      	ldr	r3, [pc, #312]	@ (80101f4 <rx_arp+0x208>)
 80100bc:	681b      	ldr	r3, [r3, #0]
 80100be:	2b02      	cmp	r3, #2
 80100c0:	dd10      	ble.n	80100e4 <rx_arp+0xf8>
 80100c2:	4b4d      	ldr	r3, [pc, #308]	@ (80101f8 <rx_arp+0x20c>)
 80100c4:	f241 12b0 	movw	r2, #4528	@ 0x11b0
 80100c8:	494c      	ldr	r1, [pc, #304]	@ (80101fc <rx_arp+0x210>)
 80100ca:	2003      	movs	r0, #3
 80100cc:	f7fe fbea 	bl	800e8a4 <mg_log_prefix>
 80100d0:	693b      	ldr	r3, [r7, #16]
 80100d2:	f103 0218 	add.w	r2, r3, #24
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	9300      	str	r3, [sp, #0]
 80100da:	4b49      	ldr	r3, [pc, #292]	@ (8010200 <rx_arp+0x214>)
 80100dc:	4949      	ldr	r1, [pc, #292]	@ (8010204 <rx_arp+0x218>)
 80100de:	484a      	ldr	r0, [pc, #296]	@ (8010208 <rx_arp+0x21c>)
 80100e0:	f7fe fc30 	bl	800e944 <mg_log>
              &ifp->mac));
    ether_output(ifp, PDIFF(eth, arp + 1));
 80100e4:	693b      	ldr	r3, [r7, #16]
 80100e6:	f103 021c 	add.w	r2, r3, #28
 80100ea:	697b      	ldr	r3, [r7, #20]
 80100ec:	1ad3      	subs	r3, r2, r3
 80100ee:	4619      	mov	r1, r3
 80100f0:	6878      	ldr	r0, [r7, #4]
 80100f2:	f7ff fb45 	bl	800f780 <ether_output>
  if (pkt->arp->op == mg_htons(1) && pkt->arp->tpa == ifp->ip) {
 80100f6:	e079      	b.n	80101ec <rx_arp+0x200>
  } else if (pkt->arp->op == mg_htons(2)) {
 80100f8:	683b      	ldr	r3, [r7, #0]
 80100fa:	699b      	ldr	r3, [r3, #24]
 80100fc:	88db      	ldrh	r3, [r3, #6]
 80100fe:	b29c      	uxth	r4, r3
 8010100:	2002      	movs	r0, #2
 8010102:	f011 fe69 	bl	8021dd8 <mg_ntohs>
 8010106:	4603      	mov	r3, r0
 8010108:	429c      	cmp	r4, r3
 801010a:	d16f      	bne.n	80101ec <rx_arp+0x200>
    if (memcmp(pkt->arp->tha, ifp->mac, sizeof(pkt->arp->tha)) != 0) return;
 801010c:	683b      	ldr	r3, [r7, #0]
 801010e:	699b      	ldr	r3, [r3, #24]
 8010110:	3312      	adds	r3, #18
 8010112:	6879      	ldr	r1, [r7, #4]
 8010114:	2206      	movs	r2, #6
 8010116:	4618      	mov	r0, r3
 8010118:	f017 faac 	bl	8027674 <memcmp>
 801011c:	4603      	mov	r3, r0
 801011e:	2b00      	cmp	r3, #0
 8010120:	d163      	bne.n	80101ea <rx_arp+0x1fe>
    if (pkt->arp->spa == ifp->gw) {
 8010122:	683b      	ldr	r3, [r7, #0]
 8010124:	699b      	ldr	r3, [r3, #24]
 8010126:	f8d3 200e 	ldr.w	r2, [r3, #14]
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	691b      	ldr	r3, [r3, #16]
 801012e:	429a      	cmp	r2, r3
 8010130:	d116      	bne.n	8010160 <rx_arp+0x174>
      // Got response for the GW ARP request. Set ifp->gwmac and IP -> READY
      memcpy(ifp->gwmac, pkt->arp->sha, sizeof(ifp->gwmac));
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	f103 0052 	add.w	r0, r3, #82	@ 0x52
 8010138:	683b      	ldr	r3, [r7, #0]
 801013a:	699b      	ldr	r3, [r3, #24]
 801013c:	3308      	adds	r3, #8
 801013e:	2206      	movs	r2, #6
 8010140:	4619      	mov	r1, r3
 8010142:	f017 fbfa 	bl	802793a <memcpy>
      if (ifp->state == MG_TCPIP_STATE_IP) {
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801014c:	2b03      	cmp	r3, #3
 801014e:	d14d      	bne.n	80101ec <rx_arp+0x200>
        ifp->state = MG_TCPIP_STATE_READY;
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	2204      	movs	r2, #4
 8010154:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
        onstatechange(ifp);
 8010158:	6878      	ldr	r0, [r7, #4]
 801015a:	f7ff fb95 	bl	800f888 <onstatechange>
 801015e:	e045      	b.n	80101ec <rx_arp+0x200>
      }
    } else {
      struct mg_connection *c = getpeer(ifp->mgr, pkt, false);
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010164:	2200      	movs	r2, #0
 8010166:	6839      	ldr	r1, [r7, #0]
 8010168:	4618      	mov	r0, r3
 801016a:	f7ff fecd 	bl	800ff08 <getpeer>
 801016e:	60f8      	str	r0, [r7, #12]
      if (c != NULL && c->is_arplooking) {
 8010170:	68fb      	ldr	r3, [r7, #12]
 8010172:	2b00      	cmp	r3, #0
 8010174:	d03a      	beq.n	80101ec <rx_arp+0x200>
 8010176:	68fb      	ldr	r3, [r7, #12]
 8010178:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801017c:	f003 0310 	and.w	r3, r3, #16
 8010180:	b2db      	uxtb	r3, r3
 8010182:	2b00      	cmp	r3, #0
 8010184:	d032      	beq.n	80101ec <rx_arp+0x200>
        struct connstate *s = (struct connstate *) (c + 1);
 8010186:	68fb      	ldr	r3, [r7, #12]
 8010188:	33b0      	adds	r3, #176	@ 0xb0
 801018a:	60bb      	str	r3, [r7, #8]
        memcpy(s->mac, pkt->arp->sha, sizeof(s->mac));
 801018c:	68bb      	ldr	r3, [r7, #8]
 801018e:	f103 001a 	add.w	r0, r3, #26
 8010192:	683b      	ldr	r3, [r7, #0]
 8010194:	699b      	ldr	r3, [r3, #24]
 8010196:	3308      	adds	r3, #8
 8010198:	2206      	movs	r2, #6
 801019a:	4619      	mov	r1, r3
 801019c:	f017 fbcd 	bl	802793a <memcpy>
        MG_DEBUG(("%lu ARP resolved %M -> %M", c->id, mg_print_ip4, c->rem.ip,
 80101a0:	4b14      	ldr	r3, [pc, #80]	@ (80101f4 <rx_arp+0x208>)
 80101a2:	681b      	ldr	r3, [r3, #0]
 80101a4:	2b02      	cmp	r3, #2
 80101a6:	dd15      	ble.n	80101d4 <rx_arp+0x1e8>
 80101a8:	4b13      	ldr	r3, [pc, #76]	@ (80101f8 <rx_arp+0x20c>)
 80101aa:	f241 12c1 	movw	r2, #4545	@ 0x11c1
 80101ae:	4913      	ldr	r1, [pc, #76]	@ (80101fc <rx_arp+0x210>)
 80101b0:	2003      	movs	r0, #3
 80101b2:	f7fe fb77 	bl	800e8a4 <mg_log_prefix>
 80101b6:	68fb      	ldr	r3, [r7, #12]
 80101b8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80101ba:	68fb      	ldr	r3, [r7, #12]
 80101bc:	f103 021c 	add.w	r2, r3, #28
 80101c0:	68bb      	ldr	r3, [r7, #8]
 80101c2:	331a      	adds	r3, #26
 80101c4:	9301      	str	r3, [sp, #4]
 80101c6:	4b0e      	ldr	r3, [pc, #56]	@ (8010200 <rx_arp+0x214>)
 80101c8:	9300      	str	r3, [sp, #0]
 80101ca:	4613      	mov	r3, r2
 80101cc:	4a0d      	ldr	r2, [pc, #52]	@ (8010204 <rx_arp+0x218>)
 80101ce:	480f      	ldr	r0, [pc, #60]	@ (801020c <rx_arp+0x220>)
 80101d0:	f7fe fbb8 	bl	800e944 <mg_log>
                  mg_print_mac, s->mac));
        c->is_arplooking = 0;
 80101d4:	68fa      	ldr	r2, [r7, #12]
 80101d6:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 80101da:	f023 0310 	bic.w	r3, r3, #16
 80101de:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
        mac_resolved(c);
 80101e2:	68f8      	ldr	r0, [r7, #12]
 80101e4:	f002 fa69 	bl	80126ba <mac_resolved>
 80101e8:	e000      	b.n	80101ec <rx_arp+0x200>
    if (memcmp(pkt->arp->tha, ifp->mac, sizeof(pkt->arp->tha)) != 0) return;
 80101ea:	bf00      	nop
      }
    }
  }
}
 80101ec:	3718      	adds	r7, #24
 80101ee:	46bd      	mov	sp, r7
 80101f0:	bdb0      	pop	{r4, r5, r7, pc}
 80101f2:	bf00      	nop
 80101f4:	24000258 	.word	0x24000258
 80101f8:	0802d8fc 	.word	0x0802d8fc
 80101fc:	08029c3c 	.word	0x08029c3c
 8010200:	08013399 	.word	0x08013399
 8010204:	080132d5 	.word	0x080132d5
 8010208:	0802ae50 	.word	0x0802ae50
 801020c:	0802ae68 	.word	0x0802ae68

08010210 <rx_icmp>:

static void rx_icmp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 8010210:	b580      	push	{r7, lr}
 8010212:	b08a      	sub	sp, #40	@ 0x28
 8010214:	af02      	add	r7, sp, #8
 8010216:	6078      	str	r0, [r7, #4]
 8010218:	6039      	str	r1, [r7, #0]
  // MG_DEBUG(("ICMP %d", (int) len));
  if (pkt->icmp->type == 8 && pkt->ip != NULL && pkt->ip->dst == ifp->ip) {
 801021a:	683b      	ldr	r3, [r7, #0]
 801021c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801021e:	781b      	ldrb	r3, [r3, #0]
 8010220:	2b08      	cmp	r3, #8
 8010222:	d14d      	bne.n	80102c0 <rx_icmp+0xb0>
 8010224:	683b      	ldr	r3, [r7, #0]
 8010226:	69db      	ldr	r3, [r3, #28]
 8010228:	2b00      	cmp	r3, #0
 801022a:	d049      	beq.n	80102c0 <rx_icmp+0xb0>
 801022c:	683b      	ldr	r3, [r7, #0]
 801022e:	69db      	ldr	r3, [r3, #28]
 8010230:	691a      	ldr	r2, [r3, #16]
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	689b      	ldr	r3, [r3, #8]
 8010236:	429a      	cmp	r2, r3
 8010238:	d142      	bne.n	80102c0 <rx_icmp+0xb0>
    size_t hlen = sizeof(struct eth) + sizeof(struct ip) + sizeof(struct icmp);
 801023a:	2326      	movs	r3, #38	@ 0x26
 801023c:	61bb      	str	r3, [r7, #24]
    size_t space = ifp->tx.len - hlen, plen = pkt->pay.len;
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	699a      	ldr	r2, [r3, #24]
 8010242:	69bb      	ldr	r3, [r7, #24]
 8010244:	1ad3      	subs	r3, r2, r3
 8010246:	617b      	str	r3, [r7, #20]
 8010248:	683b      	ldr	r3, [r7, #0]
 801024a:	68db      	ldr	r3, [r3, #12]
 801024c:	61fb      	str	r3, [r7, #28]
    if (plen > space) plen = space;
 801024e:	69fa      	ldr	r2, [r7, #28]
 8010250:	697b      	ldr	r3, [r7, #20]
 8010252:	429a      	cmp	r2, r3
 8010254:	d901      	bls.n	801025a <rx_icmp+0x4a>
 8010256:	697b      	ldr	r3, [r7, #20]
 8010258:	61fb      	str	r3, [r7, #28]
    struct ip *ip = tx_ip(ifp, pkt->eth->src, 1, ifp->ip, pkt->ip->src,
 801025a:	683b      	ldr	r3, [r7, #0]
 801025c:	691b      	ldr	r3, [r3, #16]
 801025e:	1d99      	adds	r1, r3, #6
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	6898      	ldr	r0, [r3, #8]
 8010264:	683b      	ldr	r3, [r7, #0]
 8010266:	69db      	ldr	r3, [r3, #28]
 8010268:	68db      	ldr	r3, [r3, #12]
 801026a:	69fa      	ldr	r2, [r7, #28]
 801026c:	3204      	adds	r2, #4
 801026e:	9201      	str	r2, [sp, #4]
 8010270:	9300      	str	r3, [sp, #0]
 8010272:	4603      	mov	r3, r0
 8010274:	2201      	movs	r2, #1
 8010276:	6878      	ldr	r0, [r7, #4]
 8010278:	f7ff fbb0 	bl	800f9dc <tx_ip>
 801027c:	6138      	str	r0, [r7, #16]
                          sizeof(struct icmp) + plen);
    struct icmp *icmp = (struct icmp *) (ip + 1);
 801027e:	693b      	ldr	r3, [r7, #16]
 8010280:	3314      	adds	r3, #20
 8010282:	60fb      	str	r3, [r7, #12]
    memset(icmp, 0, sizeof(*icmp));        // Set csum to 0
 8010284:	2204      	movs	r2, #4
 8010286:	2100      	movs	r1, #0
 8010288:	68f8      	ldr	r0, [r7, #12]
 801028a:	f017 fa1d 	bl	80276c8 <memset>
    memcpy(icmp + 1, pkt->pay.buf, plen);  // Copy RX payload to TX
 801028e:	68fb      	ldr	r3, [r7, #12]
 8010290:	1d18      	adds	r0, r3, #4
 8010292:	683b      	ldr	r3, [r7, #0]
 8010294:	689b      	ldr	r3, [r3, #8]
 8010296:	69fa      	ldr	r2, [r7, #28]
 8010298:	4619      	mov	r1, r3
 801029a:	f017 fb4e 	bl	802793a <memcpy>
    icmp->csum = ipcsum(icmp, sizeof(*icmp) + plen);
 801029e:	69fb      	ldr	r3, [r7, #28]
 80102a0:	3304      	adds	r3, #4
 80102a2:	4619      	mov	r1, r3
 80102a4:	68f8      	ldr	r0, [r7, #12]
 80102a6:	f7ff f9f3 	bl	800f690 <ipcsum>
 80102aa:	4603      	mov	r3, r0
 80102ac:	461a      	mov	r2, r3
 80102ae:	68fb      	ldr	r3, [r7, #12]
 80102b0:	805a      	strh	r2, [r3, #2]
    ether_output(ifp, hlen + plen);
 80102b2:	69ba      	ldr	r2, [r7, #24]
 80102b4:	69fb      	ldr	r3, [r7, #28]
 80102b6:	4413      	add	r3, r2
 80102b8:	4619      	mov	r1, r3
 80102ba:	6878      	ldr	r0, [r7, #4]
 80102bc:	f7ff fa60 	bl	800f780 <ether_output>
  }
}
 80102c0:	bf00      	nop
 80102c2:	3720      	adds	r7, #32
 80102c4:	46bd      	mov	sp, r7
 80102c6:	bd80      	pop	{r7, pc}

080102c8 <rx_dhcp_client>:

static void rx_dhcp_client(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 80102c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80102cc:	b090      	sub	sp, #64	@ 0x40
 80102ce:	af00      	add	r7, sp, #0
 80102d0:	60f8      	str	r0, [r7, #12]
 80102d2:	60b9      	str	r1, [r7, #8]
  uint32_t ip = 0, gw = 0, mask = 0, lease = 0, dns = 0, sntp = 0;
 80102d4:	2300      	movs	r3, #0
 80102d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80102d8:	2300      	movs	r3, #0
 80102da:	62bb      	str	r3, [r7, #40]	@ 0x28
 80102dc:	2300      	movs	r3, #0
 80102de:	627b      	str	r3, [r7, #36]	@ 0x24
 80102e0:	2300      	movs	r3, #0
 80102e2:	623b      	str	r3, [r7, #32]
 80102e4:	2300      	movs	r3, #0
 80102e6:	61fb      	str	r3, [r7, #28]
 80102e8:	2300      	movs	r3, #0
 80102ea:	61bb      	str	r3, [r7, #24]
  uint8_t msgtype = 0, state = ifp->state;
 80102ec:	2300      	movs	r3, #0
 80102ee:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 80102f2:	68fb      	ldr	r3, [r7, #12]
 80102f4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80102f8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  // perform size check first, then access fields
  uint8_t *p = pkt->dhcp->options,
 80102fc:	68bb      	ldr	r3, [r7, #8]
 80102fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010300:	33f0      	adds	r3, #240	@ 0xf0
 8010302:	637b      	str	r3, [r7, #52]	@ 0x34
          *end = (uint8_t *) &pkt->raw.buf[pkt->raw.len];
 8010304:	68bb      	ldr	r3, [r7, #8]
 8010306:	681a      	ldr	r2, [r3, #0]
 8010308:	68bb      	ldr	r3, [r7, #8]
 801030a:	685b      	ldr	r3, [r3, #4]
 801030c:	4413      	add	r3, r2
 801030e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 8010310:	68bb      	ldr	r3, [r7, #8]
 8010312:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010314:	f503 738d 	add.w	r3, r3, #282	@ 0x11a
 8010318:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801031a:	429a      	cmp	r2, r3
 801031c:	f0c0 81ac 	bcc.w	8010678 <rx_dhcp_client+0x3b0>
  if (memcmp(&pkt->dhcp->xid, ifp->mac + 2, sizeof(pkt->dhcp->xid))) return;
 8010320:	68bb      	ldr	r3, [r7, #8]
 8010322:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010324:	1d18      	adds	r0, r3, #4
 8010326:	68fb      	ldr	r3, [r7, #12]
 8010328:	3302      	adds	r3, #2
 801032a:	2204      	movs	r2, #4
 801032c:	4619      	mov	r1, r3
 801032e:	f017 f9a1 	bl	8027674 <memcmp>
 8010332:	4603      	mov	r3, r0
 8010334:	2b00      	cmp	r3, #0
 8010336:	f040 81a1 	bne.w	801067c <rx_dhcp_client+0x3b4>
  while (p + 1 < end && p[0] != 255) {  // Parse options RFC-1533 #9
 801033a:	e08a      	b.n	8010452 <rx_dhcp_client+0x18a>
    if (p[0] == 1 && p[1] == sizeof(ifp->mask) && p + 6 < end) {  // Mask
 801033c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801033e:	781b      	ldrb	r3, [r3, #0]
 8010340:	2b01      	cmp	r3, #1
 8010342:	d10e      	bne.n	8010362 <rx_dhcp_client+0x9a>
 8010344:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010346:	3301      	adds	r3, #1
 8010348:	781b      	ldrb	r3, [r3, #0]
 801034a:	2b04      	cmp	r3, #4
 801034c:	d109      	bne.n	8010362 <rx_dhcp_client+0x9a>
 801034e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010350:	3306      	adds	r3, #6
 8010352:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010354:	429a      	cmp	r2, r3
 8010356:	d904      	bls.n	8010362 <rx_dhcp_client+0x9a>
      memcpy(&mask, p + 2, sizeof(mask));
 8010358:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801035a:	3302      	adds	r3, #2
 801035c:	681b      	ldr	r3, [r3, #0]
 801035e:	627b      	str	r3, [r7, #36]	@ 0x24
 8010360:	e070      	b.n	8010444 <rx_dhcp_client+0x17c>
    } else if (p[0] == 3 && p[1] == sizeof(ifp->gw) && p + 6 < end) {  // GW
 8010362:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010364:	781b      	ldrb	r3, [r3, #0]
 8010366:	2b03      	cmp	r3, #3
 8010368:	d112      	bne.n	8010390 <rx_dhcp_client+0xc8>
 801036a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801036c:	3301      	adds	r3, #1
 801036e:	781b      	ldrb	r3, [r3, #0]
 8010370:	2b04      	cmp	r3, #4
 8010372:	d10d      	bne.n	8010390 <rx_dhcp_client+0xc8>
 8010374:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010376:	3306      	adds	r3, #6
 8010378:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801037a:	429a      	cmp	r2, r3
 801037c:	d908      	bls.n	8010390 <rx_dhcp_client+0xc8>
      memcpy(&gw, p + 2, sizeof(gw));
 801037e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010380:	3302      	adds	r3, #2
 8010382:	681b      	ldr	r3, [r3, #0]
 8010384:	62bb      	str	r3, [r7, #40]	@ 0x28
      ip = pkt->dhcp->yiaddr;
 8010386:	68bb      	ldr	r3, [r7, #8]
 8010388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801038a:	691b      	ldr	r3, [r3, #16]
 801038c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801038e:	e059      	b.n	8010444 <rx_dhcp_client+0x17c>
    } else if (ifp->enable_req_dns && p[0] == 6 && p[1] == sizeof(dns) &&
 8010390:	68fb      	ldr	r3, [r7, #12]
 8010392:	7fdb      	ldrb	r3, [r3, #31]
 8010394:	2b00      	cmp	r3, #0
 8010396:	d012      	beq.n	80103be <rx_dhcp_client+0xf6>
 8010398:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801039a:	781b      	ldrb	r3, [r3, #0]
 801039c:	2b06      	cmp	r3, #6
 801039e:	d10e      	bne.n	80103be <rx_dhcp_client+0xf6>
 80103a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80103a2:	3301      	adds	r3, #1
 80103a4:	781b      	ldrb	r3, [r3, #0]
 80103a6:	2b04      	cmp	r3, #4
 80103a8:	d109      	bne.n	80103be <rx_dhcp_client+0xf6>
               p + 6 < end) {  // DNS
 80103aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80103ac:	3306      	adds	r3, #6
    } else if (ifp->enable_req_dns && p[0] == 6 && p[1] == sizeof(dns) &&
 80103ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80103b0:	429a      	cmp	r2, r3
 80103b2:	d904      	bls.n	80103be <rx_dhcp_client+0xf6>
      memcpy(&dns, p + 2, sizeof(dns));
 80103b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80103b6:	3302      	adds	r3, #2
 80103b8:	681b      	ldr	r3, [r3, #0]
 80103ba:	61fb      	str	r3, [r7, #28]
 80103bc:	e042      	b.n	8010444 <rx_dhcp_client+0x17c>
    } else if (ifp->enable_req_sntp && p[0] == 42 && p[1] == sizeof(sntp) &&
 80103be:	68fb      	ldr	r3, [r7, #12]
 80103c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	d012      	beq.n	80103ee <rx_dhcp_client+0x126>
 80103c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80103ca:	781b      	ldrb	r3, [r3, #0]
 80103cc:	2b2a      	cmp	r3, #42	@ 0x2a
 80103ce:	d10e      	bne.n	80103ee <rx_dhcp_client+0x126>
 80103d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80103d2:	3301      	adds	r3, #1
 80103d4:	781b      	ldrb	r3, [r3, #0]
 80103d6:	2b04      	cmp	r3, #4
 80103d8:	d109      	bne.n	80103ee <rx_dhcp_client+0x126>
               p + 6 < end) {  // SNTP
 80103da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80103dc:	3306      	adds	r3, #6
    } else if (ifp->enable_req_sntp && p[0] == 42 && p[1] == sizeof(sntp) &&
 80103de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80103e0:	429a      	cmp	r2, r3
 80103e2:	d904      	bls.n	80103ee <rx_dhcp_client+0x126>
      memcpy(&sntp, p + 2, sizeof(sntp));
 80103e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80103e6:	3302      	adds	r3, #2
 80103e8:	681b      	ldr	r3, [r3, #0]
 80103ea:	61bb      	str	r3, [r7, #24]
 80103ec:	e02a      	b.n	8010444 <rx_dhcp_client+0x17c>
    } else if (p[0] == 51 && p[1] == 4 && p + 6 < end) {  // Lease
 80103ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80103f0:	781b      	ldrb	r3, [r3, #0]
 80103f2:	2b33      	cmp	r3, #51	@ 0x33
 80103f4:	d114      	bne.n	8010420 <rx_dhcp_client+0x158>
 80103f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80103f8:	3301      	adds	r3, #1
 80103fa:	781b      	ldrb	r3, [r3, #0]
 80103fc:	2b04      	cmp	r3, #4
 80103fe:	d10f      	bne.n	8010420 <rx_dhcp_client+0x158>
 8010400:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010402:	3306      	adds	r3, #6
 8010404:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010406:	429a      	cmp	r2, r3
 8010408:	d90a      	bls.n	8010420 <rx_dhcp_client+0x158>
      memcpy(&lease, p + 2, sizeof(lease));
 801040a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801040c:	3302      	adds	r3, #2
 801040e:	681b      	ldr	r3, [r3, #0]
 8010410:	623b      	str	r3, [r7, #32]
      lease = mg_ntohl(lease);
 8010412:	6a3b      	ldr	r3, [r7, #32]
 8010414:	4618      	mov	r0, r3
 8010416:	f011 fcf6 	bl	8021e06 <mg_ntohl>
 801041a:	4603      	mov	r3, r0
 801041c:	623b      	str	r3, [r7, #32]
 801041e:	e011      	b.n	8010444 <rx_dhcp_client+0x17c>
    } else if (p[0] == 53 && p[1] == 1 && p + 6 < end) {  // Msg Type
 8010420:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010422:	781b      	ldrb	r3, [r3, #0]
 8010424:	2b35      	cmp	r3, #53	@ 0x35
 8010426:	d10d      	bne.n	8010444 <rx_dhcp_client+0x17c>
 8010428:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801042a:	3301      	adds	r3, #1
 801042c:	781b      	ldrb	r3, [r3, #0]
 801042e:	2b01      	cmp	r3, #1
 8010430:	d108      	bne.n	8010444 <rx_dhcp_client+0x17c>
 8010432:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010434:	3306      	adds	r3, #6
 8010436:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010438:	429a      	cmp	r2, r3
 801043a:	d903      	bls.n	8010444 <rx_dhcp_client+0x17c>
      msgtype = p[2];
 801043c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801043e:	789b      	ldrb	r3, [r3, #2]
 8010440:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
    }
    p += p[1] + 2;
 8010444:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010446:	3301      	adds	r3, #1
 8010448:	781b      	ldrb	r3, [r3, #0]
 801044a:	3302      	adds	r3, #2
 801044c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801044e:	4413      	add	r3, r2
 8010450:	637b      	str	r3, [r7, #52]	@ 0x34
  while (p + 1 < end && p[0] != 255) {  // Parse options RFC-1533 #9
 8010452:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010454:	3301      	adds	r3, #1
 8010456:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010458:	429a      	cmp	r2, r3
 801045a:	d904      	bls.n	8010466 <rx_dhcp_client+0x19e>
 801045c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801045e:	781b      	ldrb	r3, [r3, #0]
 8010460:	2bff      	cmp	r3, #255	@ 0xff
 8010462:	f47f af6b 	bne.w	801033c <rx_dhcp_client+0x74>
  }
  // Process message type, RFC-1533 (9.4); RFC-2131 (3.1, 4)
  if (msgtype == 6 && ifp->ip == ip) {  // DHCPNACK, release IP
 8010466:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 801046a:	2b06      	cmp	r3, #6
 801046c:	d10c      	bne.n	8010488 <rx_dhcp_client+0x1c0>
 801046e:	68fb      	ldr	r3, [r7, #12]
 8010470:	689b      	ldr	r3, [r3, #8]
 8010472:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8010474:	429a      	cmp	r2, r3
 8010476:	d107      	bne.n	8010488 <rx_dhcp_client+0x1c0>
    ifp->state = MG_TCPIP_STATE_UP, ifp->ip = 0;
 8010478:	68fb      	ldr	r3, [r7, #12]
 801047a:	2201      	movs	r2, #1
 801047c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 8010480:	68fb      	ldr	r3, [r7, #12]
 8010482:	2200      	movs	r2, #0
 8010484:	609a      	str	r2, [r3, #8]
 8010486:	e0ec      	b.n	8010662 <rx_dhcp_client+0x39a>
  } else if (msgtype == 2 && ifp->state == MG_TCPIP_STATE_UP && ip && gw &&
 8010488:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 801048c:	2b02      	cmp	r3, #2
 801048e:	d123      	bne.n	80104d8 <rx_dhcp_client+0x210>
 8010490:	68fb      	ldr	r3, [r7, #12]
 8010492:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010496:	2b01      	cmp	r3, #1
 8010498:	d11e      	bne.n	80104d8 <rx_dhcp_client+0x210>
 801049a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801049c:	2b00      	cmp	r3, #0
 801049e:	d01b      	beq.n	80104d8 <rx_dhcp_client+0x210>
 80104a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80104a2:	2b00      	cmp	r3, #0
 80104a4:	d018      	beq.n	80104d8 <rx_dhcp_client+0x210>
 80104a6:	6a3b      	ldr	r3, [r7, #32]
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	d015      	beq.n	80104d8 <rx_dhcp_client+0x210>
             lease) {  // DHCPOFFER
    // select IP, (4.4.1) (fallback to IP source addr on foul play)
    tx_dhcp_request_sel(ifp, ip,
                        pkt->dhcp->siaddr ? pkt->dhcp->siaddr : pkt->ip->src);
 80104ac:	68bb      	ldr	r3, [r7, #8]
 80104ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80104b0:	695b      	ldr	r3, [r3, #20]
    tx_dhcp_request_sel(ifp, ip,
 80104b2:	2b00      	cmp	r3, #0
 80104b4:	d003      	beq.n	80104be <rx_dhcp_client+0x1f6>
                        pkt->dhcp->siaddr ? pkt->dhcp->siaddr : pkt->ip->src);
 80104b6:	68bb      	ldr	r3, [r7, #8]
 80104b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    tx_dhcp_request_sel(ifp, ip,
 80104ba:	695b      	ldr	r3, [r3, #20]
 80104bc:	e002      	b.n	80104c4 <rx_dhcp_client+0x1fc>
                        pkt->dhcp->siaddr ? pkt->dhcp->siaddr : pkt->ip->src);
 80104be:	68bb      	ldr	r3, [r7, #8]
 80104c0:	69db      	ldr	r3, [r3, #28]
    tx_dhcp_request_sel(ifp, ip,
 80104c2:	68db      	ldr	r3, [r3, #12]
 80104c4:	461a      	mov	r2, r3
 80104c6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80104c8:	68f8      	ldr	r0, [r7, #12]
 80104ca:	f7ff fbd7 	bl	800fc7c <tx_dhcp_request_sel>
    ifp->state = MG_TCPIP_STATE_REQ;  // REQUESTING state
 80104ce:	68fb      	ldr	r3, [r7, #12]
 80104d0:	2202      	movs	r2, #2
 80104d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 80104d6:	e0c4      	b.n	8010662 <rx_dhcp_client+0x39a>
  } else if (msgtype == 5) {          // DHCPACK
 80104d8:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80104dc:	2b05      	cmp	r3, #5
 80104de:	f040 80c0 	bne.w	8010662 <rx_dhcp_client+0x39a>
    if (ifp->state == MG_TCPIP_STATE_REQ && ip && gw && lease) {  // got an IP
 80104e2:	68fb      	ldr	r3, [r7, #12]
 80104e4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80104e8:	2b02      	cmp	r3, #2
 80104ea:	f040 8081 	bne.w	80105f0 <rx_dhcp_client+0x328>
 80104ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80104f0:	2b00      	cmp	r3, #0
 80104f2:	d07d      	beq.n	80105f0 <rx_dhcp_client+0x328>
 80104f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80104f6:	2b00      	cmp	r3, #0
 80104f8:	d07a      	beq.n	80105f0 <rx_dhcp_client+0x328>
 80104fa:	6a3b      	ldr	r3, [r7, #32]
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	d077      	beq.n	80105f0 <rx_dhcp_client+0x328>
      ifp->lease_expire = ifp->now + lease * 1000;
 8010500:	68fb      	ldr	r3, [r7, #12]
 8010502:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 8010506:	6a39      	ldr	r1, [r7, #32]
 8010508:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 801050c:	fb00 f101 	mul.w	r1, r0, r1
 8010510:	2000      	movs	r0, #0
 8010512:	4688      	mov	r8, r1
 8010514:	4681      	mov	r9, r0
 8010516:	eb12 0108 	adds.w	r1, r2, r8
 801051a:	6039      	str	r1, [r7, #0]
 801051c:	eb43 0309 	adc.w	r3, r3, r9
 8010520:	607b      	str	r3, [r7, #4]
 8010522:	68fb      	ldr	r3, [r7, #12]
 8010524:	e9d7 1200 	ldrd	r1, r2, [r7]
 8010528:	e9c3 121a 	strd	r1, r2, [r3, #104]	@ 0x68
      MG_INFO(("Lease: %u sec (%lld)", lease, ifp->lease_expire / 1000));
 801052c:	4b56      	ldr	r3, [pc, #344]	@ (8010688 <rx_dhcp_client+0x3c0>)
 801052e:	681b      	ldr	r3, [r3, #0]
 8010530:	2b01      	cmp	r3, #1
 8010532:	dd16      	ble.n	8010562 <rx_dhcp_client+0x29a>
 8010534:	4b55      	ldr	r3, [pc, #340]	@ (801068c <rx_dhcp_client+0x3c4>)
 8010536:	f241 2202 	movw	r2, #4610	@ 0x1202
 801053a:	4955      	ldr	r1, [pc, #340]	@ (8010690 <rx_dhcp_client+0x3c8>)
 801053c:	2002      	movs	r0, #2
 801053e:	f7fe f9b1 	bl	800e8a4 <mg_log_prefix>
 8010542:	6a3c      	ldr	r4, [r7, #32]
 8010544:	68fb      	ldr	r3, [r7, #12]
 8010546:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	@ 0x68
 801054a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801054e:	f04f 0300 	mov.w	r3, #0
 8010552:	f7f0 f901 	bl	8000758 <__aeabi_uldivmod>
 8010556:	4602      	mov	r2, r0
 8010558:	460b      	mov	r3, r1
 801055a:	4621      	mov	r1, r4
 801055c:	484d      	ldr	r0, [pc, #308]	@ (8010694 <rx_dhcp_client+0x3cc>)
 801055e:	f7fe f9f1 	bl	800e944 <mg_log>
      // assume DHCP server = router until ARP resolves
      memcpy(ifp->gwmac, pkt->eth->src, sizeof(ifp->gwmac));
 8010562:	68fb      	ldr	r3, [r7, #12]
 8010564:	f103 0052 	add.w	r0, r3, #82	@ 0x52
 8010568:	68bb      	ldr	r3, [r7, #8]
 801056a:	691b      	ldr	r3, [r3, #16]
 801056c:	3306      	adds	r3, #6
 801056e:	2206      	movs	r2, #6
 8010570:	4619      	mov	r1, r3
 8010572:	f017 f9e2 	bl	802793a <memcpy>
      ifp->ip = ip, ifp->gw = gw, ifp->mask = mask;
 8010576:	68fb      	ldr	r3, [r7, #12]
 8010578:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801057a:	609a      	str	r2, [r3, #8]
 801057c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801057e:	68fb      	ldr	r3, [r7, #12]
 8010580:	611a      	str	r2, [r3, #16]
 8010582:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010584:	68fb      	ldr	r3, [r7, #12]
 8010586:	60da      	str	r2, [r3, #12]
      ifp->state = MG_TCPIP_STATE_IP;  // BOUND state
 8010588:	68fb      	ldr	r3, [r7, #12]
 801058a:	2203      	movs	r2, #3
 801058c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
      uint64_t rand;
      mg_random(&rand, sizeof(rand));
 8010590:	f107 0310 	add.w	r3, r7, #16
 8010594:	2108      	movs	r1, #8
 8010596:	4618      	mov	r0, r3
 8010598:	f7f0 faac 	bl	8000af4 <mg_random>
      srand((unsigned int) (rand + mg_millis()));
 801059c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80105a0:	4614      	mov	r4, r2
 80105a2:	f7f0 fad5 	bl	8000b50 <mg_millis>
 80105a6:	4602      	mov	r2, r0
 80105a8:	460b      	mov	r3, r1
 80105aa:	4613      	mov	r3, r2
 80105ac:	4423      	add	r3, r4
 80105ae:	4618      	mov	r0, r3
 80105b0:	f015 fab6 	bl	8025b20 <srand>
      if (ifp->enable_req_dns && dns != 0)
 80105b4:	68fb      	ldr	r3, [r7, #12]
 80105b6:	7fdb      	ldrb	r3, [r3, #31]
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	d009      	beq.n	80105d0 <rx_dhcp_client+0x308>
 80105bc:	69fb      	ldr	r3, [r7, #28]
 80105be:	2b00      	cmp	r3, #0
 80105c0:	d006      	beq.n	80105d0 <rx_dhcp_client+0x308>
        mg_tcpip_call(ifp, MG_TCPIP_EV_DHCP_DNS, &dns);
 80105c2:	f107 031c 	add.w	r3, r7, #28
 80105c6:	461a      	mov	r2, r3
 80105c8:	2101      	movs	r1, #1
 80105ca:	68f8      	ldr	r0, [r7, #12]
 80105cc:	f7fe ffe8 	bl	800f5a0 <mg_tcpip_call>
      if (ifp->enable_req_sntp && sntp != 0)
 80105d0:	68fb      	ldr	r3, [r7, #12]
 80105d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	d042      	beq.n	8010660 <rx_dhcp_client+0x398>
 80105da:	69bb      	ldr	r3, [r7, #24]
 80105dc:	2b00      	cmp	r3, #0
 80105de:	d03f      	beq.n	8010660 <rx_dhcp_client+0x398>
        mg_tcpip_call(ifp, MG_TCPIP_EV_DHCP_SNTP, &sntp);
 80105e0:	f107 0318 	add.w	r3, r7, #24
 80105e4:	461a      	mov	r2, r3
 80105e6:	2102      	movs	r1, #2
 80105e8:	68f8      	ldr	r0, [r7, #12]
 80105ea:	f7fe ffd9 	bl	800f5a0 <mg_tcpip_call>
    if (ifp->state == MG_TCPIP_STATE_REQ && ip && gw && lease) {  // got an IP
 80105ee:	e037      	b.n	8010660 <rx_dhcp_client+0x398>
    } else if (ifp->state == MG_TCPIP_STATE_READY && ifp->ip == ip) {  // renew
 80105f0:	68fb      	ldr	r3, [r7, #12]
 80105f2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80105f6:	2b04      	cmp	r3, #4
 80105f8:	d133      	bne.n	8010662 <rx_dhcp_client+0x39a>
 80105fa:	68fb      	ldr	r3, [r7, #12]
 80105fc:	689b      	ldr	r3, [r3, #8]
 80105fe:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8010600:	429a      	cmp	r2, r3
 8010602:	d12e      	bne.n	8010662 <rx_dhcp_client+0x39a>
      ifp->lease_expire = ifp->now + lease * 1000;
 8010604:	68fb      	ldr	r3, [r7, #12]
 8010606:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 801060a:	6a39      	ldr	r1, [r7, #32]
 801060c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8010610:	fb00 f101 	mul.w	r1, r0, r1
 8010614:	2000      	movs	r0, #0
 8010616:	460c      	mov	r4, r1
 8010618:	4605      	mov	r5, r0
 801061a:	eb12 0a04 	adds.w	sl, r2, r4
 801061e:	eb43 0b05 	adc.w	fp, r3, r5
 8010622:	68fb      	ldr	r3, [r7, #12]
 8010624:	e9c3 ab1a 	strd	sl, fp, [r3, #104]	@ 0x68
      MG_INFO(("Lease: %u sec (%lld)", lease, ifp->lease_expire / 1000));
 8010628:	4b17      	ldr	r3, [pc, #92]	@ (8010688 <rx_dhcp_client+0x3c0>)
 801062a:	681b      	ldr	r3, [r3, #0]
 801062c:	2b01      	cmp	r3, #1
 801062e:	dd18      	ble.n	8010662 <rx_dhcp_client+0x39a>
 8010630:	4b16      	ldr	r3, [pc, #88]	@ (801068c <rx_dhcp_client+0x3c4>)
 8010632:	f241 2210 	movw	r2, #4624	@ 0x1210
 8010636:	4916      	ldr	r1, [pc, #88]	@ (8010690 <rx_dhcp_client+0x3c8>)
 8010638:	2002      	movs	r0, #2
 801063a:	f7fe f933 	bl	800e8a4 <mg_log_prefix>
 801063e:	6a3c      	ldr	r4, [r7, #32]
 8010640:	68fb      	ldr	r3, [r7, #12]
 8010642:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	@ 0x68
 8010646:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801064a:	f04f 0300 	mov.w	r3, #0
 801064e:	f7f0 f883 	bl	8000758 <__aeabi_uldivmod>
 8010652:	4602      	mov	r2, r0
 8010654:	460b      	mov	r3, r1
 8010656:	4621      	mov	r1, r4
 8010658:	480e      	ldr	r0, [pc, #56]	@ (8010694 <rx_dhcp_client+0x3cc>)
 801065a:	f7fe f973 	bl	800e944 <mg_log>
 801065e:	e000      	b.n	8010662 <rx_dhcp_client+0x39a>
    if (ifp->state == MG_TCPIP_STATE_REQ && ip && gw && lease) {  // got an IP
 8010660:	bf00      	nop
    }  // TODO(): accept provided T1/T2 and store server IP for renewal (4.4)
  }
  if (ifp->state != state) onstatechange(ifp);
 8010662:	68fb      	ldr	r3, [r7, #12]
 8010664:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010668:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 801066c:	429a      	cmp	r2, r3
 801066e:	d006      	beq.n	801067e <rx_dhcp_client+0x3b6>
 8010670:	68f8      	ldr	r0, [r7, #12]
 8010672:	f7ff f909 	bl	800f888 <onstatechange>
 8010676:	e002      	b.n	801067e <rx_dhcp_client+0x3b6>
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 8010678:	bf00      	nop
 801067a:	e000      	b.n	801067e <rx_dhcp_client+0x3b6>
  if (memcmp(&pkt->dhcp->xid, ifp->mac + 2, sizeof(pkt->dhcp->xid))) return;
 801067c:	bf00      	nop
}
 801067e:	3740      	adds	r7, #64	@ 0x40
 8010680:	46bd      	mov	sp, r7
 8010682:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8010686:	bf00      	nop
 8010688:	24000258 	.word	0x24000258
 801068c:	0802d904 	.word	0x0802d904
 8010690:	08029c3c 	.word	0x08029c3c
 8010694:	0802ae84 	.word	0x0802ae84

08010698 <rx_dhcp_server>:

// Simple DHCP server that assigns a next IP address: ifp->ip + 1
static void rx_dhcp_server(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 8010698:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801069c:	b0d8      	sub	sp, #352	@ 0x160
 801069e:	af04      	add	r7, sp, #16
 80106a0:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80106a4:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80106a8:	6018      	str	r0, [r3, #0]
 80106aa:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80106ae:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80106b2:	6019      	str	r1, [r3, #0]
  uint8_t op = 0, *p = pkt->dhcp->options,
 80106b4:	2300      	movs	r3, #0
 80106b6:	f887 314f 	strb.w	r3, [r7, #335]	@ 0x14f
 80106ba:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80106be:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80106c2:	681b      	ldr	r3, [r3, #0]
 80106c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80106c6:	33f0      	adds	r3, #240	@ 0xf0
 80106c8:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
          *end = (uint8_t *) &pkt->raw.buf[pkt->raw.len];
 80106cc:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80106d0:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80106d4:	681b      	ldr	r3, [r3, #0]
 80106d6:	681a      	ldr	r2, [r3, #0]
 80106d8:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80106dc:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80106e0:	681b      	ldr	r3, [r3, #0]
 80106e2:	685b      	ldr	r3, [r3, #4]
 80106e4:	4413      	add	r3, r2
 80106e6:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 80106ea:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80106ee:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80106f2:	681b      	ldr	r3, [r3, #0]
 80106f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80106f6:	f503 738d 	add.w	r3, r3, #282	@ 0x11a
 80106fa:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 80106fe:	429a      	cmp	r2, r3
 8010700:	f0c0 81b0 	bcc.w	8010a64 <rx_dhcp_server+0x3cc>
  // struct dhcp *req = pkt->dhcp;
  struct dhcp res = {2, 1, 6, 0, 0, 0, 0, 0, 0, 0, 0, {0}, 0, {0}};
 8010704:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8010708:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 801070c:	4ad8      	ldr	r2, [pc, #864]	@ (8010a70 <rx_dhcp_server+0x3d8>)
 801070e:	4618      	mov	r0, r3
 8010710:	4611      	mov	r1, r2
 8010712:	f44f 738d 	mov.w	r3, #282	@ 0x11a
 8010716:	461a      	mov	r2, r3
 8010718:	f017 f90f 	bl	802793a <memcpy>
  res.yiaddr = ifp->ip;
 801071c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8010720:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8010724:	681b      	ldr	r3, [r3, #0]
 8010726:	689a      	ldr	r2, [r3, #8]
 8010728:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 801072c:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8010730:	611a      	str	r2, [r3, #16]
  ((uint8_t *) (&res.yiaddr))[3]++;                // Offer our IP + 1
 8010732:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8010736:	3310      	adds	r3, #16
 8010738:	3303      	adds	r3, #3
 801073a:	781a      	ldrb	r2, [r3, #0]
 801073c:	3201      	adds	r2, #1
 801073e:	b2d2      	uxtb	r2, r2
 8010740:	701a      	strb	r2, [r3, #0]
  while (p + 1 < end && p[0] != 255) {             // Parse options
 8010742:	e020      	b.n	8010786 <rx_dhcp_server+0xee>
    if (p[0] == 53 && p[1] == 1 && p + 2 < end) {  // Message type
 8010744:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8010748:	781b      	ldrb	r3, [r3, #0]
 801074a:	2b35      	cmp	r3, #53	@ 0x35
 801074c:	d111      	bne.n	8010772 <rx_dhcp_server+0xda>
 801074e:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8010752:	3301      	adds	r3, #1
 8010754:	781b      	ldrb	r3, [r3, #0]
 8010756:	2b01      	cmp	r3, #1
 8010758:	d10b      	bne.n	8010772 <rx_dhcp_server+0xda>
 801075a:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 801075e:	3302      	adds	r3, #2
 8010760:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8010764:	429a      	cmp	r2, r3
 8010766:	d904      	bls.n	8010772 <rx_dhcp_server+0xda>
      op = p[2];
 8010768:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 801076c:	789b      	ldrb	r3, [r3, #2]
 801076e:	f887 314f 	strb.w	r3, [r7, #335]	@ 0x14f
    }
    p += p[1] + 2;
 8010772:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8010776:	3301      	adds	r3, #1
 8010778:	781b      	ldrb	r3, [r3, #0]
 801077a:	3302      	adds	r3, #2
 801077c:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8010780:	4413      	add	r3, r2
 8010782:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
  while (p + 1 < end && p[0] != 255) {             // Parse options
 8010786:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 801078a:	3301      	adds	r3, #1
 801078c:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8010790:	429a      	cmp	r2, r3
 8010792:	d904      	bls.n	801079e <rx_dhcp_server+0x106>
 8010794:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8010798:	781b      	ldrb	r3, [r3, #0]
 801079a:	2bff      	cmp	r3, #255	@ 0xff
 801079c:	d1d2      	bne.n	8010744 <rx_dhcp_server+0xac>
  }
  if (op == 1 || op == 3) {         // DHCP Discover or DHCP Request
 801079e:	f897 314f 	ldrb.w	r3, [r7, #335]	@ 0x14f
 80107a2:	2b01      	cmp	r3, #1
 80107a4:	d004      	beq.n	80107b0 <rx_dhcp_server+0x118>
 80107a6:	f897 314f 	ldrb.w	r3, [r7, #335]	@ 0x14f
 80107aa:	2b03      	cmp	r3, #3
 80107ac:	f040 815b 	bne.w	8010a66 <rx_dhcp_server+0x3ce>
    uint8_t msg = op == 1 ? 2 : 5;  // Message type: DHCP OFFER or DHCP ACK
 80107b0:	f897 314f 	ldrb.w	r3, [r7, #335]	@ 0x14f
 80107b4:	2b01      	cmp	r3, #1
 80107b6:	d101      	bne.n	80107bc <rx_dhcp_server+0x124>
 80107b8:	2302      	movs	r3, #2
 80107ba:	e000      	b.n	80107be <rx_dhcp_server+0x126>
 80107bc:	2305      	movs	r3, #5
 80107be:	f887 3143 	strb.w	r3, [r7, #323]	@ 0x143
    uint8_t opts[] = {
 80107c2:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80107c6:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80107ca:	2235      	movs	r2, #53	@ 0x35
 80107cc:	701a      	strb	r2, [r3, #0]
 80107ce:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80107d2:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80107d6:	2201      	movs	r2, #1
 80107d8:	705a      	strb	r2, [r3, #1]
 80107da:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80107de:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80107e2:	f897 2143 	ldrb.w	r2, [r7, #323]	@ 0x143
 80107e6:	709a      	strb	r2, [r3, #2]
 80107e8:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80107ec:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80107f0:	2201      	movs	r2, #1
 80107f2:	70da      	strb	r2, [r3, #3]
 80107f4:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80107f8:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80107fc:	2204      	movs	r2, #4
 80107fe:	711a      	strb	r2, [r3, #4]
 8010800:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8010804:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8010808:	2200      	movs	r2, #0
 801080a:	715a      	strb	r2, [r3, #5]
 801080c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8010810:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8010814:	2200      	movs	r2, #0
 8010816:	719a      	strb	r2, [r3, #6]
 8010818:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 801081c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8010820:	2200      	movs	r2, #0
 8010822:	71da      	strb	r2, [r3, #7]
 8010824:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8010828:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 801082c:	2200      	movs	r2, #0
 801082e:	721a      	strb	r2, [r3, #8]
 8010830:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8010834:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8010838:	2236      	movs	r2, #54	@ 0x36
 801083a:	725a      	strb	r2, [r3, #9]
 801083c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8010840:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8010844:	2204      	movs	r2, #4
 8010846:	729a      	strb	r2, [r3, #10]
 8010848:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 801084c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8010850:	2200      	movs	r2, #0
 8010852:	72da      	strb	r2, [r3, #11]
 8010854:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8010858:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 801085c:	2200      	movs	r2, #0
 801085e:	731a      	strb	r2, [r3, #12]
 8010860:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8010864:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8010868:	2200      	movs	r2, #0
 801086a:	735a      	strb	r2, [r3, #13]
 801086c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8010870:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8010874:	2200      	movs	r2, #0
 8010876:	739a      	strb	r2, [r3, #14]
 8010878:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 801087c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8010880:	220c      	movs	r2, #12
 8010882:	73da      	strb	r2, [r3, #15]
 8010884:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8010888:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 801088c:	2203      	movs	r2, #3
 801088e:	741a      	strb	r2, [r3, #16]
 8010890:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8010894:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8010898:	226d      	movs	r2, #109	@ 0x6d
 801089a:	745a      	strb	r2, [r3, #17]
 801089c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80108a0:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80108a4:	2269      	movs	r2, #105	@ 0x69
 80108a6:	749a      	strb	r2, [r3, #18]
 80108a8:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80108ac:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80108b0:	2270      	movs	r2, #112	@ 0x70
 80108b2:	74da      	strb	r2, [r3, #19]
 80108b4:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80108b8:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80108bc:	2233      	movs	r2, #51	@ 0x33
 80108be:	751a      	strb	r2, [r3, #20]
 80108c0:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80108c4:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80108c8:	2204      	movs	r2, #4
 80108ca:	755a      	strb	r2, [r3, #21]
 80108cc:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80108d0:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80108d4:	22ff      	movs	r2, #255	@ 0xff
 80108d6:	759a      	strb	r2, [r3, #22]
 80108d8:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80108dc:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80108e0:	22ff      	movs	r2, #255	@ 0xff
 80108e2:	75da      	strb	r2, [r3, #23]
 80108e4:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80108e8:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80108ec:	22ff      	movs	r2, #255	@ 0xff
 80108ee:	761a      	strb	r2, [r3, #24]
 80108f0:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80108f4:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80108f8:	22ff      	movs	r2, #255	@ 0xff
 80108fa:	765a      	strb	r2, [r3, #25]
 80108fc:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8010900:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8010904:	22ff      	movs	r2, #255	@ 0xff
 8010906:	769a      	strb	r2, [r3, #26]
        54, 4, 0,   0,   0,   0,    // Server ID
        12, 3, 'm', 'i', 'p',       // Host name: "mip"
        51, 4, 255, 255, 255, 255,  // Lease time
        255                         // End of options
    };
    memcpy(&res.hwaddr, pkt->dhcp->hwaddr, 6);
 8010908:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 801090c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8010910:	681b      	ldr	r3, [r3, #0]
 8010912:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010914:	f103 011c 	add.w	r1, r3, #28
 8010918:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801091c:	331c      	adds	r3, #28
 801091e:	2206      	movs	r2, #6
 8010920:	4618      	mov	r0, r3
 8010922:	f017 f80a 	bl	802793a <memcpy>
    memcpy(opts + 5, &ifp->mask, sizeof(ifp->mask));
 8010926:	f107 030c 	add.w	r3, r7, #12
 801092a:	3305      	adds	r3, #5
 801092c:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 8010930:	f5a2 72a6 	sub.w	r2, r2, #332	@ 0x14c
 8010934:	6812      	ldr	r2, [r2, #0]
 8010936:	320c      	adds	r2, #12
 8010938:	6812      	ldr	r2, [r2, #0]
 801093a:	601a      	str	r2, [r3, #0]
    memcpy(opts + 11, &ifp->ip, sizeof(ifp->ip));
 801093c:	f107 030c 	add.w	r3, r7, #12
 8010940:	330b      	adds	r3, #11
 8010942:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 8010946:	f5a2 72a6 	sub.w	r2, r2, #332	@ 0x14c
 801094a:	6812      	ldr	r2, [r2, #0]
 801094c:	3208      	adds	r2, #8
 801094e:	6812      	ldr	r2, [r2, #0]
 8010950:	601a      	str	r2, [r3, #0]
    memcpy(&res.options, opts, sizeof(opts));
 8010952:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8010956:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 801095a:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 801095e:	f5a2 72a2 	sub.w	r2, r2, #324	@ 0x144
 8010962:	f103 04f0 	add.w	r4, r3, #240	@ 0xf0
 8010966:	4615      	mov	r5, r2
 8010968:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801096a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801096c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8010970:	c403      	stmia	r4!, {r0, r1}
 8010972:	8022      	strh	r2, [r4, #0]
 8010974:	3402      	adds	r4, #2
 8010976:	0c13      	lsrs	r3, r2, #16
 8010978:	7023      	strb	r3, [r4, #0]
    res.magic = pkt->dhcp->magic;
 801097a:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 801097e:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8010982:	681b      	ldr	r3, [r3, #0]
 8010984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010986:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
 801098a:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 801098e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8010992:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
    res.xid = pkt->dhcp->xid;
 8010996:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 801099a:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 801099e:	681b      	ldr	r3, [r3, #0]
 80109a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80109a2:	685a      	ldr	r2, [r3, #4]
 80109a4:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80109a8:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80109ac:	605a      	str	r2, [r3, #4]
    if (ifp->enable_get_gateway) {
 80109ae:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80109b2:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80109b6:	681b      	ldr	r3, [r3, #0]
 80109b8:	7f9b      	ldrb	r3, [r3, #30]
 80109ba:	2b00      	cmp	r3, #0
 80109bc:	d01c      	beq.n	80109f8 <rx_dhcp_server+0x360>
      ifp->gw = res.yiaddr;  // set gw IP, best-effort gwmac as DHCP server's
 80109be:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80109c2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80109c6:	691a      	ldr	r2, [r3, #16]
 80109c8:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80109cc:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80109d0:	681b      	ldr	r3, [r3, #0]
 80109d2:	611a      	str	r2, [r3, #16]
      memcpy(ifp->gwmac, pkt->eth->src, sizeof(ifp->gwmac));
 80109d4:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80109d8:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80109dc:	681b      	ldr	r3, [r3, #0]
 80109de:	f103 0052 	add.w	r0, r3, #82	@ 0x52
 80109e2:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80109e6:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80109ea:	681b      	ldr	r3, [r3, #0]
 80109ec:	691b      	ldr	r3, [r3, #16]
 80109ee:	3306      	adds	r3, #6
 80109f0:	2206      	movs	r2, #6
 80109f2:	4619      	mov	r1, r3
 80109f4:	f016 ffa1 	bl	802793a <memcpy>
    }
    tx_udp(ifp, pkt->eth->src, ifp->ip, mg_htons(67),
 80109f8:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80109fc:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8010a00:	681b      	ldr	r3, [r3, #0]
 8010a02:	691b      	ldr	r3, [r3, #16]
 8010a04:	1d9d      	adds	r5, r3, #6
 8010a06:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8010a0a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8010a0e:	681b      	ldr	r3, [r3, #0]
 8010a10:	689e      	ldr	r6, [r3, #8]
 8010a12:	2043      	movs	r0, #67	@ 0x43
 8010a14:	f011 f9e0 	bl	8021dd8 <mg_ntohs>
 8010a18:	4603      	mov	r3, r0
 8010a1a:	4698      	mov	r8, r3
 8010a1c:	f897 314f 	ldrb.w	r3, [r7, #335]	@ 0x14f
 8010a20:	2b01      	cmp	r3, #1
 8010a22:	d005      	beq.n	8010a30 <rx_dhcp_server+0x398>
 8010a24:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8010a28:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8010a2c:	691c      	ldr	r4, [r3, #16]
 8010a2e:	e001      	b.n	8010a34 <rx_dhcp_server+0x39c>
 8010a30:	f04f 34ff 	mov.w	r4, #4294967295
 8010a34:	2044      	movs	r0, #68	@ 0x44
 8010a36:	f011 f9cf 	bl	8021dd8 <mg_ntohs>
 8010a3a:	4603      	mov	r3, r0
 8010a3c:	461a      	mov	r2, r3
 8010a3e:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8010a42:	f5a3 70a6 	sub.w	r0, r3, #332	@ 0x14c
 8010a46:	f44f 738d 	mov.w	r3, #282	@ 0x11a
 8010a4a:	9303      	str	r3, [sp, #12]
 8010a4c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8010a50:	9302      	str	r3, [sp, #8]
 8010a52:	9201      	str	r2, [sp, #4]
 8010a54:	9400      	str	r4, [sp, #0]
 8010a56:	4643      	mov	r3, r8
 8010a58:	4632      	mov	r2, r6
 8010a5a:	4629      	mov	r1, r5
 8010a5c:	6800      	ldr	r0, [r0, #0]
 8010a5e:	f7ff f814 	bl	800fa8a <tx_udp>
 8010a62:	e000      	b.n	8010a66 <rx_dhcp_server+0x3ce>
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 8010a64:	bf00      	nop
           op == 1 ? ~0U : res.yiaddr, mg_htons(68), &res, sizeof(res));
  }
}
 8010a66:	f507 77a8 	add.w	r7, r7, #336	@ 0x150
 8010a6a:	46bd      	mov	sp, r7
 8010a6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a70:	0802ae9c 	.word	0x0802ae9c

08010a74 <rx_udp>:

static void rx_udp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 8010a74:	b580      	push	{r7, lr}
 8010a76:	b084      	sub	sp, #16
 8010a78:	af00      	add	r7, sp, #0
 8010a7a:	6078      	str	r0, [r7, #4]
 8010a7c:	6039      	str	r1, [r7, #0]
  struct mg_connection *c = getpeer(ifp->mgr, pkt, true);
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010a82:	2201      	movs	r2, #1
 8010a84:	6839      	ldr	r1, [r7, #0]
 8010a86:	4618      	mov	r0, r3
 8010a88:	f7ff fa3e 	bl	800ff08 <getpeer>
 8010a8c:	60f8      	str	r0, [r7, #12]
  if (c == NULL) {
 8010a8e:	68fb      	ldr	r3, [r7, #12]
 8010a90:	2b00      	cmp	r3, #0
 8010a92:	d059      	beq.n	8010b48 <rx_udp+0xd4>
    // No UDP listener on this port. Should send ICMP, but keep silent.
  } else {
    c->rem.port = pkt->udp->sport;
 8010a94:	683b      	ldr	r3, [r7, #0]
 8010a96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010a98:	881b      	ldrh	r3, [r3, #0]
 8010a9a:	b29a      	uxth	r2, r3
 8010a9c:	68fb      	ldr	r3, [r7, #12]
 8010a9e:	859a      	strh	r2, [r3, #44]	@ 0x2c
    memcpy(c->rem.ip, &pkt->ip->src, sizeof(uint32_t));
 8010aa0:	68fb      	ldr	r3, [r7, #12]
 8010aa2:	331c      	adds	r3, #28
 8010aa4:	683a      	ldr	r2, [r7, #0]
 8010aa6:	69d2      	ldr	r2, [r2, #28]
 8010aa8:	320c      	adds	r2, #12
 8010aaa:	6812      	ldr	r2, [r2, #0]
 8010aac:	601a      	str	r2, [r3, #0]
    struct connstate *s = (struct connstate *) (c + 1);
 8010aae:	68fb      	ldr	r3, [r7, #12]
 8010ab0:	33b0      	adds	r3, #176	@ 0xb0
 8010ab2:	60bb      	str	r3, [r7, #8]
    memcpy(s->mac, pkt->eth->src, sizeof(s->mac));
 8010ab4:	68bb      	ldr	r3, [r7, #8]
 8010ab6:	f103 001a 	add.w	r0, r3, #26
 8010aba:	683b      	ldr	r3, [r7, #0]
 8010abc:	691b      	ldr	r3, [r3, #16]
 8010abe:	3306      	adds	r3, #6
 8010ac0:	2206      	movs	r2, #6
 8010ac2:	4619      	mov	r1, r3
 8010ac4:	f016 ff39 	bl	802793a <memcpy>
    if (c->recv.len >= MG_MAX_RECV_SIZE) {
 8010ac8:	68fb      	ldr	r3, [r7, #12]
 8010aca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010acc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8010ad0:	d304      	bcc.n	8010adc <rx_udp+0x68>
      mg_error(c, "max_recv_buf_size reached");
 8010ad2:	491f      	ldr	r1, [pc, #124]	@ (8010b50 <rx_udp+0xdc>)
 8010ad4:	68f8      	ldr	r0, [r7, #12]
 8010ad6:	f7f8 f86d 	bl	8008bb4 <mg_error>
      memcpy(&c->recv.buf[c->recv.len], pkt->pay.buf, pkt->pay.len);
      c->recv.len += pkt->pay.len;
      mg_call(c, MG_EV_READ, &pkt->pay.len);
    }
  }
}
 8010ada:	e035      	b.n	8010b48 <rx_udp+0xd4>
    } else if (c->recv.size - c->recv.len < pkt->pay.len &&
 8010adc:	68fb      	ldr	r3, [r7, #12]
 8010ade:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8010ae0:	68fb      	ldr	r3, [r7, #12]
 8010ae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010ae4:	1ad2      	subs	r2, r2, r3
 8010ae6:	683b      	ldr	r3, [r7, #0]
 8010ae8:	68db      	ldr	r3, [r3, #12]
 8010aea:	429a      	cmp	r2, r3
 8010aec:	d212      	bcs.n	8010b14 <rx_udp+0xa0>
               !mg_iobuf_resize(&c->recv, c->recv.len + pkt->pay.len)) {
 8010aee:	68fb      	ldr	r3, [r7, #12]
 8010af0:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8010af4:	68fb      	ldr	r3, [r7, #12]
 8010af6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8010af8:	683b      	ldr	r3, [r7, #0]
 8010afa:	68db      	ldr	r3, [r3, #12]
 8010afc:	4413      	add	r3, r2
 8010afe:	4619      	mov	r1, r3
 8010b00:	f7fc fdda 	bl	800d6b8 <mg_iobuf_resize>
 8010b04:	4603      	mov	r3, r0
    } else if (c->recv.size - c->recv.len < pkt->pay.len &&
 8010b06:	2b00      	cmp	r3, #0
 8010b08:	d104      	bne.n	8010b14 <rx_udp+0xa0>
      mg_error(c, "oom");
 8010b0a:	4912      	ldr	r1, [pc, #72]	@ (8010b54 <rx_udp+0xe0>)
 8010b0c:	68f8      	ldr	r0, [r7, #12]
 8010b0e:	f7f8 f851 	bl	8008bb4 <mg_error>
}
 8010b12:	e019      	b.n	8010b48 <rx_udp+0xd4>
      memcpy(&c->recv.buf[c->recv.len], pkt->pay.buf, pkt->pay.len);
 8010b14:	68fb      	ldr	r3, [r7, #12]
 8010b16:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010b18:	68fb      	ldr	r3, [r7, #12]
 8010b1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010b1c:	18d0      	adds	r0, r2, r3
 8010b1e:	683b      	ldr	r3, [r7, #0]
 8010b20:	6899      	ldr	r1, [r3, #8]
 8010b22:	683b      	ldr	r3, [r7, #0]
 8010b24:	68db      	ldr	r3, [r3, #12]
 8010b26:	461a      	mov	r2, r3
 8010b28:	f016 ff07 	bl	802793a <memcpy>
      c->recv.len += pkt->pay.len;
 8010b2c:	68fb      	ldr	r3, [r7, #12]
 8010b2e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8010b30:	683b      	ldr	r3, [r7, #0]
 8010b32:	68db      	ldr	r3, [r3, #12]
 8010b34:	441a      	add	r2, r3
 8010b36:	68fb      	ldr	r3, [r7, #12]
 8010b38:	641a      	str	r2, [r3, #64]	@ 0x40
      mg_call(c, MG_EV_READ, &pkt->pay.len);
 8010b3a:	683b      	ldr	r3, [r7, #0]
 8010b3c:	330c      	adds	r3, #12
 8010b3e:	461a      	mov	r2, r3
 8010b40:	2107      	movs	r1, #7
 8010b42:	68f8      	ldr	r0, [r7, #12]
 8010b44:	f7f8 f816 	bl	8008b74 <mg_call>
}
 8010b48:	bf00      	nop
 8010b4a:	3710      	adds	r7, #16
 8010b4c:	46bd      	mov	sp, r7
 8010b4e:	bd80      	pop	{r7, pc}
 8010b50:	0802afb8 	.word	0x0802afb8
 8010b54:	0802afd4 	.word	0x0802afd4

08010b58 <tx_tcp>:

static size_t tx_tcp(struct mg_tcpip_if *ifp, uint8_t *dst_mac, uint32_t dst_ip,
                     uint8_t flags, uint16_t sport, uint16_t dport,
                     uint32_t seq, uint32_t ack, const void *buf, size_t len) {
 8010b58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010b5a:	b091      	sub	sp, #68	@ 0x44
 8010b5c:	af06      	add	r7, sp, #24
 8010b5e:	60f8      	str	r0, [r7, #12]
 8010b60:	60b9      	str	r1, [r7, #8]
 8010b62:	607a      	str	r2, [r7, #4]
 8010b64:	70fb      	strb	r3, [r7, #3]
  struct ip *ip;
  struct tcp *tcp;
  uint16_t opts[4 / 2];
  if (flags & TH_SYN) {                 // Send MSS, RFC-9293 3.7.1
 8010b66:	78fb      	ldrb	r3, [r7, #3]
 8010b68:	f003 0302 	and.w	r3, r3, #2
 8010b6c:	2b00      	cmp	r3, #0
 8010b6e:	d014      	beq.n	8010b9a <tx_tcp+0x42>
    opts[0] = mg_htons(0x0204);         // RFC-9293 3.2
 8010b70:	f44f 7001 	mov.w	r0, #516	@ 0x204
 8010b74:	f011 f930 	bl	8021dd8 <mg_ntohs>
 8010b78:	4603      	mov	r3, r0
 8010b7a:	82bb      	strh	r3, [r7, #20]
    opts[1] = mg_htons(ifp->mtu - 40);  // RFC-6691
 8010b7c:	68fb      	ldr	r3, [r7, #12]
 8010b7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8010b82:	3b28      	subs	r3, #40	@ 0x28
 8010b84:	b29b      	uxth	r3, r3
 8010b86:	4618      	mov	r0, r3
 8010b88:	f011 f926 	bl	8021dd8 <mg_ntohs>
 8010b8c:	4603      	mov	r3, r0
 8010b8e:	82fb      	strh	r3, [r7, #22]
    buf = opts;
 8010b90:	f107 0314 	add.w	r3, r7, #20
 8010b94:	653b      	str	r3, [r7, #80]	@ 0x50
    len = sizeof(opts);
 8010b96:	2304      	movs	r3, #4
 8010b98:	657b      	str	r3, [r7, #84]	@ 0x54
  }
  ip = tx_ip(ifp, dst_mac, 6, ifp->ip, dst_ip, sizeof(struct tcp) + len);
 8010b9a:	68fb      	ldr	r3, [r7, #12]
 8010b9c:	689a      	ldr	r2, [r3, #8]
 8010b9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010ba0:	3314      	adds	r3, #20
 8010ba2:	9301      	str	r3, [sp, #4]
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	9300      	str	r3, [sp, #0]
 8010ba8:	4613      	mov	r3, r2
 8010baa:	2206      	movs	r2, #6
 8010bac:	68b9      	ldr	r1, [r7, #8]
 8010bae:	68f8      	ldr	r0, [r7, #12]
 8010bb0:	f7fe ff14 	bl	800f9dc <tx_ip>
 8010bb4:	6278      	str	r0, [r7, #36]	@ 0x24
  tcp = (struct tcp *) (ip + 1);
 8010bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010bb8:	3314      	adds	r3, #20
 8010bba:	623b      	str	r3, [r7, #32]
  memset(tcp, 0, sizeof(*tcp));
 8010bbc:	2214      	movs	r2, #20
 8010bbe:	2100      	movs	r1, #0
 8010bc0:	6a38      	ldr	r0, [r7, #32]
 8010bc2:	f016 fd81 	bl	80276c8 <memset>
  if (buf != NULL && len) memmove(tcp + 1, buf, len);
 8010bc6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010bc8:	2b00      	cmp	r3, #0
 8010bca:	d009      	beq.n	8010be0 <tx_tcp+0x88>
 8010bcc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010bce:	2b00      	cmp	r3, #0
 8010bd0:	d006      	beq.n	8010be0 <tx_tcp+0x88>
 8010bd2:	6a3b      	ldr	r3, [r7, #32]
 8010bd4:	3314      	adds	r3, #20
 8010bd6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8010bd8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8010bda:	4618      	mov	r0, r3
 8010bdc:	f016 fd5a 	bl	8027694 <memmove>
  tcp->sport = sport;
 8010be0:	6a3b      	ldr	r3, [r7, #32]
 8010be2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8010be6:	801a      	strh	r2, [r3, #0]
  tcp->dport = dport;
 8010be8:	6a3b      	ldr	r3, [r7, #32]
 8010bea:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8010bee:	805a      	strh	r2, [r3, #2]
  tcp->seq = seq;
 8010bf0:	6a3b      	ldr	r3, [r7, #32]
 8010bf2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010bf4:	605a      	str	r2, [r3, #4]
  tcp->ack = ack;
 8010bf6:	6a3b      	ldr	r3, [r7, #32]
 8010bf8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8010bfa:	609a      	str	r2, [r3, #8]
  tcp->flags = flags;
 8010bfc:	6a3b      	ldr	r3, [r7, #32]
 8010bfe:	78fa      	ldrb	r2, [r7, #3]
 8010c00:	735a      	strb	r2, [r3, #13]
  tcp->win = mg_htons(MIP_TCP_WIN);
 8010c02:	f241 7070 	movw	r0, #6000	@ 0x1770
 8010c06:	f011 f8e7 	bl	8021dd8 <mg_ntohs>
 8010c0a:	4603      	mov	r3, r0
 8010c0c:	461a      	mov	r2, r3
 8010c0e:	6a3b      	ldr	r3, [r7, #32]
 8010c10:	81da      	strh	r2, [r3, #14]
  tcp->off = (uint8_t) (sizeof(*tcp) / 4 << 4);
 8010c12:	6a3b      	ldr	r3, [r7, #32]
 8010c14:	2250      	movs	r2, #80	@ 0x50
 8010c16:	731a      	strb	r2, [r3, #12]
  if (flags & TH_SYN) tcp->off += (uint8_t) (sizeof(opts) / 4 << 4);
 8010c18:	78fb      	ldrb	r3, [r7, #3]
 8010c1a:	f003 0302 	and.w	r3, r3, #2
 8010c1e:	2b00      	cmp	r3, #0
 8010c20:	d005      	beq.n	8010c2e <tx_tcp+0xd6>
 8010c22:	6a3b      	ldr	r3, [r7, #32]
 8010c24:	7b1b      	ldrb	r3, [r3, #12]
 8010c26:	3310      	adds	r3, #16
 8010c28:	b2da      	uxtb	r2, r3
 8010c2a:	6a3b      	ldr	r3, [r7, #32]
 8010c2c:	731a      	strb	r2, [r3, #12]

  uint32_t cs = 0;
 8010c2e:	2300      	movs	r3, #0
 8010c30:	61fb      	str	r3, [r7, #28]
  uint16_t n = (uint16_t) (sizeof(*tcp) + len);
 8010c32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010c34:	b29b      	uxth	r3, r3
 8010c36:	3314      	adds	r3, #20
 8010c38:	837b      	strh	r3, [r7, #26]
  uint8_t pseudo[] = {0, ip->proto, (uint8_t) (n >> 8), (uint8_t) (n & 255)};
 8010c3a:	2300      	movs	r3, #0
 8010c3c:	743b      	strb	r3, [r7, #16]
 8010c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c40:	7a5b      	ldrb	r3, [r3, #9]
 8010c42:	747b      	strb	r3, [r7, #17]
 8010c44:	8b7b      	ldrh	r3, [r7, #26]
 8010c46:	0a1b      	lsrs	r3, r3, #8
 8010c48:	b29b      	uxth	r3, r3
 8010c4a:	b2db      	uxtb	r3, r3
 8010c4c:	74bb      	strb	r3, [r7, #18]
 8010c4e:	8b7b      	ldrh	r3, [r7, #26]
 8010c50:	b2db      	uxtb	r3, r3
 8010c52:	74fb      	strb	r3, [r7, #19]
  cs = csumup(cs, tcp, n);
 8010c54:	8b7b      	ldrh	r3, [r7, #26]
 8010c56:	461a      	mov	r2, r3
 8010c58:	6a39      	ldr	r1, [r7, #32]
 8010c5a:	69f8      	ldr	r0, [r7, #28]
 8010c5c:	f7fe fcd2 	bl	800f604 <csumup>
 8010c60:	61f8      	str	r0, [r7, #28]
  cs = csumup(cs, &ip->src, sizeof(ip->src));
 8010c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c64:	330c      	adds	r3, #12
 8010c66:	2204      	movs	r2, #4
 8010c68:	4619      	mov	r1, r3
 8010c6a:	69f8      	ldr	r0, [r7, #28]
 8010c6c:	f7fe fcca 	bl	800f604 <csumup>
 8010c70:	61f8      	str	r0, [r7, #28]
  cs = csumup(cs, &ip->dst, sizeof(ip->dst));
 8010c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c74:	3310      	adds	r3, #16
 8010c76:	2204      	movs	r2, #4
 8010c78:	4619      	mov	r1, r3
 8010c7a:	69f8      	ldr	r0, [r7, #28]
 8010c7c:	f7fe fcc2 	bl	800f604 <csumup>
 8010c80:	61f8      	str	r0, [r7, #28]
  cs = csumup(cs, pseudo, sizeof(pseudo));
 8010c82:	f107 0310 	add.w	r3, r7, #16
 8010c86:	2204      	movs	r2, #4
 8010c88:	4619      	mov	r1, r3
 8010c8a:	69f8      	ldr	r0, [r7, #28]
 8010c8c:	f7fe fcba 	bl	800f604 <csumup>
 8010c90:	61f8      	str	r0, [r7, #28]
  tcp->csum = csumfin(cs);
 8010c92:	69f8      	ldr	r0, [r7, #28]
 8010c94:	f7fe fce1 	bl	800f65a <csumfin>
 8010c98:	4603      	mov	r3, r0
 8010c9a:	461a      	mov	r2, r3
 8010c9c:	6a3b      	ldr	r3, [r7, #32]
 8010c9e:	821a      	strh	r2, [r3, #16]
  MG_VERBOSE(("TCP %M:%hu -> %M:%hu fl %x len %u", mg_print_ip4, &ip->src,
 8010ca0:	4b21      	ldr	r3, [pc, #132]	@ (8010d28 <tx_tcp+0x1d0>)
 8010ca2:	681b      	ldr	r3, [r3, #0]
 8010ca4:	2b03      	cmp	r3, #3
 8010ca6:	dd2c      	ble.n	8010d02 <tx_tcp+0x1aa>
 8010ca8:	4b20      	ldr	r3, [pc, #128]	@ (8010d2c <tx_tcp+0x1d4>)
 8010caa:	f241 2275 	movw	r2, #4725	@ 0x1275
 8010cae:	4920      	ldr	r1, [pc, #128]	@ (8010d30 <tx_tcp+0x1d8>)
 8010cb0:	2004      	movs	r0, #4
 8010cb2:	f7fd fdf7 	bl	800e8a4 <mg_log_prefix>
 8010cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010cb8:	f103 050c 	add.w	r5, r3, #12
 8010cbc:	6a3b      	ldr	r3, [r7, #32]
 8010cbe:	881b      	ldrh	r3, [r3, #0]
 8010cc0:	b29b      	uxth	r3, r3
 8010cc2:	4618      	mov	r0, r3
 8010cc4:	f011 f888 	bl	8021dd8 <mg_ntohs>
 8010cc8:	4603      	mov	r3, r0
 8010cca:	461e      	mov	r6, r3
 8010ccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010cce:	f103 0410 	add.w	r4, r3, #16
 8010cd2:	6a3b      	ldr	r3, [r7, #32]
 8010cd4:	885b      	ldrh	r3, [r3, #2]
 8010cd6:	b29b      	uxth	r3, r3
 8010cd8:	4618      	mov	r0, r3
 8010cda:	f011 f87d 	bl	8021dd8 <mg_ntohs>
 8010cde:	4603      	mov	r3, r0
 8010ce0:	461a      	mov	r2, r3
 8010ce2:	6a3b      	ldr	r3, [r7, #32]
 8010ce4:	7b5b      	ldrb	r3, [r3, #13]
 8010ce6:	4619      	mov	r1, r3
 8010ce8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010cea:	9304      	str	r3, [sp, #16]
 8010cec:	9103      	str	r1, [sp, #12]
 8010cee:	9202      	str	r2, [sp, #8]
 8010cf0:	9401      	str	r4, [sp, #4]
 8010cf2:	4b10      	ldr	r3, [pc, #64]	@ (8010d34 <tx_tcp+0x1dc>)
 8010cf4:	9300      	str	r3, [sp, #0]
 8010cf6:	4633      	mov	r3, r6
 8010cf8:	462a      	mov	r2, r5
 8010cfa:	490e      	ldr	r1, [pc, #56]	@ (8010d34 <tx_tcp+0x1dc>)
 8010cfc:	480e      	ldr	r0, [pc, #56]	@ (8010d38 <tx_tcp+0x1e0>)
 8010cfe:	f7fd fe21 	bl	800e944 <mg_log>
              mg_ntohs(tcp->sport), mg_print_ip4, &ip->dst,
              mg_ntohs(tcp->dport), tcp->flags, len));
  // mg_hexdump(ifp->tx.buf, PDIFF(ifp->tx.buf, tcp + 1) + len);
  return ether_output(ifp, PDIFF(ifp->tx.buf, tcp + 1) + len);
 8010d02:	6a3b      	ldr	r3, [r7, #32]
 8010d04:	f103 0214 	add.w	r2, r3, #20
 8010d08:	68fb      	ldr	r3, [r7, #12]
 8010d0a:	695b      	ldr	r3, [r3, #20]
 8010d0c:	1ad3      	subs	r3, r2, r3
 8010d0e:	461a      	mov	r2, r3
 8010d10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010d12:	4413      	add	r3, r2
 8010d14:	4619      	mov	r1, r3
 8010d16:	68f8      	ldr	r0, [r7, #12]
 8010d18:	f7fe fd32 	bl	800f780 <ether_output>
 8010d1c:	4603      	mov	r3, r0
}
 8010d1e:	4618      	mov	r0, r3
 8010d20:	372c      	adds	r7, #44	@ 0x2c
 8010d22:	46bd      	mov	sp, r7
 8010d24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010d26:	bf00      	nop
 8010d28:	24000258 	.word	0x24000258
 8010d2c:	0802d914 	.word	0x0802d914
 8010d30:	08029c3c 	.word	0x08029c3c
 8010d34:	080132d5 	.word	0x080132d5
 8010d38:	0802afd8 	.word	0x0802afd8

08010d3c <tx_tcp_pkt>:

static size_t tx_tcp_pkt(struct mg_tcpip_if *ifp, struct pkt *pkt,
                         uint8_t flags, uint32_t seq, const void *buf,
                         size_t len) {
 8010d3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d40:	b08c      	sub	sp, #48	@ 0x30
 8010d42:	af06      	add	r7, sp, #24
 8010d44:	60f8      	str	r0, [r7, #12]
 8010d46:	60b9      	str	r1, [r7, #8]
 8010d48:	603b      	str	r3, [r7, #0]
 8010d4a:	4613      	mov	r3, r2
 8010d4c:	71fb      	strb	r3, [r7, #7]
  uint32_t delta = (pkt->tcp->flags & (TH_SYN | TH_FIN)) ? 1 : 0;
 8010d4e:	68bb      	ldr	r3, [r7, #8]
 8010d50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010d52:	7b5b      	ldrb	r3, [r3, #13]
 8010d54:	f003 0303 	and.w	r3, r3, #3
 8010d58:	2b00      	cmp	r3, #0
 8010d5a:	bf14      	ite	ne
 8010d5c:	2301      	movne	r3, #1
 8010d5e:	2300      	moveq	r3, #0
 8010d60:	b2db      	uxtb	r3, r3
 8010d62:	617b      	str	r3, [r7, #20]
  return tx_tcp(ifp, pkt->eth->src, pkt->ip->src, flags, pkt->tcp->dport,
 8010d64:	68bb      	ldr	r3, [r7, #8]
 8010d66:	691b      	ldr	r3, [r3, #16]
 8010d68:	1d9e      	adds	r6, r3, #6
 8010d6a:	68bb      	ldr	r3, [r7, #8]
 8010d6c:	69db      	ldr	r3, [r3, #28]
 8010d6e:	f8d3 800c 	ldr.w	r8, [r3, #12]
 8010d72:	68bb      	ldr	r3, [r7, #8]
 8010d74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010d76:	885b      	ldrh	r3, [r3, #2]
 8010d78:	b29c      	uxth	r4, r3
                pkt->tcp->sport, seq, mg_htonl(mg_ntohl(pkt->tcp->seq) + delta),
 8010d7a:	68bb      	ldr	r3, [r7, #8]
 8010d7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
  return tx_tcp(ifp, pkt->eth->src, pkt->ip->src, flags, pkt->tcp->dport,
 8010d7e:	881b      	ldrh	r3, [r3, #0]
 8010d80:	b29d      	uxth	r5, r3
                pkt->tcp->sport, seq, mg_htonl(mg_ntohl(pkt->tcp->seq) + delta),
 8010d82:	68bb      	ldr	r3, [r7, #8]
 8010d84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010d86:	685b      	ldr	r3, [r3, #4]
 8010d88:	4618      	mov	r0, r3
 8010d8a:	f011 f83c 	bl	8021e06 <mg_ntohl>
 8010d8e:	4602      	mov	r2, r0
  return tx_tcp(ifp, pkt->eth->src, pkt->ip->src, flags, pkt->tcp->dport,
 8010d90:	697b      	ldr	r3, [r7, #20]
 8010d92:	4413      	add	r3, r2
 8010d94:	4618      	mov	r0, r3
 8010d96:	f011 f836 	bl	8021e06 <mg_ntohl>
 8010d9a:	4601      	mov	r1, r0
 8010d9c:	79fa      	ldrb	r2, [r7, #7]
 8010d9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010da0:	9305      	str	r3, [sp, #20]
 8010da2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010da4:	9304      	str	r3, [sp, #16]
 8010da6:	9103      	str	r1, [sp, #12]
 8010da8:	683b      	ldr	r3, [r7, #0]
 8010daa:	9302      	str	r3, [sp, #8]
 8010dac:	9501      	str	r5, [sp, #4]
 8010dae:	9400      	str	r4, [sp, #0]
 8010db0:	4613      	mov	r3, r2
 8010db2:	4642      	mov	r2, r8
 8010db4:	4631      	mov	r1, r6
 8010db6:	68f8      	ldr	r0, [r7, #12]
 8010db8:	f7ff fece 	bl	8010b58 <tx_tcp>
 8010dbc:	4603      	mov	r3, r0
                buf, len);
}
 8010dbe:	4618      	mov	r0, r3
 8010dc0:	3718      	adds	r7, #24
 8010dc2:	46bd      	mov	sp, r7
 8010dc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010dc8 <accept_conn>:

static struct mg_connection *accept_conn(struct mg_connection *lsn,
                                         struct pkt *pkt) {
 8010dc8:	b5b0      	push	{r4, r5, r7, lr}
 8010dca:	b084      	sub	sp, #16
 8010dcc:	af00      	add	r7, sp, #0
 8010dce:	6078      	str	r0, [r7, #4]
 8010dd0:	6039      	str	r1, [r7, #0]
  struct mg_connection *c = mg_alloc_conn(lsn->mgr);
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	685b      	ldr	r3, [r3, #4]
 8010dd6:	4618      	mov	r0, r3
 8010dd8:	f7fe f94d 	bl	800f076 <mg_alloc_conn>
 8010ddc:	60f8      	str	r0, [r7, #12]
  if (c == NULL) {
 8010dde:	68fb      	ldr	r3, [r7, #12]
 8010de0:	2b00      	cmp	r3, #0
 8010de2:	d10f      	bne.n	8010e04 <accept_conn+0x3c>
    MG_ERROR(("OOM"));
 8010de4:	4b5e      	ldr	r3, [pc, #376]	@ (8010f60 <accept_conn+0x198>)
 8010de6:	681b      	ldr	r3, [r3, #0]
 8010de8:	2b00      	cmp	r3, #0
 8010dea:	dd09      	ble.n	8010e00 <accept_conn+0x38>
 8010dec:	4b5d      	ldr	r3, [pc, #372]	@ (8010f64 <accept_conn+0x19c>)
 8010dee:	f241 2289 	movw	r2, #4745	@ 0x1289
 8010df2:	495d      	ldr	r1, [pc, #372]	@ (8010f68 <accept_conn+0x1a0>)
 8010df4:	2001      	movs	r0, #1
 8010df6:	f7fd fd55 	bl	800e8a4 <mg_log_prefix>
 8010dfa:	485c      	ldr	r0, [pc, #368]	@ (8010f6c <accept_conn+0x1a4>)
 8010dfc:	f7fd fda2 	bl	800e944 <mg_log>
    return NULL;
 8010e00:	2300      	movs	r3, #0
 8010e02:	e0a8      	b.n	8010f56 <accept_conn+0x18e>
  }
  struct connstate *s = (struct connstate *) (c + 1);
 8010e04:	68fb      	ldr	r3, [r7, #12]
 8010e06:	33b0      	adds	r3, #176	@ 0xb0
 8010e08:	60bb      	str	r3, [r7, #8]
  s->dmss = 536;  // assume default, RFC-9293 3.7.1
 8010e0a:	68bb      	ldr	r3, [r7, #8]
 8010e0c:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8010e10:	831a      	strh	r2, [r3, #24]
  s->seq = mg_ntohl(pkt->tcp->ack), s->ack = mg_ntohl(pkt->tcp->seq);
 8010e12:	683b      	ldr	r3, [r7, #0]
 8010e14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010e16:	689b      	ldr	r3, [r3, #8]
 8010e18:	4618      	mov	r0, r3
 8010e1a:	f010 fff4 	bl	8021e06 <mg_ntohl>
 8010e1e:	4602      	mov	r2, r0
 8010e20:	68bb      	ldr	r3, [r7, #8]
 8010e22:	601a      	str	r2, [r3, #0]
 8010e24:	683b      	ldr	r3, [r7, #0]
 8010e26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010e28:	685b      	ldr	r3, [r3, #4]
 8010e2a:	4618      	mov	r0, r3
 8010e2c:	f010 ffeb 	bl	8021e06 <mg_ntohl>
 8010e30:	4602      	mov	r2, r0
 8010e32:	68bb      	ldr	r3, [r7, #8]
 8010e34:	605a      	str	r2, [r3, #4]
  memcpy(s->mac, pkt->eth->src, sizeof(s->mac));
 8010e36:	68bb      	ldr	r3, [r7, #8]
 8010e38:	f103 001a 	add.w	r0, r3, #26
 8010e3c:	683b      	ldr	r3, [r7, #0]
 8010e3e:	691b      	ldr	r3, [r3, #16]
 8010e40:	3306      	adds	r3, #6
 8010e42:	2206      	movs	r2, #6
 8010e44:	4619      	mov	r1, r3
 8010e46:	f016 fd78 	bl	802793a <memcpy>
  settmout(c, MIP_TTYPE_KEEPALIVE);
 8010e4a:	2100      	movs	r1, #0
 8010e4c:	68f8      	ldr	r0, [r7, #12]
 8010e4e:	f7fe fc33 	bl	800f6b8 <settmout>
  memcpy(c->rem.ip, &pkt->ip->src, sizeof(uint32_t));
 8010e52:	68fb      	ldr	r3, [r7, #12]
 8010e54:	331c      	adds	r3, #28
 8010e56:	683a      	ldr	r2, [r7, #0]
 8010e58:	69d2      	ldr	r2, [r2, #28]
 8010e5a:	320c      	adds	r2, #12
 8010e5c:	6812      	ldr	r2, [r2, #0]
 8010e5e:	601a      	str	r2, [r3, #0]
  c->rem.port = pkt->tcp->sport;
 8010e60:	683b      	ldr	r3, [r7, #0]
 8010e62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010e64:	881b      	ldrh	r3, [r3, #0]
 8010e66:	b29a      	uxth	r2, r3
 8010e68:	68fb      	ldr	r3, [r7, #12]
 8010e6a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  MG_DEBUG(("%lu accepted %M", c->id, mg_print_ip_port, &c->rem));
 8010e6c:	4b3c      	ldr	r3, [pc, #240]	@ (8010f60 <accept_conn+0x198>)
 8010e6e:	681b      	ldr	r3, [r3, #0]
 8010e70:	2b02      	cmp	r3, #2
 8010e72:	dd0e      	ble.n	8010e92 <accept_conn+0xca>
 8010e74:	4b3b      	ldr	r3, [pc, #236]	@ (8010f64 <accept_conn+0x19c>)
 8010e76:	f241 2293 	movw	r2, #4755	@ 0x1293
 8010e7a:	493b      	ldr	r1, [pc, #236]	@ (8010f68 <accept_conn+0x1a0>)
 8010e7c:	2003      	movs	r0, #3
 8010e7e:	f7fd fd11 	bl	800e8a4 <mg_log_prefix>
 8010e82:	68fb      	ldr	r3, [r7, #12]
 8010e84:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8010e86:	68fb      	ldr	r3, [r7, #12]
 8010e88:	331c      	adds	r3, #28
 8010e8a:	4a39      	ldr	r2, [pc, #228]	@ (8010f70 <accept_conn+0x1a8>)
 8010e8c:	4839      	ldr	r0, [pc, #228]	@ (8010f74 <accept_conn+0x1ac>)
 8010e8e:	f7fd fd59 	bl	800e944 <mg_log>
  LIST_ADD_HEAD(struct mg_connection, &lsn->mgr->conns, c);
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	685b      	ldr	r3, [r3, #4]
 8010e96:	681a      	ldr	r2, [r3, #0]
 8010e98:	68fb      	ldr	r3, [r7, #12]
 8010e9a:	601a      	str	r2, [r3, #0]
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	685b      	ldr	r3, [r3, #4]
 8010ea0:	68fa      	ldr	r2, [r7, #12]
 8010ea2:	601a      	str	r2, [r3, #0]
  c->is_accepted = 1;
 8010ea4:	68fa      	ldr	r2, [r7, #12]
 8010ea6:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 8010eaa:	f043 0304 	orr.w	r3, r3, #4
 8010eae:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
  c->is_hexdumping = lsn->is_hexdumping;
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8010eb8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8010ebc:	b2d9      	uxtb	r1, r3
 8010ebe:	68fa      	ldr	r2, [r7, #12]
 8010ec0:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8010ec4:	f361 03c3 	bfi	r3, r1, #3, #1
 8010ec8:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
  c->pfn = lsn->pfn;
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8010ed2:	68fb      	ldr	r3, [r7, #12]
 8010ed4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  c->loc = lsn->loc;
 8010ed8:	68fa      	ldr	r2, [r7, #12]
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	f102 0408 	add.w	r4, r2, #8
 8010ee0:	f103 0508 	add.w	r5, r3, #8
 8010ee4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010ee6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010ee8:	682b      	ldr	r3, [r5, #0]
 8010eea:	6023      	str	r3, [r4, #0]
  c->pfn_data = lsn->pfn_data;
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8010ef2:	68fb      	ldr	r3, [r7, #12]
 8010ef4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  c->fn = lsn->fn;
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8010efc:	68fb      	ldr	r3, [r7, #12]
 8010efe:	679a      	str	r2, [r3, #120]	@ 0x78
  c->fn_data = lsn->fn_data;
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8010f04:	68fb      	ldr	r3, [r7, #12]
 8010f06:	67da      	str	r2, [r3, #124]	@ 0x7c
  c->is_tls = lsn->is_tls;
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8010f0e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8010f12:	b2d9      	uxtb	r1, r3
 8010f14:	68fa      	ldr	r2, [r7, #12]
 8010f16:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 8010f1a:	f361 1386 	bfi	r3, r1, #6, #1
 8010f1e:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
  mg_call(c, MG_EV_OPEN, NULL);
 8010f22:	2200      	movs	r2, #0
 8010f24:	2101      	movs	r1, #1
 8010f26:	68f8      	ldr	r0, [r7, #12]
 8010f28:	f7f7 fe24 	bl	8008b74 <mg_call>
  mg_call(c, MG_EV_ACCEPT, NULL);
 8010f2c:	2200      	movs	r2, #0
 8010f2e:	2105      	movs	r1, #5
 8010f30:	68f8      	ldr	r0, [r7, #12]
 8010f32:	f7f7 fe1f 	bl	8008b74 <mg_call>
  if (!c->is_tls_hs) c->is_tls = 0;  // user did not call mg_tls_init()
 8010f36:	68fb      	ldr	r3, [r7, #12]
 8010f38:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8010f3c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8010f40:	b2db      	uxtb	r3, r3
 8010f42:	2b00      	cmp	r3, #0
 8010f44:	d106      	bne.n	8010f54 <accept_conn+0x18c>
 8010f46:	68fa      	ldr	r2, [r7, #12]
 8010f48:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 8010f4c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010f50:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
  return c;
 8010f54:	68fb      	ldr	r3, [r7, #12]
}
 8010f56:	4618      	mov	r0, r3
 8010f58:	3710      	adds	r7, #16
 8010f5a:	46bd      	mov	sp, r7
 8010f5c:	bdb0      	pop	{r4, r5, r7, pc}
 8010f5e:	bf00      	nop
 8010f60:	24000258 	.word	0x24000258
 8010f64:	0802d91c 	.word	0x0802d91c
 8010f68:	08029c3c 	.word	0x08029c3c
 8010f6c:	0802abf8 	.word	0x0802abf8
 8010f70:	0801334d 	.word	0x0801334d
 8010f74:	0802affc 	.word	0x0802affc

08010f78 <trim_len>:

static size_t trim_len(struct mg_connection *c, size_t len) {
 8010f78:	b580      	push	{r7, lr}
 8010f7a:	b08a      	sub	sp, #40	@ 0x28
 8010f7c:	af00      	add	r7, sp, #0
 8010f7e:	6078      	str	r0, [r7, #4]
 8010f80:	6039      	str	r1, [r7, #0]
  struct mg_tcpip_if *ifp = c->mgr->ifp;
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	685b      	ldr	r3, [r3, #4]
 8010f86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010f88:	627b      	str	r3, [r7, #36]	@ 0x24
  size_t eth_h_len = 14, ip_max_h_len = 24, tcp_max_h_len = 60, udp_h_len = 8;
 8010f8a:	230e      	movs	r3, #14
 8010f8c:	623b      	str	r3, [r7, #32]
 8010f8e:	2318      	movs	r3, #24
 8010f90:	61fb      	str	r3, [r7, #28]
 8010f92:	233c      	movs	r3, #60	@ 0x3c
 8010f94:	61bb      	str	r3, [r7, #24]
 8010f96:	2308      	movs	r3, #8
 8010f98:	617b      	str	r3, [r7, #20]
  size_t max_headers_len =
      eth_h_len + ip_max_h_len + (c->is_udp ? udp_h_len : tcp_max_h_len);
 8010f9a:	6a3a      	ldr	r2, [r7, #32]
 8010f9c:	69fb      	ldr	r3, [r7, #28]
 8010f9e:	441a      	add	r2, r3
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8010fa6:	f003 0301 	and.w	r3, r3, #1
 8010faa:	b2db      	uxtb	r3, r3
 8010fac:	2b00      	cmp	r3, #0
 8010fae:	d001      	beq.n	8010fb4 <trim_len+0x3c>
 8010fb0:	697b      	ldr	r3, [r7, #20]
 8010fb2:	e000      	b.n	8010fb6 <trim_len+0x3e>
 8010fb4:	69bb      	ldr	r3, [r7, #24]
  size_t max_headers_len =
 8010fb6:	4413      	add	r3, r2
 8010fb8:	613b      	str	r3, [r7, #16]
  size_t min_mtu = c->is_udp ? 68 /* RFC-791 */ : max_headers_len - eth_h_len;
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8010fc0:	f003 0301 	and.w	r3, r3, #1
 8010fc4:	b2db      	uxtb	r3, r3
 8010fc6:	2b00      	cmp	r3, #0
 8010fc8:	d103      	bne.n	8010fd2 <trim_len+0x5a>
 8010fca:	693a      	ldr	r2, [r7, #16]
 8010fcc:	6a3b      	ldr	r3, [r7, #32]
 8010fce:	1ad3      	subs	r3, r2, r3
 8010fd0:	e000      	b.n	8010fd4 <trim_len+0x5c>
 8010fd2:	2344      	movs	r3, #68	@ 0x44
 8010fd4:	60fb      	str	r3, [r7, #12]

  // If the frame exceeds the available buffer, trim the length
  if (len + max_headers_len > ifp->tx.len) {
 8010fd6:	683a      	ldr	r2, [r7, #0]
 8010fd8:	693b      	ldr	r3, [r7, #16]
 8010fda:	441a      	add	r2, r3
 8010fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010fde:	699b      	ldr	r3, [r3, #24]
 8010fe0:	429a      	cmp	r2, r3
 8010fe2:	d904      	bls.n	8010fee <trim_len+0x76>
    len = ifp->tx.len - max_headers_len;
 8010fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010fe6:	699a      	ldr	r2, [r3, #24]
 8010fe8:	693b      	ldr	r3, [r7, #16]
 8010fea:	1ad3      	subs	r3, r2, r3
 8010fec:	603b      	str	r3, [r7, #0]
  }
  // Ensure the MTU isn't lower than the minimum allowed value
  if (ifp->mtu < min_mtu) {
 8010fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ff0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8010ff4:	461a      	mov	r2, r3
 8010ff6:	68fb      	ldr	r3, [r7, #12]
 8010ff8:	4293      	cmp	r3, r2
 8010ffa:	d913      	bls.n	8011024 <trim_len+0xac>
    MG_ERROR(("MTU is lower than minimum, capping to %lu", min_mtu));
 8010ffc:	4b20      	ldr	r3, [pc, #128]	@ (8011080 <trim_len+0x108>)
 8010ffe:	681b      	ldr	r3, [r3, #0]
 8011000:	2b00      	cmp	r3, #0
 8011002:	dd0a      	ble.n	801101a <trim_len+0xa2>
 8011004:	4b1f      	ldr	r3, [pc, #124]	@ (8011084 <trim_len+0x10c>)
 8011006:	f241 22b0 	movw	r2, #4784	@ 0x12b0
 801100a:	491f      	ldr	r1, [pc, #124]	@ (8011088 <trim_len+0x110>)
 801100c:	2001      	movs	r0, #1
 801100e:	f7fd fc49 	bl	800e8a4 <mg_log_prefix>
 8011012:	68f9      	ldr	r1, [r7, #12]
 8011014:	481d      	ldr	r0, [pc, #116]	@ (801108c <trim_len+0x114>)
 8011016:	f7fd fc95 	bl	800e944 <mg_log>
    ifp->mtu = (uint16_t) min_mtu;
 801101a:	68fb      	ldr	r3, [r7, #12]
 801101c:	b29a      	uxth	r2, r3
 801101e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011020:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
  }
  // If the total packet size exceeds the MTU, trim the length
  if (len + max_headers_len - eth_h_len > ifp->mtu) {
 8011024:	683a      	ldr	r2, [r7, #0]
 8011026:	693b      	ldr	r3, [r7, #16]
 8011028:	441a      	add	r2, r3
 801102a:	6a3b      	ldr	r3, [r7, #32]
 801102c:	1ad3      	subs	r3, r2, r3
 801102e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011030:	f8b2 2050 	ldrh.w	r2, [r2, #80]	@ 0x50
 8011034:	4293      	cmp	r3, r2
 8011036:	d91e      	bls.n	8011076 <trim_len+0xfe>
    len = ifp->mtu - max_headers_len + eth_h_len;
 8011038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801103a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 801103e:	461a      	mov	r2, r3
 8011040:	693b      	ldr	r3, [r7, #16]
 8011042:	1ad3      	subs	r3, r2, r3
 8011044:	6a3a      	ldr	r2, [r7, #32]
 8011046:	4413      	add	r3, r2
 8011048:	603b      	str	r3, [r7, #0]
    if (c->is_udp) {
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8011050:	f003 0301 	and.w	r3, r3, #1
 8011054:	b2db      	uxtb	r3, r3
 8011056:	2b00      	cmp	r3, #0
 8011058:	d00d      	beq.n	8011076 <trim_len+0xfe>
      MG_ERROR(("UDP datagram exceeds MTU. Truncating it."));
 801105a:	4b09      	ldr	r3, [pc, #36]	@ (8011080 <trim_len+0x108>)
 801105c:	681b      	ldr	r3, [r3, #0]
 801105e:	2b00      	cmp	r3, #0
 8011060:	dd09      	ble.n	8011076 <trim_len+0xfe>
 8011062:	4b08      	ldr	r3, [pc, #32]	@ (8011084 <trim_len+0x10c>)
 8011064:	f241 22b7 	movw	r2, #4791	@ 0x12b7
 8011068:	4907      	ldr	r1, [pc, #28]	@ (8011088 <trim_len+0x110>)
 801106a:	2001      	movs	r0, #1
 801106c:	f7fd fc1a 	bl	800e8a4 <mg_log_prefix>
 8011070:	4807      	ldr	r0, [pc, #28]	@ (8011090 <trim_len+0x118>)
 8011072:	f7fd fc67 	bl	800e944 <mg_log>
    }
  }

  return len;
 8011076:	683b      	ldr	r3, [r7, #0]
}
 8011078:	4618      	mov	r0, r3
 801107a:	3728      	adds	r7, #40	@ 0x28
 801107c:	46bd      	mov	sp, r7
 801107e:	bd80      	pop	{r7, pc}
 8011080:	24000258 	.word	0x24000258
 8011084:	0802d928 	.word	0x0802d928
 8011088:	08029c3c 	.word	0x08029c3c
 801108c:	0802b00c 	.word	0x0802b00c
 8011090:	0802b038 	.word	0x0802b038

08011094 <mg_io_send>:

long mg_io_send(struct mg_connection *c, const void *buf, size_t len) {
 8011094:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011096:	b08f      	sub	sp, #60	@ 0x3c
 8011098:	af06      	add	r7, sp, #24
 801109a:	60f8      	str	r0, [r7, #12]
 801109c:	60b9      	str	r1, [r7, #8]
 801109e:	607a      	str	r2, [r7, #4]
  struct mg_tcpip_if *ifp = c->mgr->ifp;
 80110a0:	68fb      	ldr	r3, [r7, #12]
 80110a2:	685b      	ldr	r3, [r3, #4]
 80110a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80110a6:	61fb      	str	r3, [r7, #28]
  struct connstate *s = (struct connstate *) (c + 1);
 80110a8:	68fb      	ldr	r3, [r7, #12]
 80110aa:	33b0      	adds	r3, #176	@ 0xb0
 80110ac:	61bb      	str	r3, [r7, #24]
  uint32_t dst_ip = *(uint32_t *) c->rem.ip;
 80110ae:	68fb      	ldr	r3, [r7, #12]
 80110b0:	331c      	adds	r3, #28
 80110b2:	681b      	ldr	r3, [r3, #0]
 80110b4:	617b      	str	r3, [r7, #20]
  len = trim_len(c, len);
 80110b6:	6879      	ldr	r1, [r7, #4]
 80110b8:	68f8      	ldr	r0, [r7, #12]
 80110ba:	f7ff ff5d 	bl	8010f78 <trim_len>
 80110be:	6078      	str	r0, [r7, #4]
  if (c->is_udp) {
 80110c0:	68fb      	ldr	r3, [r7, #12]
 80110c2:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 80110c6:	f003 0301 	and.w	r3, r3, #1
 80110ca:	b2db      	uxtb	r3, r3
 80110cc:	2b00      	cmp	r3, #0
 80110ce:	d015      	beq.n	80110fc <mg_io_send+0x68>
    tx_udp(ifp, s->mac, ifp->ip, c->loc.port, dst_ip, c->rem.port, buf, len);
 80110d0:	69bb      	ldr	r3, [r7, #24]
 80110d2:	f103 011a 	add.w	r1, r3, #26
 80110d6:	69fb      	ldr	r3, [r7, #28]
 80110d8:	6898      	ldr	r0, [r3, #8]
 80110da:	68fb      	ldr	r3, [r7, #12]
 80110dc:	8b1c      	ldrh	r4, [r3, #24]
 80110de:	68fb      	ldr	r3, [r7, #12]
 80110e0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80110e2:	687a      	ldr	r2, [r7, #4]
 80110e4:	9203      	str	r2, [sp, #12]
 80110e6:	68ba      	ldr	r2, [r7, #8]
 80110e8:	9202      	str	r2, [sp, #8]
 80110ea:	9301      	str	r3, [sp, #4]
 80110ec:	697b      	ldr	r3, [r7, #20]
 80110ee:	9300      	str	r3, [sp, #0]
 80110f0:	4623      	mov	r3, r4
 80110f2:	4602      	mov	r2, r0
 80110f4:	69f8      	ldr	r0, [r7, #28]
 80110f6:	f7fe fcc8 	bl	800fa8a <tx_udp>
 80110fa:	e047      	b.n	801118c <mg_io_send+0xf8>
  } else {  // TCP, cap to peer's MSS
    size_t sent;
    if (len > s->dmss) len = s->dmss;  // RFC-6691: reduce if sending opts
 80110fc:	69bb      	ldr	r3, [r7, #24]
 80110fe:	8b1b      	ldrh	r3, [r3, #24]
 8011100:	461a      	mov	r2, r3
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	4293      	cmp	r3, r2
 8011106:	d902      	bls.n	801110e <mg_io_send+0x7a>
 8011108:	69bb      	ldr	r3, [r7, #24]
 801110a:	8b1b      	ldrh	r3, [r3, #24]
 801110c:	607b      	str	r3, [r7, #4]
    sent = tx_tcp(ifp, s->mac, dst_ip, TH_PUSH | TH_ACK, c->loc.port,
 801110e:	69bb      	ldr	r3, [r7, #24]
 8011110:	f103 061a 	add.w	r6, r3, #26
 8011114:	68fb      	ldr	r3, [r7, #12]
 8011116:	8b1c      	ldrh	r4, [r3, #24]
 8011118:	68fb      	ldr	r3, [r7, #12]
 801111a:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
 801111c:	69bb      	ldr	r3, [r7, #24]
 801111e:	681b      	ldr	r3, [r3, #0]
 8011120:	4618      	mov	r0, r3
 8011122:	f010 fe70 	bl	8021e06 <mg_ntohl>
 8011126:	6038      	str	r0, [r7, #0]
 8011128:	69bb      	ldr	r3, [r7, #24]
 801112a:	685b      	ldr	r3, [r3, #4]
 801112c:	4618      	mov	r0, r3
 801112e:	f010 fe6a 	bl	8021e06 <mg_ntohl>
 8011132:	4602      	mov	r2, r0
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	9305      	str	r3, [sp, #20]
 8011138:	68bb      	ldr	r3, [r7, #8]
 801113a:	9304      	str	r3, [sp, #16]
 801113c:	9203      	str	r2, [sp, #12]
 801113e:	683b      	ldr	r3, [r7, #0]
 8011140:	9302      	str	r3, [sp, #8]
 8011142:	9501      	str	r5, [sp, #4]
 8011144:	9400      	str	r4, [sp, #0]
 8011146:	2318      	movs	r3, #24
 8011148:	697a      	ldr	r2, [r7, #20]
 801114a:	4631      	mov	r1, r6
 801114c:	69f8      	ldr	r0, [r7, #28]
 801114e:	f7ff fd03 	bl	8010b58 <tx_tcp>
 8011152:	6138      	str	r0, [r7, #16]
                  c->rem.port, mg_htonl(s->seq), mg_htonl(s->ack), buf, len);
    if (sent == 0) {
 8011154:	693b      	ldr	r3, [r7, #16]
 8011156:	2b00      	cmp	r3, #0
 8011158:	d102      	bne.n	8011160 <mg_io_send+0xcc>
      return MG_IO_WAIT;
 801115a:	f06f 0301 	mvn.w	r3, #1
 801115e:	e016      	b.n	801118e <mg_io_send+0xfa>
    } else if (sent == (size_t) -1) {
 8011160:	693b      	ldr	r3, [r7, #16]
 8011162:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011166:	d102      	bne.n	801116e <mg_io_send+0xda>
      return MG_IO_ERR;
 8011168:	f04f 33ff 	mov.w	r3, #4294967295
 801116c:	e00f      	b.n	801118e <mg_io_send+0xfa>
    } else {
      s->seq += (uint32_t) len;
 801116e:	69bb      	ldr	r3, [r7, #24]
 8011170:	681a      	ldr	r2, [r3, #0]
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	441a      	add	r2, r3
 8011176:	69bb      	ldr	r3, [r7, #24]
 8011178:	601a      	str	r2, [r3, #0]
      if (s->ttype == MIP_TTYPE_ACK) settmout(c, MIP_TTYPE_KEEPALIVE);
 801117a:	69bb      	ldr	r3, [r7, #24]
 801117c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011180:	2b01      	cmp	r3, #1
 8011182:	d103      	bne.n	801118c <mg_io_send+0xf8>
 8011184:	2100      	movs	r1, #0
 8011186:	68f8      	ldr	r0, [r7, #12]
 8011188:	f7fe fa96 	bl	800f6b8 <settmout>
    }
  }
  return (long) len;
 801118c:	687b      	ldr	r3, [r7, #4]
}
 801118e:	4618      	mov	r0, r3
 8011190:	3724      	adds	r7, #36	@ 0x24
 8011192:	46bd      	mov	sp, r7
 8011194:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08011198 <handle_tls_recv>:

static void handle_tls_recv(struct mg_connection *c) {
 8011198:	b580      	push	{r7, lr}
 801119a:	b086      	sub	sp, #24
 801119c:	af00      	add	r7, sp, #0
 801119e:	6078      	str	r0, [r7, #4]
  size_t avail = mg_tls_pending(c);
 80111a0:	6878      	ldr	r0, [r7, #4]
 80111a2:	f00a f9bd 	bl	801b520 <mg_tls_pending>
 80111a6:	6178      	str	r0, [r7, #20]
  size_t min = avail > MG_MAX_RECV_SIZE ? MG_MAX_RECV_SIZE : avail;
 80111a8:	697b      	ldr	r3, [r7, #20]
 80111aa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80111ae:	bf28      	it	cs
 80111b0:	f44f 1340 	movcs.w	r3, #3145728	@ 0x300000
 80111b4:	613b      	str	r3, [r7, #16]
  struct mg_iobuf *io = &c->recv;
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	3338      	adds	r3, #56	@ 0x38
 80111ba:	60fb      	str	r3, [r7, #12]
  if (io->size - io->len < min && !mg_iobuf_resize(io, io->len + min)) {
 80111bc:	68fb      	ldr	r3, [r7, #12]
 80111be:	685a      	ldr	r2, [r3, #4]
 80111c0:	68fb      	ldr	r3, [r7, #12]
 80111c2:	689b      	ldr	r3, [r3, #8]
 80111c4:	1ad3      	subs	r3, r2, r3
 80111c6:	693a      	ldr	r2, [r7, #16]
 80111c8:	429a      	cmp	r2, r3
 80111ca:	d90f      	bls.n	80111ec <handle_tls_recv+0x54>
 80111cc:	68fb      	ldr	r3, [r7, #12]
 80111ce:	689a      	ldr	r2, [r3, #8]
 80111d0:	693b      	ldr	r3, [r7, #16]
 80111d2:	4413      	add	r3, r2
 80111d4:	4619      	mov	r1, r3
 80111d6:	68f8      	ldr	r0, [r7, #12]
 80111d8:	f7fc fa6e 	bl	800d6b8 <mg_iobuf_resize>
 80111dc:	4603      	mov	r3, r0
 80111de:	2b00      	cmp	r3, #0
 80111e0:	d104      	bne.n	80111ec <handle_tls_recv+0x54>
    mg_error(c, "oom");
 80111e2:	491c      	ldr	r1, [pc, #112]	@ (8011254 <handle_tls_recv+0xbc>)
 80111e4:	6878      	ldr	r0, [r7, #4]
 80111e6:	f7f7 fce5 	bl	8008bb4 <mg_error>
      // Decrypted successfully - trigger MG_EV_READ
      io->len += (size_t) n;
      mg_call(c, MG_EV_READ, &n);
    }  // else n < 0: outstanding data to be moved to c->recv
  }
}
 80111ea:	e02f      	b.n	801124c <handle_tls_recv+0xb4>
    long n = mg_tls_recv(c, io->buf != NULL ? &io->buf[io->len] : io->buf,
 80111ec:	68fb      	ldr	r3, [r7, #12]
 80111ee:	681b      	ldr	r3, [r3, #0]
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	d005      	beq.n	8011200 <handle_tls_recv+0x68>
 80111f4:	68fb      	ldr	r3, [r7, #12]
 80111f6:	681a      	ldr	r2, [r3, #0]
 80111f8:	68fb      	ldr	r3, [r7, #12]
 80111fa:	689b      	ldr	r3, [r3, #8]
 80111fc:	4413      	add	r3, r2
 80111fe:	e001      	b.n	8011204 <handle_tls_recv+0x6c>
 8011200:	68fb      	ldr	r3, [r7, #12]
 8011202:	681b      	ldr	r3, [r3, #0]
                         io->size - io->len);
 8011204:	68fa      	ldr	r2, [r7, #12]
 8011206:	6851      	ldr	r1, [r2, #4]
 8011208:	68fa      	ldr	r2, [r7, #12]
 801120a:	6892      	ldr	r2, [r2, #8]
    long n = mg_tls_recv(c, io->buf != NULL ? &io->buf[io->len] : io->buf,
 801120c:	1a8a      	subs	r2, r1, r2
 801120e:	4619      	mov	r1, r3
 8011210:	6878      	ldr	r0, [r7, #4]
 8011212:	f00a f931 	bl	801b478 <mg_tls_recv>
 8011216:	4603      	mov	r3, r0
 8011218:	60bb      	str	r3, [r7, #8]
    if (n == MG_IO_ERR) {
 801121a:	68bb      	ldr	r3, [r7, #8]
 801121c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011220:	d104      	bne.n	801122c <handle_tls_recv+0x94>
      mg_error(c, "TLS recv error");
 8011222:	490d      	ldr	r1, [pc, #52]	@ (8011258 <handle_tls_recv+0xc0>)
 8011224:	6878      	ldr	r0, [r7, #4]
 8011226:	f7f7 fcc5 	bl	8008bb4 <mg_error>
}
 801122a:	e00f      	b.n	801124c <handle_tls_recv+0xb4>
    } else if (n > 0) {
 801122c:	68bb      	ldr	r3, [r7, #8]
 801122e:	2b00      	cmp	r3, #0
 8011230:	dd0c      	ble.n	801124c <handle_tls_recv+0xb4>
      io->len += (size_t) n;
 8011232:	68fb      	ldr	r3, [r7, #12]
 8011234:	689b      	ldr	r3, [r3, #8]
 8011236:	68ba      	ldr	r2, [r7, #8]
 8011238:	441a      	add	r2, r3
 801123a:	68fb      	ldr	r3, [r7, #12]
 801123c:	609a      	str	r2, [r3, #8]
      mg_call(c, MG_EV_READ, &n);
 801123e:	f107 0308 	add.w	r3, r7, #8
 8011242:	461a      	mov	r2, r3
 8011244:	2107      	movs	r1, #7
 8011246:	6878      	ldr	r0, [r7, #4]
 8011248:	f7f7 fc94 	bl	8008b74 <mg_call>
}
 801124c:	bf00      	nop
 801124e:	3718      	adds	r7, #24
 8011250:	46bd      	mov	sp, r7
 8011252:	bd80      	pop	{r7, pc}
 8011254:	0802afd4 	.word	0x0802afd4
 8011258:	0802b064 	.word	0x0802b064

0801125c <read_conn>:

static void read_conn(struct mg_connection *c, struct pkt *pkt) {
 801125c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011260:	b090      	sub	sp, #64	@ 0x40
 8011262:	af06      	add	r7, sp, #24
 8011264:	60f8      	str	r0, [r7, #12]
 8011266:	60b9      	str	r1, [r7, #8]
  struct connstate *s = (struct connstate *) (c + 1);
 8011268:	68fb      	ldr	r3, [r7, #12]
 801126a:	33b0      	adds	r3, #176	@ 0xb0
 801126c:	623b      	str	r3, [r7, #32]
  struct mg_iobuf *io = c->is_tls ? &c->rtls : &c->recv;
 801126e:	68fb      	ldr	r3, [r7, #12]
 8011270:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8011274:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011278:	b2db      	uxtb	r3, r3
 801127a:	2b00      	cmp	r3, #0
 801127c:	d002      	beq.n	8011284 <read_conn+0x28>
 801127e:	68fb      	ldr	r3, [r7, #12]
 8011280:	3368      	adds	r3, #104	@ 0x68
 8011282:	e001      	b.n	8011288 <read_conn+0x2c>
 8011284:	68fb      	ldr	r3, [r7, #12]
 8011286:	3338      	adds	r3, #56	@ 0x38
 8011288:	61fb      	str	r3, [r7, #28]
  uint32_t seq = mg_ntohl(pkt->tcp->seq);
 801128a:	68bb      	ldr	r3, [r7, #8]
 801128c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801128e:	685b      	ldr	r3, [r3, #4]
 8011290:	4618      	mov	r0, r3
 8011292:	f010 fdb8 	bl	8021e06 <mg_ntohl>
 8011296:	61b8      	str	r0, [r7, #24]
  uint32_t rem_ip;
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 8011298:	68fb      	ldr	r3, [r7, #12]
 801129a:	331c      	adds	r3, #28
 801129c:	681b      	ldr	r3, [r3, #0]
 801129e:	613b      	str	r3, [r7, #16]
  if (pkt->tcp->flags & TH_FIN) {
 80112a0:	68bb      	ldr	r3, [r7, #8]
 80112a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80112a4:	7b5b      	ldrb	r3, [r3, #13]
 80112a6:	f003 0301 	and.w	r3, r3, #1
 80112aa:	2b00      	cmp	r3, #0
 80112ac:	d07e      	beq.n	80113ac <read_conn+0x150>
    // If we initiated the closure, we reply with ACK upon receiving FIN
    // If we didn't initiate it, we reply with FIN as part of the normal TCP
    // closure process
    uint8_t flags = TH_ACK;
 80112ae:	2310      	movs	r3, #16
 80112b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    s->ack = (uint32_t) (mg_htonl(pkt->tcp->seq) + pkt->pay.len + 1);
 80112b4:	68bb      	ldr	r3, [r7, #8]
 80112b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80112b8:	685b      	ldr	r3, [r3, #4]
 80112ba:	4618      	mov	r0, r3
 80112bc:	f010 fda3 	bl	8021e06 <mg_ntohl>
 80112c0:	4602      	mov	r2, r0
 80112c2:	68bb      	ldr	r3, [r7, #8]
 80112c4:	68db      	ldr	r3, [r3, #12]
 80112c6:	4413      	add	r3, r2
 80112c8:	1c5a      	adds	r2, r3, #1
 80112ca:	6a3b      	ldr	r3, [r7, #32]
 80112cc:	605a      	str	r2, [r3, #4]
    s->fin_rcvd = true;
 80112ce:	6a3b      	ldr	r3, [r7, #32]
 80112d0:	2201      	movs	r2, #1
 80112d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    if (c->is_draining && s->ttype == MIP_TTYPE_FIN) {
 80112d6:	68fb      	ldr	r3, [r7, #12]
 80112d8:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 80112dc:	f003 0310 	and.w	r3, r3, #16
 80112e0:	b2db      	uxtb	r3, r3
 80112e2:	2b00      	cmp	r3, #0
 80112e4:	d023      	beq.n	801132e <read_conn+0xd2>
 80112e6:	6a3b      	ldr	r3, [r7, #32]
 80112e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80112ec:	2b04      	cmp	r3, #4
 80112ee:	d11e      	bne.n	801132e <read_conn+0xd2>
      if (s->seq == mg_htonl(pkt->tcp->ack)) {  // Simultaneous closure ?
 80112f0:	6a3b      	ldr	r3, [r7, #32]
 80112f2:	681c      	ldr	r4, [r3, #0]
 80112f4:	68bb      	ldr	r3, [r7, #8]
 80112f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80112f8:	689b      	ldr	r3, [r3, #8]
 80112fa:	4618      	mov	r0, r3
 80112fc:	f010 fd83 	bl	8021e06 <mg_ntohl>
 8011300:	4603      	mov	r3, r0
 8011302:	429c      	cmp	r4, r3
 8011304:	d105      	bne.n	8011312 <read_conn+0xb6>
        s->seq++;                               // Yes. Increment our SEQ
 8011306:	6a3b      	ldr	r3, [r7, #32]
 8011308:	681b      	ldr	r3, [r3, #0]
 801130a:	1c5a      	adds	r2, r3, #1
 801130c:	6a3b      	ldr	r3, [r7, #32]
 801130e:	601a      	str	r2, [r3, #0]
 8011310:	e008      	b.n	8011324 <read_conn+0xc8>
      } else {                                  // Otherwise,
        s->seq = mg_htonl(pkt->tcp->ack);       // Set to peer's ACK
 8011312:	68bb      	ldr	r3, [r7, #8]
 8011314:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011316:	689b      	ldr	r3, [r3, #8]
 8011318:	4618      	mov	r0, r3
 801131a:	f010 fd74 	bl	8021e06 <mg_ntohl>
 801131e:	4602      	mov	r2, r0
 8011320:	6a3b      	ldr	r3, [r7, #32]
 8011322:	601a      	str	r2, [r3, #0]
      }
      s->twclosure = true;
 8011324:	6a3b      	ldr	r3, [r7, #32]
 8011326:	2201      	movs	r2, #1
 8011328:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 801132c:	e010      	b.n	8011350 <read_conn+0xf4>
    } else {
      flags |= TH_FIN;
 801132e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011332:	f043 0301 	orr.w	r3, r3, #1
 8011336:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      c->is_draining = 1;
 801133a:	68fa      	ldr	r2, [r7, #12]
 801133c:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8011340:	f043 0310 	orr.w	r3, r3, #16
 8011344:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
      settmout(c, MIP_TTYPE_FIN);
 8011348:	2104      	movs	r1, #4
 801134a:	68f8      	ldr	r0, [r7, #12]
 801134c:	f7fe f9b4 	bl	800f6b8 <settmout>
    }
    tx_tcp(c->mgr->ifp, s->mac, rem_ip, flags, c->loc.port, c->rem.port,
 8011350:	68fb      	ldr	r3, [r7, #12]
 8011352:	685b      	ldr	r3, [r3, #4]
 8011354:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
 8011356:	6a3b      	ldr	r3, [r7, #32]
 8011358:	f103 081a 	add.w	r8, r3, #26
 801135c:	693b      	ldr	r3, [r7, #16]
 801135e:	607b      	str	r3, [r7, #4]
 8011360:	68fb      	ldr	r3, [r7, #12]
 8011362:	8b1c      	ldrh	r4, [r3, #24]
 8011364:	68fb      	ldr	r3, [r7, #12]
 8011366:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
 8011368:	6a3b      	ldr	r3, [r7, #32]
 801136a:	681b      	ldr	r3, [r3, #0]
 801136c:	4618      	mov	r0, r3
 801136e:	f010 fd4a 	bl	8021e06 <mg_ntohl>
 8011372:	6038      	str	r0, [r7, #0]
 8011374:	6a3b      	ldr	r3, [r7, #32]
 8011376:	685b      	ldr	r3, [r3, #4]
 8011378:	4618      	mov	r0, r3
 801137a:	f010 fd44 	bl	8021e06 <mg_ntohl>
 801137e:	4602      	mov	r2, r0
 8011380:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011384:	2100      	movs	r1, #0
 8011386:	9105      	str	r1, [sp, #20]
 8011388:	499b      	ldr	r1, [pc, #620]	@ (80115f8 <read_conn+0x39c>)
 801138a:	9104      	str	r1, [sp, #16]
 801138c:	9203      	str	r2, [sp, #12]
 801138e:	6839      	ldr	r1, [r7, #0]
 8011390:	9102      	str	r1, [sp, #8]
 8011392:	9501      	str	r5, [sp, #4]
 8011394:	9400      	str	r4, [sp, #0]
 8011396:	687a      	ldr	r2, [r7, #4]
 8011398:	4641      	mov	r1, r8
 801139a:	4630      	mov	r0, r6
 801139c:	f7ff fbdc 	bl	8010b58 <tx_tcp>
           mg_htonl(s->seq), mg_htonl(s->ack), "", 0);
    if (pkt->pay.len == 0) return;  // if no data, we're done
 80113a0:	68bb      	ldr	r3, [r7, #8]
 80113a2:	68db      	ldr	r3, [r3, #12]
 80113a4:	2b00      	cmp	r3, #0
 80113a6:	f040 808f 	bne.w	80114c8 <read_conn+0x26c>
 80113aa:	e16b      	b.n	8011684 <read_conn+0x428>
  } else if (pkt->pay.len == 0) {   // this is an ACK
 80113ac:	68bb      	ldr	r3, [r7, #8]
 80113ae:	68db      	ldr	r3, [r3, #12]
 80113b0:	2b00      	cmp	r3, #0
 80113b2:	d110      	bne.n	80113d6 <read_conn+0x17a>
    if (s->fin_rcvd && s->ttype == MIP_TTYPE_FIN) s->twclosure = true;
 80113b4:	6a3b      	ldr	r3, [r7, #32]
 80113b6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80113ba:	2b00      	cmp	r3, #0
 80113bc:	f000 815f 	beq.w	801167e <read_conn+0x422>
 80113c0:	6a3b      	ldr	r3, [r7, #32]
 80113c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80113c6:	2b04      	cmp	r3, #4
 80113c8:	f040 8159 	bne.w	801167e <read_conn+0x422>
 80113cc:	6a3b      	ldr	r3, [r7, #32]
 80113ce:	2201      	movs	r2, #1
 80113d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    return;  // no data to process
 80113d4:	e153      	b.n	801167e <read_conn+0x422>
  } else if (seq != s->ack) {
 80113d6:	6a3b      	ldr	r3, [r7, #32]
 80113d8:	685b      	ldr	r3, [r3, #4]
 80113da:	69ba      	ldr	r2, [r7, #24]
 80113dc:	429a      	cmp	r2, r3
 80113de:	d059      	beq.n	8011494 <read_conn+0x238>
    uint32_t ack = (uint32_t) (mg_htonl(pkt->tcp->seq) + pkt->pay.len);
 80113e0:	68bb      	ldr	r3, [r7, #8]
 80113e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80113e4:	685b      	ldr	r3, [r3, #4]
 80113e6:	4618      	mov	r0, r3
 80113e8:	f010 fd0d 	bl	8021e06 <mg_ntohl>
 80113ec:	4602      	mov	r2, r0
 80113ee:	68bb      	ldr	r3, [r7, #8]
 80113f0:	68db      	ldr	r3, [r3, #12]
 80113f2:	4413      	add	r3, r2
 80113f4:	617b      	str	r3, [r7, #20]
    if (s->ack == ack) {
 80113f6:	6a3b      	ldr	r3, [r7, #32]
 80113f8:	685b      	ldr	r3, [r3, #4]
 80113fa:	697a      	ldr	r2, [r7, #20]
 80113fc:	429a      	cmp	r2, r3
 80113fe:	d10f      	bne.n	8011420 <read_conn+0x1c4>
      MG_VERBOSE(("ignoring duplicate pkt"));
 8011400:	4b7e      	ldr	r3, [pc, #504]	@ (80115fc <read_conn+0x3a0>)
 8011402:	681b      	ldr	r3, [r3, #0]
 8011404:	2b03      	cmp	r3, #3
 8011406:	f340 813c 	ble.w	8011682 <read_conn+0x426>
 801140a:	4b7d      	ldr	r3, [pc, #500]	@ (8011600 <read_conn+0x3a4>)
 801140c:	f241 320c 	movw	r2, #4876	@ 0x130c
 8011410:	497c      	ldr	r1, [pc, #496]	@ (8011604 <read_conn+0x3a8>)
 8011412:	2004      	movs	r0, #4
 8011414:	f7fd fa46 	bl	800e8a4 <mg_log_prefix>
 8011418:	487b      	ldr	r0, [pc, #492]	@ (8011608 <read_conn+0x3ac>)
 801141a:	f7fd fa93 	bl	800e944 <mg_log>
    } else {
      MG_VERBOSE(("SEQ != ACK: %x %x %x", seq, s->ack, ack));
      tx_tcp(c->mgr->ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
             mg_htonl(s->seq), mg_htonl(s->ack), "", 0);
    }
    return;  // drop it
 801141e:	e130      	b.n	8011682 <read_conn+0x426>
      MG_VERBOSE(("SEQ != ACK: %x %x %x", seq, s->ack, ack));
 8011420:	4b76      	ldr	r3, [pc, #472]	@ (80115fc <read_conn+0x3a0>)
 8011422:	681b      	ldr	r3, [r3, #0]
 8011424:	2b03      	cmp	r3, #3
 8011426:	dd0d      	ble.n	8011444 <read_conn+0x1e8>
 8011428:	4b75      	ldr	r3, [pc, #468]	@ (8011600 <read_conn+0x3a4>)
 801142a:	f241 320e 	movw	r2, #4878	@ 0x130e
 801142e:	4975      	ldr	r1, [pc, #468]	@ (8011604 <read_conn+0x3a8>)
 8011430:	2004      	movs	r0, #4
 8011432:	f7fd fa37 	bl	800e8a4 <mg_log_prefix>
 8011436:	6a3b      	ldr	r3, [r7, #32]
 8011438:	685a      	ldr	r2, [r3, #4]
 801143a:	697b      	ldr	r3, [r7, #20]
 801143c:	69b9      	ldr	r1, [r7, #24]
 801143e:	4873      	ldr	r0, [pc, #460]	@ (801160c <read_conn+0x3b0>)
 8011440:	f7fd fa80 	bl	800e944 <mg_log>
      tx_tcp(c->mgr->ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 8011444:	68fb      	ldr	r3, [r7, #12]
 8011446:	685b      	ldr	r3, [r3, #4]
 8011448:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
 801144a:	6a3b      	ldr	r3, [r7, #32]
 801144c:	f103 081a 	add.w	r8, r3, #26
 8011450:	693b      	ldr	r3, [r7, #16]
 8011452:	607b      	str	r3, [r7, #4]
 8011454:	68fb      	ldr	r3, [r7, #12]
 8011456:	8b1c      	ldrh	r4, [r3, #24]
 8011458:	68fb      	ldr	r3, [r7, #12]
 801145a:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
 801145c:	6a3b      	ldr	r3, [r7, #32]
 801145e:	681b      	ldr	r3, [r3, #0]
 8011460:	4618      	mov	r0, r3
 8011462:	f010 fcd0 	bl	8021e06 <mg_ntohl>
 8011466:	6038      	str	r0, [r7, #0]
 8011468:	6a3b      	ldr	r3, [r7, #32]
 801146a:	685b      	ldr	r3, [r3, #4]
 801146c:	4618      	mov	r0, r3
 801146e:	f010 fcca 	bl	8021e06 <mg_ntohl>
 8011472:	4603      	mov	r3, r0
 8011474:	2200      	movs	r2, #0
 8011476:	9205      	str	r2, [sp, #20]
 8011478:	4a5f      	ldr	r2, [pc, #380]	@ (80115f8 <read_conn+0x39c>)
 801147a:	9204      	str	r2, [sp, #16]
 801147c:	9303      	str	r3, [sp, #12]
 801147e:	6839      	ldr	r1, [r7, #0]
 8011480:	9102      	str	r1, [sp, #8]
 8011482:	9501      	str	r5, [sp, #4]
 8011484:	9400      	str	r4, [sp, #0]
 8011486:	2310      	movs	r3, #16
 8011488:	687a      	ldr	r2, [r7, #4]
 801148a:	4641      	mov	r1, r8
 801148c:	4630      	mov	r0, r6
 801148e:	f7ff fb63 	bl	8010b58 <tx_tcp>
    return;  // drop it
 8011492:	e0f6      	b.n	8011682 <read_conn+0x426>
  } else if (io->size - io->len < pkt->pay.len &&
 8011494:	69fb      	ldr	r3, [r7, #28]
 8011496:	685a      	ldr	r2, [r3, #4]
 8011498:	69fb      	ldr	r3, [r7, #28]
 801149a:	689b      	ldr	r3, [r3, #8]
 801149c:	1ad2      	subs	r2, r2, r3
 801149e:	68bb      	ldr	r3, [r7, #8]
 80114a0:	68db      	ldr	r3, [r3, #12]
 80114a2:	429a      	cmp	r2, r3
 80114a4:	d210      	bcs.n	80114c8 <read_conn+0x26c>
             !mg_iobuf_resize(io, io->len + pkt->pay.len)) {
 80114a6:	69fb      	ldr	r3, [r7, #28]
 80114a8:	689a      	ldr	r2, [r3, #8]
 80114aa:	68bb      	ldr	r3, [r7, #8]
 80114ac:	68db      	ldr	r3, [r3, #12]
 80114ae:	4413      	add	r3, r2
 80114b0:	4619      	mov	r1, r3
 80114b2:	69f8      	ldr	r0, [r7, #28]
 80114b4:	f7fc f900 	bl	800d6b8 <mg_iobuf_resize>
 80114b8:	4603      	mov	r3, r0
  } else if (io->size - io->len < pkt->pay.len &&
 80114ba:	2b00      	cmp	r3, #0
 80114bc:	d104      	bne.n	80114c8 <read_conn+0x26c>
    mg_error(c, "oom");
 80114be:	4954      	ldr	r1, [pc, #336]	@ (8011610 <read_conn+0x3b4>)
 80114c0:	68f8      	ldr	r0, [r7, #12]
 80114c2:	f7f7 fb77 	bl	8008bb4 <mg_error>
    return;  // drop it
 80114c6:	e0dd      	b.n	8011684 <read_conn+0x428>
  // Copy TCP payload into the IO buffer. If the connection is plain text,
  // we copy to c->recv. If the connection is TLS, this data is encrypted,
  // therefore we copy that encrypted data to the c->rtls iobuffer instead,
  // and then call mg_tls_recv() to decrypt it. NOTE: mg_tls_recv() will
  // call back mg_io_recv() which grabs raw data from c->rtls
  memcpy(&io->buf[io->len], pkt->pay.buf, pkt->pay.len);
 80114c8:	69fb      	ldr	r3, [r7, #28]
 80114ca:	681a      	ldr	r2, [r3, #0]
 80114cc:	69fb      	ldr	r3, [r7, #28]
 80114ce:	689b      	ldr	r3, [r3, #8]
 80114d0:	18d0      	adds	r0, r2, r3
 80114d2:	68bb      	ldr	r3, [r7, #8]
 80114d4:	6899      	ldr	r1, [r3, #8]
 80114d6:	68bb      	ldr	r3, [r7, #8]
 80114d8:	68db      	ldr	r3, [r3, #12]
 80114da:	461a      	mov	r2, r3
 80114dc:	f016 fa2d 	bl	802793a <memcpy>
  io->len += pkt->pay.len;
 80114e0:	69fb      	ldr	r3, [r7, #28]
 80114e2:	689a      	ldr	r2, [r3, #8]
 80114e4:	68bb      	ldr	r3, [r7, #8]
 80114e6:	68db      	ldr	r3, [r3, #12]
 80114e8:	441a      	add	r2, r3
 80114ea:	69fb      	ldr	r3, [r7, #28]
 80114ec:	609a      	str	r2, [r3, #8]
  MG_VERBOSE(("%lu SEQ %x -> %x", c->id, mg_htonl(pkt->tcp->seq), s->ack));
 80114ee:	4b43      	ldr	r3, [pc, #268]	@ (80115fc <read_conn+0x3a0>)
 80114f0:	681b      	ldr	r3, [r3, #0]
 80114f2:	2b03      	cmp	r3, #3
 80114f4:	dd15      	ble.n	8011522 <read_conn+0x2c6>
 80114f6:	4b42      	ldr	r3, [pc, #264]	@ (8011600 <read_conn+0x3a4>)
 80114f8:	f241 321f 	movw	r2, #4895	@ 0x131f
 80114fc:	4941      	ldr	r1, [pc, #260]	@ (8011604 <read_conn+0x3a8>)
 80114fe:	2004      	movs	r0, #4
 8011500:	f7fd f9d0 	bl	800e8a4 <mg_log_prefix>
 8011504:	68fb      	ldr	r3, [r7, #12]
 8011506:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
 8011508:	68bb      	ldr	r3, [r7, #8]
 801150a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801150c:	685b      	ldr	r3, [r3, #4]
 801150e:	4618      	mov	r0, r3
 8011510:	f010 fc79 	bl	8021e06 <mg_ntohl>
 8011514:	4602      	mov	r2, r0
 8011516:	6a3b      	ldr	r3, [r7, #32]
 8011518:	685b      	ldr	r3, [r3, #4]
 801151a:	4621      	mov	r1, r4
 801151c:	483d      	ldr	r0, [pc, #244]	@ (8011614 <read_conn+0x3b8>)
 801151e:	f7fd fa11 	bl	800e944 <mg_log>
  // Advance ACK counter
  s->ack = (uint32_t) (mg_htonl(pkt->tcp->seq) + pkt->pay.len);
 8011522:	68bb      	ldr	r3, [r7, #8]
 8011524:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011526:	685b      	ldr	r3, [r3, #4]
 8011528:	4618      	mov	r0, r3
 801152a:	f010 fc6c 	bl	8021e06 <mg_ntohl>
 801152e:	4602      	mov	r2, r0
 8011530:	68bb      	ldr	r3, [r7, #8]
 8011532:	68db      	ldr	r3, [r3, #12]
 8011534:	441a      	add	r2, r3
 8011536:	6a3b      	ldr	r3, [r7, #32]
 8011538:	605a      	str	r2, [r3, #4]
  s->unacked += pkt->pay.len;
 801153a:	6a3b      	ldr	r3, [r7, #32]
 801153c:	695a      	ldr	r2, [r3, #20]
 801153e:	68bb      	ldr	r3, [r7, #8]
 8011540:	68db      	ldr	r3, [r3, #12]
 8011542:	441a      	add	r2, r3
 8011544:	6a3b      	ldr	r3, [r7, #32]
 8011546:	615a      	str	r2, [r3, #20]
  // size_t diff = s->acked <= s->ack ? s->ack - s->acked : s->ack;
  if (s->unacked > MIP_TCP_WIN / 2 && s->acked != s->ack) {
 8011548:	6a3b      	ldr	r3, [r7, #32]
 801154a:	695b      	ldr	r3, [r3, #20]
 801154c:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8011550:	4293      	cmp	r3, r2
 8011552:	d963      	bls.n	801161c <read_conn+0x3c0>
 8011554:	6a3b      	ldr	r3, [r7, #32]
 8011556:	691a      	ldr	r2, [r3, #16]
 8011558:	6a3b      	ldr	r3, [r7, #32]
 801155a:	685b      	ldr	r3, [r3, #4]
 801155c:	429a      	cmp	r2, r3
 801155e:	d05d      	beq.n	801161c <read_conn+0x3c0>
    // Send ACK immediately
    MG_VERBOSE(("%lu imm ACK %lu", c->id, s->acked));
 8011560:	4b26      	ldr	r3, [pc, #152]	@ (80115fc <read_conn+0x3a0>)
 8011562:	681b      	ldr	r3, [r3, #0]
 8011564:	2b03      	cmp	r3, #3
 8011566:	dd0e      	ble.n	8011586 <read_conn+0x32a>
 8011568:	4b25      	ldr	r3, [pc, #148]	@ (8011600 <read_conn+0x3a4>)
 801156a:	f241 3226 	movw	r2, #4902	@ 0x1326
 801156e:	4925      	ldr	r1, [pc, #148]	@ (8011604 <read_conn+0x3a8>)
 8011570:	2004      	movs	r0, #4
 8011572:	f7fd f997 	bl	800e8a4 <mg_log_prefix>
 8011576:	68fb      	ldr	r3, [r7, #12]
 8011578:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 801157a:	6a3b      	ldr	r3, [r7, #32]
 801157c:	691b      	ldr	r3, [r3, #16]
 801157e:	461a      	mov	r2, r3
 8011580:	4825      	ldr	r0, [pc, #148]	@ (8011618 <read_conn+0x3bc>)
 8011582:	f7fd f9df 	bl	800e944 <mg_log>
    tx_tcp(c->mgr->ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 8011586:	68fb      	ldr	r3, [r7, #12]
 8011588:	685b      	ldr	r3, [r3, #4]
 801158a:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
 801158c:	6a3b      	ldr	r3, [r7, #32]
 801158e:	f103 081a 	add.w	r8, r3, #26
 8011592:	693b      	ldr	r3, [r7, #16]
 8011594:	607b      	str	r3, [r7, #4]
 8011596:	68fb      	ldr	r3, [r7, #12]
 8011598:	8b1c      	ldrh	r4, [r3, #24]
 801159a:	68fb      	ldr	r3, [r7, #12]
 801159c:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
 801159e:	6a3b      	ldr	r3, [r7, #32]
 80115a0:	681b      	ldr	r3, [r3, #0]
 80115a2:	4618      	mov	r0, r3
 80115a4:	f010 fc2f 	bl	8021e06 <mg_ntohl>
 80115a8:	6038      	str	r0, [r7, #0]
 80115aa:	6a3b      	ldr	r3, [r7, #32]
 80115ac:	685b      	ldr	r3, [r3, #4]
 80115ae:	4618      	mov	r0, r3
 80115b0:	f010 fc29 	bl	8021e06 <mg_ntohl>
 80115b4:	4603      	mov	r3, r0
 80115b6:	2200      	movs	r2, #0
 80115b8:	9205      	str	r2, [sp, #20]
 80115ba:	2200      	movs	r2, #0
 80115bc:	9204      	str	r2, [sp, #16]
 80115be:	9303      	str	r3, [sp, #12]
 80115c0:	6839      	ldr	r1, [r7, #0]
 80115c2:	9102      	str	r1, [sp, #8]
 80115c4:	9501      	str	r5, [sp, #4]
 80115c6:	9400      	str	r4, [sp, #0]
 80115c8:	2310      	movs	r3, #16
 80115ca:	687a      	ldr	r2, [r7, #4]
 80115cc:	4641      	mov	r1, r8
 80115ce:	4630      	mov	r0, r6
 80115d0:	f7ff fac2 	bl	8010b58 <tx_tcp>
           mg_htonl(s->seq), mg_htonl(s->ack), NULL, 0);
    s->unacked = 0;
 80115d4:	6a3b      	ldr	r3, [r7, #32]
 80115d6:	2200      	movs	r2, #0
 80115d8:	615a      	str	r2, [r3, #20]
    s->acked = s->ack;
 80115da:	6a3b      	ldr	r3, [r7, #32]
 80115dc:	685a      	ldr	r2, [r3, #4]
 80115de:	6a3b      	ldr	r3, [r7, #32]
 80115e0:	611a      	str	r2, [r3, #16]
    if (s->ttype != MIP_TTYPE_KEEPALIVE) settmout(c, MIP_TTYPE_KEEPALIVE);
 80115e2:	6a3b      	ldr	r3, [r7, #32]
 80115e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	d020      	beq.n	801162e <read_conn+0x3d2>
 80115ec:	2100      	movs	r1, #0
 80115ee:	68f8      	ldr	r0, [r7, #12]
 80115f0:	f7fe f862 	bl	800f6b8 <settmout>
 80115f4:	e01b      	b.n	801162e <read_conn+0x3d2>
 80115f6:	bf00      	nop
 80115f8:	0802a47c 	.word	0x0802a47c
 80115fc:	24000258 	.word	0x24000258
 8011600:	0802d934 	.word	0x0802d934
 8011604:	08029c3c 	.word	0x08029c3c
 8011608:	0802b074 	.word	0x0802b074
 801160c:	0802b08c 	.word	0x0802b08c
 8011610:	0802afd4 	.word	0x0802afd4
 8011614:	0802b0a4 	.word	0x0802b0a4
 8011618:	0802b0b8 	.word	0x0802b0b8
  } else {
    // if not already running, setup a timer to send an ACK later
    if (s->ttype != MIP_TTYPE_ACK) settmout(c, MIP_TTYPE_ACK);
 801161c:	6a3b      	ldr	r3, [r7, #32]
 801161e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011622:	2b01      	cmp	r3, #1
 8011624:	d003      	beq.n	801162e <read_conn+0x3d2>
 8011626:	2101      	movs	r1, #1
 8011628:	68f8      	ldr	r0, [r7, #12]
 801162a:	f7fe f845 	bl	800f6b8 <settmout>
  }
  if (c->is_tls && c->is_tls_hs) {
 801162e:	68fb      	ldr	r3, [r7, #12]
 8011630:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8011634:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011638:	b2db      	uxtb	r3, r3
 801163a:	2b00      	cmp	r3, #0
 801163c:	d00b      	beq.n	8011656 <read_conn+0x3fa>
 801163e:	68fb      	ldr	r3, [r7, #12]
 8011640:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8011644:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8011648:	b2db      	uxtb	r3, r3
 801164a:	2b00      	cmp	r3, #0
 801164c:	d003      	beq.n	8011656 <read_conn+0x3fa>
    mg_tls_handshake(c);
 801164e:	68f8      	ldr	r0, [r7, #12]
 8011650:	f009 fbf4 	bl	801ae3c <mg_tls_handshake>
 8011654:	e016      	b.n	8011684 <read_conn+0x428>
  } else if (c->is_tls) {
 8011656:	68fb      	ldr	r3, [r7, #12]
 8011658:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801165c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011660:	b2db      	uxtb	r3, r3
 8011662:	2b00      	cmp	r3, #0
 8011664:	d003      	beq.n	801166e <read_conn+0x412>
    handle_tls_recv(c);
 8011666:	68f8      	ldr	r0, [r7, #12]
 8011668:	f7ff fd96 	bl	8011198 <handle_tls_recv>
 801166c:	e00a      	b.n	8011684 <read_conn+0x428>
  } else {
    // Plain text connection, data is already in c->recv, trigger MG_EV_READ
    mg_call(c, MG_EV_READ, &pkt->pay.len);
 801166e:	68bb      	ldr	r3, [r7, #8]
 8011670:	330c      	adds	r3, #12
 8011672:	461a      	mov	r2, r3
 8011674:	2107      	movs	r1, #7
 8011676:	68f8      	ldr	r0, [r7, #12]
 8011678:	f7f7 fa7c 	bl	8008b74 <mg_call>
 801167c:	e002      	b.n	8011684 <read_conn+0x428>
    return;  // no data to process
 801167e:	bf00      	nop
 8011680:	e000      	b.n	8011684 <read_conn+0x428>
    return;  // drop it
 8011682:	bf00      	nop
  }
}
 8011684:	3728      	adds	r7, #40	@ 0x28
 8011686:	46bd      	mov	sp, r7
 8011688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801168c <handle_opt>:

// process options (MSS)
static void handle_opt(struct connstate *s, struct tcp *tcp) {
 801168c:	b580      	push	{r7, lr}
 801168e:	b086      	sub	sp, #24
 8011690:	af00      	add	r7, sp, #0
 8011692:	6078      	str	r0, [r7, #4]
 8011694:	6039      	str	r1, [r7, #0]
  uint8_t *opts = (uint8_t *) (tcp + 1);
 8011696:	683b      	ldr	r3, [r7, #0]
 8011698:	3314      	adds	r3, #20
 801169a:	617b      	str	r3, [r7, #20]
  int len = 4 * ((int) (tcp->off >> 4) - ((int) sizeof(*tcp) / 4));
 801169c:	683b      	ldr	r3, [r7, #0]
 801169e:	7b1b      	ldrb	r3, [r3, #12]
 80116a0:	091b      	lsrs	r3, r3, #4
 80116a2:	b2db      	uxtb	r3, r3
 80116a4:	3b05      	subs	r3, #5
 80116a6:	009b      	lsls	r3, r3, #2
 80116a8:	613b      	str	r3, [r7, #16]
  s->dmss = 536;     // assume default, RFC-9293 3.7.1
 80116aa:	687b      	ldr	r3, [r7, #4]
 80116ac:	f44f 7206 	mov.w	r2, #536	@ 0x218
 80116b0:	831a      	strh	r2, [r3, #24]
  while (len > 0) {  // RFC-9293 3.1 3.2
 80116b2:	e038      	b.n	8011726 <handle_opt+0x9a>
    uint8_t kind = opts[0], optlen = 1;
 80116b4:	697b      	ldr	r3, [r7, #20]
 80116b6:	781b      	ldrb	r3, [r3, #0]
 80116b8:	73bb      	strb	r3, [r7, #14]
 80116ba:	2301      	movs	r3, #1
 80116bc:	73fb      	strb	r3, [r7, #15]
    if (kind != 1) {         // No-Operation
 80116be:	7bbb      	ldrb	r3, [r7, #14]
 80116c0:	2b01      	cmp	r3, #1
 80116c2:	d017      	beq.n	80116f4 <handle_opt+0x68>
      if (kind == 0) break;  // End of Option List
 80116c4:	7bbb      	ldrb	r3, [r7, #14]
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	d031      	beq.n	801172e <handle_opt+0xa2>
      optlen = opts[1];
 80116ca:	697b      	ldr	r3, [r7, #20]
 80116cc:	785b      	ldrb	r3, [r3, #1]
 80116ce:	73fb      	strb	r3, [r7, #15]
      if (kind == 2 && optlen == 4)  // set received MSS
 80116d0:	7bbb      	ldrb	r3, [r7, #14]
 80116d2:	2b02      	cmp	r3, #2
 80116d4:	d10e      	bne.n	80116f4 <handle_opt+0x68>
 80116d6:	7bfb      	ldrb	r3, [r7, #15]
 80116d8:	2b04      	cmp	r3, #4
 80116da:	d10b      	bne.n	80116f4 <handle_opt+0x68>
        s->dmss = (uint16_t) (((uint16_t) opts[2] << 8) + opts[3]);
 80116dc:	697b      	ldr	r3, [r7, #20]
 80116de:	3302      	adds	r3, #2
 80116e0:	781b      	ldrb	r3, [r3, #0]
 80116e2:	021b      	lsls	r3, r3, #8
 80116e4:	b29b      	uxth	r3, r3
 80116e6:	697a      	ldr	r2, [r7, #20]
 80116e8:	3203      	adds	r2, #3
 80116ea:	7812      	ldrb	r2, [r2, #0]
 80116ec:	4413      	add	r3, r2
 80116ee:	b29a      	uxth	r2, r3
 80116f0:	687b      	ldr	r3, [r7, #4]
 80116f2:	831a      	strh	r2, [r3, #24]
    }
    MG_VERBOSE(("kind: %u, optlen: %u, len: %d\n", kind, optlen, len));
 80116f4:	4b10      	ldr	r3, [pc, #64]	@ (8011738 <handle_opt+0xac>)
 80116f6:	681b      	ldr	r3, [r3, #0]
 80116f8:	2b03      	cmp	r3, #3
 80116fa:	dd0c      	ble.n	8011716 <handle_opt+0x8a>
 80116fc:	4b0f      	ldr	r3, [pc, #60]	@ (801173c <handle_opt+0xb0>)
 80116fe:	f241 3247 	movw	r2, #4935	@ 0x1347
 8011702:	490f      	ldr	r1, [pc, #60]	@ (8011740 <handle_opt+0xb4>)
 8011704:	2004      	movs	r0, #4
 8011706:	f7fd f8cd 	bl	800e8a4 <mg_log_prefix>
 801170a:	7bb9      	ldrb	r1, [r7, #14]
 801170c:	7bfa      	ldrb	r2, [r7, #15]
 801170e:	693b      	ldr	r3, [r7, #16]
 8011710:	480c      	ldr	r0, [pc, #48]	@ (8011744 <handle_opt+0xb8>)
 8011712:	f7fd f917 	bl	800e944 <mg_log>
    opts += optlen;
 8011716:	7bfb      	ldrb	r3, [r7, #15]
 8011718:	697a      	ldr	r2, [r7, #20]
 801171a:	4413      	add	r3, r2
 801171c:	617b      	str	r3, [r7, #20]
    len -= optlen;
 801171e:	7bfb      	ldrb	r3, [r7, #15]
 8011720:	693a      	ldr	r2, [r7, #16]
 8011722:	1ad3      	subs	r3, r2, r3
 8011724:	613b      	str	r3, [r7, #16]
  while (len > 0) {  // RFC-9293 3.1 3.2
 8011726:	693b      	ldr	r3, [r7, #16]
 8011728:	2b00      	cmp	r3, #0
 801172a:	dcc3      	bgt.n	80116b4 <handle_opt+0x28>
  }
}
 801172c:	e000      	b.n	8011730 <handle_opt+0xa4>
      if (kind == 0) break;  // End of Option List
 801172e:	bf00      	nop
}
 8011730:	bf00      	nop
 8011732:	3718      	adds	r7, #24
 8011734:	46bd      	mov	sp, r7
 8011736:	bd80      	pop	{r7, pc}
 8011738:	24000258 	.word	0x24000258
 801173c:	0802d940 	.word	0x0802d940
 8011740:	08029c3c 	.word	0x08029c3c
 8011744:	0802b0c8 	.word	0x0802b0c8

08011748 <rx_tcp>:

static void rx_tcp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 8011748:	b590      	push	{r4, r7, lr}
 801174a:	b089      	sub	sp, #36	@ 0x24
 801174c:	af02      	add	r7, sp, #8
 801174e:	6078      	str	r0, [r7, #4]
 8011750:	6039      	str	r1, [r7, #0]
  struct mg_connection *c = getpeer(ifp->mgr, pkt, false);
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011756:	2200      	movs	r2, #0
 8011758:	6839      	ldr	r1, [r7, #0]
 801175a:	4618      	mov	r0, r3
 801175c:	f7fe fbd4 	bl	800ff08 <getpeer>
 8011760:	6178      	str	r0, [r7, #20]
  struct connstate *s = c == NULL ? NULL : (struct connstate *) (c + 1);
 8011762:	697b      	ldr	r3, [r7, #20]
 8011764:	2b00      	cmp	r3, #0
 8011766:	d002      	beq.n	801176e <rx_tcp+0x26>
 8011768:	697b      	ldr	r3, [r7, #20]
 801176a:	33b0      	adds	r3, #176	@ 0xb0
 801176c:	e000      	b.n	8011770 <rx_tcp+0x28>
 801176e:	2300      	movs	r3, #0
 8011770:	613b      	str	r3, [r7, #16]
#if 0
  MG_INFO(("%lu %hhu %d", c ? c->id : 0, pkt->tcp->flags, (int) pkt->pay.len));
#endif
  if (c != NULL && c->is_connecting && pkt->tcp->flags == (TH_SYN | TH_ACK)) {
 8011772:	697b      	ldr	r3, [r7, #20]
 8011774:	2b00      	cmp	r3, #0
 8011776:	d05d      	beq.n	8011834 <rx_tcp+0xec>
 8011778:	697b      	ldr	r3, [r7, #20]
 801177a:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801177e:	f003 0320 	and.w	r3, r3, #32
 8011782:	b2db      	uxtb	r3, r3
 8011784:	2b00      	cmp	r3, #0
 8011786:	d055      	beq.n	8011834 <rx_tcp+0xec>
 8011788:	683b      	ldr	r3, [r7, #0]
 801178a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801178c:	7b5b      	ldrb	r3, [r3, #13]
 801178e:	2b12      	cmp	r3, #18
 8011790:	d150      	bne.n	8011834 <rx_tcp+0xec>
    handle_opt(s, pkt->tcp);  // process options (MSS)
 8011792:	683b      	ldr	r3, [r7, #0]
 8011794:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011796:	4619      	mov	r1, r3
 8011798:	6938      	ldr	r0, [r7, #16]
 801179a:	f7ff ff77 	bl	801168c <handle_opt>
    s->seq = mg_ntohl(pkt->tcp->ack), s->ack = mg_ntohl(pkt->tcp->seq) + 1;
 801179e:	683b      	ldr	r3, [r7, #0]
 80117a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80117a2:	689b      	ldr	r3, [r3, #8]
 80117a4:	4618      	mov	r0, r3
 80117a6:	f010 fb2e 	bl	8021e06 <mg_ntohl>
 80117aa:	4602      	mov	r2, r0
 80117ac:	693b      	ldr	r3, [r7, #16]
 80117ae:	601a      	str	r2, [r3, #0]
 80117b0:	683b      	ldr	r3, [r7, #0]
 80117b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80117b4:	685b      	ldr	r3, [r3, #4]
 80117b6:	4618      	mov	r0, r3
 80117b8:	f010 fb25 	bl	8021e06 <mg_ntohl>
 80117bc:	4603      	mov	r3, r0
 80117be:	1c5a      	adds	r2, r3, #1
 80117c0:	693b      	ldr	r3, [r7, #16]
 80117c2:	605a      	str	r2, [r3, #4]
    tx_tcp_pkt(ifp, pkt, TH_ACK, pkt->tcp->ack, NULL, 0);
 80117c4:	683b      	ldr	r3, [r7, #0]
 80117c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80117c8:	689b      	ldr	r3, [r3, #8]
 80117ca:	2200      	movs	r2, #0
 80117cc:	9201      	str	r2, [sp, #4]
 80117ce:	2200      	movs	r2, #0
 80117d0:	9200      	str	r2, [sp, #0]
 80117d2:	2210      	movs	r2, #16
 80117d4:	6839      	ldr	r1, [r7, #0]
 80117d6:	6878      	ldr	r0, [r7, #4]
 80117d8:	f7ff fab0 	bl	8010d3c <tx_tcp_pkt>
    c->is_connecting = 0;  // Client connected
 80117dc:	697a      	ldr	r2, [r7, #20]
 80117de:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 80117e2:	f023 0320 	bic.w	r3, r3, #32
 80117e6:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
    settmout(c, MIP_TTYPE_KEEPALIVE);
 80117ea:	2100      	movs	r1, #0
 80117ec:	6978      	ldr	r0, [r7, #20]
 80117ee:	f7fd ff63 	bl	800f6b8 <settmout>
    mg_call(c, MG_EV_CONNECT, NULL);  // Let user know
 80117f2:	2200      	movs	r2, #0
 80117f4:	2104      	movs	r1, #4
 80117f6:	6978      	ldr	r0, [r7, #20]
 80117f8:	f7f7 f9bc 	bl	8008b74 <mg_call>
    if (c->is_tls_hs) mg_tls_handshake(c);
 80117fc:	697b      	ldr	r3, [r7, #20]
 80117fe:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8011802:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8011806:	b2db      	uxtb	r3, r3
 8011808:	2b00      	cmp	r3, #0
 801180a:	d002      	beq.n	8011812 <rx_tcp+0xca>
 801180c:	6978      	ldr	r0, [r7, #20]
 801180e:	f009 fb15 	bl	801ae3c <mg_tls_handshake>
    if (!c->is_tls_hs) c->is_tls = 0;  // user did not call mg_tls_init()
 8011812:	697b      	ldr	r3, [r7, #20]
 8011814:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8011818:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 801181c:	b2db      	uxtb	r3, r3
 801181e:	2b00      	cmp	r3, #0
 8011820:	f040 80d3 	bne.w	80119ca <rx_tcp+0x282>
 8011824:	697a      	ldr	r2, [r7, #20]
 8011826:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 801182a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801182e:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
 8011832:	e0ca      	b.n	80119ca <rx_tcp+0x282>
  } else if (c != NULL && c->is_connecting && pkt->tcp->flags != TH_ACK) {
 8011834:	697b      	ldr	r3, [r7, #20]
 8011836:	2b00      	cmp	r3, #0
 8011838:	d019      	beq.n	801186e <rx_tcp+0x126>
 801183a:	697b      	ldr	r3, [r7, #20]
 801183c:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8011840:	f003 0320 	and.w	r3, r3, #32
 8011844:	b2db      	uxtb	r3, r3
 8011846:	2b00      	cmp	r3, #0
 8011848:	d011      	beq.n	801186e <rx_tcp+0x126>
 801184a:	683b      	ldr	r3, [r7, #0]
 801184c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801184e:	7b5b      	ldrb	r3, [r3, #13]
 8011850:	2b10      	cmp	r3, #16
 8011852:	d00c      	beq.n	801186e <rx_tcp+0x126>
    // mg_hexdump(pkt->raw.buf, pkt->raw.len);
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
 8011854:	683b      	ldr	r3, [r7, #0]
 8011856:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011858:	689b      	ldr	r3, [r3, #8]
 801185a:	2200      	movs	r2, #0
 801185c:	9201      	str	r2, [sp, #4]
 801185e:	2200      	movs	r2, #0
 8011860:	9200      	str	r2, [sp, #0]
 8011862:	2214      	movs	r2, #20
 8011864:	6839      	ldr	r1, [r7, #0]
 8011866:	6878      	ldr	r0, [r7, #4]
 8011868:	f7ff fa68 	bl	8010d3c <tx_tcp_pkt>
 801186c:	e0ad      	b.n	80119ca <rx_tcp+0x282>
  } else if (c != NULL && pkt->tcp->flags & TH_RST) {
 801186e:	697b      	ldr	r3, [r7, #20]
 8011870:	2b00      	cmp	r3, #0
 8011872:	d00b      	beq.n	801188c <rx_tcp+0x144>
 8011874:	683b      	ldr	r3, [r7, #0]
 8011876:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011878:	7b5b      	ldrb	r3, [r3, #13]
 801187a:	f003 0304 	and.w	r3, r3, #4
 801187e:	2b00      	cmp	r3, #0
 8011880:	d004      	beq.n	801188c <rx_tcp+0x144>
    mg_error(c, "peer RST");  // RFC-1122 4.2.2.13
 8011882:	4954      	ldr	r1, [pc, #336]	@ (80119d4 <rx_tcp+0x28c>)
 8011884:	6978      	ldr	r0, [r7, #20]
 8011886:	f7f7 f995 	bl	8008bb4 <mg_error>
 801188a:	e09e      	b.n	80119ca <rx_tcp+0x282>
  } else if (c != NULL) {
 801188c:	697b      	ldr	r3, [r7, #20]
 801188e:	2b00      	cmp	r3, #0
 8011890:	d011      	beq.n	80118b6 <rx_tcp+0x16e>
    MG_DEBUG(("%lu %d %M:%hu -> %M:%hu", c->id, (int) pkt->raw.len,
              mg_print_ip4, &pkt->ip->src, mg_ntohs(pkt->tcp->sport),
              mg_print_ip4, &pkt->ip->dst, mg_ntohs(pkt->tcp->dport)));
    mg_hexdump(pkt->pay.buf, pkt->pay.len);
#endif
    s->tmiss = 0;                         // Reset missed keep-alive counter
 8011892:	693b      	ldr	r3, [r7, #16]
 8011894:	2200      	movs	r2, #0
 8011896:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    if (s->ttype == MIP_TTYPE_KEEPALIVE)  // Advance keep-alive timer
 801189a:	693b      	ldr	r3, [r7, #16]
 801189c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80118a0:	2b00      	cmp	r3, #0
 80118a2:	d103      	bne.n	80118ac <rx_tcp+0x164>
      settmout(c,
 80118a4:	2100      	movs	r1, #0
 80118a6:	6978      	ldr	r0, [r7, #20]
 80118a8:	f7fd ff06 	bl	800f6b8 <settmout>
               MIP_TTYPE_KEEPALIVE);  // unless a former ACK timeout is pending
    read_conn(c, pkt);  // Override timer with ACK timeout if needed
 80118ac:	6839      	ldr	r1, [r7, #0]
 80118ae:	6978      	ldr	r0, [r7, #20]
 80118b0:	f7ff fcd4 	bl	801125c <read_conn>
  } else if (!c->is_accepted) {  // no peer
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
  } else {
    // MG_VERBOSE(("dropped silently.."));
  }
}
 80118b4:	e089      	b.n	80119ca <rx_tcp+0x282>
  } else if ((c = getpeer(ifp->mgr, pkt, true)) == NULL) {
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80118ba:	2201      	movs	r2, #1
 80118bc:	6839      	ldr	r1, [r7, #0]
 80118be:	4618      	mov	r0, r3
 80118c0:	f7fe fb22 	bl	800ff08 <getpeer>
 80118c4:	6178      	str	r0, [r7, #20]
 80118c6:	697b      	ldr	r3, [r7, #20]
 80118c8:	2b00      	cmp	r3, #0
 80118ca:	d10c      	bne.n	80118e6 <rx_tcp+0x19e>
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
 80118cc:	683b      	ldr	r3, [r7, #0]
 80118ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80118d0:	689b      	ldr	r3, [r3, #8]
 80118d2:	2200      	movs	r2, #0
 80118d4:	9201      	str	r2, [sp, #4]
 80118d6:	2200      	movs	r2, #0
 80118d8:	9200      	str	r2, [sp, #0]
 80118da:	2214      	movs	r2, #20
 80118dc:	6839      	ldr	r1, [r7, #0]
 80118de:	6878      	ldr	r0, [r7, #4]
 80118e0:	f7ff fa2c 	bl	8010d3c <tx_tcp_pkt>
}
 80118e4:	e071      	b.n	80119ca <rx_tcp+0x282>
  } else if (pkt->tcp->flags & TH_RST) {
 80118e6:	683b      	ldr	r3, [r7, #0]
 80118e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80118ea:	7b5b      	ldrb	r3, [r3, #13]
 80118ec:	f003 0304 	and.w	r3, r3, #4
 80118f0:	2b00      	cmp	r3, #0
 80118f2:	d00c      	beq.n	801190e <rx_tcp+0x1c6>
    if (c->is_accepted) mg_error(c, "peer RST");  // RFC-1122 4.2.2.13
 80118f4:	697b      	ldr	r3, [r7, #20]
 80118f6:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80118fa:	f003 0304 	and.w	r3, r3, #4
 80118fe:	b2db      	uxtb	r3, r3
 8011900:	2b00      	cmp	r3, #0
 8011902:	d062      	beq.n	80119ca <rx_tcp+0x282>
 8011904:	4933      	ldr	r1, [pc, #204]	@ (80119d4 <rx_tcp+0x28c>)
 8011906:	6978      	ldr	r0, [r7, #20]
 8011908:	f7f7 f954 	bl	8008bb4 <mg_error>
}
 801190c:	e05d      	b.n	80119ca <rx_tcp+0x282>
  } else if (pkt->tcp->flags & TH_SYN) {
 801190e:	683b      	ldr	r3, [r7, #0]
 8011910:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011912:	7b5b      	ldrb	r3, [r3, #13]
 8011914:	f003 0302 	and.w	r3, r3, #2
 8011918:	2b00      	cmp	r3, #0
 801191a:	d016      	beq.n	801194a <rx_tcp+0x202>
    uint32_t isn = mg_htonl((uint32_t) mg_ntohs(pkt->tcp->sport));
 801191c:	683b      	ldr	r3, [r7, #0]
 801191e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011920:	881b      	ldrh	r3, [r3, #0]
 8011922:	b29b      	uxth	r3, r3
 8011924:	4618      	mov	r0, r3
 8011926:	f010 fa57 	bl	8021dd8 <mg_ntohs>
 801192a:	4603      	mov	r3, r0
 801192c:	4618      	mov	r0, r3
 801192e:	f010 fa6a 	bl	8021e06 <mg_ntohl>
 8011932:	60f8      	str	r0, [r7, #12]
    tx_tcp_pkt(ifp, pkt, TH_SYN | TH_ACK, isn, NULL, 0);
 8011934:	2300      	movs	r3, #0
 8011936:	9301      	str	r3, [sp, #4]
 8011938:	2300      	movs	r3, #0
 801193a:	9300      	str	r3, [sp, #0]
 801193c:	68fb      	ldr	r3, [r7, #12]
 801193e:	2212      	movs	r2, #18
 8011940:	6839      	ldr	r1, [r7, #0]
 8011942:	6878      	ldr	r0, [r7, #4]
 8011944:	f7ff f9fa 	bl	8010d3c <tx_tcp_pkt>
}
 8011948:	e03f      	b.n	80119ca <rx_tcp+0x282>
  } else if (pkt->tcp->flags & TH_FIN) {
 801194a:	683b      	ldr	r3, [r7, #0]
 801194c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801194e:	7b5b      	ldrb	r3, [r3, #13]
 8011950:	f003 0301 	and.w	r3, r3, #1
 8011954:	2b00      	cmp	r3, #0
 8011956:	d00c      	beq.n	8011972 <rx_tcp+0x22a>
    tx_tcp_pkt(ifp, pkt, TH_FIN | TH_ACK, pkt->tcp->ack, NULL, 0);
 8011958:	683b      	ldr	r3, [r7, #0]
 801195a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801195c:	689b      	ldr	r3, [r3, #8]
 801195e:	2200      	movs	r2, #0
 8011960:	9201      	str	r2, [sp, #4]
 8011962:	2200      	movs	r2, #0
 8011964:	9200      	str	r2, [sp, #0]
 8011966:	2211      	movs	r2, #17
 8011968:	6839      	ldr	r1, [r7, #0]
 801196a:	6878      	ldr	r0, [r7, #4]
 801196c:	f7ff f9e6 	bl	8010d3c <tx_tcp_pkt>
}
 8011970:	e02b      	b.n	80119ca <rx_tcp+0x282>
  } else if (mg_htonl(pkt->tcp->ack) == mg_htons(pkt->tcp->sport) + 1U) {
 8011972:	683b      	ldr	r3, [r7, #0]
 8011974:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011976:	689b      	ldr	r3, [r3, #8]
 8011978:	4618      	mov	r0, r3
 801197a:	f010 fa44 	bl	8021e06 <mg_ntohl>
 801197e:	4604      	mov	r4, r0
 8011980:	683b      	ldr	r3, [r7, #0]
 8011982:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011984:	881b      	ldrh	r3, [r3, #0]
 8011986:	b29b      	uxth	r3, r3
 8011988:	4618      	mov	r0, r3
 801198a:	f010 fa25 	bl	8021dd8 <mg_ntohs>
 801198e:	4603      	mov	r3, r0
 8011990:	3301      	adds	r3, #1
 8011992:	429c      	cmp	r4, r3
 8011994:	d104      	bne.n	80119a0 <rx_tcp+0x258>
    accept_conn(c, pkt);
 8011996:	6839      	ldr	r1, [r7, #0]
 8011998:	6978      	ldr	r0, [r7, #20]
 801199a:	f7ff fa15 	bl	8010dc8 <accept_conn>
}
 801199e:	e014      	b.n	80119ca <rx_tcp+0x282>
  } else if (!c->is_accepted) {  // no peer
 80119a0:	697b      	ldr	r3, [r7, #20]
 80119a2:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80119a6:	f003 0304 	and.w	r3, r3, #4
 80119aa:	b2db      	uxtb	r3, r3
 80119ac:	2b00      	cmp	r3, #0
 80119ae:	d10c      	bne.n	80119ca <rx_tcp+0x282>
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
 80119b0:	683b      	ldr	r3, [r7, #0]
 80119b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80119b4:	689b      	ldr	r3, [r3, #8]
 80119b6:	2200      	movs	r2, #0
 80119b8:	9201      	str	r2, [sp, #4]
 80119ba:	2200      	movs	r2, #0
 80119bc:	9200      	str	r2, [sp, #0]
 80119be:	2214      	movs	r2, #20
 80119c0:	6839      	ldr	r1, [r7, #0]
 80119c2:	6878      	ldr	r0, [r7, #4]
 80119c4:	f7ff f9ba 	bl	8010d3c <tx_tcp_pkt>
}
 80119c8:	e7ff      	b.n	80119ca <rx_tcp+0x282>
 80119ca:	bf00      	nop
 80119cc:	371c      	adds	r7, #28
 80119ce:	46bd      	mov	sp, r7
 80119d0:	bd90      	pop	{r4, r7, pc}
 80119d2:	bf00      	nop
 80119d4:	0802b0e8 	.word	0x0802b0e8

080119d8 <rx_ip>:

static void rx_ip(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 80119d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80119da:	b08b      	sub	sp, #44	@ 0x2c
 80119dc:	af04      	add	r7, sp, #16
 80119de:	6078      	str	r0, [r7, #4]
 80119e0:	6039      	str	r1, [r7, #0]
  uint16_t frag = mg_ntohs(pkt->ip->frag);
 80119e2:	683b      	ldr	r3, [r7, #0]
 80119e4:	69db      	ldr	r3, [r3, #28]
 80119e6:	88db      	ldrh	r3, [r3, #6]
 80119e8:	b29b      	uxth	r3, r3
 80119ea:	4618      	mov	r0, r3
 80119ec:	f010 f9f4 	bl	8021dd8 <mg_ntohs>
 80119f0:	4603      	mov	r3, r0
 80119f2:	82fb      	strh	r3, [r7, #22]
  if (frag & IP_MORE_FRAGS_MSK || frag & IP_FRAG_OFFSET_MSK) {
 80119f4:	8afb      	ldrh	r3, [r7, #22]
 80119f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80119fa:	2b00      	cmp	r3, #0
 80119fc:	d104      	bne.n	8011a08 <rx_ip+0x30>
 80119fe:	8afb      	ldrh	r3, [r7, #22]
 8011a00:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011a04:	2b00      	cmp	r3, #0
 8011a06:	d026      	beq.n	8011a56 <rx_ip+0x7e>
    if (pkt->ip->proto == 17) pkt->udp = (struct udp *) (pkt->ip + 1);
 8011a08:	683b      	ldr	r3, [r7, #0]
 8011a0a:	69db      	ldr	r3, [r3, #28]
 8011a0c:	7a5b      	ldrb	r3, [r3, #9]
 8011a0e:	2b11      	cmp	r3, #17
 8011a10:	d105      	bne.n	8011a1e <rx_ip+0x46>
 8011a12:	683b      	ldr	r3, [r7, #0]
 8011a14:	69db      	ldr	r3, [r3, #28]
 8011a16:	f103 0214 	add.w	r2, r3, #20
 8011a1a:	683b      	ldr	r3, [r7, #0]
 8011a1c:	62da      	str	r2, [r3, #44]	@ 0x2c
    if (pkt->ip->proto == 6) pkt->tcp = (struct tcp *) (pkt->ip + 1);
 8011a1e:	683b      	ldr	r3, [r7, #0]
 8011a20:	69db      	ldr	r3, [r3, #28]
 8011a22:	7a5b      	ldrb	r3, [r3, #9]
 8011a24:	2b06      	cmp	r3, #6
 8011a26:	d105      	bne.n	8011a34 <rx_ip+0x5c>
 8011a28:	683b      	ldr	r3, [r7, #0]
 8011a2a:	69db      	ldr	r3, [r3, #28]
 8011a2c:	f103 0214 	add.w	r2, r3, #20
 8011a30:	683b      	ldr	r3, [r7, #0]
 8011a32:	629a      	str	r2, [r3, #40]	@ 0x28
    struct mg_connection *c = getpeer(ifp->mgr, pkt, false);
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011a38:	2200      	movs	r2, #0
 8011a3a:	6839      	ldr	r1, [r7, #0]
 8011a3c:	4618      	mov	r0, r3
 8011a3e:	f7fe fa63 	bl	800ff08 <getpeer>
 8011a42:	60f8      	str	r0, [r7, #12]
    if (c) mg_error(c, "Received fragmented packet");
 8011a44:	68fb      	ldr	r3, [r7, #12]
 8011a46:	2b00      	cmp	r3, #0
 8011a48:	f000 811b 	beq.w	8011c82 <rx_ip+0x2aa>
 8011a4c:	4992      	ldr	r1, [pc, #584]	@ (8011c98 <rx_ip+0x2c0>)
 8011a4e:	68f8      	ldr	r0, [r7, #12]
 8011a50:	f7f7 f8b0 	bl	8008bb4 <mg_error>
  if (frag & IP_MORE_FRAGS_MSK || frag & IP_FRAG_OFFSET_MSK) {
 8011a54:	e115      	b.n	8011c82 <rx_ip+0x2aa>
  } else if (pkt->ip->proto == 1) {
 8011a56:	683b      	ldr	r3, [r7, #0]
 8011a58:	69db      	ldr	r3, [r3, #28]
 8011a5a:	7a5b      	ldrb	r3, [r3, #9]
 8011a5c:	2b01      	cmp	r3, #1
 8011a5e:	d116      	bne.n	8011a8e <rx_ip+0xb6>
    pkt->icmp = (struct icmp *) (pkt->ip + 1);
 8011a60:	683b      	ldr	r3, [r7, #0]
 8011a62:	69db      	ldr	r3, [r3, #28]
 8011a64:	f103 0214 	add.w	r2, r3, #20
 8011a68:	683b      	ldr	r3, [r7, #0]
 8011a6a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 8011a6c:	683b      	ldr	r3, [r7, #0]
 8011a6e:	68db      	ldr	r3, [r3, #12]
 8011a70:	2b03      	cmp	r3, #3
 8011a72:	f240 8108 	bls.w	8011c86 <rx_ip+0x2ae>
    mkpay(pkt, pkt->icmp + 1);
 8011a76:	683b      	ldr	r3, [r7, #0]
 8011a78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011a7a:	3304      	adds	r3, #4
 8011a7c:	4619      	mov	r1, r3
 8011a7e:	6838      	ldr	r0, [r7, #0]
 8011a80:	f7fd fda2 	bl	800f5c8 <mkpay>
    rx_icmp(ifp, pkt);
 8011a84:	6839      	ldr	r1, [r7, #0]
 8011a86:	6878      	ldr	r0, [r7, #4]
 8011a88:	f7fe fbc2 	bl	8010210 <rx_icmp>
 8011a8c:	e100      	b.n	8011c90 <rx_ip+0x2b8>
  } else if (pkt->ip->proto == 17) {
 8011a8e:	683b      	ldr	r3, [r7, #0]
 8011a90:	69db      	ldr	r3, [r3, #28]
 8011a92:	7a5b      	ldrb	r3, [r3, #9]
 8011a94:	2b11      	cmp	r3, #17
 8011a96:	f040 808b 	bne.w	8011bb0 <rx_ip+0x1d8>
    pkt->udp = (struct udp *) (pkt->ip + 1);
 8011a9a:	683b      	ldr	r3, [r7, #0]
 8011a9c:	69db      	ldr	r3, [r3, #28]
 8011a9e:	f103 0214 	add.w	r2, r3, #20
 8011aa2:	683b      	ldr	r3, [r7, #0]
 8011aa4:	62da      	str	r2, [r3, #44]	@ 0x2c
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 8011aa6:	683b      	ldr	r3, [r7, #0]
 8011aa8:	68db      	ldr	r3, [r3, #12]
 8011aaa:	2b07      	cmp	r3, #7
 8011aac:	f240 80ed 	bls.w	8011c8a <rx_ip+0x2b2>
    mkpay(pkt, pkt->udp + 1);
 8011ab0:	683b      	ldr	r3, [r7, #0]
 8011ab2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011ab4:	3308      	adds	r3, #8
 8011ab6:	4619      	mov	r1, r3
 8011ab8:	6838      	ldr	r0, [r7, #0]
 8011aba:	f7fd fd85 	bl	800f5c8 <mkpay>
    MG_VERBOSE(("UDP %M:%hu -> %M:%hu len %u", mg_print_ip4, &pkt->ip->src,
 8011abe:	4b77      	ldr	r3, [pc, #476]	@ (8011c9c <rx_ip+0x2c4>)
 8011ac0:	681b      	ldr	r3, [r3, #0]
 8011ac2:	2b03      	cmp	r3, #3
 8011ac4:	dd2d      	ble.n	8011b22 <rx_ip+0x14a>
 8011ac6:	4b76      	ldr	r3, [pc, #472]	@ (8011ca0 <rx_ip+0x2c8>)
 8011ac8:	f241 3293 	movw	r2, #5011	@ 0x1393
 8011acc:	4975      	ldr	r1, [pc, #468]	@ (8011ca4 <rx_ip+0x2cc>)
 8011ace:	2004      	movs	r0, #4
 8011ad0:	f7fc fee8 	bl	800e8a4 <mg_log_prefix>
 8011ad4:	683b      	ldr	r3, [r7, #0]
 8011ad6:	69db      	ldr	r3, [r3, #28]
 8011ad8:	f103 050c 	add.w	r5, r3, #12
 8011adc:	683b      	ldr	r3, [r7, #0]
 8011ade:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011ae0:	881b      	ldrh	r3, [r3, #0]
 8011ae2:	b29b      	uxth	r3, r3
 8011ae4:	4618      	mov	r0, r3
 8011ae6:	f010 f977 	bl	8021dd8 <mg_ntohs>
 8011aea:	4603      	mov	r3, r0
 8011aec:	461e      	mov	r6, r3
 8011aee:	683b      	ldr	r3, [r7, #0]
 8011af0:	69db      	ldr	r3, [r3, #28]
 8011af2:	f103 0410 	add.w	r4, r3, #16
 8011af6:	683b      	ldr	r3, [r7, #0]
 8011af8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011afa:	885b      	ldrh	r3, [r3, #2]
 8011afc:	b29b      	uxth	r3, r3
 8011afe:	4618      	mov	r0, r3
 8011b00:	f010 f96a 	bl	8021dd8 <mg_ntohs>
 8011b04:	4603      	mov	r3, r0
 8011b06:	461a      	mov	r2, r3
 8011b08:	683b      	ldr	r3, [r7, #0]
 8011b0a:	68db      	ldr	r3, [r3, #12]
 8011b0c:	9303      	str	r3, [sp, #12]
 8011b0e:	9202      	str	r2, [sp, #8]
 8011b10:	9401      	str	r4, [sp, #4]
 8011b12:	4b65      	ldr	r3, [pc, #404]	@ (8011ca8 <rx_ip+0x2d0>)
 8011b14:	9300      	str	r3, [sp, #0]
 8011b16:	4633      	mov	r3, r6
 8011b18:	462a      	mov	r2, r5
 8011b1a:	4963      	ldr	r1, [pc, #396]	@ (8011ca8 <rx_ip+0x2d0>)
 8011b1c:	4863      	ldr	r0, [pc, #396]	@ (8011cac <rx_ip+0x2d4>)
 8011b1e:	f7fc ff11 	bl	800e944 <mg_log>
                mg_ntohs(pkt->udp->sport), mg_print_ip4, &pkt->ip->dst,
                mg_ntohs(pkt->udp->dport), (int) pkt->pay.len));
    if (ifp->enable_dhcp_client && pkt->udp->dport == mg_htons(68)) {
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	7f1b      	ldrb	r3, [r3, #28]
 8011b26:	2b00      	cmp	r3, #0
 8011b28:	d01c      	beq.n	8011b64 <rx_ip+0x18c>
 8011b2a:	683b      	ldr	r3, [r7, #0]
 8011b2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011b2e:	885b      	ldrh	r3, [r3, #2]
 8011b30:	b29c      	uxth	r4, r3
 8011b32:	2044      	movs	r0, #68	@ 0x44
 8011b34:	f010 f950 	bl	8021dd8 <mg_ntohs>
 8011b38:	4603      	mov	r3, r0
 8011b3a:	429c      	cmp	r4, r3
 8011b3c:	d112      	bne.n	8011b64 <rx_ip+0x18c>
      pkt->dhcp = (struct dhcp *) (pkt->udp + 1);
 8011b3e:	683b      	ldr	r3, [r7, #0]
 8011b40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011b42:	f103 0208 	add.w	r2, r3, #8
 8011b46:	683b      	ldr	r3, [r7, #0]
 8011b48:	631a      	str	r2, [r3, #48]	@ 0x30
      mkpay(pkt, pkt->dhcp + 1);
 8011b4a:	683b      	ldr	r3, [r7, #0]
 8011b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011b4e:	f503 738d 	add.w	r3, r3, #282	@ 0x11a
 8011b52:	4619      	mov	r1, r3
 8011b54:	6838      	ldr	r0, [r7, #0]
 8011b56:	f7fd fd37 	bl	800f5c8 <mkpay>
      rx_dhcp_client(ifp, pkt);
 8011b5a:	6839      	ldr	r1, [r7, #0]
 8011b5c:	6878      	ldr	r0, [r7, #4]
 8011b5e:	f7fe fbb3 	bl	80102c8 <rx_dhcp_client>
 8011b62:	e095      	b.n	8011c90 <rx_ip+0x2b8>
    } else if (ifp->enable_dhcp_server && pkt->udp->dport == mg_htons(67)) {
 8011b64:	687b      	ldr	r3, [r7, #4]
 8011b66:	7f5b      	ldrb	r3, [r3, #29]
 8011b68:	2b00      	cmp	r3, #0
 8011b6a:	d01c      	beq.n	8011ba6 <rx_ip+0x1ce>
 8011b6c:	683b      	ldr	r3, [r7, #0]
 8011b6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011b70:	885b      	ldrh	r3, [r3, #2]
 8011b72:	b29c      	uxth	r4, r3
 8011b74:	2043      	movs	r0, #67	@ 0x43
 8011b76:	f010 f92f 	bl	8021dd8 <mg_ntohs>
 8011b7a:	4603      	mov	r3, r0
 8011b7c:	429c      	cmp	r4, r3
 8011b7e:	d112      	bne.n	8011ba6 <rx_ip+0x1ce>
      pkt->dhcp = (struct dhcp *) (pkt->udp + 1);
 8011b80:	683b      	ldr	r3, [r7, #0]
 8011b82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011b84:	f103 0208 	add.w	r2, r3, #8
 8011b88:	683b      	ldr	r3, [r7, #0]
 8011b8a:	631a      	str	r2, [r3, #48]	@ 0x30
      mkpay(pkt, pkt->dhcp + 1);
 8011b8c:	683b      	ldr	r3, [r7, #0]
 8011b8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011b90:	f503 738d 	add.w	r3, r3, #282	@ 0x11a
 8011b94:	4619      	mov	r1, r3
 8011b96:	6838      	ldr	r0, [r7, #0]
 8011b98:	f7fd fd16 	bl	800f5c8 <mkpay>
      rx_dhcp_server(ifp, pkt);
 8011b9c:	6839      	ldr	r1, [r7, #0]
 8011b9e:	6878      	ldr	r0, [r7, #4]
 8011ba0:	f7fe fd7a 	bl	8010698 <rx_dhcp_server>
 8011ba4:	e074      	b.n	8011c90 <rx_ip+0x2b8>
    } else {
      rx_udp(ifp, pkt);
 8011ba6:	6839      	ldr	r1, [r7, #0]
 8011ba8:	6878      	ldr	r0, [r7, #4]
 8011baa:	f7fe ff63 	bl	8010a74 <rx_udp>
 8011bae:	e06f      	b.n	8011c90 <rx_ip+0x2b8>
    }
  } else if (pkt->ip->proto == 6) {
 8011bb0:	683b      	ldr	r3, [r7, #0]
 8011bb2:	69db      	ldr	r3, [r3, #28]
 8011bb4:	7a5b      	ldrb	r3, [r3, #9]
 8011bb6:	2b06      	cmp	r3, #6
 8011bb8:	d16a      	bne.n	8011c90 <rx_ip+0x2b8>
    pkt->tcp = (struct tcp *) (pkt->ip + 1);
 8011bba:	683b      	ldr	r3, [r7, #0]
 8011bbc:	69db      	ldr	r3, [r3, #28]
 8011bbe:	f103 0214 	add.w	r2, r3, #20
 8011bc2:	683b      	ldr	r3, [r7, #0]
 8011bc4:	629a      	str	r2, [r3, #40]	@ 0x28
    if (pkt->pay.len < sizeof(*pkt->tcp)) return;
 8011bc6:	683b      	ldr	r3, [r7, #0]
 8011bc8:	68db      	ldr	r3, [r3, #12]
 8011bca:	2b13      	cmp	r3, #19
 8011bcc:	d95f      	bls.n	8011c8e <rx_ip+0x2b6>
    mkpay(pkt, pkt->tcp + 1);
 8011bce:	683b      	ldr	r3, [r7, #0]
 8011bd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011bd2:	3314      	adds	r3, #20
 8011bd4:	4619      	mov	r1, r3
 8011bd6:	6838      	ldr	r0, [r7, #0]
 8011bd8:	f7fd fcf6 	bl	800f5c8 <mkpay>
    uint16_t iplen = mg_ntohs(pkt->ip->len);
 8011bdc:	683b      	ldr	r3, [r7, #0]
 8011bde:	69db      	ldr	r3, [r3, #28]
 8011be0:	885b      	ldrh	r3, [r3, #2]
 8011be2:	b29b      	uxth	r3, r3
 8011be4:	4618      	mov	r0, r3
 8011be6:	f010 f8f7 	bl	8021dd8 <mg_ntohs>
 8011bea:	4603      	mov	r3, r0
 8011bec:	82bb      	strh	r3, [r7, #20]
    uint16_t off = (uint16_t) (sizeof(*pkt->ip) + ((pkt->tcp->off >> 4) * 4U));
 8011bee:	683b      	ldr	r3, [r7, #0]
 8011bf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011bf2:	7b1b      	ldrb	r3, [r3, #12]
 8011bf4:	091b      	lsrs	r3, r3, #4
 8011bf6:	b2db      	uxtb	r3, r3
 8011bf8:	3305      	adds	r3, #5
 8011bfa:	b29b      	uxth	r3, r3
 8011bfc:	009b      	lsls	r3, r3, #2
 8011bfe:	827b      	strh	r3, [r7, #18]
    if (iplen >= off) pkt->pay.len = (size_t) (iplen - off);
 8011c00:	8aba      	ldrh	r2, [r7, #20]
 8011c02:	8a7b      	ldrh	r3, [r7, #18]
 8011c04:	429a      	cmp	r2, r3
 8011c06:	d305      	bcc.n	8011c14 <rx_ip+0x23c>
 8011c08:	8aba      	ldrh	r2, [r7, #20]
 8011c0a:	8a7b      	ldrh	r3, [r7, #18]
 8011c0c:	1ad3      	subs	r3, r2, r3
 8011c0e:	461a      	mov	r2, r3
 8011c10:	683b      	ldr	r3, [r7, #0]
 8011c12:	60da      	str	r2, [r3, #12]
    MG_VERBOSE(("TCP %M:%hu -> %M:%hu len %u", mg_print_ip4, &pkt->ip->src,
 8011c14:	4b21      	ldr	r3, [pc, #132]	@ (8011c9c <rx_ip+0x2c4>)
 8011c16:	681b      	ldr	r3, [r3, #0]
 8011c18:	2b03      	cmp	r3, #3
 8011c1a:	dd2d      	ble.n	8011c78 <rx_ip+0x2a0>
 8011c1c:	4b20      	ldr	r3, [pc, #128]	@ (8011ca0 <rx_ip+0x2c8>)
 8011c1e:	f241 32a8 	movw	r2, #5032	@ 0x13a8
 8011c22:	4920      	ldr	r1, [pc, #128]	@ (8011ca4 <rx_ip+0x2cc>)
 8011c24:	2004      	movs	r0, #4
 8011c26:	f7fc fe3d 	bl	800e8a4 <mg_log_prefix>
 8011c2a:	683b      	ldr	r3, [r7, #0]
 8011c2c:	69db      	ldr	r3, [r3, #28]
 8011c2e:	f103 050c 	add.w	r5, r3, #12
 8011c32:	683b      	ldr	r3, [r7, #0]
 8011c34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011c36:	881b      	ldrh	r3, [r3, #0]
 8011c38:	b29b      	uxth	r3, r3
 8011c3a:	4618      	mov	r0, r3
 8011c3c:	f010 f8cc 	bl	8021dd8 <mg_ntohs>
 8011c40:	4603      	mov	r3, r0
 8011c42:	461e      	mov	r6, r3
 8011c44:	683b      	ldr	r3, [r7, #0]
 8011c46:	69db      	ldr	r3, [r3, #28]
 8011c48:	f103 0410 	add.w	r4, r3, #16
 8011c4c:	683b      	ldr	r3, [r7, #0]
 8011c4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011c50:	885b      	ldrh	r3, [r3, #2]
 8011c52:	b29b      	uxth	r3, r3
 8011c54:	4618      	mov	r0, r3
 8011c56:	f010 f8bf 	bl	8021dd8 <mg_ntohs>
 8011c5a:	4603      	mov	r3, r0
 8011c5c:	461a      	mov	r2, r3
 8011c5e:	683b      	ldr	r3, [r7, #0]
 8011c60:	68db      	ldr	r3, [r3, #12]
 8011c62:	9303      	str	r3, [sp, #12]
 8011c64:	9202      	str	r2, [sp, #8]
 8011c66:	9401      	str	r4, [sp, #4]
 8011c68:	4b0f      	ldr	r3, [pc, #60]	@ (8011ca8 <rx_ip+0x2d0>)
 8011c6a:	9300      	str	r3, [sp, #0]
 8011c6c:	4633      	mov	r3, r6
 8011c6e:	462a      	mov	r2, r5
 8011c70:	490d      	ldr	r1, [pc, #52]	@ (8011ca8 <rx_ip+0x2d0>)
 8011c72:	480f      	ldr	r0, [pc, #60]	@ (8011cb0 <rx_ip+0x2d8>)
 8011c74:	f7fc fe66 	bl	800e944 <mg_log>
                mg_ntohs(pkt->tcp->sport), mg_print_ip4, &pkt->ip->dst,
                mg_ntohs(pkt->tcp->dport), (int) pkt->pay.len));
    rx_tcp(ifp, pkt);
 8011c78:	6839      	ldr	r1, [r7, #0]
 8011c7a:	6878      	ldr	r0, [r7, #4]
 8011c7c:	f7ff fd64 	bl	8011748 <rx_tcp>
 8011c80:	e006      	b.n	8011c90 <rx_ip+0x2b8>
  if (frag & IP_MORE_FRAGS_MSK || frag & IP_FRAG_OFFSET_MSK) {
 8011c82:	bf00      	nop
 8011c84:	e004      	b.n	8011c90 <rx_ip+0x2b8>
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 8011c86:	bf00      	nop
 8011c88:	e002      	b.n	8011c90 <rx_ip+0x2b8>
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 8011c8a:	bf00      	nop
 8011c8c:	e000      	b.n	8011c90 <rx_ip+0x2b8>
    if (pkt->pay.len < sizeof(*pkt->tcp)) return;
 8011c8e:	bf00      	nop
  }
}
 8011c90:	371c      	adds	r7, #28
 8011c92:	46bd      	mov	sp, r7
 8011c94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011c96:	bf00      	nop
 8011c98:	0802b0f4 	.word	0x0802b0f4
 8011c9c:	24000258 	.word	0x24000258
 8011ca0:	0802d94c 	.word	0x0802d94c
 8011ca4:	08029c3c 	.word	0x08029c3c
 8011ca8:	080132d5 	.word	0x080132d5
 8011cac:	0802b110 	.word	0x0802b110
 8011cb0:	0802b12c 	.word	0x0802b12c

08011cb4 <rx_ip6>:

static void rx_ip6(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 8011cb4:	b580      	push	{r7, lr}
 8011cb6:	b082      	sub	sp, #8
 8011cb8:	af00      	add	r7, sp, #0
 8011cba:	6078      	str	r0, [r7, #4]
 8011cbc:	6039      	str	r1, [r7, #0]
  // MG_DEBUG(("IP %d", (int) len));
  if (pkt->ip6->proto == 1 || pkt->ip6->proto == 58) {
 8011cbe:	683b      	ldr	r3, [r7, #0]
 8011cc0:	6a1b      	ldr	r3, [r3, #32]
 8011cc2:	799b      	ldrb	r3, [r3, #6]
 8011cc4:	2b01      	cmp	r3, #1
 8011cc6:	d004      	beq.n	8011cd2 <rx_ip6+0x1e>
 8011cc8:	683b      	ldr	r3, [r7, #0]
 8011cca:	6a1b      	ldr	r3, [r3, #32]
 8011ccc:	799b      	ldrb	r3, [r3, #6]
 8011cce:	2b3a      	cmp	r3, #58	@ 0x3a
 8011cd0:	d115      	bne.n	8011cfe <rx_ip6+0x4a>
    pkt->icmp = (struct icmp *) (pkt->ip6 + 1);
 8011cd2:	683b      	ldr	r3, [r7, #0]
 8011cd4:	6a1b      	ldr	r3, [r3, #32]
 8011cd6:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8011cda:	683b      	ldr	r3, [r7, #0]
 8011cdc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 8011cde:	683b      	ldr	r3, [r7, #0]
 8011ce0:	68db      	ldr	r3, [r3, #12]
 8011ce2:	2b03      	cmp	r3, #3
 8011ce4:	d922      	bls.n	8011d2c <rx_ip6+0x78>
    mkpay(pkt, pkt->icmp + 1);
 8011ce6:	683b      	ldr	r3, [r7, #0]
 8011ce8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011cea:	3304      	adds	r3, #4
 8011cec:	4619      	mov	r1, r3
 8011cee:	6838      	ldr	r0, [r7, #0]
 8011cf0:	f7fd fc6a 	bl	800f5c8 <mkpay>
    rx_icmp(ifp, pkt);
 8011cf4:	6839      	ldr	r1, [r7, #0]
 8011cf6:	6878      	ldr	r0, [r7, #4]
 8011cf8:	f7fe fa8a 	bl	8010210 <rx_icmp>
 8011cfc:	e019      	b.n	8011d32 <rx_ip6+0x7e>
  } else if (pkt->ip6->proto == 17) {
 8011cfe:	683b      	ldr	r3, [r7, #0]
 8011d00:	6a1b      	ldr	r3, [r3, #32]
 8011d02:	799b      	ldrb	r3, [r3, #6]
 8011d04:	2b11      	cmp	r3, #17
 8011d06:	d114      	bne.n	8011d32 <rx_ip6+0x7e>
    pkt->udp = (struct udp *) (pkt->ip6 + 1);
 8011d08:	683b      	ldr	r3, [r7, #0]
 8011d0a:	6a1b      	ldr	r3, [r3, #32]
 8011d0c:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8011d10:	683b      	ldr	r3, [r7, #0]
 8011d12:	62da      	str	r2, [r3, #44]	@ 0x2c
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 8011d14:	683b      	ldr	r3, [r7, #0]
 8011d16:	68db      	ldr	r3, [r3, #12]
 8011d18:	2b07      	cmp	r3, #7
 8011d1a:	d909      	bls.n	8011d30 <rx_ip6+0x7c>
    // MG_DEBUG(("  UDP %u %u -> %u", len, mg_htons(udp->sport),
    // mg_htons(udp->dport)));
    mkpay(pkt, pkt->udp + 1);
 8011d1c:	683b      	ldr	r3, [r7, #0]
 8011d1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011d20:	3308      	adds	r3, #8
 8011d22:	4619      	mov	r1, r3
 8011d24:	6838      	ldr	r0, [r7, #0]
 8011d26:	f7fd fc4f 	bl	800f5c8 <mkpay>
 8011d2a:	e002      	b.n	8011d32 <rx_ip6+0x7e>
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 8011d2c:	bf00      	nop
 8011d2e:	e000      	b.n	8011d32 <rx_ip6+0x7e>
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 8011d30:	bf00      	nop
  }
}
 8011d32:	3708      	adds	r7, #8
 8011d34:	46bd      	mov	sp, r7
 8011d36:	bd80      	pop	{r7, pc}

08011d38 <mg_tcpip_rx>:

static void mg_tcpip_rx(struct mg_tcpip_if *ifp, void *buf, size_t len) {
 8011d38:	b590      	push	{r4, r7, lr}
 8011d3a:	b093      	sub	sp, #76	@ 0x4c
 8011d3c:	af00      	add	r7, sp, #0
 8011d3e:	60f8      	str	r0, [r7, #12]
 8011d40:	60b9      	str	r1, [r7, #8]
 8011d42:	607a      	str	r2, [r7, #4]
  struct pkt pkt;
  memset(&pkt, 0, sizeof(pkt));
 8011d44:	f107 0314 	add.w	r3, r7, #20
 8011d48:	2234      	movs	r2, #52	@ 0x34
 8011d4a:	2100      	movs	r1, #0
 8011d4c:	4618      	mov	r0, r3
 8011d4e:	f015 fcbb 	bl	80276c8 <memset>
  pkt.raw.buf = (char *) buf;
 8011d52:	68bb      	ldr	r3, [r7, #8]
 8011d54:	617b      	str	r3, [r7, #20]
  pkt.raw.len = len;
 8011d56:	687b      	ldr	r3, [r7, #4]
 8011d58:	61bb      	str	r3, [r7, #24]
  pkt.eth = (struct eth *) buf;
 8011d5a:	68bb      	ldr	r3, [r7, #8]
 8011d5c:	627b      	str	r3, [r7, #36]	@ 0x24
  // mg_hexdump(buf, len > 16 ? 16: len);
  if (pkt.raw.len < sizeof(*pkt.eth)) return;  // Truncated - runt?
 8011d5e:	69bb      	ldr	r3, [r7, #24]
 8011d60:	2b0d      	cmp	r3, #13
 8011d62:	f240 80df 	bls.w	8011f24 <mg_tcpip_rx+0x1ec>
  if (ifp->enable_mac_check &&
 8011d66:	68fb      	ldr	r3, [r7, #12]
 8011d68:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8011d6c:	2b00      	cmp	r3, #0
 8011d6e:	d013      	beq.n	8011d98 <mg_tcpip_rx+0x60>
      memcmp(pkt.eth->dst, ifp->mac, sizeof(pkt.eth->dst)) != 0 &&
 8011d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d72:	4618      	mov	r0, r3
 8011d74:	68fb      	ldr	r3, [r7, #12]
 8011d76:	2206      	movs	r2, #6
 8011d78:	4619      	mov	r1, r3
 8011d7a:	f015 fc7b 	bl	8027674 <memcmp>
 8011d7e:	4603      	mov	r3, r0
  if (ifp->enable_mac_check &&
 8011d80:	2b00      	cmp	r3, #0
 8011d82:	d009      	beq.n	8011d98 <mg_tcpip_rx+0x60>
      memcmp(pkt.eth->dst, broadcast, sizeof(pkt.eth->dst)) != 0)
 8011d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d86:	2206      	movs	r2, #6
 8011d88:	4970      	ldr	r1, [pc, #448]	@ (8011f4c <mg_tcpip_rx+0x214>)
 8011d8a:	4618      	mov	r0, r3
 8011d8c:	f015 fc72 	bl	8027674 <memcmp>
 8011d90:	4603      	mov	r3, r0
      memcmp(pkt.eth->dst, ifp->mac, sizeof(pkt.eth->dst)) != 0 &&
 8011d92:	2b00      	cmp	r3, #0
 8011d94:	f040 80c8 	bne.w	8011f28 <mg_tcpip_rx+0x1f0>
    return;
  if (ifp->enable_crc32_check && len > 4) {
 8011d98:	68fb      	ldr	r3, [r7, #12]
 8011d9a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8011d9e:	2b00      	cmp	r3, #0
 8011da0:	d01a      	beq.n	8011dd8 <mg_tcpip_rx+0xa0>
 8011da2:	687b      	ldr	r3, [r7, #4]
 8011da4:	2b04      	cmp	r3, #4
 8011da6:	d917      	bls.n	8011dd8 <mg_tcpip_rx+0xa0>
    len -= 4;  // TODO(scaprile): check on bigendian
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	3b04      	subs	r3, #4
 8011dac:	607b      	str	r3, [r7, #4]
    uint32_t crc = mg_crc32(0, (const char *) buf, len);
 8011dae:	687a      	ldr	r2, [r7, #4]
 8011db0:	68b9      	ldr	r1, [r7, #8]
 8011db2:	2000      	movs	r0, #0
 8011db4:	f00f ff90 	bl	8021cd8 <mg_crc32>
 8011db8:	4603      	mov	r3, r0
 8011dba:	613b      	str	r3, [r7, #16]
    if (memcmp((void *) ((size_t) buf + len), &crc, sizeof(crc))) return;
 8011dbc:	68ba      	ldr	r2, [r7, #8]
 8011dbe:	687b      	ldr	r3, [r7, #4]
 8011dc0:	4413      	add	r3, r2
 8011dc2:	4618      	mov	r0, r3
 8011dc4:	f107 0310 	add.w	r3, r7, #16
 8011dc8:	2204      	movs	r2, #4
 8011dca:	4619      	mov	r1, r3
 8011dcc:	f015 fc52 	bl	8027674 <memcmp>
 8011dd0:	4603      	mov	r3, r0
 8011dd2:	2b00      	cmp	r3, #0
 8011dd4:	f040 80aa 	bne.w	8011f2c <mg_tcpip_rx+0x1f4>
  }
  if (pkt.eth->type == mg_htons(0x806)) {
 8011dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011dda:	899b      	ldrh	r3, [r3, #12]
 8011ddc:	b29c      	uxth	r4, r3
 8011dde:	f640 0006 	movw	r0, #2054	@ 0x806
 8011de2:	f00f fff9 	bl	8021dd8 <mg_ntohs>
 8011de6:	4603      	mov	r3, r0
 8011de8:	429c      	cmp	r4, r3
 8011dea:	d114      	bne.n	8011e16 <mg_tcpip_rx+0xde>
    pkt.arp = (struct arp *) (pkt.eth + 1);
 8011dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011dee:	330e      	adds	r3, #14
 8011df0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (sizeof(*pkt.eth) + sizeof(*pkt.arp) > pkt.raw.len) return;  // Truncated
 8011df2:	69bb      	ldr	r3, [r7, #24]
 8011df4:	2b29      	cmp	r3, #41	@ 0x29
 8011df6:	f240 809b 	bls.w	8011f30 <mg_tcpip_rx+0x1f8>
    mg_tcpip_call(ifp, MG_TCPIP_EV_ARP, &pkt.raw);
 8011dfa:	f107 0314 	add.w	r3, r7, #20
 8011dfe:	461a      	mov	r2, r3
 8011e00:	2103      	movs	r1, #3
 8011e02:	68f8      	ldr	r0, [r7, #12]
 8011e04:	f7fd fbcc 	bl	800f5a0 <mg_tcpip_call>
    rx_arp(ifp, &pkt);
 8011e08:	f107 0314 	add.w	r3, r7, #20
 8011e0c:	4619      	mov	r1, r3
 8011e0e:	68f8      	ldr	r0, [r7, #12]
 8011e10:	f7fe f8ec 	bl	800ffec <rx_arp>
 8011e14:	e097      	b.n	8011f46 <mg_tcpip_rx+0x20e>
  } else if (pkt.eth->type == mg_htons(0x86dd)) {
 8011e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e18:	899b      	ldrh	r3, [r3, #12]
 8011e1a:	b29c      	uxth	r4, r3
 8011e1c:	f248 60dd 	movw	r0, #34525	@ 0x86dd
 8011e20:	f00f ffda 	bl	8021dd8 <mg_ntohs>
 8011e24:	4603      	mov	r3, r0
 8011e26:	429c      	cmp	r4, r3
 8011e28:	d11b      	bne.n	8011e62 <mg_tcpip_rx+0x12a>
    pkt.ip6 = (struct ip6 *) (pkt.eth + 1);
 8011e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e2c:	330e      	adds	r3, #14
 8011e2e:	637b      	str	r3, [r7, #52]	@ 0x34
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip6)) return;  // Truncated
 8011e30:	69bb      	ldr	r3, [r7, #24]
 8011e32:	2b35      	cmp	r3, #53	@ 0x35
 8011e34:	d97e      	bls.n	8011f34 <mg_tcpip_rx+0x1fc>
    if ((pkt.ip6->ver >> 4) != 0x6) return;                         // Not IP
 8011e36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011e38:	781b      	ldrb	r3, [r3, #0]
 8011e3a:	091b      	lsrs	r3, r3, #4
 8011e3c:	b2db      	uxtb	r3, r3
 8011e3e:	2b06      	cmp	r3, #6
 8011e40:	d17a      	bne.n	8011f38 <mg_tcpip_rx+0x200>
    mkpay(&pkt, pkt.ip6 + 1);
 8011e42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011e44:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8011e48:	f107 0314 	add.w	r3, r7, #20
 8011e4c:	4611      	mov	r1, r2
 8011e4e:	4618      	mov	r0, r3
 8011e50:	f7fd fbba 	bl	800f5c8 <mkpay>
    rx_ip6(ifp, &pkt);
 8011e54:	f107 0314 	add.w	r3, r7, #20
 8011e58:	4619      	mov	r1, r3
 8011e5a:	68f8      	ldr	r0, [r7, #12]
 8011e5c:	f7ff ff2a 	bl	8011cb4 <rx_ip6>
 8011e60:	e071      	b.n	8011f46 <mg_tcpip_rx+0x20e>
  } else if (pkt.eth->type == mg_htons(0x800)) {
 8011e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e64:	899b      	ldrh	r3, [r3, #12]
 8011e66:	b29c      	uxth	r4, r3
 8011e68:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8011e6c:	f00f ffb4 	bl	8021dd8 <mg_ntohs>
 8011e70:	4603      	mov	r3, r0
 8011e72:	429c      	cmp	r4, r3
 8011e74:	d133      	bne.n	8011ede <mg_tcpip_rx+0x1a6>
    pkt.ip = (struct ip *) (pkt.eth + 1);
 8011e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e78:	330e      	adds	r3, #14
 8011e7a:	633b      	str	r3, [r7, #48]	@ 0x30
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 8011e7c:	69bb      	ldr	r3, [r7, #24]
 8011e7e:	2b21      	cmp	r3, #33	@ 0x21
 8011e80:	d95c      	bls.n	8011f3c <mg_tcpip_rx+0x204>
    // Truncate frame to what IP header tells us
    if ((size_t) mg_ntohs(pkt.ip->len) + sizeof(struct eth) < pkt.raw.len) {
 8011e82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011e84:	885b      	ldrh	r3, [r3, #2]
 8011e86:	b29b      	uxth	r3, r3
 8011e88:	4618      	mov	r0, r3
 8011e8a:	f00f ffa5 	bl	8021dd8 <mg_ntohs>
 8011e8e:	4603      	mov	r3, r0
 8011e90:	f103 020e 	add.w	r2, r3, #14
 8011e94:	69bb      	ldr	r3, [r7, #24]
 8011e96:	429a      	cmp	r2, r3
 8011e98:	d208      	bcs.n	8011eac <mg_tcpip_rx+0x174>
      pkt.raw.len = (size_t) mg_ntohs(pkt.ip->len) + sizeof(struct eth);
 8011e9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011e9c:	885b      	ldrh	r3, [r3, #2]
 8011e9e:	b29b      	uxth	r3, r3
 8011ea0:	4618      	mov	r0, r3
 8011ea2:	f00f ff99 	bl	8021dd8 <mg_ntohs>
 8011ea6:	4603      	mov	r3, r0
 8011ea8:	330e      	adds	r3, #14
 8011eaa:	61bb      	str	r3, [r7, #24]
    }
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 8011eac:	69bb      	ldr	r3, [r7, #24]
 8011eae:	2b21      	cmp	r3, #33	@ 0x21
 8011eb0:	d946      	bls.n	8011f40 <mg_tcpip_rx+0x208>
    if ((pkt.ip->ver >> 4) != 4) return;                           // Not IP
 8011eb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011eb4:	781b      	ldrb	r3, [r3, #0]
 8011eb6:	091b      	lsrs	r3, r3, #4
 8011eb8:	b2db      	uxtb	r3, r3
 8011eba:	2b04      	cmp	r3, #4
 8011ebc:	d142      	bne.n	8011f44 <mg_tcpip_rx+0x20c>
    mkpay(&pkt, pkt.ip + 1);
 8011ebe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011ec0:	f103 0214 	add.w	r2, r3, #20
 8011ec4:	f107 0314 	add.w	r3, r7, #20
 8011ec8:	4611      	mov	r1, r2
 8011eca:	4618      	mov	r0, r3
 8011ecc:	f7fd fb7c 	bl	800f5c8 <mkpay>
    rx_ip(ifp, &pkt);
 8011ed0:	f107 0314 	add.w	r3, r7, #20
 8011ed4:	4619      	mov	r1, r3
 8011ed6:	68f8      	ldr	r0, [r7, #12]
 8011ed8:	f7ff fd7e 	bl	80119d8 <rx_ip>
 8011edc:	e033      	b.n	8011f46 <mg_tcpip_rx+0x20e>
  } else {
    MG_DEBUG(("Unknown eth type %x", mg_htons(pkt.eth->type)));
 8011ede:	4b1c      	ldr	r3, [pc, #112]	@ (8011f50 <mg_tcpip_rx+0x218>)
 8011ee0:	681b      	ldr	r3, [r3, #0]
 8011ee2:	2b02      	cmp	r3, #2
 8011ee4:	dd11      	ble.n	8011f0a <mg_tcpip_rx+0x1d2>
 8011ee6:	4b1b      	ldr	r3, [pc, #108]	@ (8011f54 <mg_tcpip_rx+0x21c>)
 8011ee8:	f241 32e7 	movw	r2, #5095	@ 0x13e7
 8011eec:	491a      	ldr	r1, [pc, #104]	@ (8011f58 <mg_tcpip_rx+0x220>)
 8011eee:	2003      	movs	r0, #3
 8011ef0:	f7fc fcd8 	bl	800e8a4 <mg_log_prefix>
 8011ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ef6:	899b      	ldrh	r3, [r3, #12]
 8011ef8:	b29b      	uxth	r3, r3
 8011efa:	4618      	mov	r0, r3
 8011efc:	f00f ff6c 	bl	8021dd8 <mg_ntohs>
 8011f00:	4603      	mov	r3, r0
 8011f02:	4619      	mov	r1, r3
 8011f04:	4815      	ldr	r0, [pc, #84]	@ (8011f5c <mg_tcpip_rx+0x224>)
 8011f06:	f7fc fd1d 	bl	800e944 <mg_log>
    if (mg_log_level >= MG_LL_VERBOSE) mg_hexdump(buf, len >= 32 ? 32 : len);
 8011f0a:	4b11      	ldr	r3, [pc, #68]	@ (8011f50 <mg_tcpip_rx+0x218>)
 8011f0c:	681b      	ldr	r3, [r3, #0]
 8011f0e:	2b03      	cmp	r3, #3
 8011f10:	dd19      	ble.n	8011f46 <mg_tcpip_rx+0x20e>
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	2b20      	cmp	r3, #32
 8011f16:	bf28      	it	cs
 8011f18:	2320      	movcs	r3, #32
 8011f1a:	4619      	mov	r1, r3
 8011f1c:	68b8      	ldr	r0, [r7, #8]
 8011f1e:	f7fc fd47 	bl	800e9b0 <mg_hexdump>
 8011f22:	e010      	b.n	8011f46 <mg_tcpip_rx+0x20e>
  if (pkt.raw.len < sizeof(*pkt.eth)) return;  // Truncated - runt?
 8011f24:	bf00      	nop
 8011f26:	e00e      	b.n	8011f46 <mg_tcpip_rx+0x20e>
    return;
 8011f28:	bf00      	nop
 8011f2a:	e00c      	b.n	8011f46 <mg_tcpip_rx+0x20e>
    if (memcmp((void *) ((size_t) buf + len), &crc, sizeof(crc))) return;
 8011f2c:	bf00      	nop
 8011f2e:	e00a      	b.n	8011f46 <mg_tcpip_rx+0x20e>
    if (sizeof(*pkt.eth) + sizeof(*pkt.arp) > pkt.raw.len) return;  // Truncated
 8011f30:	bf00      	nop
 8011f32:	e008      	b.n	8011f46 <mg_tcpip_rx+0x20e>
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip6)) return;  // Truncated
 8011f34:	bf00      	nop
 8011f36:	e006      	b.n	8011f46 <mg_tcpip_rx+0x20e>
    if ((pkt.ip6->ver >> 4) != 0x6) return;                         // Not IP
 8011f38:	bf00      	nop
 8011f3a:	e004      	b.n	8011f46 <mg_tcpip_rx+0x20e>
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 8011f3c:	bf00      	nop
 8011f3e:	e002      	b.n	8011f46 <mg_tcpip_rx+0x20e>
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 8011f40:	bf00      	nop
 8011f42:	e000      	b.n	8011f46 <mg_tcpip_rx+0x20e>
    if ((pkt.ip->ver >> 4) != 4) return;                           // Not IP
 8011f44:	bf00      	nop
  }
}
 8011f46:	374c      	adds	r7, #76	@ 0x4c
 8011f48:	46bd      	mov	sp, r7
 8011f4a:	bd90      	pop	{r4, r7, pc}
 8011f4c:	0802d378 	.word	0x0802d378
 8011f50:	24000258 	.word	0x24000258
 8011f54:	0802d954 	.word	0x0802d954
 8011f58:	08029c3c 	.word	0x08029c3c
 8011f5c:	0802b148 	.word	0x0802b148

08011f60 <mg_tcpip_poll>:

static void mg_tcpip_poll(struct mg_tcpip_if *ifp, uint64_t now) {
 8011f60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011f62:	b095      	sub	sp, #84	@ 0x54
 8011f64:	af06      	add	r7, sp, #24
 8011f66:	6178      	str	r0, [r7, #20]
 8011f68:	e9c7 2302 	strd	r2, r3, [r7, #8]
  struct mg_connection *c;
  bool expired_1000ms = mg_timer_expired(&ifp->timer_1000ms, 1000, now);
 8011f6c:	697b      	ldr	r3, [r7, #20]
 8011f6e:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 8011f72:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8011f76:	e9cd 2300 	strd	r2, r3, [sp]
 8011f7a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8011f7e:	f04f 0300 	mov.w	r3, #0
 8011f82:	4608      	mov	r0, r1
 8011f84:	f005 f966 	bl	8017254 <mg_timer_expired>
 8011f88:	4603      	mov	r3, r0
 8011f8a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  ifp->now = now;
 8011f8e:	6979      	ldr	r1, [r7, #20]
 8011f90:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8011f94:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
             names[ifp->state], mg_print_ip4, &ifp->ip, ifp->nrecv, ifp->nsent,
             ifp->ndrop, ifp->nerr));
#endif
  }
  // Handle gw ARP request timeout, order is important
  if (expired_1000ms && ifp->state == MG_TCPIP_STATE_IP) {
 8011f98:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8011f9c:	2b00      	cmp	r3, #0
 8011f9e:	d00b      	beq.n	8011fb8 <mg_tcpip_poll+0x58>
 8011fa0:	697b      	ldr	r3, [r7, #20]
 8011fa2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8011fa6:	2b03      	cmp	r3, #3
 8011fa8:	d106      	bne.n	8011fb8 <mg_tcpip_poll+0x58>
    ifp->state = MG_TCPIP_STATE_READY;  // keep best-effort MAC
 8011faa:	697b      	ldr	r3, [r7, #20]
 8011fac:	2204      	movs	r2, #4
 8011fae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
    onstatechange(ifp);
 8011fb2:	6978      	ldr	r0, [r7, #20]
 8011fb4:	f7fd fc68 	bl	800f888 <onstatechange>
  }
  // poll driver
  if (ifp->driver->poll) {
 8011fb8:	697b      	ldr	r3, [r7, #20]
 8011fba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011fbc:	68db      	ldr	r3, [r3, #12]
 8011fbe:	2b00      	cmp	r3, #0
 8011fc0:	d075      	beq.n	80120ae <mg_tcpip_poll+0x14e>
    bool up = ifp->driver->poll(ifp, expired_1000ms);
 8011fc2:	697b      	ldr	r3, [r7, #20]
 8011fc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011fc6:	68db      	ldr	r3, [r3, #12]
 8011fc8:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8011fcc:	4611      	mov	r1, r2
 8011fce:	6978      	ldr	r0, [r7, #20]
 8011fd0:	4798      	blx	r3
 8011fd2:	4603      	mov	r3, r0
 8011fd4:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
    // Handle physical interface up/down status
    if (expired_1000ms) {
 8011fd8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8011fdc:	2b00      	cmp	r3, #0
 8011fde:	d066      	beq.n	80120ae <mg_tcpip_poll+0x14e>
      bool current = ifp->state != MG_TCPIP_STATE_DOWN;
 8011fe0:	697b      	ldr	r3, [r7, #20]
 8011fe2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8011fe6:	2b00      	cmp	r3, #0
 8011fe8:	bf14      	ite	ne
 8011fea:	2301      	movne	r3, #1
 8011fec:	2300      	moveq	r3, #0
 8011fee:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
      if (!up && ifp->enable_dhcp_client) ifp->ip = 0;
 8011ff2:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8011ff6:	f083 0301 	eor.w	r3, r3, #1
 8011ffa:	b2db      	uxtb	r3, r3
 8011ffc:	2b00      	cmp	r3, #0
 8011ffe:	d006      	beq.n	801200e <mg_tcpip_poll+0xae>
 8012000:	697b      	ldr	r3, [r7, #20]
 8012002:	7f1b      	ldrb	r3, [r3, #28]
 8012004:	2b00      	cmp	r3, #0
 8012006:	d002      	beq.n	801200e <mg_tcpip_poll+0xae>
 8012008:	697b      	ldr	r3, [r7, #20]
 801200a:	2200      	movs	r2, #0
 801200c:	609a      	str	r2, [r3, #8]
      if (up != current) {  // link state has changed
 801200e:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 8012012:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8012016:	429a      	cmp	r2, r3
 8012018:	d01a      	beq.n	8012050 <mg_tcpip_poll+0xf0>
        ifp->state = up == false ? MG_TCPIP_STATE_DOWN
 801201a:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 801201e:	f083 0301 	eor.w	r3, r3, #1
 8012022:	b2db      	uxtb	r3, r3
 8012024:	2b00      	cmp	r3, #0
 8012026:	d001      	beq.n	801202c <mg_tcpip_poll+0xcc>
 8012028:	2300      	movs	r3, #0
 801202a:	e00a      	b.n	8012042 <mg_tcpip_poll+0xe2>
                     : ifp->enable_dhcp_client || ifp->ip == 0
 801202c:	697b      	ldr	r3, [r7, #20]
 801202e:	7f1b      	ldrb	r3, [r3, #28]
        ifp->state = up == false ? MG_TCPIP_STATE_DOWN
 8012030:	2b00      	cmp	r3, #0
 8012032:	d103      	bne.n	801203c <mg_tcpip_poll+0xdc>
                     : ifp->enable_dhcp_client || ifp->ip == 0
 8012034:	697b      	ldr	r3, [r7, #20]
 8012036:	689b      	ldr	r3, [r3, #8]
 8012038:	2b00      	cmp	r3, #0
 801203a:	d101      	bne.n	8012040 <mg_tcpip_poll+0xe0>
        ifp->state = up == false ? MG_TCPIP_STATE_DOWN
 801203c:	2301      	movs	r3, #1
 801203e:	e000      	b.n	8012042 <mg_tcpip_poll+0xe2>
 8012040:	2303      	movs	r3, #3
 8012042:	697a      	ldr	r2, [r7, #20]
 8012044:	f882 3084 	strb.w	r3, [r2, #132]	@ 0x84
                         ? MG_TCPIP_STATE_UP
                         : MG_TCPIP_STATE_IP;
        onstatechange(ifp);
 8012048:	6978      	ldr	r0, [r7, #20]
 801204a:	f7fd fc1d 	bl	800f888 <onstatechange>
 801204e:	e016      	b.n	801207e <mg_tcpip_poll+0x11e>
      } else if (!ifp->enable_dhcp_client && ifp->state == MG_TCPIP_STATE_UP &&
 8012050:	697b      	ldr	r3, [r7, #20]
 8012052:	7f1b      	ldrb	r3, [r3, #28]
 8012054:	f083 0301 	eor.w	r3, r3, #1
 8012058:	b2db      	uxtb	r3, r3
 801205a:	2b00      	cmp	r3, #0
 801205c:	d00f      	beq.n	801207e <mg_tcpip_poll+0x11e>
 801205e:	697b      	ldr	r3, [r7, #20]
 8012060:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8012064:	2b01      	cmp	r3, #1
 8012066:	d10a      	bne.n	801207e <mg_tcpip_poll+0x11e>
                 ifp->ip) {
 8012068:	697b      	ldr	r3, [r7, #20]
 801206a:	689b      	ldr	r3, [r3, #8]
      } else if (!ifp->enable_dhcp_client && ifp->state == MG_TCPIP_STATE_UP &&
 801206c:	2b00      	cmp	r3, #0
 801206e:	d006      	beq.n	801207e <mg_tcpip_poll+0x11e>
        ifp->state = MG_TCPIP_STATE_IP;  // ifp->fn has set an IP
 8012070:	697b      	ldr	r3, [r7, #20]
 8012072:	2203      	movs	r2, #3
 8012074:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
        onstatechange(ifp);
 8012078:	6978      	ldr	r0, [r7, #20]
 801207a:	f7fd fc05 	bl	800f888 <onstatechange>
      }
      if (ifp->state == MG_TCPIP_STATE_DOWN) MG_ERROR(("Network is down"));
 801207e:	697b      	ldr	r3, [r7, #20]
 8012080:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8012084:	2b00      	cmp	r3, #0
 8012086:	d10d      	bne.n	80120a4 <mg_tcpip_poll+0x144>
 8012088:	4ba4      	ldr	r3, [pc, #656]	@ (801231c <mg_tcpip_poll+0x3bc>)
 801208a:	681b      	ldr	r3, [r3, #0]
 801208c:	2b00      	cmp	r3, #0
 801208e:	dd09      	ble.n	80120a4 <mg_tcpip_poll+0x144>
 8012090:	4ba3      	ldr	r3, [pc, #652]	@ (8012320 <mg_tcpip_poll+0x3c0>)
 8012092:	f241 4210 	movw	r2, #5136	@ 0x1410
 8012096:	49a3      	ldr	r1, [pc, #652]	@ (8012324 <mg_tcpip_poll+0x3c4>)
 8012098:	2001      	movs	r0, #1
 801209a:	f7fc fc03 	bl	800e8a4 <mg_log_prefix>
 801209e:	48a2      	ldr	r0, [pc, #648]	@ (8012328 <mg_tcpip_poll+0x3c8>)
 80120a0:	f7fc fc50 	bl	800e944 <mg_log>
      mg_tcpip_call(ifp, MG_TCPIP_EV_TIMER_1S, NULL);
 80120a4:	2200      	movs	r2, #0
 80120a6:	2104      	movs	r1, #4
 80120a8:	6978      	ldr	r0, [r7, #20]
 80120aa:	f7fd fa79 	bl	800f5a0 <mg_tcpip_call>
    }
  }
  if (ifp->state == MG_TCPIP_STATE_DOWN) return;
 80120ae:	697b      	ldr	r3, [r7, #20]
 80120b0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80120b4:	2b00      	cmp	r3, #0
 80120b6:	f000 81a5 	beq.w	8012404 <mg_tcpip_poll+0x4a4>

  // DHCP RFC-2131 (4.4)
  if (ifp->enable_dhcp_client && expired_1000ms) {
 80120ba:	697b      	ldr	r3, [r7, #20]
 80120bc:	7f1b      	ldrb	r3, [r3, #28]
 80120be:	2b00      	cmp	r3, #0
 80120c0:	d055      	beq.n	801216e <mg_tcpip_poll+0x20e>
 80120c2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80120c6:	2b00      	cmp	r3, #0
 80120c8:	d051      	beq.n	801216e <mg_tcpip_poll+0x20e>
    if (ifp->state == MG_TCPIP_STATE_UP) {
 80120ca:	697b      	ldr	r3, [r7, #20]
 80120cc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80120d0:	2b01      	cmp	r3, #1
 80120d2:	d103      	bne.n	80120dc <mg_tcpip_poll+0x17c>
      tx_dhcp_discover(ifp);  // INIT (4.4.1)
 80120d4:	6978      	ldr	r0, [r7, #20]
 80120d6:	f7fd fedb 	bl	800fe90 <tx_dhcp_discover>
 80120da:	e048      	b.n	801216e <mg_tcpip_poll+0x20e>
    } else if (ifp->state == MG_TCPIP_STATE_READY &&
 80120dc:	697b      	ldr	r3, [r7, #20]
 80120de:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80120e2:	2b04      	cmp	r3, #4
 80120e4:	d143      	bne.n	801216e <mg_tcpip_poll+0x20e>
               ifp->lease_expire > 0) {  // BOUND / RENEWING / REBINDING
 80120e6:	697b      	ldr	r3, [r7, #20]
 80120e8:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
    } else if (ifp->state == MG_TCPIP_STATE_READY &&
 80120ec:	4313      	orrs	r3, r2
 80120ee:	d03e      	beq.n	801216e <mg_tcpip_poll+0x20e>
      if (ifp->now >= ifp->lease_expire) {
 80120f0:	697b      	ldr	r3, [r7, #20]
 80120f2:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	@ 0x58
 80120f6:	697b      	ldr	r3, [r7, #20]
 80120f8:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 80120fc:	4290      	cmp	r0, r2
 80120fe:	eb71 0303 	sbcs.w	r3, r1, r3
 8012102:	d30a      	bcc.n	801211a <mg_tcpip_poll+0x1ba>
        ifp->state = MG_TCPIP_STATE_UP, ifp->ip = 0;  // expired, release IP
 8012104:	697b      	ldr	r3, [r7, #20]
 8012106:	2201      	movs	r2, #1
 8012108:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 801210c:	697b      	ldr	r3, [r7, #20]
 801210e:	2200      	movs	r2, #0
 8012110:	609a      	str	r2, [r3, #8]
        onstatechange(ifp);
 8012112:	6978      	ldr	r0, [r7, #20]
 8012114:	f7fd fbb8 	bl	800f888 <onstatechange>
 8012118:	e029      	b.n	801216e <mg_tcpip_poll+0x20e>
      } else if (ifp->now + 30UL * 60UL * 1000UL > ifp->lease_expire &&
 801211a:	697b      	ldr	r3, [r7, #20]
 801211c:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 8012120:	4982      	ldr	r1, [pc, #520]	@ (801232c <mg_tcpip_poll+0x3cc>)
 8012122:	1854      	adds	r4, r2, r1
 8012124:	f143 0500 	adc.w	r5, r3, #0
 8012128:	697b      	ldr	r3, [r7, #20]
 801212a:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 801212e:	42a2      	cmp	r2, r4
 8012130:	41ab      	sbcs	r3, r5
 8012132:	d21c      	bcs.n	801216e <mg_tcpip_poll+0x20e>
                 ((ifp->now / 1000) % 60) == 0) {
 8012134:	697b      	ldr	r3, [r7, #20]
 8012136:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	@ 0x58
 801213a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801213e:	f04f 0300 	mov.w	r3, #0
 8012142:	f7ee fb09 	bl	8000758 <__aeabi_uldivmod>
 8012146:	4602      	mov	r2, r0
 8012148:	460b      	mov	r3, r1
 801214a:	4610      	mov	r0, r2
 801214c:	4619      	mov	r1, r3
 801214e:	f04f 023c 	mov.w	r2, #60	@ 0x3c
 8012152:	f04f 0300 	mov.w	r3, #0
 8012156:	f7ee faff 	bl	8000758 <__aeabi_uldivmod>
      } else if (ifp->now + 30UL * 60UL * 1000UL > ifp->lease_expire &&
 801215a:	4313      	orrs	r3, r2
 801215c:	d107      	bne.n	801216e <mg_tcpip_poll+0x20e>
        // hack: 30 min before deadline, try to rebind (4.3.6) every min
        tx_dhcp_request_re(ifp, (uint8_t *) broadcast, ifp->ip, 0xffffffff);
 801215e:	697b      	ldr	r3, [r7, #20]
 8012160:	689a      	ldr	r2, [r3, #8]
 8012162:	f04f 33ff 	mov.w	r3, #4294967295
 8012166:	4972      	ldr	r1, [pc, #456]	@ (8012330 <mg_tcpip_poll+0x3d0>)
 8012168:	6978      	ldr	r0, [r7, #20]
 801216a:	f7fd fe5f 	bl	800fe2c <tx_dhcp_request_re>
      }  // TODO(): Handle T1 (RENEWING) and T2 (REBINDING) (4.4.5)
    }
  }

  // Read data from the network
  if (ifp->driver->rx != NULL) {  // Simple polling driver, returns one frame
 801216e:	697b      	ldr	r3, [r7, #20]
 8012170:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012172:	689b      	ldr	r3, [r3, #8]
 8012174:	2b00      	cmp	r3, #0
 8012176:	d019      	beq.n	80121ac <mg_tcpip_poll+0x24c>
    size_t len =
        ifp->driver->rx(ifp->recv_queue.buf, ifp->recv_queue.size, ifp);
 8012178:	697b      	ldr	r3, [r7, #20]
 801217a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801217c:	689b      	ldr	r3, [r3, #8]
 801217e:	697a      	ldr	r2, [r7, #20]
 8012180:	6b50      	ldr	r0, [r2, #52]	@ 0x34
 8012182:	697a      	ldr	r2, [r7, #20]
 8012184:	6b91      	ldr	r1, [r2, #56]	@ 0x38
 8012186:	697a      	ldr	r2, [r7, #20]
 8012188:	4798      	blx	r3
 801218a:	62b8      	str	r0, [r7, #40]	@ 0x28
    if (len > 0) {
 801218c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801218e:	2b00      	cmp	r3, #0
 8012190:	d024      	beq.n	80121dc <mg_tcpip_poll+0x27c>
      ifp->nrecv++;
 8012192:	697b      	ldr	r3, [r7, #20]
 8012194:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012196:	1c5a      	adds	r2, r3, #1
 8012198:	697b      	ldr	r3, [r7, #20]
 801219a:	679a      	str	r2, [r3, #120]	@ 0x78
      mg_tcpip_rx(ifp, ifp->recv_queue.buf, len);
 801219c:	697b      	ldr	r3, [r7, #20]
 801219e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80121a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80121a2:	4619      	mov	r1, r3
 80121a4:	6978      	ldr	r0, [r7, #20]
 80121a6:	f7ff fdc7 	bl	8011d38 <mg_tcpip_rx>
 80121aa:	e017      	b.n	80121dc <mg_tcpip_poll+0x27c>
    }
  } else {  // Complex poll / Interrupt-based driver. Queues recvd frames
    char *buf;
    size_t len = mg_queue_next(&ifp->recv_queue, &buf);
 80121ac:	697b      	ldr	r3, [r7, #20]
 80121ae:	3334      	adds	r3, #52	@ 0x34
 80121b0:	f107 0220 	add.w	r2, r7, #32
 80121b4:	4611      	mov	r1, r2
 80121b6:	4618      	mov	r0, r3
 80121b8:	f001 faba 	bl	8013730 <mg_queue_next>
 80121bc:	62f8      	str	r0, [r7, #44]	@ 0x2c
    if (len > 0) {
 80121be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80121c0:	2b00      	cmp	r3, #0
 80121c2:	d00b      	beq.n	80121dc <mg_tcpip_poll+0x27c>
      mg_tcpip_rx(ifp, buf, len);
 80121c4:	6a3b      	ldr	r3, [r7, #32]
 80121c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80121c8:	4619      	mov	r1, r3
 80121ca:	6978      	ldr	r0, [r7, #20]
 80121cc:	f7ff fdb4 	bl	8011d38 <mg_tcpip_rx>
      mg_queue_del(&ifp->recv_queue, len);
 80121d0:	697b      	ldr	r3, [r7, #20]
 80121d2:	3334      	adds	r3, #52	@ 0x34
 80121d4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80121d6:	4618      	mov	r0, r3
 80121d8:	f001 fb28 	bl	801382c <mg_queue_del>
    }
  }

  // Process timeouts
  for (c = ifp->mgr->conns; c != NULL; c = c->next) {
 80121dc:	697b      	ldr	r3, [r7, #20]
 80121de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80121e0:	681b      	ldr	r3, [r3, #0]
 80121e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80121e4:	e109      	b.n	80123fa <mg_tcpip_poll+0x49a>
    if ((c->is_udp && !c->is_arplooking) || c->is_listening || c->is_resolving)
 80121e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80121e8:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 80121ec:	f003 0301 	and.w	r3, r3, #1
 80121f0:	b2db      	uxtb	r3, r3
 80121f2:	2b00      	cmp	r3, #0
 80121f4:	d008      	beq.n	8012208 <mg_tcpip_poll+0x2a8>
 80121f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80121f8:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80121fc:	f003 0310 	and.w	r3, r3, #16
 8012200:	b2db      	uxtb	r3, r3
 8012202:	2b00      	cmp	r3, #0
 8012204:	f000 80f3 	beq.w	80123ee <mg_tcpip_poll+0x48e>
 8012208:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801220a:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801220e:	f003 0301 	and.w	r3, r3, #1
 8012212:	b2db      	uxtb	r3, r3
 8012214:	2b00      	cmp	r3, #0
 8012216:	f040 80ea 	bne.w	80123ee <mg_tcpip_poll+0x48e>
 801221a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801221c:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8012220:	f003 0308 	and.w	r3, r3, #8
 8012224:	b2db      	uxtb	r3, r3
 8012226:	2b00      	cmp	r3, #0
 8012228:	f040 80e1 	bne.w	80123ee <mg_tcpip_poll+0x48e>
      continue;
    struct connstate *s = (struct connstate *) (c + 1);
 801222c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801222e:	33b0      	adds	r3, #176	@ 0xb0
 8012230:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t rem_ip;
    memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 8012232:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012234:	331c      	adds	r3, #28
 8012236:	681b      	ldr	r3, [r3, #0]
 8012238:	61fb      	str	r3, [r7, #28]
    if (ifp->now > s->timer) {
 801223a:	697b      	ldr	r3, [r7, #20]
 801223c:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 8012240:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8012242:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
 8012246:	4290      	cmp	r0, r2
 8012248:	eb71 0303 	sbcs.w	r3, r1, r3
 801224c:	f080 80d2 	bcs.w	80123f4 <mg_tcpip_poll+0x494>
      if (s->ttype == MIP_TTYPE_ARP) {
 8012250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012252:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012256:	2b02      	cmp	r3, #2
 8012258:	d104      	bne.n	8012264 <mg_tcpip_poll+0x304>
        mg_error(c, "ARP timeout");
 801225a:	4936      	ldr	r1, [pc, #216]	@ (8012334 <mg_tcpip_poll+0x3d4>)
 801225c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801225e:	f7f6 fca9 	bl	8008bb4 <mg_error>
 8012262:	e0bf      	b.n	80123e4 <mg_tcpip_poll+0x484>
      } else if (c->is_udp) {
 8012264:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012266:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 801226a:	f003 0301 	and.w	r3, r3, #1
 801226e:	b2db      	uxtb	r3, r3
 8012270:	2b00      	cmp	r3, #0
 8012272:	f040 80be 	bne.w	80123f2 <mg_tcpip_poll+0x492>
        continue;
      } else if (s->ttype == MIP_TTYPE_ACK && s->acked != s->ack) {
 8012276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012278:	f893 3020 	ldrb.w	r3, [r3, #32]
 801227c:	2b01      	cmp	r3, #1
 801227e:	d142      	bne.n	8012306 <mg_tcpip_poll+0x3a6>
 8012280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012282:	691a      	ldr	r2, [r3, #16]
 8012284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012286:	685b      	ldr	r3, [r3, #4]
 8012288:	429a      	cmp	r2, r3
 801228a:	d03c      	beq.n	8012306 <mg_tcpip_poll+0x3a6>
        MG_VERBOSE(("%lu ack %x %x", c->id, s->seq, s->ack));
 801228c:	4b23      	ldr	r3, [pc, #140]	@ (801231c <mg_tcpip_poll+0x3bc>)
 801228e:	681b      	ldr	r3, [r3, #0]
 8012290:	2b03      	cmp	r3, #3
 8012292:	dd0f      	ble.n	80122b4 <mg_tcpip_poll+0x354>
 8012294:	4b22      	ldr	r3, [pc, #136]	@ (8012320 <mg_tcpip_poll+0x3c0>)
 8012296:	f241 4245 	movw	r2, #5189	@ 0x1445
 801229a:	4922      	ldr	r1, [pc, #136]	@ (8012324 <mg_tcpip_poll+0x3c4>)
 801229c:	2004      	movs	r0, #4
 801229e:	f7fc fb01 	bl	800e8a4 <mg_log_prefix>
 80122a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80122a4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80122a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80122a8:	681a      	ldr	r2, [r3, #0]
 80122aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80122ac:	685b      	ldr	r3, [r3, #4]
 80122ae:	4822      	ldr	r0, [pc, #136]	@ (8012338 <mg_tcpip_poll+0x3d8>)
 80122b0:	f7fc fb48 	bl	800e944 <mg_log>
        tx_tcp(ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 80122b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80122b6:	f103 061a 	add.w	r6, r3, #26
 80122ba:	69fb      	ldr	r3, [r7, #28]
 80122bc:	613b      	str	r3, [r7, #16]
 80122be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80122c0:	8b1c      	ldrh	r4, [r3, #24]
 80122c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80122c4:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
 80122c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80122c8:	681b      	ldr	r3, [r3, #0]
 80122ca:	4618      	mov	r0, r3
 80122cc:	f00f fd9b 	bl	8021e06 <mg_ntohl>
 80122d0:	6078      	str	r0, [r7, #4]
 80122d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80122d4:	685b      	ldr	r3, [r3, #4]
 80122d6:	4618      	mov	r0, r3
 80122d8:	f00f fd95 	bl	8021e06 <mg_ntohl>
 80122dc:	4603      	mov	r3, r0
 80122de:	2200      	movs	r2, #0
 80122e0:	9205      	str	r2, [sp, #20]
 80122e2:	2200      	movs	r2, #0
 80122e4:	9204      	str	r2, [sp, #16]
 80122e6:	9303      	str	r3, [sp, #12]
 80122e8:	6879      	ldr	r1, [r7, #4]
 80122ea:	9102      	str	r1, [sp, #8]
 80122ec:	9501      	str	r5, [sp, #4]
 80122ee:	9400      	str	r4, [sp, #0]
 80122f0:	2310      	movs	r3, #16
 80122f2:	693a      	ldr	r2, [r7, #16]
 80122f4:	4631      	mov	r1, r6
 80122f6:	6978      	ldr	r0, [r7, #20]
 80122f8:	f7fe fc2e 	bl	8010b58 <tx_tcp>
               mg_htonl(s->seq), mg_htonl(s->ack), NULL, 0);
        s->acked = s->ack;
 80122fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80122fe:	685a      	ldr	r2, [r3, #4]
 8012300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012302:	611a      	str	r2, [r3, #16]
 8012304:	e06e      	b.n	80123e4 <mg_tcpip_poll+0x484>
      } else if (s->ttype == MIP_TTYPE_SYN) {
 8012306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012308:	f893 3020 	ldrb.w	r3, [r3, #32]
 801230c:	2b03      	cmp	r3, #3
 801230e:	d117      	bne.n	8012340 <mg_tcpip_poll+0x3e0>
        mg_error(c, "Connection timeout");
 8012310:	490a      	ldr	r1, [pc, #40]	@ (801233c <mg_tcpip_poll+0x3dc>)
 8012312:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8012314:	f7f6 fc4e 	bl	8008bb4 <mg_error>
 8012318:	e064      	b.n	80123e4 <mg_tcpip_poll+0x484>
 801231a:	bf00      	nop
 801231c:	24000258 	.word	0x24000258
 8012320:	0802d960 	.word	0x0802d960
 8012324:	08029c3c 	.word	0x08029c3c
 8012328:	0802b15c 	.word	0x0802b15c
 801232c:	001b7740 	.word	0x001b7740
 8012330:	0802d378 	.word	0x0802d378
 8012334:	0802b16c 	.word	0x0802b16c
 8012338:	0802b178 	.word	0x0802b178
 801233c:	0802b188 	.word	0x0802b188
      } else if (s->ttype == MIP_TTYPE_FIN) {
 8012340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012342:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012346:	2b04      	cmp	r3, #4
 8012348:	d107      	bne.n	801235a <mg_tcpip_poll+0x3fa>
        c->is_closing = 1;
 801234a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801234c:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8012350:	f043 0320 	orr.w	r3, r3, #32
 8012354:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
        continue;
 8012358:	e04c      	b.n	80123f4 <mg_tcpip_poll+0x494>
      } else {
        if (s->tmiss++ > 2) {
 801235a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801235c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8012360:	1c5a      	adds	r2, r3, #1
 8012362:	b2d1      	uxtb	r1, r2
 8012364:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012366:	f882 1021 	strb.w	r1, [r2, #33]	@ 0x21
 801236a:	2b02      	cmp	r3, #2
 801236c:	d904      	bls.n	8012378 <mg_tcpip_poll+0x418>
          mg_error(c, "keepalive");
 801236e:	4927      	ldr	r1, [pc, #156]	@ (801240c <mg_tcpip_poll+0x4ac>)
 8012370:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8012372:	f7f6 fc1f 	bl	8008bb4 <mg_error>
 8012376:	e035      	b.n	80123e4 <mg_tcpip_poll+0x484>
        } else {
          MG_VERBOSE(("%lu keepalive", c->id));
 8012378:	4b25      	ldr	r3, [pc, #148]	@ (8012410 <mg_tcpip_poll+0x4b0>)
 801237a:	681b      	ldr	r3, [r3, #0]
 801237c:	2b03      	cmp	r3, #3
 801237e:	dd0c      	ble.n	801239a <mg_tcpip_poll+0x43a>
 8012380:	4b24      	ldr	r3, [pc, #144]	@ (8012414 <mg_tcpip_poll+0x4b4>)
 8012382:	f241 4252 	movw	r2, #5202	@ 0x1452
 8012386:	4924      	ldr	r1, [pc, #144]	@ (8012418 <mg_tcpip_poll+0x4b8>)
 8012388:	2004      	movs	r0, #4
 801238a:	f7fc fa8b 	bl	800e8a4 <mg_log_prefix>
 801238e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012390:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012392:	4619      	mov	r1, r3
 8012394:	4821      	ldr	r0, [pc, #132]	@ (801241c <mg_tcpip_poll+0x4bc>)
 8012396:	f7fc fad5 	bl	800e944 <mg_log>
          tx_tcp(ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 801239a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801239c:	f103 061a 	add.w	r6, r3, #26
 80123a0:	69fb      	ldr	r3, [r7, #28]
 80123a2:	613b      	str	r3, [r7, #16]
 80123a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80123a6:	8b1c      	ldrh	r4, [r3, #24]
 80123a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80123aa:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
                 mg_htonl(s->seq - 1), mg_htonl(s->ack), NULL, 0);
 80123ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80123ae:	681b      	ldr	r3, [r3, #0]
          tx_tcp(ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 80123b0:	3b01      	subs	r3, #1
 80123b2:	4618      	mov	r0, r3
 80123b4:	f00f fd27 	bl	8021e06 <mg_ntohl>
 80123b8:	6078      	str	r0, [r7, #4]
 80123ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80123bc:	685b      	ldr	r3, [r3, #4]
 80123be:	4618      	mov	r0, r3
 80123c0:	f00f fd21 	bl	8021e06 <mg_ntohl>
 80123c4:	4603      	mov	r3, r0
 80123c6:	2200      	movs	r2, #0
 80123c8:	9205      	str	r2, [sp, #20]
 80123ca:	2200      	movs	r2, #0
 80123cc:	9204      	str	r2, [sp, #16]
 80123ce:	9303      	str	r3, [sp, #12]
 80123d0:	6879      	ldr	r1, [r7, #4]
 80123d2:	9102      	str	r1, [sp, #8]
 80123d4:	9501      	str	r5, [sp, #4]
 80123d6:	9400      	str	r4, [sp, #0]
 80123d8:	2310      	movs	r3, #16
 80123da:	693a      	ldr	r2, [r7, #16]
 80123dc:	4631      	mov	r1, r6
 80123de:	6978      	ldr	r0, [r7, #20]
 80123e0:	f7fe fbba 	bl	8010b58 <tx_tcp>
        }
      }

      settmout(c, MIP_TTYPE_KEEPALIVE);
 80123e4:	2100      	movs	r1, #0
 80123e6:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80123e8:	f7fd f966 	bl	800f6b8 <settmout>
 80123ec:	e002      	b.n	80123f4 <mg_tcpip_poll+0x494>
      continue;
 80123ee:	bf00      	nop
 80123f0:	e000      	b.n	80123f4 <mg_tcpip_poll+0x494>
        continue;
 80123f2:	bf00      	nop
  for (c = ifp->mgr->conns; c != NULL; c = c->next) {
 80123f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80123f6:	681b      	ldr	r3, [r3, #0]
 80123f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80123fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80123fc:	2b00      	cmp	r3, #0
 80123fe:	f47f aef2 	bne.w	80121e6 <mg_tcpip_poll+0x286>
 8012402:	e000      	b.n	8012406 <mg_tcpip_poll+0x4a6>
  if (ifp->state == MG_TCPIP_STATE_DOWN) return;
 8012404:	bf00      	nop
    }
  }
}
 8012406:	373c      	adds	r7, #60	@ 0x3c
 8012408:	46bd      	mov	sp, r7
 801240a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801240c:	0802b19c 	.word	0x0802b19c
 8012410:	24000258 	.word	0x24000258
 8012414:	0802d960 	.word	0x0802d960
 8012418:	08029c3c 	.word	0x08029c3c
 801241c:	0802b1a8 	.word	0x0802b1a8

08012420 <mg_tcpip_qwrite>:

// This function executes in interrupt context, thus it should copy data
// somewhere fast. Note that newlib's malloc is not thread safe, thus use
// our lock-free queue with preallocated buffer to copy data and return asap
void mg_tcpip_qwrite(void *buf, size_t len, struct mg_tcpip_if *ifp) {
 8012420:	b580      	push	{r7, lr}
 8012422:	b086      	sub	sp, #24
 8012424:	af00      	add	r7, sp, #0
 8012426:	60f8      	str	r0, [r7, #12]
 8012428:	60b9      	str	r1, [r7, #8]
 801242a:	607a      	str	r2, [r7, #4]
  char *p;
  if (mg_queue_book(&ifp->recv_queue, &p, len) >= len) {
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	3334      	adds	r3, #52	@ 0x34
 8012430:	f107 0114 	add.w	r1, r7, #20
 8012434:	68ba      	ldr	r2, [r7, #8]
 8012436:	4618      	mov	r0, r3
 8012438:	f001 f922 	bl	8013680 <mg_queue_book>
 801243c:	4602      	mov	r2, r0
 801243e:	68bb      	ldr	r3, [r7, #8]
 8012440:	4293      	cmp	r3, r2
 8012442:	d811      	bhi.n	8012468 <mg_tcpip_qwrite+0x48>
    memcpy(p, buf, len);
 8012444:	697b      	ldr	r3, [r7, #20]
 8012446:	68ba      	ldr	r2, [r7, #8]
 8012448:	68f9      	ldr	r1, [r7, #12]
 801244a:	4618      	mov	r0, r3
 801244c:	f015 fa75 	bl	802793a <memcpy>
    mg_queue_add(&ifp->recv_queue, len);
 8012450:	687b      	ldr	r3, [r7, #4]
 8012452:	3334      	adds	r3, #52	@ 0x34
 8012454:	68b9      	ldr	r1, [r7, #8]
 8012456:	4618      	mov	r0, r3
 8012458:	f001 f9b0 	bl	80137bc <mg_queue_add>
    ifp->nrecv++;
 801245c:	687b      	ldr	r3, [r7, #4]
 801245e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012460:	1c5a      	adds	r2, r3, #1
 8012462:	687b      	ldr	r3, [r7, #4]
 8012464:	679a      	str	r2, [r3, #120]	@ 0x78
  } else {
    ifp->ndrop++;
  }
}
 8012466:	e004      	b.n	8012472 <mg_tcpip_qwrite+0x52>
    ifp->ndrop++;
 8012468:	687b      	ldr	r3, [r7, #4]
 801246a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801246c:	1c5a      	adds	r2, r3, #1
 801246e:	687b      	ldr	r3, [r7, #4]
 8012470:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8012472:	bf00      	nop
 8012474:	3718      	adds	r7, #24
 8012476:	46bd      	mov	sp, r7
 8012478:	bd80      	pop	{r7, pc}
	...

0801247c <mg_tcpip_init>:

void mg_tcpip_init(struct mg_mgr *mgr, struct mg_tcpip_if *ifp) {
 801247c:	b580      	push	{r7, lr}
 801247e:	b084      	sub	sp, #16
 8012480:	af00      	add	r7, sp, #0
 8012482:	6078      	str	r0, [r7, #4]
 8012484:	6039      	str	r1, [r7, #0]
  // If MAC address is not set, make a random one
  if (ifp->mac[0] == 0 && ifp->mac[1] == 0 && ifp->mac[2] == 0 &&
 8012486:	683b      	ldr	r3, [r7, #0]
 8012488:	781b      	ldrb	r3, [r3, #0]
 801248a:	2b00      	cmp	r3, #0
 801248c:	d12d      	bne.n	80124ea <mg_tcpip_init+0x6e>
 801248e:	683b      	ldr	r3, [r7, #0]
 8012490:	785b      	ldrb	r3, [r3, #1]
 8012492:	2b00      	cmp	r3, #0
 8012494:	d129      	bne.n	80124ea <mg_tcpip_init+0x6e>
 8012496:	683b      	ldr	r3, [r7, #0]
 8012498:	789b      	ldrb	r3, [r3, #2]
 801249a:	2b00      	cmp	r3, #0
 801249c:	d125      	bne.n	80124ea <mg_tcpip_init+0x6e>
      ifp->mac[3] == 0 && ifp->mac[4] == 0 && ifp->mac[5] == 0) {
 801249e:	683b      	ldr	r3, [r7, #0]
 80124a0:	78db      	ldrb	r3, [r3, #3]
  if (ifp->mac[0] == 0 && ifp->mac[1] == 0 && ifp->mac[2] == 0 &&
 80124a2:	2b00      	cmp	r3, #0
 80124a4:	d121      	bne.n	80124ea <mg_tcpip_init+0x6e>
      ifp->mac[3] == 0 && ifp->mac[4] == 0 && ifp->mac[5] == 0) {
 80124a6:	683b      	ldr	r3, [r7, #0]
 80124a8:	791b      	ldrb	r3, [r3, #4]
 80124aa:	2b00      	cmp	r3, #0
 80124ac:	d11d      	bne.n	80124ea <mg_tcpip_init+0x6e>
 80124ae:	683b      	ldr	r3, [r7, #0]
 80124b0:	795b      	ldrb	r3, [r3, #5]
 80124b2:	2b00      	cmp	r3, #0
 80124b4:	d119      	bne.n	80124ea <mg_tcpip_init+0x6e>
    ifp->mac[0] = 0x02;  // Locally administered, unicast
 80124b6:	683b      	ldr	r3, [r7, #0]
 80124b8:	2202      	movs	r2, #2
 80124ba:	701a      	strb	r2, [r3, #0]
    mg_random(&ifp->mac[1], sizeof(ifp->mac) - 1);
 80124bc:	683b      	ldr	r3, [r7, #0]
 80124be:	3301      	adds	r3, #1
 80124c0:	2105      	movs	r1, #5
 80124c2:	4618      	mov	r0, r3
 80124c4:	f7ee fb16 	bl	8000af4 <mg_random>
    MG_INFO(("MAC not set. Generated random: %M", mg_print_mac, ifp->mac));
 80124c8:	4b59      	ldr	r3, [pc, #356]	@ (8012630 <mg_tcpip_init+0x1b4>)
 80124ca:	681b      	ldr	r3, [r3, #0]
 80124cc:	2b01      	cmp	r3, #1
 80124ce:	dd0c      	ble.n	80124ea <mg_tcpip_init+0x6e>
 80124d0:	4b58      	ldr	r3, [pc, #352]	@ (8012634 <mg_tcpip_init+0x1b8>)
 80124d2:	f241 4271 	movw	r2, #5233	@ 0x1471
 80124d6:	4958      	ldr	r1, [pc, #352]	@ (8012638 <mg_tcpip_init+0x1bc>)
 80124d8:	2002      	movs	r0, #2
 80124da:	f7fc f9e3 	bl	800e8a4 <mg_log_prefix>
 80124de:	683b      	ldr	r3, [r7, #0]
 80124e0:	461a      	mov	r2, r3
 80124e2:	4956      	ldr	r1, [pc, #344]	@ (801263c <mg_tcpip_init+0x1c0>)
 80124e4:	4856      	ldr	r0, [pc, #344]	@ (8012640 <mg_tcpip_init+0x1c4>)
 80124e6:	f7fc fa2d 	bl	800e944 <mg_log>
  }

  // If DHCP name is not set, use "mip"
  if (ifp->dhcp_name[0] == '\0') {
 80124ea:	683b      	ldr	r3, [r7, #0]
 80124ec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80124f0:	2b00      	cmp	r3, #0
 80124f2:	d106      	bne.n	8012502 <mg_tcpip_init+0x86>
    memcpy(ifp->dhcp_name, "mip", 4);
 80124f4:	683b      	ldr	r3, [r7, #0]
 80124f6:	3344      	adds	r3, #68	@ 0x44
 80124f8:	2204      	movs	r2, #4
 80124fa:	4952      	ldr	r1, [pc, #328]	@ (8012644 <mg_tcpip_init+0x1c8>)
 80124fc:	4618      	mov	r0, r3
 80124fe:	f015 fa1c 	bl	802793a <memcpy>
  }
  ifp->dhcp_name[sizeof(ifp->dhcp_name) - 1] = '\0';  // Just in case
 8012502:	683b      	ldr	r3, [r7, #0]
 8012504:	2200      	movs	r2, #0
 8012506:	f883 204f 	strb.w	r2, [r3, #79]	@ 0x4f

  if (ifp->driver->init && !ifp->driver->init(ifp)) {
 801250a:	683b      	ldr	r3, [r7, #0]
 801250c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801250e:	681b      	ldr	r3, [r3, #0]
 8012510:	2b00      	cmp	r3, #0
 8012512:	d019      	beq.n	8012548 <mg_tcpip_init+0xcc>
 8012514:	683b      	ldr	r3, [r7, #0]
 8012516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012518:	681b      	ldr	r3, [r3, #0]
 801251a:	6838      	ldr	r0, [r7, #0]
 801251c:	4798      	blx	r3
 801251e:	4603      	mov	r3, r0
 8012520:	f083 0301 	eor.w	r3, r3, #1
 8012524:	b2db      	uxtb	r3, r3
 8012526:	2b00      	cmp	r3, #0
 8012528:	d00e      	beq.n	8012548 <mg_tcpip_init+0xcc>
    MG_ERROR(("driver init failed"));
 801252a:	4b41      	ldr	r3, [pc, #260]	@ (8012630 <mg_tcpip_init+0x1b4>)
 801252c:	681b      	ldr	r3, [r3, #0]
 801252e:	2b00      	cmp	r3, #0
 8012530:	dd7a      	ble.n	8012628 <mg_tcpip_init+0x1ac>
 8012532:	4b40      	ldr	r3, [pc, #256]	@ (8012634 <mg_tcpip_init+0x1b8>)
 8012534:	f241 427b 	movw	r2, #5243	@ 0x147b
 8012538:	493f      	ldr	r1, [pc, #252]	@ (8012638 <mg_tcpip_init+0x1bc>)
 801253a:	2001      	movs	r0, #1
 801253c:	f7fc f9b2 	bl	800e8a4 <mg_log_prefix>
 8012540:	4841      	ldr	r0, [pc, #260]	@ (8012648 <mg_tcpip_init+0x1cc>)
 8012542:	f7fc f9ff 	bl	800e944 <mg_log>
 8012546:	e06f      	b.n	8012628 <mg_tcpip_init+0x1ac>
  } else {
    size_t framesize = 1540;
 8012548:	f240 6304 	movw	r3, #1540	@ 0x604
 801254c:	60fb      	str	r3, [r7, #12]
    ifp->tx.buf = (char *) calloc(1, framesize), ifp->tx.len = framesize;
 801254e:	68f9      	ldr	r1, [r7, #12]
 8012550:	2001      	movs	r0, #1
 8012552:	f013 fa0b 	bl	802596c <calloc>
 8012556:	4603      	mov	r3, r0
 8012558:	461a      	mov	r2, r3
 801255a:	683b      	ldr	r3, [r7, #0]
 801255c:	615a      	str	r2, [r3, #20]
 801255e:	683b      	ldr	r3, [r7, #0]
 8012560:	68fa      	ldr	r2, [r7, #12]
 8012562:	619a      	str	r2, [r3, #24]
    if (ifp->recv_queue.size == 0)
 8012564:	683b      	ldr	r3, [r7, #0]
 8012566:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012568:	2b00      	cmp	r3, #0
 801256a:	d10a      	bne.n	8012582 <mg_tcpip_init+0x106>
      ifp->recv_queue.size = ifp->driver->rx ? framesize : 8192;
 801256c:	683b      	ldr	r3, [r7, #0]
 801256e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012570:	689b      	ldr	r3, [r3, #8]
 8012572:	2b00      	cmp	r3, #0
 8012574:	d001      	beq.n	801257a <mg_tcpip_init+0xfe>
 8012576:	68fb      	ldr	r3, [r7, #12]
 8012578:	e001      	b.n	801257e <mg_tcpip_init+0x102>
 801257a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 801257e:	683a      	ldr	r2, [r7, #0]
 8012580:	6393      	str	r3, [r2, #56]	@ 0x38
    ifp->recv_queue.buf = (char *) calloc(1, ifp->recv_queue.size);
 8012582:	683b      	ldr	r3, [r7, #0]
 8012584:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012586:	4619      	mov	r1, r3
 8012588:	2001      	movs	r0, #1
 801258a:	f013 f9ef 	bl	802596c <calloc>
 801258e:	4603      	mov	r3, r0
 8012590:	461a      	mov	r2, r3
 8012592:	683b      	ldr	r3, [r7, #0]
 8012594:	635a      	str	r2, [r3, #52]	@ 0x34
    ifp->timer_1000ms = mg_millis();
 8012596:	f7ee fadb 	bl	8000b50 <mg_millis>
 801259a:	4602      	mov	r2, r0
 801259c:	460b      	mov	r3, r1
 801259e:	6839      	ldr	r1, [r7, #0]
 80125a0:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
    mgr->ifp = ifp;
 80125a4:	687b      	ldr	r3, [r7, #4]
 80125a6:	683a      	ldr	r2, [r7, #0]
 80125a8:	639a      	str	r2, [r3, #56]	@ 0x38
    ifp->mgr = mgr;
 80125aa:	683b      	ldr	r3, [r7, #0]
 80125ac:	687a      	ldr	r2, [r7, #4]
 80125ae:	631a      	str	r2, [r3, #48]	@ 0x30
    ifp->mtu = MG_TCPIP_MTU_DEFAULT;
 80125b0:	683b      	ldr	r3, [r7, #0]
 80125b2:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80125b6:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    mgr->extraconnsize = sizeof(struct connstate);
 80125ba:	687b      	ldr	r3, [r7, #4]
 80125bc:	2238      	movs	r2, #56	@ 0x38
 80125be:	63da      	str	r2, [r3, #60]	@ 0x3c
    if (ifp->ip == 0) ifp->enable_dhcp_client = true;
 80125c0:	683b      	ldr	r3, [r7, #0]
 80125c2:	689b      	ldr	r3, [r3, #8]
 80125c4:	2b00      	cmp	r3, #0
 80125c6:	d102      	bne.n	80125ce <mg_tcpip_init+0x152>
 80125c8:	683b      	ldr	r3, [r7, #0]
 80125ca:	2201      	movs	r2, #1
 80125cc:	771a      	strb	r2, [r3, #28]
    memset(ifp->gwmac, 255, sizeof(ifp->gwmac));  // Set best-effort to bcast
 80125ce:	683b      	ldr	r3, [r7, #0]
 80125d0:	3352      	adds	r3, #82	@ 0x52
 80125d2:	2206      	movs	r2, #6
 80125d4:	21ff      	movs	r1, #255	@ 0xff
 80125d6:	4618      	mov	r0, r3
 80125d8:	f015 f876 	bl	80276c8 <memset>
    mg_random(&ifp->eport, sizeof(ifp->eport));   // Random from 0 to 65535
 80125dc:	683b      	ldr	r3, [r7, #0]
 80125de:	3370      	adds	r3, #112	@ 0x70
 80125e0:	2102      	movs	r1, #2
 80125e2:	4618      	mov	r0, r3
 80125e4:	f7ee fa86 	bl	8000af4 <mg_random>
    ifp->eport |= MG_EPHEMERAL_PORT_BASE;         // Random from
 80125e8:	683b      	ldr	r3, [r7, #0]
 80125ea:	f8b3 2070 	ldrh.w	r2, [r3, #112]	@ 0x70
 80125ee:	4b17      	ldr	r3, [pc, #92]	@ (801264c <mg_tcpip_init+0x1d0>)
 80125f0:	4313      	orrs	r3, r2
 80125f2:	b29a      	uxth	r2, r3
 80125f4:	683b      	ldr	r3, [r7, #0]
 80125f6:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
                                           // MG_EPHEMERAL_PORT_BASE to 65535
    if (ifp->tx.buf == NULL || ifp->recv_queue.buf == NULL) MG_ERROR(("OOM"));
 80125fa:	683b      	ldr	r3, [r7, #0]
 80125fc:	695b      	ldr	r3, [r3, #20]
 80125fe:	2b00      	cmp	r3, #0
 8012600:	d003      	beq.n	801260a <mg_tcpip_init+0x18e>
 8012602:	683b      	ldr	r3, [r7, #0]
 8012604:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012606:	2b00      	cmp	r3, #0
 8012608:	d10e      	bne.n	8012628 <mg_tcpip_init+0x1ac>
 801260a:	4b09      	ldr	r3, [pc, #36]	@ (8012630 <mg_tcpip_init+0x1b4>)
 801260c:	681b      	ldr	r3, [r3, #0]
 801260e:	2b00      	cmp	r3, #0
 8012610:	dd0a      	ble.n	8012628 <mg_tcpip_init+0x1ac>
 8012612:	4b08      	ldr	r3, [pc, #32]	@ (8012634 <mg_tcpip_init+0x1b8>)
 8012614:	f241 428c 	movw	r2, #5260	@ 0x148c
 8012618:	4907      	ldr	r1, [pc, #28]	@ (8012638 <mg_tcpip_init+0x1bc>)
 801261a:	2001      	movs	r0, #1
 801261c:	f7fc f942 	bl	800e8a4 <mg_log_prefix>
 8012620:	480b      	ldr	r0, [pc, #44]	@ (8012650 <mg_tcpip_init+0x1d4>)
 8012622:	f7fc f98f 	bl	800e944 <mg_log>
  }
}
 8012626:	e7ff      	b.n	8012628 <mg_tcpip_init+0x1ac>
 8012628:	bf00      	nop
 801262a:	3710      	adds	r7, #16
 801262c:	46bd      	mov	sp, r7
 801262e:	bd80      	pop	{r7, pc}
 8012630:	24000258 	.word	0x24000258
 8012634:	0802d970 	.word	0x0802d970
 8012638:	08029c3c 	.word	0x08029c3c
 801263c:	08013399 	.word	0x08013399
 8012640:	0802b1b8 	.word	0x0802b1b8
 8012644:	0802b1dc 	.word	0x0802b1dc
 8012648:	0802b1e0 	.word	0x0802b1e0
 801264c:	ffff8000 	.word	0xffff8000
 8012650:	0802abf8 	.word	0x0802abf8

08012654 <send_syn>:
void mg_tcpip_free(struct mg_tcpip_if *ifp) {
  free(ifp->recv_queue.buf);
  free(ifp->tx.buf);
}

static void send_syn(struct mg_connection *c) {
 8012654:	b5b0      	push	{r4, r5, r7, lr}
 8012656:	b08c      	sub	sp, #48	@ 0x30
 8012658:	af06      	add	r7, sp, #24
 801265a:	6078      	str	r0, [r7, #4]
  struct connstate *s = (struct connstate *) (c + 1);
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	33b0      	adds	r3, #176	@ 0xb0
 8012660:	617b      	str	r3, [r7, #20]
  uint32_t isn = mg_htonl((uint32_t) mg_ntohs(c->loc.port));
 8012662:	687b      	ldr	r3, [r7, #4]
 8012664:	8b1b      	ldrh	r3, [r3, #24]
 8012666:	4618      	mov	r0, r3
 8012668:	f00f fbb6 	bl	8021dd8 <mg_ntohs>
 801266c:	4603      	mov	r3, r0
 801266e:	4618      	mov	r0, r3
 8012670:	f00f fbc9 	bl	8021e06 <mg_ntohl>
 8012674:	6138      	str	r0, [r7, #16]
  uint32_t rem_ip;
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 8012676:	687b      	ldr	r3, [r7, #4]
 8012678:	331c      	adds	r3, #28
 801267a:	681b      	ldr	r3, [r3, #0]
 801267c:	60fb      	str	r3, [r7, #12]
  tx_tcp(c->mgr->ifp, s->mac, rem_ip, TH_SYN, c->loc.port, c->rem.port, isn, 0,
 801267e:	687b      	ldr	r3, [r7, #4]
 8012680:	685b      	ldr	r3, [r3, #4]
 8012682:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8012684:	697b      	ldr	r3, [r7, #20]
 8012686:	f103 041a 	add.w	r4, r3, #26
 801268a:	68fd      	ldr	r5, [r7, #12]
 801268c:	687b      	ldr	r3, [r7, #4]
 801268e:	8b1b      	ldrh	r3, [r3, #24]
 8012690:	687a      	ldr	r2, [r7, #4]
 8012692:	8d92      	ldrh	r2, [r2, #44]	@ 0x2c
 8012694:	2100      	movs	r1, #0
 8012696:	9105      	str	r1, [sp, #20]
 8012698:	2100      	movs	r1, #0
 801269a:	9104      	str	r1, [sp, #16]
 801269c:	2100      	movs	r1, #0
 801269e:	9103      	str	r1, [sp, #12]
 80126a0:	6939      	ldr	r1, [r7, #16]
 80126a2:	9102      	str	r1, [sp, #8]
 80126a4:	9201      	str	r2, [sp, #4]
 80126a6:	9300      	str	r3, [sp, #0]
 80126a8:	2302      	movs	r3, #2
 80126aa:	462a      	mov	r2, r5
 80126ac:	4621      	mov	r1, r4
 80126ae:	f7fe fa53 	bl	8010b58 <tx_tcp>
         NULL, 0);
}
 80126b2:	bf00      	nop
 80126b4:	3718      	adds	r7, #24
 80126b6:	46bd      	mov	sp, r7
 80126b8:	bdb0      	pop	{r4, r5, r7, pc}

080126ba <mac_resolved>:

static void mac_resolved(struct mg_connection *c) {
 80126ba:	b580      	push	{r7, lr}
 80126bc:	b082      	sub	sp, #8
 80126be:	af00      	add	r7, sp, #0
 80126c0:	6078      	str	r0, [r7, #4]
  if (c->is_udp) {
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 80126c8:	f003 0301 	and.w	r3, r3, #1
 80126cc:	b2db      	uxtb	r3, r3
 80126ce:	2b00      	cmp	r3, #0
 80126d0:	d00c      	beq.n	80126ec <mac_resolved+0x32>
    c->is_connecting = 0;
 80126d2:	687a      	ldr	r2, [r7, #4]
 80126d4:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 80126d8:	f023 0320 	bic.w	r3, r3, #32
 80126dc:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
    mg_call(c, MG_EV_CONNECT, NULL);
 80126e0:	2200      	movs	r2, #0
 80126e2:	2104      	movs	r1, #4
 80126e4:	6878      	ldr	r0, [r7, #4]
 80126e6:	f7f6 fa45 	bl	8008b74 <mg_call>
  } else {
    send_syn(c);
    settmout(c, MIP_TTYPE_SYN);
  }
}
 80126ea:	e006      	b.n	80126fa <mac_resolved+0x40>
    send_syn(c);
 80126ec:	6878      	ldr	r0, [r7, #4]
 80126ee:	f7ff ffb1 	bl	8012654 <send_syn>
    settmout(c, MIP_TTYPE_SYN);
 80126f2:	2103      	movs	r1, #3
 80126f4:	6878      	ldr	r0, [r7, #4]
 80126f6:	f7fc ffdf 	bl	800f6b8 <settmout>
}
 80126fa:	bf00      	nop
 80126fc:	3708      	adds	r7, #8
 80126fe:	46bd      	mov	sp, r7
 8012700:	bd80      	pop	{r7, pc}
	...

08012704 <ip4_mcastmac>:

static void ip4_mcastmac(uint8_t *mac, uint32_t *ip) {
 8012704:	b580      	push	{r7, lr}
 8012706:	b084      	sub	sp, #16
 8012708:	af00      	add	r7, sp, #0
 801270a:	6078      	str	r0, [r7, #4]
 801270c:	6039      	str	r1, [r7, #0]
  uint8_t mcastp[3] = {0x01, 0x00, 0x5E};  // multicast group MAC
 801270e:	4a13      	ldr	r2, [pc, #76]	@ (801275c <ip4_mcastmac+0x58>)
 8012710:	f107 030c 	add.w	r3, r7, #12
 8012714:	6812      	ldr	r2, [r2, #0]
 8012716:	4611      	mov	r1, r2
 8012718:	8019      	strh	r1, [r3, #0]
 801271a:	3302      	adds	r3, #2
 801271c:	0c12      	lsrs	r2, r2, #16
 801271e:	701a      	strb	r2, [r3, #0]
  memcpy(mac, mcastp, 3);
 8012720:	687b      	ldr	r3, [r7, #4]
 8012722:	461a      	mov	r2, r3
 8012724:	f107 030c 	add.w	r3, r7, #12
 8012728:	8819      	ldrh	r1, [r3, #0]
 801272a:	789b      	ldrb	r3, [r3, #2]
 801272c:	8011      	strh	r1, [r2, #0]
 801272e:	7093      	strb	r3, [r2, #2]
  memcpy(mac + 3, ((uint8_t *) ip) + 1, 3);  // 23 LSb
 8012730:	687b      	ldr	r3, [r7, #4]
 8012732:	1cd8      	adds	r0, r3, #3
 8012734:	683b      	ldr	r3, [r7, #0]
 8012736:	3301      	adds	r3, #1
 8012738:	2203      	movs	r2, #3
 801273a:	4619      	mov	r1, r3
 801273c:	f015 f8fd 	bl	802793a <memcpy>
  mac[3] &= 0x7F;
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	3303      	adds	r3, #3
 8012744:	781a      	ldrb	r2, [r3, #0]
 8012746:	687b      	ldr	r3, [r7, #4]
 8012748:	3303      	adds	r3, #3
 801274a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 801274e:	b2d2      	uxtb	r2, r2
 8012750:	701a      	strb	r2, [r3, #0]
}
 8012752:	bf00      	nop
 8012754:	3710      	adds	r7, #16
 8012756:	46bd      	mov	sp, r7
 8012758:	bd80      	pop	{r7, pc}
 801275a:	bf00      	nop
 801275c:	0802b1f4 	.word	0x0802b1f4

08012760 <mg_connect_resolved>:

void mg_connect_resolved(struct mg_connection *c) {
 8012760:	b580      	push	{r7, lr}
 8012762:	b08a      	sub	sp, #40	@ 0x28
 8012764:	af02      	add	r7, sp, #8
 8012766:	6078      	str	r0, [r7, #4]
  struct mg_tcpip_if *ifp = c->mgr->ifp;
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	685b      	ldr	r3, [r3, #4]
 801276c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801276e:	61fb      	str	r3, [r7, #28]
  uint32_t rem_ip;
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 8012770:	687b      	ldr	r3, [r7, #4]
 8012772:	331c      	adds	r3, #28
 8012774:	681b      	ldr	r3, [r3, #0]
 8012776:	60fb      	str	r3, [r7, #12]
  c->is_resolving = 0;
 8012778:	687a      	ldr	r2, [r7, #4]
 801277a:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 801277e:	f023 0308 	bic.w	r3, r3, #8
 8012782:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
  if (ifp->eport < MG_EPHEMERAL_PORT_BASE) ifp->eport = MG_EPHEMERAL_PORT_BASE;
 8012786:	69fb      	ldr	r3, [r7, #28]
 8012788:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 801278c:	b21b      	sxth	r3, r3
 801278e:	2b00      	cmp	r3, #0
 8012790:	db04      	blt.n	801279c <mg_connect_resolved+0x3c>
 8012792:	69fb      	ldr	r3, [r7, #28]
 8012794:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8012798:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  memcpy(c->loc.ip, &ifp->ip, sizeof(uint32_t));
 801279c:	687b      	ldr	r3, [r7, #4]
 801279e:	3308      	adds	r3, #8
 80127a0:	69fa      	ldr	r2, [r7, #28]
 80127a2:	3208      	adds	r2, #8
 80127a4:	6812      	ldr	r2, [r2, #0]
 80127a6:	601a      	str	r2, [r3, #0]
  c->loc.port = mg_htons(ifp->eport++);
 80127a8:	69fb      	ldr	r3, [r7, #28]
 80127aa:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 80127ae:	1c5a      	adds	r2, r3, #1
 80127b0:	b291      	uxth	r1, r2
 80127b2:	69fa      	ldr	r2, [r7, #28]
 80127b4:	f8a2 1070 	strh.w	r1, [r2, #112]	@ 0x70
 80127b8:	4618      	mov	r0, r3
 80127ba:	f00f fb0d 	bl	8021dd8 <mg_ntohs>
 80127be:	4603      	mov	r3, r0
 80127c0:	461a      	mov	r2, r3
 80127c2:	687b      	ldr	r3, [r7, #4]
 80127c4:	831a      	strh	r2, [r3, #24]
  MG_DEBUG(("%lu %M -> %M", c->id, mg_print_ip_port, &c->loc, mg_print_ip_port,
 80127c6:	4b54      	ldr	r3, [pc, #336]	@ (8012918 <mg_connect_resolved+0x1b8>)
 80127c8:	681b      	ldr	r3, [r3, #0]
 80127ca:	2b02      	cmp	r3, #2
 80127cc:	dd15      	ble.n	80127fa <mg_connect_resolved+0x9a>
 80127ce:	4b53      	ldr	r3, [pc, #332]	@ (801291c <mg_connect_resolved+0x1bc>)
 80127d0:	f241 42b7 	movw	r2, #5303	@ 0x14b7
 80127d4:	4952      	ldr	r1, [pc, #328]	@ (8012920 <mg_connect_resolved+0x1c0>)
 80127d6:	2003      	movs	r0, #3
 80127d8:	f7fc f864 	bl	800e8a4 <mg_log_prefix>
 80127dc:	687b      	ldr	r3, [r7, #4]
 80127de:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80127e0:	687b      	ldr	r3, [r7, #4]
 80127e2:	f103 0208 	add.w	r2, r3, #8
 80127e6:	687b      	ldr	r3, [r7, #4]
 80127e8:	331c      	adds	r3, #28
 80127ea:	9301      	str	r3, [sp, #4]
 80127ec:	4b4d      	ldr	r3, [pc, #308]	@ (8012924 <mg_connect_resolved+0x1c4>)
 80127ee:	9300      	str	r3, [sp, #0]
 80127f0:	4613      	mov	r3, r2
 80127f2:	4a4c      	ldr	r2, [pc, #304]	@ (8012924 <mg_connect_resolved+0x1c4>)
 80127f4:	484c      	ldr	r0, [pc, #304]	@ (8012928 <mg_connect_resolved+0x1c8>)
 80127f6:	f7fc f8a5 	bl	800e944 <mg_log>
            &c->rem));
  mg_call(c, MG_EV_RESOLVE, NULL);
 80127fa:	2200      	movs	r2, #0
 80127fc:	2103      	movs	r1, #3
 80127fe:	6878      	ldr	r0, [r7, #4]
 8012800:	f7f6 f9b8 	bl	8008b74 <mg_call>
  c->is_connecting = 1;
 8012804:	687a      	ldr	r2, [r7, #4]
 8012806:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 801280a:	f043 0320 	orr.w	r3, r3, #32
 801280e:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
  if (c->is_udp && (rem_ip == 0xffffffff || rem_ip == (ifp->ip | ~ifp->mask))) {
 8012812:	687b      	ldr	r3, [r7, #4]
 8012814:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8012818:	f003 0301 	and.w	r3, r3, #1
 801281c:	b2db      	uxtb	r3, r3
 801281e:	2b00      	cmp	r3, #0
 8012820:	d01a      	beq.n	8012858 <mg_connect_resolved+0xf8>
 8012822:	68fb      	ldr	r3, [r7, #12]
 8012824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012828:	d008      	beq.n	801283c <mg_connect_resolved+0xdc>
 801282a:	69fb      	ldr	r3, [r7, #28]
 801282c:	689a      	ldr	r2, [r3, #8]
 801282e:	69fb      	ldr	r3, [r7, #28]
 8012830:	68db      	ldr	r3, [r3, #12]
 8012832:	43db      	mvns	r3, r3
 8012834:	431a      	orrs	r2, r3
 8012836:	68fb      	ldr	r3, [r7, #12]
 8012838:	429a      	cmp	r2, r3
 801283a:	d10d      	bne.n	8012858 <mg_connect_resolved+0xf8>
    struct connstate *s = (struct connstate *) (c + 1);
 801283c:	687b      	ldr	r3, [r7, #4]
 801283e:	33b0      	adds	r3, #176	@ 0xb0
 8012840:	61bb      	str	r3, [r7, #24]
    memset(s->mac, 0xFF, sizeof(s->mac));  // global or local broadcast
 8012842:	69bb      	ldr	r3, [r7, #24]
 8012844:	331a      	adds	r3, #26
 8012846:	2206      	movs	r2, #6
 8012848:	21ff      	movs	r1, #255	@ 0xff
 801284a:	4618      	mov	r0, r3
 801284c:	f014 ff3c 	bl	80276c8 <memset>
    mac_resolved(c);
 8012850:	6878      	ldr	r0, [r7, #4]
 8012852:	f7ff ff32 	bl	80126ba <mac_resolved>
  if (c->is_udp && (rem_ip == 0xffffffff || rem_ip == (ifp->ip | ~ifp->mask))) {
 8012856:	e05a      	b.n	801290e <mg_connect_resolved+0x1ae>
  } else if (ifp->ip && ((rem_ip & ifp->mask) == (ifp->ip & ifp->mask)) &&
 8012858:	69fb      	ldr	r3, [r7, #28]
 801285a:	689b      	ldr	r3, [r3, #8]
 801285c:	2b00      	cmp	r3, #0
 801285e:	d030      	beq.n	80128c2 <mg_connect_resolved+0x162>
 8012860:	69fb      	ldr	r3, [r7, #28]
 8012862:	689a      	ldr	r2, [r3, #8]
 8012864:	68fb      	ldr	r3, [r7, #12]
 8012866:	405a      	eors	r2, r3
 8012868:	69fb      	ldr	r3, [r7, #28]
 801286a:	68db      	ldr	r3, [r3, #12]
 801286c:	4013      	ands	r3, r2
 801286e:	2b00      	cmp	r3, #0
 8012870:	d127      	bne.n	80128c2 <mg_connect_resolved+0x162>
             rem_ip != ifp->gw) {  // skip if gw (onstatechange -> READY -> ARP)
 8012872:	69fb      	ldr	r3, [r7, #28]
 8012874:	691a      	ldr	r2, [r3, #16]
 8012876:	68fb      	ldr	r3, [r7, #12]
  } else if (ifp->ip && ((rem_ip & ifp->mask) == (ifp->ip & ifp->mask)) &&
 8012878:	429a      	cmp	r2, r3
 801287a:	d022      	beq.n	80128c2 <mg_connect_resolved+0x162>
    // If we're in the same LAN, fire an ARP lookup.
    MG_DEBUG(("%lu ARP lookup...", c->id));
 801287c:	4b26      	ldr	r3, [pc, #152]	@ (8012918 <mg_connect_resolved+0x1b8>)
 801287e:	681b      	ldr	r3, [r3, #0]
 8012880:	2b02      	cmp	r3, #2
 8012882:	dd0c      	ble.n	801289e <mg_connect_resolved+0x13e>
 8012884:	4b25      	ldr	r3, [pc, #148]	@ (801291c <mg_connect_resolved+0x1bc>)
 8012886:	f241 42c2 	movw	r2, #5314	@ 0x14c2
 801288a:	4925      	ldr	r1, [pc, #148]	@ (8012920 <mg_connect_resolved+0x1c0>)
 801288c:	2003      	movs	r0, #3
 801288e:	f7fc f809 	bl	800e8a4 <mg_log_prefix>
 8012892:	687b      	ldr	r3, [r7, #4]
 8012894:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012896:	4619      	mov	r1, r3
 8012898:	4824      	ldr	r0, [pc, #144]	@ (801292c <mg_connect_resolved+0x1cc>)
 801289a:	f7fc f853 	bl	800e944 <mg_log>
    mg_tcpip_arp_request(ifp, rem_ip, NULL);
 801289e:	68fb      	ldr	r3, [r7, #12]
 80128a0:	2200      	movs	r2, #0
 80128a2:	4619      	mov	r1, r3
 80128a4:	69f8      	ldr	r0, [r7, #28]
 80128a6:	f7fc ff87 	bl	800f7b8 <mg_tcpip_arp_request>
    settmout(c, MIP_TTYPE_ARP);
 80128aa:	2102      	movs	r1, #2
 80128ac:	6878      	ldr	r0, [r7, #4]
 80128ae:	f7fc ff03 	bl	800f6b8 <settmout>
    c->is_arplooking = 1;
 80128b2:	687a      	ldr	r2, [r7, #4]
 80128b4:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 80128b8:	f043 0310 	orr.w	r3, r3, #16
 80128bc:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
 80128c0:	e025      	b.n	801290e <mg_connect_resolved+0x1ae>
  } else if ((*((uint8_t *) &rem_ip) & 0xE0) == 0xE0) {
 80128c2:	f107 030c 	add.w	r3, r7, #12
 80128c6:	781b      	ldrb	r3, [r3, #0]
 80128c8:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 80128cc:	2be0      	cmp	r3, #224	@ 0xe0
 80128ce:	d10e      	bne.n	80128ee <mg_connect_resolved+0x18e>
    struct connstate *s = (struct connstate *) (c + 1);  // 224 to 239, E0 to EF
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	33b0      	adds	r3, #176	@ 0xb0
 80128d4:	613b      	str	r3, [r7, #16]
    ip4_mcastmac(s->mac, &rem_ip);                       // multicast group
 80128d6:	693b      	ldr	r3, [r7, #16]
 80128d8:	331a      	adds	r3, #26
 80128da:	f107 020c 	add.w	r2, r7, #12
 80128de:	4611      	mov	r1, r2
 80128e0:	4618      	mov	r0, r3
 80128e2:	f7ff ff0f 	bl	8012704 <ip4_mcastmac>
    mac_resolved(c);
 80128e6:	6878      	ldr	r0, [r7, #4]
 80128e8:	f7ff fee7 	bl	80126ba <mac_resolved>
  } else {
    struct connstate *s = (struct connstate *) (c + 1);
    memcpy(s->mac, ifp->gwmac, sizeof(ifp->gwmac));
    mac_resolved(c);
  }
}
 80128ec:	e00f      	b.n	801290e <mg_connect_resolved+0x1ae>
    struct connstate *s = (struct connstate *) (c + 1);
 80128ee:	687b      	ldr	r3, [r7, #4]
 80128f0:	33b0      	adds	r3, #176	@ 0xb0
 80128f2:	617b      	str	r3, [r7, #20]
    memcpy(s->mac, ifp->gwmac, sizeof(ifp->gwmac));
 80128f4:	697b      	ldr	r3, [r7, #20]
 80128f6:	f103 001a 	add.w	r0, r3, #26
 80128fa:	69fb      	ldr	r3, [r7, #28]
 80128fc:	3352      	adds	r3, #82	@ 0x52
 80128fe:	2206      	movs	r2, #6
 8012900:	4619      	mov	r1, r3
 8012902:	f015 f81a 	bl	802793a <memcpy>
    mac_resolved(c);
 8012906:	6878      	ldr	r0, [r7, #4]
 8012908:	f7ff fed7 	bl	80126ba <mac_resolved>
}
 801290c:	e7ff      	b.n	801290e <mg_connect_resolved+0x1ae>
 801290e:	bf00      	nop
 8012910:	3720      	adds	r7, #32
 8012912:	46bd      	mov	sp, r7
 8012914:	bd80      	pop	{r7, pc}
 8012916:	bf00      	nop
 8012918:	24000258 	.word	0x24000258
 801291c:	0802d980 	.word	0x0802d980
 8012920:	08029c3c 	.word	0x08029c3c
 8012924:	0801334d 	.word	0x0801334d
 8012928:	0802b1f8 	.word	0x0802b1f8
 801292c:	0802b208 	.word	0x0802b208

08012930 <mg_open_listener>:

bool mg_open_listener(struct mg_connection *c, const char *url) {
 8012930:	b580      	push	{r7, lr}
 8012932:	b084      	sub	sp, #16
 8012934:	af00      	add	r7, sp, #0
 8012936:	6078      	str	r0, [r7, #4]
 8012938:	6039      	str	r1, [r7, #0]
  c->loc.port = mg_htons(mg_url_port(url));
 801293a:	6838      	ldr	r0, [r7, #0]
 801293c:	f00f f908 	bl	8021b50 <mg_url_port>
 8012940:	4603      	mov	r3, r0
 8012942:	4618      	mov	r0, r3
 8012944:	f00f fa48 	bl	8021dd8 <mg_ntohs>
 8012948:	4603      	mov	r3, r0
 801294a:	461a      	mov	r2, r3
 801294c:	687b      	ldr	r3, [r7, #4]
 801294e:	831a      	strh	r2, [r3, #24]
  if (!mg_aton(mg_url_host(url), &c->loc)) {
 8012950:	f107 0308 	add.w	r3, r7, #8
 8012954:	6839      	ldr	r1, [r7, #0]
 8012956:	4618      	mov	r0, r3
 8012958:	f00f f8c7 	bl	8021aea <mg_url_host>
 801295c:	687b      	ldr	r3, [r7, #4]
 801295e:	3308      	adds	r3, #8
 8012960:	461a      	mov	r2, r3
 8012962:	f107 0308 	add.w	r3, r7, #8
 8012966:	e893 0003 	ldmia.w	r3, {r0, r1}
 801296a:	f7fc fb4a 	bl	800f002 <mg_aton>
 801296e:	4603      	mov	r3, r0
 8012970:	f083 0301 	eor.w	r3, r3, #1
 8012974:	b2db      	uxtb	r3, r3
 8012976:	2b00      	cmp	r3, #0
 8012978:	d010      	beq.n	801299c <mg_open_listener+0x6c>
    MG_ERROR(("invalid listening URL: %s", url));
 801297a:	4b0b      	ldr	r3, [pc, #44]	@ (80129a8 <mg_open_listener+0x78>)
 801297c:	681b      	ldr	r3, [r3, #0]
 801297e:	2b00      	cmp	r3, #0
 8012980:	dd0a      	ble.n	8012998 <mg_open_listener+0x68>
 8012982:	4b0a      	ldr	r3, [pc, #40]	@ (80129ac <mg_open_listener+0x7c>)
 8012984:	f241 42d4 	movw	r2, #5332	@ 0x14d4
 8012988:	4909      	ldr	r1, [pc, #36]	@ (80129b0 <mg_open_listener+0x80>)
 801298a:	2001      	movs	r0, #1
 801298c:	f7fb ff8a 	bl	800e8a4 <mg_log_prefix>
 8012990:	6839      	ldr	r1, [r7, #0]
 8012992:	4808      	ldr	r0, [pc, #32]	@ (80129b4 <mg_open_listener+0x84>)
 8012994:	f7fb ffd6 	bl	800e944 <mg_log>
    return false;
 8012998:	2300      	movs	r3, #0
 801299a:	e000      	b.n	801299e <mg_open_listener+0x6e>
  }
  return true;
 801299c:	2301      	movs	r3, #1
}
 801299e:	4618      	mov	r0, r3
 80129a0:	3710      	adds	r7, #16
 80129a2:	46bd      	mov	sp, r7
 80129a4:	bd80      	pop	{r7, pc}
 80129a6:	bf00      	nop
 80129a8:	24000258 	.word	0x24000258
 80129ac:	0802d994 	.word	0x0802d994
 80129b0:	08029c3c 	.word	0x08029c3c
 80129b4:	0802b21c 	.word	0x0802b21c

080129b8 <write_conn>:

static void write_conn(struct mg_connection *c) {
 80129b8:	b580      	push	{r7, lr}
 80129ba:	b084      	sub	sp, #16
 80129bc:	af00      	add	r7, sp, #0
 80129be:	6078      	str	r0, [r7, #4]
  long len = c->is_tls ? mg_tls_send(c, c->send.buf, c->send.len)
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80129c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80129ca:	b2db      	uxtb	r3, r3
                       : mg_io_send(c, c->send.buf, c->send.len);
 80129cc:	2b00      	cmp	r3, #0
 80129ce:	d009      	beq.n	80129e4 <write_conn+0x2c>
  long len = c->is_tls ? mg_tls_send(c, c->send.buf, c->send.len)
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 80129d4:	687b      	ldr	r3, [r7, #4]
 80129d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80129d8:	461a      	mov	r2, r3
 80129da:	6878      	ldr	r0, [r7, #4]
 80129dc:	f008 fca8 	bl	801b330 <mg_tls_send>
 80129e0:	4603      	mov	r3, r0
 80129e2:	e008      	b.n	80129f6 <write_conn+0x3e>
                       : mg_io_send(c, c->send.buf, c->send.len);
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 80129e8:	687b      	ldr	r3, [r7, #4]
 80129ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80129ec:	461a      	mov	r2, r3
 80129ee:	6878      	ldr	r0, [r7, #4]
 80129f0:	f7fe fb50 	bl	8011094 <mg_io_send>
 80129f4:	4603      	mov	r3, r0
  long len = c->is_tls ? mg_tls_send(c, c->send.buf, c->send.len)
 80129f6:	60fb      	str	r3, [r7, #12]
  if (len == MG_IO_ERR) {
 80129f8:	68fb      	ldr	r3, [r7, #12]
 80129fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80129fe:	d104      	bne.n	8012a0a <write_conn+0x52>
    mg_error(c, "tx err");
 8012a00:	490c      	ldr	r1, [pc, #48]	@ (8012a34 <write_conn+0x7c>)
 8012a02:	6878      	ldr	r0, [r7, #4]
 8012a04:	f7f6 f8d6 	bl	8008bb4 <mg_error>
  } else if (len > 0) {
    mg_iobuf_del(&c->send, 0, (size_t) len);
    mg_call(c, MG_EV_WRITE, &len);
  }
}
 8012a08:	e010      	b.n	8012a2c <write_conn+0x74>
  } else if (len > 0) {
 8012a0a:	68fb      	ldr	r3, [r7, #12]
 8012a0c:	2b00      	cmp	r3, #0
 8012a0e:	dd0d      	ble.n	8012a2c <write_conn+0x74>
    mg_iobuf_del(&c->send, 0, (size_t) len);
 8012a10:	687b      	ldr	r3, [r7, #4]
 8012a12:	3348      	adds	r3, #72	@ 0x48
 8012a14:	68fa      	ldr	r2, [r7, #12]
 8012a16:	2100      	movs	r1, #0
 8012a18:	4618      	mov	r0, r3
 8012a1a:	f7fa ff2b 	bl	800d874 <mg_iobuf_del>
    mg_call(c, MG_EV_WRITE, &len);
 8012a1e:	f107 030c 	add.w	r3, r7, #12
 8012a22:	461a      	mov	r2, r3
 8012a24:	2108      	movs	r1, #8
 8012a26:	6878      	ldr	r0, [r7, #4]
 8012a28:	f7f6 f8a4 	bl	8008b74 <mg_call>
}
 8012a2c:	bf00      	nop
 8012a2e:	3710      	adds	r7, #16
 8012a30:	46bd      	mov	sp, r7
 8012a32:	bd80      	pop	{r7, pc}
 8012a34:	0802b238 	.word	0x0802b238

08012a38 <init_closure>:

static void init_closure(struct mg_connection *c) {
 8012a38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a3c:	b08c      	sub	sp, #48	@ 0x30
 8012a3e:	af06      	add	r7, sp, #24
 8012a40:	60f8      	str	r0, [r7, #12]
  struct connstate *s = (struct connstate *) (c + 1);
 8012a42:	68fb      	ldr	r3, [r7, #12]
 8012a44:	33b0      	adds	r3, #176	@ 0xb0
 8012a46:	617b      	str	r3, [r7, #20]
  if (c->is_udp == false && c->is_listening == false &&
 8012a48:	68fb      	ldr	r3, [r7, #12]
 8012a4a:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8012a4e:	f003 0301 	and.w	r3, r3, #1
 8012a52:	b2db      	uxtb	r3, r3
 8012a54:	2b00      	cmp	r3, #0
 8012a56:	d13e      	bne.n	8012ad6 <init_closure+0x9e>
 8012a58:	68fb      	ldr	r3, [r7, #12]
 8012a5a:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8012a5e:	f003 0301 	and.w	r3, r3, #1
 8012a62:	b2db      	uxtb	r3, r3
 8012a64:	2b00      	cmp	r3, #0
 8012a66:	d136      	bne.n	8012ad6 <init_closure+0x9e>
      c->is_connecting == false) {  // For TCP conns,
 8012a68:	68fb      	ldr	r3, [r7, #12]
 8012a6a:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8012a6e:	f003 0320 	and.w	r3, r3, #32
 8012a72:	b2db      	uxtb	r3, r3
  if (c->is_udp == false && c->is_listening == false &&
 8012a74:	2b00      	cmp	r3, #0
 8012a76:	d12e      	bne.n	8012ad6 <init_closure+0x9e>
    uint32_t rem_ip;
    memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 8012a78:	68fb      	ldr	r3, [r7, #12]
 8012a7a:	331c      	adds	r3, #28
 8012a7c:	681b      	ldr	r3, [r3, #0]
 8012a7e:	613b      	str	r3, [r7, #16]
    tx_tcp(c->mgr->ifp, s->mac, rem_ip, TH_FIN | TH_ACK, c->loc.port,
 8012a80:	68fb      	ldr	r3, [r7, #12]
 8012a82:	685b      	ldr	r3, [r3, #4]
 8012a84:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
 8012a86:	697b      	ldr	r3, [r7, #20]
 8012a88:	f103 081a 	add.w	r8, r3, #26
 8012a8c:	693b      	ldr	r3, [r7, #16]
 8012a8e:	60bb      	str	r3, [r7, #8]
 8012a90:	68fb      	ldr	r3, [r7, #12]
 8012a92:	8b1c      	ldrh	r4, [r3, #24]
 8012a94:	68fb      	ldr	r3, [r7, #12]
 8012a96:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
 8012a98:	697b      	ldr	r3, [r7, #20]
 8012a9a:	681b      	ldr	r3, [r3, #0]
 8012a9c:	4618      	mov	r0, r3
 8012a9e:	f00f f9b2 	bl	8021e06 <mg_ntohl>
 8012aa2:	6078      	str	r0, [r7, #4]
 8012aa4:	697b      	ldr	r3, [r7, #20]
 8012aa6:	685b      	ldr	r3, [r3, #4]
 8012aa8:	4618      	mov	r0, r3
 8012aaa:	f00f f9ac 	bl	8021e06 <mg_ntohl>
 8012aae:	4603      	mov	r3, r0
 8012ab0:	2200      	movs	r2, #0
 8012ab2:	9205      	str	r2, [sp, #20]
 8012ab4:	2200      	movs	r2, #0
 8012ab6:	9204      	str	r2, [sp, #16]
 8012ab8:	9303      	str	r3, [sp, #12]
 8012aba:	6879      	ldr	r1, [r7, #4]
 8012abc:	9102      	str	r1, [sp, #8]
 8012abe:	9501      	str	r5, [sp, #4]
 8012ac0:	9400      	str	r4, [sp, #0]
 8012ac2:	2311      	movs	r3, #17
 8012ac4:	68ba      	ldr	r2, [r7, #8]
 8012ac6:	4641      	mov	r1, r8
 8012ac8:	4630      	mov	r0, r6
 8012aca:	f7fe f845 	bl	8010b58 <tx_tcp>
           c->rem.port, mg_htonl(s->seq), mg_htonl(s->ack), NULL, 0);
    settmout(c, MIP_TTYPE_FIN);
 8012ace:	2104      	movs	r1, #4
 8012ad0:	68f8      	ldr	r0, [r7, #12]
 8012ad2:	f7fc fdf1 	bl	800f6b8 <settmout>
  }
}
 8012ad6:	bf00      	nop
 8012ad8:	3718      	adds	r7, #24
 8012ada:	46bd      	mov	sp, r7
 8012adc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012ae0 <close_conn>:

static void close_conn(struct mg_connection *c) {
 8012ae0:	b580      	push	{r7, lr}
 8012ae2:	b084      	sub	sp, #16
 8012ae4:	af00      	add	r7, sp, #0
 8012ae6:	6078      	str	r0, [r7, #4]
  struct connstate *s = (struct connstate *) (c + 1);
 8012ae8:	687b      	ldr	r3, [r7, #4]
 8012aea:	33b0      	adds	r3, #176	@ 0xb0
 8012aec:	60fb      	str	r3, [r7, #12]
  mg_iobuf_free(&s->raw);  // For TLS connections, release raw data
 8012aee:	68fb      	ldr	r3, [r7, #12]
 8012af0:	3324      	adds	r3, #36	@ 0x24
 8012af2:	4618      	mov	r0, r3
 8012af4:	f7fa ff09 	bl	800d90a <mg_iobuf_free>
  mg_close_conn(c);
 8012af8:	6878      	ldr	r0, [r7, #4]
 8012afa:	f7fc fae9 	bl	800f0d0 <mg_close_conn>
}
 8012afe:	bf00      	nop
 8012b00:	3710      	adds	r7, #16
 8012b02:	46bd      	mov	sp, r7
 8012b04:	bd80      	pop	{r7, pc}

08012b06 <can_write>:

static bool can_write(struct mg_connection *c) {
 8012b06:	b480      	push	{r7}
 8012b08:	b083      	sub	sp, #12
 8012b0a:	af00      	add	r7, sp, #0
 8012b0c:	6078      	str	r0, [r7, #4]
  return c->is_connecting == 0 && c->is_resolving == 0 && c->send.len > 0 &&
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8012b14:	f003 0320 	and.w	r3, r3, #32
 8012b18:	b2db      	uxtb	r3, r3
         c->is_tls_hs == 0 && c->is_arplooking == 0;
 8012b1a:	2b00      	cmp	r3, #0
 8012b1c:	d11d      	bne.n	8012b5a <can_write+0x54>
  return c->is_connecting == 0 && c->is_resolving == 0 && c->send.len > 0 &&
 8012b1e:	687b      	ldr	r3, [r7, #4]
 8012b20:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8012b24:	f003 0308 	and.w	r3, r3, #8
 8012b28:	b2db      	uxtb	r3, r3
 8012b2a:	2b00      	cmp	r3, #0
 8012b2c:	d115      	bne.n	8012b5a <can_write+0x54>
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012b32:	2b00      	cmp	r3, #0
 8012b34:	d011      	beq.n	8012b5a <can_write+0x54>
         c->is_tls_hs == 0 && c->is_arplooking == 0;
 8012b36:	687b      	ldr	r3, [r7, #4]
 8012b38:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8012b3c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8012b40:	b2db      	uxtb	r3, r3
  return c->is_connecting == 0 && c->is_resolving == 0 && c->send.len > 0 &&
 8012b42:	2b00      	cmp	r3, #0
 8012b44:	d109      	bne.n	8012b5a <can_write+0x54>
         c->is_tls_hs == 0 && c->is_arplooking == 0;
 8012b46:	687b      	ldr	r3, [r7, #4]
 8012b48:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8012b4c:	f003 0310 	and.w	r3, r3, #16
 8012b50:	b2db      	uxtb	r3, r3
 8012b52:	2b00      	cmp	r3, #0
 8012b54:	d101      	bne.n	8012b5a <can_write+0x54>
 8012b56:	2301      	movs	r3, #1
 8012b58:	e000      	b.n	8012b5c <can_write+0x56>
 8012b5a:	2300      	movs	r3, #0
 8012b5c:	f003 0301 	and.w	r3, r3, #1
 8012b60:	b2db      	uxtb	r3, r3
}
 8012b62:	4618      	mov	r0, r3
 8012b64:	370c      	adds	r7, #12
 8012b66:	46bd      	mov	sp, r7
 8012b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b6c:	4770      	bx	lr
	...

08012b70 <mg_mgr_poll>:

void mg_mgr_poll(struct mg_mgr *mgr, int ms) {
 8012b70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012b74:	b091      	sub	sp, #68	@ 0x44
 8012b76:	af06      	add	r7, sp, #24
 8012b78:	60f8      	str	r0, [r7, #12]
 8012b7a:	60b9      	str	r1, [r7, #8]
  struct mg_connection *c, *tmp;
  uint64_t now = mg_millis();
 8012b7c:	f7ed ffe8 	bl	8000b50 <mg_millis>
 8012b80:	4602      	mov	r2, r0
 8012b82:	460b      	mov	r3, r1
 8012b84:	e9c7 2304 	strd	r2, r3, [r7, #16]
  mg_timer_poll(&mgr->timers, now);
 8012b88:	68fb      	ldr	r3, [r7, #12]
 8012b8a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8012b8e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8012b92:	4608      	mov	r0, r1
 8012b94:	f004 fbc2 	bl	801731c <mg_timer_poll>
  if (mgr->ifp == NULL || mgr->ifp->driver == NULL) return;
 8012b98:	68fb      	ldr	r3, [r7, #12]
 8012b9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012b9c:	2b00      	cmp	r3, #0
 8012b9e:	f000 810c 	beq.w	8012dba <mg_mgr_poll+0x24a>
 8012ba2:	68fb      	ldr	r3, [r7, #12]
 8012ba4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012ba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012ba8:	2b00      	cmp	r3, #0
 8012baa:	f000 8106 	beq.w	8012dba <mg_mgr_poll+0x24a>
  mg_tcpip_poll(mgr->ifp, now);
 8012bae:	68fb      	ldr	r3, [r7, #12]
 8012bb0:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8012bb2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8012bb6:	4608      	mov	r0, r1
 8012bb8:	f7ff f9d2 	bl	8011f60 <mg_tcpip_poll>
  for (c = mgr->conns; c != NULL; c = tmp) {
 8012bbc:	68fb      	ldr	r3, [r7, #12]
 8012bbe:	681b      	ldr	r3, [r3, #0]
 8012bc0:	627b      	str	r3, [r7, #36]	@ 0x24
 8012bc2:	e0f5      	b.n	8012db0 <mg_mgr_poll+0x240>
    tmp = c->next;
 8012bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012bc6:	681b      	ldr	r3, [r3, #0]
 8012bc8:	623b      	str	r3, [r7, #32]
    struct connstate *s = (struct connstate *) (c + 1);
 8012bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012bcc:	33b0      	adds	r3, #176	@ 0xb0
 8012bce:	61fb      	str	r3, [r7, #28]
    bool is_tls = !c->is_resolving && !c->is_arplooking && !c->is_listening &&
 8012bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012bd2:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8012bd6:	f003 0308 	and.w	r3, r3, #8
 8012bda:	b2db      	uxtb	r3, r3
 8012bdc:	2b00      	cmp	r3, #0
 8012bde:	d119      	bne.n	8012c14 <mg_mgr_poll+0xa4>
 8012be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012be2:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8012be6:	f003 0310 	and.w	r3, r3, #16
 8012bea:	b2db      	uxtb	r3, r3
 8012bec:	2b00      	cmp	r3, #0
 8012bee:	d111      	bne.n	8012c14 <mg_mgr_poll+0xa4>
 8012bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012bf2:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8012bf6:	f003 0301 	and.w	r3, r3, #1
 8012bfa:	b2db      	uxtb	r3, r3
 8012bfc:	2b00      	cmp	r3, #0
 8012bfe:	d109      	bne.n	8012c14 <mg_mgr_poll+0xa4>
                  !c->is_connecting;
 8012c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012c02:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8012c06:	f003 0320 	and.w	r3, r3, #32
 8012c0a:	b2db      	uxtb	r3, r3
    bool is_tls = !c->is_resolving && !c->is_arplooking && !c->is_listening &&
 8012c0c:	2b00      	cmp	r3, #0
 8012c0e:	d101      	bne.n	8012c14 <mg_mgr_poll+0xa4>
 8012c10:	2301      	movs	r3, #1
 8012c12:	e000      	b.n	8012c16 <mg_mgr_poll+0xa6>
 8012c14:	2300      	movs	r3, #0
 8012c16:	76fb      	strb	r3, [r7, #27]
 8012c18:	7efb      	ldrb	r3, [r7, #27]
 8012c1a:	f003 0301 	and.w	r3, r3, #1
 8012c1e:	76fb      	strb	r3, [r7, #27]
    mg_call(c, MG_EV_POLL, &now);
 8012c20:	f107 0310 	add.w	r3, r7, #16
 8012c24:	461a      	mov	r2, r3
 8012c26:	2102      	movs	r1, #2
 8012c28:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012c2a:	f7f5 ffa3 	bl	8008b74 <mg_call>
    MG_VERBOSE(("%lu .. %c%c%c%c%c %lu %lu", c->id, c->is_tls ? 'T' : 't',
 8012c2e:	4b65      	ldr	r3, [pc, #404]	@ (8012dc4 <mg_mgr_poll+0x254>)
 8012c30:	681b      	ldr	r3, [r3, #0]
 8012c32:	2b03      	cmp	r3, #3
 8012c34:	dd55      	ble.n	8012ce2 <mg_mgr_poll+0x172>
 8012c36:	4b64      	ldr	r3, [pc, #400]	@ (8012dc8 <mg_mgr_poll+0x258>)
 8012c38:	f241 5208 	movw	r2, #5384	@ 0x1508
 8012c3c:	4963      	ldr	r1, [pc, #396]	@ (8012dcc <mg_mgr_poll+0x25c>)
 8012c3e:	2004      	movs	r0, #4
 8012c40:	f7fb fe30 	bl	800e8a4 <mg_log_prefix>
 8012c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012c46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012c48:	607b      	str	r3, [r7, #4]
 8012c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012c4c:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8012c50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012c54:	b2db      	uxtb	r3, r3
 8012c56:	2b00      	cmp	r3, #0
 8012c58:	d002      	beq.n	8012c60 <mg_mgr_poll+0xf0>
 8012c5a:	f04f 0854 	mov.w	r8, #84	@ 0x54
 8012c5e:	e001      	b.n	8012c64 <mg_mgr_poll+0xf4>
 8012c60:	f04f 0874 	mov.w	r8, #116	@ 0x74
 8012c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012c66:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8012c6a:	f003 0320 	and.w	r3, r3, #32
 8012c6e:	b2db      	uxtb	r3, r3
 8012c70:	2b00      	cmp	r3, #0
 8012c72:	d002      	beq.n	8012c7a <mg_mgr_poll+0x10a>
 8012c74:	f04f 0943 	mov.w	r9, #67	@ 0x43
 8012c78:	e001      	b.n	8012c7e <mg_mgr_poll+0x10e>
 8012c7a:	f04f 0963 	mov.w	r9, #99	@ 0x63
 8012c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012c80:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8012c84:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8012c88:	b2db      	uxtb	r3, r3
 8012c8a:	2b00      	cmp	r3, #0
 8012c8c:	d001      	beq.n	8012c92 <mg_mgr_poll+0x122>
 8012c8e:	2448      	movs	r4, #72	@ 0x48
 8012c90:	e000      	b.n	8012c94 <mg_mgr_poll+0x124>
 8012c92:	2468      	movs	r4, #104	@ 0x68
 8012c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012c96:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8012c9a:	f003 0308 	and.w	r3, r3, #8
 8012c9e:	b2db      	uxtb	r3, r3
 8012ca0:	2b00      	cmp	r3, #0
 8012ca2:	d001      	beq.n	8012ca8 <mg_mgr_poll+0x138>
 8012ca4:	2552      	movs	r5, #82	@ 0x52
 8012ca6:	e000      	b.n	8012caa <mg_mgr_poll+0x13a>
 8012ca8:	2572      	movs	r5, #114	@ 0x72
 8012caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012cac:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8012cb0:	f003 0320 	and.w	r3, r3, #32
 8012cb4:	b2db      	uxtb	r3, r3
 8012cb6:	2b00      	cmp	r3, #0
 8012cb8:	d001      	beq.n	8012cbe <mg_mgr_poll+0x14e>
 8012cba:	2643      	movs	r6, #67	@ 0x43
 8012cbc:	e000      	b.n	8012cc0 <mg_mgr_poll+0x150>
 8012cbe:	2663      	movs	r6, #99	@ 0x63
 8012cc0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012cc2:	f008 fc2d 	bl	801b520 <mg_tls_pending>
 8012cc6:	4602      	mov	r2, r0
 8012cc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012cca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012ccc:	9304      	str	r3, [sp, #16]
 8012cce:	9203      	str	r2, [sp, #12]
 8012cd0:	9602      	str	r6, [sp, #8]
 8012cd2:	9501      	str	r5, [sp, #4]
 8012cd4:	9400      	str	r4, [sp, #0]
 8012cd6:	464b      	mov	r3, r9
 8012cd8:	4642      	mov	r2, r8
 8012cda:	6879      	ldr	r1, [r7, #4]
 8012cdc:	483c      	ldr	r0, [pc, #240]	@ (8012dd0 <mg_mgr_poll+0x260>)
 8012cde:	f7fb fe31 	bl	800e944 <mg_log>
                c->is_connecting ? 'C' : 'c', c->is_tls_hs ? 'H' : 'h',
                c->is_resolving ? 'R' : 'r', c->is_closing ? 'C' : 'c',
                mg_tls_pending(c), c->rtls.len));
    // order is important, TLS conn close with > 1 record in buffer (below)
    if (is_tls && (c->rtls.len > 0 || mg_tls_pending(c) > 0))
 8012ce2:	7efb      	ldrb	r3, [r7, #27]
 8012ce4:	2b00      	cmp	r3, #0
 8012ce6:	d00c      	beq.n	8012d02 <mg_mgr_poll+0x192>
 8012ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012cea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012cec:	2b00      	cmp	r3, #0
 8012cee:	d105      	bne.n	8012cfc <mg_mgr_poll+0x18c>
 8012cf0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012cf2:	f008 fc15 	bl	801b520 <mg_tls_pending>
 8012cf6:	4603      	mov	r3, r0
 8012cf8:	2b00      	cmp	r3, #0
 8012cfa:	d002      	beq.n	8012d02 <mg_mgr_poll+0x192>
      handle_tls_recv(c);
 8012cfc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012cfe:	f7fe fa4b 	bl	8011198 <handle_tls_recv>
    if (can_write(c)) write_conn(c);
 8012d02:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012d04:	f7ff feff 	bl	8012b06 <can_write>
 8012d08:	4603      	mov	r3, r0
 8012d0a:	2b00      	cmp	r3, #0
 8012d0c:	d002      	beq.n	8012d14 <mg_mgr_poll+0x1a4>
 8012d0e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012d10:	f7ff fe52 	bl	80129b8 <write_conn>
    if (is_tls && c->tls && c->send.len == 0) mg_tls_flush(c);
 8012d14:	7efb      	ldrb	r3, [r7, #27]
 8012d16:	2b00      	cmp	r3, #0
 8012d18:	d00b      	beq.n	8012d32 <mg_mgr_poll+0x1c2>
 8012d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012d1c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8012d20:	2b00      	cmp	r3, #0
 8012d22:	d006      	beq.n	8012d32 <mg_mgr_poll+0x1c2>
 8012d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012d26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012d28:	2b00      	cmp	r3, #0
 8012d2a:	d102      	bne.n	8012d32 <mg_mgr_poll+0x1c2>
 8012d2c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012d2e:	f008 fc0c 	bl	801b54a <mg_tls_flush>
    if (c->is_draining && c->send.len == 0 && s->ttype != MIP_TTYPE_FIN)
 8012d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012d34:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8012d38:	f003 0310 	and.w	r3, r3, #16
 8012d3c:	b2db      	uxtb	r3, r3
 8012d3e:	2b00      	cmp	r3, #0
 8012d40:	d00b      	beq.n	8012d5a <mg_mgr_poll+0x1ea>
 8012d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012d44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012d46:	2b00      	cmp	r3, #0
 8012d48:	d107      	bne.n	8012d5a <mg_mgr_poll+0x1ea>
 8012d4a:	69fb      	ldr	r3, [r7, #28]
 8012d4c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012d50:	2b04      	cmp	r3, #4
 8012d52:	d002      	beq.n	8012d5a <mg_mgr_poll+0x1ea>
      init_closure(c);
 8012d54:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012d56:	f7ff fe6f 	bl	8012a38 <init_closure>
    // For non-TLS, close immediately upon completing the 3-way closure
    // For TLS, handle any pending data (above) until MIP_TTYPE_FIN expires
    if (s->twclosure &&
 8012d5a:	69fb      	ldr	r3, [r7, #28]
 8012d5c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8012d60:	2b00      	cmp	r3, #0
 8012d62:	d018      	beq.n	8012d96 <mg_mgr_poll+0x226>
        (!c->is_tls || (c->rtls.len == 0 && mg_tls_pending(c) == 0)))
 8012d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012d66:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8012d6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012d6e:	b2db      	uxtb	r3, r3
    if (s->twclosure &&
 8012d70:	2b00      	cmp	r3, #0
 8012d72:	d009      	beq.n	8012d88 <mg_mgr_poll+0x218>
        (!c->is_tls || (c->rtls.len == 0 && mg_tls_pending(c) == 0)))
 8012d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012d76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012d78:	2b00      	cmp	r3, #0
 8012d7a:	d10c      	bne.n	8012d96 <mg_mgr_poll+0x226>
 8012d7c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012d7e:	f008 fbcf 	bl	801b520 <mg_tls_pending>
 8012d82:	4603      	mov	r3, r0
 8012d84:	2b00      	cmp	r3, #0
 8012d86:	d106      	bne.n	8012d96 <mg_mgr_poll+0x226>
      c->is_closing = 1;
 8012d88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012d8a:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8012d8e:	f043 0320 	orr.w	r3, r3, #32
 8012d92:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
    if (c->is_closing) close_conn(c);
 8012d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012d98:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8012d9c:	f003 0320 	and.w	r3, r3, #32
 8012da0:	b2db      	uxtb	r3, r3
 8012da2:	2b00      	cmp	r3, #0
 8012da4:	d002      	beq.n	8012dac <mg_mgr_poll+0x23c>
 8012da6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012da8:	f7ff fe9a 	bl	8012ae0 <close_conn>
  for (c = mgr->conns; c != NULL; c = tmp) {
 8012dac:	6a3b      	ldr	r3, [r7, #32]
 8012dae:	627b      	str	r3, [r7, #36]	@ 0x24
 8012db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012db2:	2b00      	cmp	r3, #0
 8012db4:	f47f af06 	bne.w	8012bc4 <mg_mgr_poll+0x54>
 8012db8:	e000      	b.n	8012dbc <mg_mgr_poll+0x24c>
  if (mgr->ifp == NULL || mgr->ifp->driver == NULL) return;
 8012dba:	bf00      	nop
  }
  (void) ms;
}
 8012dbc:	372c      	adds	r7, #44	@ 0x2c
 8012dbe:	46bd      	mov	sp, r7
 8012dc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012dc4:	24000258 	.word	0x24000258
 8012dc8:	0802d9a8 	.word	0x0802d9a8
 8012dcc:	08029c3c 	.word	0x08029c3c
 8012dd0:	0802b240 	.word	0x0802b240

08012dd4 <mg_send>:

bool mg_send(struct mg_connection *c, const void *buf, size_t len) {
 8012dd4:	b5b0      	push	{r4, r5, r7, lr}
 8012dd6:	b08c      	sub	sp, #48	@ 0x30
 8012dd8:	af04      	add	r7, sp, #16
 8012dda:	60f8      	str	r0, [r7, #12]
 8012ddc:	60b9      	str	r1, [r7, #8]
 8012dde:	607a      	str	r2, [r7, #4]
  struct mg_tcpip_if *ifp = c->mgr->ifp;
 8012de0:	68fb      	ldr	r3, [r7, #12]
 8012de2:	685b      	ldr	r3, [r3, #4]
 8012de4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012de6:	61bb      	str	r3, [r7, #24]
  bool res = false;
 8012de8:	2300      	movs	r3, #0
 8012dea:	77fb      	strb	r3, [r7, #31]
  uint32_t rem_ip;
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 8012dec:	68fb      	ldr	r3, [r7, #12]
 8012dee:	331c      	adds	r3, #28
 8012df0:	681b      	ldr	r3, [r3, #0]
 8012df2:	613b      	str	r3, [r7, #16]
  if (ifp->ip == 0 || ifp->state != MG_TCPIP_STATE_READY) {
 8012df4:	69bb      	ldr	r3, [r7, #24]
 8012df6:	689b      	ldr	r3, [r3, #8]
 8012df8:	2b00      	cmp	r3, #0
 8012dfa:	d004      	beq.n	8012e06 <mg_send+0x32>
 8012dfc:	69bb      	ldr	r3, [r7, #24]
 8012dfe:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8012e02:	2b04      	cmp	r3, #4
 8012e04:	d004      	beq.n	8012e10 <mg_send+0x3c>
    mg_error(c, "net down");
 8012e06:	4934      	ldr	r1, [pc, #208]	@ (8012ed8 <mg_send+0x104>)
 8012e08:	68f8      	ldr	r0, [r7, #12]
 8012e0a:	f7f5 fed3 	bl	8008bb4 <mg_error>
 8012e0e:	e05e      	b.n	8012ece <mg_send+0xfa>
  } else if (c->is_udp && (c->is_arplooking || c->is_resolving)) {
 8012e10:	68fb      	ldr	r3, [r7, #12]
 8012e12:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8012e16:	f003 0301 	and.w	r3, r3, #1
 8012e1a:	b2db      	uxtb	r3, r3
 8012e1c:	2b00      	cmp	r3, #0
 8012e1e:	d01e      	beq.n	8012e5e <mg_send+0x8a>
 8012e20:	68fb      	ldr	r3, [r7, #12]
 8012e22:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8012e26:	f003 0310 	and.w	r3, r3, #16
 8012e2a:	b2db      	uxtb	r3, r3
 8012e2c:	2b00      	cmp	r3, #0
 8012e2e:	d107      	bne.n	8012e40 <mg_send+0x6c>
 8012e30:	68fb      	ldr	r3, [r7, #12]
 8012e32:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8012e36:	f003 0308 	and.w	r3, r3, #8
 8012e3a:	b2db      	uxtb	r3, r3
 8012e3c:	2b00      	cmp	r3, #0
 8012e3e:	d00e      	beq.n	8012e5e <mg_send+0x8a>
    // Fail to send, no target MAC or IP
    MG_VERBOSE(("still resolving..."));
 8012e40:	4b26      	ldr	r3, [pc, #152]	@ (8012edc <mg_send+0x108>)
 8012e42:	681b      	ldr	r3, [r3, #0]
 8012e44:	2b03      	cmp	r3, #3
 8012e46:	dd42      	ble.n	8012ece <mg_send+0xfa>
 8012e48:	4b25      	ldr	r3, [pc, #148]	@ (8012ee0 <mg_send+0x10c>)
 8012e4a:	f241 5226 	movw	r2, #5414	@ 0x1526
 8012e4e:	4925      	ldr	r1, [pc, #148]	@ (8012ee4 <mg_send+0x110>)
 8012e50:	2004      	movs	r0, #4
 8012e52:	f7fb fd27 	bl	800e8a4 <mg_log_prefix>
 8012e56:	4824      	ldr	r0, [pc, #144]	@ (8012ee8 <mg_send+0x114>)
 8012e58:	f7fb fd74 	bl	800e944 <mg_log>
 8012e5c:	e037      	b.n	8012ece <mg_send+0xfa>
  } else if (c->is_udp) {
 8012e5e:	68fb      	ldr	r3, [r7, #12]
 8012e60:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8012e64:	f003 0301 	and.w	r3, r3, #1
 8012e68:	b2db      	uxtb	r3, r3
 8012e6a:	2b00      	cmp	r3, #0
 8012e6c:	d020      	beq.n	8012eb0 <mg_send+0xdc>
    struct connstate *s = (struct connstate *) (c + 1);
 8012e6e:	68fb      	ldr	r3, [r7, #12]
 8012e70:	33b0      	adds	r3, #176	@ 0xb0
 8012e72:	617b      	str	r3, [r7, #20]
    len = trim_len(c, len);  // Trimming length if necessary
 8012e74:	6879      	ldr	r1, [r7, #4]
 8012e76:	68f8      	ldr	r0, [r7, #12]
 8012e78:	f7fe f87e 	bl	8010f78 <trim_len>
 8012e7c:	6078      	str	r0, [r7, #4]
    tx_udp(ifp, s->mac, ifp->ip, c->loc.port, rem_ip, c->rem.port, buf, len);
 8012e7e:	697b      	ldr	r3, [r7, #20]
 8012e80:	f103 001a 	add.w	r0, r3, #26
 8012e84:	69bb      	ldr	r3, [r7, #24]
 8012e86:	689c      	ldr	r4, [r3, #8]
 8012e88:	68fb      	ldr	r3, [r7, #12]
 8012e8a:	8b1d      	ldrh	r5, [r3, #24]
 8012e8c:	693b      	ldr	r3, [r7, #16]
 8012e8e:	68fa      	ldr	r2, [r7, #12]
 8012e90:	8d92      	ldrh	r2, [r2, #44]	@ 0x2c
 8012e92:	6879      	ldr	r1, [r7, #4]
 8012e94:	9103      	str	r1, [sp, #12]
 8012e96:	68b9      	ldr	r1, [r7, #8]
 8012e98:	9102      	str	r1, [sp, #8]
 8012e9a:	9201      	str	r2, [sp, #4]
 8012e9c:	9300      	str	r3, [sp, #0]
 8012e9e:	462b      	mov	r3, r5
 8012ea0:	4622      	mov	r2, r4
 8012ea2:	4601      	mov	r1, r0
 8012ea4:	69b8      	ldr	r0, [r7, #24]
 8012ea6:	f7fc fdf0 	bl	800fa8a <tx_udp>
    res = true;
 8012eaa:	2301      	movs	r3, #1
 8012eac:	77fb      	strb	r3, [r7, #31]
 8012eae:	e00e      	b.n	8012ece <mg_send+0xfa>
  } else {
    res = mg_iobuf_add(&c->send, c->send.len, buf, len);
 8012eb0:	68fb      	ldr	r3, [r7, #12]
 8012eb2:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 8012eb6:	68fb      	ldr	r3, [r7, #12]
 8012eb8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8012eba:	687b      	ldr	r3, [r7, #4]
 8012ebc:	68ba      	ldr	r2, [r7, #8]
 8012ebe:	f7fa fc87 	bl	800d7d0 <mg_iobuf_add>
 8012ec2:	4603      	mov	r3, r0
 8012ec4:	2b00      	cmp	r3, #0
 8012ec6:	bf14      	ite	ne
 8012ec8:	2301      	movne	r3, #1
 8012eca:	2300      	moveq	r3, #0
 8012ecc:	77fb      	strb	r3, [r7, #31]
  }
  return res;
 8012ece:	7ffb      	ldrb	r3, [r7, #31]
}
 8012ed0:	4618      	mov	r0, r3
 8012ed2:	3720      	adds	r7, #32
 8012ed4:	46bd      	mov	sp, r7
 8012ed6:	bdb0      	pop	{r4, r5, r7, pc}
 8012ed8:	0802b25c 	.word	0x0802b25c
 8012edc:	24000258 	.word	0x24000258
 8012ee0:	0802d9b4 	.word	0x0802d9b4
 8012ee4:	08029c3c 	.word	0x08029c3c
 8012ee8:	0802b268 	.word	0x0802b268

08012eec <mg_ota_begin>:
    mg_stm32h7_write(p1 + ofs, p2 + ofs, ss);
  }
  *(volatile unsigned long *) 0xe000ed0c = 0x5fa0004;
}

bool mg_ota_begin(size_t new_firmware_size) {
 8012eec:	b580      	push	{r7, lr}
 8012eee:	b082      	sub	sp, #8
 8012ef0:	af00      	add	r7, sp, #0
 8012ef2:	6078      	str	r0, [r7, #4]
  s_mg_flash_stm32h7.size = MG_REG(FLASH_SIZE_REG) * 1024;
 8012ef4:	4b06      	ldr	r3, [pc, #24]	@ (8012f10 <mg_ota_begin+0x24>)
 8012ef6:	681b      	ldr	r3, [r3, #0]
 8012ef8:	029b      	lsls	r3, r3, #10
 8012efa:	4a06      	ldr	r2, [pc, #24]	@ (8012f14 <mg_ota_begin+0x28>)
 8012efc:	6053      	str	r3, [r2, #4]
  if (IS_DUALCORE()) {
    // Using only the 1st bank (mapped to CM7)
    s_mg_flash_stm32h7.size /= 2;
  }
  return mg_ota_flash_begin(new_firmware_size, &s_mg_flash_stm32h7);
 8012efe:	4905      	ldr	r1, [pc, #20]	@ (8012f14 <mg_ota_begin+0x28>)
 8012f00:	6878      	ldr	r0, [r7, #4]
 8012f02:	f7f5 fe99 	bl	8008c38 <mg_ota_flash_begin>
 8012f06:	4603      	mov	r3, r0
}
 8012f08:	4618      	mov	r0, r3
 8012f0a:	3708      	adds	r7, #8
 8012f0c:	46bd      	mov	sp, r7
 8012f0e:	bd80      	pop	{r7, pc}
 8012f10:	1ff1e880 	.word	0x1ff1e880
 8012f14:	24000268 	.word	0x24000268

08012f18 <mg_ota_write>:

bool mg_ota_write(const void *buf, size_t len) {
 8012f18:	b580      	push	{r7, lr}
 8012f1a:	b082      	sub	sp, #8
 8012f1c:	af00      	add	r7, sp, #0
 8012f1e:	6078      	str	r0, [r7, #4]
 8012f20:	6039      	str	r1, [r7, #0]
  return mg_ota_flash_write(buf, len, &s_mg_flash_stm32h7);
 8012f22:	4a05      	ldr	r2, [pc, #20]	@ (8012f38 <mg_ota_write+0x20>)
 8012f24:	6839      	ldr	r1, [r7, #0]
 8012f26:	6878      	ldr	r0, [r7, #4]
 8012f28:	f7f5 ff02 	bl	8008d30 <mg_ota_flash_write>
 8012f2c:	4603      	mov	r3, r0
}
 8012f2e:	4618      	mov	r0, r3
 8012f30:	3708      	adds	r7, #8
 8012f32:	46bd      	mov	sp, r7
 8012f34:	bd80      	pop	{r7, pc}
 8012f36:	bf00      	nop
 8012f38:	24000268 	.word	0x24000268

08012f3c <mg_ota_end>:

bool mg_ota_end(void) {
 8012f3c:	b580      	push	{r7, lr}
 8012f3e:	af00      	add	r7, sp, #0
  if (mg_ota_flash_end(&s_mg_flash_stm32h7)) {
 8012f40:	4825      	ldr	r0, [pc, #148]	@ (8012fd8 <mg_ota_end+0x9c>)
 8012f42:	f7f5 ffb9 	bl	8008eb8 <mg_ota_flash_end>
 8012f46:	4603      	mov	r3, r0
 8012f48:	2b00      	cmp	r3, #0
 8012f4a:	d042      	beq.n	8012fd2 <mg_ota_end+0x96>
    if (is_dualbank()) {
 8012f4c:	f016 fd10 	bl	8029970 <__is_dualbank_veneer>
 8012f50:	4603      	mov	r3, r0
 8012f52:	2b00      	cmp	r3, #0
 8012f54:	d003      	beq.n	8012f5e <mg_ota_end+0x22>
      // Bank swap is deferred until reset, been executing in flash, reset
      *(volatile unsigned long *) 0xe000ed0c = 0x5fa0004;
 8012f56:	4b21      	ldr	r3, [pc, #132]	@ (8012fdc <mg_ota_end+0xa0>)
 8012f58:	4a21      	ldr	r2, [pc, #132]	@ (8012fe0 <mg_ota_end+0xa4>)
 8012f5a:	601a      	str	r2, [r3, #0]
 8012f5c:	e039      	b.n	8012fd2 <mg_ota_end+0x96>
    } else {
      // Swap partitions. Pray power does not go away
      MG_INFO(("Swapping partitions, size %u (%u sectors)",
 8012f5e:	4b21      	ldr	r3, [pc, #132]	@ (8012fe4 <mg_ota_end+0xa8>)
 8012f60:	681b      	ldr	r3, [r3, #0]
 8012f62:	2b01      	cmp	r3, #1
 8012f64:	dd12      	ble.n	8012f8c <mg_ota_end+0x50>
 8012f66:	4b20      	ldr	r3, [pc, #128]	@ (8012fe8 <mg_ota_end+0xac>)
 8012f68:	f641 528d 	movw	r2, #7565	@ 0x1d8d
 8012f6c:	491f      	ldr	r1, [pc, #124]	@ (8012fec <mg_ota_end+0xb0>)
 8012f6e:	2002      	movs	r0, #2
 8012f70:	f7fb fc98 	bl	800e8a4 <mg_log_prefix>
 8012f74:	4b18      	ldr	r3, [pc, #96]	@ (8012fd8 <mg_ota_end+0x9c>)
 8012f76:	6859      	ldr	r1, [r3, #4]
 8012f78:	4b17      	ldr	r3, [pc, #92]	@ (8012fd8 <mg_ota_end+0x9c>)
 8012f7a:	685a      	ldr	r2, [r3, #4]
 8012f7c:	4b16      	ldr	r3, [pc, #88]	@ (8012fd8 <mg_ota_end+0x9c>)
 8012f7e:	689b      	ldr	r3, [r3, #8]
 8012f80:	fbb2 f3f3 	udiv	r3, r2, r3
 8012f84:	461a      	mov	r2, r3
 8012f86:	481a      	ldr	r0, [pc, #104]	@ (8012ff0 <mg_ota_end+0xb4>)
 8012f88:	f7fb fcdc 	bl	800e944 <mg_log>
               s_mg_flash_stm32h7.size,
               s_mg_flash_stm32h7.size / s_mg_flash_stm32h7.secsz));
      MG_INFO(("Do NOT power off..."));
 8012f8c:	4b15      	ldr	r3, [pc, #84]	@ (8012fe4 <mg_ota_end+0xa8>)
 8012f8e:	681b      	ldr	r3, [r3, #0]
 8012f90:	2b01      	cmp	r3, #1
 8012f92:	dd09      	ble.n	8012fa8 <mg_ota_end+0x6c>
 8012f94:	4b14      	ldr	r3, [pc, #80]	@ (8012fe8 <mg_ota_end+0xac>)
 8012f96:	f641 5290 	movw	r2, #7568	@ 0x1d90
 8012f9a:	4914      	ldr	r1, [pc, #80]	@ (8012fec <mg_ota_end+0xb0>)
 8012f9c:	2002      	movs	r0, #2
 8012f9e:	f7fb fc81 	bl	800e8a4 <mg_log_prefix>
 8012fa2:	4814      	ldr	r0, [pc, #80]	@ (8012ff4 <mg_ota_end+0xb8>)
 8012fa4:	f7fb fcce 	bl	800e944 <mg_log>
      mg_log_level = MG_LL_NONE;
 8012fa8:	4b0e      	ldr	r3, [pc, #56]	@ (8012fe4 <mg_ota_end+0xa8>)
 8012faa:	2200      	movs	r2, #0
 8012fac:	601a      	str	r2, [r3, #0]
      s_flash_irq_disabled = true;
 8012fae:	4b12      	ldr	r3, [pc, #72]	@ (8012ff8 <mg_ota_end+0xbc>)
 8012fb0:	2201      	movs	r2, #1
 8012fb2:	701a      	strb	r2, [r3, #0]
      // Runs in RAM, will reset when finished
      single_bank_swap(
          (char *) s_mg_flash_stm32h7.start,
 8012fb4:	4b08      	ldr	r3, [pc, #32]	@ (8012fd8 <mg_ota_end+0x9c>)
 8012fb6:	6818      	ldr	r0, [r3, #0]
          (char *) s_mg_flash_stm32h7.start + s_mg_flash_stm32h7.size / 2,
 8012fb8:	4b07      	ldr	r3, [pc, #28]	@ (8012fd8 <mg_ota_end+0x9c>)
 8012fba:	681a      	ldr	r2, [r3, #0]
 8012fbc:	4b06      	ldr	r3, [pc, #24]	@ (8012fd8 <mg_ota_end+0x9c>)
 8012fbe:	685b      	ldr	r3, [r3, #4]
 8012fc0:	085b      	lsrs	r3, r3, #1
      single_bank_swap(
 8012fc2:	18d1      	adds	r1, r2, r3
          s_mg_flash_stm32h7.size / 2, s_mg_flash_stm32h7.secsz);
 8012fc4:	4b04      	ldr	r3, [pc, #16]	@ (8012fd8 <mg_ota_end+0x9c>)
 8012fc6:	685b      	ldr	r3, [r3, #4]
      single_bank_swap(
 8012fc8:	085a      	lsrs	r2, r3, #1
 8012fca:	4b03      	ldr	r3, [pc, #12]	@ (8012fd8 <mg_ota_end+0x9c>)
 8012fcc:	689b      	ldr	r3, [r3, #8]
 8012fce:	f016 fcd3 	bl	8029978 <__single_bank_swap_veneer>
    }
  }
  return false;
 8012fd2:	2300      	movs	r3, #0
}
 8012fd4:	4618      	mov	r0, r3
 8012fd6:	bd80      	pop	{r7, pc}
 8012fd8:	24000268 	.word	0x24000268
 8012fdc:	e000ed0c 	.word	0xe000ed0c
 8012fe0:	05fa0004 	.word	0x05fa0004
 8012fe4:	24000258 	.word	0x24000258
 8012fe8:	0802d9e4 	.word	0x0802d9e4
 8012fec:	08029c3c 	.word	0x08029c3c
 8012ff0:	0802b314 	.word	0x0802b314
 8012ff4:	0802b340 	.word	0x0802b340
 8012ff8:	24002364 	.word	0x24002364

08012ffc <mg_pfn_iobuf_private>:
  len = mg_queue_vprintf(q, fmt, &ap);
  va_end(ap);
  return len;
}

static void mg_pfn_iobuf_private(char ch, void *param, bool expand) {
 8012ffc:	b580      	push	{r7, lr}
 8012ffe:	b084      	sub	sp, #16
 8013000:	af00      	add	r7, sp, #0
 8013002:	4603      	mov	r3, r0
 8013004:	6039      	str	r1, [r7, #0]
 8013006:	71fb      	strb	r3, [r7, #7]
 8013008:	4613      	mov	r3, r2
 801300a:	71bb      	strb	r3, [r7, #6]
  struct mg_iobuf *io = (struct mg_iobuf *) param;
 801300c:	683b      	ldr	r3, [r7, #0]
 801300e:	60fb      	str	r3, [r7, #12]
  if (expand && io->len + 2 > io->size) mg_iobuf_resize(io, io->len + 2);
 8013010:	79bb      	ldrb	r3, [r7, #6]
 8013012:	2b00      	cmp	r3, #0
 8013014:	d00d      	beq.n	8013032 <mg_pfn_iobuf_private+0x36>
 8013016:	68fb      	ldr	r3, [r7, #12]
 8013018:	689b      	ldr	r3, [r3, #8]
 801301a:	1c9a      	adds	r2, r3, #2
 801301c:	68fb      	ldr	r3, [r7, #12]
 801301e:	685b      	ldr	r3, [r3, #4]
 8013020:	429a      	cmp	r2, r3
 8013022:	d906      	bls.n	8013032 <mg_pfn_iobuf_private+0x36>
 8013024:	68fb      	ldr	r3, [r7, #12]
 8013026:	689b      	ldr	r3, [r3, #8]
 8013028:	3302      	adds	r3, #2
 801302a:	4619      	mov	r1, r3
 801302c:	68f8      	ldr	r0, [r7, #12]
 801302e:	f7fa fb43 	bl	800d6b8 <mg_iobuf_resize>
  if (io->len + 2 <= io->size) {
 8013032:	68fb      	ldr	r3, [r7, #12]
 8013034:	689b      	ldr	r3, [r3, #8]
 8013036:	1c9a      	adds	r2, r3, #2
 8013038:	68fb      	ldr	r3, [r7, #12]
 801303a:	685b      	ldr	r3, [r3, #4]
 801303c:	429a      	cmp	r2, r3
 801303e:	d811      	bhi.n	8013064 <mg_pfn_iobuf_private+0x68>
    io->buf[io->len++] = (uint8_t) ch;
 8013040:	68fb      	ldr	r3, [r7, #12]
 8013042:	681a      	ldr	r2, [r3, #0]
 8013044:	68fb      	ldr	r3, [r7, #12]
 8013046:	689b      	ldr	r3, [r3, #8]
 8013048:	1c58      	adds	r0, r3, #1
 801304a:	68f9      	ldr	r1, [r7, #12]
 801304c:	6088      	str	r0, [r1, #8]
 801304e:	4413      	add	r3, r2
 8013050:	79fa      	ldrb	r2, [r7, #7]
 8013052:	701a      	strb	r2, [r3, #0]
    io->buf[io->len] = 0;
 8013054:	68fb      	ldr	r3, [r7, #12]
 8013056:	681a      	ldr	r2, [r3, #0]
 8013058:	68fb      	ldr	r3, [r7, #12]
 801305a:	689b      	ldr	r3, [r3, #8]
 801305c:	4413      	add	r3, r2
 801305e:	2200      	movs	r2, #0
 8013060:	701a      	strb	r2, [r3, #0]
  } else if (io->len < io->size) {
    io->buf[io->len++] = 0;  // Guarantee to 0-terminate
  }
}
 8013062:	e00f      	b.n	8013084 <mg_pfn_iobuf_private+0x88>
  } else if (io->len < io->size) {
 8013064:	68fb      	ldr	r3, [r7, #12]
 8013066:	689a      	ldr	r2, [r3, #8]
 8013068:	68fb      	ldr	r3, [r7, #12]
 801306a:	685b      	ldr	r3, [r3, #4]
 801306c:	429a      	cmp	r2, r3
 801306e:	d209      	bcs.n	8013084 <mg_pfn_iobuf_private+0x88>
    io->buf[io->len++] = 0;  // Guarantee to 0-terminate
 8013070:	68fb      	ldr	r3, [r7, #12]
 8013072:	681a      	ldr	r2, [r3, #0]
 8013074:	68fb      	ldr	r3, [r7, #12]
 8013076:	689b      	ldr	r3, [r3, #8]
 8013078:	1c58      	adds	r0, r3, #1
 801307a:	68f9      	ldr	r1, [r7, #12]
 801307c:	6088      	str	r0, [r1, #8]
 801307e:	4413      	add	r3, r2
 8013080:	2200      	movs	r2, #0
 8013082:	701a      	strb	r2, [r3, #0]
}
 8013084:	bf00      	nop
 8013086:	3710      	adds	r7, #16
 8013088:	46bd      	mov	sp, r7
 801308a:	bd80      	pop	{r7, pc}

0801308c <mg_putchar_iobuf_static>:

static void mg_putchar_iobuf_static(char ch, void *param) {
 801308c:	b580      	push	{r7, lr}
 801308e:	b082      	sub	sp, #8
 8013090:	af00      	add	r7, sp, #0
 8013092:	4603      	mov	r3, r0
 8013094:	6039      	str	r1, [r7, #0]
 8013096:	71fb      	strb	r3, [r7, #7]
  mg_pfn_iobuf_private(ch, param, false);
 8013098:	79fb      	ldrb	r3, [r7, #7]
 801309a:	2200      	movs	r2, #0
 801309c:	6839      	ldr	r1, [r7, #0]
 801309e:	4618      	mov	r0, r3
 80130a0:	f7ff ffac 	bl	8012ffc <mg_pfn_iobuf_private>
}
 80130a4:	bf00      	nop
 80130a6:	3708      	adds	r7, #8
 80130a8:	46bd      	mov	sp, r7
 80130aa:	bd80      	pop	{r7, pc}

080130ac <mg_pfn_iobuf>:

void mg_pfn_iobuf(char ch, void *param) {
 80130ac:	b580      	push	{r7, lr}
 80130ae:	b082      	sub	sp, #8
 80130b0:	af00      	add	r7, sp, #0
 80130b2:	4603      	mov	r3, r0
 80130b4:	6039      	str	r1, [r7, #0]
 80130b6:	71fb      	strb	r3, [r7, #7]
  mg_pfn_iobuf_private(ch, param, true);
 80130b8:	79fb      	ldrb	r3, [r7, #7]
 80130ba:	2201      	movs	r2, #1
 80130bc:	6839      	ldr	r1, [r7, #0]
 80130be:	4618      	mov	r0, r3
 80130c0:	f7ff ff9c 	bl	8012ffc <mg_pfn_iobuf_private>
}
 80130c4:	bf00      	nop
 80130c6:	3708      	adds	r7, #8
 80130c8:	46bd      	mov	sp, r7
 80130ca:	bd80      	pop	{r7, pc}

080130cc <mg_vsnprintf>:

size_t mg_vsnprintf(char *buf, size_t len, const char *fmt, va_list *ap) {
 80130cc:	b580      	push	{r7, lr}
 80130ce:	b08a      	sub	sp, #40	@ 0x28
 80130d0:	af00      	add	r7, sp, #0
 80130d2:	60f8      	str	r0, [r7, #12]
 80130d4:	60b9      	str	r1, [r7, #8]
 80130d6:	607a      	str	r2, [r7, #4]
 80130d8:	603b      	str	r3, [r7, #0]
  struct mg_iobuf io = {(uint8_t *) buf, len, 0, 0};
 80130da:	68fb      	ldr	r3, [r7, #12]
 80130dc:	617b      	str	r3, [r7, #20]
 80130de:	68bb      	ldr	r3, [r7, #8]
 80130e0:	61bb      	str	r3, [r7, #24]
 80130e2:	2300      	movs	r3, #0
 80130e4:	61fb      	str	r3, [r7, #28]
 80130e6:	2300      	movs	r3, #0
 80130e8:	623b      	str	r3, [r7, #32]
  size_t n = mg_vxprintf(mg_putchar_iobuf_static, &io, fmt, ap);
 80130ea:	f107 0114 	add.w	r1, r7, #20
 80130ee:	683b      	ldr	r3, [r7, #0]
 80130f0:	687a      	ldr	r2, [r7, #4]
 80130f2:	4809      	ldr	r0, [pc, #36]	@ (8013118 <mg_vsnprintf+0x4c>)
 80130f4:	f7f6 fbf0 	bl	80098d8 <mg_vxprintf>
 80130f8:	6278      	str	r0, [r7, #36]	@ 0x24
  if (n < len) buf[n] = '\0';
 80130fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80130fc:	68bb      	ldr	r3, [r7, #8]
 80130fe:	429a      	cmp	r2, r3
 8013100:	d204      	bcs.n	801310c <mg_vsnprintf+0x40>
 8013102:	68fa      	ldr	r2, [r7, #12]
 8013104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013106:	4413      	add	r3, r2
 8013108:	2200      	movs	r2, #0
 801310a:	701a      	strb	r2, [r3, #0]
  return n;
 801310c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 801310e:	4618      	mov	r0, r3
 8013110:	3728      	adds	r7, #40	@ 0x28
 8013112:	46bd      	mov	sp, r7
 8013114:	bd80      	pop	{r7, pc}
 8013116:	bf00      	nop
 8013118:	0801308d 	.word	0x0801308d

0801311c <mg_snprintf>:

size_t mg_snprintf(char *buf, size_t len, const char *fmt, ...) {
 801311c:	b40c      	push	{r2, r3}
 801311e:	b580      	push	{r7, lr}
 8013120:	b084      	sub	sp, #16
 8013122:	af00      	add	r7, sp, #0
 8013124:	6078      	str	r0, [r7, #4]
 8013126:	6039      	str	r1, [r7, #0]
  va_list ap;
  size_t n;
  va_start(ap, fmt);
 8013128:	f107 031c 	add.w	r3, r7, #28
 801312c:	60bb      	str	r3, [r7, #8]
  n = mg_vsnprintf(buf, len, fmt, &ap);
 801312e:	f107 0308 	add.w	r3, r7, #8
 8013132:	69ba      	ldr	r2, [r7, #24]
 8013134:	6839      	ldr	r1, [r7, #0]
 8013136:	6878      	ldr	r0, [r7, #4]
 8013138:	f7ff ffc8 	bl	80130cc <mg_vsnprintf>
 801313c:	60f8      	str	r0, [r7, #12]
  va_end(ap);
  return n;
 801313e:	68fb      	ldr	r3, [r7, #12]
}
 8013140:	4618      	mov	r0, r3
 8013142:	3710      	adds	r7, #16
 8013144:	46bd      	mov	sp, r7
 8013146:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801314a:	b002      	add	sp, #8
 801314c:	4770      	bx	lr
	...

08013150 <mg_vmprintf>:

char *mg_vmprintf(const char *fmt, va_list *ap) {
 8013150:	b580      	push	{r7, lr}
 8013152:	b086      	sub	sp, #24
 8013154:	af00      	add	r7, sp, #0
 8013156:	6078      	str	r0, [r7, #4]
 8013158:	6039      	str	r1, [r7, #0]
  struct mg_iobuf io = {0, 0, 0, 256};
 801315a:	2300      	movs	r3, #0
 801315c:	60bb      	str	r3, [r7, #8]
 801315e:	2300      	movs	r3, #0
 8013160:	60fb      	str	r3, [r7, #12]
 8013162:	2300      	movs	r3, #0
 8013164:	613b      	str	r3, [r7, #16]
 8013166:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801316a:	617b      	str	r3, [r7, #20]
  mg_vxprintf(mg_pfn_iobuf, &io, fmt, ap);
 801316c:	f107 0108 	add.w	r1, r7, #8
 8013170:	683b      	ldr	r3, [r7, #0]
 8013172:	687a      	ldr	r2, [r7, #4]
 8013174:	4803      	ldr	r0, [pc, #12]	@ (8013184 <mg_vmprintf+0x34>)
 8013176:	f7f6 fbaf 	bl	80098d8 <mg_vxprintf>
  return (char *) io.buf;
 801317a:	68bb      	ldr	r3, [r7, #8]
}
 801317c:	4618      	mov	r0, r3
 801317e:	3718      	adds	r7, #24
 8013180:	46bd      	mov	sp, r7
 8013182:	bd80      	pop	{r7, pc}
 8013184:	080130ad 	.word	0x080130ad

08013188 <mg_mprintf>:

char *mg_mprintf(const char *fmt, ...) {
 8013188:	b40f      	push	{r0, r1, r2, r3}
 801318a:	b580      	push	{r7, lr}
 801318c:	b082      	sub	sp, #8
 801318e:	af00      	add	r7, sp, #0
  char *s;
  va_list ap;
  va_start(ap, fmt);
 8013190:	f107 0314 	add.w	r3, r7, #20
 8013194:	603b      	str	r3, [r7, #0]
  s = mg_vmprintf(fmt, &ap);
 8013196:	463b      	mov	r3, r7
 8013198:	4619      	mov	r1, r3
 801319a:	6938      	ldr	r0, [r7, #16]
 801319c:	f7ff ffd8 	bl	8013150 <mg_vmprintf>
 80131a0:	6078      	str	r0, [r7, #4]
  va_end(ap);
  return s;
 80131a2:	687b      	ldr	r3, [r7, #4]
}
 80131a4:	4618      	mov	r0, r3
 80131a6:	3708      	adds	r7, #8
 80131a8:	46bd      	mov	sp, r7
 80131aa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80131ae:	b004      	add	sp, #16
 80131b0:	4770      	bx	lr

080131b2 <mg_pfn_stdout>:

void mg_pfn_stdout(char c, void *param) {
 80131b2:	b580      	push	{r7, lr}
 80131b4:	b082      	sub	sp, #8
 80131b6:	af00      	add	r7, sp, #0
 80131b8:	4603      	mov	r3, r0
 80131ba:	6039      	str	r1, [r7, #0]
 80131bc:	71fb      	strb	r3, [r7, #7]
  putchar(c);
 80131be:	79fb      	ldrb	r3, [r7, #7]
 80131c0:	4618      	mov	r0, r3
 80131c2:	f014 f919 	bl	80273f8 <putchar>
  (void) param;
}
 80131c6:	bf00      	nop
 80131c8:	3708      	adds	r7, #8
 80131ca:	46bd      	mov	sp, r7
 80131cc:	bd80      	pop	{r7, pc}
	...

080131d0 <print_ip4>:

static size_t print_ip4(void (*out)(char, void *), void *arg, uint8_t *p) {
 80131d0:	b580      	push	{r7, lr}
 80131d2:	b088      	sub	sp, #32
 80131d4:	af04      	add	r7, sp, #16
 80131d6:	60f8      	str	r0, [r7, #12]
 80131d8:	60b9      	str	r1, [r7, #8]
 80131da:	607a      	str	r2, [r7, #4]
  return mg_xprintf(out, arg, "%d.%d.%d.%d", p[0], p[1], p[2], p[3]);
 80131dc:	687b      	ldr	r3, [r7, #4]
 80131de:	781b      	ldrb	r3, [r3, #0]
 80131e0:	4618      	mov	r0, r3
 80131e2:	687b      	ldr	r3, [r7, #4]
 80131e4:	3301      	adds	r3, #1
 80131e6:	781b      	ldrb	r3, [r3, #0]
 80131e8:	461a      	mov	r2, r3
 80131ea:	687b      	ldr	r3, [r7, #4]
 80131ec:	3302      	adds	r3, #2
 80131ee:	781b      	ldrb	r3, [r3, #0]
 80131f0:	4619      	mov	r1, r3
 80131f2:	687b      	ldr	r3, [r7, #4]
 80131f4:	3303      	adds	r3, #3
 80131f6:	781b      	ldrb	r3, [r3, #0]
 80131f8:	9302      	str	r3, [sp, #8]
 80131fa:	9101      	str	r1, [sp, #4]
 80131fc:	9200      	str	r2, [sp, #0]
 80131fe:	4603      	mov	r3, r0
 8013200:	4a04      	ldr	r2, [pc, #16]	@ (8013214 <print_ip4+0x44>)
 8013202:	68b9      	ldr	r1, [r7, #8]
 8013204:	68f8      	ldr	r0, [r7, #12]
 8013206:	f7f6 fb4c 	bl	80098a2 <mg_xprintf>
 801320a:	4603      	mov	r3, r0
}
 801320c:	4618      	mov	r0, r3
 801320e:	3710      	adds	r7, #16
 8013210:	46bd      	mov	sp, r7
 8013212:	bd80      	pop	{r7, pc}
 8013214:	0802b354 	.word	0x0802b354

08013218 <print_ip6>:

static size_t print_ip6(void (*out)(char, void *), void *arg, uint16_t *p) {
 8013218:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801321c:	b08e      	sub	sp, #56	@ 0x38
 801321e:	af08      	add	r7, sp, #32
 8013220:	6178      	str	r0, [r7, #20]
 8013222:	6139      	str	r1, [r7, #16]
 8013224:	60fa      	str	r2, [r7, #12]
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8013226:	68fb      	ldr	r3, [r7, #12]
 8013228:	881b      	ldrh	r3, [r3, #0]
 801322a:	4618      	mov	r0, r3
 801322c:	f00e fdd4 	bl	8021dd8 <mg_ntohs>
 8013230:	4603      	mov	r3, r0
 8013232:	4698      	mov	r8, r3
                    mg_ntohs(p[1]), mg_ntohs(p[2]), mg_ntohs(p[3]),
 8013234:	68fb      	ldr	r3, [r7, #12]
 8013236:	3302      	adds	r3, #2
 8013238:	881b      	ldrh	r3, [r3, #0]
 801323a:	4618      	mov	r0, r3
 801323c:	f00e fdcc 	bl	8021dd8 <mg_ntohs>
 8013240:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8013242:	461c      	mov	r4, r3
                    mg_ntohs(p[1]), mg_ntohs(p[2]), mg_ntohs(p[3]),
 8013244:	68fb      	ldr	r3, [r7, #12]
 8013246:	3304      	adds	r3, #4
 8013248:	881b      	ldrh	r3, [r3, #0]
 801324a:	4618      	mov	r0, r3
 801324c:	f00e fdc4 	bl	8021dd8 <mg_ntohs>
 8013250:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8013252:	461d      	mov	r5, r3
                    mg_ntohs(p[1]), mg_ntohs(p[2]), mg_ntohs(p[3]),
 8013254:	68fb      	ldr	r3, [r7, #12]
 8013256:	3306      	adds	r3, #6
 8013258:	881b      	ldrh	r3, [r3, #0]
 801325a:	4618      	mov	r0, r3
 801325c:	f00e fdbc 	bl	8021dd8 <mg_ntohs>
 8013260:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8013262:	461e      	mov	r6, r3
                    mg_ntohs(p[4]), mg_ntohs(p[5]), mg_ntohs(p[6]),
 8013264:	68fb      	ldr	r3, [r7, #12]
 8013266:	3308      	adds	r3, #8
 8013268:	881b      	ldrh	r3, [r3, #0]
 801326a:	4618      	mov	r0, r3
 801326c:	f00e fdb4 	bl	8021dd8 <mg_ntohs>
 8013270:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8013272:	60bb      	str	r3, [r7, #8]
                    mg_ntohs(p[4]), mg_ntohs(p[5]), mg_ntohs(p[6]),
 8013274:	68fb      	ldr	r3, [r7, #12]
 8013276:	330a      	adds	r3, #10
 8013278:	881b      	ldrh	r3, [r3, #0]
 801327a:	4618      	mov	r0, r3
 801327c:	f00e fdac 	bl	8021dd8 <mg_ntohs>
 8013280:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8013282:	607b      	str	r3, [r7, #4]
                    mg_ntohs(p[4]), mg_ntohs(p[5]), mg_ntohs(p[6]),
 8013284:	68fb      	ldr	r3, [r7, #12]
 8013286:	330c      	adds	r3, #12
 8013288:	881b      	ldrh	r3, [r3, #0]
 801328a:	4618      	mov	r0, r3
 801328c:	f00e fda4 	bl	8021dd8 <mg_ntohs>
 8013290:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8013292:	603b      	str	r3, [r7, #0]
                    mg_ntohs(p[7]));
 8013294:	68fb      	ldr	r3, [r7, #12]
 8013296:	330e      	adds	r3, #14
 8013298:	881b      	ldrh	r3, [r3, #0]
 801329a:	4618      	mov	r0, r3
 801329c:	f00e fd9c 	bl	8021dd8 <mg_ntohs>
 80132a0:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 80132a2:	9306      	str	r3, [sp, #24]
 80132a4:	683a      	ldr	r2, [r7, #0]
 80132a6:	9205      	str	r2, [sp, #20]
 80132a8:	687a      	ldr	r2, [r7, #4]
 80132aa:	9204      	str	r2, [sp, #16]
 80132ac:	68bb      	ldr	r3, [r7, #8]
 80132ae:	9303      	str	r3, [sp, #12]
 80132b0:	9602      	str	r6, [sp, #8]
 80132b2:	9501      	str	r5, [sp, #4]
 80132b4:	9400      	str	r4, [sp, #0]
 80132b6:	4643      	mov	r3, r8
 80132b8:	4a05      	ldr	r2, [pc, #20]	@ (80132d0 <print_ip6+0xb8>)
 80132ba:	6939      	ldr	r1, [r7, #16]
 80132bc:	6978      	ldr	r0, [r7, #20]
 80132be:	f7f6 faf0 	bl	80098a2 <mg_xprintf>
 80132c2:	4603      	mov	r3, r0
}
 80132c4:	4618      	mov	r0, r3
 80132c6:	3718      	adds	r7, #24
 80132c8:	46bd      	mov	sp, r7
 80132ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80132ce:	bf00      	nop
 80132d0:	0802b360 	.word	0x0802b360

080132d4 <mg_print_ip4>:

size_t mg_print_ip4(void (*out)(char, void *), void *arg, va_list *ap) {
 80132d4:	b580      	push	{r7, lr}
 80132d6:	b086      	sub	sp, #24
 80132d8:	af00      	add	r7, sp, #0
 80132da:	60f8      	str	r0, [r7, #12]
 80132dc:	60b9      	str	r1, [r7, #8]
 80132de:	607a      	str	r2, [r7, #4]
  uint8_t *p = va_arg(*ap, uint8_t *);
 80132e0:	687b      	ldr	r3, [r7, #4]
 80132e2:	681b      	ldr	r3, [r3, #0]
 80132e4:	1d19      	adds	r1, r3, #4
 80132e6:	687a      	ldr	r2, [r7, #4]
 80132e8:	6011      	str	r1, [r2, #0]
 80132ea:	681b      	ldr	r3, [r3, #0]
 80132ec:	617b      	str	r3, [r7, #20]
  return print_ip4(out, arg, p);
 80132ee:	697a      	ldr	r2, [r7, #20]
 80132f0:	68b9      	ldr	r1, [r7, #8]
 80132f2:	68f8      	ldr	r0, [r7, #12]
 80132f4:	f7ff ff6c 	bl	80131d0 <print_ip4>
 80132f8:	4603      	mov	r3, r0
}
 80132fa:	4618      	mov	r0, r3
 80132fc:	3718      	adds	r7, #24
 80132fe:	46bd      	mov	sp, r7
 8013300:	bd80      	pop	{r7, pc}

08013302 <mg_print_ip>:
size_t mg_print_ip6(void (*out)(char, void *), void *arg, va_list *ap) {
  uint16_t *p = va_arg(*ap, uint16_t *);
  return print_ip6(out, arg, p);
}

size_t mg_print_ip(void (*out)(char, void *), void *arg, va_list *ap) {
 8013302:	b580      	push	{r7, lr}
 8013304:	b086      	sub	sp, #24
 8013306:	af00      	add	r7, sp, #0
 8013308:	60f8      	str	r0, [r7, #12]
 801330a:	60b9      	str	r1, [r7, #8]
 801330c:	607a      	str	r2, [r7, #4]
  struct mg_addr *addr = va_arg(*ap, struct mg_addr *);
 801330e:	687b      	ldr	r3, [r7, #4]
 8013310:	681b      	ldr	r3, [r3, #0]
 8013312:	1d19      	adds	r1, r3, #4
 8013314:	687a      	ldr	r2, [r7, #4]
 8013316:	6011      	str	r1, [r2, #0]
 8013318:	681b      	ldr	r3, [r3, #0]
 801331a:	617b      	str	r3, [r7, #20]
  if (addr->is_ip6) return print_ip6(out, arg, (uint16_t *) addr->ip);
 801331c:	697b      	ldr	r3, [r7, #20]
 801331e:	7cdb      	ldrb	r3, [r3, #19]
 8013320:	2b00      	cmp	r3, #0
 8013322:	d007      	beq.n	8013334 <mg_print_ip+0x32>
 8013324:	697b      	ldr	r3, [r7, #20]
 8013326:	461a      	mov	r2, r3
 8013328:	68b9      	ldr	r1, [r7, #8]
 801332a:	68f8      	ldr	r0, [r7, #12]
 801332c:	f7ff ff74 	bl	8013218 <print_ip6>
 8013330:	4603      	mov	r3, r0
 8013332:	e006      	b.n	8013342 <mg_print_ip+0x40>
  return print_ip4(out, arg, (uint8_t *) &addr->ip);
 8013334:	697b      	ldr	r3, [r7, #20]
 8013336:	461a      	mov	r2, r3
 8013338:	68b9      	ldr	r1, [r7, #8]
 801333a:	68f8      	ldr	r0, [r7, #12]
 801333c:	f7ff ff48 	bl	80131d0 <print_ip4>
 8013340:	4603      	mov	r3, r0
}
 8013342:	4618      	mov	r0, r3
 8013344:	3718      	adds	r7, #24
 8013346:	46bd      	mov	sp, r7
 8013348:	bd80      	pop	{r7, pc}
	...

0801334c <mg_print_ip_port>:

size_t mg_print_ip_port(void (*out)(char, void *), void *arg, va_list *ap) {
 801334c:	b580      	push	{r7, lr}
 801334e:	b088      	sub	sp, #32
 8013350:	af02      	add	r7, sp, #8
 8013352:	60f8      	str	r0, [r7, #12]
 8013354:	60b9      	str	r1, [r7, #8]
 8013356:	607a      	str	r2, [r7, #4]
  struct mg_addr *a = va_arg(*ap, struct mg_addr *);
 8013358:	687b      	ldr	r3, [r7, #4]
 801335a:	681b      	ldr	r3, [r3, #0]
 801335c:	1d19      	adds	r1, r3, #4
 801335e:	687a      	ldr	r2, [r7, #4]
 8013360:	6011      	str	r1, [r2, #0]
 8013362:	681b      	ldr	r3, [r3, #0]
 8013364:	617b      	str	r3, [r7, #20]
  return mg_xprintf(out, arg, "%M:%hu", mg_print_ip, a, mg_ntohs(a->port));
 8013366:	697b      	ldr	r3, [r7, #20]
 8013368:	8a1b      	ldrh	r3, [r3, #16]
 801336a:	4618      	mov	r0, r3
 801336c:	f00e fd34 	bl	8021dd8 <mg_ntohs>
 8013370:	4603      	mov	r3, r0
 8013372:	9301      	str	r3, [sp, #4]
 8013374:	697b      	ldr	r3, [r7, #20]
 8013376:	9300      	str	r3, [sp, #0]
 8013378:	4b05      	ldr	r3, [pc, #20]	@ (8013390 <mg_print_ip_port+0x44>)
 801337a:	4a06      	ldr	r2, [pc, #24]	@ (8013394 <mg_print_ip_port+0x48>)
 801337c:	68b9      	ldr	r1, [r7, #8]
 801337e:	68f8      	ldr	r0, [r7, #12]
 8013380:	f7f6 fa8f 	bl	80098a2 <mg_xprintf>
 8013384:	4603      	mov	r3, r0
}
 8013386:	4618      	mov	r0, r3
 8013388:	3718      	adds	r7, #24
 801338a:	46bd      	mov	sp, r7
 801338c:	bd80      	pop	{r7, pc}
 801338e:	bf00      	nop
 8013390:	08013303 	.word	0x08013303
 8013394:	0802b37c 	.word	0x0802b37c

08013398 <mg_print_mac>:

size_t mg_print_mac(void (*out)(char, void *), void *arg, va_list *ap) {
 8013398:	b5b0      	push	{r4, r5, r7, lr}
 801339a:	b08c      	sub	sp, #48	@ 0x30
 801339c:	af06      	add	r7, sp, #24
 801339e:	60f8      	str	r0, [r7, #12]
 80133a0:	60b9      	str	r1, [r7, #8]
 80133a2:	607a      	str	r2, [r7, #4]
  uint8_t *p = va_arg(*ap, uint8_t *);
 80133a4:	687b      	ldr	r3, [r7, #4]
 80133a6:	681b      	ldr	r3, [r3, #0]
 80133a8:	1d19      	adds	r1, r3, #4
 80133aa:	687a      	ldr	r2, [r7, #4]
 80133ac:	6011      	str	r1, [r2, #0]
 80133ae:	681b      	ldr	r3, [r3, #0]
 80133b0:	617b      	str	r3, [r7, #20]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 80133b2:	697b      	ldr	r3, [r7, #20]
 80133b4:	781b      	ldrb	r3, [r3, #0]
 80133b6:	461d      	mov	r5, r3
 80133b8:	697b      	ldr	r3, [r7, #20]
 80133ba:	3301      	adds	r3, #1
 80133bc:	781b      	ldrb	r3, [r3, #0]
 80133be:	461a      	mov	r2, r3
 80133c0:	697b      	ldr	r3, [r7, #20]
 80133c2:	3302      	adds	r3, #2
 80133c4:	781b      	ldrb	r3, [r3, #0]
 80133c6:	4619      	mov	r1, r3
                    p[3], p[4], p[5]);
 80133c8:	697b      	ldr	r3, [r7, #20]
 80133ca:	3303      	adds	r3, #3
 80133cc:	781b      	ldrb	r3, [r3, #0]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 80133ce:	4618      	mov	r0, r3
                    p[3], p[4], p[5]);
 80133d0:	697b      	ldr	r3, [r7, #20]
 80133d2:	3304      	adds	r3, #4
 80133d4:	781b      	ldrb	r3, [r3, #0]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 80133d6:	461c      	mov	r4, r3
                    p[3], p[4], p[5]);
 80133d8:	697b      	ldr	r3, [r7, #20]
 80133da:	3305      	adds	r3, #5
 80133dc:	781b      	ldrb	r3, [r3, #0]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 80133de:	9304      	str	r3, [sp, #16]
 80133e0:	9403      	str	r4, [sp, #12]
 80133e2:	9002      	str	r0, [sp, #8]
 80133e4:	9101      	str	r1, [sp, #4]
 80133e6:	9200      	str	r2, [sp, #0]
 80133e8:	462b      	mov	r3, r5
 80133ea:	4a05      	ldr	r2, [pc, #20]	@ (8013400 <mg_print_mac+0x68>)
 80133ec:	68b9      	ldr	r1, [r7, #8]
 80133ee:	68f8      	ldr	r0, [r7, #12]
 80133f0:	f7f6 fa57 	bl	80098a2 <mg_xprintf>
 80133f4:	4603      	mov	r3, r0
}
 80133f6:	4618      	mov	r0, r3
 80133f8:	3718      	adds	r7, #24
 80133fa:	46bd      	mov	sp, r7
 80133fc:	bdb0      	pop	{r4, r5, r7, pc}
 80133fe:	bf00      	nop
 8013400:	0802b384 	.word	0x0802b384

08013404 <mg_esc>:

static char mg_esc(int c, bool esc) {
 8013404:	b480      	push	{r7}
 8013406:	b087      	sub	sp, #28
 8013408:	af00      	add	r7, sp, #0
 801340a:	6078      	str	r0, [r7, #4]
 801340c:	460b      	mov	r3, r1
 801340e:	70fb      	strb	r3, [r7, #3]
  const char *p, *esc1 = "\b\f\n\r\t\\\"", *esc2 = "bfnrt\\\"";
 8013410:	4b19      	ldr	r3, [pc, #100]	@ (8013478 <mg_esc+0x74>)
 8013412:	613b      	str	r3, [r7, #16]
 8013414:	4b19      	ldr	r3, [pc, #100]	@ (801347c <mg_esc+0x78>)
 8013416:	60fb      	str	r3, [r7, #12]
  for (p = esc ? esc1 : esc2; *p != '\0'; p++) {
 8013418:	78fb      	ldrb	r3, [r7, #3]
 801341a:	2b00      	cmp	r3, #0
 801341c:	d001      	beq.n	8013422 <mg_esc+0x1e>
 801341e:	693b      	ldr	r3, [r7, #16]
 8013420:	e000      	b.n	8013424 <mg_esc+0x20>
 8013422:	68fb      	ldr	r3, [r7, #12]
 8013424:	617b      	str	r3, [r7, #20]
 8013426:	e01b      	b.n	8013460 <mg_esc+0x5c>
    if (*p == c) return esc ? esc2[p - esc1] : esc1[p - esc2];
 8013428:	697b      	ldr	r3, [r7, #20]
 801342a:	781b      	ldrb	r3, [r3, #0]
 801342c:	461a      	mov	r2, r3
 801342e:	687b      	ldr	r3, [r7, #4]
 8013430:	4293      	cmp	r3, r2
 8013432:	d112      	bne.n	801345a <mg_esc+0x56>
 8013434:	78fb      	ldrb	r3, [r7, #3]
 8013436:	2b00      	cmp	r3, #0
 8013438:	d007      	beq.n	801344a <mg_esc+0x46>
 801343a:	697a      	ldr	r2, [r7, #20]
 801343c:	693b      	ldr	r3, [r7, #16]
 801343e:	1ad3      	subs	r3, r2, r3
 8013440:	461a      	mov	r2, r3
 8013442:	68fb      	ldr	r3, [r7, #12]
 8013444:	4413      	add	r3, r2
 8013446:	781b      	ldrb	r3, [r3, #0]
 8013448:	e00f      	b.n	801346a <mg_esc+0x66>
 801344a:	697a      	ldr	r2, [r7, #20]
 801344c:	68fb      	ldr	r3, [r7, #12]
 801344e:	1ad3      	subs	r3, r2, r3
 8013450:	461a      	mov	r2, r3
 8013452:	693b      	ldr	r3, [r7, #16]
 8013454:	4413      	add	r3, r2
 8013456:	781b      	ldrb	r3, [r3, #0]
 8013458:	e007      	b.n	801346a <mg_esc+0x66>
  for (p = esc ? esc1 : esc2; *p != '\0'; p++) {
 801345a:	697b      	ldr	r3, [r7, #20]
 801345c:	3301      	adds	r3, #1
 801345e:	617b      	str	r3, [r7, #20]
 8013460:	697b      	ldr	r3, [r7, #20]
 8013462:	781b      	ldrb	r3, [r3, #0]
 8013464:	2b00      	cmp	r3, #0
 8013466:	d1df      	bne.n	8013428 <mg_esc+0x24>
  }
  return 0;
 8013468:	2300      	movs	r3, #0
}
 801346a:	4618      	mov	r0, r3
 801346c:	371c      	adds	r7, #28
 801346e:	46bd      	mov	sp, r7
 8013470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013474:	4770      	bx	lr
 8013476:	bf00      	nop
 8013478:	0802aae8 	.word	0x0802aae8
 801347c:	0802aaf0 	.word	0x0802aaf0

08013480 <mg_escape>:

static char mg_escape(int c) {
 8013480:	b580      	push	{r7, lr}
 8013482:	b082      	sub	sp, #8
 8013484:	af00      	add	r7, sp, #0
 8013486:	6078      	str	r0, [r7, #4]
  return mg_esc(c, true);
 8013488:	2101      	movs	r1, #1
 801348a:	6878      	ldr	r0, [r7, #4]
 801348c:	f7ff ffba 	bl	8013404 <mg_esc>
 8013490:	4603      	mov	r3, r0
}
 8013492:	4618      	mov	r0, r3
 8013494:	3708      	adds	r7, #8
 8013496:	46bd      	mov	sp, r7
 8013498:	bd80      	pop	{r7, pc}

0801349a <qcpy>:

static size_t qcpy(void (*out)(char, void *), void *ptr, char *buf,
                   size_t len) {
 801349a:	b580      	push	{r7, lr}
 801349c:	b088      	sub	sp, #32
 801349e:	af00      	add	r7, sp, #0
 80134a0:	60f8      	str	r0, [r7, #12]
 80134a2:	60b9      	str	r1, [r7, #8]
 80134a4:	607a      	str	r2, [r7, #4]
 80134a6:	603b      	str	r3, [r7, #0]
  size_t i = 0, extra = 0;
 80134a8:	2300      	movs	r3, #0
 80134aa:	61fb      	str	r3, [r7, #28]
 80134ac:	2300      	movs	r3, #0
 80134ae:	61bb      	str	r3, [r7, #24]
  for (i = 0; i < len && buf[i] != '\0'; i++) {
 80134b0:	2300      	movs	r3, #0
 80134b2:	61fb      	str	r3, [r7, #28]
 80134b4:	e023      	b.n	80134fe <qcpy+0x64>
    char c = mg_escape(buf[i]);
 80134b6:	687a      	ldr	r2, [r7, #4]
 80134b8:	69fb      	ldr	r3, [r7, #28]
 80134ba:	4413      	add	r3, r2
 80134bc:	781b      	ldrb	r3, [r3, #0]
 80134be:	4618      	mov	r0, r3
 80134c0:	f7ff ffde 	bl	8013480 <mg_escape>
 80134c4:	4603      	mov	r3, r0
 80134c6:	75fb      	strb	r3, [r7, #23]
    if (c) {
 80134c8:	7dfb      	ldrb	r3, [r7, #23]
 80134ca:	2b00      	cmp	r3, #0
 80134cc:	d00c      	beq.n	80134e8 <qcpy+0x4e>
      out('\\', ptr), out(c, ptr), extra++;
 80134ce:	68fb      	ldr	r3, [r7, #12]
 80134d0:	68b9      	ldr	r1, [r7, #8]
 80134d2:	205c      	movs	r0, #92	@ 0x5c
 80134d4:	4798      	blx	r3
 80134d6:	7dfa      	ldrb	r2, [r7, #23]
 80134d8:	68fb      	ldr	r3, [r7, #12]
 80134da:	68b9      	ldr	r1, [r7, #8]
 80134dc:	4610      	mov	r0, r2
 80134de:	4798      	blx	r3
 80134e0:	69bb      	ldr	r3, [r7, #24]
 80134e2:	3301      	adds	r3, #1
 80134e4:	61bb      	str	r3, [r7, #24]
 80134e6:	e007      	b.n	80134f8 <qcpy+0x5e>
    } else {
      out(buf[i], ptr);
 80134e8:	687a      	ldr	r2, [r7, #4]
 80134ea:	69fb      	ldr	r3, [r7, #28]
 80134ec:	4413      	add	r3, r2
 80134ee:	781a      	ldrb	r2, [r3, #0]
 80134f0:	68fb      	ldr	r3, [r7, #12]
 80134f2:	68b9      	ldr	r1, [r7, #8]
 80134f4:	4610      	mov	r0, r2
 80134f6:	4798      	blx	r3
  for (i = 0; i < len && buf[i] != '\0'; i++) {
 80134f8:	69fb      	ldr	r3, [r7, #28]
 80134fa:	3301      	adds	r3, #1
 80134fc:	61fb      	str	r3, [r7, #28]
 80134fe:	69fa      	ldr	r2, [r7, #28]
 8013500:	683b      	ldr	r3, [r7, #0]
 8013502:	429a      	cmp	r2, r3
 8013504:	d205      	bcs.n	8013512 <qcpy+0x78>
 8013506:	687a      	ldr	r2, [r7, #4]
 8013508:	69fb      	ldr	r3, [r7, #28]
 801350a:	4413      	add	r3, r2
 801350c:	781b      	ldrb	r3, [r3, #0]
 801350e:	2b00      	cmp	r3, #0
 8013510:	d1d1      	bne.n	80134b6 <qcpy+0x1c>
    }
  }
  return i + extra;
 8013512:	69fa      	ldr	r2, [r7, #28]
 8013514:	69bb      	ldr	r3, [r7, #24]
 8013516:	4413      	add	r3, r2
}
 8013518:	4618      	mov	r0, r3
 801351a:	3720      	adds	r7, #32
 801351c:	46bd      	mov	sp, r7
 801351e:	bd80      	pop	{r7, pc}

08013520 <mg_print_hex>:
    n += j;
  }
  return n;
}

size_t mg_print_hex(void (*out)(char, void *), void *arg, va_list *ap) {
 8013520:	b580      	push	{r7, lr}
 8013522:	b088      	sub	sp, #32
 8013524:	af00      	add	r7, sp, #0
 8013526:	60f8      	str	r0, [r7, #12]
 8013528:	60b9      	str	r1, [r7, #8]
 801352a:	607a      	str	r2, [r7, #4]
  size_t bl = (size_t) va_arg(*ap, int);
 801352c:	687b      	ldr	r3, [r7, #4]
 801352e:	681b      	ldr	r3, [r3, #0]
 8013530:	1d19      	adds	r1, r3, #4
 8013532:	687a      	ldr	r2, [r7, #4]
 8013534:	6011      	str	r1, [r2, #0]
 8013536:	681b      	ldr	r3, [r3, #0]
 8013538:	61bb      	str	r3, [r7, #24]
  uint8_t *p = va_arg(*ap, uint8_t *);
 801353a:	687b      	ldr	r3, [r7, #4]
 801353c:	681b      	ldr	r3, [r3, #0]
 801353e:	1d19      	adds	r1, r3, #4
 8013540:	687a      	ldr	r2, [r7, #4]
 8013542:	6011      	str	r1, [r2, #0]
 8013544:	681b      	ldr	r3, [r3, #0]
 8013546:	617b      	str	r3, [r7, #20]
  const char *hex = "0123456789abcdef";
 8013548:	4b16      	ldr	r3, [pc, #88]	@ (80135a4 <mg_print_hex+0x84>)
 801354a:	613b      	str	r3, [r7, #16]
  size_t j;
  for (j = 0; j < bl; j++) {
 801354c:	2300      	movs	r3, #0
 801354e:	61fb      	str	r3, [r7, #28]
 8013550:	e01e      	b.n	8013590 <mg_print_hex+0x70>
    out(hex[(p[j] >> 4) & 0x0F], arg);
 8013552:	697a      	ldr	r2, [r7, #20]
 8013554:	69fb      	ldr	r3, [r7, #28]
 8013556:	4413      	add	r3, r2
 8013558:	781b      	ldrb	r3, [r3, #0]
 801355a:	091b      	lsrs	r3, r3, #4
 801355c:	b2db      	uxtb	r3, r3
 801355e:	f003 030f 	and.w	r3, r3, #15
 8013562:	693a      	ldr	r2, [r7, #16]
 8013564:	4413      	add	r3, r2
 8013566:	781a      	ldrb	r2, [r3, #0]
 8013568:	68fb      	ldr	r3, [r7, #12]
 801356a:	68b9      	ldr	r1, [r7, #8]
 801356c:	4610      	mov	r0, r2
 801356e:	4798      	blx	r3
    out(hex[p[j] & 0x0F], arg);
 8013570:	697a      	ldr	r2, [r7, #20]
 8013572:	69fb      	ldr	r3, [r7, #28]
 8013574:	4413      	add	r3, r2
 8013576:	781b      	ldrb	r3, [r3, #0]
 8013578:	f003 030f 	and.w	r3, r3, #15
 801357c:	693a      	ldr	r2, [r7, #16]
 801357e:	4413      	add	r3, r2
 8013580:	781a      	ldrb	r2, [r3, #0]
 8013582:	68fb      	ldr	r3, [r7, #12]
 8013584:	68b9      	ldr	r1, [r7, #8]
 8013586:	4610      	mov	r0, r2
 8013588:	4798      	blx	r3
  for (j = 0; j < bl; j++) {
 801358a:	69fb      	ldr	r3, [r7, #28]
 801358c:	3301      	adds	r3, #1
 801358e:	61fb      	str	r3, [r7, #28]
 8013590:	69fa      	ldr	r2, [r7, #28]
 8013592:	69bb      	ldr	r3, [r7, #24]
 8013594:	429a      	cmp	r2, r3
 8013596:	d3dc      	bcc.n	8013552 <mg_print_hex+0x32>
  }
  return 2 * bl;
 8013598:	69bb      	ldr	r3, [r7, #24]
 801359a:	005b      	lsls	r3, r3, #1
}
 801359c:	4618      	mov	r0, r3
 801359e:	3720      	adds	r7, #32
 80135a0:	46bd      	mov	sp, r7
 80135a2:	bd80      	pop	{r7, pc}
 80135a4:	08029f24 	.word	0x08029f24

080135a8 <mg_print_esc>:
  size_t len = (size_t) va_arg(*ap, int);
  uint8_t *buf = va_arg(*ap, uint8_t *);
  return bcpy(out, arg, buf, len);
}

size_t mg_print_esc(void (*out)(char, void *), void *arg, va_list *ap) {
 80135a8:	b580      	push	{r7, lr}
 80135aa:	b086      	sub	sp, #24
 80135ac:	af00      	add	r7, sp, #0
 80135ae:	60f8      	str	r0, [r7, #12]
 80135b0:	60b9      	str	r1, [r7, #8]
 80135b2:	607a      	str	r2, [r7, #4]
  size_t len = (size_t) va_arg(*ap, int);
 80135b4:	687b      	ldr	r3, [r7, #4]
 80135b6:	681b      	ldr	r3, [r3, #0]
 80135b8:	1d19      	adds	r1, r3, #4
 80135ba:	687a      	ldr	r2, [r7, #4]
 80135bc:	6011      	str	r1, [r2, #0]
 80135be:	681b      	ldr	r3, [r3, #0]
 80135c0:	617b      	str	r3, [r7, #20]
  char *p = va_arg(*ap, char *);
 80135c2:	687b      	ldr	r3, [r7, #4]
 80135c4:	681b      	ldr	r3, [r3, #0]
 80135c6:	1d19      	adds	r1, r3, #4
 80135c8:	687a      	ldr	r2, [r7, #4]
 80135ca:	6011      	str	r1, [r2, #0]
 80135cc:	681b      	ldr	r3, [r3, #0]
 80135ce:	613b      	str	r3, [r7, #16]
  if (len == 0) len = p == NULL ? 0 : strlen(p);
 80135d0:	697b      	ldr	r3, [r7, #20]
 80135d2:	2b00      	cmp	r3, #0
 80135d4:	d109      	bne.n	80135ea <mg_print_esc+0x42>
 80135d6:	693b      	ldr	r3, [r7, #16]
 80135d8:	2b00      	cmp	r3, #0
 80135da:	d004      	beq.n	80135e6 <mg_print_esc+0x3e>
 80135dc:	6938      	ldr	r0, [r7, #16]
 80135de:	f7ec fef7 	bl	80003d0 <strlen>
 80135e2:	4603      	mov	r3, r0
 80135e4:	e000      	b.n	80135e8 <mg_print_esc+0x40>
 80135e6:	2300      	movs	r3, #0
 80135e8:	617b      	str	r3, [r7, #20]
  return qcpy(out, arg, p, len);
 80135ea:	697b      	ldr	r3, [r7, #20]
 80135ec:	693a      	ldr	r2, [r7, #16]
 80135ee:	68b9      	ldr	r1, [r7, #8]
 80135f0:	68f8      	ldr	r0, [r7, #12]
 80135f2:	f7ff ff52 	bl	801349a <qcpy>
 80135f6:	4603      	mov	r3, r0
}
 80135f8:	4618      	mov	r0, r3
 80135fa:	3718      	adds	r7, #24
 80135fc:	46bd      	mov	sp, r7
 80135fe:	bd80      	pop	{r7, pc}

08013600 <mg_queue_read_len>:
  q->size = size;
  q->buf = buf;
  q->head = q->tail = 0;
}

static size_t mg_queue_read_len(struct mg_queue *q) {
 8013600:	b580      	push	{r7, lr}
 8013602:	b084      	sub	sp, #16
 8013604:	af00      	add	r7, sp, #0
 8013606:	6078      	str	r0, [r7, #4]
  uint32_t n = 0;
 8013608:	2300      	movs	r3, #0
 801360a:	60fb      	str	r3, [r7, #12]
  MG_MEMORY_BARRIER();
 801360c:	f3bf 8f5b 	dmb	ish
  memcpy(&n, q->buf + q->tail, sizeof(n));
 8013610:	687b      	ldr	r3, [r7, #4]
 8013612:	681a      	ldr	r2, [r3, #0]
 8013614:	687b      	ldr	r3, [r7, #4]
 8013616:	689b      	ldr	r3, [r3, #8]
 8013618:	4413      	add	r3, r2
 801361a:	681b      	ldr	r3, [r3, #0]
 801361c:	60fb      	str	r3, [r7, #12]
  assert(q->tail + n + sizeof(n) <= q->size);
 801361e:	687b      	ldr	r3, [r7, #4]
 8013620:	689a      	ldr	r2, [r3, #8]
 8013622:	68fb      	ldr	r3, [r7, #12]
 8013624:	4413      	add	r3, r2
 8013626:	1d1a      	adds	r2, r3, #4
 8013628:	687b      	ldr	r3, [r7, #4]
 801362a:	685b      	ldr	r3, [r3, #4]
 801362c:	429a      	cmp	r2, r3
 801362e:	d906      	bls.n	801363e <mg_queue_read_len+0x3e>
 8013630:	4b05      	ldr	r3, [pc, #20]	@ (8013648 <mg_queue_read_len+0x48>)
 8013632:	4a06      	ldr	r2, [pc, #24]	@ (801364c <mg_queue_read_len+0x4c>)
 8013634:	f641 6181 	movw	r1, #7809	@ 0x1e81
 8013638:	4805      	ldr	r0, [pc, #20]	@ (8013650 <mg_queue_read_len+0x50>)
 801363a:	f012 f971 	bl	8025920 <__assert_func>
  return n;
 801363e:	68fb      	ldr	r3, [r7, #12]
}
 8013640:	4618      	mov	r0, r3
 8013642:	3710      	adds	r7, #16
 8013644:	46bd      	mov	sp, r7
 8013646:	bd80      	pop	{r7, pc}
 8013648:	0802b3e8 	.word	0x0802b3e8
 801364c:	0802d9f0 	.word	0x0802d9f0
 8013650:	08029c3c 	.word	0x08029c3c

08013654 <mg_queue_write_len>:

static void mg_queue_write_len(struct mg_queue *q, size_t len) {
 8013654:	b480      	push	{r7}
 8013656:	b085      	sub	sp, #20
 8013658:	af00      	add	r7, sp, #0
 801365a:	6078      	str	r0, [r7, #4]
 801365c:	6039      	str	r1, [r7, #0]
  uint32_t n = (uint32_t) len;
 801365e:	683b      	ldr	r3, [r7, #0]
 8013660:	60fb      	str	r3, [r7, #12]
  memcpy(q->buf + q->head, &n, sizeof(n));
 8013662:	687b      	ldr	r3, [r7, #4]
 8013664:	681a      	ldr	r2, [r3, #0]
 8013666:	687b      	ldr	r3, [r7, #4]
 8013668:	68db      	ldr	r3, [r3, #12]
 801366a:	4413      	add	r3, r2
 801366c:	68fa      	ldr	r2, [r7, #12]
 801366e:	601a      	str	r2, [r3, #0]
  MG_MEMORY_BARRIER();
 8013670:	f3bf 8f5b 	dmb	ish
}
 8013674:	bf00      	nop
 8013676:	3714      	adds	r7, #20
 8013678:	46bd      	mov	sp, r7
 801367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801367e:	4770      	bx	lr

08013680 <mg_queue_book>:

size_t mg_queue_book(struct mg_queue *q, char **buf, size_t len) {
 8013680:	b580      	push	{r7, lr}
 8013682:	b086      	sub	sp, #24
 8013684:	af00      	add	r7, sp, #0
 8013686:	60f8      	str	r0, [r7, #12]
 8013688:	60b9      	str	r1, [r7, #8]
 801368a:	607a      	str	r2, [r7, #4]
  size_t space = 0, hs = sizeof(uint32_t) * 2;  // *2 is for the 0 marker
 801368c:	2300      	movs	r3, #0
 801368e:	617b      	str	r3, [r7, #20]
 8013690:	2308      	movs	r3, #8
 8013692:	613b      	str	r3, [r7, #16]
  if (q->head >= q->tail && q->head + len + hs <= q->size) {
 8013694:	68fb      	ldr	r3, [r7, #12]
 8013696:	68da      	ldr	r2, [r3, #12]
 8013698:	68fb      	ldr	r3, [r7, #12]
 801369a:	689b      	ldr	r3, [r3, #8]
 801369c:	429a      	cmp	r2, r3
 801369e:	d312      	bcc.n	80136c6 <mg_queue_book+0x46>
 80136a0:	68fb      	ldr	r3, [r7, #12]
 80136a2:	68da      	ldr	r2, [r3, #12]
 80136a4:	687b      	ldr	r3, [r7, #4]
 80136a6:	441a      	add	r2, r3
 80136a8:	693b      	ldr	r3, [r7, #16]
 80136aa:	441a      	add	r2, r3
 80136ac:	68fb      	ldr	r3, [r7, #12]
 80136ae:	685b      	ldr	r3, [r3, #4]
 80136b0:	429a      	cmp	r2, r3
 80136b2:	d808      	bhi.n	80136c6 <mg_queue_book+0x46>
    space = q->size - q->head - hs;  // There is enough space
 80136b4:	68fb      	ldr	r3, [r7, #12]
 80136b6:	685a      	ldr	r2, [r3, #4]
 80136b8:	68fb      	ldr	r3, [r7, #12]
 80136ba:	68db      	ldr	r3, [r3, #12]
 80136bc:	1ad2      	subs	r2, r2, r3
 80136be:	693b      	ldr	r3, [r7, #16]
 80136c0:	1ad3      	subs	r3, r2, r3
 80136c2:	617b      	str	r3, [r7, #20]
 80136c4:	e011      	b.n	80136ea <mg_queue_book+0x6a>
  } else if (q->head >= q->tail && q->tail > hs) {
 80136c6:	68fb      	ldr	r3, [r7, #12]
 80136c8:	68da      	ldr	r2, [r3, #12]
 80136ca:	68fb      	ldr	r3, [r7, #12]
 80136cc:	689b      	ldr	r3, [r3, #8]
 80136ce:	429a      	cmp	r2, r3
 80136d0:	d30b      	bcc.n	80136ea <mg_queue_book+0x6a>
 80136d2:	68fb      	ldr	r3, [r7, #12]
 80136d4:	689b      	ldr	r3, [r3, #8]
 80136d6:	693a      	ldr	r2, [r7, #16]
 80136d8:	429a      	cmp	r2, r3
 80136da:	d206      	bcs.n	80136ea <mg_queue_book+0x6a>
    mg_queue_write_len(q, 0);  // Not enough space ahead
 80136dc:	2100      	movs	r1, #0
 80136de:	68f8      	ldr	r0, [r7, #12]
 80136e0:	f7ff ffb8 	bl	8013654 <mg_queue_write_len>
    q->head = 0;               // Wrap head to the beginning
 80136e4:	68fb      	ldr	r3, [r7, #12]
 80136e6:	2200      	movs	r2, #0
 80136e8:	60da      	str	r2, [r3, #12]
  }
  if (q->head + hs + len < q->tail) space = q->tail - q->head - hs;
 80136ea:	68fb      	ldr	r3, [r7, #12]
 80136ec:	68da      	ldr	r2, [r3, #12]
 80136ee:	693b      	ldr	r3, [r7, #16]
 80136f0:	441a      	add	r2, r3
 80136f2:	687b      	ldr	r3, [r7, #4]
 80136f4:	441a      	add	r2, r3
 80136f6:	68fb      	ldr	r3, [r7, #12]
 80136f8:	689b      	ldr	r3, [r3, #8]
 80136fa:	429a      	cmp	r2, r3
 80136fc:	d207      	bcs.n	801370e <mg_queue_book+0x8e>
 80136fe:	68fb      	ldr	r3, [r7, #12]
 8013700:	689a      	ldr	r2, [r3, #8]
 8013702:	68fb      	ldr	r3, [r7, #12]
 8013704:	68db      	ldr	r3, [r3, #12]
 8013706:	1ad2      	subs	r2, r2, r3
 8013708:	693b      	ldr	r3, [r7, #16]
 801370a:	1ad3      	subs	r3, r2, r3
 801370c:	617b      	str	r3, [r7, #20]
  if (buf != NULL) *buf = q->buf + q->head + sizeof(uint32_t);
 801370e:	68bb      	ldr	r3, [r7, #8]
 8013710:	2b00      	cmp	r3, #0
 8013712:	d007      	beq.n	8013724 <mg_queue_book+0xa4>
 8013714:	68fb      	ldr	r3, [r7, #12]
 8013716:	681a      	ldr	r2, [r3, #0]
 8013718:	68fb      	ldr	r3, [r7, #12]
 801371a:	68db      	ldr	r3, [r3, #12]
 801371c:	3304      	adds	r3, #4
 801371e:	441a      	add	r2, r3
 8013720:	68bb      	ldr	r3, [r7, #8]
 8013722:	601a      	str	r2, [r3, #0]
  return space;
 8013724:	697b      	ldr	r3, [r7, #20]
}
 8013726:	4618      	mov	r0, r3
 8013728:	3718      	adds	r7, #24
 801372a:	46bd      	mov	sp, r7
 801372c:	bd80      	pop	{r7, pc}
	...

08013730 <mg_queue_next>:

size_t mg_queue_next(struct mg_queue *q, char **buf) {
 8013730:	b580      	push	{r7, lr}
 8013732:	b084      	sub	sp, #16
 8013734:	af00      	add	r7, sp, #0
 8013736:	6078      	str	r0, [r7, #4]
 8013738:	6039      	str	r1, [r7, #0]
  size_t len = 0;
 801373a:	2300      	movs	r3, #0
 801373c:	60fb      	str	r3, [r7, #12]
  if (q->tail != q->head) {
 801373e:	687b      	ldr	r3, [r7, #4]
 8013740:	689a      	ldr	r2, [r3, #8]
 8013742:	687b      	ldr	r3, [r7, #4]
 8013744:	68db      	ldr	r3, [r3, #12]
 8013746:	429a      	cmp	r2, r3
 8013748:	d013      	beq.n	8013772 <mg_queue_next+0x42>
    len = mg_queue_read_len(q);
 801374a:	6878      	ldr	r0, [r7, #4]
 801374c:	f7ff ff58 	bl	8013600 <mg_queue_read_len>
 8013750:	60f8      	str	r0, [r7, #12]
    if (len == 0) {  // Zero (head wrapped) ?
 8013752:	68fb      	ldr	r3, [r7, #12]
 8013754:	2b00      	cmp	r3, #0
 8013756:	d10c      	bne.n	8013772 <mg_queue_next+0x42>
      q->tail = 0;   // Reset tail to the start
 8013758:	687b      	ldr	r3, [r7, #4]
 801375a:	2200      	movs	r2, #0
 801375c:	609a      	str	r2, [r3, #8]
      if (q->head > q->tail) len = mg_queue_read_len(q);  // Read again
 801375e:	687b      	ldr	r3, [r7, #4]
 8013760:	68da      	ldr	r2, [r3, #12]
 8013762:	687b      	ldr	r3, [r7, #4]
 8013764:	689b      	ldr	r3, [r3, #8]
 8013766:	429a      	cmp	r2, r3
 8013768:	d903      	bls.n	8013772 <mg_queue_next+0x42>
 801376a:	6878      	ldr	r0, [r7, #4]
 801376c:	f7ff ff48 	bl	8013600 <mg_queue_read_len>
 8013770:	60f8      	str	r0, [r7, #12]
    }
  }
  if (buf != NULL) *buf = q->buf + q->tail + sizeof(uint32_t);
 8013772:	683b      	ldr	r3, [r7, #0]
 8013774:	2b00      	cmp	r3, #0
 8013776:	d007      	beq.n	8013788 <mg_queue_next+0x58>
 8013778:	687b      	ldr	r3, [r7, #4]
 801377a:	681a      	ldr	r2, [r3, #0]
 801377c:	687b      	ldr	r3, [r7, #4]
 801377e:	689b      	ldr	r3, [r3, #8]
 8013780:	3304      	adds	r3, #4
 8013782:	441a      	add	r2, r3
 8013784:	683b      	ldr	r3, [r7, #0]
 8013786:	601a      	str	r2, [r3, #0]
  assert(q->tail + len <= q->size);
 8013788:	687b      	ldr	r3, [r7, #4]
 801378a:	689a      	ldr	r2, [r3, #8]
 801378c:	68fb      	ldr	r3, [r7, #12]
 801378e:	441a      	add	r2, r3
 8013790:	687b      	ldr	r3, [r7, #4]
 8013792:	685b      	ldr	r3, [r3, #4]
 8013794:	429a      	cmp	r2, r3
 8013796:	d906      	bls.n	80137a6 <mg_queue_next+0x76>
 8013798:	4b05      	ldr	r3, [pc, #20]	@ (80137b0 <mg_queue_next+0x80>)
 801379a:	4a06      	ldr	r2, [pc, #24]	@ (80137b4 <mg_queue_next+0x84>)
 801379c:	f641 61a2 	movw	r1, #7842	@ 0x1ea2
 80137a0:	4805      	ldr	r0, [pc, #20]	@ (80137b8 <mg_queue_next+0x88>)
 80137a2:	f012 f8bd 	bl	8025920 <__assert_func>
  return len;
 80137a6:	68fb      	ldr	r3, [r7, #12]
}
 80137a8:	4618      	mov	r0, r3
 80137aa:	3710      	adds	r7, #16
 80137ac:	46bd      	mov	sp, r7
 80137ae:	bd80      	pop	{r7, pc}
 80137b0:	0802b40c 	.word	0x0802b40c
 80137b4:	0802da04 	.word	0x0802da04
 80137b8:	08029c3c 	.word	0x08029c3c

080137bc <mg_queue_add>:

void mg_queue_add(struct mg_queue *q, size_t len) {
 80137bc:	b580      	push	{r7, lr}
 80137be:	b082      	sub	sp, #8
 80137c0:	af00      	add	r7, sp, #0
 80137c2:	6078      	str	r0, [r7, #4]
 80137c4:	6039      	str	r1, [r7, #0]
  assert(len > 0);
 80137c6:	683b      	ldr	r3, [r7, #0]
 80137c8:	2b00      	cmp	r3, #0
 80137ca:	d106      	bne.n	80137da <mg_queue_add+0x1e>
 80137cc:	4b13      	ldr	r3, [pc, #76]	@ (801381c <mg_queue_add+0x60>)
 80137ce:	4a14      	ldr	r2, [pc, #80]	@ (8013820 <mg_queue_add+0x64>)
 80137d0:	f641 61a7 	movw	r1, #7847	@ 0x1ea7
 80137d4:	4813      	ldr	r0, [pc, #76]	@ (8013824 <mg_queue_add+0x68>)
 80137d6:	f012 f8a3 	bl	8025920 <__assert_func>
  mg_queue_write_len(q, len);
 80137da:	6839      	ldr	r1, [r7, #0]
 80137dc:	6878      	ldr	r0, [r7, #4]
 80137de:	f7ff ff39 	bl	8013654 <mg_queue_write_len>
  assert(q->head + sizeof(uint32_t) * 2 + len <= q->size);
 80137e2:	687b      	ldr	r3, [r7, #4]
 80137e4:	68da      	ldr	r2, [r3, #12]
 80137e6:	683b      	ldr	r3, [r7, #0]
 80137e8:	4413      	add	r3, r2
 80137ea:	f103 0208 	add.w	r2, r3, #8
 80137ee:	687b      	ldr	r3, [r7, #4]
 80137f0:	685b      	ldr	r3, [r3, #4]
 80137f2:	429a      	cmp	r2, r3
 80137f4:	d906      	bls.n	8013804 <mg_queue_add+0x48>
 80137f6:	4b0c      	ldr	r3, [pc, #48]	@ (8013828 <mg_queue_add+0x6c>)
 80137f8:	4a09      	ldr	r2, [pc, #36]	@ (8013820 <mg_queue_add+0x64>)
 80137fa:	f641 61a9 	movw	r1, #7849	@ 0x1ea9
 80137fe:	4809      	ldr	r0, [pc, #36]	@ (8013824 <mg_queue_add+0x68>)
 8013800:	f012 f88e 	bl	8025920 <__assert_func>
  q->head += len + sizeof(uint32_t);
 8013804:	687b      	ldr	r3, [r7, #4]
 8013806:	68da      	ldr	r2, [r3, #12]
 8013808:	683b      	ldr	r3, [r7, #0]
 801380a:	4413      	add	r3, r2
 801380c:	1d1a      	adds	r2, r3, #4
 801380e:	687b      	ldr	r3, [r7, #4]
 8013810:	60da      	str	r2, [r3, #12]
}
 8013812:	bf00      	nop
 8013814:	3708      	adds	r7, #8
 8013816:	46bd      	mov	sp, r7
 8013818:	bd80      	pop	{r7, pc}
 801381a:	bf00      	nop
 801381c:	0802b428 	.word	0x0802b428
 8013820:	0802da14 	.word	0x0802da14
 8013824:	08029c3c 	.word	0x08029c3c
 8013828:	0802b430 	.word	0x0802b430

0801382c <mg_queue_del>:

void mg_queue_del(struct mg_queue *q, size_t len) {
 801382c:	b580      	push	{r7, lr}
 801382e:	b082      	sub	sp, #8
 8013830:	af00      	add	r7, sp, #0
 8013832:	6078      	str	r0, [r7, #4]
 8013834:	6039      	str	r1, [r7, #0]
  q->tail += len + sizeof(uint32_t);
 8013836:	687b      	ldr	r3, [r7, #4]
 8013838:	689a      	ldr	r2, [r3, #8]
 801383a:	683b      	ldr	r3, [r7, #0]
 801383c:	4413      	add	r3, r2
 801383e:	1d1a      	adds	r2, r3, #4
 8013840:	687b      	ldr	r3, [r7, #4]
 8013842:	609a      	str	r2, [r3, #8]
  assert(q->tail + sizeof(uint32_t) <= q->size);
 8013844:	687b      	ldr	r3, [r7, #4]
 8013846:	689b      	ldr	r3, [r3, #8]
 8013848:	1d1a      	adds	r2, r3, #4
 801384a:	687b      	ldr	r3, [r7, #4]
 801384c:	685b      	ldr	r3, [r3, #4]
 801384e:	429a      	cmp	r2, r3
 8013850:	d906      	bls.n	8013860 <mg_queue_del+0x34>
 8013852:	4b05      	ldr	r3, [pc, #20]	@ (8013868 <mg_queue_del+0x3c>)
 8013854:	4a05      	ldr	r2, [pc, #20]	@ (801386c <mg_queue_del+0x40>)
 8013856:	f641 61af 	movw	r1, #7855	@ 0x1eaf
 801385a:	4805      	ldr	r0, [pc, #20]	@ (8013870 <mg_queue_del+0x44>)
 801385c:	f012 f860 	bl	8025920 <__assert_func>
}
 8013860:	bf00      	nop
 8013862:	3708      	adds	r7, #8
 8013864:	46bd      	mov	sp, r7
 8013866:	bd80      	pop	{r7, pc}
 8013868:	0802b460 	.word	0x0802b460
 801386c:	0802da24 	.word	0x0802da24
 8013870:	08029c3c 	.word	0x08029c3c

08013874 <blk0>:
  uint32_t l[16];
};

#define rol(value, bits) (((value) << (bits)) | ((value) >> (32 - (bits))))

static uint32_t blk0(union char64long16 *block, int i) {
 8013874:	b480      	push	{r7}
 8013876:	b083      	sub	sp, #12
 8013878:	af00      	add	r7, sp, #0
 801387a:	6078      	str	r0, [r7, #4]
 801387c:	6039      	str	r1, [r7, #0]
  if (MG_BIG_ENDIAN) {
 801387e:	4b12      	ldr	r3, [pc, #72]	@ (80138c8 <blk0+0x54>)
 8013880:	881b      	ldrh	r3, [r3, #0]
 8013882:	2bff      	cmp	r3, #255	@ 0xff
 8013884:	d915      	bls.n	80138b2 <blk0+0x3e>
  } else {
    block->l[i] = (rol(block->l[i], 24) & 0xFF00FF00) |
 8013886:	687b      	ldr	r3, [r7, #4]
 8013888:	683a      	ldr	r2, [r7, #0]
 801388a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801388e:	ea4f 2333 	mov.w	r3, r3, ror #8
 8013892:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
                  (rol(block->l[i], 8) & 0x00FF00FF);
 8013896:	687b      	ldr	r3, [r7, #4]
 8013898:	6839      	ldr	r1, [r7, #0]
 801389a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801389e:	ea4f 6333 	mov.w	r3, r3, ror #24
 80138a2:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
    block->l[i] = (rol(block->l[i], 24) & 0xFF00FF00) |
 80138a6:	ea42 0103 	orr.w	r1, r2, r3
 80138aa:	687b      	ldr	r3, [r7, #4]
 80138ac:	683a      	ldr	r2, [r7, #0]
 80138ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  return block->l[i];
 80138b2:	687b      	ldr	r3, [r7, #4]
 80138b4:	683a      	ldr	r2, [r7, #0]
 80138b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
 80138ba:	4618      	mov	r0, r3
 80138bc:	370c      	adds	r7, #12
 80138be:	46bd      	mov	sp, r7
 80138c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138c4:	4770      	bx	lr
 80138c6:	bf00      	nop
 80138c8:	0802ab30 	.word	0x0802ab30

080138cc <mg_sha1_transform>:
#define R4(v, w, x, y, z, i)                          \
  z += (w ^ x ^ y) + blk(i) + 0xCA62C1D6 + rol(v, 5); \
  w = rol(w, 30);

static void mg_sha1_transform(uint32_t state[5],
                              const unsigned char *buffer) {
 80138cc:	b590      	push	{r4, r7, lr}
 80138ce:	b099      	sub	sp, #100	@ 0x64
 80138d0:	af00      	add	r7, sp, #0
 80138d2:	6078      	str	r0, [r7, #4]
 80138d4:	6039      	str	r1, [r7, #0]
  uint32_t a, b, c, d, e;
  union char64long16 block[1];

  memcpy(block, buffer, 64);
 80138d6:	f107 030c 	add.w	r3, r7, #12
 80138da:	2240      	movs	r2, #64	@ 0x40
 80138dc:	6839      	ldr	r1, [r7, #0]
 80138de:	4618      	mov	r0, r3
 80138e0:	f014 f82b 	bl	802793a <memcpy>
  a = state[0];
 80138e4:	687b      	ldr	r3, [r7, #4]
 80138e6:	681b      	ldr	r3, [r3, #0]
 80138e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  b = state[1];
 80138ea:	687b      	ldr	r3, [r7, #4]
 80138ec:	685b      	ldr	r3, [r3, #4]
 80138ee:	65bb      	str	r3, [r7, #88]	@ 0x58
  c = state[2];
 80138f0:	687b      	ldr	r3, [r7, #4]
 80138f2:	689b      	ldr	r3, [r3, #8]
 80138f4:	657b      	str	r3, [r7, #84]	@ 0x54
  d = state[3];
 80138f6:	687b      	ldr	r3, [r7, #4]
 80138f8:	68db      	ldr	r3, [r3, #12]
 80138fa:	653b      	str	r3, [r7, #80]	@ 0x50
  e = state[4];
 80138fc:	687b      	ldr	r3, [r7, #4]
 80138fe:	691b      	ldr	r3, [r3, #16]
 8013900:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R0(a, b, c, d, e, 0);
 8013902:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8013904:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013906:	405a      	eors	r2, r3
 8013908:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801390a:	401a      	ands	r2, r3
 801390c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801390e:	ea82 0403 	eor.w	r4, r2, r3
 8013912:	f107 030c 	add.w	r3, r7, #12
 8013916:	2100      	movs	r1, #0
 8013918:	4618      	mov	r0, r3
 801391a:	f7ff ffab 	bl	8013874 <blk0>
 801391e:	4603      	mov	r3, r0
 8013920:	18e2      	adds	r2, r4, r3
 8013922:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013924:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8013928:	441a      	add	r2, r3
 801392a:	4bbd      	ldr	r3, [pc, #756]	@ (8013c20 <mg_sha1_transform+0x354>)
 801392c:	4413      	add	r3, r2
 801392e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8013930:	4413      	add	r3, r2
 8013932:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8013934:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013936:	ea4f 03b3 	mov.w	r3, r3, ror #2
 801393a:	65bb      	str	r3, [r7, #88]	@ 0x58
  R0(e, a, b, c, d, 1);
 801393c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801393e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013940:	405a      	eors	r2, r3
 8013942:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013944:	401a      	ands	r2, r3
 8013946:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013948:	ea82 0403 	eor.w	r4, r2, r3
 801394c:	f107 030c 	add.w	r3, r7, #12
 8013950:	2101      	movs	r1, #1
 8013952:	4618      	mov	r0, r3
 8013954:	f7ff ff8e 	bl	8013874 <blk0>
 8013958:	4603      	mov	r3, r0
 801395a:	18e2      	adds	r2, r4, r3
 801395c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801395e:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8013962:	441a      	add	r2, r3
 8013964:	4bae      	ldr	r3, [pc, #696]	@ (8013c20 <mg_sha1_transform+0x354>)
 8013966:	4413      	add	r3, r2
 8013968:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801396a:	4413      	add	r3, r2
 801396c:	653b      	str	r3, [r7, #80]	@ 0x50
 801396e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013970:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8013974:	65fb      	str	r3, [r7, #92]	@ 0x5c
  R0(d, e, a, b, c, 2);
 8013976:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8013978:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801397a:	405a      	eors	r2, r3
 801397c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801397e:	401a      	ands	r2, r3
 8013980:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013982:	ea82 0403 	eor.w	r4, r2, r3
 8013986:	f107 030c 	add.w	r3, r7, #12
 801398a:	2102      	movs	r1, #2
 801398c:	4618      	mov	r0, r3
 801398e:	f7ff ff71 	bl	8013874 <blk0>
 8013992:	4603      	mov	r3, r0
 8013994:	18e2      	adds	r2, r4, r3
 8013996:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013998:	ea4f 63f3 	mov.w	r3, r3, ror #27
 801399c:	441a      	add	r2, r3
 801399e:	4ba0      	ldr	r3, [pc, #640]	@ (8013c20 <mg_sha1_transform+0x354>)
 80139a0:	4413      	add	r3, r2
 80139a2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80139a4:	4413      	add	r3, r2
 80139a6:	657b      	str	r3, [r7, #84]	@ 0x54
 80139a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80139aa:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80139ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R0(c, d, e, a, b, 3);
 80139b0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80139b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80139b4:	405a      	eors	r2, r3
 80139b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80139b8:	401a      	ands	r2, r3
 80139ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80139bc:	ea82 0403 	eor.w	r4, r2, r3
 80139c0:	f107 030c 	add.w	r3, r7, #12
 80139c4:	2103      	movs	r1, #3
 80139c6:	4618      	mov	r0, r3
 80139c8:	f7ff ff54 	bl	8013874 <blk0>
 80139cc:	4603      	mov	r3, r0
 80139ce:	18e2      	adds	r2, r4, r3
 80139d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80139d2:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80139d6:	441a      	add	r2, r3
 80139d8:	4b91      	ldr	r3, [pc, #580]	@ (8013c20 <mg_sha1_transform+0x354>)
 80139da:	4413      	add	r3, r2
 80139dc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80139de:	4413      	add	r3, r2
 80139e0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80139e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80139e4:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80139e8:	653b      	str	r3, [r7, #80]	@ 0x50
  R0(b, c, d, e, a, 4);
 80139ea:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80139ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80139ee:	405a      	eors	r2, r3
 80139f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80139f2:	401a      	ands	r2, r3
 80139f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80139f6:	ea82 0403 	eor.w	r4, r2, r3
 80139fa:	f107 030c 	add.w	r3, r7, #12
 80139fe:	2104      	movs	r1, #4
 8013a00:	4618      	mov	r0, r3
 8013a02:	f7ff ff37 	bl	8013874 <blk0>
 8013a06:	4603      	mov	r3, r0
 8013a08:	18e2      	adds	r2, r4, r3
 8013a0a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013a0c:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8013a10:	441a      	add	r2, r3
 8013a12:	4b83      	ldr	r3, [pc, #524]	@ (8013c20 <mg_sha1_transform+0x354>)
 8013a14:	4413      	add	r3, r2
 8013a16:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8013a18:	4413      	add	r3, r2
 8013a1a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8013a1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013a1e:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8013a22:	657b      	str	r3, [r7, #84]	@ 0x54
  R0(a, b, c, d, e, 5);
 8013a24:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8013a26:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013a28:	405a      	eors	r2, r3
 8013a2a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013a2c:	401a      	ands	r2, r3
 8013a2e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013a30:	ea82 0403 	eor.w	r4, r2, r3
 8013a34:	f107 030c 	add.w	r3, r7, #12
 8013a38:	2105      	movs	r1, #5
 8013a3a:	4618      	mov	r0, r3
 8013a3c:	f7ff ff1a 	bl	8013874 <blk0>
 8013a40:	4603      	mov	r3, r0
 8013a42:	18e2      	adds	r2, r4, r3
 8013a44:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013a46:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8013a4a:	441a      	add	r2, r3
 8013a4c:	4b74      	ldr	r3, [pc, #464]	@ (8013c20 <mg_sha1_transform+0x354>)
 8013a4e:	4413      	add	r3, r2
 8013a50:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8013a52:	4413      	add	r3, r2
 8013a54:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8013a56:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013a58:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8013a5c:	65bb      	str	r3, [r7, #88]	@ 0x58
  R0(e, a, b, c, d, 6);
 8013a5e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8013a60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013a62:	405a      	eors	r2, r3
 8013a64:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013a66:	401a      	ands	r2, r3
 8013a68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013a6a:	ea82 0403 	eor.w	r4, r2, r3
 8013a6e:	f107 030c 	add.w	r3, r7, #12
 8013a72:	2106      	movs	r1, #6
 8013a74:	4618      	mov	r0, r3
 8013a76:	f7ff fefd 	bl	8013874 <blk0>
 8013a7a:	4603      	mov	r3, r0
 8013a7c:	18e2      	adds	r2, r4, r3
 8013a7e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013a80:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8013a84:	441a      	add	r2, r3
 8013a86:	4b66      	ldr	r3, [pc, #408]	@ (8013c20 <mg_sha1_transform+0x354>)
 8013a88:	4413      	add	r3, r2
 8013a8a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8013a8c:	4413      	add	r3, r2
 8013a8e:	653b      	str	r3, [r7, #80]	@ 0x50
 8013a90:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013a92:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8013a96:	65fb      	str	r3, [r7, #92]	@ 0x5c
  R0(d, e, a, b, c, 7);
 8013a98:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8013a9a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013a9c:	405a      	eors	r2, r3
 8013a9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013aa0:	401a      	ands	r2, r3
 8013aa2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013aa4:	ea82 0403 	eor.w	r4, r2, r3
 8013aa8:	f107 030c 	add.w	r3, r7, #12
 8013aac:	2107      	movs	r1, #7
 8013aae:	4618      	mov	r0, r3
 8013ab0:	f7ff fee0 	bl	8013874 <blk0>
 8013ab4:	4603      	mov	r3, r0
 8013ab6:	18e2      	adds	r2, r4, r3
 8013ab8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013aba:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8013abe:	441a      	add	r2, r3
 8013ac0:	4b57      	ldr	r3, [pc, #348]	@ (8013c20 <mg_sha1_transform+0x354>)
 8013ac2:	4413      	add	r3, r2
 8013ac4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8013ac6:	4413      	add	r3, r2
 8013ac8:	657b      	str	r3, [r7, #84]	@ 0x54
 8013aca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013acc:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8013ad0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R0(c, d, e, a, b, 8);
 8013ad2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8013ad4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013ad6:	405a      	eors	r2, r3
 8013ad8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013ada:	401a      	ands	r2, r3
 8013adc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013ade:	ea82 0403 	eor.w	r4, r2, r3
 8013ae2:	f107 030c 	add.w	r3, r7, #12
 8013ae6:	2108      	movs	r1, #8
 8013ae8:	4618      	mov	r0, r3
 8013aea:	f7ff fec3 	bl	8013874 <blk0>
 8013aee:	4603      	mov	r3, r0
 8013af0:	18e2      	adds	r2, r4, r3
 8013af2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013af4:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8013af8:	441a      	add	r2, r3
 8013afa:	4b49      	ldr	r3, [pc, #292]	@ (8013c20 <mg_sha1_transform+0x354>)
 8013afc:	4413      	add	r3, r2
 8013afe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8013b00:	4413      	add	r3, r2
 8013b02:	65bb      	str	r3, [r7, #88]	@ 0x58
 8013b04:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013b06:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8013b0a:	653b      	str	r3, [r7, #80]	@ 0x50
  R0(b, c, d, e, a, 9);
 8013b0c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8013b0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013b10:	405a      	eors	r2, r3
 8013b12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013b14:	401a      	ands	r2, r3
 8013b16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013b18:	ea82 0403 	eor.w	r4, r2, r3
 8013b1c:	f107 030c 	add.w	r3, r7, #12
 8013b20:	2109      	movs	r1, #9
 8013b22:	4618      	mov	r0, r3
 8013b24:	f7ff fea6 	bl	8013874 <blk0>
 8013b28:	4603      	mov	r3, r0
 8013b2a:	18e2      	adds	r2, r4, r3
 8013b2c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013b2e:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8013b32:	441a      	add	r2, r3
 8013b34:	4b3a      	ldr	r3, [pc, #232]	@ (8013c20 <mg_sha1_transform+0x354>)
 8013b36:	4413      	add	r3, r2
 8013b38:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8013b3a:	4413      	add	r3, r2
 8013b3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8013b3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013b40:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8013b44:	657b      	str	r3, [r7, #84]	@ 0x54
  R0(a, b, c, d, e, 10);
 8013b46:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8013b48:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013b4a:	405a      	eors	r2, r3
 8013b4c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013b4e:	401a      	ands	r2, r3
 8013b50:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013b52:	ea82 0403 	eor.w	r4, r2, r3
 8013b56:	f107 030c 	add.w	r3, r7, #12
 8013b5a:	210a      	movs	r1, #10
 8013b5c:	4618      	mov	r0, r3
 8013b5e:	f7ff fe89 	bl	8013874 <blk0>
 8013b62:	4603      	mov	r3, r0
 8013b64:	18e2      	adds	r2, r4, r3
 8013b66:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013b68:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8013b6c:	441a      	add	r2, r3
 8013b6e:	4b2c      	ldr	r3, [pc, #176]	@ (8013c20 <mg_sha1_transform+0x354>)
 8013b70:	4413      	add	r3, r2
 8013b72:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8013b74:	4413      	add	r3, r2
 8013b76:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8013b78:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013b7a:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8013b7e:	65bb      	str	r3, [r7, #88]	@ 0x58
  R0(e, a, b, c, d, 11);
 8013b80:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8013b82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013b84:	405a      	eors	r2, r3
 8013b86:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013b88:	401a      	ands	r2, r3
 8013b8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013b8c:	ea82 0403 	eor.w	r4, r2, r3
 8013b90:	f107 030c 	add.w	r3, r7, #12
 8013b94:	210b      	movs	r1, #11
 8013b96:	4618      	mov	r0, r3
 8013b98:	f7ff fe6c 	bl	8013874 <blk0>
 8013b9c:	4603      	mov	r3, r0
 8013b9e:	18e2      	adds	r2, r4, r3
 8013ba0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013ba2:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8013ba6:	441a      	add	r2, r3
 8013ba8:	4b1d      	ldr	r3, [pc, #116]	@ (8013c20 <mg_sha1_transform+0x354>)
 8013baa:	4413      	add	r3, r2
 8013bac:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8013bae:	4413      	add	r3, r2
 8013bb0:	653b      	str	r3, [r7, #80]	@ 0x50
 8013bb2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013bb4:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8013bb8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  R0(d, e, a, b, c, 12);
 8013bba:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8013bbc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013bbe:	405a      	eors	r2, r3
 8013bc0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013bc2:	401a      	ands	r2, r3
 8013bc4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013bc6:	ea82 0403 	eor.w	r4, r2, r3
 8013bca:	f107 030c 	add.w	r3, r7, #12
 8013bce:	210c      	movs	r1, #12
 8013bd0:	4618      	mov	r0, r3
 8013bd2:	f7ff fe4f 	bl	8013874 <blk0>
 8013bd6:	4603      	mov	r3, r0
 8013bd8:	18e2      	adds	r2, r4, r3
 8013bda:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013bdc:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8013be0:	441a      	add	r2, r3
 8013be2:	4b0f      	ldr	r3, [pc, #60]	@ (8013c20 <mg_sha1_transform+0x354>)
 8013be4:	4413      	add	r3, r2
 8013be6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8013be8:	4413      	add	r3, r2
 8013bea:	657b      	str	r3, [r7, #84]	@ 0x54
 8013bec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013bee:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8013bf2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R0(c, d, e, a, b, 13);
 8013bf4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8013bf6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013bf8:	405a      	eors	r2, r3
 8013bfa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013bfc:	401a      	ands	r2, r3
 8013bfe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013c00:	ea82 0403 	eor.w	r4, r2, r3
 8013c04:	f107 030c 	add.w	r3, r7, #12
 8013c08:	210d      	movs	r1, #13
 8013c0a:	4618      	mov	r0, r3
 8013c0c:	f7ff fe32 	bl	8013874 <blk0>
 8013c10:	4603      	mov	r3, r0
 8013c12:	18e2      	adds	r2, r4, r3
 8013c14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013c16:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8013c1a:	441a      	add	r2, r3
 8013c1c:	e002      	b.n	8013c24 <mg_sha1_transform+0x358>
 8013c1e:	bf00      	nop
 8013c20:	5a827999 	.word	0x5a827999
 8013c24:	4bac      	ldr	r3, [pc, #688]	@ (8013ed8 <mg_sha1_transform+0x60c>)
 8013c26:	4413      	add	r3, r2
 8013c28:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8013c2a:	4413      	add	r3, r2
 8013c2c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8013c2e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013c30:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8013c34:	653b      	str	r3, [r7, #80]	@ 0x50
  R0(b, c, d, e, a, 14);
 8013c36:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8013c38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013c3a:	405a      	eors	r2, r3
 8013c3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013c3e:	401a      	ands	r2, r3
 8013c40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013c42:	ea82 0403 	eor.w	r4, r2, r3
 8013c46:	f107 030c 	add.w	r3, r7, #12
 8013c4a:	210e      	movs	r1, #14
 8013c4c:	4618      	mov	r0, r3
 8013c4e:	f7ff fe11 	bl	8013874 <blk0>
 8013c52:	4603      	mov	r3, r0
 8013c54:	18e2      	adds	r2, r4, r3
 8013c56:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013c58:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8013c5c:	441a      	add	r2, r3
 8013c5e:	4b9e      	ldr	r3, [pc, #632]	@ (8013ed8 <mg_sha1_transform+0x60c>)
 8013c60:	4413      	add	r3, r2
 8013c62:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8013c64:	4413      	add	r3, r2
 8013c66:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8013c68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013c6a:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8013c6e:	657b      	str	r3, [r7, #84]	@ 0x54
  R0(a, b, c, d, e, 15);
 8013c70:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8013c72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013c74:	405a      	eors	r2, r3
 8013c76:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013c78:	401a      	ands	r2, r3
 8013c7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013c7c:	ea82 0403 	eor.w	r4, r2, r3
 8013c80:	f107 030c 	add.w	r3, r7, #12
 8013c84:	210f      	movs	r1, #15
 8013c86:	4618      	mov	r0, r3
 8013c88:	f7ff fdf4 	bl	8013874 <blk0>
 8013c8c:	4603      	mov	r3, r0
 8013c8e:	18e2      	adds	r2, r4, r3
 8013c90:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013c92:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8013c96:	441a      	add	r2, r3
 8013c98:	4b8f      	ldr	r3, [pc, #572]	@ (8013ed8 <mg_sha1_transform+0x60c>)
 8013c9a:	4413      	add	r3, r2
 8013c9c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8013c9e:	4413      	add	r3, r2
 8013ca0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8013ca2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013ca4:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8013ca8:	65bb      	str	r3, [r7, #88]	@ 0x58
  R1(e, a, b, c, d, 16);
 8013caa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8013cac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013cae:	405a      	eors	r2, r3
 8013cb0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013cb2:	401a      	ands	r2, r3
 8013cb4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013cb6:	405a      	eors	r2, r3
 8013cb8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8013cba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013cbc:	4059      	eors	r1, r3
 8013cbe:	697b      	ldr	r3, [r7, #20]
 8013cc0:	4059      	eors	r1, r3
 8013cc2:	68fb      	ldr	r3, [r7, #12]
 8013cc4:	404b      	eors	r3, r1
 8013cc6:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8013cca:	60fb      	str	r3, [r7, #12]
 8013ccc:	68fb      	ldr	r3, [r7, #12]
 8013cce:	441a      	add	r2, r3
 8013cd0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013cd2:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8013cd6:	441a      	add	r2, r3
 8013cd8:	4b7f      	ldr	r3, [pc, #508]	@ (8013ed8 <mg_sha1_transform+0x60c>)
 8013cda:	4413      	add	r3, r2
 8013cdc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8013cde:	4413      	add	r3, r2
 8013ce0:	653b      	str	r3, [r7, #80]	@ 0x50
 8013ce2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013ce4:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8013ce8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  R1(d, e, a, b, c, 17);
 8013cea:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8013cec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013cee:	405a      	eors	r2, r3
 8013cf0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013cf2:	401a      	ands	r2, r3
 8013cf4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013cf6:	405a      	eors	r2, r3
 8013cf8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8013cfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013cfc:	4059      	eors	r1, r3
 8013cfe:	69bb      	ldr	r3, [r7, #24]
 8013d00:	4059      	eors	r1, r3
 8013d02:	693b      	ldr	r3, [r7, #16]
 8013d04:	404b      	eors	r3, r1
 8013d06:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8013d0a:	613b      	str	r3, [r7, #16]
 8013d0c:	693b      	ldr	r3, [r7, #16]
 8013d0e:	441a      	add	r2, r3
 8013d10:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013d12:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8013d16:	441a      	add	r2, r3
 8013d18:	4b6f      	ldr	r3, [pc, #444]	@ (8013ed8 <mg_sha1_transform+0x60c>)
 8013d1a:	4413      	add	r3, r2
 8013d1c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8013d1e:	4413      	add	r3, r2
 8013d20:	657b      	str	r3, [r7, #84]	@ 0x54
 8013d22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013d24:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8013d28:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R1(c, d, e, a, b, 18);
 8013d2a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8013d2c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013d2e:	405a      	eors	r2, r3
 8013d30:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013d32:	401a      	ands	r2, r3
 8013d34:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013d36:	405a      	eors	r2, r3
 8013d38:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8013d3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013d3c:	4059      	eors	r1, r3
 8013d3e:	69fb      	ldr	r3, [r7, #28]
 8013d40:	4059      	eors	r1, r3
 8013d42:	697b      	ldr	r3, [r7, #20]
 8013d44:	404b      	eors	r3, r1
 8013d46:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8013d4a:	617b      	str	r3, [r7, #20]
 8013d4c:	697b      	ldr	r3, [r7, #20]
 8013d4e:	441a      	add	r2, r3
 8013d50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013d52:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8013d56:	441a      	add	r2, r3
 8013d58:	4b5f      	ldr	r3, [pc, #380]	@ (8013ed8 <mg_sha1_transform+0x60c>)
 8013d5a:	4413      	add	r3, r2
 8013d5c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8013d5e:	4413      	add	r3, r2
 8013d60:	65bb      	str	r3, [r7, #88]	@ 0x58
 8013d62:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013d64:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8013d68:	653b      	str	r3, [r7, #80]	@ 0x50
  R1(b, c, d, e, a, 19);
 8013d6a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8013d6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013d6e:	405a      	eors	r2, r3
 8013d70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013d72:	401a      	ands	r2, r3
 8013d74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013d76:	405a      	eors	r2, r3
 8013d78:	68f9      	ldr	r1, [r7, #12]
 8013d7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013d7c:	4059      	eors	r1, r3
 8013d7e:	6a3b      	ldr	r3, [r7, #32]
 8013d80:	4059      	eors	r1, r3
 8013d82:	69bb      	ldr	r3, [r7, #24]
 8013d84:	404b      	eors	r3, r1
 8013d86:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8013d8a:	61bb      	str	r3, [r7, #24]
 8013d8c:	69bb      	ldr	r3, [r7, #24]
 8013d8e:	441a      	add	r2, r3
 8013d90:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013d92:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8013d96:	441a      	add	r2, r3
 8013d98:	4b4f      	ldr	r3, [pc, #316]	@ (8013ed8 <mg_sha1_transform+0x60c>)
 8013d9a:	4413      	add	r3, r2
 8013d9c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8013d9e:	4413      	add	r3, r2
 8013da0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8013da2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013da4:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8013da8:	657b      	str	r3, [r7, #84]	@ 0x54
  R2(a, b, c, d, e, 20);
 8013daa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8013dac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013dae:	405a      	eors	r2, r3
 8013db0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013db2:	405a      	eors	r2, r3
 8013db4:	6939      	ldr	r1, [r7, #16]
 8013db6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013db8:	4059      	eors	r1, r3
 8013dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013dbc:	4059      	eors	r1, r3
 8013dbe:	69fb      	ldr	r3, [r7, #28]
 8013dc0:	404b      	eors	r3, r1
 8013dc2:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8013dc6:	61fb      	str	r3, [r7, #28]
 8013dc8:	69fb      	ldr	r3, [r7, #28]
 8013dca:	441a      	add	r2, r3
 8013dcc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013dce:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8013dd2:	441a      	add	r2, r3
 8013dd4:	4b41      	ldr	r3, [pc, #260]	@ (8013edc <mg_sha1_transform+0x610>)
 8013dd6:	4413      	add	r3, r2
 8013dd8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8013dda:	4413      	add	r3, r2
 8013ddc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8013dde:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013de0:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8013de4:	65bb      	str	r3, [r7, #88]	@ 0x58
  R2(e, a, b, c, d, 21);
 8013de6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8013de8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013dea:	405a      	eors	r2, r3
 8013dec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013dee:	405a      	eors	r2, r3
 8013df0:	6979      	ldr	r1, [r7, #20]
 8013df2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013df4:	4059      	eors	r1, r3
 8013df6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013df8:	4059      	eors	r1, r3
 8013dfa:	6a3b      	ldr	r3, [r7, #32]
 8013dfc:	404b      	eors	r3, r1
 8013dfe:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8013e02:	623b      	str	r3, [r7, #32]
 8013e04:	6a3b      	ldr	r3, [r7, #32]
 8013e06:	441a      	add	r2, r3
 8013e08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013e0a:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8013e0e:	441a      	add	r2, r3
 8013e10:	4b32      	ldr	r3, [pc, #200]	@ (8013edc <mg_sha1_transform+0x610>)
 8013e12:	4413      	add	r3, r2
 8013e14:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8013e16:	4413      	add	r3, r2
 8013e18:	653b      	str	r3, [r7, #80]	@ 0x50
 8013e1a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013e1c:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8013e20:	65fb      	str	r3, [r7, #92]	@ 0x5c
  R2(d, e, a, b, c, 22);
 8013e22:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8013e24:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013e26:	405a      	eors	r2, r3
 8013e28:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013e2a:	405a      	eors	r2, r3
 8013e2c:	69b9      	ldr	r1, [r7, #24]
 8013e2e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013e30:	4059      	eors	r1, r3
 8013e32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013e34:	4059      	eors	r1, r3
 8013e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013e38:	404b      	eors	r3, r1
 8013e3a:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8013e3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8013e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013e42:	441a      	add	r2, r3
 8013e44:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013e46:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8013e4a:	441a      	add	r2, r3
 8013e4c:	4b23      	ldr	r3, [pc, #140]	@ (8013edc <mg_sha1_transform+0x610>)
 8013e4e:	4413      	add	r3, r2
 8013e50:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8013e52:	4413      	add	r3, r2
 8013e54:	657b      	str	r3, [r7, #84]	@ 0x54
 8013e56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013e58:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8013e5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R2(c, d, e, a, b, 23);
 8013e5e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8013e60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013e62:	405a      	eors	r2, r3
 8013e64:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013e66:	405a      	eors	r2, r3
 8013e68:	69f9      	ldr	r1, [r7, #28]
 8013e6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013e6c:	4059      	eors	r1, r3
 8013e6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013e70:	4059      	eors	r1, r3
 8013e72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013e74:	404b      	eors	r3, r1
 8013e76:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8013e7a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8013e7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013e7e:	441a      	add	r2, r3
 8013e80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013e82:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8013e86:	441a      	add	r2, r3
 8013e88:	4b14      	ldr	r3, [pc, #80]	@ (8013edc <mg_sha1_transform+0x610>)
 8013e8a:	4413      	add	r3, r2
 8013e8c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8013e8e:	4413      	add	r3, r2
 8013e90:	65bb      	str	r3, [r7, #88]	@ 0x58
 8013e92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013e94:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8013e98:	653b      	str	r3, [r7, #80]	@ 0x50
  R2(b, c, d, e, a, 24);
 8013e9a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8013e9c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013e9e:	405a      	eors	r2, r3
 8013ea0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013ea2:	405a      	eors	r2, r3
 8013ea4:	6a39      	ldr	r1, [r7, #32]
 8013ea6:	68fb      	ldr	r3, [r7, #12]
 8013ea8:	4059      	eors	r1, r3
 8013eaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013eac:	4059      	eors	r1, r3
 8013eae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013eb0:	404b      	eors	r3, r1
 8013eb2:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8013eb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8013eb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013eba:	441a      	add	r2, r3
 8013ebc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013ebe:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8013ec2:	441a      	add	r2, r3
 8013ec4:	4b05      	ldr	r3, [pc, #20]	@ (8013edc <mg_sha1_transform+0x610>)
 8013ec6:	4413      	add	r3, r2
 8013ec8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8013eca:	4413      	add	r3, r2
 8013ecc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8013ece:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013ed0:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8013ed4:	e004      	b.n	8013ee0 <mg_sha1_transform+0x614>
 8013ed6:	bf00      	nop
 8013ed8:	5a827999 	.word	0x5a827999
 8013edc:	6ed9eba1 	.word	0x6ed9eba1
 8013ee0:	657b      	str	r3, [r7, #84]	@ 0x54
  R2(a, b, c, d, e, 25);
 8013ee2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8013ee4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013ee6:	405a      	eors	r2, r3
 8013ee8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013eea:	405a      	eors	r2, r3
 8013eec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8013eee:	693b      	ldr	r3, [r7, #16]
 8013ef0:	4059      	eors	r1, r3
 8013ef2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013ef4:	4059      	eors	r1, r3
 8013ef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013ef8:	404b      	eors	r3, r1
 8013efa:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8013efe:	633b      	str	r3, [r7, #48]	@ 0x30
 8013f00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013f02:	441a      	add	r2, r3
 8013f04:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013f06:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8013f0a:	441a      	add	r2, r3
 8013f0c:	4ba9      	ldr	r3, [pc, #676]	@ (80141b4 <mg_sha1_transform+0x8e8>)
 8013f0e:	4413      	add	r3, r2
 8013f10:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8013f12:	4413      	add	r3, r2
 8013f14:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8013f16:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013f18:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8013f1c:	65bb      	str	r3, [r7, #88]	@ 0x58
  R2(e, a, b, c, d, 26);
 8013f1e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8013f20:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013f22:	405a      	eors	r2, r3
 8013f24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013f26:	405a      	eors	r2, r3
 8013f28:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8013f2a:	697b      	ldr	r3, [r7, #20]
 8013f2c:	4059      	eors	r1, r3
 8013f2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013f30:	4059      	eors	r1, r3
 8013f32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013f34:	404b      	eors	r3, r1
 8013f36:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8013f3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8013f3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013f3e:	441a      	add	r2, r3
 8013f40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013f42:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8013f46:	441a      	add	r2, r3
 8013f48:	4b9a      	ldr	r3, [pc, #616]	@ (80141b4 <mg_sha1_transform+0x8e8>)
 8013f4a:	4413      	add	r3, r2
 8013f4c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8013f4e:	4413      	add	r3, r2
 8013f50:	653b      	str	r3, [r7, #80]	@ 0x50
 8013f52:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013f54:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8013f58:	65fb      	str	r3, [r7, #92]	@ 0x5c
  R2(d, e, a, b, c, 27);
 8013f5a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8013f5c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013f5e:	405a      	eors	r2, r3
 8013f60:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013f62:	405a      	eors	r2, r3
 8013f64:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8013f66:	69bb      	ldr	r3, [r7, #24]
 8013f68:	4059      	eors	r1, r3
 8013f6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013f6c:	4059      	eors	r1, r3
 8013f6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013f70:	404b      	eors	r3, r1
 8013f72:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8013f76:	63bb      	str	r3, [r7, #56]	@ 0x38
 8013f78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013f7a:	441a      	add	r2, r3
 8013f7c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013f7e:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8013f82:	441a      	add	r2, r3
 8013f84:	4b8b      	ldr	r3, [pc, #556]	@ (80141b4 <mg_sha1_transform+0x8e8>)
 8013f86:	4413      	add	r3, r2
 8013f88:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8013f8a:	4413      	add	r3, r2
 8013f8c:	657b      	str	r3, [r7, #84]	@ 0x54
 8013f8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013f90:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8013f94:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R2(c, d, e, a, b, 28);
 8013f96:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8013f98:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013f9a:	405a      	eors	r2, r3
 8013f9c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013f9e:	405a      	eors	r2, r3
 8013fa0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8013fa2:	69fb      	ldr	r3, [r7, #28]
 8013fa4:	4059      	eors	r1, r3
 8013fa6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013fa8:	4059      	eors	r1, r3
 8013faa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013fac:	404b      	eors	r3, r1
 8013fae:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8013fb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013fb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013fb6:	441a      	add	r2, r3
 8013fb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013fba:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8013fbe:	441a      	add	r2, r3
 8013fc0:	4b7c      	ldr	r3, [pc, #496]	@ (80141b4 <mg_sha1_transform+0x8e8>)
 8013fc2:	4413      	add	r3, r2
 8013fc4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8013fc6:	4413      	add	r3, r2
 8013fc8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8013fca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013fcc:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8013fd0:	653b      	str	r3, [r7, #80]	@ 0x50
  R2(b, c, d, e, a, 29);
 8013fd2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8013fd4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013fd6:	405a      	eors	r2, r3
 8013fd8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013fda:	405a      	eors	r2, r3
 8013fdc:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8013fde:	6a3b      	ldr	r3, [r7, #32]
 8013fe0:	4059      	eors	r1, r3
 8013fe2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013fe4:	4059      	eors	r1, r3
 8013fe6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013fe8:	404b      	eors	r3, r1
 8013fea:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8013fee:	643b      	str	r3, [r7, #64]	@ 0x40
 8013ff0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013ff2:	441a      	add	r2, r3
 8013ff4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013ff6:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8013ffa:	441a      	add	r2, r3
 8013ffc:	4b6d      	ldr	r3, [pc, #436]	@ (80141b4 <mg_sha1_transform+0x8e8>)
 8013ffe:	4413      	add	r3, r2
 8014000:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8014002:	4413      	add	r3, r2
 8014004:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8014006:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014008:	ea4f 03b3 	mov.w	r3, r3, ror #2
 801400c:	657b      	str	r3, [r7, #84]	@ 0x54
  R2(a, b, c, d, e, 30);
 801400e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8014010:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014012:	405a      	eors	r2, r3
 8014014:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014016:	405a      	eors	r2, r3
 8014018:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801401a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801401c:	4059      	eors	r1, r3
 801401e:	68fb      	ldr	r3, [r7, #12]
 8014020:	4059      	eors	r1, r3
 8014022:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014024:	404b      	eors	r3, r1
 8014026:	ea4f 73f3 	mov.w	r3, r3, ror #31
 801402a:	647b      	str	r3, [r7, #68]	@ 0x44
 801402c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801402e:	441a      	add	r2, r3
 8014030:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014032:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8014036:	441a      	add	r2, r3
 8014038:	4b5e      	ldr	r3, [pc, #376]	@ (80141b4 <mg_sha1_transform+0x8e8>)
 801403a:	4413      	add	r3, r2
 801403c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801403e:	4413      	add	r3, r2
 8014040:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8014042:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014044:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8014048:	65bb      	str	r3, [r7, #88]	@ 0x58
  R2(e, a, b, c, d, 31);
 801404a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801404c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801404e:	405a      	eors	r2, r3
 8014050:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014052:	405a      	eors	r2, r3
 8014054:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8014056:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014058:	4059      	eors	r1, r3
 801405a:	693b      	ldr	r3, [r7, #16]
 801405c:	4059      	eors	r1, r3
 801405e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014060:	404b      	eors	r3, r1
 8014062:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8014066:	64bb      	str	r3, [r7, #72]	@ 0x48
 8014068:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801406a:	441a      	add	r2, r3
 801406c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801406e:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8014072:	441a      	add	r2, r3
 8014074:	4b4f      	ldr	r3, [pc, #316]	@ (80141b4 <mg_sha1_transform+0x8e8>)
 8014076:	4413      	add	r3, r2
 8014078:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801407a:	4413      	add	r3, r2
 801407c:	653b      	str	r3, [r7, #80]	@ 0x50
 801407e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014080:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8014084:	65fb      	str	r3, [r7, #92]	@ 0x5c
  R2(d, e, a, b, c, 32);
 8014086:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8014088:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801408a:	405a      	eors	r2, r3
 801408c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801408e:	405a      	eors	r2, r3
 8014090:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8014092:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014094:	4059      	eors	r1, r3
 8014096:	697b      	ldr	r3, [r7, #20]
 8014098:	4059      	eors	r1, r3
 801409a:	68fb      	ldr	r3, [r7, #12]
 801409c:	404b      	eors	r3, r1
 801409e:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80140a2:	60fb      	str	r3, [r7, #12]
 80140a4:	68fb      	ldr	r3, [r7, #12]
 80140a6:	441a      	add	r2, r3
 80140a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80140aa:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80140ae:	441a      	add	r2, r3
 80140b0:	4b40      	ldr	r3, [pc, #256]	@ (80141b4 <mg_sha1_transform+0x8e8>)
 80140b2:	4413      	add	r3, r2
 80140b4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80140b6:	4413      	add	r3, r2
 80140b8:	657b      	str	r3, [r7, #84]	@ 0x54
 80140ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80140bc:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80140c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R2(c, d, e, a, b, 33);
 80140c2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80140c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80140c6:	405a      	eors	r2, r3
 80140c8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80140ca:	405a      	eors	r2, r3
 80140cc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80140ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80140d0:	4059      	eors	r1, r3
 80140d2:	69bb      	ldr	r3, [r7, #24]
 80140d4:	4059      	eors	r1, r3
 80140d6:	693b      	ldr	r3, [r7, #16]
 80140d8:	404b      	eors	r3, r1
 80140da:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80140de:	613b      	str	r3, [r7, #16]
 80140e0:	693b      	ldr	r3, [r7, #16]
 80140e2:	441a      	add	r2, r3
 80140e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80140e6:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80140ea:	441a      	add	r2, r3
 80140ec:	4b31      	ldr	r3, [pc, #196]	@ (80141b4 <mg_sha1_transform+0x8e8>)
 80140ee:	4413      	add	r3, r2
 80140f0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80140f2:	4413      	add	r3, r2
 80140f4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80140f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80140f8:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80140fc:	653b      	str	r3, [r7, #80]	@ 0x50
  R2(b, c, d, e, a, 34);
 80140fe:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8014100:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014102:	405a      	eors	r2, r3
 8014104:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014106:	405a      	eors	r2, r3
 8014108:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 801410a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801410c:	4059      	eors	r1, r3
 801410e:	69fb      	ldr	r3, [r7, #28]
 8014110:	4059      	eors	r1, r3
 8014112:	697b      	ldr	r3, [r7, #20]
 8014114:	404b      	eors	r3, r1
 8014116:	ea4f 73f3 	mov.w	r3, r3, ror #31
 801411a:	617b      	str	r3, [r7, #20]
 801411c:	697b      	ldr	r3, [r7, #20]
 801411e:	441a      	add	r2, r3
 8014120:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014122:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8014126:	441a      	add	r2, r3
 8014128:	4b22      	ldr	r3, [pc, #136]	@ (80141b4 <mg_sha1_transform+0x8e8>)
 801412a:	4413      	add	r3, r2
 801412c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801412e:	4413      	add	r3, r2
 8014130:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8014132:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014134:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8014138:	657b      	str	r3, [r7, #84]	@ 0x54
  R2(a, b, c, d, e, 35);
 801413a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801413c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801413e:	405a      	eors	r2, r3
 8014140:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014142:	405a      	eors	r2, r3
 8014144:	68f9      	ldr	r1, [r7, #12]
 8014146:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014148:	4059      	eors	r1, r3
 801414a:	6a3b      	ldr	r3, [r7, #32]
 801414c:	4059      	eors	r1, r3
 801414e:	69bb      	ldr	r3, [r7, #24]
 8014150:	404b      	eors	r3, r1
 8014152:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8014156:	61bb      	str	r3, [r7, #24]
 8014158:	69bb      	ldr	r3, [r7, #24]
 801415a:	441a      	add	r2, r3
 801415c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801415e:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8014162:	441a      	add	r2, r3
 8014164:	4b13      	ldr	r3, [pc, #76]	@ (80141b4 <mg_sha1_transform+0x8e8>)
 8014166:	4413      	add	r3, r2
 8014168:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801416a:	4413      	add	r3, r2
 801416c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801416e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014170:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8014174:	65bb      	str	r3, [r7, #88]	@ 0x58
  R2(e, a, b, c, d, 36);
 8014176:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8014178:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801417a:	405a      	eors	r2, r3
 801417c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801417e:	405a      	eors	r2, r3
 8014180:	6939      	ldr	r1, [r7, #16]
 8014182:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014184:	4059      	eors	r1, r3
 8014186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014188:	4059      	eors	r1, r3
 801418a:	69fb      	ldr	r3, [r7, #28]
 801418c:	404b      	eors	r3, r1
 801418e:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8014192:	61fb      	str	r3, [r7, #28]
 8014194:	69fb      	ldr	r3, [r7, #28]
 8014196:	441a      	add	r2, r3
 8014198:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801419a:	ea4f 63f3 	mov.w	r3, r3, ror #27
 801419e:	441a      	add	r2, r3
 80141a0:	4b04      	ldr	r3, [pc, #16]	@ (80141b4 <mg_sha1_transform+0x8e8>)
 80141a2:	4413      	add	r3, r2
 80141a4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80141a6:	4413      	add	r3, r2
 80141a8:	653b      	str	r3, [r7, #80]	@ 0x50
 80141aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80141ac:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80141b0:	e002      	b.n	80141b8 <mg_sha1_transform+0x8ec>
 80141b2:	bf00      	nop
 80141b4:	6ed9eba1 	.word	0x6ed9eba1
 80141b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  R2(d, e, a, b, c, 37);
 80141ba:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80141bc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80141be:	405a      	eors	r2, r3
 80141c0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80141c2:	405a      	eors	r2, r3
 80141c4:	6979      	ldr	r1, [r7, #20]
 80141c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80141c8:	4059      	eors	r1, r3
 80141ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80141cc:	4059      	eors	r1, r3
 80141ce:	6a3b      	ldr	r3, [r7, #32]
 80141d0:	404b      	eors	r3, r1
 80141d2:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80141d6:	623b      	str	r3, [r7, #32]
 80141d8:	6a3b      	ldr	r3, [r7, #32]
 80141da:	441a      	add	r2, r3
 80141dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80141de:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80141e2:	441a      	add	r2, r3
 80141e4:	4ba9      	ldr	r3, [pc, #676]	@ (801448c <mg_sha1_transform+0xbc0>)
 80141e6:	4413      	add	r3, r2
 80141e8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80141ea:	4413      	add	r3, r2
 80141ec:	657b      	str	r3, [r7, #84]	@ 0x54
 80141ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80141f0:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80141f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R2(c, d, e, a, b, 38);
 80141f6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80141f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80141fa:	405a      	eors	r2, r3
 80141fc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80141fe:	405a      	eors	r2, r3
 8014200:	69b9      	ldr	r1, [r7, #24]
 8014202:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014204:	4059      	eors	r1, r3
 8014206:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014208:	4059      	eors	r1, r3
 801420a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801420c:	404b      	eors	r3, r1
 801420e:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8014212:	627b      	str	r3, [r7, #36]	@ 0x24
 8014214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014216:	441a      	add	r2, r3
 8014218:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801421a:	ea4f 63f3 	mov.w	r3, r3, ror #27
 801421e:	441a      	add	r2, r3
 8014220:	4b9a      	ldr	r3, [pc, #616]	@ (801448c <mg_sha1_transform+0xbc0>)
 8014222:	4413      	add	r3, r2
 8014224:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8014226:	4413      	add	r3, r2
 8014228:	65bb      	str	r3, [r7, #88]	@ 0x58
 801422a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801422c:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8014230:	653b      	str	r3, [r7, #80]	@ 0x50
  R2(b, c, d, e, a, 39);
 8014232:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8014234:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014236:	405a      	eors	r2, r3
 8014238:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801423a:	405a      	eors	r2, r3
 801423c:	69f9      	ldr	r1, [r7, #28]
 801423e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014240:	4059      	eors	r1, r3
 8014242:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014244:	4059      	eors	r1, r3
 8014246:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014248:	404b      	eors	r3, r1
 801424a:	ea4f 73f3 	mov.w	r3, r3, ror #31
 801424e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8014250:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014252:	441a      	add	r2, r3
 8014254:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014256:	ea4f 63f3 	mov.w	r3, r3, ror #27
 801425a:	441a      	add	r2, r3
 801425c:	4b8b      	ldr	r3, [pc, #556]	@ (801448c <mg_sha1_transform+0xbc0>)
 801425e:	4413      	add	r3, r2
 8014260:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8014262:	4413      	add	r3, r2
 8014264:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8014266:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014268:	ea4f 03b3 	mov.w	r3, r3, ror #2
 801426c:	657b      	str	r3, [r7, #84]	@ 0x54
  R3(a, b, c, d, e, 40);
 801426e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8014270:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014272:	431a      	orrs	r2, r3
 8014274:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014276:	401a      	ands	r2, r3
 8014278:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801427a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801427c:	400b      	ands	r3, r1
 801427e:	431a      	orrs	r2, r3
 8014280:	6a39      	ldr	r1, [r7, #32]
 8014282:	68fb      	ldr	r3, [r7, #12]
 8014284:	4059      	eors	r1, r3
 8014286:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014288:	4059      	eors	r1, r3
 801428a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801428c:	404b      	eors	r3, r1
 801428e:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8014292:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8014294:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014296:	441a      	add	r2, r3
 8014298:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801429a:	ea4f 63f3 	mov.w	r3, r3, ror #27
 801429e:	441a      	add	r2, r3
 80142a0:	4b7b      	ldr	r3, [pc, #492]	@ (8014490 <mg_sha1_transform+0xbc4>)
 80142a2:	4413      	add	r3, r2
 80142a4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80142a6:	4413      	add	r3, r2
 80142a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80142aa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80142ac:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80142b0:	65bb      	str	r3, [r7, #88]	@ 0x58
  R3(e, a, b, c, d, 41);
 80142b2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80142b4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80142b6:	431a      	orrs	r2, r3
 80142b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80142ba:	401a      	ands	r2, r3
 80142bc:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 80142be:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80142c0:	400b      	ands	r3, r1
 80142c2:	431a      	orrs	r2, r3
 80142c4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80142c6:	693b      	ldr	r3, [r7, #16]
 80142c8:	4059      	eors	r1, r3
 80142ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80142cc:	4059      	eors	r1, r3
 80142ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80142d0:	404b      	eors	r3, r1
 80142d2:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80142d6:	633b      	str	r3, [r7, #48]	@ 0x30
 80142d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80142da:	441a      	add	r2, r3
 80142dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80142de:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80142e2:	441a      	add	r2, r3
 80142e4:	4b6a      	ldr	r3, [pc, #424]	@ (8014490 <mg_sha1_transform+0xbc4>)
 80142e6:	4413      	add	r3, r2
 80142e8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80142ea:	4413      	add	r3, r2
 80142ec:	653b      	str	r3, [r7, #80]	@ 0x50
 80142ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80142f0:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80142f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  R3(d, e, a, b, c, 42);
 80142f6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80142f8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80142fa:	431a      	orrs	r2, r3
 80142fc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80142fe:	401a      	ands	r2, r3
 8014300:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8014302:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014304:	400b      	ands	r3, r1
 8014306:	431a      	orrs	r2, r3
 8014308:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801430a:	697b      	ldr	r3, [r7, #20]
 801430c:	4059      	eors	r1, r3
 801430e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014310:	4059      	eors	r1, r3
 8014312:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014314:	404b      	eors	r3, r1
 8014316:	ea4f 73f3 	mov.w	r3, r3, ror #31
 801431a:	637b      	str	r3, [r7, #52]	@ 0x34
 801431c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801431e:	441a      	add	r2, r3
 8014320:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014322:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8014326:	441a      	add	r2, r3
 8014328:	4b59      	ldr	r3, [pc, #356]	@ (8014490 <mg_sha1_transform+0xbc4>)
 801432a:	4413      	add	r3, r2
 801432c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801432e:	4413      	add	r3, r2
 8014330:	657b      	str	r3, [r7, #84]	@ 0x54
 8014332:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014334:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8014338:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R3(c, d, e, a, b, 43);
 801433a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801433c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801433e:	431a      	orrs	r2, r3
 8014340:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014342:	401a      	ands	r2, r3
 8014344:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8014346:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014348:	400b      	ands	r3, r1
 801434a:	431a      	orrs	r2, r3
 801434c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801434e:	69bb      	ldr	r3, [r7, #24]
 8014350:	4059      	eors	r1, r3
 8014352:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014354:	4059      	eors	r1, r3
 8014356:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014358:	404b      	eors	r3, r1
 801435a:	ea4f 73f3 	mov.w	r3, r3, ror #31
 801435e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8014360:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014362:	441a      	add	r2, r3
 8014364:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014366:	ea4f 63f3 	mov.w	r3, r3, ror #27
 801436a:	441a      	add	r2, r3
 801436c:	4b48      	ldr	r3, [pc, #288]	@ (8014490 <mg_sha1_transform+0xbc4>)
 801436e:	4413      	add	r3, r2
 8014370:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8014372:	4413      	add	r3, r2
 8014374:	65bb      	str	r3, [r7, #88]	@ 0x58
 8014376:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014378:	ea4f 03b3 	mov.w	r3, r3, ror #2
 801437c:	653b      	str	r3, [r7, #80]	@ 0x50
  R3(b, c, d, e, a, 44);
 801437e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8014380:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014382:	431a      	orrs	r2, r3
 8014384:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014386:	401a      	ands	r2, r3
 8014388:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801438a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801438c:	400b      	ands	r3, r1
 801438e:	431a      	orrs	r2, r3
 8014390:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8014392:	69fb      	ldr	r3, [r7, #28]
 8014394:	4059      	eors	r1, r3
 8014396:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014398:	4059      	eors	r1, r3
 801439a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801439c:	404b      	eors	r3, r1
 801439e:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80143a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80143a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80143a6:	441a      	add	r2, r3
 80143a8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80143aa:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80143ae:	441a      	add	r2, r3
 80143b0:	4b37      	ldr	r3, [pc, #220]	@ (8014490 <mg_sha1_transform+0xbc4>)
 80143b2:	4413      	add	r3, r2
 80143b4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80143b6:	4413      	add	r3, r2
 80143b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80143ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80143bc:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80143c0:	657b      	str	r3, [r7, #84]	@ 0x54
  R3(a, b, c, d, e, 45);
 80143c2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80143c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80143c6:	431a      	orrs	r2, r3
 80143c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80143ca:	401a      	ands	r2, r3
 80143cc:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80143ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80143d0:	400b      	ands	r3, r1
 80143d2:	431a      	orrs	r2, r3
 80143d4:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80143d6:	6a3b      	ldr	r3, [r7, #32]
 80143d8:	4059      	eors	r1, r3
 80143da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80143dc:	4059      	eors	r1, r3
 80143de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80143e0:	404b      	eors	r3, r1
 80143e2:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80143e6:	643b      	str	r3, [r7, #64]	@ 0x40
 80143e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80143ea:	441a      	add	r2, r3
 80143ec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80143ee:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80143f2:	441a      	add	r2, r3
 80143f4:	4b26      	ldr	r3, [pc, #152]	@ (8014490 <mg_sha1_transform+0xbc4>)
 80143f6:	4413      	add	r3, r2
 80143f8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80143fa:	4413      	add	r3, r2
 80143fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80143fe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014400:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8014404:	65bb      	str	r3, [r7, #88]	@ 0x58
  R3(e, a, b, c, d, 46);
 8014406:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8014408:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801440a:	431a      	orrs	r2, r3
 801440c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801440e:	401a      	ands	r2, r3
 8014410:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8014412:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014414:	400b      	ands	r3, r1
 8014416:	431a      	orrs	r2, r3
 8014418:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801441a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801441c:	4059      	eors	r1, r3
 801441e:	68fb      	ldr	r3, [r7, #12]
 8014420:	4059      	eors	r1, r3
 8014422:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014424:	404b      	eors	r3, r1
 8014426:	ea4f 73f3 	mov.w	r3, r3, ror #31
 801442a:	647b      	str	r3, [r7, #68]	@ 0x44
 801442c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801442e:	441a      	add	r2, r3
 8014430:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014432:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8014436:	441a      	add	r2, r3
 8014438:	4b15      	ldr	r3, [pc, #84]	@ (8014490 <mg_sha1_transform+0xbc4>)
 801443a:	4413      	add	r3, r2
 801443c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801443e:	4413      	add	r3, r2
 8014440:	653b      	str	r3, [r7, #80]	@ 0x50
 8014442:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014444:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8014448:	65fb      	str	r3, [r7, #92]	@ 0x5c
  R3(d, e, a, b, c, 47);
 801444a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801444c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801444e:	431a      	orrs	r2, r3
 8014450:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014452:	401a      	ands	r2, r3
 8014454:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8014456:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014458:	400b      	ands	r3, r1
 801445a:	431a      	orrs	r2, r3
 801445c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801445e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014460:	4059      	eors	r1, r3
 8014462:	693b      	ldr	r3, [r7, #16]
 8014464:	4059      	eors	r1, r3
 8014466:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014468:	404b      	eors	r3, r1
 801446a:	ea4f 73f3 	mov.w	r3, r3, ror #31
 801446e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8014470:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014472:	441a      	add	r2, r3
 8014474:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014476:	ea4f 63f3 	mov.w	r3, r3, ror #27
 801447a:	441a      	add	r2, r3
 801447c:	4b04      	ldr	r3, [pc, #16]	@ (8014490 <mg_sha1_transform+0xbc4>)
 801447e:	4413      	add	r3, r2
 8014480:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8014482:	4413      	add	r3, r2
 8014484:	657b      	str	r3, [r7, #84]	@ 0x54
 8014486:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014488:	e004      	b.n	8014494 <mg_sha1_transform+0xbc8>
 801448a:	bf00      	nop
 801448c:	6ed9eba1 	.word	0x6ed9eba1
 8014490:	8f1bbcdc 	.word	0x8f1bbcdc
 8014494:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8014498:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R3(c, d, e, a, b, 48);
 801449a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801449c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801449e:	431a      	orrs	r2, r3
 80144a0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80144a2:	401a      	ands	r2, r3
 80144a4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80144a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80144a8:	400b      	ands	r3, r1
 80144aa:	431a      	orrs	r2, r3
 80144ac:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80144ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80144b0:	4059      	eors	r1, r3
 80144b2:	697b      	ldr	r3, [r7, #20]
 80144b4:	4059      	eors	r1, r3
 80144b6:	68fb      	ldr	r3, [r7, #12]
 80144b8:	404b      	eors	r3, r1
 80144ba:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80144be:	60fb      	str	r3, [r7, #12]
 80144c0:	68fb      	ldr	r3, [r7, #12]
 80144c2:	441a      	add	r2, r3
 80144c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80144c6:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80144ca:	441a      	add	r2, r3
 80144cc:	4ba8      	ldr	r3, [pc, #672]	@ (8014770 <mg_sha1_transform+0xea4>)
 80144ce:	4413      	add	r3, r2
 80144d0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80144d2:	4413      	add	r3, r2
 80144d4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80144d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80144d8:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80144dc:	653b      	str	r3, [r7, #80]	@ 0x50
  R3(b, c, d, e, a, 49);
 80144de:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80144e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80144e2:	431a      	orrs	r2, r3
 80144e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80144e6:	401a      	ands	r2, r3
 80144e8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80144ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80144ec:	400b      	ands	r3, r1
 80144ee:	431a      	orrs	r2, r3
 80144f0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80144f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80144f4:	4059      	eors	r1, r3
 80144f6:	69bb      	ldr	r3, [r7, #24]
 80144f8:	4059      	eors	r1, r3
 80144fa:	693b      	ldr	r3, [r7, #16]
 80144fc:	404b      	eors	r3, r1
 80144fe:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8014502:	613b      	str	r3, [r7, #16]
 8014504:	693b      	ldr	r3, [r7, #16]
 8014506:	441a      	add	r2, r3
 8014508:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801450a:	ea4f 63f3 	mov.w	r3, r3, ror #27
 801450e:	441a      	add	r2, r3
 8014510:	4b97      	ldr	r3, [pc, #604]	@ (8014770 <mg_sha1_transform+0xea4>)
 8014512:	4413      	add	r3, r2
 8014514:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8014516:	4413      	add	r3, r2
 8014518:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801451a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801451c:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8014520:	657b      	str	r3, [r7, #84]	@ 0x54
  R3(a, b, c, d, e, 50);
 8014522:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8014524:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014526:	431a      	orrs	r2, r3
 8014528:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801452a:	401a      	ands	r2, r3
 801452c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801452e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014530:	400b      	ands	r3, r1
 8014532:	431a      	orrs	r2, r3
 8014534:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8014536:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014538:	4059      	eors	r1, r3
 801453a:	69fb      	ldr	r3, [r7, #28]
 801453c:	4059      	eors	r1, r3
 801453e:	697b      	ldr	r3, [r7, #20]
 8014540:	404b      	eors	r3, r1
 8014542:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8014546:	617b      	str	r3, [r7, #20]
 8014548:	697b      	ldr	r3, [r7, #20]
 801454a:	441a      	add	r2, r3
 801454c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801454e:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8014552:	441a      	add	r2, r3
 8014554:	4b86      	ldr	r3, [pc, #536]	@ (8014770 <mg_sha1_transform+0xea4>)
 8014556:	4413      	add	r3, r2
 8014558:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801455a:	4413      	add	r3, r2
 801455c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801455e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014560:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8014564:	65bb      	str	r3, [r7, #88]	@ 0x58
  R3(e, a, b, c, d, 51);
 8014566:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8014568:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801456a:	431a      	orrs	r2, r3
 801456c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801456e:	401a      	ands	r2, r3
 8014570:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8014572:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014574:	400b      	ands	r3, r1
 8014576:	431a      	orrs	r2, r3
 8014578:	68f9      	ldr	r1, [r7, #12]
 801457a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801457c:	4059      	eors	r1, r3
 801457e:	6a3b      	ldr	r3, [r7, #32]
 8014580:	4059      	eors	r1, r3
 8014582:	69bb      	ldr	r3, [r7, #24]
 8014584:	404b      	eors	r3, r1
 8014586:	ea4f 73f3 	mov.w	r3, r3, ror #31
 801458a:	61bb      	str	r3, [r7, #24]
 801458c:	69bb      	ldr	r3, [r7, #24]
 801458e:	441a      	add	r2, r3
 8014590:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014592:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8014596:	441a      	add	r2, r3
 8014598:	4b75      	ldr	r3, [pc, #468]	@ (8014770 <mg_sha1_transform+0xea4>)
 801459a:	4413      	add	r3, r2
 801459c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801459e:	4413      	add	r3, r2
 80145a0:	653b      	str	r3, [r7, #80]	@ 0x50
 80145a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80145a4:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80145a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  R3(d, e, a, b, c, 52);
 80145aa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80145ac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80145ae:	431a      	orrs	r2, r3
 80145b0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80145b2:	401a      	ands	r2, r3
 80145b4:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80145b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80145b8:	400b      	ands	r3, r1
 80145ba:	431a      	orrs	r2, r3
 80145bc:	6939      	ldr	r1, [r7, #16]
 80145be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80145c0:	4059      	eors	r1, r3
 80145c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80145c4:	4059      	eors	r1, r3
 80145c6:	69fb      	ldr	r3, [r7, #28]
 80145c8:	404b      	eors	r3, r1
 80145ca:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80145ce:	61fb      	str	r3, [r7, #28]
 80145d0:	69fb      	ldr	r3, [r7, #28]
 80145d2:	441a      	add	r2, r3
 80145d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80145d6:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80145da:	441a      	add	r2, r3
 80145dc:	4b64      	ldr	r3, [pc, #400]	@ (8014770 <mg_sha1_transform+0xea4>)
 80145de:	4413      	add	r3, r2
 80145e0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80145e2:	4413      	add	r3, r2
 80145e4:	657b      	str	r3, [r7, #84]	@ 0x54
 80145e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80145e8:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80145ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R3(c, d, e, a, b, 53);
 80145ee:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80145f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80145f2:	431a      	orrs	r2, r3
 80145f4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80145f6:	401a      	ands	r2, r3
 80145f8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80145fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80145fc:	400b      	ands	r3, r1
 80145fe:	431a      	orrs	r2, r3
 8014600:	6979      	ldr	r1, [r7, #20]
 8014602:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014604:	4059      	eors	r1, r3
 8014606:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014608:	4059      	eors	r1, r3
 801460a:	6a3b      	ldr	r3, [r7, #32]
 801460c:	404b      	eors	r3, r1
 801460e:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8014612:	623b      	str	r3, [r7, #32]
 8014614:	6a3b      	ldr	r3, [r7, #32]
 8014616:	441a      	add	r2, r3
 8014618:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801461a:	ea4f 63f3 	mov.w	r3, r3, ror #27
 801461e:	441a      	add	r2, r3
 8014620:	4b53      	ldr	r3, [pc, #332]	@ (8014770 <mg_sha1_transform+0xea4>)
 8014622:	4413      	add	r3, r2
 8014624:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8014626:	4413      	add	r3, r2
 8014628:	65bb      	str	r3, [r7, #88]	@ 0x58
 801462a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801462c:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8014630:	653b      	str	r3, [r7, #80]	@ 0x50
  R3(b, c, d, e, a, 54);
 8014632:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8014634:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014636:	431a      	orrs	r2, r3
 8014638:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801463a:	401a      	ands	r2, r3
 801463c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801463e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014640:	400b      	ands	r3, r1
 8014642:	431a      	orrs	r2, r3
 8014644:	69b9      	ldr	r1, [r7, #24]
 8014646:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014648:	4059      	eors	r1, r3
 801464a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801464c:	4059      	eors	r1, r3
 801464e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014650:	404b      	eors	r3, r1
 8014652:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8014656:	627b      	str	r3, [r7, #36]	@ 0x24
 8014658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801465a:	441a      	add	r2, r3
 801465c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801465e:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8014662:	441a      	add	r2, r3
 8014664:	4b42      	ldr	r3, [pc, #264]	@ (8014770 <mg_sha1_transform+0xea4>)
 8014666:	4413      	add	r3, r2
 8014668:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801466a:	4413      	add	r3, r2
 801466c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801466e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014670:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8014674:	657b      	str	r3, [r7, #84]	@ 0x54
  R3(a, b, c, d, e, 55);
 8014676:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8014678:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801467a:	431a      	orrs	r2, r3
 801467c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801467e:	401a      	ands	r2, r3
 8014680:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8014682:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014684:	400b      	ands	r3, r1
 8014686:	431a      	orrs	r2, r3
 8014688:	69f9      	ldr	r1, [r7, #28]
 801468a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801468c:	4059      	eors	r1, r3
 801468e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014690:	4059      	eors	r1, r3
 8014692:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014694:	404b      	eors	r3, r1
 8014696:	ea4f 73f3 	mov.w	r3, r3, ror #31
 801469a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801469c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801469e:	441a      	add	r2, r3
 80146a0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80146a2:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80146a6:	441a      	add	r2, r3
 80146a8:	4b31      	ldr	r3, [pc, #196]	@ (8014770 <mg_sha1_transform+0xea4>)
 80146aa:	4413      	add	r3, r2
 80146ac:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80146ae:	4413      	add	r3, r2
 80146b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80146b2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80146b4:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80146b8:	65bb      	str	r3, [r7, #88]	@ 0x58
  R3(e, a, b, c, d, 56);
 80146ba:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80146bc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80146be:	431a      	orrs	r2, r3
 80146c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80146c2:	401a      	ands	r2, r3
 80146c4:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 80146c6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80146c8:	400b      	ands	r3, r1
 80146ca:	431a      	orrs	r2, r3
 80146cc:	6a39      	ldr	r1, [r7, #32]
 80146ce:	68fb      	ldr	r3, [r7, #12]
 80146d0:	4059      	eors	r1, r3
 80146d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80146d4:	4059      	eors	r1, r3
 80146d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80146d8:	404b      	eors	r3, r1
 80146da:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80146de:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80146e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80146e2:	441a      	add	r2, r3
 80146e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80146e6:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80146ea:	441a      	add	r2, r3
 80146ec:	4b20      	ldr	r3, [pc, #128]	@ (8014770 <mg_sha1_transform+0xea4>)
 80146ee:	4413      	add	r3, r2
 80146f0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80146f2:	4413      	add	r3, r2
 80146f4:	653b      	str	r3, [r7, #80]	@ 0x50
 80146f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80146f8:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80146fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  R3(d, e, a, b, c, 57);
 80146fe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8014700:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014702:	431a      	orrs	r2, r3
 8014704:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014706:	401a      	ands	r2, r3
 8014708:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 801470a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801470c:	400b      	ands	r3, r1
 801470e:	431a      	orrs	r2, r3
 8014710:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8014712:	693b      	ldr	r3, [r7, #16]
 8014714:	4059      	eors	r1, r3
 8014716:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014718:	4059      	eors	r1, r3
 801471a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801471c:	404b      	eors	r3, r1
 801471e:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8014722:	633b      	str	r3, [r7, #48]	@ 0x30
 8014724:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014726:	441a      	add	r2, r3
 8014728:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801472a:	ea4f 63f3 	mov.w	r3, r3, ror #27
 801472e:	441a      	add	r2, r3
 8014730:	4b0f      	ldr	r3, [pc, #60]	@ (8014770 <mg_sha1_transform+0xea4>)
 8014732:	4413      	add	r3, r2
 8014734:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8014736:	4413      	add	r3, r2
 8014738:	657b      	str	r3, [r7, #84]	@ 0x54
 801473a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801473c:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8014740:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R3(c, d, e, a, b, 58);
 8014742:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8014744:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014746:	431a      	orrs	r2, r3
 8014748:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801474a:	401a      	ands	r2, r3
 801474c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801474e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014750:	400b      	ands	r3, r1
 8014752:	431a      	orrs	r2, r3
 8014754:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8014756:	697b      	ldr	r3, [r7, #20]
 8014758:	4059      	eors	r1, r3
 801475a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801475c:	4059      	eors	r1, r3
 801475e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014760:	404b      	eors	r3, r1
 8014762:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8014766:	637b      	str	r3, [r7, #52]	@ 0x34
 8014768:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801476a:	441a      	add	r2, r3
 801476c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801476e:	e001      	b.n	8014774 <mg_sha1_transform+0xea8>
 8014770:	8f1bbcdc 	.word	0x8f1bbcdc
 8014774:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8014778:	441a      	add	r2, r3
 801477a:	4ba9      	ldr	r3, [pc, #676]	@ (8014a20 <mg_sha1_transform+0x1154>)
 801477c:	4413      	add	r3, r2
 801477e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8014780:	4413      	add	r3, r2
 8014782:	65bb      	str	r3, [r7, #88]	@ 0x58
 8014784:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014786:	ea4f 03b3 	mov.w	r3, r3, ror #2
 801478a:	653b      	str	r3, [r7, #80]	@ 0x50
  R3(b, c, d, e, a, 59);
 801478c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801478e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014790:	431a      	orrs	r2, r3
 8014792:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014794:	401a      	ands	r2, r3
 8014796:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8014798:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801479a:	400b      	ands	r3, r1
 801479c:	431a      	orrs	r2, r3
 801479e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80147a0:	69bb      	ldr	r3, [r7, #24]
 80147a2:	4059      	eors	r1, r3
 80147a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80147a6:	4059      	eors	r1, r3
 80147a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80147aa:	404b      	eors	r3, r1
 80147ac:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80147b0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80147b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80147b4:	441a      	add	r2, r3
 80147b6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80147b8:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80147bc:	441a      	add	r2, r3
 80147be:	4b98      	ldr	r3, [pc, #608]	@ (8014a20 <mg_sha1_transform+0x1154>)
 80147c0:	4413      	add	r3, r2
 80147c2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80147c4:	4413      	add	r3, r2
 80147c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80147c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80147ca:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80147ce:	657b      	str	r3, [r7, #84]	@ 0x54
  R4(a, b, c, d, e, 60);
 80147d0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80147d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80147d4:	405a      	eors	r2, r3
 80147d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80147d8:	405a      	eors	r2, r3
 80147da:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80147dc:	69fb      	ldr	r3, [r7, #28]
 80147de:	4059      	eors	r1, r3
 80147e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80147e2:	4059      	eors	r1, r3
 80147e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80147e6:	404b      	eors	r3, r1
 80147e8:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80147ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80147ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80147f0:	441a      	add	r2, r3
 80147f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80147f4:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80147f8:	441a      	add	r2, r3
 80147fa:	4b8a      	ldr	r3, [pc, #552]	@ (8014a24 <mg_sha1_transform+0x1158>)
 80147fc:	4413      	add	r3, r2
 80147fe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8014800:	4413      	add	r3, r2
 8014802:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8014804:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014806:	ea4f 03b3 	mov.w	r3, r3, ror #2
 801480a:	65bb      	str	r3, [r7, #88]	@ 0x58
  R4(e, a, b, c, d, 61);
 801480c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801480e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014810:	405a      	eors	r2, r3
 8014812:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014814:	405a      	eors	r2, r3
 8014816:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8014818:	6a3b      	ldr	r3, [r7, #32]
 801481a:	4059      	eors	r1, r3
 801481c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801481e:	4059      	eors	r1, r3
 8014820:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014822:	404b      	eors	r3, r1
 8014824:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8014828:	643b      	str	r3, [r7, #64]	@ 0x40
 801482a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801482c:	441a      	add	r2, r3
 801482e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014830:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8014834:	441a      	add	r2, r3
 8014836:	4b7b      	ldr	r3, [pc, #492]	@ (8014a24 <mg_sha1_transform+0x1158>)
 8014838:	4413      	add	r3, r2
 801483a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801483c:	4413      	add	r3, r2
 801483e:	653b      	str	r3, [r7, #80]	@ 0x50
 8014840:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014842:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8014846:	65fb      	str	r3, [r7, #92]	@ 0x5c
  R4(d, e, a, b, c, 62);
 8014848:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801484a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801484c:	405a      	eors	r2, r3
 801484e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014850:	405a      	eors	r2, r3
 8014852:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8014854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014856:	4059      	eors	r1, r3
 8014858:	68fb      	ldr	r3, [r7, #12]
 801485a:	4059      	eors	r1, r3
 801485c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801485e:	404b      	eors	r3, r1
 8014860:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8014864:	647b      	str	r3, [r7, #68]	@ 0x44
 8014866:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014868:	441a      	add	r2, r3
 801486a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801486c:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8014870:	441a      	add	r2, r3
 8014872:	4b6c      	ldr	r3, [pc, #432]	@ (8014a24 <mg_sha1_transform+0x1158>)
 8014874:	4413      	add	r3, r2
 8014876:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8014878:	4413      	add	r3, r2
 801487a:	657b      	str	r3, [r7, #84]	@ 0x54
 801487c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801487e:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8014882:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R4(c, d, e, a, b, 63);
 8014884:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8014886:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014888:	405a      	eors	r2, r3
 801488a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801488c:	405a      	eors	r2, r3
 801488e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8014890:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014892:	4059      	eors	r1, r3
 8014894:	693b      	ldr	r3, [r7, #16]
 8014896:	4059      	eors	r1, r3
 8014898:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801489a:	404b      	eors	r3, r1
 801489c:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80148a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80148a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80148a4:	441a      	add	r2, r3
 80148a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80148a8:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80148ac:	441a      	add	r2, r3
 80148ae:	4b5d      	ldr	r3, [pc, #372]	@ (8014a24 <mg_sha1_transform+0x1158>)
 80148b0:	4413      	add	r3, r2
 80148b2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80148b4:	4413      	add	r3, r2
 80148b6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80148b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80148ba:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80148be:	653b      	str	r3, [r7, #80]	@ 0x50
  R4(b, c, d, e, a, 64);
 80148c0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80148c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80148c4:	405a      	eors	r2, r3
 80148c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80148c8:	405a      	eors	r2, r3
 80148ca:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80148cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80148ce:	4059      	eors	r1, r3
 80148d0:	697b      	ldr	r3, [r7, #20]
 80148d2:	4059      	eors	r1, r3
 80148d4:	68fb      	ldr	r3, [r7, #12]
 80148d6:	404b      	eors	r3, r1
 80148d8:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80148dc:	60fb      	str	r3, [r7, #12]
 80148de:	68fb      	ldr	r3, [r7, #12]
 80148e0:	441a      	add	r2, r3
 80148e2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80148e4:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80148e8:	441a      	add	r2, r3
 80148ea:	4b4e      	ldr	r3, [pc, #312]	@ (8014a24 <mg_sha1_transform+0x1158>)
 80148ec:	4413      	add	r3, r2
 80148ee:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80148f0:	4413      	add	r3, r2
 80148f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80148f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80148f6:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80148fa:	657b      	str	r3, [r7, #84]	@ 0x54
  R4(a, b, c, d, e, 65);
 80148fc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80148fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014900:	405a      	eors	r2, r3
 8014902:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014904:	405a      	eors	r2, r3
 8014906:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8014908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801490a:	4059      	eors	r1, r3
 801490c:	69bb      	ldr	r3, [r7, #24]
 801490e:	4059      	eors	r1, r3
 8014910:	693b      	ldr	r3, [r7, #16]
 8014912:	404b      	eors	r3, r1
 8014914:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8014918:	613b      	str	r3, [r7, #16]
 801491a:	693b      	ldr	r3, [r7, #16]
 801491c:	441a      	add	r2, r3
 801491e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014920:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8014924:	441a      	add	r2, r3
 8014926:	4b3f      	ldr	r3, [pc, #252]	@ (8014a24 <mg_sha1_transform+0x1158>)
 8014928:	4413      	add	r3, r2
 801492a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801492c:	4413      	add	r3, r2
 801492e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8014930:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014932:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8014936:	65bb      	str	r3, [r7, #88]	@ 0x58
  R4(e, a, b, c, d, 66);
 8014938:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801493a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801493c:	405a      	eors	r2, r3
 801493e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014940:	405a      	eors	r2, r3
 8014942:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8014944:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014946:	4059      	eors	r1, r3
 8014948:	69fb      	ldr	r3, [r7, #28]
 801494a:	4059      	eors	r1, r3
 801494c:	697b      	ldr	r3, [r7, #20]
 801494e:	404b      	eors	r3, r1
 8014950:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8014954:	617b      	str	r3, [r7, #20]
 8014956:	697b      	ldr	r3, [r7, #20]
 8014958:	441a      	add	r2, r3
 801495a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801495c:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8014960:	441a      	add	r2, r3
 8014962:	4b30      	ldr	r3, [pc, #192]	@ (8014a24 <mg_sha1_transform+0x1158>)
 8014964:	4413      	add	r3, r2
 8014966:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8014968:	4413      	add	r3, r2
 801496a:	653b      	str	r3, [r7, #80]	@ 0x50
 801496c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801496e:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8014972:	65fb      	str	r3, [r7, #92]	@ 0x5c
  R4(d, e, a, b, c, 67);
 8014974:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8014976:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014978:	405a      	eors	r2, r3
 801497a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801497c:	405a      	eors	r2, r3
 801497e:	68f9      	ldr	r1, [r7, #12]
 8014980:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014982:	4059      	eors	r1, r3
 8014984:	6a3b      	ldr	r3, [r7, #32]
 8014986:	4059      	eors	r1, r3
 8014988:	69bb      	ldr	r3, [r7, #24]
 801498a:	404b      	eors	r3, r1
 801498c:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8014990:	61bb      	str	r3, [r7, #24]
 8014992:	69bb      	ldr	r3, [r7, #24]
 8014994:	441a      	add	r2, r3
 8014996:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014998:	ea4f 63f3 	mov.w	r3, r3, ror #27
 801499c:	441a      	add	r2, r3
 801499e:	4b21      	ldr	r3, [pc, #132]	@ (8014a24 <mg_sha1_transform+0x1158>)
 80149a0:	4413      	add	r3, r2
 80149a2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80149a4:	4413      	add	r3, r2
 80149a6:	657b      	str	r3, [r7, #84]	@ 0x54
 80149a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80149aa:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80149ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R4(c, d, e, a, b, 68);
 80149b0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80149b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80149b4:	405a      	eors	r2, r3
 80149b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80149b8:	405a      	eors	r2, r3
 80149ba:	6939      	ldr	r1, [r7, #16]
 80149bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80149be:	4059      	eors	r1, r3
 80149c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80149c2:	4059      	eors	r1, r3
 80149c4:	69fb      	ldr	r3, [r7, #28]
 80149c6:	404b      	eors	r3, r1
 80149c8:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80149cc:	61fb      	str	r3, [r7, #28]
 80149ce:	69fb      	ldr	r3, [r7, #28]
 80149d0:	441a      	add	r2, r3
 80149d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80149d4:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80149d8:	441a      	add	r2, r3
 80149da:	4b12      	ldr	r3, [pc, #72]	@ (8014a24 <mg_sha1_transform+0x1158>)
 80149dc:	4413      	add	r3, r2
 80149de:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80149e0:	4413      	add	r3, r2
 80149e2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80149e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80149e6:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80149ea:	653b      	str	r3, [r7, #80]	@ 0x50
  R4(b, c, d, e, a, 69);
 80149ec:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80149ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80149f0:	405a      	eors	r2, r3
 80149f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80149f4:	405a      	eors	r2, r3
 80149f6:	6979      	ldr	r1, [r7, #20]
 80149f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80149fa:	4059      	eors	r1, r3
 80149fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80149fe:	4059      	eors	r1, r3
 8014a00:	6a3b      	ldr	r3, [r7, #32]
 8014a02:	404b      	eors	r3, r1
 8014a04:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8014a08:	623b      	str	r3, [r7, #32]
 8014a0a:	6a3b      	ldr	r3, [r7, #32]
 8014a0c:	441a      	add	r2, r3
 8014a0e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014a10:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8014a14:	441a      	add	r2, r3
 8014a16:	4b03      	ldr	r3, [pc, #12]	@ (8014a24 <mg_sha1_transform+0x1158>)
 8014a18:	4413      	add	r3, r2
 8014a1a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8014a1c:	4413      	add	r3, r2
 8014a1e:	e003      	b.n	8014a28 <mg_sha1_transform+0x115c>
 8014a20:	8f1bbcdc 	.word	0x8f1bbcdc
 8014a24:	ca62c1d6 	.word	0xca62c1d6
 8014a28:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8014a2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014a2c:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8014a30:	657b      	str	r3, [r7, #84]	@ 0x54
  R4(a, b, c, d, e, 70);
 8014a32:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8014a34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014a36:	405a      	eors	r2, r3
 8014a38:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014a3a:	405a      	eors	r2, r3
 8014a3c:	69b9      	ldr	r1, [r7, #24]
 8014a3e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014a40:	4059      	eors	r1, r3
 8014a42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014a44:	4059      	eors	r1, r3
 8014a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014a48:	404b      	eors	r3, r1
 8014a4a:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8014a4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8014a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014a52:	441a      	add	r2, r3
 8014a54:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014a56:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8014a5a:	441a      	add	r2, r3
 8014a5c:	4ba7      	ldr	r3, [pc, #668]	@ (8014cfc <mg_sha1_transform+0x1430>)
 8014a5e:	4413      	add	r3, r2
 8014a60:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8014a62:	4413      	add	r3, r2
 8014a64:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8014a66:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014a68:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8014a6c:	65bb      	str	r3, [r7, #88]	@ 0x58
  R4(e, a, b, c, d, 71);
 8014a6e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8014a70:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014a72:	405a      	eors	r2, r3
 8014a74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014a76:	405a      	eors	r2, r3
 8014a78:	69f9      	ldr	r1, [r7, #28]
 8014a7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014a7c:	4059      	eors	r1, r3
 8014a7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014a80:	4059      	eors	r1, r3
 8014a82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014a84:	404b      	eors	r3, r1
 8014a86:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8014a8a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8014a8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014a8e:	441a      	add	r2, r3
 8014a90:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014a92:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8014a96:	441a      	add	r2, r3
 8014a98:	4b98      	ldr	r3, [pc, #608]	@ (8014cfc <mg_sha1_transform+0x1430>)
 8014a9a:	4413      	add	r3, r2
 8014a9c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8014a9e:	4413      	add	r3, r2
 8014aa0:	653b      	str	r3, [r7, #80]	@ 0x50
 8014aa2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014aa4:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8014aa8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  R4(d, e, a, b, c, 72);
 8014aaa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8014aac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014aae:	405a      	eors	r2, r3
 8014ab0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014ab2:	405a      	eors	r2, r3
 8014ab4:	6a39      	ldr	r1, [r7, #32]
 8014ab6:	68fb      	ldr	r3, [r7, #12]
 8014ab8:	4059      	eors	r1, r3
 8014aba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014abc:	4059      	eors	r1, r3
 8014abe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014ac0:	404b      	eors	r3, r1
 8014ac2:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8014ac6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8014ac8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014aca:	441a      	add	r2, r3
 8014acc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014ace:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8014ad2:	441a      	add	r2, r3
 8014ad4:	4b89      	ldr	r3, [pc, #548]	@ (8014cfc <mg_sha1_transform+0x1430>)
 8014ad6:	4413      	add	r3, r2
 8014ad8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8014ada:	4413      	add	r3, r2
 8014adc:	657b      	str	r3, [r7, #84]	@ 0x54
 8014ade:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014ae0:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8014ae4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R4(c, d, e, a, b, 73);
 8014ae6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8014ae8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014aea:	405a      	eors	r2, r3
 8014aec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014aee:	405a      	eors	r2, r3
 8014af0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8014af2:	693b      	ldr	r3, [r7, #16]
 8014af4:	4059      	eors	r1, r3
 8014af6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014af8:	4059      	eors	r1, r3
 8014afa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014afc:	404b      	eors	r3, r1
 8014afe:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8014b02:	633b      	str	r3, [r7, #48]	@ 0x30
 8014b04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b06:	441a      	add	r2, r3
 8014b08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014b0a:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8014b0e:	441a      	add	r2, r3
 8014b10:	4b7a      	ldr	r3, [pc, #488]	@ (8014cfc <mg_sha1_transform+0x1430>)
 8014b12:	4413      	add	r3, r2
 8014b14:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8014b16:	4413      	add	r3, r2
 8014b18:	65bb      	str	r3, [r7, #88]	@ 0x58
 8014b1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014b1c:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8014b20:	653b      	str	r3, [r7, #80]	@ 0x50
  R4(b, c, d, e, a, 74);
 8014b22:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8014b24:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014b26:	405a      	eors	r2, r3
 8014b28:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014b2a:	405a      	eors	r2, r3
 8014b2c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8014b2e:	697b      	ldr	r3, [r7, #20]
 8014b30:	4059      	eors	r1, r3
 8014b32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014b34:	4059      	eors	r1, r3
 8014b36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014b38:	404b      	eors	r3, r1
 8014b3a:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8014b3e:	637b      	str	r3, [r7, #52]	@ 0x34
 8014b40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014b42:	441a      	add	r2, r3
 8014b44:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014b46:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8014b4a:	441a      	add	r2, r3
 8014b4c:	4b6b      	ldr	r3, [pc, #428]	@ (8014cfc <mg_sha1_transform+0x1430>)
 8014b4e:	4413      	add	r3, r2
 8014b50:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8014b52:	4413      	add	r3, r2
 8014b54:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8014b56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014b58:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8014b5c:	657b      	str	r3, [r7, #84]	@ 0x54
  R4(a, b, c, d, e, 75);
 8014b5e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8014b60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014b62:	405a      	eors	r2, r3
 8014b64:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014b66:	405a      	eors	r2, r3
 8014b68:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8014b6a:	69bb      	ldr	r3, [r7, #24]
 8014b6c:	4059      	eors	r1, r3
 8014b6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014b70:	4059      	eors	r1, r3
 8014b72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014b74:	404b      	eors	r3, r1
 8014b76:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8014b7a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8014b7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014b7e:	441a      	add	r2, r3
 8014b80:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014b82:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8014b86:	441a      	add	r2, r3
 8014b88:	4b5c      	ldr	r3, [pc, #368]	@ (8014cfc <mg_sha1_transform+0x1430>)
 8014b8a:	4413      	add	r3, r2
 8014b8c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8014b8e:	4413      	add	r3, r2
 8014b90:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8014b92:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014b94:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8014b98:	65bb      	str	r3, [r7, #88]	@ 0x58
  R4(e, a, b, c, d, 76);
 8014b9a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8014b9c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014b9e:	405a      	eors	r2, r3
 8014ba0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014ba2:	405a      	eors	r2, r3
 8014ba4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8014ba6:	69fb      	ldr	r3, [r7, #28]
 8014ba8:	4059      	eors	r1, r3
 8014baa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014bac:	4059      	eors	r1, r3
 8014bae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014bb0:	404b      	eors	r3, r1
 8014bb2:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8014bb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014bb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014bba:	441a      	add	r2, r3
 8014bbc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014bbe:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8014bc2:	441a      	add	r2, r3
 8014bc4:	4b4d      	ldr	r3, [pc, #308]	@ (8014cfc <mg_sha1_transform+0x1430>)
 8014bc6:	4413      	add	r3, r2
 8014bc8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8014bca:	4413      	add	r3, r2
 8014bcc:	653b      	str	r3, [r7, #80]	@ 0x50
 8014bce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014bd0:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8014bd4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  R4(d, e, a, b, c, 77);
 8014bd6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8014bd8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014bda:	405a      	eors	r2, r3
 8014bdc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014bde:	405a      	eors	r2, r3
 8014be0:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8014be2:	6a3b      	ldr	r3, [r7, #32]
 8014be4:	4059      	eors	r1, r3
 8014be6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014be8:	4059      	eors	r1, r3
 8014bea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014bec:	404b      	eors	r3, r1
 8014bee:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8014bf2:	643b      	str	r3, [r7, #64]	@ 0x40
 8014bf4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014bf6:	441a      	add	r2, r3
 8014bf8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014bfa:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8014bfe:	441a      	add	r2, r3
 8014c00:	4b3e      	ldr	r3, [pc, #248]	@ (8014cfc <mg_sha1_transform+0x1430>)
 8014c02:	4413      	add	r3, r2
 8014c04:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8014c06:	4413      	add	r3, r2
 8014c08:	657b      	str	r3, [r7, #84]	@ 0x54
 8014c0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014c0c:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8014c10:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R4(c, d, e, a, b, 78);
 8014c12:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8014c14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014c16:	405a      	eors	r2, r3
 8014c18:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014c1a:	405a      	eors	r2, r3
 8014c1c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8014c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014c20:	4059      	eors	r1, r3
 8014c22:	68fb      	ldr	r3, [r7, #12]
 8014c24:	4059      	eors	r1, r3
 8014c26:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014c28:	404b      	eors	r3, r1
 8014c2a:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8014c2e:	647b      	str	r3, [r7, #68]	@ 0x44
 8014c30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014c32:	441a      	add	r2, r3
 8014c34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014c36:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8014c3a:	441a      	add	r2, r3
 8014c3c:	4b2f      	ldr	r3, [pc, #188]	@ (8014cfc <mg_sha1_transform+0x1430>)
 8014c3e:	4413      	add	r3, r2
 8014c40:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8014c42:	4413      	add	r3, r2
 8014c44:	65bb      	str	r3, [r7, #88]	@ 0x58
 8014c46:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014c48:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8014c4c:	653b      	str	r3, [r7, #80]	@ 0x50
  R4(b, c, d, e, a, 79);
 8014c4e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8014c50:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014c52:	405a      	eors	r2, r3
 8014c54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014c56:	405a      	eors	r2, r3
 8014c58:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8014c5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014c5c:	4059      	eors	r1, r3
 8014c5e:	693b      	ldr	r3, [r7, #16]
 8014c60:	4059      	eors	r1, r3
 8014c62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014c64:	404b      	eors	r3, r1
 8014c66:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8014c6a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8014c6c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014c6e:	441a      	add	r2, r3
 8014c70:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014c72:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8014c76:	441a      	add	r2, r3
 8014c78:	4b20      	ldr	r3, [pc, #128]	@ (8014cfc <mg_sha1_transform+0x1430>)
 8014c7a:	4413      	add	r3, r2
 8014c7c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8014c7e:	4413      	add	r3, r2
 8014c80:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8014c82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014c84:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8014c88:	657b      	str	r3, [r7, #84]	@ 0x54
  state[0] += a;
 8014c8a:	687b      	ldr	r3, [r7, #4]
 8014c8c:	681a      	ldr	r2, [r3, #0]
 8014c8e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014c90:	441a      	add	r2, r3
 8014c92:	687b      	ldr	r3, [r7, #4]
 8014c94:	601a      	str	r2, [r3, #0]
  state[1] += b;
 8014c96:	687b      	ldr	r3, [r7, #4]
 8014c98:	3304      	adds	r3, #4
 8014c9a:	6819      	ldr	r1, [r3, #0]
 8014c9c:	687b      	ldr	r3, [r7, #4]
 8014c9e:	3304      	adds	r3, #4
 8014ca0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8014ca2:	440a      	add	r2, r1
 8014ca4:	601a      	str	r2, [r3, #0]
  state[2] += c;
 8014ca6:	687b      	ldr	r3, [r7, #4]
 8014ca8:	3308      	adds	r3, #8
 8014caa:	6819      	ldr	r1, [r3, #0]
 8014cac:	687b      	ldr	r3, [r7, #4]
 8014cae:	3308      	adds	r3, #8
 8014cb0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8014cb2:	440a      	add	r2, r1
 8014cb4:	601a      	str	r2, [r3, #0]
  state[3] += d;
 8014cb6:	687b      	ldr	r3, [r7, #4]
 8014cb8:	330c      	adds	r3, #12
 8014cba:	6819      	ldr	r1, [r3, #0]
 8014cbc:	687b      	ldr	r3, [r7, #4]
 8014cbe:	330c      	adds	r3, #12
 8014cc0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8014cc2:	440a      	add	r2, r1
 8014cc4:	601a      	str	r2, [r3, #0]
  state[4] += e;
 8014cc6:	687b      	ldr	r3, [r7, #4]
 8014cc8:	3310      	adds	r3, #16
 8014cca:	6819      	ldr	r1, [r3, #0]
 8014ccc:	687b      	ldr	r3, [r7, #4]
 8014cce:	3310      	adds	r3, #16
 8014cd0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8014cd2:	440a      	add	r2, r1
 8014cd4:	601a      	str	r2, [r3, #0]
  /* Erase working structures. The order of operations is important,
   * used to ensure that compiler doesn't optimize those out. */
  memset(block, 0, sizeof(block));
 8014cd6:	f107 030c 	add.w	r3, r7, #12
 8014cda:	2240      	movs	r2, #64	@ 0x40
 8014cdc:	2100      	movs	r1, #0
 8014cde:	4618      	mov	r0, r3
 8014ce0:	f012 fcf2 	bl	80276c8 <memset>
  a = b = c = d = e = 0;
 8014ce4:	2300      	movs	r3, #0
 8014ce6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8014ce8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014cea:	653b      	str	r3, [r7, #80]	@ 0x50
 8014cec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014cee:	657b      	str	r3, [r7, #84]	@ 0x54
 8014cf0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014cf2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8014cf4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014cf6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8014cf8:	e002      	b.n	8014d00 <mg_sha1_transform+0x1434>
 8014cfa:	bf00      	nop
 8014cfc:	ca62c1d6 	.word	0xca62c1d6
  (void) a;
  (void) b;
  (void) c;
  (void) d;
  (void) e;
}
 8014d00:	bf00      	nop
 8014d02:	3764      	adds	r7, #100	@ 0x64
 8014d04:	46bd      	mov	sp, r7
 8014d06:	bd90      	pop	{r4, r7, pc}

08014d08 <mg_sha1_init>:

void mg_sha1_init(mg_sha1_ctx *context) {
 8014d08:	b480      	push	{r7}
 8014d0a:	b083      	sub	sp, #12
 8014d0c:	af00      	add	r7, sp, #0
 8014d0e:	6078      	str	r0, [r7, #4]
  context->state[0] = 0x67452301;
 8014d10:	687b      	ldr	r3, [r7, #4]
 8014d12:	4a0d      	ldr	r2, [pc, #52]	@ (8014d48 <mg_sha1_init+0x40>)
 8014d14:	601a      	str	r2, [r3, #0]
  context->state[1] = 0xEFCDAB89;
 8014d16:	687b      	ldr	r3, [r7, #4]
 8014d18:	4a0c      	ldr	r2, [pc, #48]	@ (8014d4c <mg_sha1_init+0x44>)
 8014d1a:	605a      	str	r2, [r3, #4]
  context->state[2] = 0x98BADCFE;
 8014d1c:	687b      	ldr	r3, [r7, #4]
 8014d1e:	4a0c      	ldr	r2, [pc, #48]	@ (8014d50 <mg_sha1_init+0x48>)
 8014d20:	609a      	str	r2, [r3, #8]
  context->state[3] = 0x10325476;
 8014d22:	687b      	ldr	r3, [r7, #4]
 8014d24:	4a0b      	ldr	r2, [pc, #44]	@ (8014d54 <mg_sha1_init+0x4c>)
 8014d26:	60da      	str	r2, [r3, #12]
  context->state[4] = 0xC3D2E1F0;
 8014d28:	687b      	ldr	r3, [r7, #4]
 8014d2a:	4a0b      	ldr	r2, [pc, #44]	@ (8014d58 <mg_sha1_init+0x50>)
 8014d2c:	611a      	str	r2, [r3, #16]
  context->count[0] = context->count[1] = 0;
 8014d2e:	687b      	ldr	r3, [r7, #4]
 8014d30:	2200      	movs	r2, #0
 8014d32:	619a      	str	r2, [r3, #24]
 8014d34:	687b      	ldr	r3, [r7, #4]
 8014d36:	699a      	ldr	r2, [r3, #24]
 8014d38:	687b      	ldr	r3, [r7, #4]
 8014d3a:	615a      	str	r2, [r3, #20]
}
 8014d3c:	bf00      	nop
 8014d3e:	370c      	adds	r7, #12
 8014d40:	46bd      	mov	sp, r7
 8014d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d46:	4770      	bx	lr
 8014d48:	67452301 	.word	0x67452301
 8014d4c:	efcdab89 	.word	0xefcdab89
 8014d50:	98badcfe 	.word	0x98badcfe
 8014d54:	10325476 	.word	0x10325476
 8014d58:	c3d2e1f0 	.word	0xc3d2e1f0

08014d5c <mg_sha1_update>:

void mg_sha1_update(mg_sha1_ctx *context, const unsigned char *data,
                    size_t len) {
 8014d5c:	b580      	push	{r7, lr}
 8014d5e:	b086      	sub	sp, #24
 8014d60:	af00      	add	r7, sp, #0
 8014d62:	60f8      	str	r0, [r7, #12]
 8014d64:	60b9      	str	r1, [r7, #8]
 8014d66:	607a      	str	r2, [r7, #4]
  size_t i, j;

  j = context->count[0];
 8014d68:	68fb      	ldr	r3, [r7, #12]
 8014d6a:	695b      	ldr	r3, [r3, #20]
 8014d6c:	613b      	str	r3, [r7, #16]
  if ((context->count[0] += (uint32_t) len << 3) < j) context->count[1]++;
 8014d6e:	68fb      	ldr	r3, [r7, #12]
 8014d70:	695a      	ldr	r2, [r3, #20]
 8014d72:	687b      	ldr	r3, [r7, #4]
 8014d74:	00db      	lsls	r3, r3, #3
 8014d76:	441a      	add	r2, r3
 8014d78:	68fb      	ldr	r3, [r7, #12]
 8014d7a:	615a      	str	r2, [r3, #20]
 8014d7c:	68fb      	ldr	r3, [r7, #12]
 8014d7e:	695b      	ldr	r3, [r3, #20]
 8014d80:	693a      	ldr	r2, [r7, #16]
 8014d82:	429a      	cmp	r2, r3
 8014d84:	d904      	bls.n	8014d90 <mg_sha1_update+0x34>
 8014d86:	68fb      	ldr	r3, [r7, #12]
 8014d88:	699b      	ldr	r3, [r3, #24]
 8014d8a:	1c5a      	adds	r2, r3, #1
 8014d8c:	68fb      	ldr	r3, [r7, #12]
 8014d8e:	619a      	str	r2, [r3, #24]
  context->count[1] += (uint32_t) (len >> 29);
 8014d90:	68fb      	ldr	r3, [r7, #12]
 8014d92:	699a      	ldr	r2, [r3, #24]
 8014d94:	687b      	ldr	r3, [r7, #4]
 8014d96:	0f5b      	lsrs	r3, r3, #29
 8014d98:	441a      	add	r2, r3
 8014d9a:	68fb      	ldr	r3, [r7, #12]
 8014d9c:	619a      	str	r2, [r3, #24]
  j = (j >> 3) & 63;
 8014d9e:	693b      	ldr	r3, [r7, #16]
 8014da0:	08db      	lsrs	r3, r3, #3
 8014da2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8014da6:	613b      	str	r3, [r7, #16]
  if ((j + len) > 63) {
 8014da8:	693a      	ldr	r2, [r7, #16]
 8014daa:	687b      	ldr	r3, [r7, #4]
 8014dac:	4413      	add	r3, r2
 8014dae:	2b3f      	cmp	r3, #63	@ 0x3f
 8014db0:	d926      	bls.n	8014e00 <mg_sha1_update+0xa4>
    memcpy(&context->buffer[j], data, (i = 64 - j));
 8014db2:	693b      	ldr	r3, [r7, #16]
 8014db4:	3318      	adds	r3, #24
 8014db6:	68fa      	ldr	r2, [r7, #12]
 8014db8:	4413      	add	r3, r2
 8014dba:	1d18      	adds	r0, r3, #4
 8014dbc:	693b      	ldr	r3, [r7, #16]
 8014dbe:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8014dc2:	617b      	str	r3, [r7, #20]
 8014dc4:	697a      	ldr	r2, [r7, #20]
 8014dc6:	68b9      	ldr	r1, [r7, #8]
 8014dc8:	f012 fdb7 	bl	802793a <memcpy>
    mg_sha1_transform(context->state, context->buffer);
 8014dcc:	68fa      	ldr	r2, [r7, #12]
 8014dce:	68fb      	ldr	r3, [r7, #12]
 8014dd0:	331c      	adds	r3, #28
 8014dd2:	4619      	mov	r1, r3
 8014dd4:	4610      	mov	r0, r2
 8014dd6:	f7fe fd79 	bl	80138cc <mg_sha1_transform>
    for (; i + 63 < len; i += 64) {
 8014dda:	e009      	b.n	8014df0 <mg_sha1_update+0x94>
      mg_sha1_transform(context->state, &data[i]);
 8014ddc:	68f8      	ldr	r0, [r7, #12]
 8014dde:	68ba      	ldr	r2, [r7, #8]
 8014de0:	697b      	ldr	r3, [r7, #20]
 8014de2:	4413      	add	r3, r2
 8014de4:	4619      	mov	r1, r3
 8014de6:	f7fe fd71 	bl	80138cc <mg_sha1_transform>
    for (; i + 63 < len; i += 64) {
 8014dea:	697b      	ldr	r3, [r7, #20]
 8014dec:	3340      	adds	r3, #64	@ 0x40
 8014dee:	617b      	str	r3, [r7, #20]
 8014df0:	697b      	ldr	r3, [r7, #20]
 8014df2:	333f      	adds	r3, #63	@ 0x3f
 8014df4:	687a      	ldr	r2, [r7, #4]
 8014df6:	429a      	cmp	r2, r3
 8014df8:	d8f0      	bhi.n	8014ddc <mg_sha1_update+0x80>
    }
    j = 0;
 8014dfa:	2300      	movs	r3, #0
 8014dfc:	613b      	str	r3, [r7, #16]
 8014dfe:	e001      	b.n	8014e04 <mg_sha1_update+0xa8>
  } else
    i = 0;
 8014e00:	2300      	movs	r3, #0
 8014e02:	617b      	str	r3, [r7, #20]
  memcpy(&context->buffer[j], &data[i], len - i);
 8014e04:	693b      	ldr	r3, [r7, #16]
 8014e06:	3318      	adds	r3, #24
 8014e08:	68fa      	ldr	r2, [r7, #12]
 8014e0a:	4413      	add	r3, r2
 8014e0c:	1d18      	adds	r0, r3, #4
 8014e0e:	68ba      	ldr	r2, [r7, #8]
 8014e10:	697b      	ldr	r3, [r7, #20]
 8014e12:	18d1      	adds	r1, r2, r3
 8014e14:	687a      	ldr	r2, [r7, #4]
 8014e16:	697b      	ldr	r3, [r7, #20]
 8014e18:	1ad3      	subs	r3, r2, r3
 8014e1a:	461a      	mov	r2, r3
 8014e1c:	f012 fd8d 	bl	802793a <memcpy>
}
 8014e20:	bf00      	nop
 8014e22:	3718      	adds	r7, #24
 8014e24:	46bd      	mov	sp, r7
 8014e26:	bd80      	pop	{r7, pc}

08014e28 <mg_sha1_final>:

void mg_sha1_final(unsigned char digest[20], mg_sha1_ctx *context) {
 8014e28:	b580      	push	{r7, lr}
 8014e2a:	b086      	sub	sp, #24
 8014e2c:	af00      	add	r7, sp, #0
 8014e2e:	6078      	str	r0, [r7, #4]
 8014e30:	6039      	str	r1, [r7, #0]
  unsigned i;
  unsigned char finalcount[8], c;

  for (i = 0; i < 8; i++) {
 8014e32:	2300      	movs	r3, #0
 8014e34:	617b      	str	r3, [r7, #20]
 8014e36:	e01b      	b.n	8014e70 <mg_sha1_final+0x48>
    finalcount[i] = (unsigned char) ((context->count[(i >= 4 ? 0 : 1)] >>
 8014e38:	697b      	ldr	r3, [r7, #20]
 8014e3a:	2b03      	cmp	r3, #3
 8014e3c:	bf94      	ite	ls
 8014e3e:	2301      	movls	r3, #1
 8014e40:	2300      	movhi	r3, #0
 8014e42:	b2db      	uxtb	r3, r3
 8014e44:	683a      	ldr	r2, [r7, #0]
 8014e46:	3304      	adds	r3, #4
 8014e48:	009b      	lsls	r3, r3, #2
 8014e4a:	4413      	add	r3, r2
 8014e4c:	685a      	ldr	r2, [r3, #4]
                                      ((3 - (i & 3)) * 8)) &
 8014e4e:	697b      	ldr	r3, [r7, #20]
 8014e50:	43db      	mvns	r3, r3
 8014e52:	f003 0303 	and.w	r3, r3, #3
 8014e56:	00db      	lsls	r3, r3, #3
    finalcount[i] = (unsigned char) ((context->count[(i >= 4 ? 0 : 1)] >>
 8014e58:	fa22 f303 	lsr.w	r3, r2, r3
 8014e5c:	b2d9      	uxtb	r1, r3
 8014e5e:	f107 020c 	add.w	r2, r7, #12
 8014e62:	697b      	ldr	r3, [r7, #20]
 8014e64:	4413      	add	r3, r2
 8014e66:	460a      	mov	r2, r1
 8014e68:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < 8; i++) {
 8014e6a:	697b      	ldr	r3, [r7, #20]
 8014e6c:	3301      	adds	r3, #1
 8014e6e:	617b      	str	r3, [r7, #20]
 8014e70:	697b      	ldr	r3, [r7, #20]
 8014e72:	2b07      	cmp	r3, #7
 8014e74:	d9e0      	bls.n	8014e38 <mg_sha1_final+0x10>
                                     255);
  }
  c = 0200;
 8014e76:	2380      	movs	r3, #128	@ 0x80
 8014e78:	72fb      	strb	r3, [r7, #11]
  mg_sha1_update(context, &c, 1);
 8014e7a:	f107 030b 	add.w	r3, r7, #11
 8014e7e:	2201      	movs	r2, #1
 8014e80:	4619      	mov	r1, r3
 8014e82:	6838      	ldr	r0, [r7, #0]
 8014e84:	f7ff ff6a 	bl	8014d5c <mg_sha1_update>
  while ((context->count[0] & 504) != 448) {
 8014e88:	e008      	b.n	8014e9c <mg_sha1_final+0x74>
    c = 0000;
 8014e8a:	2300      	movs	r3, #0
 8014e8c:	72fb      	strb	r3, [r7, #11]
    mg_sha1_update(context, &c, 1);
 8014e8e:	f107 030b 	add.w	r3, r7, #11
 8014e92:	2201      	movs	r2, #1
 8014e94:	4619      	mov	r1, r3
 8014e96:	6838      	ldr	r0, [r7, #0]
 8014e98:	f7ff ff60 	bl	8014d5c <mg_sha1_update>
  while ((context->count[0] & 504) != 448) {
 8014e9c:	683b      	ldr	r3, [r7, #0]
 8014e9e:	695b      	ldr	r3, [r3, #20]
 8014ea0:	f403 73fc 	and.w	r3, r3, #504	@ 0x1f8
 8014ea4:	f5b3 7fe0 	cmp.w	r3, #448	@ 0x1c0
 8014ea8:	d1ef      	bne.n	8014e8a <mg_sha1_final+0x62>
  }
  mg_sha1_update(context, finalcount, 8);
 8014eaa:	f107 030c 	add.w	r3, r7, #12
 8014eae:	2208      	movs	r2, #8
 8014eb0:	4619      	mov	r1, r3
 8014eb2:	6838      	ldr	r0, [r7, #0]
 8014eb4:	f7ff ff52 	bl	8014d5c <mg_sha1_update>
  for (i = 0; i < 20; i++) {
 8014eb8:	2300      	movs	r3, #0
 8014eba:	617b      	str	r3, [r7, #20]
 8014ebc:	e013      	b.n	8014ee6 <mg_sha1_final+0xbe>
    digest[i] =
        (unsigned char) ((context->state[i >> 2] >> ((3 - (i & 3)) * 8)) & 255);
 8014ebe:	697b      	ldr	r3, [r7, #20]
 8014ec0:	089a      	lsrs	r2, r3, #2
 8014ec2:	683b      	ldr	r3, [r7, #0]
 8014ec4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8014ec8:	697b      	ldr	r3, [r7, #20]
 8014eca:	43db      	mvns	r3, r3
 8014ecc:	f003 0303 	and.w	r3, r3, #3
 8014ed0:	00db      	lsls	r3, r3, #3
 8014ed2:	fa22 f103 	lsr.w	r1, r2, r3
    digest[i] =
 8014ed6:	687a      	ldr	r2, [r7, #4]
 8014ed8:	697b      	ldr	r3, [r7, #20]
 8014eda:	4413      	add	r3, r2
        (unsigned char) ((context->state[i >> 2] >> ((3 - (i & 3)) * 8)) & 255);
 8014edc:	b2ca      	uxtb	r2, r1
    digest[i] =
 8014ede:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < 20; i++) {
 8014ee0:	697b      	ldr	r3, [r7, #20]
 8014ee2:	3301      	adds	r3, #1
 8014ee4:	617b      	str	r3, [r7, #20]
 8014ee6:	697b      	ldr	r3, [r7, #20]
 8014ee8:	2b13      	cmp	r3, #19
 8014eea:	d9e8      	bls.n	8014ebe <mg_sha1_final+0x96>
  }
  memset(context, '\0', sizeof(*context));
 8014eec:	225c      	movs	r2, #92	@ 0x5c
 8014eee:	2100      	movs	r1, #0
 8014ef0:	6838      	ldr	r0, [r7, #0]
 8014ef2:	f012 fbe9 	bl	80276c8 <memset>
  memset(&finalcount, '\0', sizeof(finalcount));
 8014ef6:	f107 030c 	add.w	r3, r7, #12
 8014efa:	2208      	movs	r2, #8
 8014efc:	2100      	movs	r1, #0
 8014efe:	4618      	mov	r0, r3
 8014f00:	f012 fbe2 	bl	80276c8 <memset>
}
 8014f04:	bf00      	nop
 8014f06:	3718      	adds	r7, #24
 8014f08:	46bd      	mov	sp, r7
 8014f0a:	bd80      	pop	{r7, pc}

08014f0c <mg_sha256_init>:
    0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a,
    0x5b9cca4f, 0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
    0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2};

void mg_sha256_init(mg_sha256_ctx *ctx) {
 8014f0c:	b480      	push	{r7}
 8014f0e:	b083      	sub	sp, #12
 8014f10:	af00      	add	r7, sp, #0
 8014f12:	6078      	str	r0, [r7, #4]
  ctx->len = 0;
 8014f14:	687b      	ldr	r3, [r7, #4]
 8014f16:	2200      	movs	r2, #0
 8014f18:	629a      	str	r2, [r3, #40]	@ 0x28
  ctx->bits = 0;
 8014f1a:	6879      	ldr	r1, [r7, #4]
 8014f1c:	f04f 0200 	mov.w	r2, #0
 8014f20:	f04f 0300 	mov.w	r3, #0
 8014f24:	e9c1 2308 	strd	r2, r3, [r1, #32]
  ctx->state[0] = 0x6a09e667;
 8014f28:	687b      	ldr	r3, [r7, #4]
 8014f2a:	4a0e      	ldr	r2, [pc, #56]	@ (8014f64 <mg_sha256_init+0x58>)
 8014f2c:	601a      	str	r2, [r3, #0]
  ctx->state[1] = 0xbb67ae85;
 8014f2e:	687b      	ldr	r3, [r7, #4]
 8014f30:	4a0d      	ldr	r2, [pc, #52]	@ (8014f68 <mg_sha256_init+0x5c>)
 8014f32:	605a      	str	r2, [r3, #4]
  ctx->state[2] = 0x3c6ef372;
 8014f34:	687b      	ldr	r3, [r7, #4]
 8014f36:	4a0d      	ldr	r2, [pc, #52]	@ (8014f6c <mg_sha256_init+0x60>)
 8014f38:	609a      	str	r2, [r3, #8]
  ctx->state[3] = 0xa54ff53a;
 8014f3a:	687b      	ldr	r3, [r7, #4]
 8014f3c:	4a0c      	ldr	r2, [pc, #48]	@ (8014f70 <mg_sha256_init+0x64>)
 8014f3e:	60da      	str	r2, [r3, #12]
  ctx->state[4] = 0x510e527f;
 8014f40:	687b      	ldr	r3, [r7, #4]
 8014f42:	4a0c      	ldr	r2, [pc, #48]	@ (8014f74 <mg_sha256_init+0x68>)
 8014f44:	611a      	str	r2, [r3, #16]
  ctx->state[5] = 0x9b05688c;
 8014f46:	687b      	ldr	r3, [r7, #4]
 8014f48:	4a0b      	ldr	r2, [pc, #44]	@ (8014f78 <mg_sha256_init+0x6c>)
 8014f4a:	615a      	str	r2, [r3, #20]
  ctx->state[6] = 0x1f83d9ab;
 8014f4c:	687b      	ldr	r3, [r7, #4]
 8014f4e:	4a0b      	ldr	r2, [pc, #44]	@ (8014f7c <mg_sha256_init+0x70>)
 8014f50:	619a      	str	r2, [r3, #24]
  ctx->state[7] = 0x5be0cd19;
 8014f52:	687b      	ldr	r3, [r7, #4]
 8014f54:	4a0a      	ldr	r2, [pc, #40]	@ (8014f80 <mg_sha256_init+0x74>)
 8014f56:	61da      	str	r2, [r3, #28]
}
 8014f58:	bf00      	nop
 8014f5a:	370c      	adds	r7, #12
 8014f5c:	46bd      	mov	sp, r7
 8014f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f62:	4770      	bx	lr
 8014f64:	6a09e667 	.word	0x6a09e667
 8014f68:	bb67ae85 	.word	0xbb67ae85
 8014f6c:	3c6ef372 	.word	0x3c6ef372
 8014f70:	a54ff53a 	.word	0xa54ff53a
 8014f74:	510e527f 	.word	0x510e527f
 8014f78:	9b05688c 	.word	0x9b05688c
 8014f7c:	1f83d9ab 	.word	0x1f83d9ab
 8014f80:	5be0cd19 	.word	0x5be0cd19

08014f84 <mg_sha256_chunk>:

static void mg_sha256_chunk(mg_sha256_ctx *ctx) {
 8014f84:	b480      	push	{r7}
 8014f86:	b0cf      	sub	sp, #316	@ 0x13c
 8014f88:	af00      	add	r7, sp, #0
 8014f8a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014f8e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014f92:	6018      	str	r0, [r3, #0]
  int i, j;
  uint32_t a, b, c, d, e, f, g, h;
  uint32_t m[64];
  for (i = 0, j = 0; i < 16; ++i, j += 4)
 8014f94:	2300      	movs	r3, #0
 8014f96:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8014f9a:	2300      	movs	r3, #0
 8014f9c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8014fa0:	e043      	b.n	801502a <mg_sha256_chunk+0xa6>
    m[i] = (uint32_t) (((uint32_t) ctx->buffer[j] << 24) |
 8014fa2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014fa6:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014faa:	681a      	ldr	r2, [r3, #0]
 8014fac:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8014fb0:	4413      	add	r3, r2
 8014fb2:	332c      	adds	r3, #44	@ 0x2c
 8014fb4:	781b      	ldrb	r3, [r3, #0]
 8014fb6:	061a      	lsls	r2, r3, #24
                       ((uint32_t) ctx->buffer[j + 1] << 16) |
 8014fb8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8014fbc:	3301      	adds	r3, #1
 8014fbe:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8014fc2:	f5a1 719a 	sub.w	r1, r1, #308	@ 0x134
 8014fc6:	6809      	ldr	r1, [r1, #0]
 8014fc8:	440b      	add	r3, r1
 8014fca:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8014fce:	041b      	lsls	r3, r3, #16
    m[i] = (uint32_t) (((uint32_t) ctx->buffer[j] << 24) |
 8014fd0:	431a      	orrs	r2, r3
                       ((uint32_t) ctx->buffer[j + 2] << 8) |
 8014fd2:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8014fd6:	3302      	adds	r3, #2
 8014fd8:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8014fdc:	f5a1 719a 	sub.w	r1, r1, #308	@ 0x134
 8014fe0:	6809      	ldr	r1, [r1, #0]
 8014fe2:	440b      	add	r3, r1
 8014fe4:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8014fe8:	021b      	lsls	r3, r3, #8
                       ((uint32_t) ctx->buffer[j + 1] << 16) |
 8014fea:	4313      	orrs	r3, r2
                       ((uint32_t) ctx->buffer[j + 3]));
 8014fec:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8014ff0:	3203      	adds	r2, #3
 8014ff2:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8014ff6:	f5a1 719a 	sub.w	r1, r1, #308	@ 0x134
 8014ffa:	6809      	ldr	r1, [r1, #0]
 8014ffc:	440a      	add	r2, r1
 8014ffe:	f892 202c 	ldrb.w	r2, [r2, #44]	@ 0x2c
    m[i] = (uint32_t) (((uint32_t) ctx->buffer[j] << 24) |
 8015002:	ea43 0102 	orr.w	r1, r3, r2
 8015006:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801500a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 801500e:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8015012:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0, j = 0; i < 16; ++i, j += 4)
 8015016:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801501a:	3301      	adds	r3, #1
 801501c:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8015020:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8015024:	3304      	adds	r3, #4
 8015026:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 801502a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801502e:	2b0f      	cmp	r3, #15
 8015030:	ddb7      	ble.n	8014fa2 <mg_sha256_chunk+0x1e>
  for (; i < 64; ++i)
 8015032:	e069      	b.n	8015108 <mg_sha256_chunk+0x184>
    m[i] = sig1(m[i - 2]) + m[i - 7] + sig0(m[i - 15]) + m[i - 16];
 8015034:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8015038:	1e9a      	subs	r2, r3, #2
 801503a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801503e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8015042:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015046:	ea4f 4273 	mov.w	r2, r3, ror #17
 801504a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801504e:	1e99      	subs	r1, r3, #2
 8015050:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015054:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8015058:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801505c:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8015060:	405a      	eors	r2, r3
 8015062:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8015066:	1e99      	subs	r1, r3, #2
 8015068:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801506c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8015070:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8015074:	0a9b      	lsrs	r3, r3, #10
 8015076:	405a      	eors	r2, r3
 8015078:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801507c:	1fd9      	subs	r1, r3, #7
 801507e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015082:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8015086:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801508a:	441a      	add	r2, r3
 801508c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8015090:	f1a3 010f 	sub.w	r1, r3, #15
 8015094:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015098:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 801509c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80150a0:	ea4f 11f3 	mov.w	r1, r3, ror #7
 80150a4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80150a8:	f1a3 000f 	sub.w	r0, r3, #15
 80150ac:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80150b0:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80150b4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80150b8:	ea4f 43b3 	mov.w	r3, r3, ror #18
 80150bc:	4059      	eors	r1, r3
 80150be:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80150c2:	f1a3 000f 	sub.w	r0, r3, #15
 80150c6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80150ca:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80150ce:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80150d2:	08db      	lsrs	r3, r3, #3
 80150d4:	404b      	eors	r3, r1
 80150d6:	441a      	add	r2, r3
 80150d8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80150dc:	f1a3 0110 	sub.w	r1, r3, #16
 80150e0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80150e4:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80150e8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80150ec:	18d1      	adds	r1, r2, r3
 80150ee:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80150f2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80150f6:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 80150fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (; i < 64; ++i)
 80150fe:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8015102:	3301      	adds	r3, #1
 8015104:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8015108:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801510c:	2b3f      	cmp	r3, #63	@ 0x3f
 801510e:	dd91      	ble.n	8015034 <mg_sha256_chunk+0xb0>

  a = ctx->state[0];
 8015110:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015114:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8015118:	681b      	ldr	r3, [r3, #0]
 801511a:	681b      	ldr	r3, [r3, #0]
 801511c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  b = ctx->state[1];
 8015120:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015124:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8015128:	681b      	ldr	r3, [r3, #0]
 801512a:	685b      	ldr	r3, [r3, #4]
 801512c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  c = ctx->state[2];
 8015130:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015134:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8015138:	681b      	ldr	r3, [r3, #0]
 801513a:	689b      	ldr	r3, [r3, #8]
 801513c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  d = ctx->state[3];
 8015140:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015144:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8015148:	681b      	ldr	r3, [r3, #0]
 801514a:	68db      	ldr	r3, [r3, #12]
 801514c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  e = ctx->state[4];
 8015150:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015154:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8015158:	681b      	ldr	r3, [r3, #0]
 801515a:	691b      	ldr	r3, [r3, #16]
 801515c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  f = ctx->state[5];
 8015160:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015164:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8015168:	681b      	ldr	r3, [r3, #0]
 801516a:	695b      	ldr	r3, [r3, #20]
 801516c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  g = ctx->state[6];
 8015170:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015174:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8015178:	681b      	ldr	r3, [r3, #0]
 801517a:	699b      	ldr	r3, [r3, #24]
 801517c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  h = ctx->state[7];
 8015180:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015184:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8015188:	681b      	ldr	r3, [r3, #0]
 801518a:	69db      	ldr	r3, [r3, #28]
 801518c:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110

  for (i = 0; i < 64; ++i) {
 8015190:	2300      	movs	r3, #0
 8015192:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8015196:	e078      	b.n	801528a <mg_sha256_chunk+0x306>
    uint32_t t1 = h + ep1(e) + ch(e, f, g) + mg_sha256_k[i] + m[i];
 8015198:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801519c:	ea4f 12b3 	mov.w	r2, r3, ror #6
 80151a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80151a4:	ea4f 23f3 	mov.w	r3, r3, ror #11
 80151a8:	405a      	eors	r2, r3
 80151aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80151ae:	ea4f 6373 	mov.w	r3, r3, ror #25
 80151b2:	405a      	eors	r2, r3
 80151b4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80151b8:	441a      	add	r2, r3
 80151ba:	f8d7 111c 	ldr.w	r1, [r7, #284]	@ 0x11c
 80151be:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80151c2:	4019      	ands	r1, r3
 80151c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80151c8:	43d8      	mvns	r0, r3
 80151ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80151ce:	4003      	ands	r3, r0
 80151d0:	404b      	eors	r3, r1
 80151d2:	441a      	add	r2, r3
 80151d4:	496e      	ldr	r1, [pc, #440]	@ (8015390 <mg_sha256_chunk+0x40c>)
 80151d6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80151da:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80151de:	441a      	add	r2, r3
 80151e0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80151e4:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80151e8:	f8d7 1134 	ldr.w	r1, [r7, #308]	@ 0x134
 80151ec:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80151f0:	4413      	add	r3, r2
 80151f2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    uint32_t t2 = ep0(a) + maj(a, b, c);
 80151f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80151fa:	ea4f 02b3 	mov.w	r2, r3, ror #2
 80151fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015202:	ea4f 3373 	mov.w	r3, r3, ror #13
 8015206:	405a      	eors	r2, r3
 8015208:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801520c:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8015210:	405a      	eors	r2, r3
 8015212:	f8d7 1128 	ldr.w	r1, [r7, #296]	@ 0x128
 8015216:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 801521a:	4059      	eors	r1, r3
 801521c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015220:	4019      	ands	r1, r3
 8015222:	f8d7 0128 	ldr.w	r0, [r7, #296]	@ 0x128
 8015226:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 801522a:	4003      	ands	r3, r0
 801522c:	404b      	eors	r3, r1
 801522e:	4413      	add	r3, r2
 8015230:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    h = g;
 8015234:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015238:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    g = f;
 801523c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8015240:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    f = e;
 8015244:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8015248:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    e = d + t1;
 801524c:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 8015250:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015254:	4413      	add	r3, r2
 8015256:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    d = c;
 801525a:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 801525e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    c = b;
 8015262:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015266:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    b = a;
 801526a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801526e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    a = t1 + t2;
 8015272:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 8015276:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 801527a:	4413      	add	r3, r2
 801527c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  for (i = 0; i < 64; ++i) {
 8015280:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8015284:	3301      	adds	r3, #1
 8015286:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 801528a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801528e:	2b3f      	cmp	r3, #63	@ 0x3f
 8015290:	dd82      	ble.n	8015198 <mg_sha256_chunk+0x214>
  }

  ctx->state[0] += a;
 8015292:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015296:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 801529a:	681b      	ldr	r3, [r3, #0]
 801529c:	681a      	ldr	r2, [r3, #0]
 801529e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80152a2:	441a      	add	r2, r3
 80152a4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80152a8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80152ac:	681b      	ldr	r3, [r3, #0]
 80152ae:	601a      	str	r2, [r3, #0]
  ctx->state[1] += b;
 80152b0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80152b4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80152b8:	681b      	ldr	r3, [r3, #0]
 80152ba:	685a      	ldr	r2, [r3, #4]
 80152bc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80152c0:	441a      	add	r2, r3
 80152c2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80152c6:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80152ca:	681b      	ldr	r3, [r3, #0]
 80152cc:	605a      	str	r2, [r3, #4]
  ctx->state[2] += c;
 80152ce:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80152d2:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80152d6:	681b      	ldr	r3, [r3, #0]
 80152d8:	689a      	ldr	r2, [r3, #8]
 80152da:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80152de:	441a      	add	r2, r3
 80152e0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80152e4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80152e8:	681b      	ldr	r3, [r3, #0]
 80152ea:	609a      	str	r2, [r3, #8]
  ctx->state[3] += d;
 80152ec:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80152f0:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80152f4:	681b      	ldr	r3, [r3, #0]
 80152f6:	68da      	ldr	r2, [r3, #12]
 80152f8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80152fc:	441a      	add	r2, r3
 80152fe:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015302:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8015306:	681b      	ldr	r3, [r3, #0]
 8015308:	60da      	str	r2, [r3, #12]
  ctx->state[4] += e;
 801530a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801530e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8015312:	681b      	ldr	r3, [r3, #0]
 8015314:	691a      	ldr	r2, [r3, #16]
 8015316:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801531a:	441a      	add	r2, r3
 801531c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015320:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8015324:	681b      	ldr	r3, [r3, #0]
 8015326:	611a      	str	r2, [r3, #16]
  ctx->state[5] += f;
 8015328:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801532c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8015330:	681b      	ldr	r3, [r3, #0]
 8015332:	695a      	ldr	r2, [r3, #20]
 8015334:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8015338:	441a      	add	r2, r3
 801533a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801533e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8015342:	681b      	ldr	r3, [r3, #0]
 8015344:	615a      	str	r2, [r3, #20]
  ctx->state[6] += g;
 8015346:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801534a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 801534e:	681b      	ldr	r3, [r3, #0]
 8015350:	699a      	ldr	r2, [r3, #24]
 8015352:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015356:	441a      	add	r2, r3
 8015358:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801535c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8015360:	681b      	ldr	r3, [r3, #0]
 8015362:	619a      	str	r2, [r3, #24]
  ctx->state[7] += h;
 8015364:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015368:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 801536c:	681b      	ldr	r3, [r3, #0]
 801536e:	69da      	ldr	r2, [r3, #28]
 8015370:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8015374:	441a      	add	r2, r3
 8015376:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801537a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 801537e:	681b      	ldr	r3, [r3, #0]
 8015380:	61da      	str	r2, [r3, #28]
}
 8015382:	bf00      	nop
 8015384:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 8015388:	46bd      	mov	sp, r7
 801538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801538e:	4770      	bx	lr
 8015390:	0802d380 	.word	0x0802d380

08015394 <mg_sha256_update>:

void mg_sha256_update(mg_sha256_ctx *ctx, const unsigned char *data,
                      size_t len) {
 8015394:	b5b0      	push	{r4, r5, r7, lr}
 8015396:	b086      	sub	sp, #24
 8015398:	af00      	add	r7, sp, #0
 801539a:	60f8      	str	r0, [r7, #12]
 801539c:	60b9      	str	r1, [r7, #8]
 801539e:	607a      	str	r2, [r7, #4]
  size_t i;
  for (i = 0; i < len; i++) {
 80153a0:	2300      	movs	r3, #0
 80153a2:	617b      	str	r3, [r7, #20]
 80153a4:	e026      	b.n	80153f4 <mg_sha256_update+0x60>
    ctx->buffer[ctx->len] = data[i];
 80153a6:	68ba      	ldr	r2, [r7, #8]
 80153a8:	697b      	ldr	r3, [r7, #20]
 80153aa:	441a      	add	r2, r3
 80153ac:	68fb      	ldr	r3, [r7, #12]
 80153ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80153b0:	7811      	ldrb	r1, [r2, #0]
 80153b2:	68fa      	ldr	r2, [r7, #12]
 80153b4:	4413      	add	r3, r2
 80153b6:	460a      	mov	r2, r1
 80153b8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if ((++ctx->len) == 64) {
 80153bc:	68fb      	ldr	r3, [r7, #12]
 80153be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80153c0:	1c5a      	adds	r2, r3, #1
 80153c2:	68fb      	ldr	r3, [r7, #12]
 80153c4:	629a      	str	r2, [r3, #40]	@ 0x28
 80153c6:	68fb      	ldr	r3, [r7, #12]
 80153c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80153ca:	2b40      	cmp	r3, #64	@ 0x40
 80153cc:	d10f      	bne.n	80153ee <mg_sha256_update+0x5a>
      mg_sha256_chunk(ctx);
 80153ce:	68f8      	ldr	r0, [r7, #12]
 80153d0:	f7ff fdd8 	bl	8014f84 <mg_sha256_chunk>
      ctx->bits += 512;
 80153d4:	68fb      	ldr	r3, [r7, #12]
 80153d6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80153da:	f512 7400 	adds.w	r4, r2, #512	@ 0x200
 80153de:	f143 0500 	adc.w	r5, r3, #0
 80153e2:	68fb      	ldr	r3, [r7, #12]
 80153e4:	e9c3 4508 	strd	r4, r5, [r3, #32]
      ctx->len = 0;
 80153e8:	68fb      	ldr	r3, [r7, #12]
 80153ea:	2200      	movs	r2, #0
 80153ec:	629a      	str	r2, [r3, #40]	@ 0x28
  for (i = 0; i < len; i++) {
 80153ee:	697b      	ldr	r3, [r7, #20]
 80153f0:	3301      	adds	r3, #1
 80153f2:	617b      	str	r3, [r7, #20]
 80153f4:	697a      	ldr	r2, [r7, #20]
 80153f6:	687b      	ldr	r3, [r7, #4]
 80153f8:	429a      	cmp	r2, r3
 80153fa:	d3d4      	bcc.n	80153a6 <mg_sha256_update+0x12>
    }
  }
}
 80153fc:	bf00      	nop
 80153fe:	bf00      	nop
 8015400:	3718      	adds	r7, #24
 8015402:	46bd      	mov	sp, r7
 8015404:	bdb0      	pop	{r4, r5, r7, pc}

08015406 <mg_sha256_final>:

// TODO: make final reusable (remove side effects)
void mg_sha256_final(unsigned char digest[32], mg_sha256_ctx *ctx) {
 8015406:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801540a:	b084      	sub	sp, #16
 801540c:	af00      	add	r7, sp, #0
 801540e:	6078      	str	r0, [r7, #4]
 8015410:	6039      	str	r1, [r7, #0]
  uint32_t i = ctx->len;
 8015412:	683b      	ldr	r3, [r7, #0]
 8015414:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015416:	60fb      	str	r3, [r7, #12]
  if (i < 56) {
 8015418:	68fb      	ldr	r3, [r7, #12]
 801541a:	2b37      	cmp	r3, #55	@ 0x37
 801541c:	d814      	bhi.n	8015448 <mg_sha256_final+0x42>
    ctx->buffer[i++] = 0x80;
 801541e:	68fb      	ldr	r3, [r7, #12]
 8015420:	1c5a      	adds	r2, r3, #1
 8015422:	60fa      	str	r2, [r7, #12]
 8015424:	683a      	ldr	r2, [r7, #0]
 8015426:	4413      	add	r3, r2
 8015428:	2280      	movs	r2, #128	@ 0x80
 801542a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    while (i < 56) {
 801542e:	e007      	b.n	8015440 <mg_sha256_final+0x3a>
      ctx->buffer[i++] = 0x00;
 8015430:	68fb      	ldr	r3, [r7, #12]
 8015432:	1c5a      	adds	r2, r3, #1
 8015434:	60fa      	str	r2, [r7, #12]
 8015436:	683a      	ldr	r2, [r7, #0]
 8015438:	4413      	add	r3, r2
 801543a:	2200      	movs	r2, #0
 801543c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    while (i < 56) {
 8015440:	68fb      	ldr	r3, [r7, #12]
 8015442:	2b37      	cmp	r3, #55	@ 0x37
 8015444:	d9f4      	bls.n	8015430 <mg_sha256_final+0x2a>
 8015446:	e01d      	b.n	8015484 <mg_sha256_final+0x7e>
    }
  } else {
    ctx->buffer[i++] = 0x80;
 8015448:	68fb      	ldr	r3, [r7, #12]
 801544a:	1c5a      	adds	r2, r3, #1
 801544c:	60fa      	str	r2, [r7, #12]
 801544e:	683a      	ldr	r2, [r7, #0]
 8015450:	4413      	add	r3, r2
 8015452:	2280      	movs	r2, #128	@ 0x80
 8015454:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    while (i < 64) {
 8015458:	e007      	b.n	801546a <mg_sha256_final+0x64>
      ctx->buffer[i++] = 0x00;
 801545a:	68fb      	ldr	r3, [r7, #12]
 801545c:	1c5a      	adds	r2, r3, #1
 801545e:	60fa      	str	r2, [r7, #12]
 8015460:	683a      	ldr	r2, [r7, #0]
 8015462:	4413      	add	r3, r2
 8015464:	2200      	movs	r2, #0
 8015466:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    while (i < 64) {
 801546a:	68fb      	ldr	r3, [r7, #12]
 801546c:	2b3f      	cmp	r3, #63	@ 0x3f
 801546e:	d9f4      	bls.n	801545a <mg_sha256_final+0x54>
    }
    mg_sha256_chunk(ctx);
 8015470:	6838      	ldr	r0, [r7, #0]
 8015472:	f7ff fd87 	bl	8014f84 <mg_sha256_chunk>
    memset(ctx->buffer, 0, 56);
 8015476:	683b      	ldr	r3, [r7, #0]
 8015478:	332c      	adds	r3, #44	@ 0x2c
 801547a:	2238      	movs	r2, #56	@ 0x38
 801547c:	2100      	movs	r1, #0
 801547e:	4618      	mov	r0, r3
 8015480:	f012 f922 	bl	80276c8 <memset>
  }

  ctx->bits += ctx->len * 8;
 8015484:	683b      	ldr	r3, [r7, #0]
 8015486:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801548a:	6839      	ldr	r1, [r7, #0]
 801548c:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 801548e:	00c9      	lsls	r1, r1, #3
 8015490:	2000      	movs	r0, #0
 8015492:	460c      	mov	r4, r1
 8015494:	4605      	mov	r5, r0
 8015496:	eb12 0804 	adds.w	r8, r2, r4
 801549a:	eb43 0905 	adc.w	r9, r3, r5
 801549e:	683b      	ldr	r3, [r7, #0]
 80154a0:	e9c3 8908 	strd	r8, r9, [r3, #32]
  ctx->buffer[63] = (uint8_t) ((ctx->bits) & 0xff);
 80154a4:	683b      	ldr	r3, [r7, #0]
 80154a6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80154aa:	b2d2      	uxtb	r2, r2
 80154ac:	683b      	ldr	r3, [r7, #0]
 80154ae:	f883 206b 	strb.w	r2, [r3, #107]	@ 0x6b
  ctx->buffer[62] = (uint8_t) ((ctx->bits >> 8) & 0xff);
 80154b2:	683b      	ldr	r3, [r7, #0]
 80154b4:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80154b8:	f04f 0200 	mov.w	r2, #0
 80154bc:	f04f 0300 	mov.w	r3, #0
 80154c0:	0a02      	lsrs	r2, r0, #8
 80154c2:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80154c6:	0a0b      	lsrs	r3, r1, #8
 80154c8:	b2d2      	uxtb	r2, r2
 80154ca:	683b      	ldr	r3, [r7, #0]
 80154cc:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
  ctx->buffer[61] = (uint8_t) ((ctx->bits >> 16) & 0xff);
 80154d0:	683b      	ldr	r3, [r7, #0]
 80154d2:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80154d6:	f04f 0200 	mov.w	r2, #0
 80154da:	f04f 0300 	mov.w	r3, #0
 80154de:	0c02      	lsrs	r2, r0, #16
 80154e0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80154e4:	0c0b      	lsrs	r3, r1, #16
 80154e6:	b2d2      	uxtb	r2, r2
 80154e8:	683b      	ldr	r3, [r7, #0]
 80154ea:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
  ctx->buffer[60] = (uint8_t) ((ctx->bits >> 24) & 0xff);
 80154ee:	683b      	ldr	r3, [r7, #0]
 80154f0:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80154f4:	f04f 0200 	mov.w	r2, #0
 80154f8:	f04f 0300 	mov.w	r3, #0
 80154fc:	0e02      	lsrs	r2, r0, #24
 80154fe:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8015502:	0e0b      	lsrs	r3, r1, #24
 8015504:	b2d2      	uxtb	r2, r2
 8015506:	683b      	ldr	r3, [r7, #0]
 8015508:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
  ctx->buffer[59] = (uint8_t) ((ctx->bits >> 32) & 0xff);
 801550c:	683b      	ldr	r3, [r7, #0]
 801550e:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8015512:	f04f 0200 	mov.w	r2, #0
 8015516:	f04f 0300 	mov.w	r3, #0
 801551a:	000a      	movs	r2, r1
 801551c:	2300      	movs	r3, #0
 801551e:	b2d2      	uxtb	r2, r2
 8015520:	683b      	ldr	r3, [r7, #0]
 8015522:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
  ctx->buffer[58] = (uint8_t) ((ctx->bits >> 40) & 0xff);
 8015526:	683b      	ldr	r3, [r7, #0]
 8015528:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 801552c:	f04f 0200 	mov.w	r2, #0
 8015530:	f04f 0300 	mov.w	r3, #0
 8015534:	0a0a      	lsrs	r2, r1, #8
 8015536:	2300      	movs	r3, #0
 8015538:	b2d2      	uxtb	r2, r2
 801553a:	683b      	ldr	r3, [r7, #0]
 801553c:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
  ctx->buffer[57] = (uint8_t) ((ctx->bits >> 48) & 0xff);
 8015540:	683b      	ldr	r3, [r7, #0]
 8015542:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8015546:	f04f 0200 	mov.w	r2, #0
 801554a:	f04f 0300 	mov.w	r3, #0
 801554e:	0c0a      	lsrs	r2, r1, #16
 8015550:	2300      	movs	r3, #0
 8015552:	b2d2      	uxtb	r2, r2
 8015554:	683b      	ldr	r3, [r7, #0]
 8015556:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
  ctx->buffer[56] = (uint8_t) ((ctx->bits >> 56) & 0xff);
 801555a:	683b      	ldr	r3, [r7, #0]
 801555c:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8015560:	f04f 0200 	mov.w	r2, #0
 8015564:	f04f 0300 	mov.w	r3, #0
 8015568:	0e0a      	lsrs	r2, r1, #24
 801556a:	2300      	movs	r3, #0
 801556c:	b2d2      	uxtb	r2, r2
 801556e:	683b      	ldr	r3, [r7, #0]
 8015570:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
  mg_sha256_chunk(ctx);
 8015574:	6838      	ldr	r0, [r7, #0]
 8015576:	f7ff fd05 	bl	8014f84 <mg_sha256_chunk>

  for (i = 0; i < 4; ++i) {
 801557a:	2300      	movs	r3, #0
 801557c:	60fb      	str	r3, [r7, #12]
 801557e:	e071      	b.n	8015664 <mg_sha256_final+0x25e>
    digest[i] = (uint8_t) ((ctx->state[0] >> (24 - i * 8)) & 0xff);
 8015580:	683b      	ldr	r3, [r7, #0]
 8015582:	681a      	ldr	r2, [r3, #0]
 8015584:	68fb      	ldr	r3, [r7, #12]
 8015586:	f1c3 0303 	rsb	r3, r3, #3
 801558a:	00db      	lsls	r3, r3, #3
 801558c:	fa22 f103 	lsr.w	r1, r2, r3
 8015590:	687a      	ldr	r2, [r7, #4]
 8015592:	68fb      	ldr	r3, [r7, #12]
 8015594:	4413      	add	r3, r2
 8015596:	b2ca      	uxtb	r2, r1
 8015598:	701a      	strb	r2, [r3, #0]
    digest[i + 4] = (uint8_t) ((ctx->state[1] >> (24 - i * 8)) & 0xff);
 801559a:	683b      	ldr	r3, [r7, #0]
 801559c:	685a      	ldr	r2, [r3, #4]
 801559e:	68fb      	ldr	r3, [r7, #12]
 80155a0:	f1c3 0303 	rsb	r3, r3, #3
 80155a4:	00db      	lsls	r3, r3, #3
 80155a6:	fa22 f103 	lsr.w	r1, r2, r3
 80155aa:	68fb      	ldr	r3, [r7, #12]
 80155ac:	3304      	adds	r3, #4
 80155ae:	687a      	ldr	r2, [r7, #4]
 80155b0:	4413      	add	r3, r2
 80155b2:	b2ca      	uxtb	r2, r1
 80155b4:	701a      	strb	r2, [r3, #0]
    digest[i + 8] = (uint8_t) ((ctx->state[2] >> (24 - i * 8)) & 0xff);
 80155b6:	683b      	ldr	r3, [r7, #0]
 80155b8:	689a      	ldr	r2, [r3, #8]
 80155ba:	68fb      	ldr	r3, [r7, #12]
 80155bc:	f1c3 0303 	rsb	r3, r3, #3
 80155c0:	00db      	lsls	r3, r3, #3
 80155c2:	fa22 f103 	lsr.w	r1, r2, r3
 80155c6:	68fb      	ldr	r3, [r7, #12]
 80155c8:	3308      	adds	r3, #8
 80155ca:	687a      	ldr	r2, [r7, #4]
 80155cc:	4413      	add	r3, r2
 80155ce:	b2ca      	uxtb	r2, r1
 80155d0:	701a      	strb	r2, [r3, #0]
    digest[i + 12] = (uint8_t) ((ctx->state[3] >> (24 - i * 8)) & 0xff);
 80155d2:	683b      	ldr	r3, [r7, #0]
 80155d4:	68da      	ldr	r2, [r3, #12]
 80155d6:	68fb      	ldr	r3, [r7, #12]
 80155d8:	f1c3 0303 	rsb	r3, r3, #3
 80155dc:	00db      	lsls	r3, r3, #3
 80155de:	fa22 f103 	lsr.w	r1, r2, r3
 80155e2:	68fb      	ldr	r3, [r7, #12]
 80155e4:	330c      	adds	r3, #12
 80155e6:	687a      	ldr	r2, [r7, #4]
 80155e8:	4413      	add	r3, r2
 80155ea:	b2ca      	uxtb	r2, r1
 80155ec:	701a      	strb	r2, [r3, #0]
    digest[i + 16] = (uint8_t) ((ctx->state[4] >> (24 - i * 8)) & 0xff);
 80155ee:	683b      	ldr	r3, [r7, #0]
 80155f0:	691a      	ldr	r2, [r3, #16]
 80155f2:	68fb      	ldr	r3, [r7, #12]
 80155f4:	f1c3 0303 	rsb	r3, r3, #3
 80155f8:	00db      	lsls	r3, r3, #3
 80155fa:	fa22 f103 	lsr.w	r1, r2, r3
 80155fe:	68fb      	ldr	r3, [r7, #12]
 8015600:	3310      	adds	r3, #16
 8015602:	687a      	ldr	r2, [r7, #4]
 8015604:	4413      	add	r3, r2
 8015606:	b2ca      	uxtb	r2, r1
 8015608:	701a      	strb	r2, [r3, #0]
    digest[i + 20] = (uint8_t) ((ctx->state[5] >> (24 - i * 8)) & 0xff);
 801560a:	683b      	ldr	r3, [r7, #0]
 801560c:	695a      	ldr	r2, [r3, #20]
 801560e:	68fb      	ldr	r3, [r7, #12]
 8015610:	f1c3 0303 	rsb	r3, r3, #3
 8015614:	00db      	lsls	r3, r3, #3
 8015616:	fa22 f103 	lsr.w	r1, r2, r3
 801561a:	68fb      	ldr	r3, [r7, #12]
 801561c:	3314      	adds	r3, #20
 801561e:	687a      	ldr	r2, [r7, #4]
 8015620:	4413      	add	r3, r2
 8015622:	b2ca      	uxtb	r2, r1
 8015624:	701a      	strb	r2, [r3, #0]
    digest[i + 24] = (uint8_t) ((ctx->state[6] >> (24 - i * 8)) & 0xff);
 8015626:	683b      	ldr	r3, [r7, #0]
 8015628:	699a      	ldr	r2, [r3, #24]
 801562a:	68fb      	ldr	r3, [r7, #12]
 801562c:	f1c3 0303 	rsb	r3, r3, #3
 8015630:	00db      	lsls	r3, r3, #3
 8015632:	fa22 f103 	lsr.w	r1, r2, r3
 8015636:	68fb      	ldr	r3, [r7, #12]
 8015638:	3318      	adds	r3, #24
 801563a:	687a      	ldr	r2, [r7, #4]
 801563c:	4413      	add	r3, r2
 801563e:	b2ca      	uxtb	r2, r1
 8015640:	701a      	strb	r2, [r3, #0]
    digest[i + 28] = (uint8_t) ((ctx->state[7] >> (24 - i * 8)) & 0xff);
 8015642:	683b      	ldr	r3, [r7, #0]
 8015644:	69da      	ldr	r2, [r3, #28]
 8015646:	68fb      	ldr	r3, [r7, #12]
 8015648:	f1c3 0303 	rsb	r3, r3, #3
 801564c:	00db      	lsls	r3, r3, #3
 801564e:	fa22 f103 	lsr.w	r1, r2, r3
 8015652:	68fb      	ldr	r3, [r7, #12]
 8015654:	331c      	adds	r3, #28
 8015656:	687a      	ldr	r2, [r7, #4]
 8015658:	4413      	add	r3, r2
 801565a:	b2ca      	uxtb	r2, r1
 801565c:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < 4; ++i) {
 801565e:	68fb      	ldr	r3, [r7, #12]
 8015660:	3301      	adds	r3, #1
 8015662:	60fb      	str	r3, [r7, #12]
 8015664:	68fb      	ldr	r3, [r7, #12]
 8015666:	2b03      	cmp	r3, #3
 8015668:	d98a      	bls.n	8015580 <mg_sha256_final+0x17a>
  }
}
 801566a:	bf00      	nop
 801566c:	bf00      	nop
 801566e:	3710      	adds	r7, #16
 8015670:	46bd      	mov	sp, r7
 8015672:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08015676 <mg_sha256>:

void mg_sha256(uint8_t dst[32], uint8_t *data, size_t datasz) {
 8015676:	b580      	push	{r7, lr}
 8015678:	b0a0      	sub	sp, #128	@ 0x80
 801567a:	af00      	add	r7, sp, #0
 801567c:	60f8      	str	r0, [r7, #12]
 801567e:	60b9      	str	r1, [r7, #8]
 8015680:	607a      	str	r2, [r7, #4]
  mg_sha256_ctx ctx;
  mg_sha256_init(&ctx);
 8015682:	f107 0310 	add.w	r3, r7, #16
 8015686:	4618      	mov	r0, r3
 8015688:	f7ff fc40 	bl	8014f0c <mg_sha256_init>
  mg_sha256_update(&ctx, data, datasz);
 801568c:	f107 0310 	add.w	r3, r7, #16
 8015690:	687a      	ldr	r2, [r7, #4]
 8015692:	68b9      	ldr	r1, [r7, #8]
 8015694:	4618      	mov	r0, r3
 8015696:	f7ff fe7d 	bl	8015394 <mg_sha256_update>
  mg_sha256_final(dst, &ctx);
 801569a:	f107 0310 	add.w	r3, r7, #16
 801569e:	4619      	mov	r1, r3
 80156a0:	68f8      	ldr	r0, [r7, #12]
 80156a2:	f7ff feb0 	bl	8015406 <mg_sha256_final>
}
 80156a6:	bf00      	nop
 80156a8:	3780      	adds	r7, #128	@ 0x80
 80156aa:	46bd      	mov	sp, r7
 80156ac:	bd80      	pop	{r7, pc}

080156ae <mg_hmac_sha256>:

void mg_hmac_sha256(uint8_t dst[32], uint8_t *key, size_t keysz, uint8_t *data,
                    size_t datasz) {
 80156ae:	b590      	push	{r4, r7, lr}
 80156b0:	b0d3      	sub	sp, #332	@ 0x14c
 80156b2:	af00      	add	r7, sp, #0
 80156b4:	f507 74a4 	add.w	r4, r7, #328	@ 0x148
 80156b8:	f5a4 749e 	sub.w	r4, r4, #316	@ 0x13c
 80156bc:	6020      	str	r0, [r4, #0]
 80156be:	f507 70a4 	add.w	r0, r7, #328	@ 0x148
 80156c2:	f5a0 70a0 	sub.w	r0, r0, #320	@ 0x140
 80156c6:	6001      	str	r1, [r0, #0]
 80156c8:	f507 71a4 	add.w	r1, r7, #328	@ 0x148
 80156cc:	f5a1 71a2 	sub.w	r1, r1, #324	@ 0x144
 80156d0:	600a      	str	r2, [r1, #0]
 80156d2:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 80156d6:	f5a2 72a4 	sub.w	r2, r2, #328	@ 0x148
 80156da:	6013      	str	r3, [r2, #0]
  mg_sha256_ctx ctx;
  uint8_t k[64] = {0};
 80156dc:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80156e0:	2240      	movs	r2, #64	@ 0x40
 80156e2:	2100      	movs	r1, #0
 80156e4:	4618      	mov	r0, r3
 80156e6:	f011 ffef 	bl	80276c8 <memset>
  uint8_t o_pad[64], i_pad[64];
  unsigned int i;
  memset(i_pad, 0x36, sizeof(i_pad));
 80156ea:	f107 0310 	add.w	r3, r7, #16
 80156ee:	2240      	movs	r2, #64	@ 0x40
 80156f0:	2136      	movs	r1, #54	@ 0x36
 80156f2:	4618      	mov	r0, r3
 80156f4:	f011 ffe8 	bl	80276c8 <memset>
  memset(o_pad, 0x5c, sizeof(o_pad));
 80156f8:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80156fc:	2240      	movs	r2, #64	@ 0x40
 80156fe:	215c      	movs	r1, #92	@ 0x5c
 8015700:	4618      	mov	r0, r3
 8015702:	f011 ffe1 	bl	80276c8 <memset>
  if (keysz < 64) {
 8015706:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801570a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 801570e:	681b      	ldr	r3, [r3, #0]
 8015710:	2b3f      	cmp	r3, #63	@ 0x3f
 8015712:	d815      	bhi.n	8015740 <mg_hmac_sha256+0x92>
    if (keysz > 0) memmove(k, key, keysz);
 8015714:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8015718:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 801571c:	681b      	ldr	r3, [r3, #0]
 801571e:	2b00      	cmp	r3, #0
 8015720:	d029      	beq.n	8015776 <mg_hmac_sha256+0xc8>
 8015722:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8015726:	f5a3 72a2 	sub.w	r2, r3, #324	@ 0x144
 801572a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801572e:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8015732:	f107 0090 	add.w	r0, r7, #144	@ 0x90
 8015736:	6812      	ldr	r2, [r2, #0]
 8015738:	6819      	ldr	r1, [r3, #0]
 801573a:	f011 ffab 	bl	8027694 <memmove>
 801573e:	e01a      	b.n	8015776 <mg_hmac_sha256+0xc8>
  } else {
    mg_sha256_init(&ctx);
 8015740:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8015744:	4618      	mov	r0, r3
 8015746:	f7ff fbe1 	bl	8014f0c <mg_sha256_init>
    mg_sha256_update(&ctx, key, keysz);
 801574a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801574e:	f5a3 72a2 	sub.w	r2, r3, #324	@ 0x144
 8015752:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8015756:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 801575a:	f107 00d0 	add.w	r0, r7, #208	@ 0xd0
 801575e:	6812      	ldr	r2, [r2, #0]
 8015760:	6819      	ldr	r1, [r3, #0]
 8015762:	f7ff fe17 	bl	8015394 <mg_sha256_update>
    mg_sha256_final(k, &ctx);
 8015766:	f107 02d0 	add.w	r2, r7, #208	@ 0xd0
 801576a:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 801576e:	4611      	mov	r1, r2
 8015770:	4618      	mov	r0, r3
 8015772:	f7ff fe48 	bl	8015406 <mg_sha256_final>
  }
  for (i = 0; i < sizeof(k); i++) {
 8015776:	2300      	movs	r3, #0
 8015778:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 801577c:	e032      	b.n	80157e4 <mg_hmac_sha256+0x136>
    i_pad[i] ^= k[i];
 801577e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8015782:	f5a3 729c 	sub.w	r2, r3, #312	@ 0x138
 8015786:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 801578a:	4413      	add	r3, r2
 801578c:	781a      	ldrb	r2, [r3, #0]
 801578e:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 8015792:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8015796:	440b      	add	r3, r1
 8015798:	781b      	ldrb	r3, [r3, #0]
 801579a:	4053      	eors	r3, r2
 801579c:	b2d9      	uxtb	r1, r3
 801579e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80157a2:	f5a3 729c 	sub.w	r2, r3, #312	@ 0x138
 80157a6:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80157aa:	4413      	add	r3, r2
 80157ac:	460a      	mov	r2, r1
 80157ae:	701a      	strb	r2, [r3, #0]
    o_pad[i] ^= k[i];
 80157b0:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 80157b4:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80157b8:	4413      	add	r3, r2
 80157ba:	781a      	ldrb	r2, [r3, #0]
 80157bc:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 80157c0:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80157c4:	440b      	add	r3, r1
 80157c6:	781b      	ldrb	r3, [r3, #0]
 80157c8:	4053      	eors	r3, r2
 80157ca:	b2d9      	uxtb	r1, r3
 80157cc:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 80157d0:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80157d4:	4413      	add	r3, r2
 80157d6:	460a      	mov	r2, r1
 80157d8:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(k); i++) {
 80157da:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80157de:	3301      	adds	r3, #1
 80157e0:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 80157e4:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80157e8:	2b3f      	cmp	r3, #63	@ 0x3f
 80157ea:	d9c8      	bls.n	801577e <mg_hmac_sha256+0xd0>
  }
  mg_sha256_init(&ctx);
 80157ec:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 80157f0:	4618      	mov	r0, r3
 80157f2:	f7ff fb8b 	bl	8014f0c <mg_sha256_init>
  mg_sha256_update(&ctx, i_pad, sizeof(i_pad));
 80157f6:	f107 0110 	add.w	r1, r7, #16
 80157fa:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 80157fe:	2240      	movs	r2, #64	@ 0x40
 8015800:	4618      	mov	r0, r3
 8015802:	f7ff fdc7 	bl	8015394 <mg_sha256_update>
  mg_sha256_update(&ctx, data, datasz);
 8015806:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801580a:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 801580e:	f107 00d0 	add.w	r0, r7, #208	@ 0xd0
 8015812:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 8015816:	6819      	ldr	r1, [r3, #0]
 8015818:	f7ff fdbc 	bl	8015394 <mg_sha256_update>
  mg_sha256_final(dst, &ctx);
 801581c:	f107 02d0 	add.w	r2, r7, #208	@ 0xd0
 8015820:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8015824:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8015828:	4611      	mov	r1, r2
 801582a:	6818      	ldr	r0, [r3, #0]
 801582c:	f7ff fdeb 	bl	8015406 <mg_sha256_final>
  mg_sha256_init(&ctx);
 8015830:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8015834:	4618      	mov	r0, r3
 8015836:	f7ff fb69 	bl	8014f0c <mg_sha256_init>
  mg_sha256_update(&ctx, o_pad, sizeof(o_pad));
 801583a:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 801583e:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8015842:	2240      	movs	r2, #64	@ 0x40
 8015844:	4618      	mov	r0, r3
 8015846:	f7ff fda5 	bl	8015394 <mg_sha256_update>
  mg_sha256_update(&ctx, dst, 32);
 801584a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801584e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8015852:	f107 00d0 	add.w	r0, r7, #208	@ 0xd0
 8015856:	2220      	movs	r2, #32
 8015858:	6819      	ldr	r1, [r3, #0]
 801585a:	f7ff fd9b 	bl	8015394 <mg_sha256_update>
  mg_sha256_final(dst, &ctx);
 801585e:	f107 02d0 	add.w	r2, r7, #208	@ 0xd0
 8015862:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8015866:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801586a:	4611      	mov	r1, r2
 801586c:	6818      	ldr	r0, [r3, #0]
 801586e:	f7ff fdca 	bl	8015406 <mg_sha256_final>
}
 8015872:	bf00      	nop
 8015874:	f507 77a6 	add.w	r7, r7, #332	@ 0x14c
 8015878:	46bd      	mov	sp, r7
 801587a:	bd90      	pop	{r4, r7, pc}

0801587c <mg_sha384_transform>:
    0x0a637dc5a2c898a6, 0x113f9804bef90dae, 0x1b710b35131c471b,
    0x28db77f523047d84, 0x32caab7b40c72493, 0x3c9ebe0a15c9bebc,
    0x431d67c49c100d4c, 0x4cc5d4becb3e42b6, 0x597f299cfc657e2a,
    0x5fcb6fab3ad6faec, 0x6c44198c4a475817};

static void mg_sha384_transform(mg_sha384_ctx *ctx, const uint8_t data[]) {
 801587c:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8015880:	f5ad 6d95 	sub.w	sp, sp, #1192	@ 0x4a8
 8015884:	af00      	add	r7, sp, #0
 8015886:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 801588a:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 801588e:	6018      	str	r0, [r3, #0]
 8015890:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8015894:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 8015898:	6019      	str	r1, [r3, #0]
  uint64_t m[80];
  uint64_t a, b, c, d, e, f, g, h;
  int i, j;

  for (i = 0, j = 0; i < 16; ++i, j += 8)
 801589a:	2300      	movs	r3, #0
 801589c:	f8c7 3464 	str.w	r3, [r7, #1124]	@ 0x464
 80158a0:	2300      	movs	r3, #0
 80158a2:	f8c7 3460 	str.w	r3, [r7, #1120]	@ 0x460
 80158a6:	e113      	b.n	8015ad0 <mg_sha384_transform+0x254>
    m[i] = ((uint64_t) data[j] << 56) | ((uint64_t) data[j + 1] << 48) |
 80158a8:	f8d7 2460 	ldr.w	r2, [r7, #1120]	@ 0x460
 80158ac:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 80158b0:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 80158b4:	681b      	ldr	r3, [r3, #0]
 80158b6:	4413      	add	r3, r2
 80158b8:	781b      	ldrb	r3, [r3, #0]
 80158ba:	b2db      	uxtb	r3, r3
 80158bc:	2200      	movs	r2, #0
 80158be:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 80158c2:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 80158c6:	f04f 0000 	mov.w	r0, #0
 80158ca:	f04f 0100 	mov.w	r1, #0
 80158ce:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 80158d2:	0619      	lsls	r1, r3, #24
 80158d4:	2000      	movs	r0, #0
 80158d6:	f8d7 3460 	ldr.w	r3, [r7, #1120]	@ 0x460
 80158da:	1c5a      	adds	r2, r3, #1
 80158dc:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 80158e0:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 80158e4:	681b      	ldr	r3, [r3, #0]
 80158e6:	4413      	add	r3, r2
 80158e8:	781b      	ldrb	r3, [r3, #0]
 80158ea:	b2db      	uxtb	r3, r3
 80158ec:	2200      	movs	r2, #0
 80158ee:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
 80158f2:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
 80158f6:	f04f 0200 	mov.w	r2, #0
 80158fa:	f04f 0300 	mov.w	r3, #0
 80158fe:	f8d7 6190 	ldr.w	r6, [r7, #400]	@ 0x190
 8015902:	0433      	lsls	r3, r6, #16
 8015904:	2200      	movs	r2, #0
 8015906:	ea40 0602 	orr.w	r6, r0, r2
 801590a:	f8c7 61b0 	str.w	r6, [r7, #432]	@ 0x1b0
 801590e:	430b      	orrs	r3, r1
 8015910:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
           ((uint64_t) data[j + 2] << 40) | ((uint64_t) data[j + 3] << 32) |
 8015914:	f8d7 3460 	ldr.w	r3, [r7, #1120]	@ 0x460
 8015918:	1c9a      	adds	r2, r3, #2
 801591a:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 801591e:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 8015922:	681b      	ldr	r3, [r3, #0]
 8015924:	4413      	add	r3, r2
 8015926:	781b      	ldrb	r3, [r3, #0]
 8015928:	b2db      	uxtb	r3, r3
 801592a:	2200      	movs	r2, #0
 801592c:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8015930:	f8c7 218c 	str.w	r2, [r7, #396]	@ 0x18c
 8015934:	f04f 0200 	mov.w	r2, #0
 8015938:	f04f 0300 	mov.w	r3, #0
 801593c:	f8d7 1188 	ldr.w	r1, [r7, #392]	@ 0x188
 8015940:	020b      	lsls	r3, r1, #8
 8015942:	2200      	movs	r2, #0
    m[i] = ((uint64_t) data[j] << 56) | ((uint64_t) data[j + 1] << 48) |
 8015944:	f8d7 11b0 	ldr.w	r1, [r7, #432]	@ 0x1b0
 8015948:	4311      	orrs	r1, r2
 801594a:	f8c7 11a8 	str.w	r1, [r7, #424]	@ 0x1a8
 801594e:	f8d7 11b4 	ldr.w	r1, [r7, #436]	@ 0x1b4
 8015952:	430b      	orrs	r3, r1
 8015954:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
           ((uint64_t) data[j + 2] << 40) | ((uint64_t) data[j + 3] << 32) |
 8015958:	f8d7 3460 	ldr.w	r3, [r7, #1120]	@ 0x460
 801595c:	1cda      	adds	r2, r3, #3
 801595e:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8015962:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 8015966:	681b      	ldr	r3, [r3, #0]
 8015968:	4413      	add	r3, r2
 801596a:	781b      	ldrb	r3, [r3, #0]
 801596c:	b2db      	uxtb	r3, r3
 801596e:	2200      	movs	r2, #0
 8015970:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8015974:	f8c7 2184 	str.w	r2, [r7, #388]	@ 0x184
 8015978:	f04f 0200 	mov.w	r2, #0
 801597c:	f04f 0300 	mov.w	r3, #0
 8015980:	f8d7 1180 	ldr.w	r1, [r7, #384]	@ 0x180
 8015984:	000b      	movs	r3, r1
 8015986:	2200      	movs	r2, #0
 8015988:	f8d7 11a8 	ldr.w	r1, [r7, #424]	@ 0x1a8
 801598c:	4311      	orrs	r1, r2
 801598e:	f8c7 11a0 	str.w	r1, [r7, #416]	@ 0x1a0
 8015992:	f8d7 11ac 	ldr.w	r1, [r7, #428]	@ 0x1ac
 8015996:	430b      	orrs	r3, r1
 8015998:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
           ((uint64_t) data[j + 4] << 24) | ((uint64_t) data[j + 5] << 16) |
 801599c:	f8d7 3460 	ldr.w	r3, [r7, #1120]	@ 0x460
 80159a0:	1d1a      	adds	r2, r3, #4
 80159a2:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 80159a6:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 80159aa:	681b      	ldr	r3, [r3, #0]
 80159ac:	4413      	add	r3, r2
 80159ae:	781b      	ldrb	r3, [r3, #0]
 80159b0:	b2db      	uxtb	r3, r3
 80159b2:	2200      	movs	r2, #0
 80159b4:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 80159b8:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 80159bc:	e9d7 125e 	ldrd	r1, r2, [r7, #376]	@ 0x178
 80159c0:	460b      	mov	r3, r1
 80159c2:	0a1b      	lsrs	r3, r3, #8
 80159c4:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
 80159c8:	460b      	mov	r3, r1
 80159ca:	061b      	lsls	r3, r3, #24
 80159cc:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
           ((uint64_t) data[j + 2] << 40) | ((uint64_t) data[j + 3] << 32) |
 80159d0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80159d4:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	@ 0x170
 80159d8:	4602      	mov	r2, r0
 80159da:	ea43 0a02 	orr.w	sl, r3, r2
 80159de:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80159e2:	460a      	mov	r2, r1
 80159e4:	ea43 0b02 	orr.w	fp, r3, r2
           ((uint64_t) data[j + 4] << 24) | ((uint64_t) data[j + 5] << 16) |
 80159e8:	f8d7 3460 	ldr.w	r3, [r7, #1120]	@ 0x460
 80159ec:	1d5a      	adds	r2, r3, #5
 80159ee:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 80159f2:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 80159f6:	681b      	ldr	r3, [r3, #0]
 80159f8:	4413      	add	r3, r2
 80159fa:	781b      	ldrb	r3, [r3, #0]
 80159fc:	b2db      	uxtb	r3, r3
 80159fe:	2200      	movs	r2, #0
 8015a00:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8015a04:	f8c7 21c4 	str.w	r2, [r7, #452]	@ 0x1c4
 8015a08:	f04f 0200 	mov.w	r2, #0
 8015a0c:	f04f 0300 	mov.w	r3, #0
 8015a10:	f8d7 11c4 	ldr.w	r1, [r7, #452]	@ 0x1c4
 8015a14:	040b      	lsls	r3, r1, #16
 8015a16:	f8d7 11c0 	ldr.w	r1, [r7, #448]	@ 0x1c0
 8015a1a:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 8015a1e:	f8d7 11c0 	ldr.w	r1, [r7, #448]	@ 0x1c0
 8015a22:	040a      	lsls	r2, r1, #16
 8015a24:	ea4a 0802 	orr.w	r8, sl, r2
 8015a28:	ea4b 0903 	orr.w	r9, fp, r3
           ((uint64_t) data[j + 6] << 8) | ((uint64_t) data[j + 7]);
 8015a2c:	f8d7 3460 	ldr.w	r3, [r7, #1120]	@ 0x460
 8015a30:	1d9a      	adds	r2, r3, #6
 8015a32:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8015a36:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 8015a3a:	681b      	ldr	r3, [r3, #0]
 8015a3c:	4413      	add	r3, r2
 8015a3e:	781b      	ldrb	r3, [r3, #0]
 8015a40:	b2db      	uxtb	r3, r3
 8015a42:	2200      	movs	r2, #0
 8015a44:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 8015a48:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8015a4c:	f04f 0200 	mov.w	r2, #0
 8015a50:	f04f 0300 	mov.w	r3, #0
 8015a54:	f8d7 11bc 	ldr.w	r1, [r7, #444]	@ 0x1bc
 8015a58:	020b      	lsls	r3, r1, #8
 8015a5a:	f8d7 11b8 	ldr.w	r1, [r7, #440]	@ 0x1b8
 8015a5e:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 8015a62:	f8d7 11b8 	ldr.w	r1, [r7, #440]	@ 0x1b8
 8015a66:	020a      	lsls	r2, r1, #8
           ((uint64_t) data[j + 4] << 24) | ((uint64_t) data[j + 5] << 16) |
 8015a68:	ea48 0402 	orr.w	r4, r8, r2
 8015a6c:	ea49 0503 	orr.w	r5, r9, r3
           ((uint64_t) data[j + 6] << 8) | ((uint64_t) data[j + 7]);
 8015a70:	f8d7 3460 	ldr.w	r3, [r7, #1120]	@ 0x460
 8015a74:	1dda      	adds	r2, r3, #7
 8015a76:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8015a7a:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 8015a7e:	681b      	ldr	r3, [r3, #0]
 8015a80:	4413      	add	r3, r2
 8015a82:	781b      	ldrb	r3, [r3, #0]
 8015a84:	b2db      	uxtb	r3, r3
 8015a86:	2200      	movs	r2, #0
 8015a88:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 8015a8c:	f8c7 216c 	str.w	r2, [r7, #364]	@ 0x16c
 8015a90:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	@ 0x168
 8015a94:	460b      	mov	r3, r1
 8015a96:	4323      	orrs	r3, r4
 8015a98:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 8015a9c:	4613      	mov	r3, r2
 8015a9e:	432b      	orrs	r3, r5
 8015aa0:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
    m[i] = ((uint64_t) data[j] << 56) | ((uint64_t) data[j + 1] << 48) |
 8015aa4:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8015aa8:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 8015aac:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 8015ab0:	00db      	lsls	r3, r3, #3
 8015ab2:	4413      	add	r3, r2
 8015ab4:	e9d7 1258 	ldrd	r1, r2, [r7, #352]	@ 0x160
 8015ab8:	e9c3 1200 	strd	r1, r2, [r3]
  for (i = 0, j = 0; i < 16; ++i, j += 8)
 8015abc:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 8015ac0:	3301      	adds	r3, #1
 8015ac2:	f8c7 3464 	str.w	r3, [r7, #1124]	@ 0x464
 8015ac6:	f8d7 3460 	ldr.w	r3, [r7, #1120]	@ 0x460
 8015aca:	3308      	adds	r3, #8
 8015acc:	f8c7 3460 	str.w	r3, [r7, #1120]	@ 0x460
 8015ad0:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 8015ad4:	2b0f      	cmp	r3, #15
 8015ad6:	f77f aee7 	ble.w	80158a8 <mg_sha384_transform+0x2c>
  for (; i < 80; ++i)
 8015ada:	e0f8      	b.n	8015cce <mg_sha384_transform+0x452>
    m[i] = sig164(m[i - 2]) + m[i - 7] + sig064(m[i - 15]) + m[i - 16];
 8015adc:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 8015ae0:	1e99      	subs	r1, r3, #2
 8015ae2:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8015ae6:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 8015aea:	00cb      	lsls	r3, r1, #3
 8015aec:	4413      	add	r3, r2
 8015aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015af2:	0358      	lsls	r0, r3, #13
 8015af4:	0cd1      	lsrs	r1, r2, #19
 8015af6:	4301      	orrs	r1, r0
 8015af8:	f8c7 1158 	str.w	r1, [r7, #344]	@ 0x158
 8015afc:	0351      	lsls	r1, r2, #13
 8015afe:	0cdb      	lsrs	r3, r3, #19
 8015b00:	430b      	orrs	r3, r1
 8015b02:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 8015b06:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 8015b0a:	1e99      	subs	r1, r3, #2
 8015b0c:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8015b10:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 8015b14:	00cb      	lsls	r3, r1, #3
 8015b16:	4413      	add	r3, r2
 8015b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b1c:	0f50      	lsrs	r0, r2, #29
 8015b1e:	00d9      	lsls	r1, r3, #3
 8015b20:	4301      	orrs	r1, r0
 8015b22:	f8c7 1154 	str.w	r1, [r7, #340]	@ 0x154
 8015b26:	0f59      	lsrs	r1, r3, #29
 8015b28:	00d3      	lsls	r3, r2, #3
 8015b2a:	430b      	orrs	r3, r1
 8015b2c:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8015b30:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	@ 0x158
 8015b34:	4623      	mov	r3, r4
 8015b36:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	@ 0x150
 8015b3a:	4602      	mov	r2, r0
 8015b3c:	4053      	eors	r3, r2
 8015b3e:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 8015b42:	462b      	mov	r3, r5
 8015b44:	460a      	mov	r2, r1
 8015b46:	4053      	eors	r3, r2
 8015b48:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8015b4c:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 8015b50:	1e99      	subs	r1, r3, #2
 8015b52:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8015b56:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 8015b5a:	00cb      	lsls	r3, r1, #3
 8015b5c:	4413      	add	r3, r2
 8015b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b62:	f04f 0000 	mov.w	r0, #0
 8015b66:	f04f 0100 	mov.w	r1, #0
 8015b6a:	0990      	lsrs	r0, r2, #6
 8015b6c:	ea40 6083 	orr.w	r0, r0, r3, lsl #26
 8015b70:	0999      	lsrs	r1, r3, #6
 8015b72:	e9d7 4552 	ldrd	r4, r5, [r7, #328]	@ 0x148
 8015b76:	4623      	mov	r3, r4
 8015b78:	4043      	eors	r3, r0
 8015b7a:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8015b7e:	462b      	mov	r3, r5
 8015b80:	404b      	eors	r3, r1
 8015b82:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8015b86:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 8015b8a:	1fd9      	subs	r1, r3, #7
 8015b8c:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8015b90:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 8015b94:	00cb      	lsls	r3, r1, #3
 8015b96:	4413      	add	r3, r2
 8015b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b9c:	e9d7 4550 	ldrd	r4, r5, [r7, #320]	@ 0x140
 8015ba0:	4621      	mov	r1, r4
 8015ba2:	1889      	adds	r1, r1, r2
 8015ba4:	f8c7 1138 	str.w	r1, [r7, #312]	@ 0x138
 8015ba8:	4629      	mov	r1, r5
 8015baa:	eb41 0303 	adc.w	r3, r1, r3
 8015bae:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8015bb2:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 8015bb6:	f1a3 010f 	sub.w	r1, r3, #15
 8015bba:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8015bbe:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 8015bc2:	00cb      	lsls	r3, r1, #3
 8015bc4:	4413      	add	r3, r2
 8015bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015bca:	07d8      	lsls	r0, r3, #31
 8015bcc:	0851      	lsrs	r1, r2, #1
 8015bce:	4301      	orrs	r1, r0
 8015bd0:	f8c7 1130 	str.w	r1, [r7, #304]	@ 0x130
 8015bd4:	07d1      	lsls	r1, r2, #31
 8015bd6:	085b      	lsrs	r3, r3, #1
 8015bd8:	430b      	orrs	r3, r1
 8015bda:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8015bde:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 8015be2:	f1a3 010f 	sub.w	r1, r3, #15
 8015be6:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8015bea:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 8015bee:	00cb      	lsls	r3, r1, #3
 8015bf0:	4413      	add	r3, r2
 8015bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015bf6:	0618      	lsls	r0, r3, #24
 8015bf8:	0a11      	lsrs	r1, r2, #8
 8015bfa:	4301      	orrs	r1, r0
 8015bfc:	f8c7 1128 	str.w	r1, [r7, #296]	@ 0x128
 8015c00:	0611      	lsls	r1, r2, #24
 8015c02:	0a1b      	lsrs	r3, r3, #8
 8015c04:	430b      	orrs	r3, r1
 8015c06:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8015c0a:	e9d7 454c 	ldrd	r4, r5, [r7, #304]	@ 0x130
 8015c0e:	4623      	mov	r3, r4
 8015c10:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	@ 0x128
 8015c14:	4602      	mov	r2, r0
 8015c16:	4053      	eors	r3, r2
 8015c18:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8015c1c:	462b      	mov	r3, r5
 8015c1e:	460a      	mov	r2, r1
 8015c20:	4053      	eors	r3, r2
 8015c22:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8015c26:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 8015c2a:	f1a3 010f 	sub.w	r1, r3, #15
 8015c2e:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8015c32:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 8015c36:	00cb      	lsls	r3, r1, #3
 8015c38:	4413      	add	r3, r2
 8015c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c3e:	f04f 0000 	mov.w	r0, #0
 8015c42:	f04f 0100 	mov.w	r1, #0
 8015c46:	09d0      	lsrs	r0, r2, #7
 8015c48:	ea40 6043 	orr.w	r0, r0, r3, lsl #25
 8015c4c:	09d9      	lsrs	r1, r3, #7
 8015c4e:	e9d7 4548 	ldrd	r4, r5, [r7, #288]	@ 0x120
 8015c52:	4623      	mov	r3, r4
 8015c54:	4043      	eors	r3, r0
 8015c56:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8015c5a:	462b      	mov	r3, r5
 8015c5c:	404b      	eors	r3, r1
 8015c5e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8015c62:	e9d7 454e 	ldrd	r4, r5, [r7, #312]	@ 0x138
 8015c66:	4623      	mov	r3, r4
 8015c68:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 8015c6c:	4602      	mov	r2, r0
 8015c6e:	189b      	adds	r3, r3, r2
 8015c70:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8015c74:	462b      	mov	r3, r5
 8015c76:	460a      	mov	r2, r1
 8015c78:	4153      	adcs	r3, r2
 8015c7a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8015c7e:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 8015c82:	f1a3 0110 	sub.w	r1, r3, #16
 8015c86:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8015c8a:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 8015c8e:	00cb      	lsls	r3, r1, #3
 8015c90:	4413      	add	r3, r2
 8015c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c96:	e9d7 4544 	ldrd	r4, r5, [r7, #272]	@ 0x110
 8015c9a:	4621      	mov	r1, r4
 8015c9c:	1889      	adds	r1, r1, r2
 8015c9e:	f8c7 1108 	str.w	r1, [r7, #264]	@ 0x108
 8015ca2:	4629      	mov	r1, r5
 8015ca4:	eb41 0303 	adc.w	r3, r1, r3
 8015ca8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8015cac:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8015cb0:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 8015cb4:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 8015cb8:	00db      	lsls	r3, r3, #3
 8015cba:	4413      	add	r3, r2
 8015cbc:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8015cc0:	e9c3 1200 	strd	r1, r2, [r3]
  for (; i < 80; ++i)
 8015cc4:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 8015cc8:	3301      	adds	r3, #1
 8015cca:	f8c7 3464 	str.w	r3, [r7, #1124]	@ 0x464
 8015cce:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 8015cd2:	2b4f      	cmp	r3, #79	@ 0x4f
 8015cd4:	f77f af02 	ble.w	8015adc <mg_sha384_transform+0x260>

  a = ctx->state[0];
 8015cd8:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8015cdc:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8015ce0:	681b      	ldr	r3, [r3, #0]
 8015ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ce6:	f507 6194 	add.w	r1, r7, #1184	@ 0x4a0
 8015cea:	e9c1 2300 	strd	r2, r3, [r1]
  b = ctx->state[1];
 8015cee:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8015cf2:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8015cf6:	681b      	ldr	r3, [r3, #0]
 8015cf8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8015cfc:	f507 6193 	add.w	r1, r7, #1176	@ 0x498
 8015d00:	e9c1 2300 	strd	r2, r3, [r1]
  c = ctx->state[2];
 8015d04:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8015d08:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8015d0c:	681b      	ldr	r3, [r3, #0]
 8015d0e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8015d12:	f507 6192 	add.w	r1, r7, #1168	@ 0x490
 8015d16:	e9c1 2300 	strd	r2, r3, [r1]
  d = ctx->state[3];
 8015d1a:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8015d1e:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8015d22:	681b      	ldr	r3, [r3, #0]
 8015d24:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8015d28:	f507 6191 	add.w	r1, r7, #1160	@ 0x488
 8015d2c:	e9c1 2300 	strd	r2, r3, [r1]
  e = ctx->state[4];
 8015d30:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8015d34:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8015d38:	681b      	ldr	r3, [r3, #0]
 8015d3a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8015d3e:	f507 6190 	add.w	r1, r7, #1152	@ 0x480
 8015d42:	e9c1 2300 	strd	r2, r3, [r1]
  f = ctx->state[5];
 8015d46:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8015d4a:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8015d4e:	681b      	ldr	r3, [r3, #0]
 8015d50:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8015d54:	f507 618f 	add.w	r1, r7, #1144	@ 0x478
 8015d58:	e9c1 2300 	strd	r2, r3, [r1]
  g = ctx->state[6];
 8015d5c:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8015d60:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8015d64:	681b      	ldr	r3, [r3, #0]
 8015d66:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8015d6a:	f507 618e 	add.w	r1, r7, #1136	@ 0x470
 8015d6e:	e9c1 2300 	strd	r2, r3, [r1]
  h = ctx->state[7];
 8015d72:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8015d76:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8015d7a:	681b      	ldr	r3, [r3, #0]
 8015d7c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8015d80:	f507 618d 	add.w	r1, r7, #1128	@ 0x468
 8015d84:	e9c1 2300 	strd	r2, r3, [r1]

  for (i = 0; i < 80; ++i) {
 8015d88:	2300      	movs	r3, #0
 8015d8a:	f8c7 3464 	str.w	r3, [r7, #1124]	@ 0x464
 8015d8e:	e1c3      	b.n	8016118 <mg_sha384_transform+0x89c>
    uint64_t t1 = h + ep164(e) + ch(e, f, g) + mg_sha256_k2[i] + m[i];
 8015d90:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 8015d94:	049a      	lsls	r2, r3, #18
 8015d96:	f8d7 3480 	ldr.w	r3, [r7, #1152]	@ 0x480
 8015d9a:	0b9b      	lsrs	r3, r3, #14
 8015d9c:	4313      	orrs	r3, r2
 8015d9e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8015da2:	f8d7 3480 	ldr.w	r3, [r7, #1152]	@ 0x480
 8015da6:	049a      	lsls	r2, r3, #18
 8015da8:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 8015dac:	0b9b      	lsrs	r3, r3, #14
 8015dae:	4313      	orrs	r3, r2
 8015db0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8015db4:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 8015db8:	039a      	lsls	r2, r3, #14
 8015dba:	f8d7 3480 	ldr.w	r3, [r7, #1152]	@ 0x480
 8015dbe:	0c9b      	lsrs	r3, r3, #18
 8015dc0:	4313      	orrs	r3, r2
 8015dc2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8015dc6:	f8d7 3480 	ldr.w	r3, [r7, #1152]	@ 0x480
 8015dca:	039a      	lsls	r2, r3, #14
 8015dcc:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 8015dd0:	0c9b      	lsrs	r3, r3, #18
 8015dd2:	4313      	orrs	r3, r2
 8015dd4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8015dd8:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8015ddc:	4623      	mov	r3, r4
 8015dde:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	@ 0xf8
 8015de2:	4602      	mov	r2, r0
 8015de4:	4053      	eors	r3, r2
 8015de6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8015dea:	462b      	mov	r3, r5
 8015dec:	460a      	mov	r2, r1
 8015dee:	4053      	eors	r3, r2
 8015df0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8015df4:	f8d7 3480 	ldr.w	r3, [r7, #1152]	@ 0x480
 8015df8:	0a5a      	lsrs	r2, r3, #9
 8015dfa:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 8015dfe:	05db      	lsls	r3, r3, #23
 8015e00:	4313      	orrs	r3, r2
 8015e02:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8015e06:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 8015e0a:	0a5a      	lsrs	r2, r3, #9
 8015e0c:	f8d7 3480 	ldr.w	r3, [r7, #1152]	@ 0x480
 8015e10:	05db      	lsls	r3, r3, #23
 8015e12:	4313      	orrs	r3, r2
 8015e14:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8015e18:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8015e1c:	4623      	mov	r3, r4
 8015e1e:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	@ 0xe8
 8015e22:	4602      	mov	r2, r0
 8015e24:	4053      	eors	r3, r2
 8015e26:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8015e2a:	462b      	mov	r3, r5
 8015e2c:	460a      	mov	r2, r1
 8015e2e:	4053      	eors	r3, r2
 8015e30:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8015e34:	f507 638d 	add.w	r3, r7, #1128	@ 0x468
 8015e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e3c:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8015e40:	4621      	mov	r1, r4
 8015e42:	1889      	adds	r1, r1, r2
 8015e44:	f8c7 10d8 	str.w	r1, [r7, #216]	@ 0xd8
 8015e48:	4629      	mov	r1, r5
 8015e4a:	eb41 0303 	adc.w	r3, r1, r3
 8015e4e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8015e52:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 8015e56:	e9d3 0100 	ldrd	r0, r1, [r3]
 8015e5a:	f507 638f 	add.w	r3, r7, #1144	@ 0x478
 8015e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e62:	ea00 0402 	and.w	r4, r0, r2
 8015e66:	f8c7 40d0 	str.w	r4, [r7, #208]	@ 0xd0
 8015e6a:	400b      	ands	r3, r1
 8015e6c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8015e70:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 8015e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e78:	43d1      	mvns	r1, r2
 8015e7a:	f8c7 10c8 	str.w	r1, [r7, #200]	@ 0xc8
 8015e7e:	43db      	mvns	r3, r3
 8015e80:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8015e84:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 8015e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e8c:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8015e90:	4621      	mov	r1, r4
 8015e92:	4011      	ands	r1, r2
 8015e94:	f8c7 10c0 	str.w	r1, [r7, #192]	@ 0xc0
 8015e98:	4629      	mov	r1, r5
 8015e9a:	400b      	ands	r3, r1
 8015e9c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8015ea0:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8015ea4:	4623      	mov	r3, r4
 8015ea6:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 8015eaa:	4602      	mov	r2, r0
 8015eac:	4053      	eors	r3, r2
 8015eae:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8015eb2:	462b      	mov	r3, r5
 8015eb4:	460a      	mov	r2, r1
 8015eb6:	4053      	eors	r3, r2
 8015eb8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8015ebc:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8015ec0:	4623      	mov	r3, r4
 8015ec2:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8015ec6:	4602      	mov	r2, r0
 8015ec8:	189b      	adds	r3, r3, r2
 8015eca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8015ece:	462b      	mov	r3, r5
 8015ed0:	460a      	mov	r2, r1
 8015ed2:	4153      	adcs	r3, r2
 8015ed4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8015ed8:	4a8e      	ldr	r2, [pc, #568]	@ (8016114 <mg_sha384_transform+0x898>)
 8015eda:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 8015ede:	00db      	lsls	r3, r3, #3
 8015ee0:	4413      	add	r3, r2
 8015ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ee6:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 8015eea:	4621      	mov	r1, r4
 8015eec:	1889      	adds	r1, r1, r2
 8015eee:	f8c7 10a8 	str.w	r1, [r7, #168]	@ 0xa8
 8015ef2:	4629      	mov	r1, r5
 8015ef4:	eb41 0303 	adc.w	r3, r1, r3
 8015ef8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8015efc:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8015f00:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 8015f04:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 8015f08:	00db      	lsls	r3, r3, #3
 8015f0a:	4413      	add	r3, r2
 8015f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f10:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	@ 0xa8
 8015f14:	4621      	mov	r1, r4
 8015f16:	1889      	adds	r1, r1, r2
 8015f18:	61b9      	str	r1, [r7, #24]
 8015f1a:	4629      	mov	r1, r5
 8015f1c:	eb41 0303 	adc.w	r3, r1, r3
 8015f20:	61fb      	str	r3, [r7, #28]
 8015f22:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8015f26:	f507 628b 	add.w	r2, r7, #1112	@ 0x458
 8015f2a:	e9c2 3400 	strd	r3, r4, [r2]
    uint64_t t2 = ep064(a) + maj(a, b, c);
 8015f2e:	f8d7 34a4 	ldr.w	r3, [r7, #1188]	@ 0x4a4
 8015f32:	011a      	lsls	r2, r3, #4
 8015f34:	f8d7 34a0 	ldr.w	r3, [r7, #1184]	@ 0x4a0
 8015f38:	0f1b      	lsrs	r3, r3, #28
 8015f3a:	4313      	orrs	r3, r2
 8015f3c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8015f40:	f8d7 34a0 	ldr.w	r3, [r7, #1184]	@ 0x4a0
 8015f44:	011a      	lsls	r2, r3, #4
 8015f46:	f8d7 34a4 	ldr.w	r3, [r7, #1188]	@ 0x4a4
 8015f4a:	0f1b      	lsrs	r3, r3, #28
 8015f4c:	4313      	orrs	r3, r2
 8015f4e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8015f52:	f8d7 34a0 	ldr.w	r3, [r7, #1184]	@ 0x4a0
 8015f56:	089a      	lsrs	r2, r3, #2
 8015f58:	f8d7 34a4 	ldr.w	r3, [r7, #1188]	@ 0x4a4
 8015f5c:	079b      	lsls	r3, r3, #30
 8015f5e:	4313      	orrs	r3, r2
 8015f60:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8015f64:	f8d7 34a4 	ldr.w	r3, [r7, #1188]	@ 0x4a4
 8015f68:	089a      	lsrs	r2, r3, #2
 8015f6a:	f8d7 34a0 	ldr.w	r3, [r7, #1184]	@ 0x4a0
 8015f6e:	079b      	lsls	r3, r3, #30
 8015f70:	4313      	orrs	r3, r2
 8015f72:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8015f76:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	@ 0xa0
 8015f7a:	4623      	mov	r3, r4
 8015f7c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8015f80:	4602      	mov	r2, r0
 8015f82:	4053      	eors	r3, r2
 8015f84:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8015f88:	462b      	mov	r3, r5
 8015f8a:	460a      	mov	r2, r1
 8015f8c:	4053      	eors	r3, r2
 8015f8e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8015f92:	f8d7 34a0 	ldr.w	r3, [r7, #1184]	@ 0x4a0
 8015f96:	09da      	lsrs	r2, r3, #7
 8015f98:	f8d7 34a4 	ldr.w	r3, [r7, #1188]	@ 0x4a4
 8015f9c:	065b      	lsls	r3, r3, #25
 8015f9e:	4313      	orrs	r3, r2
 8015fa0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8015fa4:	f8d7 34a4 	ldr.w	r3, [r7, #1188]	@ 0x4a4
 8015fa8:	09da      	lsrs	r2, r3, #7
 8015faa:	f8d7 34a0 	ldr.w	r3, [r7, #1184]	@ 0x4a0
 8015fae:	065b      	lsls	r3, r3, #25
 8015fb0:	4313      	orrs	r3, r2
 8015fb2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8015fb6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8015fba:	4623      	mov	r3, r4
 8015fbc:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8015fc0:	4602      	mov	r2, r0
 8015fc2:	4053      	eors	r3, r2
 8015fc4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8015fc8:	462b      	mov	r3, r5
 8015fca:	460a      	mov	r2, r1
 8015fcc:	4053      	eors	r3, r2
 8015fce:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8015fd2:	f507 6393 	add.w	r3, r7, #1176	@ 0x498
 8015fd6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8015fda:	f507 6392 	add.w	r3, r7, #1168	@ 0x490
 8015fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015fe2:	ea80 0402 	eor.w	r4, r0, r2
 8015fe6:	67bc      	str	r4, [r7, #120]	@ 0x78
 8015fe8:	404b      	eors	r3, r1
 8015fea:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8015fec:	f507 6394 	add.w	r3, r7, #1184	@ 0x4a0
 8015ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ff4:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8015ff8:	4621      	mov	r1, r4
 8015ffa:	4011      	ands	r1, r2
 8015ffc:	6739      	str	r1, [r7, #112]	@ 0x70
 8015ffe:	4629      	mov	r1, r5
 8016000:	400b      	ands	r3, r1
 8016002:	677b      	str	r3, [r7, #116]	@ 0x74
 8016004:	f507 6393 	add.w	r3, r7, #1176	@ 0x498
 8016008:	e9d3 0100 	ldrd	r0, r1, [r3]
 801600c:	f507 6392 	add.w	r3, r7, #1168	@ 0x490
 8016010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016014:	ea00 0402 	and.w	r4, r0, r2
 8016018:	66bc      	str	r4, [r7, #104]	@ 0x68
 801601a:	400b      	ands	r3, r1
 801601c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801601e:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 8016022:	4623      	mov	r3, r4
 8016024:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8016028:	4602      	mov	r2, r0
 801602a:	4053      	eors	r3, r2
 801602c:	663b      	str	r3, [r7, #96]	@ 0x60
 801602e:	462b      	mov	r3, r5
 8016030:	460a      	mov	r2, r1
 8016032:	4053      	eors	r3, r2
 8016034:	667b      	str	r3, [r7, #100]	@ 0x64
 8016036:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 801603a:	4623      	mov	r3, r4
 801603c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8016040:	4602      	mov	r2, r0
 8016042:	189b      	adds	r3, r3, r2
 8016044:	613b      	str	r3, [r7, #16]
 8016046:	462b      	mov	r3, r5
 8016048:	460a      	mov	r2, r1
 801604a:	4153      	adcs	r3, r2
 801604c:	617b      	str	r3, [r7, #20]
 801604e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8016052:	f507 628a 	add.w	r2, r7, #1104	@ 0x450
 8016056:	e9c2 3400 	strd	r3, r4, [r2]
    h = g;
 801605a:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 801605e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016062:	f507 618d 	add.w	r1, r7, #1128	@ 0x468
 8016066:	e9c1 2300 	strd	r2, r3, [r1]
    g = f;
 801606a:	f507 638f 	add.w	r3, r7, #1144	@ 0x478
 801606e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016072:	f507 618e 	add.w	r1, r7, #1136	@ 0x470
 8016076:	e9c1 2300 	strd	r2, r3, [r1]
    f = e;
 801607a:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 801607e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016082:	f507 618f 	add.w	r1, r7, #1144	@ 0x478
 8016086:	e9c1 2300 	strd	r2, r3, [r1]
    e = d + t1;
 801608a:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 801608e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8016092:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8016096:	e9d3 2300 	ldrd	r2, r3, [r3]
 801609a:	1884      	adds	r4, r0, r2
 801609c:	60bc      	str	r4, [r7, #8]
 801609e:	eb41 0303 	adc.w	r3, r1, r3
 80160a2:	60fb      	str	r3, [r7, #12]
 80160a4:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80160a8:	f507 6290 	add.w	r2, r7, #1152	@ 0x480
 80160ac:	e9c2 3400 	strd	r3, r4, [r2]
    d = c;
 80160b0:	f507 6392 	add.w	r3, r7, #1168	@ 0x490
 80160b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80160b8:	f507 6191 	add.w	r1, r7, #1160	@ 0x488
 80160bc:	e9c1 2300 	strd	r2, r3, [r1]
    c = b;
 80160c0:	f507 6393 	add.w	r3, r7, #1176	@ 0x498
 80160c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80160c8:	f507 6192 	add.w	r1, r7, #1168	@ 0x490
 80160cc:	e9c1 2300 	strd	r2, r3, [r1]
    b = a;
 80160d0:	f507 6394 	add.w	r3, r7, #1184	@ 0x4a0
 80160d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80160d8:	f507 6193 	add.w	r1, r7, #1176	@ 0x498
 80160dc:	e9c1 2300 	strd	r2, r3, [r1]
    a = t1 + t2;
 80160e0:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 80160e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80160e8:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 80160ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80160f0:	1884      	adds	r4, r0, r2
 80160f2:	603c      	str	r4, [r7, #0]
 80160f4:	eb41 0303 	adc.w	r3, r1, r3
 80160f8:	607b      	str	r3, [r7, #4]
 80160fa:	e9d7 3400 	ldrd	r3, r4, [r7]
 80160fe:	f507 6294 	add.w	r2, r7, #1184	@ 0x4a0
 8016102:	e9c2 3400 	strd	r3, r4, [r2]
  for (i = 0; i < 80; ++i) {
 8016106:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 801610a:	3301      	adds	r3, #1
 801610c:	f8c7 3464 	str.w	r3, [r7, #1124]	@ 0x464
 8016110:	e002      	b.n	8016118 <mg_sha384_transform+0x89c>
 8016112:	bf00      	nop
 8016114:	0802d480 	.word	0x0802d480
 8016118:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 801611c:	2b4f      	cmp	r3, #79	@ 0x4f
 801611e:	f77f ae37 	ble.w	8015d90 <mg_sha384_transform+0x514>
  }

  ctx->state[0] += a;
 8016122:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8016126:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 801612a:	681b      	ldr	r3, [r3, #0]
 801612c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8016130:	f507 6394 	add.w	r3, r7, #1184	@ 0x4a0
 8016134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016138:	1884      	adds	r4, r0, r2
 801613a:	65bc      	str	r4, [r7, #88]	@ 0x58
 801613c:	eb41 0303 	adc.w	r3, r1, r3
 8016140:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8016142:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8016146:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 801614a:	681b      	ldr	r3, [r3, #0]
 801614c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8016150:	e9c3 1200 	strd	r1, r2, [r3]
  ctx->state[1] += b;
 8016154:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8016158:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 801615c:	681b      	ldr	r3, [r3, #0]
 801615e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8016162:	f507 6393 	add.w	r3, r7, #1176	@ 0x498
 8016166:	e9d3 2300 	ldrd	r2, r3, [r3]
 801616a:	1884      	adds	r4, r0, r2
 801616c:	653c      	str	r4, [r7, #80]	@ 0x50
 801616e:	eb41 0303 	adc.w	r3, r1, r3
 8016172:	657b      	str	r3, [r7, #84]	@ 0x54
 8016174:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8016178:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 801617c:	681b      	ldr	r3, [r3, #0]
 801617e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8016182:	e9c3 1202 	strd	r1, r2, [r3, #8]
  ctx->state[2] += c;
 8016186:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 801618a:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 801618e:	681b      	ldr	r3, [r3, #0]
 8016190:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8016194:	f507 6392 	add.w	r3, r7, #1168	@ 0x490
 8016198:	e9d3 2300 	ldrd	r2, r3, [r3]
 801619c:	1884      	adds	r4, r0, r2
 801619e:	64bc      	str	r4, [r7, #72]	@ 0x48
 80161a0:	eb41 0303 	adc.w	r3, r1, r3
 80161a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80161a6:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 80161aa:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 80161ae:	681b      	ldr	r3, [r3, #0]
 80161b0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80161b4:	e9c3 1204 	strd	r1, r2, [r3, #16]
  ctx->state[3] += d;
 80161b8:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 80161bc:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 80161c0:	681b      	ldr	r3, [r3, #0]
 80161c2:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80161c6:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 80161ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80161ce:	1884      	adds	r4, r0, r2
 80161d0:	643c      	str	r4, [r7, #64]	@ 0x40
 80161d2:	eb41 0303 	adc.w	r3, r1, r3
 80161d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80161d8:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 80161dc:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 80161e0:	681b      	ldr	r3, [r3, #0]
 80161e2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80161e6:	e9c3 1206 	strd	r1, r2, [r3, #24]
  ctx->state[4] += e;
 80161ea:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 80161ee:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 80161f2:	681b      	ldr	r3, [r3, #0]
 80161f4:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80161f8:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 80161fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016200:	1884      	adds	r4, r0, r2
 8016202:	63bc      	str	r4, [r7, #56]	@ 0x38
 8016204:	eb41 0303 	adc.w	r3, r1, r3
 8016208:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801620a:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 801620e:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8016212:	681b      	ldr	r3, [r3, #0]
 8016214:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8016218:	e9c3 1208 	strd	r1, r2, [r3, #32]
  ctx->state[5] += f;
 801621c:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8016220:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8016224:	681b      	ldr	r3, [r3, #0]
 8016226:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 801622a:	f507 638f 	add.w	r3, r7, #1144	@ 0x478
 801622e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016232:	1884      	adds	r4, r0, r2
 8016234:	633c      	str	r4, [r7, #48]	@ 0x30
 8016236:	eb41 0303 	adc.w	r3, r1, r3
 801623a:	637b      	str	r3, [r7, #52]	@ 0x34
 801623c:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8016240:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8016244:	681b      	ldr	r3, [r3, #0]
 8016246:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 801624a:	e9c3 120a 	strd	r1, r2, [r3, #40]	@ 0x28
  ctx->state[6] += g;
 801624e:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8016252:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8016256:	681b      	ldr	r3, [r3, #0]
 8016258:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 801625c:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 8016260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016264:	1884      	adds	r4, r0, r2
 8016266:	62bc      	str	r4, [r7, #40]	@ 0x28
 8016268:	eb41 0303 	adc.w	r3, r1, r3
 801626c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801626e:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8016272:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8016276:	681b      	ldr	r3, [r3, #0]
 8016278:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 801627c:	e9c3 120c 	strd	r1, r2, [r3, #48]	@ 0x30
  ctx->state[7] += h;
 8016280:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8016284:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8016288:	681b      	ldr	r3, [r3, #0]
 801628a:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 801628e:	f507 638d 	add.w	r3, r7, #1128	@ 0x468
 8016292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016296:	1884      	adds	r4, r0, r2
 8016298:	623c      	str	r4, [r7, #32]
 801629a:	eb41 0303 	adc.w	r3, r1, r3
 801629e:	627b      	str	r3, [r7, #36]	@ 0x24
 80162a0:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 80162a4:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 80162a8:	681b      	ldr	r3, [r3, #0]
 80162aa:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80162ae:	e9c3 120e 	strd	r1, r2, [r3, #56]	@ 0x38
}
 80162b2:	bf00      	nop
 80162b4:	f507 6795 	add.w	r7, r7, #1192	@ 0x4a8
 80162b8:	46bd      	mov	sp, r7
 80162ba:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80162be:	4770      	bx	lr

080162c0 <mg_sha384_init>:

void mg_sha384_init(mg_sha384_ctx *ctx) {
 80162c0:	b480      	push	{r7}
 80162c2:	b083      	sub	sp, #12
 80162c4:	af00      	add	r7, sp, #0
 80162c6:	6078      	str	r0, [r7, #4]
  ctx->datalen = 0;
 80162c8:	687b      	ldr	r3, [r7, #4]
 80162ca:	2200      	movs	r2, #0
 80162cc:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
  ctx->bitlen[0] = 0;
 80162d0:	6879      	ldr	r1, [r7, #4]
 80162d2:	f04f 0200 	mov.w	r2, #0
 80162d6:	f04f 0300 	mov.w	r3, #0
 80162da:	e9c1 2330 	strd	r2, r3, [r1, #192]	@ 0xc0
  ctx->bitlen[1] = 0;
 80162de:	6879      	ldr	r1, [r7, #4]
 80162e0:	f04f 0200 	mov.w	r2, #0
 80162e4:	f04f 0300 	mov.w	r3, #0
 80162e8:	e9c1 2332 	strd	r2, r3, [r1, #200]	@ 0xc8
  ctx->state[0] = 0xcbbb9d5dc1059ed8;
 80162ec:	6879      	ldr	r1, [r7, #4]
 80162ee:	a31a      	add	r3, pc, #104	@ (adr r3, 8016358 <mg_sha384_init+0x98>)
 80162f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80162f4:	e9c1 2300 	strd	r2, r3, [r1]
  ctx->state[1] = 0x629a292a367cd507;
 80162f8:	6879      	ldr	r1, [r7, #4]
 80162fa:	a319      	add	r3, pc, #100	@ (adr r3, 8016360 <mg_sha384_init+0xa0>)
 80162fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016300:	e9c1 2302 	strd	r2, r3, [r1, #8]
  ctx->state[2] = 0x9159015a3070dd17;
 8016304:	6879      	ldr	r1, [r7, #4]
 8016306:	a318      	add	r3, pc, #96	@ (adr r3, 8016368 <mg_sha384_init+0xa8>)
 8016308:	e9d3 2300 	ldrd	r2, r3, [r3]
 801630c:	e9c1 2304 	strd	r2, r3, [r1, #16]
  ctx->state[3] = 0x152fecd8f70e5939;
 8016310:	6879      	ldr	r1, [r7, #4]
 8016312:	a317      	add	r3, pc, #92	@ (adr r3, 8016370 <mg_sha384_init+0xb0>)
 8016314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016318:	e9c1 2306 	strd	r2, r3, [r1, #24]
  ctx->state[4] = 0x67332667ffc00b31;
 801631c:	6879      	ldr	r1, [r7, #4]
 801631e:	a316      	add	r3, pc, #88	@ (adr r3, 8016378 <mg_sha384_init+0xb8>)
 8016320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016324:	e9c1 2308 	strd	r2, r3, [r1, #32]
  ctx->state[5] = 0x8eb44a8768581511;
 8016328:	6879      	ldr	r1, [r7, #4]
 801632a:	a315      	add	r3, pc, #84	@ (adr r3, 8016380 <mg_sha384_init+0xc0>)
 801632c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016330:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
  ctx->state[6] = 0xdb0c2e0d64f98fa7;
 8016334:	6879      	ldr	r1, [r7, #4]
 8016336:	a314      	add	r3, pc, #80	@ (adr r3, 8016388 <mg_sha384_init+0xc8>)
 8016338:	e9d3 2300 	ldrd	r2, r3, [r3]
 801633c:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
  ctx->state[7] = 0x47b5481dbefa4fa4;
 8016340:	6879      	ldr	r1, [r7, #4]
 8016342:	a313      	add	r3, pc, #76	@ (adr r3, 8016390 <mg_sha384_init+0xd0>)
 8016344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016348:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
}
 801634c:	bf00      	nop
 801634e:	370c      	adds	r7, #12
 8016350:	46bd      	mov	sp, r7
 8016352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016356:	4770      	bx	lr
 8016358:	c1059ed8 	.word	0xc1059ed8
 801635c:	cbbb9d5d 	.word	0xcbbb9d5d
 8016360:	367cd507 	.word	0x367cd507
 8016364:	629a292a 	.word	0x629a292a
 8016368:	3070dd17 	.word	0x3070dd17
 801636c:	9159015a 	.word	0x9159015a
 8016370:	f70e5939 	.word	0xf70e5939
 8016374:	152fecd8 	.word	0x152fecd8
 8016378:	ffc00b31 	.word	0xffc00b31
 801637c:	67332667 	.word	0x67332667
 8016380:	68581511 	.word	0x68581511
 8016384:	8eb44a87 	.word	0x8eb44a87
 8016388:	64f98fa7 	.word	0x64f98fa7
 801638c:	db0c2e0d 	.word	0xdb0c2e0d
 8016390:	befa4fa4 	.word	0xbefa4fa4
 8016394:	47b5481d 	.word	0x47b5481d

08016398 <mg_sha384_update>:

void mg_sha384_update(mg_sha384_ctx *ctx, const uint8_t *data, size_t len) {
 8016398:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801639c:	b086      	sub	sp, #24
 801639e:	af00      	add	r7, sp, #0
 80163a0:	60f8      	str	r0, [r7, #12]
 80163a2:	60b9      	str	r1, [r7, #8]
 80163a4:	607a      	str	r2, [r7, #4]
  size_t i;
  for (i = 0; i < len; ++i) {
 80163a6:	2300      	movs	r3, #0
 80163a8:	617b      	str	r3, [r7, #20]
 80163aa:	e040      	b.n	801642e <mg_sha384_update+0x96>
    ctx->buffer[ctx->datalen] = data[i];
 80163ac:	68ba      	ldr	r2, [r7, #8]
 80163ae:	697b      	ldr	r3, [r7, #20]
 80163b0:	441a      	add	r2, r3
 80163b2:	68fb      	ldr	r3, [r7, #12]
 80163b4:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80163b8:	7811      	ldrb	r1, [r2, #0]
 80163ba:	68fa      	ldr	r2, [r7, #12]
 80163bc:	4413      	add	r3, r2
 80163be:	460a      	mov	r2, r1
 80163c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    ctx->datalen++;
 80163c4:	68fb      	ldr	r3, [r7, #12]
 80163c6:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80163ca:	1c5a      	adds	r2, r3, #1
 80163cc:	68fb      	ldr	r3, [r7, #12]
 80163ce:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
    if (ctx->datalen == 128) {
 80163d2:	68fb      	ldr	r3, [r7, #12]
 80163d4:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80163d8:	2b80      	cmp	r3, #128	@ 0x80
 80163da:	d125      	bne.n	8016428 <mg_sha384_update+0x90>
      mg_sha384_transform(ctx, ctx->buffer);
 80163dc:	68fb      	ldr	r3, [r7, #12]
 80163de:	3340      	adds	r3, #64	@ 0x40
 80163e0:	4619      	mov	r1, r3
 80163e2:	68f8      	ldr	r0, [r7, #12]
 80163e4:	f7ff fa4a 	bl	801587c <mg_sha384_transform>
      ctx->bitlen[1] += 1024;
 80163e8:	68fb      	ldr	r3, [r7, #12]
 80163ea:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	@ 0xc8
 80163ee:	f512 6480 	adds.w	r4, r2, #1024	@ 0x400
 80163f2:	f143 0500 	adc.w	r5, r3, #0
 80163f6:	68fb      	ldr	r3, [r7, #12]
 80163f8:	e9c3 4532 	strd	r4, r5, [r3, #200]	@ 0xc8
      if (ctx->bitlen[1] < 1024) ctx->bitlen[0]++;
 80163fc:	68fb      	ldr	r3, [r7, #12]
 80163fe:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	@ 0xc8
 8016402:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8016406:	f173 0300 	sbcs.w	r3, r3, #0
 801640a:	d209      	bcs.n	8016420 <mg_sha384_update+0x88>
 801640c:	68fb      	ldr	r3, [r7, #12]
 801640e:	e9d3 2330 	ldrd	r2, r3, [r3, #192]	@ 0xc0
 8016412:	f112 0801 	adds.w	r8, r2, #1
 8016416:	f143 0900 	adc.w	r9, r3, #0
 801641a:	68fb      	ldr	r3, [r7, #12]
 801641c:	e9c3 8930 	strd	r8, r9, [r3, #192]	@ 0xc0
      ctx->datalen = 0;
 8016420:	68fb      	ldr	r3, [r7, #12]
 8016422:	2200      	movs	r2, #0
 8016424:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
  for (i = 0; i < len; ++i) {
 8016428:	697b      	ldr	r3, [r7, #20]
 801642a:	3301      	adds	r3, #1
 801642c:	617b      	str	r3, [r7, #20]
 801642e:	697a      	ldr	r2, [r7, #20]
 8016430:	687b      	ldr	r3, [r7, #4]
 8016432:	429a      	cmp	r2, r3
 8016434:	d3ba      	bcc.n	80163ac <mg_sha384_update+0x14>
    }
  }
}
 8016436:	bf00      	nop
 8016438:	bf00      	nop
 801643a:	3718      	adds	r7, #24
 801643c:	46bd      	mov	sp, r7
 801643e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08016442 <mg_sha384_final>:

void mg_sha384_final(uint8_t hash[48], mg_sha384_ctx *ctx) {
 8016442:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8016446:	b086      	sub	sp, #24
 8016448:	af00      	add	r7, sp, #0
 801644a:	60f8      	str	r0, [r7, #12]
 801644c:	60b9      	str	r1, [r7, #8]
  size_t i = ctx->datalen;
 801644e:	68bb      	ldr	r3, [r7, #8]
 8016450:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8016454:	617b      	str	r3, [r7, #20]

  if (ctx->datalen < 112) {
 8016456:	68bb      	ldr	r3, [r7, #8]
 8016458:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 801645c:	2b6f      	cmp	r3, #111	@ 0x6f
 801645e:	d814      	bhi.n	801648a <mg_sha384_final+0x48>
    ctx->buffer[i++] = 0x80;
 8016460:	697b      	ldr	r3, [r7, #20]
 8016462:	1c5a      	adds	r2, r3, #1
 8016464:	617a      	str	r2, [r7, #20]
 8016466:	68ba      	ldr	r2, [r7, #8]
 8016468:	4413      	add	r3, r2
 801646a:	2280      	movs	r2, #128	@ 0x80
 801646c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    while (i < 112) ctx->buffer[i++] = 0x00;
 8016470:	e007      	b.n	8016482 <mg_sha384_final+0x40>
 8016472:	697b      	ldr	r3, [r7, #20]
 8016474:	1c5a      	adds	r2, r3, #1
 8016476:	617a      	str	r2, [r7, #20]
 8016478:	68ba      	ldr	r2, [r7, #8]
 801647a:	4413      	add	r3, r2
 801647c:	2200      	movs	r2, #0
 801647e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8016482:	697b      	ldr	r3, [r7, #20]
 8016484:	2b6f      	cmp	r3, #111	@ 0x6f
 8016486:	d9f4      	bls.n	8016472 <mg_sha384_final+0x30>
 8016488:	e020      	b.n	80164cc <mg_sha384_final+0x8a>
  } else {
    ctx->buffer[i++] = 0x80;
 801648a:	697b      	ldr	r3, [r7, #20]
 801648c:	1c5a      	adds	r2, r3, #1
 801648e:	617a      	str	r2, [r7, #20]
 8016490:	68ba      	ldr	r2, [r7, #8]
 8016492:	4413      	add	r3, r2
 8016494:	2280      	movs	r2, #128	@ 0x80
 8016496:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    while (i < 128) ctx->buffer[i++] = 0x00;
 801649a:	e007      	b.n	80164ac <mg_sha384_final+0x6a>
 801649c:	697b      	ldr	r3, [r7, #20]
 801649e:	1c5a      	adds	r2, r3, #1
 80164a0:	617a      	str	r2, [r7, #20]
 80164a2:	68ba      	ldr	r2, [r7, #8]
 80164a4:	4413      	add	r3, r2
 80164a6:	2200      	movs	r2, #0
 80164a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80164ac:	697b      	ldr	r3, [r7, #20]
 80164ae:	2b7f      	cmp	r3, #127	@ 0x7f
 80164b0:	d9f4      	bls.n	801649c <mg_sha384_final+0x5a>
    mg_sha384_transform(ctx, ctx->buffer);
 80164b2:	68bb      	ldr	r3, [r7, #8]
 80164b4:	3340      	adds	r3, #64	@ 0x40
 80164b6:	4619      	mov	r1, r3
 80164b8:	68b8      	ldr	r0, [r7, #8]
 80164ba:	f7ff f9df 	bl	801587c <mg_sha384_transform>
    memset(ctx->buffer, 0, 112);
 80164be:	68bb      	ldr	r3, [r7, #8]
 80164c0:	3340      	adds	r3, #64	@ 0x40
 80164c2:	2270      	movs	r2, #112	@ 0x70
 80164c4:	2100      	movs	r1, #0
 80164c6:	4618      	mov	r0, r3
 80164c8:	f011 f8fe 	bl	80276c8 <memset>
  }

  ctx->bitlen[1] += ctx->datalen * 8;
 80164cc:	68bb      	ldr	r3, [r7, #8]
 80164ce:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	@ 0xc8
 80164d2:	68b9      	ldr	r1, [r7, #8]
 80164d4:	f8d1 10d0 	ldr.w	r1, [r1, #208]	@ 0xd0
 80164d8:	00c9      	lsls	r1, r1, #3
 80164da:	2000      	movs	r0, #0
 80164dc:	4688      	mov	r8, r1
 80164de:	4681      	mov	r9, r0
 80164e0:	eb12 0108 	adds.w	r1, r2, r8
 80164e4:	6039      	str	r1, [r7, #0]
 80164e6:	eb43 0309 	adc.w	r3, r3, r9
 80164ea:	607b      	str	r3, [r7, #4]
 80164ec:	68bb      	ldr	r3, [r7, #8]
 80164ee:	e9d7 1200 	ldrd	r1, r2, [r7]
 80164f2:	e9c3 1232 	strd	r1, r2, [r3, #200]	@ 0xc8
  if (ctx->bitlen[1] < ctx->datalen * 8) ctx->bitlen[0]++;
 80164f6:	68bb      	ldr	r3, [r7, #8]
 80164f8:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	@ 0xc8
 80164fc:	68b9      	ldr	r1, [r7, #8]
 80164fe:	f8d1 10d0 	ldr.w	r1, [r1, #208]	@ 0xd0
 8016502:	00c9      	lsls	r1, r1, #3
 8016504:	2000      	movs	r0, #0
 8016506:	460c      	mov	r4, r1
 8016508:	4605      	mov	r5, r0
 801650a:	42a2      	cmp	r2, r4
 801650c:	41ab      	sbcs	r3, r5
 801650e:	d209      	bcs.n	8016524 <mg_sha384_final+0xe2>
 8016510:	68bb      	ldr	r3, [r7, #8]
 8016512:	e9d3 2330 	ldrd	r2, r3, [r3, #192]	@ 0xc0
 8016516:	f112 0a01 	adds.w	sl, r2, #1
 801651a:	f143 0b00 	adc.w	fp, r3, #0
 801651e:	68bb      	ldr	r3, [r7, #8]
 8016520:	e9c3 ab30 	strd	sl, fp, [r3, #192]	@ 0xc0
  ctx->buffer[127] = (uint8_t) (ctx->bitlen[1]);
 8016524:	68bb      	ldr	r3, [r7, #8]
 8016526:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	@ 0xc8
 801652a:	b2d2      	uxtb	r2, r2
 801652c:	68bb      	ldr	r3, [r7, #8]
 801652e:	f883 20bf 	strb.w	r2, [r3, #191]	@ 0xbf
  ctx->buffer[126] = (uint8_t) (ctx->bitlen[1] >> 8);
 8016532:	68bb      	ldr	r3, [r7, #8]
 8016534:	e9d3 0132 	ldrd	r0, r1, [r3, #200]	@ 0xc8
 8016538:	f04f 0200 	mov.w	r2, #0
 801653c:	f04f 0300 	mov.w	r3, #0
 8016540:	0a02      	lsrs	r2, r0, #8
 8016542:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8016546:	0a0b      	lsrs	r3, r1, #8
 8016548:	b2d2      	uxtb	r2, r2
 801654a:	68bb      	ldr	r3, [r7, #8]
 801654c:	f883 20be 	strb.w	r2, [r3, #190]	@ 0xbe
  ctx->buffer[125] = (uint8_t) (ctx->bitlen[1] >> 16);
 8016550:	68bb      	ldr	r3, [r7, #8]
 8016552:	e9d3 0132 	ldrd	r0, r1, [r3, #200]	@ 0xc8
 8016556:	f04f 0200 	mov.w	r2, #0
 801655a:	f04f 0300 	mov.w	r3, #0
 801655e:	0c02      	lsrs	r2, r0, #16
 8016560:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8016564:	0c0b      	lsrs	r3, r1, #16
 8016566:	b2d2      	uxtb	r2, r2
 8016568:	68bb      	ldr	r3, [r7, #8]
 801656a:	f883 20bd 	strb.w	r2, [r3, #189]	@ 0xbd
  ctx->buffer[124] = (uint8_t) (ctx->bitlen[1] >> 24);
 801656e:	68bb      	ldr	r3, [r7, #8]
 8016570:	e9d3 0132 	ldrd	r0, r1, [r3, #200]	@ 0xc8
 8016574:	f04f 0200 	mov.w	r2, #0
 8016578:	f04f 0300 	mov.w	r3, #0
 801657c:	0e02      	lsrs	r2, r0, #24
 801657e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8016582:	0e0b      	lsrs	r3, r1, #24
 8016584:	b2d2      	uxtb	r2, r2
 8016586:	68bb      	ldr	r3, [r7, #8]
 8016588:	f883 20bc 	strb.w	r2, [r3, #188]	@ 0xbc
  ctx->buffer[123] = (uint8_t) (ctx->bitlen[1] >> 32);
 801658c:	68bb      	ldr	r3, [r7, #8]
 801658e:	e9d3 0132 	ldrd	r0, r1, [r3, #200]	@ 0xc8
 8016592:	f04f 0200 	mov.w	r2, #0
 8016596:	f04f 0300 	mov.w	r3, #0
 801659a:	000a      	movs	r2, r1
 801659c:	2300      	movs	r3, #0
 801659e:	b2d2      	uxtb	r2, r2
 80165a0:	68bb      	ldr	r3, [r7, #8]
 80165a2:	f883 20bb 	strb.w	r2, [r3, #187]	@ 0xbb
  ctx->buffer[122] = (uint8_t) (ctx->bitlen[1] >> 40);
 80165a6:	68bb      	ldr	r3, [r7, #8]
 80165a8:	e9d3 0132 	ldrd	r0, r1, [r3, #200]	@ 0xc8
 80165ac:	f04f 0200 	mov.w	r2, #0
 80165b0:	f04f 0300 	mov.w	r3, #0
 80165b4:	0a0a      	lsrs	r2, r1, #8
 80165b6:	2300      	movs	r3, #0
 80165b8:	b2d2      	uxtb	r2, r2
 80165ba:	68bb      	ldr	r3, [r7, #8]
 80165bc:	f883 20ba 	strb.w	r2, [r3, #186]	@ 0xba
  ctx->buffer[121] = (uint8_t) (ctx->bitlen[1] >> 48);
 80165c0:	68bb      	ldr	r3, [r7, #8]
 80165c2:	e9d3 0132 	ldrd	r0, r1, [r3, #200]	@ 0xc8
 80165c6:	f04f 0200 	mov.w	r2, #0
 80165ca:	f04f 0300 	mov.w	r3, #0
 80165ce:	0c0a      	lsrs	r2, r1, #16
 80165d0:	2300      	movs	r3, #0
 80165d2:	b2d2      	uxtb	r2, r2
 80165d4:	68bb      	ldr	r3, [r7, #8]
 80165d6:	f883 20b9 	strb.w	r2, [r3, #185]	@ 0xb9
  ctx->buffer[120] = (uint8_t) (ctx->bitlen[1] >> 56);
 80165da:	68bb      	ldr	r3, [r7, #8]
 80165dc:	e9d3 0132 	ldrd	r0, r1, [r3, #200]	@ 0xc8
 80165e0:	f04f 0200 	mov.w	r2, #0
 80165e4:	f04f 0300 	mov.w	r3, #0
 80165e8:	0e0a      	lsrs	r2, r1, #24
 80165ea:	2300      	movs	r3, #0
 80165ec:	b2d2      	uxtb	r2, r2
 80165ee:	68bb      	ldr	r3, [r7, #8]
 80165f0:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
  ctx->buffer[119] = (uint8_t) (ctx->bitlen[0]);
 80165f4:	68bb      	ldr	r3, [r7, #8]
 80165f6:	e9d3 2330 	ldrd	r2, r3, [r3, #192]	@ 0xc0
 80165fa:	b2d2      	uxtb	r2, r2
 80165fc:	68bb      	ldr	r3, [r7, #8]
 80165fe:	f883 20b7 	strb.w	r2, [r3, #183]	@ 0xb7
  ctx->buffer[118] = (uint8_t) (ctx->bitlen[0] >> 8);
 8016602:	68bb      	ldr	r3, [r7, #8]
 8016604:	e9d3 0130 	ldrd	r0, r1, [r3, #192]	@ 0xc0
 8016608:	f04f 0200 	mov.w	r2, #0
 801660c:	f04f 0300 	mov.w	r3, #0
 8016610:	0a02      	lsrs	r2, r0, #8
 8016612:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8016616:	0a0b      	lsrs	r3, r1, #8
 8016618:	b2d2      	uxtb	r2, r2
 801661a:	68bb      	ldr	r3, [r7, #8]
 801661c:	f883 20b6 	strb.w	r2, [r3, #182]	@ 0xb6
  ctx->buffer[117] = (uint8_t) (ctx->bitlen[0] >> 16);
 8016620:	68bb      	ldr	r3, [r7, #8]
 8016622:	e9d3 0130 	ldrd	r0, r1, [r3, #192]	@ 0xc0
 8016626:	f04f 0200 	mov.w	r2, #0
 801662a:	f04f 0300 	mov.w	r3, #0
 801662e:	0c02      	lsrs	r2, r0, #16
 8016630:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8016634:	0c0b      	lsrs	r3, r1, #16
 8016636:	b2d2      	uxtb	r2, r2
 8016638:	68bb      	ldr	r3, [r7, #8]
 801663a:	f883 20b5 	strb.w	r2, [r3, #181]	@ 0xb5
  ctx->buffer[116] = (uint8_t) (ctx->bitlen[0] >> 24);
 801663e:	68bb      	ldr	r3, [r7, #8]
 8016640:	e9d3 0130 	ldrd	r0, r1, [r3, #192]	@ 0xc0
 8016644:	f04f 0200 	mov.w	r2, #0
 8016648:	f04f 0300 	mov.w	r3, #0
 801664c:	0e02      	lsrs	r2, r0, #24
 801664e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8016652:	0e0b      	lsrs	r3, r1, #24
 8016654:	b2d2      	uxtb	r2, r2
 8016656:	68bb      	ldr	r3, [r7, #8]
 8016658:	f883 20b4 	strb.w	r2, [r3, #180]	@ 0xb4
  ctx->buffer[115] = (uint8_t) (ctx->bitlen[0] >> 32);
 801665c:	68bb      	ldr	r3, [r7, #8]
 801665e:	e9d3 0130 	ldrd	r0, r1, [r3, #192]	@ 0xc0
 8016662:	f04f 0200 	mov.w	r2, #0
 8016666:	f04f 0300 	mov.w	r3, #0
 801666a:	000a      	movs	r2, r1
 801666c:	2300      	movs	r3, #0
 801666e:	b2d2      	uxtb	r2, r2
 8016670:	68bb      	ldr	r3, [r7, #8]
 8016672:	f883 20b3 	strb.w	r2, [r3, #179]	@ 0xb3
  ctx->buffer[114] = (uint8_t) (ctx->bitlen[0] >> 40);
 8016676:	68bb      	ldr	r3, [r7, #8]
 8016678:	e9d3 0130 	ldrd	r0, r1, [r3, #192]	@ 0xc0
 801667c:	f04f 0200 	mov.w	r2, #0
 8016680:	f04f 0300 	mov.w	r3, #0
 8016684:	0a0a      	lsrs	r2, r1, #8
 8016686:	2300      	movs	r3, #0
 8016688:	b2d2      	uxtb	r2, r2
 801668a:	68bb      	ldr	r3, [r7, #8]
 801668c:	f883 20b2 	strb.w	r2, [r3, #178]	@ 0xb2
  ctx->buffer[113] = (uint8_t) (ctx->bitlen[0] >> 48);
 8016690:	68bb      	ldr	r3, [r7, #8]
 8016692:	e9d3 0130 	ldrd	r0, r1, [r3, #192]	@ 0xc0
 8016696:	f04f 0200 	mov.w	r2, #0
 801669a:	f04f 0300 	mov.w	r3, #0
 801669e:	0c0a      	lsrs	r2, r1, #16
 80166a0:	2300      	movs	r3, #0
 80166a2:	b2d2      	uxtb	r2, r2
 80166a4:	68bb      	ldr	r3, [r7, #8]
 80166a6:	f883 20b1 	strb.w	r2, [r3, #177]	@ 0xb1
  ctx->buffer[112] = (uint8_t) (ctx->bitlen[0] >> 56);
 80166aa:	68bb      	ldr	r3, [r7, #8]
 80166ac:	e9d3 0130 	ldrd	r0, r1, [r3, #192]	@ 0xc0
 80166b0:	f04f 0200 	mov.w	r2, #0
 80166b4:	f04f 0300 	mov.w	r3, #0
 80166b8:	0e0a      	lsrs	r2, r1, #24
 80166ba:	2300      	movs	r3, #0
 80166bc:	b2d2      	uxtb	r2, r2
 80166be:	68bb      	ldr	r3, [r7, #8]
 80166c0:	f883 20b0 	strb.w	r2, [r3, #176]	@ 0xb0
  mg_sha384_transform(ctx, ctx->buffer);
 80166c4:	68bb      	ldr	r3, [r7, #8]
 80166c6:	3340      	adds	r3, #64	@ 0x40
 80166c8:	4619      	mov	r1, r3
 80166ca:	68b8      	ldr	r0, [r7, #8]
 80166cc:	f7ff f8d6 	bl	801587c <mg_sha384_transform>

  for (i = 0; i < 6; ++i) {
 80166d0:	2300      	movs	r3, #0
 80166d2:	617b      	str	r3, [r7, #20]
 80166d4:	e099      	b.n	801680a <mg_sha384_final+0x3c8>
    hash[i * 8] = (uint8_t) ((ctx->state[i] >> 56) & 0xff);
 80166d6:	68ba      	ldr	r2, [r7, #8]
 80166d8:	697b      	ldr	r3, [r7, #20]
 80166da:	00db      	lsls	r3, r3, #3
 80166dc:	4413      	add	r3, r2
 80166de:	e9d3 0100 	ldrd	r0, r1, [r3]
 80166e2:	f04f 0200 	mov.w	r2, #0
 80166e6:	f04f 0300 	mov.w	r3, #0
 80166ea:	0e0a      	lsrs	r2, r1, #24
 80166ec:	2300      	movs	r3, #0
 80166ee:	6979      	ldr	r1, [r7, #20]
 80166f0:	00c9      	lsls	r1, r1, #3
 80166f2:	68f8      	ldr	r0, [r7, #12]
 80166f4:	4401      	add	r1, r0
 80166f6:	b2d3      	uxtb	r3, r2
 80166f8:	700b      	strb	r3, [r1, #0]
    hash[i * 8 + 1] = (uint8_t) ((ctx->state[i] >> 48) & 0xff);
 80166fa:	68ba      	ldr	r2, [r7, #8]
 80166fc:	697b      	ldr	r3, [r7, #20]
 80166fe:	00db      	lsls	r3, r3, #3
 8016700:	4413      	add	r3, r2
 8016702:	e9d3 0100 	ldrd	r0, r1, [r3]
 8016706:	f04f 0200 	mov.w	r2, #0
 801670a:	f04f 0300 	mov.w	r3, #0
 801670e:	0c0a      	lsrs	r2, r1, #16
 8016710:	2300      	movs	r3, #0
 8016712:	6979      	ldr	r1, [r7, #20]
 8016714:	00c9      	lsls	r1, r1, #3
 8016716:	3101      	adds	r1, #1
 8016718:	68f8      	ldr	r0, [r7, #12]
 801671a:	4401      	add	r1, r0
 801671c:	b2d3      	uxtb	r3, r2
 801671e:	700b      	strb	r3, [r1, #0]
    hash[i * 8 + 2] = (uint8_t) ((ctx->state[i] >> 40) & 0xff);
 8016720:	68ba      	ldr	r2, [r7, #8]
 8016722:	697b      	ldr	r3, [r7, #20]
 8016724:	00db      	lsls	r3, r3, #3
 8016726:	4413      	add	r3, r2
 8016728:	e9d3 0100 	ldrd	r0, r1, [r3]
 801672c:	f04f 0200 	mov.w	r2, #0
 8016730:	f04f 0300 	mov.w	r3, #0
 8016734:	0a0a      	lsrs	r2, r1, #8
 8016736:	2300      	movs	r3, #0
 8016738:	6979      	ldr	r1, [r7, #20]
 801673a:	00c9      	lsls	r1, r1, #3
 801673c:	3102      	adds	r1, #2
 801673e:	68f8      	ldr	r0, [r7, #12]
 8016740:	4401      	add	r1, r0
 8016742:	b2d3      	uxtb	r3, r2
 8016744:	700b      	strb	r3, [r1, #0]
    hash[i * 8 + 3] = (uint8_t) ((ctx->state[i] >> 32) & 0xff);
 8016746:	68ba      	ldr	r2, [r7, #8]
 8016748:	697b      	ldr	r3, [r7, #20]
 801674a:	00db      	lsls	r3, r3, #3
 801674c:	4413      	add	r3, r2
 801674e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8016752:	f04f 0200 	mov.w	r2, #0
 8016756:	f04f 0300 	mov.w	r3, #0
 801675a:	000a      	movs	r2, r1
 801675c:	2300      	movs	r3, #0
 801675e:	6979      	ldr	r1, [r7, #20]
 8016760:	00c9      	lsls	r1, r1, #3
 8016762:	3103      	adds	r1, #3
 8016764:	68f8      	ldr	r0, [r7, #12]
 8016766:	4401      	add	r1, r0
 8016768:	b2d3      	uxtb	r3, r2
 801676a:	700b      	strb	r3, [r1, #0]
    hash[i * 8 + 4] = (uint8_t) ((ctx->state[i] >> 24) & 0xff);
 801676c:	68ba      	ldr	r2, [r7, #8]
 801676e:	697b      	ldr	r3, [r7, #20]
 8016770:	00db      	lsls	r3, r3, #3
 8016772:	4413      	add	r3, r2
 8016774:	e9d3 0100 	ldrd	r0, r1, [r3]
 8016778:	f04f 0200 	mov.w	r2, #0
 801677c:	f04f 0300 	mov.w	r3, #0
 8016780:	0e02      	lsrs	r2, r0, #24
 8016782:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8016786:	0e0b      	lsrs	r3, r1, #24
 8016788:	6979      	ldr	r1, [r7, #20]
 801678a:	00c9      	lsls	r1, r1, #3
 801678c:	3104      	adds	r1, #4
 801678e:	68f8      	ldr	r0, [r7, #12]
 8016790:	4401      	add	r1, r0
 8016792:	b2d3      	uxtb	r3, r2
 8016794:	700b      	strb	r3, [r1, #0]
    hash[i * 8 + 5] = (uint8_t) ((ctx->state[i] >> 16) & 0xff);
 8016796:	68ba      	ldr	r2, [r7, #8]
 8016798:	697b      	ldr	r3, [r7, #20]
 801679a:	00db      	lsls	r3, r3, #3
 801679c:	4413      	add	r3, r2
 801679e:	e9d3 0100 	ldrd	r0, r1, [r3]
 80167a2:	f04f 0200 	mov.w	r2, #0
 80167a6:	f04f 0300 	mov.w	r3, #0
 80167aa:	0c02      	lsrs	r2, r0, #16
 80167ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80167b0:	0c0b      	lsrs	r3, r1, #16
 80167b2:	6979      	ldr	r1, [r7, #20]
 80167b4:	00c9      	lsls	r1, r1, #3
 80167b6:	3105      	adds	r1, #5
 80167b8:	68f8      	ldr	r0, [r7, #12]
 80167ba:	4401      	add	r1, r0
 80167bc:	b2d3      	uxtb	r3, r2
 80167be:	700b      	strb	r3, [r1, #0]
    hash[i * 8 + 6] = (uint8_t) ((ctx->state[i] >> 8) & 0xff);
 80167c0:	68ba      	ldr	r2, [r7, #8]
 80167c2:	697b      	ldr	r3, [r7, #20]
 80167c4:	00db      	lsls	r3, r3, #3
 80167c6:	4413      	add	r3, r2
 80167c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80167cc:	f04f 0200 	mov.w	r2, #0
 80167d0:	f04f 0300 	mov.w	r3, #0
 80167d4:	0a02      	lsrs	r2, r0, #8
 80167d6:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80167da:	0a0b      	lsrs	r3, r1, #8
 80167dc:	6979      	ldr	r1, [r7, #20]
 80167de:	00c9      	lsls	r1, r1, #3
 80167e0:	3106      	adds	r1, #6
 80167e2:	68f8      	ldr	r0, [r7, #12]
 80167e4:	4401      	add	r1, r0
 80167e6:	b2d3      	uxtb	r3, r2
 80167e8:	700b      	strb	r3, [r1, #0]
    hash[i * 8 + 7] = (uint8_t) (ctx->state[i] & 0xff);
 80167ea:	68ba      	ldr	r2, [r7, #8]
 80167ec:	697b      	ldr	r3, [r7, #20]
 80167ee:	00db      	lsls	r3, r3, #3
 80167f0:	4413      	add	r3, r2
 80167f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80167f6:	6979      	ldr	r1, [r7, #20]
 80167f8:	00c9      	lsls	r1, r1, #3
 80167fa:	3107      	adds	r1, #7
 80167fc:	68f8      	ldr	r0, [r7, #12]
 80167fe:	4401      	add	r1, r0
 8016800:	b2d3      	uxtb	r3, r2
 8016802:	700b      	strb	r3, [r1, #0]
  for (i = 0; i < 6; ++i) {
 8016804:	697b      	ldr	r3, [r7, #20]
 8016806:	3301      	adds	r3, #1
 8016808:	617b      	str	r3, [r7, #20]
 801680a:	697b      	ldr	r3, [r7, #20]
 801680c:	2b05      	cmp	r3, #5
 801680e:	f67f af62 	bls.w	80166d6 <mg_sha384_final+0x294>
  }
}
 8016812:	bf00      	nop
 8016814:	bf00      	nop
 8016816:	3718      	adds	r7, #24
 8016818:	46bd      	mov	sp, r7
 801681a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0801681e <mg_sha384>:

void mg_sha384(uint8_t dst[48], uint8_t *data, size_t datasz) {
 801681e:	b580      	push	{r7, lr}
 8016820:	b0ba      	sub	sp, #232	@ 0xe8
 8016822:	af00      	add	r7, sp, #0
 8016824:	60f8      	str	r0, [r7, #12]
 8016826:	60b9      	str	r1, [r7, #8]
 8016828:	607a      	str	r2, [r7, #4]
  mg_sha384_ctx ctx;
  mg_sha384_init(&ctx);
 801682a:	f107 0310 	add.w	r3, r7, #16
 801682e:	4618      	mov	r0, r3
 8016830:	f7ff fd46 	bl	80162c0 <mg_sha384_init>
  mg_sha384_update(&ctx, data, datasz);
 8016834:	f107 0310 	add.w	r3, r7, #16
 8016838:	687a      	ldr	r2, [r7, #4]
 801683a:	68b9      	ldr	r1, [r7, #8]
 801683c:	4618      	mov	r0, r3
 801683e:	f7ff fdab 	bl	8016398 <mg_sha384_update>
  mg_sha384_final(dst, &ctx);
 8016842:	f107 0310 	add.w	r3, r7, #16
 8016846:	4619      	mov	r1, r3
 8016848:	68f8      	ldr	r0, [r7, #12]
 801684a:	f7ff fdfa 	bl	8016442 <mg_sha384_final>
}
 801684e:	bf00      	nop
 8016850:	37e8      	adds	r7, #232	@ 0xe8
 8016852:	46bd      	mov	sp, r7
 8016854:	bd80      	pop	{r7, pc}
	...

08016858 <mg_now>:
#define SNTP_TIME_OFFSET 2208988800U  // (1970 - 1900) in seconds
#define SNTP_MAX_FRAC 4294967295.0    // 2 ** 32 - 1

static uint64_t s_boot_timestamp = 0;  // Updated by SNTP

uint64_t mg_now(void) {
 8016858:	b5b0      	push	{r4, r5, r7, lr}
 801685a:	af00      	add	r7, sp, #0
  return mg_millis() + s_boot_timestamp;
 801685c:	f7ea f978 	bl	8000b50 <mg_millis>
 8016860:	4b05      	ldr	r3, [pc, #20]	@ (8016878 <mg_now+0x20>)
 8016862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016866:	1884      	adds	r4, r0, r2
 8016868:	eb41 0503 	adc.w	r5, r1, r3
 801686c:	4622      	mov	r2, r4
 801686e:	462b      	mov	r3, r5
}
 8016870:	4610      	mov	r0, r2
 8016872:	4619      	mov	r1, r3
 8016874:	bdb0      	pop	{r4, r5, r7, pc}
 8016876:	bf00      	nop
 8016878:	24002368 	.word	0x24002368

0801687c <mg_http_serve_ssi>:
  mg_http_reply(c, 200, headers, "%s", data == NULL ? "" : data);
  free(data);
}
#else
void mg_http_serve_ssi(struct mg_connection *c, const char *root,
                       const char *fullpath) {
 801687c:	b580      	push	{r7, lr}
 801687e:	b084      	sub	sp, #16
 8016880:	af00      	add	r7, sp, #0
 8016882:	60f8      	str	r0, [r7, #12]
 8016884:	60b9      	str	r1, [r7, #8]
 8016886:	607a      	str	r2, [r7, #4]
  mg_http_reply(c, 501, NULL, "SSI not enabled");
 8016888:	4b05      	ldr	r3, [pc, #20]	@ (80168a0 <mg_http_serve_ssi+0x24>)
 801688a:	2200      	movs	r2, #0
 801688c:	f240 11f5 	movw	r1, #501	@ 0x1f5
 8016890:	68f8      	ldr	r0, [r7, #12]
 8016892:	f7f5 f90f 	bl	800bab4 <mg_http_reply>
  (void) root, (void) fullpath;
}
 8016896:	bf00      	nop
 8016898:	3710      	adds	r7, #16
 801689a:	46bd      	mov	sp, r7
 801689c:	bd80      	pop	{r7, pc}
 801689e:	bf00      	nop
 80168a0:	0802b5e8 	.word	0x0802b5e8

080168a4 <mg_str_s>:
#ifdef MG_ENABLE_LINES
#line 1 "src/str.c"
#endif


struct mg_str mg_str_s(const char *s) {
 80168a4:	b580      	push	{r7, lr}
 80168a6:	b084      	sub	sp, #16
 80168a8:	af00      	add	r7, sp, #0
 80168aa:	6078      	str	r0, [r7, #4]
 80168ac:	6039      	str	r1, [r7, #0]
  struct mg_str str = {(char *) s, s == NULL ? 0 : strlen(s)};
 80168ae:	683b      	ldr	r3, [r7, #0]
 80168b0:	60bb      	str	r3, [r7, #8]
 80168b2:	683b      	ldr	r3, [r7, #0]
 80168b4:	2b00      	cmp	r3, #0
 80168b6:	d004      	beq.n	80168c2 <mg_str_s+0x1e>
 80168b8:	6838      	ldr	r0, [r7, #0]
 80168ba:	f7e9 fd89 	bl	80003d0 <strlen>
 80168be:	4603      	mov	r3, r0
 80168c0:	e000      	b.n	80168c4 <mg_str_s+0x20>
 80168c2:	2300      	movs	r3, #0
 80168c4:	60fb      	str	r3, [r7, #12]
  return str;
 80168c6:	687b      	ldr	r3, [r7, #4]
 80168c8:	461a      	mov	r2, r3
 80168ca:	f107 0308 	add.w	r3, r7, #8
 80168ce:	e893 0003 	ldmia.w	r3, {r0, r1}
 80168d2:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80168d6:	6878      	ldr	r0, [r7, #4]
 80168d8:	3710      	adds	r7, #16
 80168da:	46bd      	mov	sp, r7
 80168dc:	bd80      	pop	{r7, pc}

080168de <mg_str_n>:

struct mg_str mg_str_n(const char *s, size_t n) {
 80168de:	b480      	push	{r7}
 80168e0:	b087      	sub	sp, #28
 80168e2:	af00      	add	r7, sp, #0
 80168e4:	60f8      	str	r0, [r7, #12]
 80168e6:	60b9      	str	r1, [r7, #8]
 80168e8:	607a      	str	r2, [r7, #4]
  struct mg_str str = {(char *) s, n};
 80168ea:	68bb      	ldr	r3, [r7, #8]
 80168ec:	613b      	str	r3, [r7, #16]
 80168ee:	687b      	ldr	r3, [r7, #4]
 80168f0:	617b      	str	r3, [r7, #20]
  return str;
 80168f2:	68fb      	ldr	r3, [r7, #12]
 80168f4:	461a      	mov	r2, r3
 80168f6:	f107 0310 	add.w	r3, r7, #16
 80168fa:	e893 0003 	ldmia.w	r3, {r0, r1}
 80168fe:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8016902:	68f8      	ldr	r0, [r7, #12]
 8016904:	371c      	adds	r7, #28
 8016906:	46bd      	mov	sp, r7
 8016908:	f85d 7b04 	ldr.w	r7, [sp], #4
 801690c:	4770      	bx	lr

0801690e <mg_tolc>:

static int mg_tolc(char c) {
 801690e:	b480      	push	{r7}
 8016910:	b083      	sub	sp, #12
 8016912:	af00      	add	r7, sp, #0
 8016914:	4603      	mov	r3, r0
 8016916:	71fb      	strb	r3, [r7, #7]
  return (c >= 'A' && c <= 'Z') ? c + 'a' - 'A' : c;
 8016918:	79fb      	ldrb	r3, [r7, #7]
 801691a:	2b40      	cmp	r3, #64	@ 0x40
 801691c:	d905      	bls.n	801692a <mg_tolc+0x1c>
 801691e:	79fb      	ldrb	r3, [r7, #7]
 8016920:	2b5a      	cmp	r3, #90	@ 0x5a
 8016922:	d802      	bhi.n	801692a <mg_tolc+0x1c>
 8016924:	79fb      	ldrb	r3, [r7, #7]
 8016926:	3320      	adds	r3, #32
 8016928:	e000      	b.n	801692c <mg_tolc+0x1e>
 801692a:	79fb      	ldrb	r3, [r7, #7]
}
 801692c:	4618      	mov	r0, r3
 801692e:	370c      	adds	r7, #12
 8016930:	46bd      	mov	sp, r7
 8016932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016936:	4770      	bx	lr

08016938 <mg_strdup>:
    diff = c - d;
  } while (diff == 0 && s1[-1] != '\0');
  return diff;
}

struct mg_str mg_strdup(const struct mg_str s) {
 8016938:	b580      	push	{r7, lr}
 801693a:	b088      	sub	sp, #32
 801693c:	af00      	add	r7, sp, #0
 801693e:	60f8      	str	r0, [r7, #12]
 8016940:	1d3b      	adds	r3, r7, #4
 8016942:	e883 0006 	stmia.w	r3, {r1, r2}
  struct mg_str r = {NULL, 0};
 8016946:	2300      	movs	r3, #0
 8016948:	617b      	str	r3, [r7, #20]
 801694a:	2300      	movs	r3, #0
 801694c:	61bb      	str	r3, [r7, #24]
  if (s.len > 0 && s.buf != NULL) {
 801694e:	68bb      	ldr	r3, [r7, #8]
 8016950:	2b00      	cmp	r3, #0
 8016952:	d01c      	beq.n	801698e <mg_strdup+0x56>
 8016954:	687b      	ldr	r3, [r7, #4]
 8016956:	2b00      	cmp	r3, #0
 8016958:	d019      	beq.n	801698e <mg_strdup+0x56>
    char *sc = (char *) calloc(1, s.len + 1);
 801695a:	68bb      	ldr	r3, [r7, #8]
 801695c:	3301      	adds	r3, #1
 801695e:	4619      	mov	r1, r3
 8016960:	2001      	movs	r0, #1
 8016962:	f00f f803 	bl	802596c <calloc>
 8016966:	4603      	mov	r3, r0
 8016968:	61fb      	str	r3, [r7, #28]
    if (sc != NULL) {
 801696a:	69fb      	ldr	r3, [r7, #28]
 801696c:	2b00      	cmp	r3, #0
 801696e:	d00e      	beq.n	801698e <mg_strdup+0x56>
      memcpy(sc, s.buf, s.len);
 8016970:	687b      	ldr	r3, [r7, #4]
 8016972:	68ba      	ldr	r2, [r7, #8]
 8016974:	4619      	mov	r1, r3
 8016976:	69f8      	ldr	r0, [r7, #28]
 8016978:	f010 ffdf 	bl	802793a <memcpy>
      sc[s.len] = '\0';
 801697c:	68bb      	ldr	r3, [r7, #8]
 801697e:	69fa      	ldr	r2, [r7, #28]
 8016980:	4413      	add	r3, r2
 8016982:	2200      	movs	r2, #0
 8016984:	701a      	strb	r2, [r3, #0]
      r.buf = sc;
 8016986:	69fb      	ldr	r3, [r7, #28]
 8016988:	617b      	str	r3, [r7, #20]
      r.len = s.len;
 801698a:	68bb      	ldr	r3, [r7, #8]
 801698c:	61bb      	str	r3, [r7, #24]
    }
  }
  return r;
 801698e:	68fb      	ldr	r3, [r7, #12]
 8016990:	461a      	mov	r2, r3
 8016992:	f107 0314 	add.w	r3, r7, #20
 8016996:	e893 0003 	ldmia.w	r3, {r0, r1}
 801699a:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801699e:	68f8      	ldr	r0, [r7, #12]
 80169a0:	3720      	adds	r7, #32
 80169a2:	46bd      	mov	sp, r7
 80169a4:	bd80      	pop	{r7, pc}

080169a6 <mg_strcmp>:

int mg_strcmp(const struct mg_str str1, const struct mg_str str2) {
 80169a6:	b490      	push	{r4, r7}
 80169a8:	b088      	sub	sp, #32
 80169aa:	af00      	add	r7, sp, #0
 80169ac:	f107 0408 	add.w	r4, r7, #8
 80169b0:	e884 0003 	stmia.w	r4, {r0, r1}
 80169b4:	4639      	mov	r1, r7
 80169b6:	e881 000c 	stmia.w	r1, {r2, r3}
  size_t i = 0;
 80169ba:	2300      	movs	r3, #0
 80169bc:	61fb      	str	r3, [r7, #28]
  while (i < str1.len && i < str2.len) {
 80169be:	e019      	b.n	80169f4 <mg_strcmp+0x4e>
    int c1 = str1.buf[i];
 80169c0:	68ba      	ldr	r2, [r7, #8]
 80169c2:	69fb      	ldr	r3, [r7, #28]
 80169c4:	4413      	add	r3, r2
 80169c6:	781b      	ldrb	r3, [r3, #0]
 80169c8:	61bb      	str	r3, [r7, #24]
    int c2 = str2.buf[i];
 80169ca:	683a      	ldr	r2, [r7, #0]
 80169cc:	69fb      	ldr	r3, [r7, #28]
 80169ce:	4413      	add	r3, r2
 80169d0:	781b      	ldrb	r3, [r3, #0]
 80169d2:	617b      	str	r3, [r7, #20]
    if (c1 < c2) return -1;
 80169d4:	69ba      	ldr	r2, [r7, #24]
 80169d6:	697b      	ldr	r3, [r7, #20]
 80169d8:	429a      	cmp	r2, r3
 80169da:	da02      	bge.n	80169e2 <mg_strcmp+0x3c>
 80169dc:	f04f 33ff 	mov.w	r3, #4294967295
 80169e0:	e01e      	b.n	8016a20 <mg_strcmp+0x7a>
    if (c1 > c2) return 1;
 80169e2:	69ba      	ldr	r2, [r7, #24]
 80169e4:	697b      	ldr	r3, [r7, #20]
 80169e6:	429a      	cmp	r2, r3
 80169e8:	dd01      	ble.n	80169ee <mg_strcmp+0x48>
 80169ea:	2301      	movs	r3, #1
 80169ec:	e018      	b.n	8016a20 <mg_strcmp+0x7a>
    i++;
 80169ee:	69fb      	ldr	r3, [r7, #28]
 80169f0:	3301      	adds	r3, #1
 80169f2:	61fb      	str	r3, [r7, #28]
  while (i < str1.len && i < str2.len) {
 80169f4:	68fb      	ldr	r3, [r7, #12]
 80169f6:	69fa      	ldr	r2, [r7, #28]
 80169f8:	429a      	cmp	r2, r3
 80169fa:	d203      	bcs.n	8016a04 <mg_strcmp+0x5e>
 80169fc:	687b      	ldr	r3, [r7, #4]
 80169fe:	69fa      	ldr	r2, [r7, #28]
 8016a00:	429a      	cmp	r2, r3
 8016a02:	d3dd      	bcc.n	80169c0 <mg_strcmp+0x1a>
  }
  if (i < str1.len) return 1;
 8016a04:	68fb      	ldr	r3, [r7, #12]
 8016a06:	69fa      	ldr	r2, [r7, #28]
 8016a08:	429a      	cmp	r2, r3
 8016a0a:	d201      	bcs.n	8016a10 <mg_strcmp+0x6a>
 8016a0c:	2301      	movs	r3, #1
 8016a0e:	e007      	b.n	8016a20 <mg_strcmp+0x7a>
  if (i < str2.len) return -1;
 8016a10:	687b      	ldr	r3, [r7, #4]
 8016a12:	69fa      	ldr	r2, [r7, #28]
 8016a14:	429a      	cmp	r2, r3
 8016a16:	d202      	bcs.n	8016a1e <mg_strcmp+0x78>
 8016a18:	f04f 33ff 	mov.w	r3, #4294967295
 8016a1c:	e000      	b.n	8016a20 <mg_strcmp+0x7a>
  return 0;
 8016a1e:	2300      	movs	r3, #0
}
 8016a20:	4618      	mov	r0, r3
 8016a22:	3720      	adds	r7, #32
 8016a24:	46bd      	mov	sp, r7
 8016a26:	bc90      	pop	{r4, r7}
 8016a28:	4770      	bx	lr

08016a2a <mg_strcasecmp>:

int mg_strcasecmp(const struct mg_str str1, const struct mg_str str2) {
 8016a2a:	b590      	push	{r4, r7, lr}
 8016a2c:	b089      	sub	sp, #36	@ 0x24
 8016a2e:	af00      	add	r7, sp, #0
 8016a30:	f107 0408 	add.w	r4, r7, #8
 8016a34:	e884 0003 	stmia.w	r4, {r0, r1}
 8016a38:	4639      	mov	r1, r7
 8016a3a:	e881 000c 	stmia.w	r1, {r2, r3}
  size_t i = 0;
 8016a3e:	2300      	movs	r3, #0
 8016a40:	61fb      	str	r3, [r7, #28]
  while (i < str1.len && i < str2.len) {
 8016a42:	e01f      	b.n	8016a84 <mg_strcasecmp+0x5a>
    int c1 = mg_tolc(str1.buf[i]);
 8016a44:	68ba      	ldr	r2, [r7, #8]
 8016a46:	69fb      	ldr	r3, [r7, #28]
 8016a48:	4413      	add	r3, r2
 8016a4a:	781b      	ldrb	r3, [r3, #0]
 8016a4c:	4618      	mov	r0, r3
 8016a4e:	f7ff ff5e 	bl	801690e <mg_tolc>
 8016a52:	61b8      	str	r0, [r7, #24]
    int c2 = mg_tolc(str2.buf[i]);
 8016a54:	683a      	ldr	r2, [r7, #0]
 8016a56:	69fb      	ldr	r3, [r7, #28]
 8016a58:	4413      	add	r3, r2
 8016a5a:	781b      	ldrb	r3, [r3, #0]
 8016a5c:	4618      	mov	r0, r3
 8016a5e:	f7ff ff56 	bl	801690e <mg_tolc>
 8016a62:	6178      	str	r0, [r7, #20]
    if (c1 < c2) return -1;
 8016a64:	69ba      	ldr	r2, [r7, #24]
 8016a66:	697b      	ldr	r3, [r7, #20]
 8016a68:	429a      	cmp	r2, r3
 8016a6a:	da02      	bge.n	8016a72 <mg_strcasecmp+0x48>
 8016a6c:	f04f 33ff 	mov.w	r3, #4294967295
 8016a70:	e01e      	b.n	8016ab0 <mg_strcasecmp+0x86>
    if (c1 > c2) return 1;
 8016a72:	69ba      	ldr	r2, [r7, #24]
 8016a74:	697b      	ldr	r3, [r7, #20]
 8016a76:	429a      	cmp	r2, r3
 8016a78:	dd01      	ble.n	8016a7e <mg_strcasecmp+0x54>
 8016a7a:	2301      	movs	r3, #1
 8016a7c:	e018      	b.n	8016ab0 <mg_strcasecmp+0x86>
    i++;
 8016a7e:	69fb      	ldr	r3, [r7, #28]
 8016a80:	3301      	adds	r3, #1
 8016a82:	61fb      	str	r3, [r7, #28]
  while (i < str1.len && i < str2.len) {
 8016a84:	68fb      	ldr	r3, [r7, #12]
 8016a86:	69fa      	ldr	r2, [r7, #28]
 8016a88:	429a      	cmp	r2, r3
 8016a8a:	d203      	bcs.n	8016a94 <mg_strcasecmp+0x6a>
 8016a8c:	687b      	ldr	r3, [r7, #4]
 8016a8e:	69fa      	ldr	r2, [r7, #28]
 8016a90:	429a      	cmp	r2, r3
 8016a92:	d3d7      	bcc.n	8016a44 <mg_strcasecmp+0x1a>
  }
  if (i < str1.len) return 1;
 8016a94:	68fb      	ldr	r3, [r7, #12]
 8016a96:	69fa      	ldr	r2, [r7, #28]
 8016a98:	429a      	cmp	r2, r3
 8016a9a:	d201      	bcs.n	8016aa0 <mg_strcasecmp+0x76>
 8016a9c:	2301      	movs	r3, #1
 8016a9e:	e007      	b.n	8016ab0 <mg_strcasecmp+0x86>
  if (i < str2.len) return -1;
 8016aa0:	687b      	ldr	r3, [r7, #4]
 8016aa2:	69fa      	ldr	r2, [r7, #28]
 8016aa4:	429a      	cmp	r2, r3
 8016aa6:	d202      	bcs.n	8016aae <mg_strcasecmp+0x84>
 8016aa8:	f04f 33ff 	mov.w	r3, #4294967295
 8016aac:	e000      	b.n	8016ab0 <mg_strcasecmp+0x86>
  return 0;
 8016aae:	2300      	movs	r3, #0
}
 8016ab0:	4618      	mov	r0, r3
 8016ab2:	3724      	adds	r7, #36	@ 0x24
 8016ab4:	46bd      	mov	sp, r7
 8016ab6:	bd90      	pop	{r4, r7, pc}

08016ab8 <mg_match>:

bool mg_match(struct mg_str s, struct mg_str p, struct mg_str *caps) {
 8016ab8:	b490      	push	{r4, r7}
 8016aba:	b088      	sub	sp, #32
 8016abc:	af00      	add	r7, sp, #0
 8016abe:	f107 0408 	add.w	r4, r7, #8
 8016ac2:	e884 0003 	stmia.w	r4, {r0, r1}
 8016ac6:	4639      	mov	r1, r7
 8016ac8:	e881 000c 	stmia.w	r1, {r2, r3}
  size_t i = 0, j = 0, ni = 0, nj = 0;
 8016acc:	2300      	movs	r3, #0
 8016ace:	61fb      	str	r3, [r7, #28]
 8016ad0:	2300      	movs	r3, #0
 8016ad2:	61bb      	str	r3, [r7, #24]
 8016ad4:	2300      	movs	r3, #0
 8016ad6:	617b      	str	r3, [r7, #20]
 8016ad8:	2300      	movs	r3, #0
 8016ada:	613b      	str	r3, [r7, #16]
  if (caps) caps->buf = NULL, caps->len = 0;
 8016adc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016ade:	2b00      	cmp	r3, #0
 8016ae0:	f000 80ba 	beq.w	8016c58 <mg_match+0x1a0>
 8016ae4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016ae6:	2200      	movs	r2, #0
 8016ae8:	601a      	str	r2, [r3, #0]
 8016aea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016aec:	2200      	movs	r2, #0
 8016aee:	605a      	str	r2, [r3, #4]
  while (i < p.len || j < s.len) {
 8016af0:	e0b2      	b.n	8016c58 <mg_match+0x1a0>
    if (i < p.len && j < s.len &&
 8016af2:	687b      	ldr	r3, [r7, #4]
 8016af4:	69fa      	ldr	r2, [r7, #28]
 8016af6:	429a      	cmp	r2, r3
 8016af8:	d25b      	bcs.n	8016bb2 <mg_match+0xfa>
 8016afa:	68fb      	ldr	r3, [r7, #12]
 8016afc:	69ba      	ldr	r2, [r7, #24]
 8016afe:	429a      	cmp	r2, r3
 8016b00:	d257      	bcs.n	8016bb2 <mg_match+0xfa>
        (p.buf[i] == '?' ||
 8016b02:	683a      	ldr	r2, [r7, #0]
 8016b04:	69fb      	ldr	r3, [r7, #28]
 8016b06:	4413      	add	r3, r2
 8016b08:	781b      	ldrb	r3, [r3, #0]
    if (i < p.len && j < s.len &&
 8016b0a:	2b3f      	cmp	r3, #63	@ 0x3f
 8016b0c:	d015      	beq.n	8016b3a <mg_match+0x82>
         (p.buf[i] != '*' && p.buf[i] != '#' && s.buf[j] == p.buf[i]))) {
 8016b0e:	683a      	ldr	r2, [r7, #0]
 8016b10:	69fb      	ldr	r3, [r7, #28]
 8016b12:	4413      	add	r3, r2
 8016b14:	781b      	ldrb	r3, [r3, #0]
        (p.buf[i] == '?' ||
 8016b16:	2b2a      	cmp	r3, #42	@ 0x2a
 8016b18:	d04b      	beq.n	8016bb2 <mg_match+0xfa>
         (p.buf[i] != '*' && p.buf[i] != '#' && s.buf[j] == p.buf[i]))) {
 8016b1a:	683a      	ldr	r2, [r7, #0]
 8016b1c:	69fb      	ldr	r3, [r7, #28]
 8016b1e:	4413      	add	r3, r2
 8016b20:	781b      	ldrb	r3, [r3, #0]
 8016b22:	2b23      	cmp	r3, #35	@ 0x23
 8016b24:	d045      	beq.n	8016bb2 <mg_match+0xfa>
 8016b26:	68ba      	ldr	r2, [r7, #8]
 8016b28:	69bb      	ldr	r3, [r7, #24]
 8016b2a:	4413      	add	r3, r2
 8016b2c:	781a      	ldrb	r2, [r3, #0]
 8016b2e:	6839      	ldr	r1, [r7, #0]
 8016b30:	69fb      	ldr	r3, [r7, #28]
 8016b32:	440b      	add	r3, r1
 8016b34:	781b      	ldrb	r3, [r3, #0]
 8016b36:	429a      	cmp	r2, r3
 8016b38:	d13b      	bne.n	8016bb2 <mg_match+0xfa>
      if (caps == NULL) {
 8016b3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016b3c:	2b00      	cmp	r3, #0
 8016b3e:	d031      	beq.n	8016ba4 <mg_match+0xec>
      } else if (p.buf[i] == '?') {
 8016b40:	683a      	ldr	r2, [r7, #0]
 8016b42:	69fb      	ldr	r3, [r7, #28]
 8016b44:	4413      	add	r3, r2
 8016b46:	781b      	ldrb	r3, [r3, #0]
 8016b48:	2b3f      	cmp	r3, #63	@ 0x3f
 8016b4a:	d111      	bne.n	8016b70 <mg_match+0xb8>
        caps->buf = &s.buf[j], caps->len = 1;     // Finalize `?` cap
 8016b4c:	68ba      	ldr	r2, [r7, #8]
 8016b4e:	69bb      	ldr	r3, [r7, #24]
 8016b50:	441a      	add	r2, r3
 8016b52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016b54:	601a      	str	r2, [r3, #0]
 8016b56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016b58:	2201      	movs	r2, #1
 8016b5a:	605a      	str	r2, [r3, #4]
        caps++, caps->buf = NULL, caps->len = 0;  // Init next cap
 8016b5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016b5e:	3308      	adds	r3, #8
 8016b60:	62bb      	str	r3, [r7, #40]	@ 0x28
 8016b62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016b64:	2200      	movs	r2, #0
 8016b66:	601a      	str	r2, [r3, #0]
 8016b68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016b6a:	2200      	movs	r2, #0
 8016b6c:	605a      	str	r2, [r3, #4]
 8016b6e:	e019      	b.n	8016ba4 <mg_match+0xec>
      } else if (caps->buf != NULL && caps->len == 0) {
 8016b70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016b72:	681b      	ldr	r3, [r3, #0]
 8016b74:	2b00      	cmp	r3, #0
 8016b76:	d015      	beq.n	8016ba4 <mg_match+0xec>
 8016b78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016b7a:	685b      	ldr	r3, [r3, #4]
 8016b7c:	2b00      	cmp	r3, #0
 8016b7e:	d111      	bne.n	8016ba4 <mg_match+0xec>
        caps->len = (size_t) (&s.buf[j] - caps->buf);  // Finalize current cap
 8016b80:	68ba      	ldr	r2, [r7, #8]
 8016b82:	69bb      	ldr	r3, [r7, #24]
 8016b84:	441a      	add	r2, r3
 8016b86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016b88:	681b      	ldr	r3, [r3, #0]
 8016b8a:	1ad3      	subs	r3, r2, r3
 8016b8c:	461a      	mov	r2, r3
 8016b8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016b90:	605a      	str	r2, [r3, #4]
        caps++, caps->len = 0, caps->buf = NULL;       // Init next cap
 8016b92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016b94:	3308      	adds	r3, #8
 8016b96:	62bb      	str	r3, [r7, #40]	@ 0x28
 8016b98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016b9a:	2200      	movs	r2, #0
 8016b9c:	605a      	str	r2, [r3, #4]
 8016b9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016ba0:	2200      	movs	r2, #0
 8016ba2:	601a      	str	r2, [r3, #0]
      }
      i++, j++;
 8016ba4:	69fb      	ldr	r3, [r7, #28]
 8016ba6:	3301      	adds	r3, #1
 8016ba8:	61fb      	str	r3, [r7, #28]
 8016baa:	69bb      	ldr	r3, [r7, #24]
 8016bac:	3301      	adds	r3, #1
 8016bae:	61bb      	str	r3, [r7, #24]
 8016bb0:	e052      	b.n	8016c58 <mg_match+0x1a0>
    } else if (i < p.len && (p.buf[i] == '*' || p.buf[i] == '#')) {
 8016bb2:	687b      	ldr	r3, [r7, #4]
 8016bb4:	69fa      	ldr	r2, [r7, #28]
 8016bb6:	429a      	cmp	r2, r3
 8016bb8:	d222      	bcs.n	8016c00 <mg_match+0x148>
 8016bba:	683a      	ldr	r2, [r7, #0]
 8016bbc:	69fb      	ldr	r3, [r7, #28]
 8016bbe:	4413      	add	r3, r2
 8016bc0:	781b      	ldrb	r3, [r3, #0]
 8016bc2:	2b2a      	cmp	r3, #42	@ 0x2a
 8016bc4:	d005      	beq.n	8016bd2 <mg_match+0x11a>
 8016bc6:	683a      	ldr	r2, [r7, #0]
 8016bc8:	69fb      	ldr	r3, [r7, #28]
 8016bca:	4413      	add	r3, r2
 8016bcc:	781b      	ldrb	r3, [r3, #0]
 8016bce:	2b23      	cmp	r3, #35	@ 0x23
 8016bd0:	d116      	bne.n	8016c00 <mg_match+0x148>
      if (caps && !caps->buf) caps->len = 0, caps->buf = &s.buf[j];  // Init cap
 8016bd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016bd4:	2b00      	cmp	r3, #0
 8016bd6:	d00b      	beq.n	8016bf0 <mg_match+0x138>
 8016bd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016bda:	681b      	ldr	r3, [r3, #0]
 8016bdc:	2b00      	cmp	r3, #0
 8016bde:	d107      	bne.n	8016bf0 <mg_match+0x138>
 8016be0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016be2:	2200      	movs	r2, #0
 8016be4:	605a      	str	r2, [r3, #4]
 8016be6:	68ba      	ldr	r2, [r7, #8]
 8016be8:	69bb      	ldr	r3, [r7, #24]
 8016bea:	441a      	add	r2, r3
 8016bec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016bee:	601a      	str	r2, [r3, #0]
      ni = i++, nj = j + 1;
 8016bf0:	69fb      	ldr	r3, [r7, #28]
 8016bf2:	1c5a      	adds	r2, r3, #1
 8016bf4:	61fa      	str	r2, [r7, #28]
 8016bf6:	617b      	str	r3, [r7, #20]
 8016bf8:	69bb      	ldr	r3, [r7, #24]
 8016bfa:	3301      	adds	r3, #1
 8016bfc:	613b      	str	r3, [r7, #16]
 8016bfe:	e02b      	b.n	8016c58 <mg_match+0x1a0>
    } else if (nj > 0 && nj <= s.len && (p.buf[ni] == '#' || s.buf[j] != '/')) {
 8016c00:	693b      	ldr	r3, [r7, #16]
 8016c02:	2b00      	cmp	r3, #0
 8016c04:	d025      	beq.n	8016c52 <mg_match+0x19a>
 8016c06:	68fb      	ldr	r3, [r7, #12]
 8016c08:	693a      	ldr	r2, [r7, #16]
 8016c0a:	429a      	cmp	r2, r3
 8016c0c:	d821      	bhi.n	8016c52 <mg_match+0x19a>
 8016c0e:	683a      	ldr	r2, [r7, #0]
 8016c10:	697b      	ldr	r3, [r7, #20]
 8016c12:	4413      	add	r3, r2
 8016c14:	781b      	ldrb	r3, [r3, #0]
 8016c16:	2b23      	cmp	r3, #35	@ 0x23
 8016c18:	d005      	beq.n	8016c26 <mg_match+0x16e>
 8016c1a:	68ba      	ldr	r2, [r7, #8]
 8016c1c:	69bb      	ldr	r3, [r7, #24]
 8016c1e:	4413      	add	r3, r2
 8016c20:	781b      	ldrb	r3, [r3, #0]
 8016c22:	2b2f      	cmp	r3, #47	@ 0x2f
 8016c24:	d015      	beq.n	8016c52 <mg_match+0x19a>
      i = ni, j = nj;
 8016c26:	697b      	ldr	r3, [r7, #20]
 8016c28:	61fb      	str	r3, [r7, #28]
 8016c2a:	693b      	ldr	r3, [r7, #16]
 8016c2c:	61bb      	str	r3, [r7, #24]
      if (caps && caps->buf == NULL && caps->len == 0) {
 8016c2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016c30:	2b00      	cmp	r3, #0
 8016c32:	d010      	beq.n	8016c56 <mg_match+0x19e>
 8016c34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016c36:	681b      	ldr	r3, [r3, #0]
 8016c38:	2b00      	cmp	r3, #0
 8016c3a:	d10c      	bne.n	8016c56 <mg_match+0x19e>
 8016c3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016c3e:	685b      	ldr	r3, [r3, #4]
 8016c40:	2b00      	cmp	r3, #0
 8016c42:	d108      	bne.n	8016c56 <mg_match+0x19e>
        caps--, caps->len = 0;  // Restart previous cap
 8016c44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016c46:	3b08      	subs	r3, #8
 8016c48:	62bb      	str	r3, [r7, #40]	@ 0x28
 8016c4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016c4c:	2200      	movs	r2, #0
 8016c4e:	605a      	str	r2, [r3, #4]
      if (caps && caps->buf == NULL && caps->len == 0) {
 8016c50:	e001      	b.n	8016c56 <mg_match+0x19e>
      }
    } else {
      return false;
 8016c52:	2300      	movs	r3, #0
 8016c54:	e01f      	b.n	8016c96 <mg_match+0x1de>
      if (caps && caps->buf == NULL && caps->len == 0) {
 8016c56:	bf00      	nop
  while (i < p.len || j < s.len) {
 8016c58:	687b      	ldr	r3, [r7, #4]
 8016c5a:	69fa      	ldr	r2, [r7, #28]
 8016c5c:	429a      	cmp	r2, r3
 8016c5e:	f4ff af48 	bcc.w	8016af2 <mg_match+0x3a>
 8016c62:	68fb      	ldr	r3, [r7, #12]
 8016c64:	69ba      	ldr	r2, [r7, #24]
 8016c66:	429a      	cmp	r2, r3
 8016c68:	f4ff af43 	bcc.w	8016af2 <mg_match+0x3a>
    }
  }
  if (caps && caps->buf && caps->len == 0) {
 8016c6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016c6e:	2b00      	cmp	r3, #0
 8016c70:	d010      	beq.n	8016c94 <mg_match+0x1dc>
 8016c72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016c74:	681b      	ldr	r3, [r3, #0]
 8016c76:	2b00      	cmp	r3, #0
 8016c78:	d00c      	beq.n	8016c94 <mg_match+0x1dc>
 8016c7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016c7c:	685b      	ldr	r3, [r3, #4]
 8016c7e:	2b00      	cmp	r3, #0
 8016c80:	d108      	bne.n	8016c94 <mg_match+0x1dc>
    caps->len = (size_t) (&s.buf[j] - caps->buf);
 8016c82:	68ba      	ldr	r2, [r7, #8]
 8016c84:	69bb      	ldr	r3, [r7, #24]
 8016c86:	441a      	add	r2, r3
 8016c88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016c8a:	681b      	ldr	r3, [r3, #0]
 8016c8c:	1ad3      	subs	r3, r2, r3
 8016c8e:	461a      	mov	r2, r3
 8016c90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016c92:	605a      	str	r2, [r3, #4]
  }
  return true;
 8016c94:	2301      	movs	r3, #1
}
 8016c96:	4618      	mov	r0, r3
 8016c98:	3720      	adds	r7, #32
 8016c9a:	46bd      	mov	sp, r7
 8016c9c:	bc90      	pop	{r4, r7}
 8016c9e:	4770      	bx	lr

08016ca0 <mg_span>:

bool mg_span(struct mg_str s, struct mg_str *a, struct mg_str *b, char sep) {
 8016ca0:	b590      	push	{r4, r7, lr}
 8016ca2:	b089      	sub	sp, #36	@ 0x24
 8016ca4:	af00      	add	r7, sp, #0
 8016ca6:	f107 0410 	add.w	r4, r7, #16
 8016caa:	e884 0003 	stmia.w	r4, {r0, r1}
 8016cae:	60fa      	str	r2, [r7, #12]
 8016cb0:	60bb      	str	r3, [r7, #8]
  if (s.len == 0 || s.buf == NULL) {
 8016cb2:	697b      	ldr	r3, [r7, #20]
 8016cb4:	2b00      	cmp	r3, #0
 8016cb6:	d002      	beq.n	8016cbe <mg_span+0x1e>
 8016cb8:	693b      	ldr	r3, [r7, #16]
 8016cba:	2b00      	cmp	r3, #0
 8016cbc:	d101      	bne.n	8016cc2 <mg_span+0x22>
    return false;  // Empty string, nothing to span - fail
 8016cbe:	2300      	movs	r3, #0
 8016cc0:	e047      	b.n	8016d52 <mg_span+0xb2>
  } else {
    size_t len = 0;
 8016cc2:	2300      	movs	r3, #0
 8016cc4:	61fb      	str	r3, [r7, #28]
    while (len < s.len && s.buf[len] != sep) len++;  // Find separator
 8016cc6:	e002      	b.n	8016cce <mg_span+0x2e>
 8016cc8:	69fb      	ldr	r3, [r7, #28]
 8016cca:	3301      	adds	r3, #1
 8016ccc:	61fb      	str	r3, [r7, #28]
 8016cce:	697b      	ldr	r3, [r7, #20]
 8016cd0:	69fa      	ldr	r2, [r7, #28]
 8016cd2:	429a      	cmp	r2, r3
 8016cd4:	d207      	bcs.n	8016ce6 <mg_span+0x46>
 8016cd6:	693a      	ldr	r2, [r7, #16]
 8016cd8:	69fb      	ldr	r3, [r7, #28]
 8016cda:	4413      	add	r3, r2
 8016cdc:	781b      	ldrb	r3, [r3, #0]
 8016cde:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8016ce2:	429a      	cmp	r2, r3
 8016ce4:	d1f0      	bne.n	8016cc8 <mg_span+0x28>
    if (a) *a = mg_str_n(s.buf, len);                // Init a
 8016ce6:	68fb      	ldr	r3, [r7, #12]
 8016ce8:	2b00      	cmp	r3, #0
 8016cea:	d00c      	beq.n	8016d06 <mg_span+0x66>
 8016cec:	6939      	ldr	r1, [r7, #16]
 8016cee:	68fc      	ldr	r4, [r7, #12]
 8016cf0:	463b      	mov	r3, r7
 8016cf2:	69fa      	ldr	r2, [r7, #28]
 8016cf4:	4618      	mov	r0, r3
 8016cf6:	f7ff fdf2 	bl	80168de <mg_str_n>
 8016cfa:	4622      	mov	r2, r4
 8016cfc:	463b      	mov	r3, r7
 8016cfe:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016d02:	e882 0003 	stmia.w	r2, {r0, r1}
    if (b) *b = mg_str_n(s.buf + len, s.len - len);  // Init b
 8016d06:	68bb      	ldr	r3, [r7, #8]
 8016d08:	2b00      	cmp	r3, #0
 8016d0a:	d010      	beq.n	8016d2e <mg_span+0x8e>
 8016d0c:	693a      	ldr	r2, [r7, #16]
 8016d0e:	69fb      	ldr	r3, [r7, #28]
 8016d10:	18d1      	adds	r1, r2, r3
 8016d12:	697a      	ldr	r2, [r7, #20]
 8016d14:	69fb      	ldr	r3, [r7, #28]
 8016d16:	1ad2      	subs	r2, r2, r3
 8016d18:	68bc      	ldr	r4, [r7, #8]
 8016d1a:	463b      	mov	r3, r7
 8016d1c:	4618      	mov	r0, r3
 8016d1e:	f7ff fdde 	bl	80168de <mg_str_n>
 8016d22:	4622      	mov	r2, r4
 8016d24:	463b      	mov	r3, r7
 8016d26:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016d2a:	e882 0003 	stmia.w	r2, {r0, r1}
    if (b && len < s.len) b->buf++, b->len--;        // Skip separator
 8016d2e:	68bb      	ldr	r3, [r7, #8]
 8016d30:	2b00      	cmp	r3, #0
 8016d32:	d00d      	beq.n	8016d50 <mg_span+0xb0>
 8016d34:	697b      	ldr	r3, [r7, #20]
 8016d36:	69fa      	ldr	r2, [r7, #28]
 8016d38:	429a      	cmp	r2, r3
 8016d3a:	d209      	bcs.n	8016d50 <mg_span+0xb0>
 8016d3c:	68bb      	ldr	r3, [r7, #8]
 8016d3e:	681b      	ldr	r3, [r3, #0]
 8016d40:	1c5a      	adds	r2, r3, #1
 8016d42:	68bb      	ldr	r3, [r7, #8]
 8016d44:	601a      	str	r2, [r3, #0]
 8016d46:	68bb      	ldr	r3, [r7, #8]
 8016d48:	685b      	ldr	r3, [r3, #4]
 8016d4a:	1e5a      	subs	r2, r3, #1
 8016d4c:	68bb      	ldr	r3, [r7, #8]
 8016d4e:	605a      	str	r2, [r3, #4]
    return true;
 8016d50:	2301      	movs	r3, #1
  }
}
 8016d52:	4618      	mov	r0, r3
 8016d54:	3724      	adds	r7, #36	@ 0x24
 8016d56:	46bd      	mov	sp, r7
 8016d58:	bd90      	pop	{r4, r7, pc}

08016d5a <mg_str_to_num>:

bool mg_str_to_num(struct mg_str str, int base, void *val, size_t val_len) {
 8016d5a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d5e:	b0a5      	sub	sp, #148	@ 0x94
 8016d60:	af00      	add	r7, sp, #0
 8016d62:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 8016d66:	e884 0003 	stmia.w	r4, {r0, r1}
 8016d6a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8016d6c:	64bb      	str	r3, [r7, #72]	@ 0x48
  size_t i = 0, ndigits = 0;
 8016d6e:	2300      	movs	r3, #0
 8016d70:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8016d74:	2300      	movs	r3, #0
 8016d76:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint64_t max = val_len == sizeof(uint8_t)    ? 0xFF
                 : val_len == sizeof(uint16_t) ? 0xFFFF
 8016d7a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8016d7e:	2b01      	cmp	r3, #1
 8016d80:	d016      	beq.n	8016db0 <mg_str_to_num+0x56>
                 : val_len == sizeof(uint32_t) ? 0xFFFFFFFF
 8016d82:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8016d86:	2b02      	cmp	r3, #2
 8016d88:	d00d      	beq.n	8016da6 <mg_str_to_num+0x4c>
                                               : (uint64_t) ~0;
 8016d8a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8016d8e:	2b04      	cmp	r3, #4
 8016d90:	d104      	bne.n	8016d9c <mg_str_to_num+0x42>
 8016d92:	f04f 32ff 	mov.w	r2, #4294967295
 8016d96:	f04f 0300 	mov.w	r3, #0
 8016d9a:	e00d      	b.n	8016db8 <mg_str_to_num+0x5e>
 8016d9c:	f04f 32ff 	mov.w	r2, #4294967295
 8016da0:	f04f 33ff 	mov.w	r3, #4294967295
 8016da4:	e008      	b.n	8016db8 <mg_str_to_num+0x5e>
                 : val_len == sizeof(uint32_t) ? 0xFFFFFFFF
 8016da6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016daa:	f04f 0300 	mov.w	r3, #0
 8016dae:	e003      	b.n	8016db8 <mg_str_to_num+0x5e>
                 : val_len == sizeof(uint16_t) ? 0xFFFF
 8016db0:	f04f 02ff 	mov.w	r2, #255	@ 0xff
 8016db4:	f04f 0300 	mov.w	r3, #0
  uint64_t max = val_len == sizeof(uint8_t)    ? 0xFF
 8016db8:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
  uint64_t result = 0;
 8016dbc:	f04f 0200 	mov.w	r2, #0
 8016dc0:	f04f 0300 	mov.w	r3, #0
 8016dc4:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
  if (max == (uint64_t) ~0 && val_len != sizeof(uint64_t)) return false;
 8016dc8:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8016dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016dd0:	bf08      	it	eq
 8016dd2:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8016dd6:	d105      	bne.n	8016de4 <mg_str_to_num+0x8a>
 8016dd8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8016ddc:	2b08      	cmp	r3, #8
 8016dde:	d001      	beq.n	8016de4 <mg_str_to_num+0x8a>
 8016de0:	2300      	movs	r3, #0
 8016de2:	e1e8      	b.n	80171b6 <mg_str_to_num+0x45c>
  if (base == 0 && str.len >= 2) {
 8016de4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016de6:	2b00      	cmp	r3, #0
 8016de8:	d12d      	bne.n	8016e46 <mg_str_to_num+0xec>
 8016dea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016dec:	2b01      	cmp	r3, #1
 8016dee:	d92a      	bls.n	8016e46 <mg_str_to_num+0xec>
    if (str.buf[i] == '0') {
 8016df0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8016df2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8016df6:	4413      	add	r3, r2
 8016df8:	781b      	ldrb	r3, [r3, #0]
 8016dfa:	2b30      	cmp	r3, #48	@ 0x30
 8016dfc:	d121      	bne.n	8016e42 <mg_str_to_num+0xe8>
      i++;
 8016dfe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8016e02:	3301      	adds	r3, #1
 8016e04:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      base = str.buf[i] == 'b' ? 2 : str.buf[i] == 'x' ? 16 : 10;
 8016e08:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8016e0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8016e0e:	4413      	add	r3, r2
 8016e10:	781b      	ldrb	r3, [r3, #0]
 8016e12:	2b62      	cmp	r3, #98	@ 0x62
 8016e14:	d00a      	beq.n	8016e2c <mg_str_to_num+0xd2>
 8016e16:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8016e18:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8016e1c:	4413      	add	r3, r2
 8016e1e:	781b      	ldrb	r3, [r3, #0]
 8016e20:	2b78      	cmp	r3, #120	@ 0x78
 8016e22:	d101      	bne.n	8016e28 <mg_str_to_num+0xce>
 8016e24:	2310      	movs	r3, #16
 8016e26:	e002      	b.n	8016e2e <mg_str_to_num+0xd4>
 8016e28:	230a      	movs	r3, #10
 8016e2a:	e000      	b.n	8016e2e <mg_str_to_num+0xd4>
 8016e2c:	2302      	movs	r3, #2
 8016e2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      if (base != 10) ++i;
 8016e30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016e32:	2b0a      	cmp	r3, #10
 8016e34:	d007      	beq.n	8016e46 <mg_str_to_num+0xec>
 8016e36:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8016e3a:	3301      	adds	r3, #1
 8016e3c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8016e40:	e001      	b.n	8016e46 <mg_str_to_num+0xec>
    } else {
      base = 10;
 8016e42:	230a      	movs	r3, #10
 8016e44:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }
  switch (base) {
 8016e46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016e48:	2b10      	cmp	r3, #16
 8016e4a:	f000 8178 	beq.w	801713e <mg_str_to_num+0x3e4>
 8016e4e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016e50:	2b10      	cmp	r3, #16
 8016e52:	f300 817d 	bgt.w	8017150 <mg_str_to_num+0x3f6>
 8016e56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016e58:	2b02      	cmp	r3, #2
 8016e5a:	d052      	beq.n	8016f02 <mg_str_to_num+0x1a8>
 8016e5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016e5e:	2b0a      	cmp	r3, #10
 8016e60:	f000 80cd 	beq.w	8016ffe <mg_str_to_num+0x2a4>
 8016e64:	e174      	b.n	8017150 <mg_str_to_num+0x3f6>
    case 2:
      while (i < str.len && (str.buf[i] == '0' || str.buf[i] == '1')) {
        uint64_t digit = (uint64_t) (str.buf[i] - '0');
 8016e66:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8016e68:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8016e6c:	4413      	add	r3, r2
 8016e6e:	781b      	ldrb	r3, [r3, #0]
 8016e70:	3b30      	subs	r3, #48	@ 0x30
 8016e72:	17da      	asrs	r2, r3, #31
 8016e74:	633b      	str	r3, [r7, #48]	@ 0x30
 8016e76:	637a      	str	r2, [r7, #52]	@ 0x34
 8016e78:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8016e7c:	e9c7 3416 	strd	r3, r4, [r7, #88]	@ 0x58
        if (result > max / 2) return false;  // Overflow
 8016e80:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8016e84:	f04f 0200 	mov.w	r2, #0
 8016e88:	f04f 0300 	mov.w	r3, #0
 8016e8c:	0842      	lsrs	r2, r0, #1
 8016e8e:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8016e92:	084b      	lsrs	r3, r1, #1
 8016e94:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8016e98:	4282      	cmp	r2, r0
 8016e9a:	418b      	sbcs	r3, r1
 8016e9c:	d201      	bcs.n	8016ea2 <mg_str_to_num+0x148>
 8016e9e:	2300      	movs	r3, #0
 8016ea0:	e189      	b.n	80171b6 <mg_str_to_num+0x45c>
        result *= 2;
 8016ea2:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8016ea6:	1891      	adds	r1, r2, r2
 8016ea8:	62b9      	str	r1, [r7, #40]	@ 0x28
 8016eaa:	415b      	adcs	r3, r3
 8016eac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8016eae:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8016eb2:	e9c7 3420 	strd	r3, r4, [r7, #128]	@ 0x80
        if (result > max - digit) return false;  // Overflow
 8016eb6:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8016eba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8016ebe:	1a85      	subs	r5, r0, r2
 8016ec0:	eb61 0603 	sbc.w	r6, r1, r3
 8016ec4:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8016ec8:	4295      	cmp	r5, r2
 8016eca:	eb76 0303 	sbcs.w	r3, r6, r3
 8016ece:	d201      	bcs.n	8016ed4 <mg_str_to_num+0x17a>
 8016ed0:	2300      	movs	r3, #0
 8016ed2:	e170      	b.n	80171b6 <mg_str_to_num+0x45c>
        result += digit;
 8016ed4:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8016ed8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8016edc:	1884      	adds	r4, r0, r2
 8016ede:	623c      	str	r4, [r7, #32]
 8016ee0:	eb41 0303 	adc.w	r3, r1, r3
 8016ee4:	627b      	str	r3, [r7, #36]	@ 0x24
 8016ee6:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8016eea:	e9c7 3420 	strd	r3, r4, [r7, #128]	@ 0x80
        i++, ndigits++;
 8016eee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8016ef2:	3301      	adds	r3, #1
 8016ef4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8016ef8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8016efc:	3301      	adds	r3, #1
 8016efe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      while (i < str.len && (str.buf[i] == '0' || str.buf[i] == '1')) {
 8016f02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016f04:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8016f08:	429a      	cmp	r2, r3
 8016f0a:	f080 8123 	bcs.w	8017154 <mg_str_to_num+0x3fa>
 8016f0e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8016f10:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8016f14:	4413      	add	r3, r2
 8016f16:	781b      	ldrb	r3, [r3, #0]
 8016f18:	2b30      	cmp	r3, #48	@ 0x30
 8016f1a:	d0a4      	beq.n	8016e66 <mg_str_to_num+0x10c>
 8016f1c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8016f1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8016f22:	4413      	add	r3, r2
 8016f24:	781b      	ldrb	r3, [r3, #0]
 8016f26:	2b31      	cmp	r3, #49	@ 0x31
 8016f28:	d09d      	beq.n	8016e66 <mg_str_to_num+0x10c>
      }
      break;
 8016f2a:	e113      	b.n	8017154 <mg_str_to_num+0x3fa>
    case 10:
      while (i < str.len && str.buf[i] >= '0' && str.buf[i] <= '9') {
        uint64_t digit = (uint64_t) (str.buf[i] - '0');
 8016f2c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8016f2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8016f32:	4413      	add	r3, r2
 8016f34:	781b      	ldrb	r3, [r3, #0]
 8016f36:	3b30      	subs	r3, #48	@ 0x30
 8016f38:	17da      	asrs	r2, r3, #31
 8016f3a:	61bb      	str	r3, [r7, #24]
 8016f3c:	61fa      	str	r2, [r7, #28]
 8016f3e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8016f42:	e9c7 3418 	strd	r3, r4, [r7, #96]	@ 0x60
        if (result > max / 10) return false;  // Overflow
 8016f46:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8016f4a:	f04f 020a 	mov.w	r2, #10
 8016f4e:	f04f 0300 	mov.w	r3, #0
 8016f52:	f7e9 fc01 	bl	8000758 <__aeabi_uldivmod>
 8016f56:	4602      	mov	r2, r0
 8016f58:	460b      	mov	r3, r1
 8016f5a:	4610      	mov	r0, r2
 8016f5c:	4619      	mov	r1, r3
 8016f5e:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8016f62:	4290      	cmp	r0, r2
 8016f64:	eb71 0303 	sbcs.w	r3, r1, r3
 8016f68:	d201      	bcs.n	8016f6e <mg_str_to_num+0x214>
 8016f6a:	2300      	movs	r3, #0
 8016f6c:	e123      	b.n	80171b6 <mg_str_to_num+0x45c>
        result *= 10;
 8016f6e:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8016f72:	4622      	mov	r2, r4
 8016f74:	462b      	mov	r3, r5
 8016f76:	f04f 0000 	mov.w	r0, #0
 8016f7a:	f04f 0100 	mov.w	r1, #0
 8016f7e:	0099      	lsls	r1, r3, #2
 8016f80:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8016f84:	0090      	lsls	r0, r2, #2
 8016f86:	4602      	mov	r2, r0
 8016f88:	460b      	mov	r3, r1
 8016f8a:	eb12 0804 	adds.w	r8, r2, r4
 8016f8e:	eb43 0905 	adc.w	r9, r3, r5
 8016f92:	eb18 0308 	adds.w	r3, r8, r8
 8016f96:	613b      	str	r3, [r7, #16]
 8016f98:	eb49 0309 	adc.w	r3, r9, r9
 8016f9c:	617b      	str	r3, [r7, #20]
 8016f9e:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8016fa2:	e9c7 8920 	strd	r8, r9, [r7, #128]	@ 0x80
        if (result > max - digit) return false;  // Overflow
 8016fa6:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8016faa:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8016fae:	1a84      	subs	r4, r0, r2
 8016fb0:	63bc      	str	r4, [r7, #56]	@ 0x38
 8016fb2:	eb61 0303 	sbc.w	r3, r1, r3
 8016fb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8016fb8:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8016fbc:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8016fc0:	4621      	mov	r1, r4
 8016fc2:	4291      	cmp	r1, r2
 8016fc4:	4629      	mov	r1, r5
 8016fc6:	eb71 0303 	sbcs.w	r3, r1, r3
 8016fca:	d201      	bcs.n	8016fd0 <mg_str_to_num+0x276>
 8016fcc:	2300      	movs	r3, #0
 8016fce:	e0f2      	b.n	80171b6 <mg_str_to_num+0x45c>
        result += digit;
 8016fd0:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8016fd4:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8016fd8:	1884      	adds	r4, r0, r2
 8016fda:	60bc      	str	r4, [r7, #8]
 8016fdc:	eb41 0303 	adc.w	r3, r1, r3
 8016fe0:	60fb      	str	r3, [r7, #12]
 8016fe2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8016fe6:	e9c7 3420 	strd	r3, r4, [r7, #128]	@ 0x80
        i++, ndigits++;
 8016fea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8016fee:	3301      	adds	r3, #1
 8016ff0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8016ff4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8016ff8:	3301      	adds	r3, #1
 8016ffa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      while (i < str.len && str.buf[i] >= '0' && str.buf[i] <= '9') {
 8016ffe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017000:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8017004:	429a      	cmp	r2, r3
 8017006:	f080 80a7 	bcs.w	8017158 <mg_str_to_num+0x3fe>
 801700a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801700c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8017010:	4413      	add	r3, r2
 8017012:	781b      	ldrb	r3, [r3, #0]
 8017014:	2b2f      	cmp	r3, #47	@ 0x2f
 8017016:	f240 809f 	bls.w	8017158 <mg_str_to_num+0x3fe>
 801701a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801701c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8017020:	4413      	add	r3, r2
 8017022:	781b      	ldrb	r3, [r3, #0]
 8017024:	2b39      	cmp	r3, #57	@ 0x39
 8017026:	d981      	bls.n	8016f2c <mg_str_to_num+0x1d2>
      }
      break;
 8017028:	e096      	b.n	8017158 <mg_str_to_num+0x3fe>
    case 16:
      while (i < str.len) {
        char c = str.buf[i];
 801702a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801702c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8017030:	4413      	add	r3, r2
 8017032:	781b      	ldrb	r3, [r3, #0]
 8017034:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
        uint64_t digit = (c >= '0' && c <= '9')   ? (uint64_t) (c - '0')
                         : (c >= 'A' && c <= 'F') ? (uint64_t) (c - '7')
 8017038:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 801703c:	2b2f      	cmp	r3, #47	@ 0x2f
 801703e:	d90a      	bls.n	8017056 <mg_str_to_num+0x2fc>
        uint64_t digit = (c >= '0' && c <= '9')   ? (uint64_t) (c - '0')
 8017040:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8017044:	2b39      	cmp	r3, #57	@ 0x39
 8017046:	d806      	bhi.n	8017056 <mg_str_to_num+0x2fc>
 8017048:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 801704c:	3b30      	subs	r3, #48	@ 0x30
                         : (c >= 'A' && c <= 'F') ? (uint64_t) (c - '7')
 801704e:	17da      	asrs	r2, r3, #31
 8017050:	643b      	str	r3, [r7, #64]	@ 0x40
 8017052:	647a      	str	r2, [r7, #68]	@ 0x44
 8017054:	e023      	b.n	801709e <mg_str_to_num+0x344>
                         : (c >= 'a' && c <= 'f') ? (uint64_t) (c - 'W')
 8017056:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 801705a:	2b40      	cmp	r3, #64	@ 0x40
 801705c:	d90a      	bls.n	8017074 <mg_str_to_num+0x31a>
                         : (c >= 'A' && c <= 'F') ? (uint64_t) (c - '7')
 801705e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8017062:	2b46      	cmp	r3, #70	@ 0x46
 8017064:	d806      	bhi.n	8017074 <mg_str_to_num+0x31a>
 8017066:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 801706a:	3b37      	subs	r3, #55	@ 0x37
                         : (c >= 'a' && c <= 'f') ? (uint64_t) (c - 'W')
 801706c:	17da      	asrs	r2, r3, #31
 801706e:	643b      	str	r3, [r7, #64]	@ 0x40
 8017070:	647a      	str	r2, [r7, #68]	@ 0x44
 8017072:	e014      	b.n	801709e <mg_str_to_num+0x344>
                                                  : (uint64_t) ~0;
 8017074:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8017078:	2b60      	cmp	r3, #96	@ 0x60
 801707a:	d90a      	bls.n	8017092 <mg_str_to_num+0x338>
                         : (c >= 'a' && c <= 'f') ? (uint64_t) (c - 'W')
 801707c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8017080:	2b66      	cmp	r3, #102	@ 0x66
 8017082:	d806      	bhi.n	8017092 <mg_str_to_num+0x338>
 8017084:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8017088:	3b57      	subs	r3, #87	@ 0x57
                                                  : (uint64_t) ~0;
 801708a:	17da      	asrs	r2, r3, #31
 801708c:	643b      	str	r3, [r7, #64]	@ 0x40
 801708e:	647a      	str	r2, [r7, #68]	@ 0x44
 8017090:	e005      	b.n	801709e <mg_str_to_num+0x344>
 8017092:	f04f 33ff 	mov.w	r3, #4294967295
 8017096:	f04f 34ff 	mov.w	r4, #4294967295
 801709a:	e9c7 3410 	strd	r3, r4, [r7, #64]	@ 0x40
        uint64_t digit = (c >= '0' && c <= '9')   ? (uint64_t) (c - '0')
 801709e:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 80170a2:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
        if (digit == (uint64_t) ~0) break;
 80170a6:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80170aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80170ae:	bf08      	it	eq
 80170b0:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 80170b4:	d04a      	beq.n	801714c <mg_str_to_num+0x3f2>
        if (result > max / 16) return false;  // Overflow
 80170b6:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80170ba:	f04f 0200 	mov.w	r2, #0
 80170be:	f04f 0300 	mov.w	r3, #0
 80170c2:	0902      	lsrs	r2, r0, #4
 80170c4:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 80170c8:	090b      	lsrs	r3, r1, #4
 80170ca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80170ce:	4282      	cmp	r2, r0
 80170d0:	418b      	sbcs	r3, r1
 80170d2:	d201      	bcs.n	80170d8 <mg_str_to_num+0x37e>
 80170d4:	2300      	movs	r3, #0
 80170d6:	e06e      	b.n	80171b6 <mg_str_to_num+0x45c>
        result *= 16;
 80170d8:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80170dc:	f04f 0200 	mov.w	r2, #0
 80170e0:	f04f 0300 	mov.w	r3, #0
 80170e4:	010b      	lsls	r3, r1, #4
 80170e6:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 80170ea:	0102      	lsls	r2, r0, #4
 80170ec:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
        if (result > max - digit) return false;  // Overflow
 80170f0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80170f4:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80170f8:	ebb0 0a02 	subs.w	sl, r0, r2
 80170fc:	eb61 0b03 	sbc.w	fp, r1, r3
 8017100:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8017104:	4592      	cmp	sl, r2
 8017106:	eb7b 0303 	sbcs.w	r3, fp, r3
 801710a:	d201      	bcs.n	8017110 <mg_str_to_num+0x3b6>
 801710c:	2300      	movs	r3, #0
 801710e:	e052      	b.n	80171b6 <mg_str_to_num+0x45c>
        result += digit;
 8017110:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8017114:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8017118:	1884      	adds	r4, r0, r2
 801711a:	603c      	str	r4, [r7, #0]
 801711c:	eb41 0303 	adc.w	r3, r1, r3
 8017120:	607b      	str	r3, [r7, #4]
 8017122:	e9d7 3400 	ldrd	r3, r4, [r7]
 8017126:	e9c7 3420 	strd	r3, r4, [r7, #128]	@ 0x80
        i++, ndigits++;
 801712a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801712e:	3301      	adds	r3, #1
 8017130:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8017134:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8017138:	3301      	adds	r3, #1
 801713a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      while (i < str.len) {
 801713e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017140:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8017144:	429a      	cmp	r2, r3
 8017146:	f4ff af70 	bcc.w	801702a <mg_str_to_num+0x2d0>
      }
      break;
 801714a:	e006      	b.n	801715a <mg_str_to_num+0x400>
        if (digit == (uint64_t) ~0) break;
 801714c:	bf00      	nop
      break;
 801714e:	e004      	b.n	801715a <mg_str_to_num+0x400>
    default:
      return false;
 8017150:	2300      	movs	r3, #0
 8017152:	e030      	b.n	80171b6 <mg_str_to_num+0x45c>
      break;
 8017154:	bf00      	nop
 8017156:	e000      	b.n	801715a <mg_str_to_num+0x400>
      break;
 8017158:	bf00      	nop
  }
  if (ndigits == 0) return false;
 801715a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801715e:	2b00      	cmp	r3, #0
 8017160:	d101      	bne.n	8017166 <mg_str_to_num+0x40c>
 8017162:	2300      	movs	r3, #0
 8017164:	e027      	b.n	80171b6 <mg_str_to_num+0x45c>
  if (i != str.len) return false;
 8017166:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017168:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 801716c:	429a      	cmp	r2, r3
 801716e:	d001      	beq.n	8017174 <mg_str_to_num+0x41a>
 8017170:	2300      	movs	r3, #0
 8017172:	e020      	b.n	80171b6 <mg_str_to_num+0x45c>
  if (val_len == 1) {
 8017174:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8017178:	2b01      	cmp	r3, #1
 801717a:	d104      	bne.n	8017186 <mg_str_to_num+0x42c>
    *((uint8_t *) val) = (uint8_t) result;
 801717c:	f897 2080 	ldrb.w	r2, [r7, #128]	@ 0x80
 8017180:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8017182:	701a      	strb	r2, [r3, #0]
 8017184:	e016      	b.n	80171b4 <mg_str_to_num+0x45a>
  } else if (val_len == 2) {
 8017186:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801718a:	2b02      	cmp	r3, #2
 801718c:	d104      	bne.n	8017198 <mg_str_to_num+0x43e>
    *((uint16_t *) val) = (uint16_t) result;
 801718e:	f8b7 2080 	ldrh.w	r2, [r7, #128]	@ 0x80
 8017192:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8017194:	801a      	strh	r2, [r3, #0]
 8017196:	e00d      	b.n	80171b4 <mg_str_to_num+0x45a>
  } else if (val_len == 4) {
 8017198:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801719c:	2b04      	cmp	r3, #4
 801719e:	d104      	bne.n	80171aa <mg_str_to_num+0x450>
    *((uint32_t *) val) = (uint32_t) result;
 80171a0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80171a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80171a6:	601a      	str	r2, [r3, #0]
 80171a8:	e004      	b.n	80171b4 <mg_str_to_num+0x45a>
  } else {
    *((uint64_t *) val) = (uint64_t) result;
 80171aa:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80171ac:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 80171b0:	e9c1 2300 	strd	r2, r3, [r1]
  }
  return true;
 80171b4:	2301      	movs	r3, #1
}
 80171b6:	4618      	mov	r0, r3
 80171b8:	3794      	adds	r7, #148	@ 0x94
 80171ba:	46bd      	mov	sp, r7
 80171bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080171c0 <mg_timer_init>:
#endif



void mg_timer_init(struct mg_timer **head, struct mg_timer *t, uint64_t ms,
                   unsigned flags, void (*fn)(void *), void *arg) {
 80171c0:	b480      	push	{r7}
 80171c2:	b085      	sub	sp, #20
 80171c4:	af00      	add	r7, sp, #0
 80171c6:	60f8      	str	r0, [r7, #12]
 80171c8:	60b9      	str	r1, [r7, #8]
 80171ca:	e9c7 2300 	strd	r2, r3, [r7]
  t->period_ms = ms, t->expire = 0;
 80171ce:	68b9      	ldr	r1, [r7, #8]
 80171d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80171d4:	e9c1 2300 	strd	r2, r3, [r1]
 80171d8:	68b9      	ldr	r1, [r7, #8]
 80171da:	f04f 0200 	mov.w	r2, #0
 80171de:	f04f 0300 	mov.w	r3, #0
 80171e2:	e9c1 2302 	strd	r2, r3, [r1, #8]
  t->flags = flags, t->fn = fn, t->arg = arg, t->next = *head;
 80171e6:	68bb      	ldr	r3, [r7, #8]
 80171e8:	69ba      	ldr	r2, [r7, #24]
 80171ea:	611a      	str	r2, [r3, #16]
 80171ec:	68bb      	ldr	r3, [r7, #8]
 80171ee:	69fa      	ldr	r2, [r7, #28]
 80171f0:	615a      	str	r2, [r3, #20]
 80171f2:	68bb      	ldr	r3, [r7, #8]
 80171f4:	6a3a      	ldr	r2, [r7, #32]
 80171f6:	619a      	str	r2, [r3, #24]
 80171f8:	68fb      	ldr	r3, [r7, #12]
 80171fa:	681a      	ldr	r2, [r3, #0]
 80171fc:	68bb      	ldr	r3, [r7, #8]
 80171fe:	61da      	str	r2, [r3, #28]
  *head = t;
 8017200:	68fb      	ldr	r3, [r7, #12]
 8017202:	68ba      	ldr	r2, [r7, #8]
 8017204:	601a      	str	r2, [r3, #0]
}
 8017206:	bf00      	nop
 8017208:	3714      	adds	r7, #20
 801720a:	46bd      	mov	sp, r7
 801720c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017210:	4770      	bx	lr

08017212 <mg_timer_free>:

void mg_timer_free(struct mg_timer **head, struct mg_timer *t) {
 8017212:	b480      	push	{r7}
 8017214:	b083      	sub	sp, #12
 8017216:	af00      	add	r7, sp, #0
 8017218:	6078      	str	r0, [r7, #4]
 801721a:	6039      	str	r1, [r7, #0]
  while (*head && *head != t) head = &(*head)->next;
 801721c:	e003      	b.n	8017226 <mg_timer_free+0x14>
 801721e:	687b      	ldr	r3, [r7, #4]
 8017220:	681b      	ldr	r3, [r3, #0]
 8017222:	331c      	adds	r3, #28
 8017224:	607b      	str	r3, [r7, #4]
 8017226:	687b      	ldr	r3, [r7, #4]
 8017228:	681b      	ldr	r3, [r3, #0]
 801722a:	2b00      	cmp	r3, #0
 801722c:	d004      	beq.n	8017238 <mg_timer_free+0x26>
 801722e:	687b      	ldr	r3, [r7, #4]
 8017230:	681b      	ldr	r3, [r3, #0]
 8017232:	683a      	ldr	r2, [r7, #0]
 8017234:	429a      	cmp	r2, r3
 8017236:	d1f2      	bne.n	801721e <mg_timer_free+0xc>
  if (*head) *head = t->next;
 8017238:	687b      	ldr	r3, [r7, #4]
 801723a:	681b      	ldr	r3, [r3, #0]
 801723c:	2b00      	cmp	r3, #0
 801723e:	d003      	beq.n	8017248 <mg_timer_free+0x36>
 8017240:	683b      	ldr	r3, [r7, #0]
 8017242:	69da      	ldr	r2, [r3, #28]
 8017244:	687b      	ldr	r3, [r7, #4]
 8017246:	601a      	str	r2, [r3, #0]
}
 8017248:	bf00      	nop
 801724a:	370c      	adds	r7, #12
 801724c:	46bd      	mov	sp, r7
 801724e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017252:	4770      	bx	lr

08017254 <mg_timer_expired>:

// t: expiration time, prd: period, now: current time. Return true if expired
bool mg_timer_expired(uint64_t *t, uint64_t prd, uint64_t now) {
 8017254:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8017258:	b086      	sub	sp, #24
 801725a:	af00      	add	r7, sp, #0
 801725c:	6178      	str	r0, [r7, #20]
 801725e:	e9c7 2302 	strd	r2, r3, [r7, #8]
  if (now + prd < *t) *t = 0;                    // Time wrapped? Reset timer
 8017262:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8017266:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801726a:	eb10 0a02 	adds.w	sl, r0, r2
 801726e:	eb41 0b03 	adc.w	fp, r1, r3
 8017272:	697b      	ldr	r3, [r7, #20]
 8017274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017278:	4592      	cmp	sl, r2
 801727a:	eb7b 0303 	sbcs.w	r3, fp, r3
 801727e:	d206      	bcs.n	801728e <mg_timer_expired+0x3a>
 8017280:	6979      	ldr	r1, [r7, #20]
 8017282:	f04f 0200 	mov.w	r2, #0
 8017286:	f04f 0300 	mov.w	r3, #0
 801728a:	e9c1 2300 	strd	r2, r3, [r1]
  if (*t == 0) *t = now + prd;                   // Firt poll? Set expiration
 801728e:	697b      	ldr	r3, [r7, #20]
 8017290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017294:	4313      	orrs	r3, r2
 8017296:	d10d      	bne.n	80172b4 <mg_timer_expired+0x60>
 8017298:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 801729c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80172a0:	1886      	adds	r6, r0, r2
 80172a2:	603e      	str	r6, [r7, #0]
 80172a4:	eb41 0303 	adc.w	r3, r1, r3
 80172a8:	607b      	str	r3, [r7, #4]
 80172aa:	697b      	ldr	r3, [r7, #20]
 80172ac:	e9d7 1200 	ldrd	r1, r2, [r7]
 80172b0:	e9c3 1200 	strd	r1, r2, [r3]
  if (*t > now) return false;                    // Not expired yet, return
 80172b4:	697b      	ldr	r3, [r7, #20]
 80172b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80172ba:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80172be:	4290      	cmp	r0, r2
 80172c0:	eb71 0303 	sbcs.w	r3, r1, r3
 80172c4:	d201      	bcs.n	80172ca <mg_timer_expired+0x76>
 80172c6:	2300      	movs	r3, #0
 80172c8:	e022      	b.n	8017310 <mg_timer_expired+0xbc>
  *t = (now - *t) > prd ? now + prd : *t + prd;  // Next expiration time
 80172ca:	697b      	ldr	r3, [r7, #20]
 80172cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80172d0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80172d4:	ebb0 0802 	subs.w	r8, r0, r2
 80172d8:	eb61 0903 	sbc.w	r9, r1, r3
 80172dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80172e0:	4542      	cmp	r2, r8
 80172e2:	eb73 0309 	sbcs.w	r3, r3, r9
 80172e6:	d207      	bcs.n	80172f8 <mg_timer_expired+0xa4>
 80172e8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80172ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80172f0:	1884      	adds	r4, r0, r2
 80172f2:	eb41 0503 	adc.w	r5, r1, r3
 80172f6:	e007      	b.n	8017308 <mg_timer_expired+0xb4>
 80172f8:	697b      	ldr	r3, [r7, #20]
 80172fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80172fe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8017302:	1884      	adds	r4, r0, r2
 8017304:	eb41 0503 	adc.w	r5, r1, r3
 8017308:	697b      	ldr	r3, [r7, #20]
 801730a:	e9c3 4500 	strd	r4, r5, [r3]
  return true;                                   // Expired, return true
 801730e:	2301      	movs	r3, #1
}
 8017310:	4618      	mov	r0, r3
 8017312:	3718      	adds	r7, #24
 8017314:	46bd      	mov	sp, r7
 8017316:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 801731a:	4770      	bx	lr

0801731c <mg_timer_poll>:

void mg_timer_poll(struct mg_timer **head, uint64_t now_ms) {
 801731c:	b590      	push	{r4, r7, lr}
 801731e:	b08b      	sub	sp, #44	@ 0x2c
 8017320:	af02      	add	r7, sp, #8
 8017322:	60f8      	str	r0, [r7, #12]
 8017324:	e9c7 2300 	strd	r2, r3, [r7]
  struct mg_timer *t, *tmp;
  for (t = *head; t != NULL; t = tmp) {
 8017328:	68fb      	ldr	r3, [r7, #12]
 801732a:	681b      	ldr	r3, [r3, #0]
 801732c:	61fb      	str	r3, [r7, #28]
 801732e:	e067      	b.n	8017400 <mg_timer_poll+0xe4>
    bool once = t->expire == 0 && (t->flags & MG_TIMER_RUN_NOW) &&
 8017330:	69fb      	ldr	r3, [r7, #28]
 8017332:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8017336:	4313      	orrs	r3, r2
 8017338:	d10d      	bne.n	8017356 <mg_timer_poll+0x3a>
 801733a:	69fb      	ldr	r3, [r7, #28]
 801733c:	691b      	ldr	r3, [r3, #16]
 801733e:	f003 0302 	and.w	r3, r3, #2
 8017342:	2b00      	cmp	r3, #0
 8017344:	d007      	beq.n	8017356 <mg_timer_poll+0x3a>
                !(t->flags & MG_TIMER_CALLED);  // Handle MG_TIMER_NOW only once
 8017346:	69fb      	ldr	r3, [r7, #28]
 8017348:	691b      	ldr	r3, [r3, #16]
 801734a:	f003 0304 	and.w	r3, r3, #4
    bool once = t->expire == 0 && (t->flags & MG_TIMER_RUN_NOW) &&
 801734e:	2b00      	cmp	r3, #0
 8017350:	d101      	bne.n	8017356 <mg_timer_poll+0x3a>
 8017352:	2301      	movs	r3, #1
 8017354:	e000      	b.n	8017358 <mg_timer_poll+0x3c>
 8017356:	2300      	movs	r3, #0
 8017358:	76fb      	strb	r3, [r7, #27]
 801735a:	7efb      	ldrb	r3, [r7, #27]
 801735c:	f003 0301 	and.w	r3, r3, #1
 8017360:	76fb      	strb	r3, [r7, #27]
    bool expired = mg_timer_expired(&t->expire, t->period_ms, now_ms);
 8017362:	69fb      	ldr	r3, [r7, #28]
 8017364:	f103 0408 	add.w	r4, r3, #8
 8017368:	69fb      	ldr	r3, [r7, #28]
 801736a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801736e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017372:	e9cd 2300 	strd	r2, r3, [sp]
 8017376:	4602      	mov	r2, r0
 8017378:	460b      	mov	r3, r1
 801737a:	4620      	mov	r0, r4
 801737c:	f7ff ff6a 	bl	8017254 <mg_timer_expired>
 8017380:	4603      	mov	r3, r0
 8017382:	76bb      	strb	r3, [r7, #26]
    tmp = t->next;
 8017384:	69fb      	ldr	r3, [r7, #28]
 8017386:	69db      	ldr	r3, [r3, #28]
 8017388:	617b      	str	r3, [r7, #20]
    if (!once && !expired) continue;
 801738a:	7efb      	ldrb	r3, [r7, #27]
 801738c:	f083 0301 	eor.w	r3, r3, #1
 8017390:	b2db      	uxtb	r3, r3
 8017392:	2b00      	cmp	r3, #0
 8017394:	d005      	beq.n	80173a2 <mg_timer_poll+0x86>
 8017396:	7ebb      	ldrb	r3, [r7, #26]
 8017398:	f083 0301 	eor.w	r3, r3, #1
 801739c:	b2db      	uxtb	r3, r3
 801739e:	2b00      	cmp	r3, #0
 80173a0:	d12b      	bne.n	80173fa <mg_timer_poll+0xde>
    if ((t->flags & MG_TIMER_REPEAT) || !(t->flags & MG_TIMER_CALLED)) {
 80173a2:	69fb      	ldr	r3, [r7, #28]
 80173a4:	691b      	ldr	r3, [r3, #16]
 80173a6:	f003 0301 	and.w	r3, r3, #1
 80173aa:	2b00      	cmp	r3, #0
 80173ac:	d105      	bne.n	80173ba <mg_timer_poll+0x9e>
 80173ae:	69fb      	ldr	r3, [r7, #28]
 80173b0:	691b      	ldr	r3, [r3, #16]
 80173b2:	f003 0304 	and.w	r3, r3, #4
 80173b6:	2b00      	cmp	r3, #0
 80173b8:	d105      	bne.n	80173c6 <mg_timer_poll+0xaa>
      t->fn(t->arg);
 80173ba:	69fb      	ldr	r3, [r7, #28]
 80173bc:	695b      	ldr	r3, [r3, #20]
 80173be:	69fa      	ldr	r2, [r7, #28]
 80173c0:	6992      	ldr	r2, [r2, #24]
 80173c2:	4610      	mov	r0, r2
 80173c4:	4798      	blx	r3
    }
    t->flags |= MG_TIMER_CALLED;
 80173c6:	69fb      	ldr	r3, [r7, #28]
 80173c8:	691b      	ldr	r3, [r3, #16]
 80173ca:	f043 0204 	orr.w	r2, r3, #4
 80173ce:	69fb      	ldr	r3, [r7, #28]
 80173d0:	611a      	str	r2, [r3, #16]

    // If this timer is not repeating and marked AUTODELETE, remove it
    if (!(t->flags & MG_TIMER_REPEAT) && (t->flags & MG_TIMER_AUTODELETE)) {
 80173d2:	69fb      	ldr	r3, [r7, #28]
 80173d4:	691b      	ldr	r3, [r3, #16]
 80173d6:	f003 0301 	and.w	r3, r3, #1
 80173da:	2b00      	cmp	r3, #0
 80173dc:	d10e      	bne.n	80173fc <mg_timer_poll+0xe0>
 80173de:	69fb      	ldr	r3, [r7, #28]
 80173e0:	691b      	ldr	r3, [r3, #16]
 80173e2:	f003 0308 	and.w	r3, r3, #8
 80173e6:	2b00      	cmp	r3, #0
 80173e8:	d008      	beq.n	80173fc <mg_timer_poll+0xe0>
      mg_timer_free(head, t);
 80173ea:	69f9      	ldr	r1, [r7, #28]
 80173ec:	68f8      	ldr	r0, [r7, #12]
 80173ee:	f7ff ff10 	bl	8017212 <mg_timer_free>
      free(t);
 80173f2:	69f8      	ldr	r0, [r7, #28]
 80173f4:	f00e fade 	bl	80259b4 <free>
 80173f8:	e000      	b.n	80173fc <mg_timer_poll+0xe0>
    if (!once && !expired) continue;
 80173fa:	bf00      	nop
  for (t = *head; t != NULL; t = tmp) {
 80173fc:	697b      	ldr	r3, [r7, #20]
 80173fe:	61fb      	str	r3, [r7, #28]
 8017400:	69fb      	ldr	r3, [r7, #28]
 8017402:	2b00      	cmp	r3, #0
 8017404:	d194      	bne.n	8017330 <mg_timer_poll+0x14>
    }
  }
}
 8017406:	bf00      	nop
 8017408:	bf00      	nop
 801740a:	3724      	adds	r7, #36	@ 0x24
 801740c:	46bd      	mov	sp, r7
 801740e:	bd90      	pop	{r4, r7, pc}

08017410 <mg_tls_hexdump>:
    0xe3, 0xb0, 0xc4, 0x42, 0x98, 0xfc, 0x1c, 0x14, 0x9a, 0xfb, 0xf4,
    0xc8, 0x99, 0x6f, 0xb9, 0x24, 0x27, 0xae, 0x41, 0xe4, 0x64, 0x9b,
    0x93, 0x4c, 0xa4, 0x95, 0x99, 0x1b, 0x78, 0x52, 0xb8, 0x55};

// helper to hexdump buffers inline
static void mg_tls_hexdump(const char *msg, uint8_t *buf, size_t bufsz) {
 8017410:	b580      	push	{r7, lr}
 8017412:	b086      	sub	sp, #24
 8017414:	af02      	add	r7, sp, #8
 8017416:	60f8      	str	r0, [r7, #12]
 8017418:	60b9      	str	r1, [r7, #8]
 801741a:	607a      	str	r2, [r7, #4]
  MG_VERBOSE(("%s: %M", msg, mg_print_hex, bufsz, buf));
 801741c:	4b0b      	ldr	r3, [pc, #44]	@ (801744c <mg_tls_hexdump+0x3c>)
 801741e:	681b      	ldr	r3, [r3, #0]
 8017420:	2b03      	cmp	r3, #3
 8017422:	dd0e      	ble.n	8017442 <mg_tls_hexdump+0x32>
 8017424:	4b0a      	ldr	r3, [pc, #40]	@ (8017450 <mg_tls_hexdump+0x40>)
 8017426:	f642 22dc 	movw	r2, #10972	@ 0x2adc
 801742a:	490a      	ldr	r1, [pc, #40]	@ (8017454 <mg_tls_hexdump+0x44>)
 801742c:	2004      	movs	r0, #4
 801742e:	f7f7 fa39 	bl	800e8a4 <mg_log_prefix>
 8017432:	68bb      	ldr	r3, [r7, #8]
 8017434:	9300      	str	r3, [sp, #0]
 8017436:	687b      	ldr	r3, [r7, #4]
 8017438:	4a07      	ldr	r2, [pc, #28]	@ (8017458 <mg_tls_hexdump+0x48>)
 801743a:	68f9      	ldr	r1, [r7, #12]
 801743c:	4807      	ldr	r0, [pc, #28]	@ (801745c <mg_tls_hexdump+0x4c>)
 801743e:	f7f7 fa81 	bl	800e944 <mg_log>
}
 8017442:	bf00      	nop
 8017444:	3710      	adds	r7, #16
 8017446:	46bd      	mov	sp, r7
 8017448:	bd80      	pop	{r7, pc}
 801744a:	bf00      	nop
 801744c:	24000258 	.word	0x24000258
 8017450:	0802da34 	.word	0x0802da34
 8017454:	08029c3c 	.word	0x08029c3c
 8017458:	08013521 	.word	0x08013521
 801745c:	0802b5f8 	.word	0x0802b5f8

08017460 <mg_der_parse>:
  uint8_t type;
  uint32_t len;
  uint8_t *value;
};

static int mg_der_parse(uint8_t *der, size_t dersz, struct mg_der_tlv *tlv) {
 8017460:	b480      	push	{r7}
 8017462:	b089      	sub	sp, #36	@ 0x24
 8017464:	af00      	add	r7, sp, #0
 8017466:	60f8      	str	r0, [r7, #12]
 8017468:	60b9      	str	r1, [r7, #8]
 801746a:	607a      	str	r2, [r7, #4]
  size_t header_len = 2;
 801746c:	2302      	movs	r3, #2
 801746e:	61fb      	str	r3, [r7, #28]
  uint32_t len = dersz < 2 ? 0 : der[1];
 8017470:	68bb      	ldr	r3, [r7, #8]
 8017472:	2b01      	cmp	r3, #1
 8017474:	d903      	bls.n	801747e <mg_der_parse+0x1e>
 8017476:	68fb      	ldr	r3, [r7, #12]
 8017478:	3301      	adds	r3, #1
 801747a:	781b      	ldrb	r3, [r3, #0]
 801747c:	e000      	b.n	8017480 <mg_der_parse+0x20>
 801747e:	2300      	movs	r3, #0
 8017480:	61bb      	str	r3, [r7, #24]
  if (dersz < 2) return -1;  // Invalid DER
 8017482:	68bb      	ldr	r3, [r7, #8]
 8017484:	2b01      	cmp	r3, #1
 8017486:	d802      	bhi.n	801748e <mg_der_parse+0x2e>
 8017488:	f04f 33ff 	mov.w	r3, #4294967295
 801748c:	e042      	b.n	8017514 <mg_der_parse+0xb4>
  tlv->type = der[0];
 801748e:	68fb      	ldr	r3, [r7, #12]
 8017490:	781a      	ldrb	r2, [r3, #0]
 8017492:	687b      	ldr	r3, [r7, #4]
 8017494:	701a      	strb	r2, [r3, #0]
  if (len > 0x7F) {  // long-form length
 8017496:	69bb      	ldr	r3, [r7, #24]
 8017498:	2b7f      	cmp	r3, #127	@ 0x7f
 801749a:	d927      	bls.n	80174ec <mg_der_parse+0x8c>
    uint8_t len_bytes = len & 0x7F;
 801749c:	69bb      	ldr	r3, [r7, #24]
 801749e:	b2db      	uxtb	r3, r3
 80174a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80174a4:	75bb      	strb	r3, [r7, #22]
    if (dersz < (size_t) (2 + len_bytes)) return -1;
 80174a6:	7dbb      	ldrb	r3, [r7, #22]
 80174a8:	3302      	adds	r3, #2
 80174aa:	461a      	mov	r2, r3
 80174ac:	68bb      	ldr	r3, [r7, #8]
 80174ae:	4293      	cmp	r3, r2
 80174b0:	d202      	bcs.n	80174b8 <mg_der_parse+0x58>
 80174b2:	f04f 33ff 	mov.w	r3, #4294967295
 80174b6:	e02d      	b.n	8017514 <mg_der_parse+0xb4>
    len = 0;
 80174b8:	2300      	movs	r3, #0
 80174ba:	61bb      	str	r3, [r7, #24]
    for (uint8_t i = 0; i < len_bytes; i++) {
 80174bc:	2300      	movs	r3, #0
 80174be:	75fb      	strb	r3, [r7, #23]
 80174c0:	e00c      	b.n	80174dc <mg_der_parse+0x7c>
      len = (len << 8) | der[2 + i];
 80174c2:	69bb      	ldr	r3, [r7, #24]
 80174c4:	021b      	lsls	r3, r3, #8
 80174c6:	7dfa      	ldrb	r2, [r7, #23]
 80174c8:	3202      	adds	r2, #2
 80174ca:	4611      	mov	r1, r2
 80174cc:	68fa      	ldr	r2, [r7, #12]
 80174ce:	440a      	add	r2, r1
 80174d0:	7812      	ldrb	r2, [r2, #0]
 80174d2:	4313      	orrs	r3, r2
 80174d4:	61bb      	str	r3, [r7, #24]
    for (uint8_t i = 0; i < len_bytes; i++) {
 80174d6:	7dfb      	ldrb	r3, [r7, #23]
 80174d8:	3301      	adds	r3, #1
 80174da:	75fb      	strb	r3, [r7, #23]
 80174dc:	7dfa      	ldrb	r2, [r7, #23]
 80174de:	7dbb      	ldrb	r3, [r7, #22]
 80174e0:	429a      	cmp	r2, r3
 80174e2:	d3ee      	bcc.n	80174c2 <mg_der_parse+0x62>
    }
    header_len += len_bytes;
 80174e4:	7dbb      	ldrb	r3, [r7, #22]
 80174e6:	69fa      	ldr	r2, [r7, #28]
 80174e8:	4413      	add	r3, r2
 80174ea:	61fb      	str	r3, [r7, #28]
  }
  if (dersz < header_len + len) return -1;
 80174ec:	69fa      	ldr	r2, [r7, #28]
 80174ee:	69bb      	ldr	r3, [r7, #24]
 80174f0:	4413      	add	r3, r2
 80174f2:	68ba      	ldr	r2, [r7, #8]
 80174f4:	429a      	cmp	r2, r3
 80174f6:	d202      	bcs.n	80174fe <mg_der_parse+0x9e>
 80174f8:	f04f 33ff 	mov.w	r3, #4294967295
 80174fc:	e00a      	b.n	8017514 <mg_der_parse+0xb4>
  tlv->len = len;
 80174fe:	687b      	ldr	r3, [r7, #4]
 8017500:	69ba      	ldr	r2, [r7, #24]
 8017502:	605a      	str	r2, [r3, #4]
  tlv->value = der + header_len;
 8017504:	68fa      	ldr	r2, [r7, #12]
 8017506:	69fb      	ldr	r3, [r7, #28]
 8017508:	441a      	add	r2, r3
 801750a:	687b      	ldr	r3, [r7, #4]
 801750c:	609a      	str	r2, [r3, #8]
  return (int) (header_len + len);
 801750e:	69fa      	ldr	r2, [r7, #28]
 8017510:	69bb      	ldr	r3, [r7, #24]
 8017512:	4413      	add	r3, r2
}
 8017514:	4618      	mov	r0, r3
 8017516:	3724      	adds	r7, #36	@ 0x24
 8017518:	46bd      	mov	sp, r7
 801751a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801751e:	4770      	bx	lr

08017520 <mg_der_next>:

static int mg_der_next(struct mg_der_tlv *parent, struct mg_der_tlv *child) {
 8017520:	b580      	push	{r7, lr}
 8017522:	b084      	sub	sp, #16
 8017524:	af00      	add	r7, sp, #0
 8017526:	6078      	str	r0, [r7, #4]
 8017528:	6039      	str	r1, [r7, #0]
  if (parent->len == 0) return 0;
 801752a:	687b      	ldr	r3, [r7, #4]
 801752c:	685b      	ldr	r3, [r3, #4]
 801752e:	2b00      	cmp	r3, #0
 8017530:	d101      	bne.n	8017536 <mg_der_next+0x16>
 8017532:	2300      	movs	r3, #0
 8017534:	e01b      	b.n	801756e <mg_der_next+0x4e>
  int consumed = mg_der_parse(parent->value, parent->len, child);
 8017536:	687b      	ldr	r3, [r7, #4]
 8017538:	6898      	ldr	r0, [r3, #8]
 801753a:	687b      	ldr	r3, [r7, #4]
 801753c:	685b      	ldr	r3, [r3, #4]
 801753e:	683a      	ldr	r2, [r7, #0]
 8017540:	4619      	mov	r1, r3
 8017542:	f7ff ff8d 	bl	8017460 <mg_der_parse>
 8017546:	60f8      	str	r0, [r7, #12]
  if (consumed < 0) return -1;
 8017548:	68fb      	ldr	r3, [r7, #12]
 801754a:	2b00      	cmp	r3, #0
 801754c:	da02      	bge.n	8017554 <mg_der_next+0x34>
 801754e:	f04f 33ff 	mov.w	r3, #4294967295
 8017552:	e00c      	b.n	801756e <mg_der_next+0x4e>
  parent->value += consumed;
 8017554:	687b      	ldr	r3, [r7, #4]
 8017556:	689a      	ldr	r2, [r3, #8]
 8017558:	68fb      	ldr	r3, [r7, #12]
 801755a:	441a      	add	r2, r3
 801755c:	687b      	ldr	r3, [r7, #4]
 801755e:	609a      	str	r2, [r3, #8]
  parent->len -= (uint32_t) consumed;
 8017560:	687b      	ldr	r3, [r7, #4]
 8017562:	685a      	ldr	r2, [r3, #4]
 8017564:	68fb      	ldr	r3, [r7, #12]
 8017566:	1ad2      	subs	r2, r2, r3
 8017568:	687b      	ldr	r3, [r7, #4]
 801756a:	605a      	str	r2, [r3, #4]
  return 1;
 801756c:	2301      	movs	r3, #1
}
 801756e:	4618      	mov	r0, r3
 8017570:	3710      	adds	r7, #16
 8017572:	46bd      	mov	sp, r7
 8017574:	bd80      	pop	{r7, pc}

08017576 <mg_der_find_oid>:

static int mg_der_find_oid(struct mg_der_tlv *tlv, const uint8_t *oid,
                           size_t oid_len, struct mg_der_tlv *found) {
 8017576:	b580      	push	{r7, lr}
 8017578:	b08e      	sub	sp, #56	@ 0x38
 801757a:	af00      	add	r7, sp, #0
 801757c:	60f8      	str	r0, [r7, #12]
 801757e:	60b9      	str	r1, [r7, #8]
 8017580:	607a      	str	r2, [r7, #4]
 8017582:	603b      	str	r3, [r7, #0]
  struct mg_der_tlv parent, child;
  parent = *tlv;
 8017584:	68fa      	ldr	r2, [r7, #12]
 8017586:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801758a:	ca07      	ldmia	r2, {r0, r1, r2}
 801758c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  while (mg_der_next(&parent, &child) > 0) {
 8017590:	e031      	b.n	80175f6 <mg_der_find_oid+0x80>
    if (child.type == 0x06 && child.len == oid_len &&
 8017592:	f897 3020 	ldrb.w	r3, [r7, #32]
 8017596:	2b06      	cmp	r3, #6
 8017598:	d114      	bne.n	80175c4 <mg_der_find_oid+0x4e>
 801759a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801759c:	687a      	ldr	r2, [r7, #4]
 801759e:	429a      	cmp	r2, r3
 80175a0:	d110      	bne.n	80175c4 <mg_der_find_oid+0x4e>
        memcmp(child.value, oid, oid_len) == 0) {
 80175a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80175a4:	687a      	ldr	r2, [r7, #4]
 80175a6:	68b9      	ldr	r1, [r7, #8]
 80175a8:	4618      	mov	r0, r3
 80175aa:	f010 f863 	bl	8027674 <memcmp>
 80175ae:	4603      	mov	r3, r0
    if (child.type == 0x06 && child.len == oid_len &&
 80175b0:	2b00      	cmp	r3, #0
 80175b2:	d107      	bne.n	80175c4 <mg_der_find_oid+0x4e>
      return mg_der_next(&parent, found);
 80175b4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80175b8:	6839      	ldr	r1, [r7, #0]
 80175ba:	4618      	mov	r0, r3
 80175bc:	f7ff ffb0 	bl	8017520 <mg_der_next>
 80175c0:	4603      	mov	r3, r0
 80175c2:	e024      	b.n	801760e <mg_der_find_oid+0x98>
    } else if (child.type & 0x20) {
 80175c4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80175c8:	f003 0320 	and.w	r3, r3, #32
 80175cc:	2b00      	cmp	r3, #0
 80175ce:	d012      	beq.n	80175f6 <mg_der_find_oid+0x80>
      struct mg_der_tlv sub_parent = child;
 80175d0:	f107 0314 	add.w	r3, r7, #20
 80175d4:	f107 0220 	add.w	r2, r7, #32
 80175d8:	ca07      	ldmia	r2, {r0, r1, r2}
 80175da:	e883 0007 	stmia.w	r3, {r0, r1, r2}
      if (mg_der_find_oid(&sub_parent, oid, oid_len, found)) return 1;
 80175de:	f107 0014 	add.w	r0, r7, #20
 80175e2:	683b      	ldr	r3, [r7, #0]
 80175e4:	687a      	ldr	r2, [r7, #4]
 80175e6:	68b9      	ldr	r1, [r7, #8]
 80175e8:	f7ff ffc5 	bl	8017576 <mg_der_find_oid>
 80175ec:	4603      	mov	r3, r0
 80175ee:	2b00      	cmp	r3, #0
 80175f0:	d001      	beq.n	80175f6 <mg_der_find_oid+0x80>
 80175f2:	2301      	movs	r3, #1
 80175f4:	e00b      	b.n	801760e <mg_der_find_oid+0x98>
  while (mg_der_next(&parent, &child) > 0) {
 80175f6:	f107 0220 	add.w	r2, r7, #32
 80175fa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80175fe:	4611      	mov	r1, r2
 8017600:	4618      	mov	r0, r3
 8017602:	f7ff ff8d 	bl	8017520 <mg_der_next>
 8017606:	4603      	mov	r3, r0
 8017608:	2b00      	cmp	r3, #0
 801760a:	dcc2      	bgt.n	8017592 <mg_der_find_oid+0x1c>
    }
  }
  return 0;
 801760c:	2300      	movs	r3, #0
}
 801760e:	4618      	mov	r0, r3
 8017610:	3738      	adds	r7, #56	@ 0x38
 8017612:	46bd      	mov	sp, r7
 8017614:	bd80      	pop	{r7, pc}

08017616 <mg_der_to_tlv>:
  }
}
#endif

// parse DER into a TLV record
static int mg_der_to_tlv(uint8_t *der, size_t dersz, struct mg_der_tlv *tlv) {
 8017616:	b480      	push	{r7}
 8017618:	b087      	sub	sp, #28
 801761a:	af00      	add	r7, sp, #0
 801761c:	60f8      	str	r0, [r7, #12]
 801761e:	60b9      	str	r1, [r7, #8]
 8017620:	607a      	str	r2, [r7, #4]
  if (dersz < 2) {
 8017622:	68bb      	ldr	r3, [r7, #8]
 8017624:	2b01      	cmp	r3, #1
 8017626:	d802      	bhi.n	801762e <mg_der_to_tlv+0x18>
    return -1;
 8017628:	f04f 33ff 	mov.w	r3, #4294967295
 801762c:	e041      	b.n	80176b2 <mg_der_to_tlv+0x9c>
  }
  tlv->type = der[0];
 801762e:	68fb      	ldr	r3, [r7, #12]
 8017630:	781a      	ldrb	r2, [r3, #0]
 8017632:	687b      	ldr	r3, [r7, #4]
 8017634:	701a      	strb	r2, [r3, #0]
  tlv->len = der[1];
 8017636:	68fb      	ldr	r3, [r7, #12]
 8017638:	3301      	adds	r3, #1
 801763a:	781b      	ldrb	r3, [r3, #0]
 801763c:	461a      	mov	r2, r3
 801763e:	687b      	ldr	r3, [r7, #4]
 8017640:	605a      	str	r2, [r3, #4]
  tlv->value = der + 2;
 8017642:	68fb      	ldr	r3, [r7, #12]
 8017644:	1c9a      	adds	r2, r3, #2
 8017646:	687b      	ldr	r3, [r7, #4]
 8017648:	609a      	str	r2, [r3, #8]
  if (tlv->len > 0x7f) {
 801764a:	687b      	ldr	r3, [r7, #4]
 801764c:	685b      	ldr	r3, [r3, #4]
 801764e:	2b7f      	cmp	r3, #127	@ 0x7f
 8017650:	d921      	bls.n	8017696 <mg_der_to_tlv+0x80>
    uint32_t i, n = tlv->len - 0x80;
 8017652:	687b      	ldr	r3, [r7, #4]
 8017654:	685b      	ldr	r3, [r3, #4]
 8017656:	3b80      	subs	r3, #128	@ 0x80
 8017658:	613b      	str	r3, [r7, #16]
    tlv->len = 0;
 801765a:	687b      	ldr	r3, [r7, #4]
 801765c:	2200      	movs	r2, #0
 801765e:	605a      	str	r2, [r3, #4]
    for (i = 0; i < n; i++) {
 8017660:	2300      	movs	r3, #0
 8017662:	617b      	str	r3, [r7, #20]
 8017664:	e00d      	b.n	8017682 <mg_der_to_tlv+0x6c>
      tlv->len = (tlv->len << 8) | (der[2 + i]);
 8017666:	687b      	ldr	r3, [r7, #4]
 8017668:	685b      	ldr	r3, [r3, #4]
 801766a:	021b      	lsls	r3, r3, #8
 801766c:	697a      	ldr	r2, [r7, #20]
 801766e:	3202      	adds	r2, #2
 8017670:	68f9      	ldr	r1, [r7, #12]
 8017672:	440a      	add	r2, r1
 8017674:	7812      	ldrb	r2, [r2, #0]
 8017676:	431a      	orrs	r2, r3
 8017678:	687b      	ldr	r3, [r7, #4]
 801767a:	605a      	str	r2, [r3, #4]
    for (i = 0; i < n; i++) {
 801767c:	697b      	ldr	r3, [r7, #20]
 801767e:	3301      	adds	r3, #1
 8017680:	617b      	str	r3, [r7, #20]
 8017682:	697a      	ldr	r2, [r7, #20]
 8017684:	693b      	ldr	r3, [r7, #16]
 8017686:	429a      	cmp	r2, r3
 8017688:	d3ed      	bcc.n	8017666 <mg_der_to_tlv+0x50>
    }
    tlv->value = der + 2 + n;
 801768a:	693b      	ldr	r3, [r7, #16]
 801768c:	3302      	adds	r3, #2
 801768e:	68fa      	ldr	r2, [r7, #12]
 8017690:	441a      	add	r2, r3
 8017692:	687b      	ldr	r3, [r7, #4]
 8017694:	609a      	str	r2, [r3, #8]
  }
  if (der + dersz < tlv->value + tlv->len) {
 8017696:	68fa      	ldr	r2, [r7, #12]
 8017698:	68bb      	ldr	r3, [r7, #8]
 801769a:	441a      	add	r2, r3
 801769c:	687b      	ldr	r3, [r7, #4]
 801769e:	6899      	ldr	r1, [r3, #8]
 80176a0:	687b      	ldr	r3, [r7, #4]
 80176a2:	685b      	ldr	r3, [r3, #4]
 80176a4:	440b      	add	r3, r1
 80176a6:	429a      	cmp	r2, r3
 80176a8:	d202      	bcs.n	80176b0 <mg_der_to_tlv+0x9a>
    return -1;
 80176aa:	f04f 33ff 	mov.w	r3, #4294967295
 80176ae:	e000      	b.n	80176b2 <mg_der_to_tlv+0x9c>
  }
  return 0;
 80176b0:	2300      	movs	r3, #0
}
 80176b2:	4618      	mov	r0, r3
 80176b4:	371c      	adds	r7, #28
 80176b6:	46bd      	mov	sp, r7
 80176b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176bc:	4770      	bx	lr

080176be <mg_tls_got_record>:

// Did we receive a full TLS record in the c->rtls buffer?
static bool mg_tls_got_record(struct mg_connection *c) {
 80176be:	b480      	push	{r7}
 80176c0:	b083      	sub	sp, #12
 80176c2:	af00      	add	r7, sp, #0
 80176c4:	6078      	str	r0, [r7, #4]
  return c->rtls.len >= (size_t) TLS_RECHDR_SIZE &&
 80176c6:	687b      	ldr	r3, [r7, #4]
 80176c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80176ca:	2b04      	cmp	r3, #4
 80176cc:	d915      	bls.n	80176fa <mg_tls_got_record+0x3c>
         c->rtls.len >=
 80176ce:	687b      	ldr	r3, [r7, #4]
 80176d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
             (size_t) (TLS_RECHDR_SIZE + MG_LOAD_BE16(c->rtls.buf + 3));
 80176d2:	687a      	ldr	r2, [r7, #4]
 80176d4:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80176d6:	3203      	adds	r2, #3
 80176d8:	7812      	ldrb	r2, [r2, #0]
 80176da:	b212      	sxth	r2, r2
 80176dc:	0212      	lsls	r2, r2, #8
 80176de:	b211      	sxth	r1, r2
 80176e0:	687a      	ldr	r2, [r7, #4]
 80176e2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80176e4:	3204      	adds	r2, #4
 80176e6:	7812      	ldrb	r2, [r2, #0]
 80176e8:	b212      	sxth	r2, r2
 80176ea:	430a      	orrs	r2, r1
 80176ec:	b212      	sxth	r2, r2
 80176ee:	b292      	uxth	r2, r2
 80176f0:	3205      	adds	r2, #5
  return c->rtls.len >= (size_t) TLS_RECHDR_SIZE &&
 80176f2:	4293      	cmp	r3, r2
 80176f4:	d301      	bcc.n	80176fa <mg_tls_got_record+0x3c>
 80176f6:	2301      	movs	r3, #1
 80176f8:	e000      	b.n	80176fc <mg_tls_got_record+0x3e>
 80176fa:	2300      	movs	r3, #0
 80176fc:	f003 0301 	and.w	r3, r3, #1
 8017700:	b2db      	uxtb	r3, r3
}
 8017702:	4618      	mov	r0, r3
 8017704:	370c      	adds	r7, #12
 8017706:	46bd      	mov	sp, r7
 8017708:	f85d 7b04 	ldr.w	r7, [sp], #4
 801770c:	4770      	bx	lr

0801770e <mg_tls_drop_record>:

// Remove a single TLS record from the recv buffer
static void mg_tls_drop_record(struct mg_connection *c) {
 801770e:	b580      	push	{r7, lr}
 8017710:	b084      	sub	sp, #16
 8017712:	af00      	add	r7, sp, #0
 8017714:	6078      	str	r0, [r7, #4]
  struct mg_iobuf *rio = &c->rtls;
 8017716:	687b      	ldr	r3, [r7, #4]
 8017718:	3368      	adds	r3, #104	@ 0x68
 801771a:	60fb      	str	r3, [r7, #12]
  uint16_t n = MG_LOAD_BE16(rio->buf + 3) + TLS_RECHDR_SIZE;
 801771c:	68fb      	ldr	r3, [r7, #12]
 801771e:	681b      	ldr	r3, [r3, #0]
 8017720:	3303      	adds	r3, #3
 8017722:	781b      	ldrb	r3, [r3, #0]
 8017724:	b21b      	sxth	r3, r3
 8017726:	021b      	lsls	r3, r3, #8
 8017728:	b21a      	sxth	r2, r3
 801772a:	68fb      	ldr	r3, [r7, #12]
 801772c:	681b      	ldr	r3, [r3, #0]
 801772e:	3304      	adds	r3, #4
 8017730:	781b      	ldrb	r3, [r3, #0]
 8017732:	b21b      	sxth	r3, r3
 8017734:	4313      	orrs	r3, r2
 8017736:	b21b      	sxth	r3, r3
 8017738:	b29b      	uxth	r3, r3
 801773a:	3305      	adds	r3, #5
 801773c:	817b      	strh	r3, [r7, #10]
  mg_iobuf_del(rio, 0, n);
 801773e:	897b      	ldrh	r3, [r7, #10]
 8017740:	461a      	mov	r2, r3
 8017742:	2100      	movs	r1, #0
 8017744:	68f8      	ldr	r0, [r7, #12]
 8017746:	f7f6 f895 	bl	800d874 <mg_iobuf_del>
}
 801774a:	bf00      	nop
 801774c:	3710      	adds	r7, #16
 801774e:	46bd      	mov	sp, r7
 8017750:	bd80      	pop	{r7, pc}
	...

08017754 <mg_tls_drop_message>:

// Remove a single TLS message from decrypted buffer, remove the wrapping
// record if it was the last message within a record
static void mg_tls_drop_message(struct mg_connection *c) {
 8017754:	b580      	push	{r7, lr}
 8017756:	b086      	sub	sp, #24
 8017758:	af00      	add	r7, sp, #0
 801775a:	6078      	str	r0, [r7, #4]
  uint32_t len;
  struct tls_data *tls = (struct tls_data *) c->tls;
 801775c:	687b      	ldr	r3, [r7, #4]
 801775e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8017762:	617b      	str	r3, [r7, #20]
  unsigned char *recv_buf = &c->rtls.buf[tls->recv_offset];
 8017764:	687b      	ldr	r3, [r7, #4]
 8017766:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8017768:	697b      	ldr	r3, [r7, #20]
 801776a:	695b      	ldr	r3, [r3, #20]
 801776c:	4413      	add	r3, r2
 801776e:	613b      	str	r3, [r7, #16]
  if (tls->recv_len == 0) return;
 8017770:	697b      	ldr	r3, [r7, #20]
 8017772:	699b      	ldr	r3, [r3, #24]
 8017774:	2b00      	cmp	r3, #0
 8017776:	d033      	beq.n	80177e0 <mg_tls_drop_message+0x8c>
  len = MG_LOAD_BE24(recv_buf + 1) + TLS_MSGHDR_SIZE;
 8017778:	693b      	ldr	r3, [r7, #16]
 801777a:	3301      	adds	r3, #1
 801777c:	781b      	ldrb	r3, [r3, #0]
 801777e:	041a      	lsls	r2, r3, #16
 8017780:	693b      	ldr	r3, [r7, #16]
 8017782:	3302      	adds	r3, #2
 8017784:	781b      	ldrb	r3, [r3, #0]
 8017786:	021b      	lsls	r3, r3, #8
 8017788:	4313      	orrs	r3, r2
 801778a:	693a      	ldr	r2, [r7, #16]
 801778c:	3203      	adds	r2, #3
 801778e:	7812      	ldrb	r2, [r2, #0]
 8017790:	4313      	orrs	r3, r2
 8017792:	3304      	adds	r3, #4
 8017794:	60fb      	str	r3, [r7, #12]
  if (tls->recv_len < len) {
 8017796:	697b      	ldr	r3, [r7, #20]
 8017798:	699b      	ldr	r3, [r3, #24]
 801779a:	68fa      	ldr	r2, [r7, #12]
 801779c:	429a      	cmp	r2, r3
 801779e:	d904      	bls.n	80177aa <mg_tls_drop_message+0x56>
    mg_error(c, "wrong size");
 80177a0:	4911      	ldr	r1, [pc, #68]	@ (80177e8 <mg_tls_drop_message+0x94>)
 80177a2:	6878      	ldr	r0, [r7, #4]
 80177a4:	f7f1 fa06 	bl	8008bb4 <mg_error>
    return;
 80177a8:	e01b      	b.n	80177e2 <mg_tls_drop_message+0x8e>
  }
  mg_sha256_update(&tls->sha256, recv_buf, len);
 80177aa:	697b      	ldr	r3, [r7, #20]
 80177ac:	3320      	adds	r3, #32
 80177ae:	68fa      	ldr	r2, [r7, #12]
 80177b0:	6939      	ldr	r1, [r7, #16]
 80177b2:	4618      	mov	r0, r3
 80177b4:	f7fd fdee 	bl	8015394 <mg_sha256_update>
  tls->recv_offset += len;
 80177b8:	697b      	ldr	r3, [r7, #20]
 80177ba:	695a      	ldr	r2, [r3, #20]
 80177bc:	68fb      	ldr	r3, [r7, #12]
 80177be:	441a      	add	r2, r3
 80177c0:	697b      	ldr	r3, [r7, #20]
 80177c2:	615a      	str	r2, [r3, #20]
  tls->recv_len -= len;
 80177c4:	697b      	ldr	r3, [r7, #20]
 80177c6:	699a      	ldr	r2, [r3, #24]
 80177c8:	68fb      	ldr	r3, [r7, #12]
 80177ca:	1ad2      	subs	r2, r2, r3
 80177cc:	697b      	ldr	r3, [r7, #20]
 80177ce:	619a      	str	r2, [r3, #24]
  if (tls->recv_len == 0) {
 80177d0:	697b      	ldr	r3, [r7, #20]
 80177d2:	699b      	ldr	r3, [r3, #24]
 80177d4:	2b00      	cmp	r3, #0
 80177d6:	d104      	bne.n	80177e2 <mg_tls_drop_message+0x8e>
    mg_tls_drop_record(c);
 80177d8:	6878      	ldr	r0, [r7, #4]
 80177da:	f7ff ff98 	bl	801770e <mg_tls_drop_record>
 80177de:	e000      	b.n	80177e2 <mg_tls_drop_message+0x8e>
  if (tls->recv_len == 0) return;
 80177e0:	bf00      	nop
  }
}
 80177e2:	3718      	adds	r7, #24
 80177e4:	46bd      	mov	sp, r7
 80177e6:	bd80      	pop	{r7, pc}
 80177e8:	0802b600 	.word	0x0802b600

080177ec <mg_tls_derive_secret>:

// TLS1.3 secret derivation based on the key label
static void mg_tls_derive_secret(const char *label, uint8_t *key, size_t keysz,
                                 uint8_t *data, size_t datasz, uint8_t *hash,
                                 size_t hashsz) {
 80177ec:	b590      	push	{r4, r7, lr}
 80177ee:	b0d1      	sub	sp, #324	@ 0x144
 80177f0:	af02      	add	r7, sp, #8
 80177f2:	f507 749c 	add.w	r4, r7, #312	@ 0x138
 80177f6:	f5a4 7496 	sub.w	r4, r4, #300	@ 0x12c
 80177fa:	6020      	str	r0, [r4, #0]
 80177fc:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 8017800:	f5a0 7098 	sub.w	r0, r0, #304	@ 0x130
 8017804:	6001      	str	r1, [r0, #0]
 8017806:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 801780a:	f5a1 719a 	sub.w	r1, r1, #308	@ 0x134
 801780e:	600a      	str	r2, [r1, #0]
 8017810:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8017814:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 8017818:	6013      	str	r3, [r2, #0]
  size_t labelsz = strlen(label);
 801781a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801781e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8017822:	6818      	ldr	r0, [r3, #0]
 8017824:	f7e8 fdd4 	bl	80003d0 <strlen>
 8017828:	f8c7 0134 	str.w	r0, [r7, #308]	@ 0x134
  uint8_t secret[32];
  uint8_t packed[256] = {0, (uint8_t) hashsz, (uint8_t) labelsz};
 801782c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8017830:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8017834:	4618      	mov	r0, r3
 8017836:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801783a:	461a      	mov	r2, r3
 801783c:	2100      	movs	r1, #0
 801783e:	f00f ff43 	bl	80276c8 <memset>
 8017842:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8017846:	b2da      	uxtb	r2, r3
 8017848:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801784c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8017850:	705a      	strb	r2, [r3, #1]
 8017852:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8017856:	b2da      	uxtb	r2, r3
 8017858:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801785c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8017860:	709a      	strb	r2, [r3, #2]
  // TODO: assert lengths of label, key, data and hash
  if (labelsz > 0) memmove(packed + 3, label, labelsz);
 8017862:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8017866:	2b00      	cmp	r3, #0
 8017868:	d00c      	beq.n	8017884 <mg_tls_derive_secret+0x98>
 801786a:	f107 0314 	add.w	r3, r7, #20
 801786e:	3303      	adds	r3, #3
 8017870:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8017874:	f5a2 7196 	sub.w	r1, r2, #300	@ 0x12c
 8017878:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 801787c:	6809      	ldr	r1, [r1, #0]
 801787e:	4618      	mov	r0, r3
 8017880:	f00f ff08 	bl	8027694 <memmove>
  packed[3 + labelsz] = (uint8_t) datasz;
 8017884:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8017888:	3303      	adds	r3, #3
 801788a:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 801788e:	b2d1      	uxtb	r1, r2
 8017890:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8017894:	f5a2 7292 	sub.w	r2, r2, #292	@ 0x124
 8017898:	54d1      	strb	r1, [r2, r3]
  if (datasz > 0) memmove(packed + labelsz + 4, data, datasz);
 801789a:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 801789e:	2b00      	cmp	r3, #0
 80178a0:	d00e      	beq.n	80178c0 <mg_tls_derive_secret+0xd4>
 80178a2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80178a6:	3304      	adds	r3, #4
 80178a8:	f107 0214 	add.w	r2, r7, #20
 80178ac:	18d0      	adds	r0, r2, r3
 80178ae:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80178b2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80178b6:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80178ba:	6819      	ldr	r1, [r3, #0]
 80178bc:	f00f feea 	bl	8027694 <memmove>
  packed[4 + labelsz + datasz] = 1;
 80178c0:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 80178c4:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 80178c8:	4413      	add	r3, r2
 80178ca:	3304      	adds	r3, #4
 80178cc:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80178d0:	f5a2 7292 	sub.w	r2, r2, #292	@ 0x124
 80178d4:	2101      	movs	r1, #1
 80178d6:	54d1      	strb	r1, [r2, r3]

  mg_hmac_sha256(secret, key, keysz, packed, 5 + labelsz + datasz);
 80178d8:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 80178dc:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 80178e0:	4413      	add	r3, r2
 80178e2:	3305      	adds	r3, #5
 80178e4:	f107 0414 	add.w	r4, r7, #20
 80178e8:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80178ec:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 80178f0:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 80178f4:	f5a1 7198 	sub.w	r1, r1, #304	@ 0x130
 80178f8:	f507 708a 	add.w	r0, r7, #276	@ 0x114
 80178fc:	9300      	str	r3, [sp, #0]
 80178fe:	4623      	mov	r3, r4
 8017900:	6812      	ldr	r2, [r2, #0]
 8017902:	6809      	ldr	r1, [r1, #0]
 8017904:	f7fd fed3 	bl	80156ae <mg_hmac_sha256>
  memmove(hash, secret, hashsz);
 8017908:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 801790c:	f8d7 2150 	ldr.w	r2, [r7, #336]	@ 0x150
 8017910:	4619      	mov	r1, r3
 8017912:	f8d7 014c 	ldr.w	r0, [r7, #332]	@ 0x14c
 8017916:	f00f febd 	bl	8027694 <memmove>
}
 801791a:	bf00      	nop
 801791c:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 8017920:	46bd      	mov	sp, r7
 8017922:	bd90      	pop	{r4, r7, pc}

08017924 <mg_tls_generate_handshake_keys>:

// at this point we have x25519 shared secret, we can generate a set of derived
// handshake encryption keys
static void mg_tls_generate_handshake_keys(struct mg_connection *c) {
 8017924:	b580      	push	{r7, lr}
 8017926:	b0cc      	sub	sp, #304	@ 0x130
 8017928:	af04      	add	r7, sp, #16
 801792a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801792e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8017932:	6018      	str	r0, [r3, #0]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8017934:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8017938:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 801793c:	681b      	ldr	r3, [r3, #0]
 801793e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8017942:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  uint8_t pre_extract_secret[32];
  uint8_t hello_hash[32];
  uint8_t server_hs_secret[32];
  uint8_t client_hs_secret[32];
#if CHACHA20
  const size_t keysz = 32;
 8017946:	2320      	movs	r3, #32
 8017948:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
#else
  const size_t keysz = 16;
#endif

  mg_hmac_sha256(early_secret, NULL, 0, zeros, sizeof(zeros));
 801794c:	f107 0088 	add.w	r0, r7, #136	@ 0x88
 8017950:	2320      	movs	r3, #32
 8017952:	9300      	str	r3, [sp, #0]
 8017954:	4b89      	ldr	r3, [pc, #548]	@ (8017b7c <mg_tls_generate_handshake_keys+0x258>)
 8017956:	2200      	movs	r2, #0
 8017958:	2100      	movs	r1, #0
 801795a:	f7fd fea8 	bl	80156ae <mg_hmac_sha256>
  mg_tls_derive_secret("tls13 derived", early_secret, 32, zeros_sha256_digest,
 801795e:	f107 0188 	add.w	r1, r7, #136	@ 0x88
 8017962:	2320      	movs	r3, #32
 8017964:	9302      	str	r3, [sp, #8]
 8017966:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 801796a:	9301      	str	r3, [sp, #4]
 801796c:	2320      	movs	r3, #32
 801796e:	9300      	str	r3, [sp, #0]
 8017970:	4b83      	ldr	r3, [pc, #524]	@ (8017b80 <mg_tls_generate_handshake_keys+0x25c>)
 8017972:	2220      	movs	r2, #32
 8017974:	4883      	ldr	r0, [pc, #524]	@ (8017b84 <mg_tls_generate_handshake_keys+0x260>)
 8017976:	f7ff ff39 	bl	80177ec <mg_tls_derive_secret>
                       32, pre_extract_secret, 32);
  mg_hmac_sha256(tls->enc.handshake_secret, pre_extract_secret,
 801797a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801797e:	f503 6091 	add.w	r0, r3, #1160	@ 0x488
                 sizeof(pre_extract_secret), tls->x25519_sec,
 8017982:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8017986:	33f0      	adds	r3, #240	@ 0xf0
  mg_hmac_sha256(tls->enc.handshake_secret, pre_extract_secret,
 8017988:	f107 0168 	add.w	r1, r7, #104	@ 0x68
 801798c:	2220      	movs	r2, #32
 801798e:	9200      	str	r2, [sp, #0]
 8017990:	2220      	movs	r2, #32
 8017992:	f7fd fe8c 	bl	80156ae <mg_hmac_sha256>
                 sizeof(tls->x25519_sec));
  mg_tls_hexdump("hs secret", tls->enc.handshake_secret, 32);
 8017996:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801799a:	f503 6391 	add.w	r3, r3, #1160	@ 0x488
 801799e:	2220      	movs	r2, #32
 80179a0:	4619      	mov	r1, r3
 80179a2:	4879      	ldr	r0, [pc, #484]	@ (8017b88 <mg_tls_generate_handshake_keys+0x264>)
 80179a4:	f7ff fd34 	bl	8017410 <mg_tls_hexdump>

  // mg_sha256_final is not idempotent, need to copy sha256 context to calculate
  // the digest
  memmove(&sha256, &tls->sha256, sizeof(mg_sha256_ctx));
 80179a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80179ac:	f103 0120 	add.w	r1, r3, #32
 80179b0:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 80179b4:	2270      	movs	r2, #112	@ 0x70
 80179b6:	4618      	mov	r0, r3
 80179b8:	f00f fe6c 	bl	8027694 <memmove>
  mg_sha256_final(hello_hash, &sha256);
 80179bc:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 80179c0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80179c4:	4611      	mov	r1, r2
 80179c6:	4618      	mov	r0, r3
 80179c8:	f7fd fd1d 	bl	8015406 <mg_sha256_final>

  mg_tls_hexdump("hello hash", hello_hash, 32);
 80179cc:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80179d0:	2220      	movs	r2, #32
 80179d2:	4619      	mov	r1, r3
 80179d4:	486d      	ldr	r0, [pc, #436]	@ (8017b8c <mg_tls_generate_handshake_keys+0x268>)
 80179d6:	f7ff fd1b 	bl	8017410 <mg_tls_hexdump>
  // derive keys needed for the rest of the handshake
  mg_tls_derive_secret("tls13 s hs traffic", tls->enc.handshake_secret, 32,
 80179da:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80179de:	f503 6191 	add.w	r1, r3, #1160	@ 0x488
 80179e2:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 80179e6:	2320      	movs	r3, #32
 80179e8:	9302      	str	r3, [sp, #8]
 80179ea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80179ee:	9301      	str	r3, [sp, #4]
 80179f0:	2320      	movs	r3, #32
 80179f2:	9300      	str	r3, [sp, #0]
 80179f4:	4613      	mov	r3, r2
 80179f6:	2220      	movs	r2, #32
 80179f8:	4865      	ldr	r0, [pc, #404]	@ (8017b90 <mg_tls_generate_handshake_keys+0x26c>)
 80179fa:	f7ff fef7 	bl	80177ec <mg_tls_derive_secret>
                       hello_hash, 32, server_hs_secret, 32);
  mg_tls_derive_secret("tls13 c hs traffic", tls->enc.handshake_secret, 32,
 80179fe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8017a02:	f503 6191 	add.w	r1, r3, #1160	@ 0x488
 8017a06:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8017a0a:	2320      	movs	r3, #32
 8017a0c:	9302      	str	r3, [sp, #8]
 8017a0e:	f107 0308 	add.w	r3, r7, #8
 8017a12:	9301      	str	r3, [sp, #4]
 8017a14:	2320      	movs	r3, #32
 8017a16:	9300      	str	r3, [sp, #0]
 8017a18:	4613      	mov	r3, r2
 8017a1a:	2220      	movs	r2, #32
 8017a1c:	485d      	ldr	r0, [pc, #372]	@ (8017b94 <mg_tls_generate_handshake_keys+0x270>)
 8017a1e:	f7ff fee5 	bl	80177ec <mg_tls_derive_secret>
                       hello_hash, 32, client_hs_secret, 32);

  mg_tls_derive_secret("tls13 key", server_hs_secret, 32, NULL, 0,
                       tls->enc.server_write_key, keysz);
 8017a22:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8017a26:	f503 6395 	add.w	r3, r3, #1192	@ 0x4a8
  mg_tls_derive_secret("tls13 key", server_hs_secret, 32, NULL, 0,
 8017a2a:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8017a2e:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8017a32:	9202      	str	r2, [sp, #8]
 8017a34:	9301      	str	r3, [sp, #4]
 8017a36:	2300      	movs	r3, #0
 8017a38:	9300      	str	r3, [sp, #0]
 8017a3a:	2300      	movs	r3, #0
 8017a3c:	2220      	movs	r2, #32
 8017a3e:	4856      	ldr	r0, [pc, #344]	@ (8017b98 <mg_tls_generate_handshake_keys+0x274>)
 8017a40:	f7ff fed4 	bl	80177ec <mg_tls_derive_secret>
  mg_tls_derive_secret("tls13 iv", server_hs_secret, 32, NULL, 0,
                       tls->enc.server_write_iv, 12);
 8017a44:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8017a48:	f503 6399 	add.w	r3, r3, #1224	@ 0x4c8
  mg_tls_derive_secret("tls13 iv", server_hs_secret, 32, NULL, 0,
 8017a4c:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8017a50:	220c      	movs	r2, #12
 8017a52:	9202      	str	r2, [sp, #8]
 8017a54:	9301      	str	r3, [sp, #4]
 8017a56:	2300      	movs	r3, #0
 8017a58:	9300      	str	r3, [sp, #0]
 8017a5a:	2300      	movs	r3, #0
 8017a5c:	2220      	movs	r2, #32
 8017a5e:	484f      	ldr	r0, [pc, #316]	@ (8017b9c <mg_tls_generate_handshake_keys+0x278>)
 8017a60:	f7ff fec4 	bl	80177ec <mg_tls_derive_secret>
  mg_tls_derive_secret("tls13 finished", server_hs_secret, 32, NULL, 0,
                       tls->enc.server_finished_key, 32);
 8017a64:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8017a68:	f203 43d4 	addw	r3, r3, #1236	@ 0x4d4
  mg_tls_derive_secret("tls13 finished", server_hs_secret, 32, NULL, 0,
 8017a6c:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8017a70:	2220      	movs	r2, #32
 8017a72:	9202      	str	r2, [sp, #8]
 8017a74:	9301      	str	r3, [sp, #4]
 8017a76:	2300      	movs	r3, #0
 8017a78:	9300      	str	r3, [sp, #0]
 8017a7a:	2300      	movs	r3, #0
 8017a7c:	2220      	movs	r2, #32
 8017a7e:	4848      	ldr	r0, [pc, #288]	@ (8017ba0 <mg_tls_generate_handshake_keys+0x27c>)
 8017a80:	f7ff feb4 	bl	80177ec <mg_tls_derive_secret>

  mg_tls_derive_secret("tls13 key", client_hs_secret, 32, NULL, 0,
                       tls->enc.client_write_key, keysz);
 8017a84:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8017a88:	f203 43f4 	addw	r3, r3, #1268	@ 0x4f4
  mg_tls_derive_secret("tls13 key", client_hs_secret, 32, NULL, 0,
 8017a8c:	f107 0108 	add.w	r1, r7, #8
 8017a90:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8017a94:	9202      	str	r2, [sp, #8]
 8017a96:	9301      	str	r3, [sp, #4]
 8017a98:	2300      	movs	r3, #0
 8017a9a:	9300      	str	r3, [sp, #0]
 8017a9c:	2300      	movs	r3, #0
 8017a9e:	2220      	movs	r2, #32
 8017aa0:	483d      	ldr	r0, [pc, #244]	@ (8017b98 <mg_tls_generate_handshake_keys+0x274>)
 8017aa2:	f7ff fea3 	bl	80177ec <mg_tls_derive_secret>
  mg_tls_derive_secret("tls13 iv", client_hs_secret, 32, NULL, 0,
                       tls->enc.client_write_iv, 12);
 8017aa6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8017aaa:	f203 5314 	addw	r3, r3, #1300	@ 0x514
  mg_tls_derive_secret("tls13 iv", client_hs_secret, 32, NULL, 0,
 8017aae:	f107 0108 	add.w	r1, r7, #8
 8017ab2:	220c      	movs	r2, #12
 8017ab4:	9202      	str	r2, [sp, #8]
 8017ab6:	9301      	str	r3, [sp, #4]
 8017ab8:	2300      	movs	r3, #0
 8017aba:	9300      	str	r3, [sp, #0]
 8017abc:	2300      	movs	r3, #0
 8017abe:	2220      	movs	r2, #32
 8017ac0:	4836      	ldr	r0, [pc, #216]	@ (8017b9c <mg_tls_generate_handshake_keys+0x278>)
 8017ac2:	f7ff fe93 	bl	80177ec <mg_tls_derive_secret>
  mg_tls_derive_secret("tls13 finished", client_hs_secret, 32, NULL, 0,
                       tls->enc.client_finished_key, 32);
 8017ac6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8017aca:	f503 63a4 	add.w	r3, r3, #1312	@ 0x520
  mg_tls_derive_secret("tls13 finished", client_hs_secret, 32, NULL, 0,
 8017ace:	f107 0108 	add.w	r1, r7, #8
 8017ad2:	2220      	movs	r2, #32
 8017ad4:	9202      	str	r2, [sp, #8]
 8017ad6:	9301      	str	r3, [sp, #4]
 8017ad8:	2300      	movs	r3, #0
 8017ada:	9300      	str	r3, [sp, #0]
 8017adc:	2300      	movs	r3, #0
 8017ade:	2220      	movs	r2, #32
 8017ae0:	482f      	ldr	r0, [pc, #188]	@ (8017ba0 <mg_tls_generate_handshake_keys+0x27c>)
 8017ae2:	f7ff fe83 	bl	80177ec <mg_tls_derive_secret>

  mg_tls_hexdump("s hs traffic", server_hs_secret, 32);
 8017ae6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8017aea:	2220      	movs	r2, #32
 8017aec:	4619      	mov	r1, r3
 8017aee:	482d      	ldr	r0, [pc, #180]	@ (8017ba4 <mg_tls_generate_handshake_keys+0x280>)
 8017af0:	f7ff fc8e 	bl	8017410 <mg_tls_hexdump>
  mg_tls_hexdump("s key", tls->enc.server_write_key, keysz);
 8017af4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8017af8:	f503 6395 	add.w	r3, r3, #1192	@ 0x4a8
 8017afc:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8017b00:	4619      	mov	r1, r3
 8017b02:	4829      	ldr	r0, [pc, #164]	@ (8017ba8 <mg_tls_generate_handshake_keys+0x284>)
 8017b04:	f7ff fc84 	bl	8017410 <mg_tls_hexdump>
  mg_tls_hexdump("s iv", tls->enc.server_write_iv, 12);
 8017b08:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8017b0c:	f503 6399 	add.w	r3, r3, #1224	@ 0x4c8
 8017b10:	220c      	movs	r2, #12
 8017b12:	4619      	mov	r1, r3
 8017b14:	4825      	ldr	r0, [pc, #148]	@ (8017bac <mg_tls_generate_handshake_keys+0x288>)
 8017b16:	f7ff fc7b 	bl	8017410 <mg_tls_hexdump>
  mg_tls_hexdump("s finished", tls->enc.server_finished_key, 32);
 8017b1a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8017b1e:	f203 43d4 	addw	r3, r3, #1236	@ 0x4d4
 8017b22:	2220      	movs	r2, #32
 8017b24:	4619      	mov	r1, r3
 8017b26:	4822      	ldr	r0, [pc, #136]	@ (8017bb0 <mg_tls_generate_handshake_keys+0x28c>)
 8017b28:	f7ff fc72 	bl	8017410 <mg_tls_hexdump>
  mg_tls_hexdump("c hs traffic", client_hs_secret, 32);
 8017b2c:	f107 0308 	add.w	r3, r7, #8
 8017b30:	2220      	movs	r2, #32
 8017b32:	4619      	mov	r1, r3
 8017b34:	481f      	ldr	r0, [pc, #124]	@ (8017bb4 <mg_tls_generate_handshake_keys+0x290>)
 8017b36:	f7ff fc6b 	bl	8017410 <mg_tls_hexdump>
  mg_tls_hexdump("c key", tls->enc.client_write_key, keysz);
 8017b3a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8017b3e:	f203 43f4 	addw	r3, r3, #1268	@ 0x4f4
 8017b42:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8017b46:	4619      	mov	r1, r3
 8017b48:	481b      	ldr	r0, [pc, #108]	@ (8017bb8 <mg_tls_generate_handshake_keys+0x294>)
 8017b4a:	f7ff fc61 	bl	8017410 <mg_tls_hexdump>
  mg_tls_hexdump("c iv", tls->enc.client_write_iv, 12);
 8017b4e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8017b52:	f203 5314 	addw	r3, r3, #1300	@ 0x514
 8017b56:	220c      	movs	r2, #12
 8017b58:	4619      	mov	r1, r3
 8017b5a:	4818      	ldr	r0, [pc, #96]	@ (8017bbc <mg_tls_generate_handshake_keys+0x298>)
 8017b5c:	f7ff fc58 	bl	8017410 <mg_tls_hexdump>
  mg_tls_hexdump("c finished", tls->enc.client_finished_key, 32);
 8017b60:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8017b64:	f503 63a4 	add.w	r3, r3, #1312	@ 0x520
 8017b68:	2220      	movs	r2, #32
 8017b6a:	4619      	mov	r1, r3
 8017b6c:	4814      	ldr	r0, [pc, #80]	@ (8017bc0 <mg_tls_generate_handshake_keys+0x29c>)
 8017b6e:	f7ff fc4f 	bl	8017410 <mg_tls_hexdump>
  mg_ssl_key_log("SERVER_HANDSHAKE_TRAFFIC_SECRET", tls->random,
                 server_hs_secret, 32);
  mg_ssl_key_log("CLIENT_HANDSHAKE_TRAFFIC_SECRET", tls->random,
                 client_hs_secret, 32);
#endif
}
 8017b72:	bf00      	nop
 8017b74:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8017b78:	46bd      	mov	sp, r7
 8017b7a:	bd80      	pop	{r7, pc}
 8017b7c:	24002370 	.word	0x24002370
 8017b80:	24000280 	.word	0x24000280
 8017b84:	0802b60c 	.word	0x0802b60c
 8017b88:	0802b61c 	.word	0x0802b61c
 8017b8c:	0802b628 	.word	0x0802b628
 8017b90:	0802b634 	.word	0x0802b634
 8017b94:	0802b648 	.word	0x0802b648
 8017b98:	0802b65c 	.word	0x0802b65c
 8017b9c:	0802b668 	.word	0x0802b668
 8017ba0:	0802b674 	.word	0x0802b674
 8017ba4:	0802b684 	.word	0x0802b684
 8017ba8:	0802b694 	.word	0x0802b694
 8017bac:	0802b69c 	.word	0x0802b69c
 8017bb0:	0802b6a4 	.word	0x0802b6a4
 8017bb4:	0802b6b0 	.word	0x0802b6b0
 8017bb8:	0802b6c0 	.word	0x0802b6c0
 8017bbc:	0802b6c8 	.word	0x0802b6c8
 8017bc0:	0802b6d0 	.word	0x0802b6d0

08017bc4 <mg_tls_generate_application_keys>:

static void mg_tls_generate_application_keys(struct mg_connection *c) {
 8017bc4:	b580      	push	{r7, lr}
 8017bc6:	b0cc      	sub	sp, #304	@ 0x130
 8017bc8:	af04      	add	r7, sp, #16
 8017bca:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8017bce:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8017bd2:	6018      	str	r0, [r3, #0]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8017bd4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8017bd8:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8017bdc:	681b      	ldr	r3, [r3, #0]
 8017bde:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8017be2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  uint8_t premaster_secret[32];
  uint8_t master_secret[32];
  uint8_t server_secret[32];
  uint8_t client_secret[32];
#if CHACHA20
  const size_t keysz = 32;
 8017be6:	2320      	movs	r3, #32
 8017be8:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
#else
  const size_t keysz = 16;
#endif

  mg_sha256_ctx sha256;
  memmove(&sha256, &tls->sha256, sizeof(mg_sha256_ctx));
 8017bec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8017bf0:	f103 0120 	add.w	r1, r3, #32
 8017bf4:	f107 0308 	add.w	r3, r7, #8
 8017bf8:	2270      	movs	r2, #112	@ 0x70
 8017bfa:	4618      	mov	r0, r3
 8017bfc:	f00f fd4a 	bl	8027694 <memmove>
  mg_sha256_final(hash, &sha256);
 8017c00:	f107 0208 	add.w	r2, r7, #8
 8017c04:	f107 03f8 	add.w	r3, r7, #248	@ 0xf8
 8017c08:	4611      	mov	r1, r2
 8017c0a:	4618      	mov	r0, r3
 8017c0c:	f7fd fbfb 	bl	8015406 <mg_sha256_final>

  mg_tls_derive_secret("tls13 derived", tls->enc.handshake_secret, 32,
 8017c10:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8017c14:	f503 6191 	add.w	r1, r3, #1160	@ 0x488
 8017c18:	2320      	movs	r3, #32
 8017c1a:	9302      	str	r3, [sp, #8]
 8017c1c:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 8017c20:	9301      	str	r3, [sp, #4]
 8017c22:	2320      	movs	r3, #32
 8017c24:	9300      	str	r3, [sp, #0]
 8017c26:	4b64      	ldr	r3, [pc, #400]	@ (8017db8 <mg_tls_generate_application_keys+0x1f4>)
 8017c28:	2220      	movs	r2, #32
 8017c2a:	4864      	ldr	r0, [pc, #400]	@ (8017dbc <mg_tls_generate_application_keys+0x1f8>)
 8017c2c:	f7ff fdde 	bl	80177ec <mg_tls_derive_secret>
                       zeros_sha256_digest, 32, premaster_secret, 32);
  mg_hmac_sha256(master_secret, premaster_secret, 32, zeros, 32);
 8017c30:	f107 01d8 	add.w	r1, r7, #216	@ 0xd8
 8017c34:	f107 00b8 	add.w	r0, r7, #184	@ 0xb8
 8017c38:	2320      	movs	r3, #32
 8017c3a:	9300      	str	r3, [sp, #0]
 8017c3c:	4b60      	ldr	r3, [pc, #384]	@ (8017dc0 <mg_tls_generate_application_keys+0x1fc>)
 8017c3e:	2220      	movs	r2, #32
 8017c40:	f7fd fd35 	bl	80156ae <mg_hmac_sha256>

  mg_tls_derive_secret("tls13 s ap traffic", master_secret, 32, hash, 32,
 8017c44:	f107 02f8 	add.w	r2, r7, #248	@ 0xf8
 8017c48:	f107 01b8 	add.w	r1, r7, #184	@ 0xb8
 8017c4c:	2320      	movs	r3, #32
 8017c4e:	9302      	str	r3, [sp, #8]
 8017c50:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8017c54:	9301      	str	r3, [sp, #4]
 8017c56:	2320      	movs	r3, #32
 8017c58:	9300      	str	r3, [sp, #0]
 8017c5a:	4613      	mov	r3, r2
 8017c5c:	2220      	movs	r2, #32
 8017c5e:	4859      	ldr	r0, [pc, #356]	@ (8017dc4 <mg_tls_generate_application_keys+0x200>)
 8017c60:	f7ff fdc4 	bl	80177ec <mg_tls_derive_secret>
                       server_secret, 32);
  mg_tls_derive_secret("tls13 key", server_secret, 32, NULL, 0,
                       tls->enc.server_write_key, keysz);
 8017c64:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8017c68:	f503 6395 	add.w	r3, r3, #1192	@ 0x4a8
  mg_tls_derive_secret("tls13 key", server_secret, 32, NULL, 0,
 8017c6c:	f107 0198 	add.w	r1, r7, #152	@ 0x98
 8017c70:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8017c74:	9202      	str	r2, [sp, #8]
 8017c76:	9301      	str	r3, [sp, #4]
 8017c78:	2300      	movs	r3, #0
 8017c7a:	9300      	str	r3, [sp, #0]
 8017c7c:	2300      	movs	r3, #0
 8017c7e:	2220      	movs	r2, #32
 8017c80:	4851      	ldr	r0, [pc, #324]	@ (8017dc8 <mg_tls_generate_application_keys+0x204>)
 8017c82:	f7ff fdb3 	bl	80177ec <mg_tls_derive_secret>
  mg_tls_derive_secret("tls13 iv", server_secret, 32, NULL, 0,
                       tls->enc.server_write_iv, 12);
 8017c86:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8017c8a:	f503 6399 	add.w	r3, r3, #1224	@ 0x4c8
  mg_tls_derive_secret("tls13 iv", server_secret, 32, NULL, 0,
 8017c8e:	f107 0198 	add.w	r1, r7, #152	@ 0x98
 8017c92:	220c      	movs	r2, #12
 8017c94:	9202      	str	r2, [sp, #8]
 8017c96:	9301      	str	r3, [sp, #4]
 8017c98:	2300      	movs	r3, #0
 8017c9a:	9300      	str	r3, [sp, #0]
 8017c9c:	2300      	movs	r3, #0
 8017c9e:	2220      	movs	r2, #32
 8017ca0:	484a      	ldr	r0, [pc, #296]	@ (8017dcc <mg_tls_generate_application_keys+0x208>)
 8017ca2:	f7ff fda3 	bl	80177ec <mg_tls_derive_secret>
  mg_tls_derive_secret("tls13 c ap traffic", master_secret, 32, hash, 32,
 8017ca6:	f107 02f8 	add.w	r2, r7, #248	@ 0xf8
 8017caa:	f107 01b8 	add.w	r1, r7, #184	@ 0xb8
 8017cae:	2320      	movs	r3, #32
 8017cb0:	9302      	str	r3, [sp, #8]
 8017cb2:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8017cb6:	9301      	str	r3, [sp, #4]
 8017cb8:	2320      	movs	r3, #32
 8017cba:	9300      	str	r3, [sp, #0]
 8017cbc:	4613      	mov	r3, r2
 8017cbe:	2220      	movs	r2, #32
 8017cc0:	4843      	ldr	r0, [pc, #268]	@ (8017dd0 <mg_tls_generate_application_keys+0x20c>)
 8017cc2:	f7ff fd93 	bl	80177ec <mg_tls_derive_secret>
                       client_secret, 32);
  mg_tls_derive_secret("tls13 key", client_secret, 32, NULL, 0,
                       tls->enc.client_write_key, keysz);
 8017cc6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8017cca:	f203 43f4 	addw	r3, r3, #1268	@ 0x4f4
  mg_tls_derive_secret("tls13 key", client_secret, 32, NULL, 0,
 8017cce:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 8017cd2:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8017cd6:	9202      	str	r2, [sp, #8]
 8017cd8:	9301      	str	r3, [sp, #4]
 8017cda:	2300      	movs	r3, #0
 8017cdc:	9300      	str	r3, [sp, #0]
 8017cde:	2300      	movs	r3, #0
 8017ce0:	2220      	movs	r2, #32
 8017ce2:	4839      	ldr	r0, [pc, #228]	@ (8017dc8 <mg_tls_generate_application_keys+0x204>)
 8017ce4:	f7ff fd82 	bl	80177ec <mg_tls_derive_secret>
  mg_tls_derive_secret("tls13 iv", client_secret, 32, NULL, 0,
                       tls->enc.client_write_iv, 12);
 8017ce8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8017cec:	f203 5314 	addw	r3, r3, #1300	@ 0x514
  mg_tls_derive_secret("tls13 iv", client_secret, 32, NULL, 0,
 8017cf0:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 8017cf4:	220c      	movs	r2, #12
 8017cf6:	9202      	str	r2, [sp, #8]
 8017cf8:	9301      	str	r3, [sp, #4]
 8017cfa:	2300      	movs	r3, #0
 8017cfc:	9300      	str	r3, [sp, #0]
 8017cfe:	2300      	movs	r3, #0
 8017d00:	2220      	movs	r2, #32
 8017d02:	4832      	ldr	r0, [pc, #200]	@ (8017dcc <mg_tls_generate_application_keys+0x208>)
 8017d04:	f7ff fd72 	bl	80177ec <mg_tls_derive_secret>

  mg_tls_hexdump("s ap traffic", server_secret, 32);
 8017d08:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8017d0c:	2220      	movs	r2, #32
 8017d0e:	4619      	mov	r1, r3
 8017d10:	4830      	ldr	r0, [pc, #192]	@ (8017dd4 <mg_tls_generate_application_keys+0x210>)
 8017d12:	f7ff fb7d 	bl	8017410 <mg_tls_hexdump>
  mg_tls_hexdump("s key", tls->enc.server_write_key, keysz);
 8017d16:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8017d1a:	f503 6395 	add.w	r3, r3, #1192	@ 0x4a8
 8017d1e:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8017d22:	4619      	mov	r1, r3
 8017d24:	482c      	ldr	r0, [pc, #176]	@ (8017dd8 <mg_tls_generate_application_keys+0x214>)
 8017d26:	f7ff fb73 	bl	8017410 <mg_tls_hexdump>
  mg_tls_hexdump("s iv", tls->enc.server_write_iv, 12);
 8017d2a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8017d2e:	f503 6399 	add.w	r3, r3, #1224	@ 0x4c8
 8017d32:	220c      	movs	r2, #12
 8017d34:	4619      	mov	r1, r3
 8017d36:	4829      	ldr	r0, [pc, #164]	@ (8017ddc <mg_tls_generate_application_keys+0x218>)
 8017d38:	f7ff fb6a 	bl	8017410 <mg_tls_hexdump>
  mg_tls_hexdump("s finished", tls->enc.server_finished_key, 32);
 8017d3c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8017d40:	f203 43d4 	addw	r3, r3, #1236	@ 0x4d4
 8017d44:	2220      	movs	r2, #32
 8017d46:	4619      	mov	r1, r3
 8017d48:	4825      	ldr	r0, [pc, #148]	@ (8017de0 <mg_tls_generate_application_keys+0x21c>)
 8017d4a:	f7ff fb61 	bl	8017410 <mg_tls_hexdump>
  mg_tls_hexdump("c ap traffic", client_secret, 32);
 8017d4e:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8017d52:	2220      	movs	r2, #32
 8017d54:	4619      	mov	r1, r3
 8017d56:	4823      	ldr	r0, [pc, #140]	@ (8017de4 <mg_tls_generate_application_keys+0x220>)
 8017d58:	f7ff fb5a 	bl	8017410 <mg_tls_hexdump>
  mg_tls_hexdump("c key", tls->enc.client_write_key, keysz);
 8017d5c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8017d60:	f203 43f4 	addw	r3, r3, #1268	@ 0x4f4
 8017d64:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8017d68:	4619      	mov	r1, r3
 8017d6a:	481f      	ldr	r0, [pc, #124]	@ (8017de8 <mg_tls_generate_application_keys+0x224>)
 8017d6c:	f7ff fb50 	bl	8017410 <mg_tls_hexdump>
  mg_tls_hexdump("c iv", tls->enc.client_write_iv, 12);
 8017d70:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8017d74:	f203 5314 	addw	r3, r3, #1300	@ 0x514
 8017d78:	220c      	movs	r2, #12
 8017d7a:	4619      	mov	r1, r3
 8017d7c:	481b      	ldr	r0, [pc, #108]	@ (8017dec <mg_tls_generate_application_keys+0x228>)
 8017d7e:	f7ff fb47 	bl	8017410 <mg_tls_hexdump>
  mg_tls_hexdump("c finished", tls->enc.client_finished_key, 32);
 8017d82:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8017d86:	f503 63a4 	add.w	r3, r3, #1312	@ 0x520
 8017d8a:	2220      	movs	r2, #32
 8017d8c:	4619      	mov	r1, r3
 8017d8e:	4818      	ldr	r0, [pc, #96]	@ (8017df0 <mg_tls_generate_application_keys+0x22c>)
 8017d90:	f7ff fb3e 	bl	8017410 <mg_tls_hexdump>
  tls->enc.sseq = tls->enc.cseq = 0;
 8017d94:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8017d98:	2200      	movs	r2, #0
 8017d9a:	f8c3 2484 	str.w	r2, [r3, #1156]	@ 0x484
 8017d9e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8017da2:	f8d3 2484 	ldr.w	r2, [r3, #1156]	@ 0x484
 8017da6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8017daa:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480

#ifdef MG_TLS_SSLKEYLOGFILE
  mg_ssl_key_log("SERVER_TRAFFIC_SECRET_0", tls->random, server_secret, 32);
  mg_ssl_key_log("CLIENT_TRAFFIC_SECRET_0", tls->random, client_secret, 32);
#endif
}
 8017dae:	bf00      	nop
 8017db0:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8017db4:	46bd      	mov	sp, r7
 8017db6:	bd80      	pop	{r7, pc}
 8017db8:	24000280 	.word	0x24000280
 8017dbc:	0802b60c 	.word	0x0802b60c
 8017dc0:	24002370 	.word	0x24002370
 8017dc4:	0802b6dc 	.word	0x0802b6dc
 8017dc8:	0802b65c 	.word	0x0802b65c
 8017dcc:	0802b668 	.word	0x0802b668
 8017dd0:	0802b6f0 	.word	0x0802b6f0
 8017dd4:	0802b704 	.word	0x0802b704
 8017dd8:	0802b694 	.word	0x0802b694
 8017ddc:	0802b69c 	.word	0x0802b69c
 8017de0:	0802b6a4 	.word	0x0802b6a4
 8017de4:	0802b714 	.word	0x0802b714
 8017de8:	0802b6c0 	.word	0x0802b6c0
 8017dec:	0802b6c8 	.word	0x0802b6c8
 8017df0:	0802b6d0 	.word	0x0802b6d0

08017df4 <mg_tls_encrypt>:

// AES GCM encryption of the message + put encoded data into the write buffer
static void mg_tls_encrypt(struct mg_connection *c, const uint8_t *msg,
                           size_t msgsz, uint8_t msgtype) {
 8017df4:	b580      	push	{r7, lr}
 8017df6:	b09a      	sub	sp, #104	@ 0x68
 8017df8:	af04      	add	r7, sp, #16
 8017dfa:	60f8      	str	r0, [r7, #12]
 8017dfc:	60b9      	str	r1, [r7, #8]
 8017dfe:	607a      	str	r2, [r7, #4]
 8017e00:	70fb      	strb	r3, [r7, #3]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8017e02:	68fb      	ldr	r3, [r7, #12]
 8017e04:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8017e08:	657b      	str	r3, [r7, #84]	@ 0x54
  struct mg_iobuf *wio = &tls->send;
 8017e0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017e0c:	3304      	adds	r3, #4
 8017e0e:	653b      	str	r3, [r7, #80]	@ 0x50
  uint8_t *outmsg;
  uint8_t *tag;
  size_t encsz = msgsz + 16 + 1;
 8017e10:	687b      	ldr	r3, [r7, #4]
 8017e12:	3311      	adds	r3, #17
 8017e14:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint8_t hdr[5] = {MG_TLS_APP_DATA, 0x03, 0x03,
 8017e16:	2317      	movs	r3, #23
 8017e18:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 8017e1c:	2303      	movs	r3, #3
 8017e1e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8017e22:	2303      	movs	r3, #3
 8017e24:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
                    (uint8_t) ((encsz >> 8) & 0xff), (uint8_t) (encsz & 0xff)};
 8017e28:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017e2a:	0a1b      	lsrs	r3, r3, #8
 8017e2c:	b2db      	uxtb	r3, r3
  uint8_t hdr[5] = {MG_TLS_APP_DATA, 0x03, 0x03,
 8017e2e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                    (uint8_t) ((encsz >> 8) & 0xff), (uint8_t) (encsz & 0xff)};
 8017e32:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017e34:	b2db      	uxtb	r3, r3
  uint8_t hdr[5] = {MG_TLS_APP_DATA, 0x03, 0x03,
 8017e36:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  uint8_t associated_data[5] = {MG_TLS_APP_DATA, 0x03, 0x03,
 8017e3a:	2317      	movs	r3, #23
 8017e3c:	773b      	strb	r3, [r7, #28]
 8017e3e:	2303      	movs	r3, #3
 8017e40:	777b      	strb	r3, [r7, #29]
 8017e42:	2303      	movs	r3, #3
 8017e44:	77bb      	strb	r3, [r7, #30]
                                (uint8_t) ((encsz >> 8) & 0xff),
 8017e46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017e48:	0a1b      	lsrs	r3, r3, #8
 8017e4a:	b2db      	uxtb	r3, r3
  uint8_t associated_data[5] = {MG_TLS_APP_DATA, 0x03, 0x03,
 8017e4c:	77fb      	strb	r3, [r7, #31]
                                (uint8_t) (encsz & 0xff)};
 8017e4e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017e50:	b2db      	uxtb	r3, r3
  uint8_t associated_data[5] = {MG_TLS_APP_DATA, 0x03, 0x03,
 8017e52:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t nonce[12];

  uint32_t seq = c->is_client ? tls->enc.cseq : tls->enc.sseq;
 8017e56:	68fb      	ldr	r3, [r7, #12]
 8017e58:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8017e5c:	f003 0302 	and.w	r3, r3, #2
 8017e60:	b2db      	uxtb	r3, r3
 8017e62:	2b00      	cmp	r3, #0
 8017e64:	d003      	beq.n	8017e6e <mg_tls_encrypt+0x7a>
 8017e66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017e68:	f8d3 3484 	ldr.w	r3, [r3, #1156]	@ 0x484
 8017e6c:	e002      	b.n	8017e74 <mg_tls_encrypt+0x80>
 8017e6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017e70:	f8d3 3480 	ldr.w	r3, [r3, #1152]	@ 0x480
 8017e74:	64bb      	str	r3, [r7, #72]	@ 0x48
  uint8_t *key =
      c->is_client ? tls->enc.client_write_key : tls->enc.server_write_key;
 8017e76:	68fb      	ldr	r3, [r7, #12]
 8017e78:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8017e7c:	f003 0302 	and.w	r3, r3, #2
 8017e80:	b2db      	uxtb	r3, r3
 8017e82:	2b00      	cmp	r3, #0
 8017e84:	d003      	beq.n	8017e8e <mg_tls_encrypt+0x9a>
 8017e86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017e88:	f203 43f4 	addw	r3, r3, #1268	@ 0x4f4
 8017e8c:	e002      	b.n	8017e94 <mg_tls_encrypt+0xa0>
 8017e8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017e90:	f503 6395 	add.w	r3, r3, #1192	@ 0x4a8
  uint8_t *key =
 8017e94:	647b      	str	r3, [r7, #68]	@ 0x44
  uint8_t *iv =
      c->is_client ? tls->enc.client_write_iv : tls->enc.server_write_iv;
 8017e96:	68fb      	ldr	r3, [r7, #12]
 8017e98:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8017e9c:	f003 0302 	and.w	r3, r3, #2
 8017ea0:	b2db      	uxtb	r3, r3
 8017ea2:	2b00      	cmp	r3, #0
 8017ea4:	d003      	beq.n	8017eae <mg_tls_encrypt+0xba>
 8017ea6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017ea8:	f203 5314 	addw	r3, r3, #1300	@ 0x514
 8017eac:	e002      	b.n	8017eb4 <mg_tls_encrypt+0xc0>
 8017eae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017eb0:	f503 6399 	add.w	r3, r3, #1224	@ 0x4c8
  uint8_t *iv =
 8017eb4:	643b      	str	r3, [r7, #64]	@ 0x40

#if !CHACHA20
  mg_gcm_initialize();
#endif

  memmove(nonce, iv, sizeof(nonce));
 8017eb6:	f107 0310 	add.w	r3, r7, #16
 8017eba:	220c      	movs	r2, #12
 8017ebc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8017ebe:	4618      	mov	r0, r3
 8017ec0:	f00f fbe8 	bl	8027694 <memmove>
  nonce[8] ^= (uint8_t) ((seq >> 24) & 255U);
 8017ec4:	7e3a      	ldrb	r2, [r7, #24]
 8017ec6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8017ec8:	0e1b      	lsrs	r3, r3, #24
 8017eca:	b2db      	uxtb	r3, r3
 8017ecc:	4053      	eors	r3, r2
 8017ece:	b2db      	uxtb	r3, r3
 8017ed0:	763b      	strb	r3, [r7, #24]
  nonce[9] ^= (uint8_t) ((seq >> 16) & 255U);
 8017ed2:	7e7a      	ldrb	r2, [r7, #25]
 8017ed4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8017ed6:	0c1b      	lsrs	r3, r3, #16
 8017ed8:	b2db      	uxtb	r3, r3
 8017eda:	4053      	eors	r3, r2
 8017edc:	b2db      	uxtb	r3, r3
 8017ede:	767b      	strb	r3, [r7, #25]
  nonce[10] ^= (uint8_t) ((seq >> 8) & 255U);
 8017ee0:	7eba      	ldrb	r2, [r7, #26]
 8017ee2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8017ee4:	0a1b      	lsrs	r3, r3, #8
 8017ee6:	b2db      	uxtb	r3, r3
 8017ee8:	4053      	eors	r3, r2
 8017eea:	b2db      	uxtb	r3, r3
 8017eec:	76bb      	strb	r3, [r7, #26]
  nonce[11] ^= (uint8_t) ((seq) &255U);
 8017eee:	7efa      	ldrb	r2, [r7, #27]
 8017ef0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8017ef2:	b2db      	uxtb	r3, r3
 8017ef4:	4053      	eors	r3, r2
 8017ef6:	b2db      	uxtb	r3, r3
 8017ef8:	76fb      	strb	r3, [r7, #27]

  mg_iobuf_add(wio, wio->len, hdr, sizeof(hdr));
 8017efa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017efc:	6899      	ldr	r1, [r3, #8]
 8017efe:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8017f02:	2305      	movs	r3, #5
 8017f04:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8017f06:	f7f5 fc63 	bl	800d7d0 <mg_iobuf_add>
  mg_iobuf_resize(wio, wio->len + encsz);
 8017f0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017f0c:	689a      	ldr	r2, [r3, #8]
 8017f0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017f10:	4413      	add	r3, r2
 8017f12:	4619      	mov	r1, r3
 8017f14:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8017f16:	f7f5 fbcf 	bl	800d6b8 <mg_iobuf_resize>
  outmsg = wio->buf + wio->len;
 8017f1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017f1c:	681a      	ldr	r2, [r3, #0]
 8017f1e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017f20:	689b      	ldr	r3, [r3, #8]
 8017f22:	4413      	add	r3, r2
 8017f24:	63fb      	str	r3, [r7, #60]	@ 0x3c
  tag = wio->buf + wio->len + msgsz + 1;
 8017f26:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017f28:	681a      	ldr	r2, [r3, #0]
 8017f2a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017f2c:	6899      	ldr	r1, [r3, #8]
 8017f2e:	687b      	ldr	r3, [r7, #4]
 8017f30:	440b      	add	r3, r1
 8017f32:	3301      	adds	r3, #1
 8017f34:	4413      	add	r3, r2
 8017f36:	63bb      	str	r3, [r7, #56]	@ 0x38
  memmove(outmsg, msg, msgsz);
 8017f38:	687a      	ldr	r2, [r7, #4]
 8017f3a:	68b9      	ldr	r1, [r7, #8]
 8017f3c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8017f3e:	f00f fba9 	bl	8027694 <memmove>
  outmsg[msgsz] = msgtype;
 8017f42:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8017f44:	687b      	ldr	r3, [r7, #4]
 8017f46:	4413      	add	r3, r2
 8017f48:	78fa      	ldrb	r2, [r7, #3]
 8017f4a:	701a      	strb	r2, [r3, #0]
#if CHACHA20
  (void) tag;  // tag is only used in aes gcm
  {
    size_t maxlen = MG_IO_SIZE > 16384 ? 16384 : MG_IO_SIZE;
 8017f4c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8017f50:	637b      	str	r3, [r7, #52]	@ 0x34
    uint8_t *enc = (uint8_t *) calloc(1, maxlen + 256 + 1);
 8017f52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017f54:	f203 1301 	addw	r3, r3, #257	@ 0x101
 8017f58:	4619      	mov	r1, r3
 8017f5a:	2001      	movs	r0, #1
 8017f5c:	f00d fd06 	bl	802596c <calloc>
 8017f60:	4603      	mov	r3, r0
 8017f62:	633b      	str	r3, [r7, #48]	@ 0x30
    if (enc == NULL) {
 8017f64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017f66:	2b00      	cmp	r3, #0
 8017f68:	d104      	bne.n	8017f74 <mg_tls_encrypt+0x180>
      mg_error(c, "TLS OOM");
 8017f6a:	491f      	ldr	r1, [pc, #124]	@ (8017fe8 <mg_tls_encrypt+0x1f4>)
 8017f6c:	68f8      	ldr	r0, [r7, #12]
 8017f6e:	f7f0 fe21 	bl	8008bb4 <mg_error>
 8017f72:	e035      	b.n	8017fe0 <mg_tls_encrypt+0x1ec>
      return;
    } else {
      size_t n = mg_chacha20_poly1305_encrypt(enc, key, nonce, associated_data,
 8017f74:	687b      	ldr	r3, [r7, #4]
 8017f76:	3301      	adds	r3, #1
 8017f78:	f107 011c 	add.w	r1, r7, #28
 8017f7c:	f107 0210 	add.w	r2, r7, #16
 8017f80:	9302      	str	r3, [sp, #8]
 8017f82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017f84:	9301      	str	r3, [sp, #4]
 8017f86:	2305      	movs	r3, #5
 8017f88:	9300      	str	r3, [sp, #0]
 8017f8a:	460b      	mov	r3, r1
 8017f8c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8017f8e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8017f90:	f005 fa61 	bl	801d456 <mg_chacha20_poly1305_encrypt>
 8017f94:	62f8      	str	r0, [r7, #44]	@ 0x2c
                                              sizeof(associated_data), outmsg,
                                              msgsz + 1);
      memmove(outmsg, enc, n);
 8017f96:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8017f98:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8017f9a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8017f9c:	f00f fb7a 	bl	8027694 <memmove>
      free(enc);
 8017fa0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8017fa2:	f00d fd07 	bl	80259b4 <free>
  }
#else
  mg_aes_gcm_encrypt(outmsg, outmsg, msgsz + 1, key, 16, nonce, sizeof(nonce),
                     associated_data, sizeof(associated_data), tag, 16);
#endif
  c->is_client ? tls->enc.cseq++ : tls->enc.sseq++;
 8017fa6:	68fb      	ldr	r3, [r7, #12]
 8017fa8:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8017fac:	f003 0302 	and.w	r3, r3, #2
 8017fb0:	b2db      	uxtb	r3, r3
 8017fb2:	2b00      	cmp	r3, #0
 8017fb4:	d007      	beq.n	8017fc6 <mg_tls_encrypt+0x1d2>
 8017fb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017fb8:	f8d3 3484 	ldr.w	r3, [r3, #1156]	@ 0x484
 8017fbc:	1c5a      	adds	r2, r3, #1
 8017fbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017fc0:	f8c3 2484 	str.w	r2, [r3, #1156]	@ 0x484
 8017fc4:	e006      	b.n	8017fd4 <mg_tls_encrypt+0x1e0>
 8017fc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017fc8:	f8d3 3480 	ldr.w	r3, [r3, #1152]	@ 0x480
 8017fcc:	1c5a      	adds	r2, r3, #1
 8017fce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017fd0:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
  wio->len += encsz;
 8017fd4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017fd6:	689a      	ldr	r2, [r3, #8]
 8017fd8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017fda:	441a      	add	r2, r3
 8017fdc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017fde:	609a      	str	r2, [r3, #8]
}
 8017fe0:	3758      	adds	r7, #88	@ 0x58
 8017fe2:	46bd      	mov	sp, r7
 8017fe4:	bd80      	pop	{r7, pc}
 8017fe6:	bf00      	nop
 8017fe8:	0802b724 	.word	0x0802b724

08017fec <mg_tls_recv_record>:

// read an encrypted record, decrypt it in place
static int mg_tls_recv_record(struct mg_connection *c) {
 8017fec:	b580      	push	{r7, lr}
 8017fee:	b092      	sub	sp, #72	@ 0x48
 8017ff0:	af02      	add	r7, sp, #8
 8017ff2:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8017ff4:	687b      	ldr	r3, [r7, #4]
 8017ff6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8017ffa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  struct mg_iobuf *rio = &c->rtls;
 8017ffc:	687b      	ldr	r3, [r7, #4]
 8017ffe:	3368      	adds	r3, #104	@ 0x68
 8018000:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint16_t msgsz;
  uint8_t *msg;
  uint8_t nonce[12];
  int r;

  uint32_t seq = c->is_client ? tls->enc.sseq : tls->enc.cseq;
 8018002:	687b      	ldr	r3, [r7, #4]
 8018004:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8018008:	f003 0302 	and.w	r3, r3, #2
 801800c:	b2db      	uxtb	r3, r3
 801800e:	2b00      	cmp	r3, #0
 8018010:	d003      	beq.n	801801a <mg_tls_recv_record+0x2e>
 8018012:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018014:	f8d3 3480 	ldr.w	r3, [r3, #1152]	@ 0x480
 8018018:	e002      	b.n	8018020 <mg_tls_recv_record+0x34>
 801801a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801801c:	f8d3 3484 	ldr.w	r3, [r3, #1156]	@ 0x484
 8018020:	637b      	str	r3, [r7, #52]	@ 0x34
  uint8_t *key =
      c->is_client ? tls->enc.server_write_key : tls->enc.client_write_key;
 8018022:	687b      	ldr	r3, [r7, #4]
 8018024:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8018028:	f003 0302 	and.w	r3, r3, #2
 801802c:	b2db      	uxtb	r3, r3
 801802e:	2b00      	cmp	r3, #0
 8018030:	d003      	beq.n	801803a <mg_tls_recv_record+0x4e>
 8018032:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018034:	f503 6395 	add.w	r3, r3, #1192	@ 0x4a8
 8018038:	e002      	b.n	8018040 <mg_tls_recv_record+0x54>
 801803a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801803c:	f203 43f4 	addw	r3, r3, #1268	@ 0x4f4
  uint8_t *key =
 8018040:	633b      	str	r3, [r7, #48]	@ 0x30
  uint8_t *iv =
      c->is_client ? tls->enc.server_write_iv : tls->enc.client_write_iv;
 8018042:	687b      	ldr	r3, [r7, #4]
 8018044:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8018048:	f003 0302 	and.w	r3, r3, #2
 801804c:	b2db      	uxtb	r3, r3
 801804e:	2b00      	cmp	r3, #0
 8018050:	d003      	beq.n	801805a <mg_tls_recv_record+0x6e>
 8018052:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018054:	f503 6399 	add.w	r3, r3, #1224	@ 0x4c8
 8018058:	e002      	b.n	8018060 <mg_tls_recv_record+0x74>
 801805a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801805c:	f203 5314 	addw	r3, r3, #1300	@ 0x514
  uint8_t *iv =
 8018060:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (tls->recv_len > 0) {
 8018062:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018064:	699b      	ldr	r3, [r3, #24]
 8018066:	2b00      	cmp	r3, #0
 8018068:	d001      	beq.n	801806e <mg_tls_recv_record+0x82>
    return 0; /* some data from previous record is still present */
 801806a:	2300      	movs	r3, #0
 801806c:	e0c7      	b.n	80181fe <mg_tls_recv_record+0x212>
  }
  for (;;) {
    if (!mg_tls_got_record(c)) {
 801806e:	6878      	ldr	r0, [r7, #4]
 8018070:	f7ff fb25 	bl	80176be <mg_tls_got_record>
 8018074:	4603      	mov	r3, r0
 8018076:	f083 0301 	eor.w	r3, r3, #1
 801807a:	b2db      	uxtb	r3, r3
 801807c:	2b00      	cmp	r3, #0
 801807e:	d002      	beq.n	8018086 <mg_tls_recv_record+0x9a>
      return MG_IO_WAIT;
 8018080:	f06f 0301 	mvn.w	r3, #1
 8018084:	e0bb      	b.n	80181fe <mg_tls_recv_record+0x212>
    }
    if (rio->buf[0] == MG_TLS_APP_DATA) {
 8018086:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018088:	681b      	ldr	r3, [r3, #0]
 801808a:	781b      	ldrb	r3, [r3, #0]
 801808c:	2b17      	cmp	r3, #23
 801808e:	d026      	beq.n	80180de <mg_tls_recv_record+0xf2>
      break;
    } else if (rio->buf[0] ==
 8018090:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018092:	681b      	ldr	r3, [r3, #0]
 8018094:	781b      	ldrb	r3, [r3, #0]
 8018096:	2b14      	cmp	r3, #20
 8018098:	d103      	bne.n	80180a2 <mg_tls_recv_record+0xb6>
               MG_TLS_CHANGE_CIPHER) {  // Skip ChangeCipher messages
      mg_tls_drop_record(c);
 801809a:	6878      	ldr	r0, [r7, #4]
 801809c:	f7ff fb37 	bl	801770e <mg_tls_drop_record>
 80180a0:	e7e5      	b.n	801806e <mg_tls_recv_record+0x82>
    } else if (rio->buf[0] == MG_TLS_ALERT) {  // Skip Alerts
 80180a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80180a4:	681b      	ldr	r3, [r3, #0]
 80180a6:	781b      	ldrb	r3, [r3, #0]
 80180a8:	2b15      	cmp	r3, #21
 80180aa:	d111      	bne.n	80180d0 <mg_tls_recv_record+0xe4>
      MG_INFO(("TLS ALERT packet received"));
 80180ac:	4b56      	ldr	r3, [pc, #344]	@ (8018208 <mg_tls_recv_record+0x21c>)
 80180ae:	681b      	ldr	r3, [r3, #0]
 80180b0:	2b01      	cmp	r3, #1
 80180b2:	dd09      	ble.n	80180c8 <mg_tls_recv_record+0xdc>
 80180b4:	4b55      	ldr	r3, [pc, #340]	@ (801820c <mg_tls_recv_record+0x220>)
 80180b6:	f642 423a 	movw	r2, #11322	@ 0x2c3a
 80180ba:	4955      	ldr	r1, [pc, #340]	@ (8018210 <mg_tls_recv_record+0x224>)
 80180bc:	2002      	movs	r0, #2
 80180be:	f7f6 fbf1 	bl	800e8a4 <mg_log_prefix>
 80180c2:	4854      	ldr	r0, [pc, #336]	@ (8018214 <mg_tls_recv_record+0x228>)
 80180c4:	f7f6 fc3e 	bl	800e944 <mg_log>
      mg_tls_drop_record(c);
 80180c8:	6878      	ldr	r0, [r7, #4]
 80180ca:	f7ff fb20 	bl	801770e <mg_tls_drop_record>
 80180ce:	e7ce      	b.n	801806e <mg_tls_recv_record+0x82>
    } else {
      mg_error(c, "unexpected packet");
 80180d0:	4951      	ldr	r1, [pc, #324]	@ (8018218 <mg_tls_recv_record+0x22c>)
 80180d2:	6878      	ldr	r0, [r7, #4]
 80180d4:	f7f0 fd6e 	bl	8008bb4 <mg_error>
      return -1;
 80180d8:	f04f 33ff 	mov.w	r3, #4294967295
 80180dc:	e08f      	b.n	80181fe <mg_tls_recv_record+0x212>
      break;
 80180de:	bf00      	nop
    }
  }

  msgsz = MG_LOAD_BE16(rio->buf + 3);
 80180e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80180e2:	681b      	ldr	r3, [r3, #0]
 80180e4:	3303      	adds	r3, #3
 80180e6:	781b      	ldrb	r3, [r3, #0]
 80180e8:	b21b      	sxth	r3, r3
 80180ea:	021b      	lsls	r3, r3, #8
 80180ec:	b21a      	sxth	r2, r3
 80180ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80180f0:	681b      	ldr	r3, [r3, #0]
 80180f2:	3304      	adds	r3, #4
 80180f4:	781b      	ldrb	r3, [r3, #0]
 80180f6:	b21b      	sxth	r3, r3
 80180f8:	4313      	orrs	r3, r2
 80180fa:	b21b      	sxth	r3, r3
 80180fc:	857b      	strh	r3, [r7, #42]	@ 0x2a
  msg = rio->buf + 5;
 80180fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018100:	681b      	ldr	r3, [r3, #0]
 8018102:	3305      	adds	r3, #5
 8018104:	627b      	str	r3, [r7, #36]	@ 0x24
  if (msgsz < 16) {
 8018106:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8018108:	2b0f      	cmp	r3, #15
 801810a:	d806      	bhi.n	801811a <mg_tls_recv_record+0x12e>
    mg_error(c, "wrong size");
 801810c:	4943      	ldr	r1, [pc, #268]	@ (801821c <mg_tls_recv_record+0x230>)
 801810e:	6878      	ldr	r0, [r7, #4]
 8018110:	f7f0 fd50 	bl	8008bb4 <mg_error>
    return -1;
 8018114:	f04f 33ff 	mov.w	r3, #4294967295
 8018118:	e071      	b.n	80181fe <mg_tls_recv_record+0x212>
  }

  memmove(nonce, iv, sizeof(nonce));
 801811a:	f107 030c 	add.w	r3, r7, #12
 801811e:	220c      	movs	r2, #12
 8018120:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8018122:	4618      	mov	r0, r3
 8018124:	f00f fab6 	bl	8027694 <memmove>
  nonce[8] ^= (uint8_t) ((seq >> 24) & 255U);
 8018128:	7d3a      	ldrb	r2, [r7, #20]
 801812a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801812c:	0e1b      	lsrs	r3, r3, #24
 801812e:	b2db      	uxtb	r3, r3
 8018130:	4053      	eors	r3, r2
 8018132:	b2db      	uxtb	r3, r3
 8018134:	753b      	strb	r3, [r7, #20]
  nonce[9] ^= (uint8_t) ((seq >> 16) & 255U);
 8018136:	7d7a      	ldrb	r2, [r7, #21]
 8018138:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801813a:	0c1b      	lsrs	r3, r3, #16
 801813c:	b2db      	uxtb	r3, r3
 801813e:	4053      	eors	r3, r2
 8018140:	b2db      	uxtb	r3, r3
 8018142:	757b      	strb	r3, [r7, #21]
  nonce[10] ^= (uint8_t) ((seq >> 8) & 255U);
 8018144:	7dba      	ldrb	r2, [r7, #22]
 8018146:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018148:	0a1b      	lsrs	r3, r3, #8
 801814a:	b2db      	uxtb	r3, r3
 801814c:	4053      	eors	r3, r2
 801814e:	b2db      	uxtb	r3, r3
 8018150:	75bb      	strb	r3, [r7, #22]
  nonce[11] ^= (uint8_t) ((seq) &255U);
 8018152:	7dfa      	ldrb	r2, [r7, #23]
 8018154:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018156:	b2db      	uxtb	r3, r3
 8018158:	4053      	eors	r3, r2
 801815a:	b2db      	uxtb	r3, r3
 801815c:	75fb      	strb	r3, [r7, #23]
#if CHACHA20
  {
    uint8_t *dec = (uint8_t *) calloc(1, msgsz);
 801815e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8018160:	4619      	mov	r1, r3
 8018162:	2001      	movs	r0, #1
 8018164:	f00d fc02 	bl	802596c <calloc>
 8018168:	4603      	mov	r3, r0
 801816a:	623b      	str	r3, [r7, #32]
    size_t n;
    if (dec == NULL) {
 801816c:	6a3b      	ldr	r3, [r7, #32]
 801816e:	2b00      	cmp	r3, #0
 8018170:	d106      	bne.n	8018180 <mg_tls_recv_record+0x194>
      mg_error(c, "TLS OOM");
 8018172:	492b      	ldr	r1, [pc, #172]	@ (8018220 <mg_tls_recv_record+0x234>)
 8018174:	6878      	ldr	r0, [r7, #4]
 8018176:	f7f0 fd1d 	bl	8008bb4 <mg_error>
      return -1;
 801817a:	f04f 33ff 	mov.w	r3, #4294967295
 801817e:	e03e      	b.n	80181fe <mg_tls_recv_record+0x212>
    }
    n = mg_chacha20_poly1305_decrypt(dec, key, nonce, msg, msgsz);
 8018180:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8018182:	f107 020c 	add.w	r2, r7, #12
 8018186:	9300      	str	r3, [sp, #0]
 8018188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801818a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801818c:	6a38      	ldr	r0, [r7, #32]
 801818e:	f005 f99a 	bl	801d4c6 <mg_chacha20_poly1305_decrypt>
 8018192:	61f8      	str	r0, [r7, #28]
    memmove(msg, dec, n);
 8018194:	69fa      	ldr	r2, [r7, #28]
 8018196:	6a39      	ldr	r1, [r7, #32]
 8018198:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801819a:	f00f fa7b 	bl	8027694 <memmove>
    free(dec);
 801819e:	6a38      	ldr	r0, [r7, #32]
 80181a0:	f00d fc08 	bl	80259b4 <free>
#else
  mg_gcm_initialize();
  mg_aes_gcm_decrypt(msg, msg, msgsz - 16, key, 16, nonce, sizeof(nonce));
#endif

  r = msgsz - 16 - 1;
 80181a4:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80181a6:	3b11      	subs	r3, #17
 80181a8:	61bb      	str	r3, [r7, #24]
  tls->content_type = msg[msgsz - 16 - 1];
 80181aa:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80181ac:	3b11      	subs	r3, #17
 80181ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80181b0:	4413      	add	r3, r2
 80181b2:	781a      	ldrb	r2, [r3, #0]
 80181b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80181b6:	771a      	strb	r2, [r3, #28]
  tls->recv_offset = (size_t) msg - (size_t) rio->buf;
 80181b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80181ba:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80181bc:	6812      	ldr	r2, [r2, #0]
 80181be:	1a9a      	subs	r2, r3, r2
 80181c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80181c2:	615a      	str	r2, [r3, #20]
  tls->recv_len = (size_t) msgsz - 16 - 1;
 80181c4:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80181c6:	f1a3 0211 	sub.w	r2, r3, #17
 80181ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80181cc:	619a      	str	r2, [r3, #24]
  c->is_client ? tls->enc.sseq++ : tls->enc.cseq++;
 80181ce:	687b      	ldr	r3, [r7, #4]
 80181d0:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80181d4:	f003 0302 	and.w	r3, r3, #2
 80181d8:	b2db      	uxtb	r3, r3
 80181da:	2b00      	cmp	r3, #0
 80181dc:	d007      	beq.n	80181ee <mg_tls_recv_record+0x202>
 80181de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80181e0:	f8d3 3480 	ldr.w	r3, [r3, #1152]	@ 0x480
 80181e4:	1c5a      	adds	r2, r3, #1
 80181e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80181e8:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
 80181ec:	e006      	b.n	80181fc <mg_tls_recv_record+0x210>
 80181ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80181f0:	f8d3 3484 	ldr.w	r3, [r3, #1156]	@ 0x484
 80181f4:	1c5a      	adds	r2, r3, #1
 80181f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80181f8:	f8c3 2484 	str.w	r2, [r3, #1156]	@ 0x484
  return r;
 80181fc:	69bb      	ldr	r3, [r7, #24]
}
 80181fe:	4618      	mov	r0, r3
 8018200:	3740      	adds	r7, #64	@ 0x40
 8018202:	46bd      	mov	sp, r7
 8018204:	bd80      	pop	{r7, pc}
 8018206:	bf00      	nop
 8018208:	24000258 	.word	0x24000258
 801820c:	0802da44 	.word	0x0802da44
 8018210:	08029c3c 	.word	0x08029c3c
 8018214:	0802b72c 	.word	0x0802b72c
 8018218:	0802b748 	.word	0x0802b748
 801821c:	0802b600 	.word	0x0802b600
 8018220:	0802b724 	.word	0x0802b724

08018224 <mg_tls_calc_cert_verify_hash>:

static void mg_tls_calc_cert_verify_hash(struct mg_connection *c,
                                         uint8_t hash[32], int is_client) {
 8018224:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018226:	b0d5      	sub	sp, #340	@ 0x154
 8018228:	af00      	add	r7, sp, #0
 801822a:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 801822e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8018232:	6018      	str	r0, [r3, #0]
 8018234:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8018238:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 801823c:	6019      	str	r1, [r3, #0]
 801823e:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8018242:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8018246:	601a      	str	r2, [r3, #0]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8018248:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 801824c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8018250:	681b      	ldr	r3, [r3, #0]
 8018252:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8018256:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
  uint8_t server_context[34] = "TLS 1.3, server CertificateVerify";
 801825a:	4b41      	ldr	r3, [pc, #260]	@ (8018360 <mg_tls_calc_cert_verify_hash+0x13c>)
 801825c:	f507 7494 	add.w	r4, r7, #296	@ 0x128
 8018260:	461d      	mov	r5, r3
 8018262:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018264:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018266:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018268:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801826a:	682b      	ldr	r3, [r5, #0]
 801826c:	8023      	strh	r3, [r4, #0]
  uint8_t client_context[34] = "TLS 1.3, client CertificateVerify";
 801826e:	4b3d      	ldr	r3, [pc, #244]	@ (8018364 <mg_tls_calc_cert_verify_hash+0x140>)
 8018270:	f507 7482 	add.w	r4, r7, #260	@ 0x104
 8018274:	461d      	mov	r5, r3
 8018276:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018278:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801827a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801827c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801827e:	682b      	ldr	r3, [r5, #0]
 8018280:	8023      	strh	r3, [r4, #0]
  uint8_t sig_content[130];
  mg_sha256_ctx sha256;

  memset(sig_content, 0x20, 64);
 8018282:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8018286:	2240      	movs	r2, #64	@ 0x40
 8018288:	2120      	movs	r1, #32
 801828a:	4618      	mov	r0, r3
 801828c:	f00f fa1c 	bl	80276c8 <memset>
  if (is_client) {
 8018290:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8018294:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8018298:	681b      	ldr	r3, [r3, #0]
 801829a:	2b00      	cmp	r3, #0
 801829c:	d018      	beq.n	80182d0 <mg_tls_calc_cert_verify_hash+0xac>
    memmove(sig_content + 64, client_context, sizeof(client_context));
 801829e:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80182a2:	3340      	adds	r3, #64	@ 0x40
 80182a4:	f507 7482 	add.w	r4, r7, #260	@ 0x104
 80182a8:	469c      	mov	ip, r3
 80182aa:	f104 0e20 	add.w	lr, r4, #32
 80182ae:	4665      	mov	r5, ip
 80182b0:	4626      	mov	r6, r4
 80182b2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80182b4:	6028      	str	r0, [r5, #0]
 80182b6:	6069      	str	r1, [r5, #4]
 80182b8:	60aa      	str	r2, [r5, #8]
 80182ba:	60eb      	str	r3, [r5, #12]
 80182bc:	3410      	adds	r4, #16
 80182be:	f10c 0c10 	add.w	ip, ip, #16
 80182c2:	4574      	cmp	r4, lr
 80182c4:	d1f3      	bne.n	80182ae <mg_tls_calc_cert_verify_hash+0x8a>
 80182c6:	4662      	mov	r2, ip
 80182c8:	4623      	mov	r3, r4
 80182ca:	881b      	ldrh	r3, [r3, #0]
 80182cc:	8013      	strh	r3, [r2, #0]
 80182ce:	e017      	b.n	8018300 <mg_tls_calc_cert_verify_hash+0xdc>
  } else {
    memmove(sig_content + 64, server_context, sizeof(server_context));
 80182d0:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80182d4:	3340      	adds	r3, #64	@ 0x40
 80182d6:	f507 7494 	add.w	r4, r7, #296	@ 0x128
 80182da:	469c      	mov	ip, r3
 80182dc:	f104 0e20 	add.w	lr, r4, #32
 80182e0:	4665      	mov	r5, ip
 80182e2:	4626      	mov	r6, r4
 80182e4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80182e6:	6028      	str	r0, [r5, #0]
 80182e8:	6069      	str	r1, [r5, #4]
 80182ea:	60aa      	str	r2, [r5, #8]
 80182ec:	60eb      	str	r3, [r5, #12]
 80182ee:	3410      	adds	r4, #16
 80182f0:	f10c 0c10 	add.w	ip, ip, #16
 80182f4:	4574      	cmp	r4, lr
 80182f6:	d1f3      	bne.n	80182e0 <mg_tls_calc_cert_verify_hash+0xbc>
 80182f8:	4662      	mov	r2, ip
 80182fa:	4623      	mov	r3, r4
 80182fc:	881b      	ldrh	r3, [r3, #0]
 80182fe:	8013      	strh	r3, [r2, #0]
  }

  memmove(&sha256, &tls->sha256, sizeof(mg_sha256_ctx));
 8018300:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8018304:	f103 0120 	add.w	r1, r3, #32
 8018308:	f107 0310 	add.w	r3, r7, #16
 801830c:	2270      	movs	r2, #112	@ 0x70
 801830e:	4618      	mov	r0, r3
 8018310:	f00f f9c0 	bl	8027694 <memmove>
  mg_sha256_final(sig_content + 98, &sha256);
 8018314:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8018318:	3362      	adds	r3, #98	@ 0x62
 801831a:	f107 0210 	add.w	r2, r7, #16
 801831e:	4611      	mov	r1, r2
 8018320:	4618      	mov	r0, r3
 8018322:	f7fd f870 	bl	8015406 <mg_sha256_final>

  mg_sha256_init(&sha256);
 8018326:	f107 0310 	add.w	r3, r7, #16
 801832a:	4618      	mov	r0, r3
 801832c:	f7fc fdee 	bl	8014f0c <mg_sha256_init>
  mg_sha256_update(&sha256, sig_content, sizeof(sig_content));
 8018330:	f107 0180 	add.w	r1, r7, #128	@ 0x80
 8018334:	f107 0310 	add.w	r3, r7, #16
 8018338:	2282      	movs	r2, #130	@ 0x82
 801833a:	4618      	mov	r0, r3
 801833c:	f7fd f82a 	bl	8015394 <mg_sha256_update>
  mg_sha256_final(hash, &sha256);
 8018340:	f107 0210 	add.w	r2, r7, #16
 8018344:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8018348:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 801834c:	4611      	mov	r1, r2
 801834e:	6818      	ldr	r0, [r3, #0]
 8018350:	f7fd f859 	bl	8015406 <mg_sha256_final>
}
 8018354:	bf00      	nop
 8018356:	f507 77aa 	add.w	r7, r7, #340	@ 0x154
 801835a:	46bd      	mov	sp, r7
 801835c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801835e:	bf00      	nop
 8018360:	0802b75c 	.word	0x0802b75c
 8018364:	0802b780 	.word	0x0802b780

08018368 <mg_tls_server_recv_hello>:

// read and parse ClientHello record
static int mg_tls_server_recv_hello(struct mg_connection *c) {
 8018368:	b580      	push	{r7, lr}
 801836a:	b08c      	sub	sp, #48	@ 0x30
 801836c:	af00      	add	r7, sp, #0
 801836e:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8018370:	687b      	ldr	r3, [r7, #4]
 8018372:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8018376:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct mg_iobuf *rio = &c->rtls;
 8018378:	687b      	ldr	r3, [r7, #4]
 801837a:	3368      	adds	r3, #104	@ 0x68
 801837c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint16_t cipher_suites_len;
  uint16_t ext_len;
  uint8_t *ext;
  uint16_t msgsz;

  if (!mg_tls_got_record(c)) {
 801837e:	6878      	ldr	r0, [r7, #4]
 8018380:	f7ff f99d 	bl	80176be <mg_tls_got_record>
 8018384:	4603      	mov	r3, r0
 8018386:	f083 0301 	eor.w	r3, r3, #1
 801838a:	b2db      	uxtb	r3, r3
 801838c:	2b00      	cmp	r3, #0
 801838e:	d002      	beq.n	8018396 <mg_tls_server_recv_hello+0x2e>
    return MG_IO_WAIT;
 8018390:	f06f 0301 	mvn.w	r3, #1
 8018394:	e16d      	b.n	8018672 <mg_tls_server_recv_hello+0x30a>
  }
  if (rio->buf[0] != MG_TLS_HANDSHAKE || rio->buf[5] != MG_TLS_CLIENT_HELLO) {
 8018396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018398:	681b      	ldr	r3, [r3, #0]
 801839a:	781b      	ldrb	r3, [r3, #0]
 801839c:	2b16      	cmp	r3, #22
 801839e:	d105      	bne.n	80183ac <mg_tls_server_recv_hello+0x44>
 80183a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80183a2:	681b      	ldr	r3, [r3, #0]
 80183a4:	3305      	adds	r3, #5
 80183a6:	781b      	ldrb	r3, [r3, #0]
 80183a8:	2b01      	cmp	r3, #1
 80183aa:	d006      	beq.n	80183ba <mg_tls_server_recv_hello+0x52>
    mg_error(c, "not a client hello packet");
 80183ac:	4998      	ldr	r1, [pc, #608]	@ (8018610 <mg_tls_server_recv_hello+0x2a8>)
 80183ae:	6878      	ldr	r0, [r7, #4]
 80183b0:	f7f0 fc00 	bl	8008bb4 <mg_error>
    return -1;
 80183b4:	f04f 33ff 	mov.w	r3, #4294967295
 80183b8:	e15b      	b.n	8018672 <mg_tls_server_recv_hello+0x30a>
  }
  if (rio->len < 50) goto fail;
 80183ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80183bc:	689b      	ldr	r3, [r3, #8]
 80183be:	2b31      	cmp	r3, #49	@ 0x31
 80183c0:	f240 8146 	bls.w	8018650 <mg_tls_server_recv_hello+0x2e8>
  msgsz = MG_LOAD_BE16(rio->buf + 3);
 80183c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80183c6:	681b      	ldr	r3, [r3, #0]
 80183c8:	3303      	adds	r3, #3
 80183ca:	781b      	ldrb	r3, [r3, #0]
 80183cc:	b21b      	sxth	r3, r3
 80183ce:	021b      	lsls	r3, r3, #8
 80183d0:	b21a      	sxth	r2, r3
 80183d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80183d4:	681b      	ldr	r3, [r3, #0]
 80183d6:	3304      	adds	r3, #4
 80183d8:	781b      	ldrb	r3, [r3, #0]
 80183da:	b21b      	sxth	r3, r3
 80183dc:	4313      	orrs	r3, r2
 80183de:	b21b      	sxth	r3, r3
 80183e0:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (((uint32_t) msgsz + 4) > rio->len) goto fail;
 80183e2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80183e4:	1d1a      	adds	r2, r3, #4
 80183e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80183e8:	689b      	ldr	r3, [r3, #8]
 80183ea:	429a      	cmp	r2, r3
 80183ec:	f200 8132 	bhi.w	8018654 <mg_tls_server_recv_hello+0x2ec>
  mg_sha256_update(&tls->sha256, rio->buf + 5, msgsz);
 80183f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80183f2:	f103 0020 	add.w	r0, r3, #32
 80183f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80183f8:	681b      	ldr	r3, [r3, #0]
 80183fa:	3305      	adds	r3, #5
 80183fc:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80183fe:	4619      	mov	r1, r3
 8018400:	f7fc ffc8 	bl	8015394 <mg_sha256_update>
  // store client random
  memmove(tls->random, rio->buf + 11, sizeof(tls->random));
 8018404:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018406:	f103 0090 	add.w	r0, r3, #144	@ 0x90
 801840a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801840c:	681b      	ldr	r3, [r3, #0]
 801840e:	330b      	adds	r3, #11
 8018410:	2220      	movs	r2, #32
 8018412:	4619      	mov	r1, r3
 8018414:	f00f f93e 	bl	8027694 <memmove>
  // store session_id
  session_id_len = rio->buf[43];
 8018418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801841a:	681b      	ldr	r3, [r3, #0]
 801841c:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8018420:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (session_id_len == sizeof(tls->session_id)) {
 8018424:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8018428:	2b20      	cmp	r3, #32
 801842a:	d10b      	bne.n	8018444 <mg_tls_server_recv_hello+0xdc>
    memmove(tls->session_id, rio->buf + 44, session_id_len);
 801842c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801842e:	f103 00b0 	add.w	r0, r3, #176	@ 0xb0
 8018432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018434:	681b      	ldr	r3, [r3, #0]
 8018436:	332c      	adds	r3, #44	@ 0x2c
 8018438:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 801843c:	4619      	mov	r1, r3
 801843e:	f00f f929 	bl	8027694 <memmove>
 8018442:	e011      	b.n	8018468 <mg_tls_server_recv_hello+0x100>
  } else if (session_id_len != 0) {
 8018444:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8018448:	2b00      	cmp	r3, #0
 801844a:	d00d      	beq.n	8018468 <mg_tls_server_recv_hello+0x100>
    MG_INFO(("bad session id len"));
 801844c:	4b71      	ldr	r3, [pc, #452]	@ (8018614 <mg_tls_server_recv_hello+0x2ac>)
 801844e:	681b      	ldr	r3, [r3, #0]
 8018450:	2b01      	cmp	r3, #1
 8018452:	dd09      	ble.n	8018468 <mg_tls_server_recv_hello+0x100>
 8018454:	4b70      	ldr	r3, [pc, #448]	@ (8018618 <mg_tls_server_recv_hello+0x2b0>)
 8018456:	f642 429b 	movw	r2, #11419	@ 0x2c9b
 801845a:	4970      	ldr	r1, [pc, #448]	@ (801861c <mg_tls_server_recv_hello+0x2b4>)
 801845c:	2002      	movs	r0, #2
 801845e:	f7f6 fa21 	bl	800e8a4 <mg_log_prefix>
 8018462:	486f      	ldr	r0, [pc, #444]	@ (8018620 <mg_tls_server_recv_hello+0x2b8>)
 8018464:	f7f6 fa6e 	bl	800e944 <mg_log>
  }
  cipher_suites_len = MG_LOAD_BE16(rio->buf + 44 + session_id_len);
 8018468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801846a:	681a      	ldr	r2, [r3, #0]
 801846c:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8018470:	332c      	adds	r3, #44	@ 0x2c
 8018472:	4413      	add	r3, r2
 8018474:	781b      	ldrb	r3, [r3, #0]
 8018476:	b21b      	sxth	r3, r3
 8018478:	021b      	lsls	r3, r3, #8
 801847a:	b21a      	sxth	r2, r3
 801847c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801847e:	6819      	ldr	r1, [r3, #0]
 8018480:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8018484:	332d      	adds	r3, #45	@ 0x2d
 8018486:	440b      	add	r3, r1
 8018488:	781b      	ldrb	r3, [r3, #0]
 801848a:	b21b      	sxth	r3, r3
 801848c:	4313      	orrs	r3, r2
 801848e:	b21b      	sxth	r3, r3
 8018490:	83fb      	strh	r3, [r7, #30]
  if (((uint32_t) cipher_suites_len + 46 + session_id_len) > rio->len)
 8018492:	8bfa      	ldrh	r2, [r7, #30]
 8018494:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8018498:	4413      	add	r3, r2
 801849a:	f103 022e 	add.w	r2, r3, #46	@ 0x2e
 801849e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80184a0:	689b      	ldr	r3, [r3, #8]
 80184a2:	429a      	cmp	r2, r3
 80184a4:	f200 80d8 	bhi.w	8018658 <mg_tls_server_recv_hello+0x2f0>
    goto fail;
  ext_len = MG_LOAD_BE16(rio->buf + 48 + session_id_len + cipher_suites_len);
 80184a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80184aa:	681a      	ldr	r2, [r3, #0]
 80184ac:	f897 1021 	ldrb.w	r1, [r7, #33]	@ 0x21
 80184b0:	8bfb      	ldrh	r3, [r7, #30]
 80184b2:	440b      	add	r3, r1
 80184b4:	3330      	adds	r3, #48	@ 0x30
 80184b6:	4413      	add	r3, r2
 80184b8:	781b      	ldrb	r3, [r3, #0]
 80184ba:	b21b      	sxth	r3, r3
 80184bc:	021b      	lsls	r3, r3, #8
 80184be:	b21a      	sxth	r2, r3
 80184c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80184c2:	6819      	ldr	r1, [r3, #0]
 80184c4:	f897 0021 	ldrb.w	r0, [r7, #33]	@ 0x21
 80184c8:	8bfb      	ldrh	r3, [r7, #30]
 80184ca:	4403      	add	r3, r0
 80184cc:	3331      	adds	r3, #49	@ 0x31
 80184ce:	440b      	add	r3, r1
 80184d0:	781b      	ldrb	r3, [r3, #0]
 80184d2:	b21b      	sxth	r3, r3
 80184d4:	4313      	orrs	r3, r2
 80184d6:	b21b      	sxth	r3, r3
 80184d8:	83bb      	strh	r3, [r7, #28]
  ext = rio->buf + 50 + session_id_len + cipher_suites_len;
 80184da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80184dc:	681a      	ldr	r2, [r3, #0]
 80184de:	f897 1021 	ldrb.w	r1, [r7, #33]	@ 0x21
 80184e2:	8bfb      	ldrh	r3, [r7, #30]
 80184e4:	440b      	add	r3, r1
 80184e6:	3332      	adds	r3, #50	@ 0x32
 80184e8:	4413      	add	r3, r2
 80184ea:	61bb      	str	r3, [r7, #24]
  if (((unsigned char *) ext + ext_len) > (rio->buf + rio->len)) goto fail;
 80184ec:	8bbb      	ldrh	r3, [r7, #28]
 80184ee:	69ba      	ldr	r2, [r7, #24]
 80184f0:	441a      	add	r2, r3
 80184f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80184f4:	6819      	ldr	r1, [r3, #0]
 80184f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80184f8:	689b      	ldr	r3, [r3, #8]
 80184fa:	440b      	add	r3, r1
 80184fc:	429a      	cmp	r2, r3
 80184fe:	f200 80ad 	bhi.w	801865c <mg_tls_server_recv_hello+0x2f4>
  for (j = 0; j < ext_len;) {
 8018502:	2300      	movs	r3, #0
 8018504:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8018506:	e09d      	b.n	8018644 <mg_tls_server_recv_hello+0x2dc>
    uint16_t k;
    uint16_t key_exchange_len;
    uint8_t *key_exchange;
    uint16_t n = MG_LOAD_BE16(ext + j + 2);
 8018508:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801850a:	3302      	adds	r3, #2
 801850c:	69ba      	ldr	r2, [r7, #24]
 801850e:	4413      	add	r3, r2
 8018510:	781b      	ldrb	r3, [r3, #0]
 8018512:	b21b      	sxth	r3, r3
 8018514:	021b      	lsls	r3, r3, #8
 8018516:	b21a      	sxth	r2, r3
 8018518:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801851a:	3303      	adds	r3, #3
 801851c:	69b9      	ldr	r1, [r7, #24]
 801851e:	440b      	add	r3, r1
 8018520:	781b      	ldrb	r3, [r3, #0]
 8018522:	b21b      	sxth	r3, r3
 8018524:	4313      	orrs	r3, r2
 8018526:	b21b      	sxth	r3, r3
 8018528:	82fb      	strh	r3, [r7, #22]
    if (MG_LOAD_BE16(ext + j) != 0x0033) {  // not a key share extension, ignore
 801852a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801852c:	69ba      	ldr	r2, [r7, #24]
 801852e:	4413      	add	r3, r2
 8018530:	781b      	ldrb	r3, [r3, #0]
 8018532:	b21b      	sxth	r3, r3
 8018534:	021b      	lsls	r3, r3, #8
 8018536:	b21a      	sxth	r2, r3
 8018538:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801853a:	3301      	adds	r3, #1
 801853c:	69b9      	ldr	r1, [r7, #24]
 801853e:	440b      	add	r3, r1
 8018540:	781b      	ldrb	r3, [r3, #0]
 8018542:	b21b      	sxth	r3, r3
 8018544:	4313      	orrs	r3, r2
 8018546:	b21b      	sxth	r3, r3
 8018548:	2b33      	cmp	r3, #51	@ 0x33
 801854a:	d006      	beq.n	801855a <mg_tls_server_recv_hello+0x1f2>
      j += (uint16_t) (n + 4);
 801854c:	8afa      	ldrh	r2, [r7, #22]
 801854e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8018550:	4413      	add	r3, r2
 8018552:	b29b      	uxth	r3, r3
 8018554:	3304      	adds	r3, #4
 8018556:	85fb      	strh	r3, [r7, #46]	@ 0x2e
      continue;
 8018558:	e074      	b.n	8018644 <mg_tls_server_recv_hello+0x2dc>
    }
    key_exchange_len = MG_LOAD_BE16(ext + j + 4);
 801855a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801855c:	3304      	adds	r3, #4
 801855e:	69ba      	ldr	r2, [r7, #24]
 8018560:	4413      	add	r3, r2
 8018562:	781b      	ldrb	r3, [r3, #0]
 8018564:	b21b      	sxth	r3, r3
 8018566:	021b      	lsls	r3, r3, #8
 8018568:	b21a      	sxth	r2, r3
 801856a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801856c:	3305      	adds	r3, #5
 801856e:	69b9      	ldr	r1, [r7, #24]
 8018570:	440b      	add	r3, r1
 8018572:	781b      	ldrb	r3, [r3, #0]
 8018574:	b21b      	sxth	r3, r3
 8018576:	4313      	orrs	r3, r2
 8018578:	b21b      	sxth	r3, r3
 801857a:	82bb      	strh	r3, [r7, #20]
    key_exchange = ext + j + 6;
 801857c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801857e:	3306      	adds	r3, #6
 8018580:	69ba      	ldr	r2, [r7, #24]
 8018582:	4413      	add	r3, r2
 8018584:	613b      	str	r3, [r7, #16]
    if (((size_t) key_exchange_len +
 8018586:	8aba      	ldrh	r2, [r7, #20]
         ((size_t) key_exchange - (size_t) rio->buf)) > rio->len)
 8018588:	693b      	ldr	r3, [r7, #16]
 801858a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801858c:	6809      	ldr	r1, [r1, #0]
 801858e:	1a5b      	subs	r3, r3, r1
    if (((size_t) key_exchange_len +
 8018590:	441a      	add	r2, r3
         ((size_t) key_exchange - (size_t) rio->buf)) > rio->len)
 8018592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018594:	689b      	ldr	r3, [r3, #8]
    if (((size_t) key_exchange_len +
 8018596:	429a      	cmp	r2, r3
 8018598:	d862      	bhi.n	8018660 <mg_tls_server_recv_hello+0x2f8>
      goto fail;
    for (k = 0; k < key_exchange_len;) {
 801859a:	2300      	movs	r3, #0
 801859c:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 801859e:	e047      	b.n	8018630 <mg_tls_server_recv_hello+0x2c8>
      uint16_t m = MG_LOAD_BE16(key_exchange + k + 2);
 80185a0:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80185a2:	3302      	adds	r3, #2
 80185a4:	693a      	ldr	r2, [r7, #16]
 80185a6:	4413      	add	r3, r2
 80185a8:	781b      	ldrb	r3, [r3, #0]
 80185aa:	b21b      	sxth	r3, r3
 80185ac:	021b      	lsls	r3, r3, #8
 80185ae:	b21a      	sxth	r2, r3
 80185b0:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80185b2:	3303      	adds	r3, #3
 80185b4:	6939      	ldr	r1, [r7, #16]
 80185b6:	440b      	add	r3, r1
 80185b8:	781b      	ldrb	r3, [r3, #0]
 80185ba:	b21b      	sxth	r3, r3
 80185bc:	4313      	orrs	r3, r2
 80185be:	b21b      	sxth	r3, r3
 80185c0:	81fb      	strh	r3, [r7, #14]
      if (((uint32_t) m + k + 4) > key_exchange_len) goto fail;
 80185c2:	89fa      	ldrh	r2, [r7, #14]
 80185c4:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80185c6:	4413      	add	r3, r2
 80185c8:	1d1a      	adds	r2, r3, #4
 80185ca:	8abb      	ldrh	r3, [r7, #20]
 80185cc:	429a      	cmp	r2, r3
 80185ce:	d849      	bhi.n	8018664 <mg_tls_server_recv_hello+0x2fc>
      if (m == 32 && key_exchange[k] == 0x00 && key_exchange[k + 1] == 0x1d) {
 80185d0:	89fb      	ldrh	r3, [r7, #14]
 80185d2:	2b20      	cmp	r3, #32
 80185d4:	d126      	bne.n	8018624 <mg_tls_server_recv_hello+0x2bc>
 80185d6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80185d8:	693a      	ldr	r2, [r7, #16]
 80185da:	4413      	add	r3, r2
 80185dc:	781b      	ldrb	r3, [r3, #0]
 80185de:	2b00      	cmp	r3, #0
 80185e0:	d120      	bne.n	8018624 <mg_tls_server_recv_hello+0x2bc>
 80185e2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80185e4:	3301      	adds	r3, #1
 80185e6:	693a      	ldr	r2, [r7, #16]
 80185e8:	4413      	add	r3, r2
 80185ea:	781b      	ldrb	r3, [r3, #0]
 80185ec:	2b1d      	cmp	r3, #29
 80185ee:	d119      	bne.n	8018624 <mg_tls_server_recv_hello+0x2bc>
        memmove(tls->x25519_cli, key_exchange + k + 4, m);
 80185f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80185f2:	f103 00d0 	add.w	r0, r3, #208	@ 0xd0
 80185f6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80185f8:	3304      	adds	r3, #4
 80185fa:	693a      	ldr	r2, [r7, #16]
 80185fc:	4413      	add	r3, r2
 80185fe:	89fa      	ldrh	r2, [r7, #14]
 8018600:	4619      	mov	r1, r3
 8018602:	f00f f847 	bl	8027694 <memmove>
        mg_tls_drop_record(c);
 8018606:	6878      	ldr	r0, [r7, #4]
 8018608:	f7ff f881 	bl	801770e <mg_tls_drop_record>
        return 0;
 801860c:	2300      	movs	r3, #0
 801860e:	e030      	b.n	8018672 <mg_tls_server_recv_hello+0x30a>
 8018610:	0802b7a4 	.word	0x0802b7a4
 8018614:	24000258 	.word	0x24000258
 8018618:	0802da58 	.word	0x0802da58
 801861c:	08029c3c 	.word	0x08029c3c
 8018620:	0802b7c0 	.word	0x0802b7c0
      }
      k += (uint16_t) (m + 4);
 8018624:	89fa      	ldrh	r2, [r7, #14]
 8018626:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8018628:	4413      	add	r3, r2
 801862a:	b29b      	uxth	r3, r3
 801862c:	3304      	adds	r3, #4
 801862e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    for (k = 0; k < key_exchange_len;) {
 8018630:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8018632:	8abb      	ldrh	r3, [r7, #20]
 8018634:	429a      	cmp	r2, r3
 8018636:	d3b3      	bcc.n	80185a0 <mg_tls_server_recv_hello+0x238>
    }
    j += (uint16_t) (n + 4);
 8018638:	8afa      	ldrh	r2, [r7, #22]
 801863a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801863c:	4413      	add	r3, r2
 801863e:	b29b      	uxth	r3, r3
 8018640:	3304      	adds	r3, #4
 8018642:	85fb      	strh	r3, [r7, #46]	@ 0x2e
  for (j = 0; j < ext_len;) {
 8018644:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8018646:	8bbb      	ldrh	r3, [r7, #28]
 8018648:	429a      	cmp	r2, r3
 801864a:	f4ff af5d 	bcc.w	8018508 <mg_tls_server_recv_hello+0x1a0>
  }
fail:
 801864e:	e00a      	b.n	8018666 <mg_tls_server_recv_hello+0x2fe>
  if (rio->len < 50) goto fail;
 8018650:	bf00      	nop
 8018652:	e008      	b.n	8018666 <mg_tls_server_recv_hello+0x2fe>
  if (((uint32_t) msgsz + 4) > rio->len) goto fail;
 8018654:	bf00      	nop
 8018656:	e006      	b.n	8018666 <mg_tls_server_recv_hello+0x2fe>
    goto fail;
 8018658:	bf00      	nop
 801865a:	e004      	b.n	8018666 <mg_tls_server_recv_hello+0x2fe>
  if (((unsigned char *) ext + ext_len) > (rio->buf + rio->len)) goto fail;
 801865c:	bf00      	nop
 801865e:	e002      	b.n	8018666 <mg_tls_server_recv_hello+0x2fe>
      goto fail;
 8018660:	bf00      	nop
 8018662:	e000      	b.n	8018666 <mg_tls_server_recv_hello+0x2fe>
      if (((uint32_t) m + k + 4) > key_exchange_len) goto fail;
 8018664:	bf00      	nop
  mg_error(c, "bad client hello");
 8018666:	4905      	ldr	r1, [pc, #20]	@ (801867c <mg_tls_server_recv_hello+0x314>)
 8018668:	6878      	ldr	r0, [r7, #4]
 801866a:	f7f0 faa3 	bl	8008bb4 <mg_error>
  return -1;
 801866e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8018672:	4618      	mov	r0, r3
 8018674:	3730      	adds	r7, #48	@ 0x30
 8018676:	46bd      	mov	sp, r7
 8018678:	bd80      	pop	{r7, pc}
 801867a:	bf00      	nop
 801867c:	0802b7d4 	.word	0x0802b7d4

08018680 <mg_tls_server_send_hello>:
#define PLACEHOLDER_8B 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X'
#define PLACEHOLDER_16B PLACEHOLDER_8B, PLACEHOLDER_8B
#define PLACEHOLDER_32B PLACEHOLDER_16B, PLACEHOLDER_16B

// put ServerHello record into wio buffer
static void mg_tls_server_send_hello(struct mg_connection *c) {
 8018680:	b5b0      	push	{r4, r5, r7, lr}
 8018682:	b0b4      	sub	sp, #208	@ 0xd0
 8018684:	af00      	add	r7, sp, #0
 8018686:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8018688:	687b      	ldr	r3, [r7, #4]
 801868a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801868e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  struct mg_iobuf *wio = &tls->send;
 8018692:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8018696:	3304      	adds	r3, #4
 8018698:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

  // clang-format off
  uint8_t msg_server_hello[122] = {
 801869c:	4a4c      	ldr	r2, [pc, #304]	@ (80187d0 <mg_tls_server_send_hello+0x150>)
 801869e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80186a2:	4611      	mov	r1, r2
 80186a4:	227a      	movs	r2, #122	@ 0x7a
 80186a6:	4618      	mov	r0, r3
 80186a8:	f00f f947 	bl	802793a <memcpy>
  // clang-format on

  // calculate keyshare
  uint8_t x25519_pub[X25519_BYTES];
  uint8_t x25519_prv[X25519_BYTES];
  if (!mg_random(x25519_prv, sizeof(x25519_prv))) mg_error(c, "RNG");
 80186ac:	f107 030c 	add.w	r3, r7, #12
 80186b0:	2120      	movs	r1, #32
 80186b2:	4618      	mov	r0, r3
 80186b4:	f7e8 fa1e 	bl	8000af4 <mg_random>
 80186b8:	4603      	mov	r3, r0
 80186ba:	f083 0301 	eor.w	r3, r3, #1
 80186be:	b2db      	uxtb	r3, r3
 80186c0:	2b00      	cmp	r3, #0
 80186c2:	d003      	beq.n	80186cc <mg_tls_server_send_hello+0x4c>
 80186c4:	4943      	ldr	r1, [pc, #268]	@ (80187d4 <mg_tls_server_send_hello+0x154>)
 80186c6:	6878      	ldr	r0, [r7, #4]
 80186c8:	f7f0 fa74 	bl	8008bb4 <mg_error>
  mg_tls_x25519(x25519_pub, x25519_prv, X25519_BASE_POINT, 1);
 80186cc:	f107 010c 	add.w	r1, r7, #12
 80186d0:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 80186d4:	2301      	movs	r3, #1
 80186d6:	4a40      	ldr	r2, [pc, #256]	@ (80187d8 <mg_tls_server_send_hello+0x158>)
 80186d8:	f009 f872 	bl	80217c0 <mg_tls_x25519>
  mg_tls_x25519(tls->x25519_sec, x25519_prv, tls->x25519_cli, 1);
 80186dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80186e0:	f103 00f0 	add.w	r0, r3, #240	@ 0xf0
 80186e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80186e8:	f103 02d0 	add.w	r2, r3, #208	@ 0xd0
 80186ec:	f107 010c 	add.w	r1, r7, #12
 80186f0:	2301      	movs	r3, #1
 80186f2:	f009 f865 	bl	80217c0 <mg_tls_x25519>
  mg_tls_hexdump("s x25519 sec", tls->x25519_sec, sizeof(tls->x25519_sec));
 80186f6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80186fa:	33f0      	adds	r3, #240	@ 0xf0
 80186fc:	2220      	movs	r2, #32
 80186fe:	4619      	mov	r1, r3
 8018700:	4836      	ldr	r0, [pc, #216]	@ (80187dc <mg_tls_server_send_hello+0x15c>)
 8018702:	f7fe fe85 	bl	8017410 <mg_tls_hexdump>

  // fill in the gaps: random + session ID + keyshare
  memmove(msg_server_hello + 6, tls->random, sizeof(tls->random));
 8018706:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 801870a:	3306      	adds	r3, #6
 801870c:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8018710:	3290      	adds	r2, #144	@ 0x90
 8018712:	6815      	ldr	r5, [r2, #0]
 8018714:	6854      	ldr	r4, [r2, #4]
 8018716:	6890      	ldr	r0, [r2, #8]
 8018718:	68d1      	ldr	r1, [r2, #12]
 801871a:	601d      	str	r5, [r3, #0]
 801871c:	605c      	str	r4, [r3, #4]
 801871e:	6098      	str	r0, [r3, #8]
 8018720:	60d9      	str	r1, [r3, #12]
 8018722:	6915      	ldr	r5, [r2, #16]
 8018724:	6954      	ldr	r4, [r2, #20]
 8018726:	6990      	ldr	r0, [r2, #24]
 8018728:	69d1      	ldr	r1, [r2, #28]
 801872a:	611d      	str	r5, [r3, #16]
 801872c:	615c      	str	r4, [r3, #20]
 801872e:	6198      	str	r0, [r3, #24]
 8018730:	61d9      	str	r1, [r3, #28]
  memmove(msg_server_hello + 39, tls->session_id, sizeof(tls->session_id));
 8018732:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8018736:	3327      	adds	r3, #39	@ 0x27
 8018738:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 801873c:	32b0      	adds	r2, #176	@ 0xb0
 801873e:	6815      	ldr	r5, [r2, #0]
 8018740:	6854      	ldr	r4, [r2, #4]
 8018742:	6890      	ldr	r0, [r2, #8]
 8018744:	68d1      	ldr	r1, [r2, #12]
 8018746:	601d      	str	r5, [r3, #0]
 8018748:	605c      	str	r4, [r3, #4]
 801874a:	6098      	str	r0, [r3, #8]
 801874c:	60d9      	str	r1, [r3, #12]
 801874e:	6915      	ldr	r5, [r2, #16]
 8018750:	6954      	ldr	r4, [r2, #20]
 8018752:	6990      	ldr	r0, [r2, #24]
 8018754:	69d1      	ldr	r1, [r2, #28]
 8018756:	611d      	str	r5, [r3, #16]
 8018758:	615c      	str	r4, [r3, #20]
 801875a:	6198      	str	r0, [r3, #24]
 801875c:	61d9      	str	r1, [r3, #28]
  memmove(msg_server_hello + 84, x25519_pub, sizeof(x25519_pub));
 801875e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8018762:	3354      	adds	r3, #84	@ 0x54
 8018764:	461d      	mov	r5, r3
 8018766:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 801876a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801876c:	6028      	str	r0, [r5, #0]
 801876e:	6069      	str	r1, [r5, #4]
 8018770:	60aa      	str	r2, [r5, #8]
 8018772:	60eb      	str	r3, [r5, #12]
 8018774:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018776:	6128      	str	r0, [r5, #16]
 8018778:	6169      	str	r1, [r5, #20]
 801877a:	61aa      	str	r2, [r5, #24]
 801877c:	61eb      	str	r3, [r5, #28]

  // server hello message
  mg_iobuf_add(wio, wio->len, "\x16\x03\x03\x00\x7a", 5);
 801877e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8018782:	6899      	ldr	r1, [r3, #8]
 8018784:	2305      	movs	r3, #5
 8018786:	4a16      	ldr	r2, [pc, #88]	@ (80187e0 <mg_tls_server_send_hello+0x160>)
 8018788:	f8d7 00c8 	ldr.w	r0, [r7, #200]	@ 0xc8
 801878c:	f7f5 f820 	bl	800d7d0 <mg_iobuf_add>
  mg_iobuf_add(wio, wio->len, msg_server_hello, sizeof(msg_server_hello));
 8018790:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8018794:	6899      	ldr	r1, [r3, #8]
 8018796:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 801879a:	237a      	movs	r3, #122	@ 0x7a
 801879c:	f8d7 00c8 	ldr.w	r0, [r7, #200]	@ 0xc8
 80187a0:	f7f5 f816 	bl	800d7d0 <mg_iobuf_add>
  mg_sha256_update(&tls->sha256, msg_server_hello, sizeof(msg_server_hello));
 80187a4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80187a8:	3320      	adds	r3, #32
 80187aa:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 80187ae:	227a      	movs	r2, #122	@ 0x7a
 80187b0:	4618      	mov	r0, r3
 80187b2:	f7fc fdef 	bl	8015394 <mg_sha256_update>

  // change cipher message
  mg_iobuf_add(wio, wio->len, "\x14\x03\x03\x00\x01\x01", 6);
 80187b6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80187ba:	6899      	ldr	r1, [r3, #8]
 80187bc:	2306      	movs	r3, #6
 80187be:	4a09      	ldr	r2, [pc, #36]	@ (80187e4 <mg_tls_server_send_hello+0x164>)
 80187c0:	f8d7 00c8 	ldr.w	r0, [r7, #200]	@ 0xc8
 80187c4:	f7f5 f804 	bl	800d7d0 <mg_iobuf_add>
}
 80187c8:	bf00      	nop
 80187ca:	37d0      	adds	r7, #208	@ 0xd0
 80187cc:	46bd      	mov	sp, r7
 80187ce:	bdb0      	pop	{r4, r5, r7, pc}
 80187d0:	0802b80c 	.word	0x0802b80c
 80187d4:	0802b7e8 	.word	0x0802b7e8
 80187d8:	0802d7b4 	.word	0x0802d7b4
 80187dc:	0802b7ec 	.word	0x0802b7ec
 80187e0:	0802b7fc 	.word	0x0802b7fc
 80187e4:	0802b804 	.word	0x0802b804

080187e8 <mg_tls_server_send_ext>:

static void mg_tls_server_send_ext(struct mg_connection *c) {
 80187e8:	b580      	push	{r7, lr}
 80187ea:	b086      	sub	sp, #24
 80187ec:	af00      	add	r7, sp, #0
 80187ee:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 80187f0:	687b      	ldr	r3, [r7, #4]
 80187f2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80187f6:	617b      	str	r3, [r7, #20]
  // server extensions
  uint8_t ext[6] = {0x08, 0, 0, 2, 0, 0};
 80187f8:	4b0b      	ldr	r3, [pc, #44]	@ (8018828 <mg_tls_server_send_ext+0x40>)
 80187fa:	60fb      	str	r3, [r7, #12]
 80187fc:	2300      	movs	r3, #0
 80187fe:	823b      	strh	r3, [r7, #16]
  mg_sha256_update(&tls->sha256, ext, sizeof(ext));
 8018800:	697b      	ldr	r3, [r7, #20]
 8018802:	3320      	adds	r3, #32
 8018804:	f107 010c 	add.w	r1, r7, #12
 8018808:	2206      	movs	r2, #6
 801880a:	4618      	mov	r0, r3
 801880c:	f7fc fdc2 	bl	8015394 <mg_sha256_update>
  mg_tls_encrypt(c, ext, sizeof(ext), MG_TLS_HANDSHAKE);
 8018810:	f107 010c 	add.w	r1, r7, #12
 8018814:	2316      	movs	r3, #22
 8018816:	2206      	movs	r2, #6
 8018818:	6878      	ldr	r0, [r7, #4]
 801881a:	f7ff faeb 	bl	8017df4 <mg_tls_encrypt>
}
 801881e:	bf00      	nop
 8018820:	3718      	adds	r7, #24
 8018822:	46bd      	mov	sp, r7
 8018824:	bd80      	pop	{r7, pc}
 8018826:	bf00      	nop
 8018828:	02000008 	.word	0x02000008

0801882c <mg_tls_server_send_cert>:

static void mg_tls_server_send_cert(struct mg_connection *c) {
 801882c:	b580      	push	{r7, lr}
 801882e:	b088      	sub	sp, #32
 8018830:	af00      	add	r7, sp, #0
 8018832:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8018834:	687b      	ldr	r3, [r7, #4]
 8018836:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801883a:	61fb      	str	r3, [r7, #28]
  int send_ca = !c->is_client && tls->ca_der.len > 0;
 801883c:	687b      	ldr	r3, [r7, #4]
 801883e:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8018842:	f003 0302 	and.w	r3, r3, #2
 8018846:	b2db      	uxtb	r3, r3
 8018848:	2b00      	cmp	r3, #0
 801884a:	d106      	bne.n	801885a <mg_tls_server_send_cert+0x2e>
 801884c:	69fb      	ldr	r3, [r7, #28]
 801884e:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8018852:	2b00      	cmp	r3, #0
 8018854:	d001      	beq.n	801885a <mg_tls_server_send_cert+0x2e>
 8018856:	2301      	movs	r3, #1
 8018858:	e000      	b.n	801885c <mg_tls_server_send_cert+0x30>
 801885a:	2300      	movs	r3, #0
 801885c:	61bb      	str	r3, [r7, #24]
  // server DER certificate + CA (optional)
  size_t n = tls->cert_der.len + (send_ca ? tls->ca_der.len + 5 : 0);
 801885e:	69fb      	ldr	r3, [r7, #28]
 8018860:	f8d3 211c 	ldr.w	r2, [r3, #284]	@ 0x11c
 8018864:	69bb      	ldr	r3, [r7, #24]
 8018866:	2b00      	cmp	r3, #0
 8018868:	d004      	beq.n	8018874 <mg_tls_server_send_cert+0x48>
 801886a:	69fb      	ldr	r3, [r7, #28]
 801886c:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8018870:	3305      	adds	r3, #5
 8018872:	e000      	b.n	8018876 <mg_tls_server_send_cert+0x4a>
 8018874:	2300      	movs	r3, #0
 8018876:	4413      	add	r3, r2
 8018878:	617b      	str	r3, [r7, #20]
  uint8_t *cert = (uint8_t *) calloc(1, 13 + n);
 801887a:	697b      	ldr	r3, [r7, #20]
 801887c:	330d      	adds	r3, #13
 801887e:	4619      	mov	r1, r3
 8018880:	2001      	movs	r0, #1
 8018882:	f00d f873 	bl	802596c <calloc>
 8018886:	4603      	mov	r3, r0
 8018888:	613b      	str	r3, [r7, #16]
  if (cert == NULL) {
 801888a:	693b      	ldr	r3, [r7, #16]
 801888c:	2b00      	cmp	r3, #0
 801888e:	d104      	bne.n	801889a <mg_tls_server_send_cert+0x6e>
    mg_error(c, "tls cert oom");
 8018890:	495e      	ldr	r1, [pc, #376]	@ (8018a0c <mg_tls_server_send_cert+0x1e0>)
 8018892:	6878      	ldr	r0, [r7, #4]
 8018894:	f7f0 f98e 	bl	8008bb4 <mg_error>
    return;
 8018898:	e0b4      	b.n	8018a04 <mg_tls_server_send_cert+0x1d8>
  }
  cert[0] = 0x0b;  // handshake header
 801889a:	693b      	ldr	r3, [r7, #16]
 801889c:	220b      	movs	r2, #11
 801889e:	701a      	strb	r2, [r3, #0]
  MG_STORE_BE24(cert + 1, n + 9);
 80188a0:	697b      	ldr	r3, [r7, #20]
 80188a2:	3309      	adds	r3, #9
 80188a4:	0c1a      	lsrs	r2, r3, #16
 80188a6:	693b      	ldr	r3, [r7, #16]
 80188a8:	3301      	adds	r3, #1
 80188aa:	b2d2      	uxtb	r2, r2
 80188ac:	701a      	strb	r2, [r3, #0]
 80188ae:	697b      	ldr	r3, [r7, #20]
 80188b0:	3309      	adds	r3, #9
 80188b2:	0a1a      	lsrs	r2, r3, #8
 80188b4:	693b      	ldr	r3, [r7, #16]
 80188b6:	3302      	adds	r3, #2
 80188b8:	b2d2      	uxtb	r2, r2
 80188ba:	701a      	strb	r2, [r3, #0]
 80188bc:	697b      	ldr	r3, [r7, #20]
 80188be:	b2da      	uxtb	r2, r3
 80188c0:	693b      	ldr	r3, [r7, #16]
 80188c2:	3303      	adds	r3, #3
 80188c4:	3209      	adds	r2, #9
 80188c6:	b2d2      	uxtb	r2, r2
 80188c8:	701a      	strb	r2, [r3, #0]
  cert[4] = 0;                                 // request context
 80188ca:	693b      	ldr	r3, [r7, #16]
 80188cc:	3304      	adds	r3, #4
 80188ce:	2200      	movs	r2, #0
 80188d0:	701a      	strb	r2, [r3, #0]
  MG_STORE_BE24(cert + 5, n + 5);              // 3 bytes: cert (s) length
 80188d2:	697b      	ldr	r3, [r7, #20]
 80188d4:	3305      	adds	r3, #5
 80188d6:	0c1a      	lsrs	r2, r3, #16
 80188d8:	693b      	ldr	r3, [r7, #16]
 80188da:	3305      	adds	r3, #5
 80188dc:	b2d2      	uxtb	r2, r2
 80188de:	701a      	strb	r2, [r3, #0]
 80188e0:	697b      	ldr	r3, [r7, #20]
 80188e2:	3305      	adds	r3, #5
 80188e4:	0a1a      	lsrs	r2, r3, #8
 80188e6:	693b      	ldr	r3, [r7, #16]
 80188e8:	3306      	adds	r3, #6
 80188ea:	b2d2      	uxtb	r2, r2
 80188ec:	701a      	strb	r2, [r3, #0]
 80188ee:	697b      	ldr	r3, [r7, #20]
 80188f0:	b2da      	uxtb	r2, r3
 80188f2:	693b      	ldr	r3, [r7, #16]
 80188f4:	3307      	adds	r3, #7
 80188f6:	3205      	adds	r2, #5
 80188f8:	b2d2      	uxtb	r2, r2
 80188fa:	701a      	strb	r2, [r3, #0]
  MG_STORE_BE24(cert + 8, tls->cert_der.len);  // 3 bytes: first cert len
 80188fc:	69fb      	ldr	r3, [r7, #28]
 80188fe:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8018902:	0c1a      	lsrs	r2, r3, #16
 8018904:	693b      	ldr	r3, [r7, #16]
 8018906:	3308      	adds	r3, #8
 8018908:	b2d2      	uxtb	r2, r2
 801890a:	701a      	strb	r2, [r3, #0]
 801890c:	69fb      	ldr	r3, [r7, #28]
 801890e:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8018912:	0a1a      	lsrs	r2, r3, #8
 8018914:	693b      	ldr	r3, [r7, #16]
 8018916:	3309      	adds	r3, #9
 8018918:	b2d2      	uxtb	r2, r2
 801891a:	701a      	strb	r2, [r3, #0]
 801891c:	69fb      	ldr	r3, [r7, #28]
 801891e:	f8d3 211c 	ldr.w	r2, [r3, #284]	@ 0x11c
 8018922:	693b      	ldr	r3, [r7, #16]
 8018924:	330a      	adds	r3, #10
 8018926:	b2d2      	uxtb	r2, r2
 8018928:	701a      	strb	r2, [r3, #0]
  // bytes 11+ are certificate in DER format
  memmove(cert + 11, tls->cert_der.buf, tls->cert_der.len);
 801892a:	693b      	ldr	r3, [r7, #16]
 801892c:	f103 000b 	add.w	r0, r3, #11
 8018930:	69fb      	ldr	r3, [r7, #28]
 8018932:	f8d3 1118 	ldr.w	r1, [r3, #280]	@ 0x118
 8018936:	69fb      	ldr	r3, [r7, #28]
 8018938:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 801893c:	461a      	mov	r2, r3
 801893e:	f00e fea9 	bl	8027694 <memmove>
  MG_STORE_BE16(cert + 11 + tls->cert_der.len,
 8018942:	69fb      	ldr	r3, [r7, #28]
 8018944:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8018948:	330b      	adds	r3, #11
 801894a:	693a      	ldr	r2, [r7, #16]
 801894c:	4413      	add	r3, r2
 801894e:	2200      	movs	r2, #0
 8018950:	701a      	strb	r2, [r3, #0]
 8018952:	69fb      	ldr	r3, [r7, #28]
 8018954:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8018958:	330c      	adds	r3, #12
 801895a:	693a      	ldr	r2, [r7, #16]
 801895c:	4413      	add	r3, r2
 801895e:	2200      	movs	r2, #0
 8018960:	701a      	strb	r2, [r3, #0]
                0);  // certificate extensions (none)
  if (send_ca) {
 8018962:	69bb      	ldr	r3, [r7, #24]
 8018964:	2b00      	cmp	r3, #0
 8018966:	d039      	beq.n	80189dc <mg_tls_server_send_cert+0x1b0>
    size_t offset = 13 + tls->cert_der.len;
 8018968:	69fb      	ldr	r3, [r7, #28]
 801896a:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 801896e:	330d      	adds	r3, #13
 8018970:	60fb      	str	r3, [r7, #12]
    MG_STORE_BE24(cert + offset, tls->ca_der.len);  // 3 bytes: CA cert length
 8018972:	69fb      	ldr	r3, [r7, #28]
 8018974:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8018978:	0c19      	lsrs	r1, r3, #16
 801897a:	693a      	ldr	r2, [r7, #16]
 801897c:	68fb      	ldr	r3, [r7, #12]
 801897e:	4413      	add	r3, r2
 8018980:	b2ca      	uxtb	r2, r1
 8018982:	701a      	strb	r2, [r3, #0]
 8018984:	69fb      	ldr	r3, [r7, #28]
 8018986:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 801898a:	0a19      	lsrs	r1, r3, #8
 801898c:	68fb      	ldr	r3, [r7, #12]
 801898e:	3301      	adds	r3, #1
 8018990:	693a      	ldr	r2, [r7, #16]
 8018992:	4413      	add	r3, r2
 8018994:	b2ca      	uxtb	r2, r1
 8018996:	701a      	strb	r2, [r3, #0]
 8018998:	69fb      	ldr	r3, [r7, #28]
 801899a:	f8d3 1124 	ldr.w	r1, [r3, #292]	@ 0x124
 801899e:	68fb      	ldr	r3, [r7, #12]
 80189a0:	3302      	adds	r3, #2
 80189a2:	693a      	ldr	r2, [r7, #16]
 80189a4:	4413      	add	r3, r2
 80189a6:	b2ca      	uxtb	r2, r1
 80189a8:	701a      	strb	r2, [r3, #0]
    memmove(cert + offset + 3, tls->ca_der.buf,
 80189aa:	68fb      	ldr	r3, [r7, #12]
 80189ac:	3303      	adds	r3, #3
 80189ae:	693a      	ldr	r2, [r7, #16]
 80189b0:	18d0      	adds	r0, r2, r3
 80189b2:	69fb      	ldr	r3, [r7, #28]
 80189b4:	f8d3 1120 	ldr.w	r1, [r3, #288]	@ 0x120
 80189b8:	69fb      	ldr	r3, [r7, #28]
 80189ba:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 80189be:	461a      	mov	r2, r3
 80189c0:	f00e fe68 	bl	8027694 <memmove>
            tls->ca_der.len);         // CA cert data
    MG_STORE_BE16(cert + 11 + n, 0);  // certificate extensions (none)
 80189c4:	697b      	ldr	r3, [r7, #20]
 80189c6:	330b      	adds	r3, #11
 80189c8:	693a      	ldr	r2, [r7, #16]
 80189ca:	4413      	add	r3, r2
 80189cc:	2200      	movs	r2, #0
 80189ce:	701a      	strb	r2, [r3, #0]
 80189d0:	697b      	ldr	r3, [r7, #20]
 80189d2:	330c      	adds	r3, #12
 80189d4:	693a      	ldr	r2, [r7, #16]
 80189d6:	4413      	add	r3, r2
 80189d8:	2200      	movs	r2, #0
 80189da:	701a      	strb	r2, [r3, #0]
  }
  mg_sha256_update(&tls->sha256, cert, 13 + n);
 80189dc:	69fb      	ldr	r3, [r7, #28]
 80189de:	f103 0020 	add.w	r0, r3, #32
 80189e2:	697b      	ldr	r3, [r7, #20]
 80189e4:	330d      	adds	r3, #13
 80189e6:	461a      	mov	r2, r3
 80189e8:	6939      	ldr	r1, [r7, #16]
 80189ea:	f7fc fcd3 	bl	8015394 <mg_sha256_update>
  mg_tls_encrypt(c, cert, 13 + n, MG_TLS_HANDSHAKE);
 80189ee:	697b      	ldr	r3, [r7, #20]
 80189f0:	f103 020d 	add.w	r2, r3, #13
 80189f4:	2316      	movs	r3, #22
 80189f6:	6939      	ldr	r1, [r7, #16]
 80189f8:	6878      	ldr	r0, [r7, #4]
 80189fa:	f7ff f9fb 	bl	8017df4 <mg_tls_encrypt>
  free(cert);
 80189fe:	6938      	ldr	r0, [r7, #16]
 8018a00:	f00c ffd8 	bl	80259b4 <free>
}
 8018a04:	3720      	adds	r7, #32
 8018a06:	46bd      	mov	sp, r7
 8018a08:	bd80      	pop	{r7, pc}
 8018a0a:	bf00      	nop
 8018a0c:	0802b888 	.word	0x0802b888

08018a10 <init_SHA256>:
typedef struct SHA256_HashContext {
  MG_UECC_HashContext uECC;
  mg_sha256_ctx ctx;
} SHA256_HashContext;

static void init_SHA256(const MG_UECC_HashContext *base) {
 8018a10:	b580      	push	{r7, lr}
 8018a12:	b084      	sub	sp, #16
 8018a14:	af00      	add	r7, sp, #0
 8018a16:	6078      	str	r0, [r7, #4]
  SHA256_HashContext *c = (SHA256_HashContext *) base;
 8018a18:	687b      	ldr	r3, [r7, #4]
 8018a1a:	60fb      	str	r3, [r7, #12]
  mg_sha256_init(&c->ctx);
 8018a1c:	68fb      	ldr	r3, [r7, #12]
 8018a1e:	3318      	adds	r3, #24
 8018a20:	4618      	mov	r0, r3
 8018a22:	f7fc fa73 	bl	8014f0c <mg_sha256_init>
}
 8018a26:	bf00      	nop
 8018a28:	3710      	adds	r7, #16
 8018a2a:	46bd      	mov	sp, r7
 8018a2c:	bd80      	pop	{r7, pc}

08018a2e <update_SHA256>:

static void update_SHA256(const MG_UECC_HashContext *base,
                          const uint8_t *message, unsigned message_size) {
 8018a2e:	b580      	push	{r7, lr}
 8018a30:	b086      	sub	sp, #24
 8018a32:	af00      	add	r7, sp, #0
 8018a34:	60f8      	str	r0, [r7, #12]
 8018a36:	60b9      	str	r1, [r7, #8]
 8018a38:	607a      	str	r2, [r7, #4]
  SHA256_HashContext *c = (SHA256_HashContext *) base;
 8018a3a:	68fb      	ldr	r3, [r7, #12]
 8018a3c:	617b      	str	r3, [r7, #20]
  mg_sha256_update(&c->ctx, message, message_size);
 8018a3e:	697b      	ldr	r3, [r7, #20]
 8018a40:	3318      	adds	r3, #24
 8018a42:	687a      	ldr	r2, [r7, #4]
 8018a44:	68b9      	ldr	r1, [r7, #8]
 8018a46:	4618      	mov	r0, r3
 8018a48:	f7fc fca4 	bl	8015394 <mg_sha256_update>
}
 8018a4c:	bf00      	nop
 8018a4e:	3718      	adds	r7, #24
 8018a50:	46bd      	mov	sp, r7
 8018a52:	bd80      	pop	{r7, pc}

08018a54 <finish_SHA256>:
static void finish_SHA256(const MG_UECC_HashContext *base,
                          uint8_t *hash_result) {
 8018a54:	b580      	push	{r7, lr}
 8018a56:	b084      	sub	sp, #16
 8018a58:	af00      	add	r7, sp, #0
 8018a5a:	6078      	str	r0, [r7, #4]
 8018a5c:	6039      	str	r1, [r7, #0]
  SHA256_HashContext *c = (SHA256_HashContext *) base;
 8018a5e:	687b      	ldr	r3, [r7, #4]
 8018a60:	60fb      	str	r3, [r7, #12]
  mg_sha256_final(hash_result, &c->ctx);
 8018a62:	68fb      	ldr	r3, [r7, #12]
 8018a64:	3318      	adds	r3, #24
 8018a66:	4619      	mov	r1, r3
 8018a68:	6838      	ldr	r0, [r7, #0]
 8018a6a:	f7fc fccc 	bl	8015406 <mg_sha256_final>
}
 8018a6e:	bf00      	nop
 8018a70:	3710      	adds	r7, #16
 8018a72:	46bd      	mov	sp, r7
 8018a74:	bd80      	pop	{r7, pc}
	...

08018a78 <mg_tls_send_cert_verify>:

static void mg_tls_send_cert_verify(struct mg_connection *c, int is_client) {
 8018a78:	b590      	push	{r4, r7, lr}
 8018a7a:	b0f9      	sub	sp, #484	@ 0x1e4
 8018a7c:	af02      	add	r7, sp, #8
 8018a7e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8018a82:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8018a86:	6018      	str	r0, [r3, #0]
 8018a88:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8018a8c:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8018a90:	6019      	str	r1, [r3, #0]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8018a92:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8018a96:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8018a9a:	681b      	ldr	r3, [r3, #0]
 8018a9c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8018aa0:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
  // server certificate verify packet
  uint8_t verify[82] = {0x0f, 0x00, 0x00, 0x00, 0x04, 0x03, 0x00, 0x00};
 8018aa4:	4a8a      	ldr	r2, [pc, #552]	@ (8018cd0 <mg_tls_send_cert_verify+0x258>)
 8018aa6:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8018aaa:	6810      	ldr	r0, [r2, #0]
 8018aac:	6851      	ldr	r1, [r2, #4]
 8018aae:	c303      	stmia	r3!, {r0, r1}
 8018ab0:	7a12      	ldrb	r2, [r2, #8]
 8018ab2:	701a      	strb	r2, [r3, #0]
 8018ab4:	f207 1379 	addw	r3, r7, #377	@ 0x179
 8018ab8:	2249      	movs	r2, #73	@ 0x49
 8018aba:	2100      	movs	r1, #0
 8018abc:	4618      	mov	r0, r3
 8018abe:	f00e fe03 	bl	80276c8 <memset>
  size_t sigsz, verifysz = 0;
 8018ac2:	2300      	movs	r3, #0
 8018ac4:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  uint8_t hash[32] = {0}, tmp[2 * 32 + 64] = {0};
 8018ac8:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8018acc:	2220      	movs	r2, #32
 8018ace:	2100      	movs	r1, #0
 8018ad0:	4618      	mov	r0, r3
 8018ad2:	f00e fdf9 	bl	80276c8 <memset>
 8018ad6:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8018ada:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8018ade:	4618      	mov	r0, r3
 8018ae0:	2380      	movs	r3, #128	@ 0x80
 8018ae2:	461a      	mov	r2, r3
 8018ae4:	2100      	movs	r1, #0
 8018ae6:	f00e fdef 	bl	80276c8 <memset>
  struct SHA256_HashContext ctx = {
 8018aea:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8018aee:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8018af2:	4618      	mov	r0, r3
 8018af4:	2388      	movs	r3, #136	@ 0x88
 8018af6:	461a      	mov	r2, r3
 8018af8:	2100      	movs	r1, #0
 8018afa:	f00e fde5 	bl	80276c8 <memset>
 8018afe:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8018b02:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8018b06:	4a73      	ldr	r2, [pc, #460]	@ (8018cd4 <mg_tls_send_cert_verify+0x25c>)
 8018b08:	601a      	str	r2, [r3, #0]
 8018b0a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8018b0e:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8018b12:	4a71      	ldr	r2, [pc, #452]	@ (8018cd8 <mg_tls_send_cert_verify+0x260>)
 8018b14:	605a      	str	r2, [r3, #4]
 8018b16:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8018b1a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8018b1e:	4a6f      	ldr	r2, [pc, #444]	@ (8018cdc <mg_tls_send_cert_verify+0x264>)
 8018b20:	609a      	str	r2, [r3, #8]
 8018b22:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8018b26:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8018b2a:	2240      	movs	r2, #64	@ 0x40
 8018b2c:	60da      	str	r2, [r3, #12]
 8018b2e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8018b32:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8018b36:	2220      	movs	r2, #32
 8018b38:	611a      	str	r2, [r3, #16]
 8018b3a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8018b3e:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8018b42:	f107 02d0 	add.w	r2, r7, #208	@ 0xd0
 8018b46:	615a      	str	r2, [r3, #20]
      {&init_SHA256, &update_SHA256, &finish_SHA256, 64, 32, tmp},
      {{0}, 0, 0, {0}}};
  int neg1, neg2;
  uint8_t sig[64] = {0};
 8018b48:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8018b4c:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8018b50:	4618      	mov	r0, r3
 8018b52:	2340      	movs	r3, #64	@ 0x40
 8018b54:	461a      	mov	r2, r3
 8018b56:	2100      	movs	r1, #0
 8018b58:	f00e fdb6 	bl	80276c8 <memset>

  mg_tls_calc_cert_verify_hash(c, (uint8_t *) hash, is_client);
 8018b5c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8018b60:	f5a3 72ec 	sub.w	r2, r3, #472	@ 0x1d8
 8018b64:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 8018b68:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8018b6c:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8018b70:	6812      	ldr	r2, [r2, #0]
 8018b72:	6818      	ldr	r0, [r3, #0]
 8018b74:	f7ff fb56 	bl	8018224 <mg_tls_calc_cert_verify_hash>

  mg_uecc_sign_deterministic(tls->ec_key, hash, sizeof(hash), &ctx.uECC, sig,
 8018b78:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8018b7c:	f503 7494 	add.w	r4, r3, #296	@ 0x128
 8018b80:	f006 fdca 	bl	801f718 <mg_uecc_secp256r1>
 8018b84:	4603      	mov	r3, r0
 8018b86:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8018b8a:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 8018b8e:	9301      	str	r3, [sp, #4]
 8018b90:	f107 0308 	add.w	r3, r7, #8
 8018b94:	9300      	str	r3, [sp, #0]
 8018b96:	4613      	mov	r3, r2
 8018b98:	2220      	movs	r2, #32
 8018b9a:	4620      	mov	r0, r4
 8018b9c:	f007 fe2c 	bl	80207f8 <mg_uecc_sign_deterministic>
                             mg_uecc_secp256r1());

  neg1 = !!(sig[0] & 0x80);
 8018ba0:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8018ba4:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8018ba8:	781b      	ldrb	r3, [r3, #0]
 8018baa:	b25b      	sxtb	r3, r3
 8018bac:	b2db      	uxtb	r3, r3
 8018bae:	09db      	lsrs	r3, r3, #7
 8018bb0:	b2db      	uxtb	r3, r3
 8018bb2:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  neg2 = !!(sig[32] & 0x80);
 8018bb6:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8018bba:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8018bbe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8018bc2:	b25b      	sxtb	r3, r3
 8018bc4:	b2db      	uxtb	r3, r3
 8018bc6:	09db      	lsrs	r3, r3, #7
 8018bc8:	b2db      	uxtb	r3, r3
 8018bca:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
  verify[8] = 0x30;  // ASN.1 SEQUENCE
 8018bce:	2330      	movs	r3, #48	@ 0x30
 8018bd0:	f887 3178 	strb.w	r3, [r7, #376]	@ 0x178
  verify[9] = (uint8_t) (68 + neg1 + neg2);
 8018bd4:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8018bd8:	b2da      	uxtb	r2, r3
 8018bda:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8018bde:	b2db      	uxtb	r3, r3
 8018be0:	4413      	add	r3, r2
 8018be2:	b2db      	uxtb	r3, r3
 8018be4:	3344      	adds	r3, #68	@ 0x44
 8018be6:	b2db      	uxtb	r3, r3
 8018be8:	f887 3179 	strb.w	r3, [r7, #377]	@ 0x179
  verify[10] = 0x02;  // ASN.1 INTEGER
 8018bec:	2302      	movs	r3, #2
 8018bee:	f887 317a 	strb.w	r3, [r7, #378]	@ 0x17a
  verify[11] = (uint8_t) (32 + neg1);
 8018bf2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8018bf6:	b2db      	uxtb	r3, r3
 8018bf8:	3320      	adds	r3, #32
 8018bfa:	b2db      	uxtb	r3, r3
 8018bfc:	f887 317b 	strb.w	r3, [r7, #379]	@ 0x17b
  memmove(verify + 12 + neg1, sig, 32);
 8018c00:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8018c04:	330c      	adds	r3, #12
 8018c06:	f507 72b8 	add.w	r2, r7, #368	@ 0x170
 8018c0a:	4413      	add	r3, r2
 8018c0c:	f107 0108 	add.w	r1, r7, #8
 8018c10:	2220      	movs	r2, #32
 8018c12:	4618      	mov	r0, r3
 8018c14:	f00e fd3e 	bl	8027694 <memmove>
  verify[12 + 32 + neg1] = 0x02;  // ASN.1 INTEGER
 8018c18:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8018c1c:	332c      	adds	r3, #44	@ 0x2c
 8018c1e:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8018c22:	443b      	add	r3, r7
 8018c24:	2202      	movs	r2, #2
 8018c26:	f803 2c68 	strb.w	r2, [r3, #-104]
  verify[13 + 32 + neg1] = (uint8_t) (32 + neg2);
 8018c2a:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8018c2e:	b2da      	uxtb	r2, r3
 8018c30:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8018c34:	332d      	adds	r3, #45	@ 0x2d
 8018c36:	3220      	adds	r2, #32
 8018c38:	b2d2      	uxtb	r2, r2
 8018c3a:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8018c3e:	443b      	add	r3, r7
 8018c40:	f803 2c68 	strb.w	r2, [r3, #-104]
  memmove(verify + 14 + 32 + neg1 + neg2, sig + 32, 32);
 8018c44:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 8018c48:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8018c4c:	4413      	add	r3, r2
 8018c4e:	332e      	adds	r3, #46	@ 0x2e
 8018c50:	f507 72b8 	add.w	r2, r7, #368	@ 0x170
 8018c54:	18d0      	adds	r0, r2, r3
 8018c56:	f107 0308 	add.w	r3, r7, #8
 8018c5a:	3320      	adds	r3, #32
 8018c5c:	2220      	movs	r2, #32
 8018c5e:	4619      	mov	r1, r3
 8018c60:	f00e fd18 	bl	8027694 <memmove>

  sigsz = (size_t) (70 + neg1 + neg2);
 8018c64:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8018c68:	f103 0246 	add.w	r2, r3, #70	@ 0x46
 8018c6c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8018c70:	4413      	add	r3, r2
 8018c72:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
  verifysz = 8U + sigsz;
 8018c76:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8018c7a:	3308      	adds	r3, #8
 8018c7c:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  verify[3] = (uint8_t) (sigsz + 4);
 8018c80:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8018c84:	b2db      	uxtb	r3, r3
 8018c86:	3304      	adds	r3, #4
 8018c88:	b2db      	uxtb	r3, r3
 8018c8a:	f887 3173 	strb.w	r3, [r7, #371]	@ 0x173
  verify[7] = (uint8_t) sigsz;
 8018c8e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8018c92:	b2db      	uxtb	r3, r3
 8018c94:	f887 3177 	strb.w	r3, [r7, #375]	@ 0x177

  mg_sha256_update(&tls->sha256, verify, verifysz);
 8018c98:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8018c9c:	3320      	adds	r3, #32
 8018c9e:	f507 71b8 	add.w	r1, r7, #368	@ 0x170
 8018ca2:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 8018ca6:	4618      	mov	r0, r3
 8018ca8:	f7fc fb74 	bl	8015394 <mg_sha256_update>
  mg_tls_encrypt(c, verify, verifysz, MG_TLS_HANDSHAKE);
 8018cac:	f507 71b8 	add.w	r1, r7, #368	@ 0x170
 8018cb0:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8018cb4:	f5a3 70ea 	sub.w	r0, r3, #468	@ 0x1d4
 8018cb8:	2316      	movs	r3, #22
 8018cba:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 8018cbe:	6800      	ldr	r0, [r0, #0]
 8018cc0:	f7ff f898 	bl	8017df4 <mg_tls_encrypt>
}
 8018cc4:	bf00      	nop
 8018cc6:	f507 77ee 	add.w	r7, r7, #476	@ 0x1dc
 8018cca:	46bd      	mov	sp, r7
 8018ccc:	bd90      	pop	{r4, r7, pc}
 8018cce:	bf00      	nop
 8018cd0:	0802b898 	.word	0x0802b898
 8018cd4:	08018a11 	.word	0x08018a11
 8018cd8:	08018a2f 	.word	0x08018a2f
 8018cdc:	08018a55 	.word	0x08018a55

08018ce0 <mg_tls_server_send_finish>:

static void mg_tls_server_send_finish(struct mg_connection *c) {
 8018ce0:	b580      	push	{r7, lr}
 8018ce2:	b0b4      	sub	sp, #208	@ 0xd0
 8018ce4:	af02      	add	r7, sp, #8
 8018ce6:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8018ce8:	687b      	ldr	r3, [r7, #4]
 8018cea:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8018cee:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  mg_sha256_ctx sha256;
  uint8_t hash[32];
  uint8_t finish[36] = {0x14, 0, 0, 32};
 8018cf2:	4b1e      	ldr	r3, [pc, #120]	@ (8018d6c <mg_tls_server_send_finish+0x8c>)
 8018cf4:	60fb      	str	r3, [r7, #12]
 8018cf6:	f107 0310 	add.w	r3, r7, #16
 8018cfa:	2220      	movs	r2, #32
 8018cfc:	2100      	movs	r1, #0
 8018cfe:	4618      	mov	r0, r3
 8018d00:	f00e fce2 	bl	80276c8 <memset>
  memmove(&sha256, &tls->sha256, sizeof(mg_sha256_ctx));
 8018d04:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8018d08:	f103 0120 	add.w	r1, r3, #32
 8018d0c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8018d10:	2270      	movs	r2, #112	@ 0x70
 8018d12:	4618      	mov	r0, r3
 8018d14:	f00e fcbe 	bl	8027694 <memmove>
  mg_sha256_final(hash, &sha256);
 8018d18:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8018d1c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8018d20:	4611      	mov	r1, r2
 8018d22:	4618      	mov	r0, r3
 8018d24:	f7fc fb6f 	bl	8015406 <mg_sha256_final>
  mg_hmac_sha256(finish + 4, tls->enc.server_finished_key, 32, hash, 32);
 8018d28:	f107 000c 	add.w	r0, r7, #12
 8018d2c:	3004      	adds	r0, #4
 8018d2e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8018d32:	f203 41d4 	addw	r1, r3, #1236	@ 0x4d4
 8018d36:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8018d3a:	2220      	movs	r2, #32
 8018d3c:	9200      	str	r2, [sp, #0]
 8018d3e:	2220      	movs	r2, #32
 8018d40:	f7fc fcb5 	bl	80156ae <mg_hmac_sha256>
  mg_tls_encrypt(c, finish, sizeof(finish), MG_TLS_HANDSHAKE);
 8018d44:	f107 010c 	add.w	r1, r7, #12
 8018d48:	2316      	movs	r3, #22
 8018d4a:	2224      	movs	r2, #36	@ 0x24
 8018d4c:	6878      	ldr	r0, [r7, #4]
 8018d4e:	f7ff f851 	bl	8017df4 <mg_tls_encrypt>
  mg_sha256_update(&tls->sha256, finish, sizeof(finish));
 8018d52:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8018d56:	3320      	adds	r3, #32
 8018d58:	f107 010c 	add.w	r1, r7, #12
 8018d5c:	2224      	movs	r2, #36	@ 0x24
 8018d5e:	4618      	mov	r0, r3
 8018d60:	f7fc fb18 	bl	8015394 <mg_sha256_update>
}
 8018d64:	bf00      	nop
 8018d66:	37c8      	adds	r7, #200	@ 0xc8
 8018d68:	46bd      	mov	sp, r7
 8018d6a:	bd80      	pop	{r7, pc}
 8018d6c:	20000014 	.word	0x20000014

08018d70 <mg_tls_server_recv_finish>:

static int mg_tls_server_recv_finish(struct mg_connection *c) {
 8018d70:	b580      	push	{r7, lr}
 8018d72:	b0a0      	sub	sp, #128	@ 0x80
 8018d74:	af00      	add	r7, sp, #0
 8018d76:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8018d78:	687b      	ldr	r3, [r7, #4]
 8018d7a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8018d7e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  unsigned char *recv_buf;
  // we have to backup sha256 value to restore it later, since Finished record
  // is exceptional and is not supposed to be added to the rolling hash
  // calculation.
  mg_sha256_ctx sha256 = tls->sha256;
 8018d80:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8018d82:	f107 0008 	add.w	r0, r7, #8
 8018d86:	3320      	adds	r3, #32
 8018d88:	2270      	movs	r2, #112	@ 0x70
 8018d8a:	4619      	mov	r1, r3
 8018d8c:	f00e fdd5 	bl	802793a <memcpy>
  if (mg_tls_recv_record(c) < 0) {
 8018d90:	6878      	ldr	r0, [r7, #4]
 8018d92:	f7ff f92b 	bl	8017fec <mg_tls_recv_record>
 8018d96:	4603      	mov	r3, r0
 8018d98:	2b00      	cmp	r3, #0
 8018d9a:	da02      	bge.n	8018da2 <mg_tls_server_recv_finish+0x32>
    return -1;
 8018d9c:	f04f 33ff 	mov.w	r3, #4294967295
 8018da0:	e01f      	b.n	8018de2 <mg_tls_server_recv_finish+0x72>
  }
  recv_buf = &c->rtls.buf[tls->recv_offset];
 8018da2:	687b      	ldr	r3, [r7, #4]
 8018da4:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8018da6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8018da8:	695b      	ldr	r3, [r3, #20]
 8018daa:	4413      	add	r3, r2
 8018dac:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (recv_buf[0] != MG_TLS_FINISHED) {
 8018dae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8018db0:	781b      	ldrb	r3, [r3, #0]
 8018db2:	2b14      	cmp	r3, #20
 8018db4:	d009      	beq.n	8018dca <mg_tls_server_recv_finish+0x5a>
    mg_error(c, "expected Finish but got msg 0x%02x", recv_buf[0]);
 8018db6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8018db8:	781b      	ldrb	r3, [r3, #0]
 8018dba:	461a      	mov	r2, r3
 8018dbc:	490b      	ldr	r1, [pc, #44]	@ (8018dec <mg_tls_server_recv_finish+0x7c>)
 8018dbe:	6878      	ldr	r0, [r7, #4]
 8018dc0:	f7ef fef8 	bl	8008bb4 <mg_error>
    return -1;
 8018dc4:	f04f 33ff 	mov.w	r3, #4294967295
 8018dc8:	e00b      	b.n	8018de2 <mg_tls_server_recv_finish+0x72>
  }
  mg_tls_drop_message(c);
 8018dca:	6878      	ldr	r0, [r7, #4]
 8018dcc:	f7fe fcc2 	bl	8017754 <mg_tls_drop_message>

  // restore hash
  tls->sha256 = sha256;
 8018dd0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8018dd2:	3320      	adds	r3, #32
 8018dd4:	f107 0108 	add.w	r1, r7, #8
 8018dd8:	2270      	movs	r2, #112	@ 0x70
 8018dda:	4618      	mov	r0, r3
 8018ddc:	f00e fdad 	bl	802793a <memcpy>
  return 0;
 8018de0:	2300      	movs	r3, #0
}
 8018de2:	4618      	mov	r0, r3
 8018de4:	3780      	adds	r7, #128	@ 0x80
 8018de6:	46bd      	mov	sp, r7
 8018de8:	bd80      	pop	{r7, pc}
 8018dea:	bf00      	nop
 8018dec:	0802b8a4 	.word	0x0802b8a4

08018df0 <mg_tls_client_send_hello>:

static void mg_tls_client_send_hello(struct mg_connection *c) {
 8018df0:	b5b0      	push	{r4, r5, r7, lr}
 8018df2:	b0c6      	sub	sp, #280	@ 0x118
 8018df4:	af00      	add	r7, sp, #0
 8018df6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8018dfa:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8018dfe:	6018      	str	r0, [r3, #0]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8018e00:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8018e04:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8018e08:	681b      	ldr	r3, [r3, #0]
 8018e0a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8018e0e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  struct mg_iobuf *wio = &tls->send;
 8018e12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8018e16:	3304      	adds	r3, #4
 8018e18:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110

  uint8_t x25519_pub[X25519_BYTES];

  // signature algorithms we actually support:
  // rsa_pkcs1_sha256, rsa_pss_rsae_sha256 and ecdsa_secp256r1_sha256
  uint8_t secp256r1_sig_algs[12] = {
 8018e1c:	4a27      	ldr	r2, [pc, #156]	@ (8018ebc <mg_tls_client_send_hello+0xcc>)
 8018e1e:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8018e22:	ca07      	ldmia	r2, {r0, r1, r2}
 8018e24:	e883 0007 	stmia.w	r3, {r0, r1, r2}
      0x00, 0x0d, 0x00, 0x08, 0x00, 0x06, 0x04, 0x03, 0x08, 0x04, 0x04, 0x01,
  };
  // all popular signature algorithms (if we don't care about verification)
  uint8_t all_sig_algs[34] = {
 8018e28:	4b25      	ldr	r3, [pc, #148]	@ (8018ec0 <mg_tls_client_send_hello+0xd0>)
 8018e2a:	f107 04ac 	add.w	r4, r7, #172	@ 0xac
 8018e2e:	461d      	mov	r5, r3
 8018e30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018e32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018e34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018e36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018e38:	682b      	ldr	r3, [r5, #0]
 8018e3a:	8023      	strh	r3, [r4, #0]
      0x00, 0x0d, 0x00, 0x1e, 0x00, 0x1c, 0x04, 0x03, 0x05, 0x03, 0x06, 0x03,
      0x08, 0x07, 0x08, 0x08, 0x08, 0x09, 0x08, 0x0a, 0x08, 0x0b, 0x08, 0x04,
      0x08, 0x05, 0x08, 0x06, 0x04, 0x01, 0x05, 0x01, 0x06, 0x01};
  uint8_t server_name_ext[9] = {0x00, 0x00, 0x00, 0xfe, 0x00,
 8018e3c:	4a21      	ldr	r2, [pc, #132]	@ (8018ec4 <mg_tls_client_send_hello+0xd4>)
 8018e3e:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8018e42:	ca07      	ldmia	r2, {r0, r1, r2}
 8018e44:	c303      	stmia	r3!, {r0, r1}
 8018e46:	701a      	strb	r2, [r3, #0]
                                0xfe, 0x00, 0x00, 0xfe};

  // clang-format off
  uint8_t msg_client_hello[145] = {
 8018e48:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8018e4c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8018e50:	4a1d      	ldr	r2, [pc, #116]	@ (8018ec8 <mg_tls_client_send_hello+0xd8>)
 8018e52:	4618      	mov	r0, r3
 8018e54:	4611      	mov	r1, r2
 8018e56:	2391      	movs	r3, #145	@ 0x91
 8018e58:	461a      	mov	r2, r3
 8018e5a:	f00e fd6e 	bl	802793a <memcpy>
      0x00, 0x2b, 0x00, 0x03, 0x02, 0x03, 0x04,
      // session ticket (none)
      0x00, 0x23, 0x00, 0x00, // 144 bytes till here
	};
  // clang-format on
  const char *hostname = tls->hostname;
 8018e5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8018e62:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8018e66:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  size_t hostnamesz = strlen(tls->hostname);
 8018e6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8018e6e:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8018e72:	4618      	mov	r0, r3
 8018e74:	f7e7 faac 	bl	80003d0 <strlen>
 8018e78:	f8c7 0108 	str.w	r0, [r7, #264]	@ 0x108
  size_t hostname_extsz = hostnamesz ? hostnamesz + 9 : 0;
 8018e7c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8018e80:	2b00      	cmp	r3, #0
 8018e82:	d003      	beq.n	8018e8c <mg_tls_client_send_hello+0x9c>
 8018e84:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8018e88:	3309      	adds	r3, #9
 8018e8a:	e000      	b.n	8018e8e <mg_tls_client_send_hello+0x9e>
 8018e8c:	2300      	movs	r3, #0
 8018e8e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
  uint8_t *sig_alg = tls->skip_verification ? all_sig_algs : secp256r1_sig_algs;
 8018e92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8018e96:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8018e9a:	2b00      	cmp	r3, #0
 8018e9c:	d002      	beq.n	8018ea4 <mg_tls_client_send_hello+0xb4>
 8018e9e:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8018ea2:	e001      	b.n	8018ea8 <mg_tls_client_send_hello+0xb8>
 8018ea4:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8018ea8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
  size_t sig_alg_sz = tls->skip_verification ? sizeof(all_sig_algs)
 8018eac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8018eb0:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
                                             : sizeof(secp256r1_sig_algs);
 8018eb4:	2b00      	cmp	r3, #0
 8018eb6:	d009      	beq.n	8018ecc <mg_tls_client_send_hello+0xdc>
 8018eb8:	2322      	movs	r3, #34	@ 0x22
 8018eba:	e008      	b.n	8018ece <mg_tls_client_send_hello+0xde>
 8018ebc:	0802b8c8 	.word	0x0802b8c8
 8018ec0:	0802b8d4 	.word	0x0802b8d4
 8018ec4:	0802b8f8 	.word	0x0802b8f8
 8018ec8:	0802b904 	.word	0x0802b904
 8018ecc:	230c      	movs	r3, #12
  size_t sig_alg_sz = tls->skip_verification ? sizeof(all_sig_algs)
 8018ece:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc

  // patch ClientHello with correct hostname ext length (if any)
  MG_STORE_BE16(msg_client_hello + 3,
 8018ed2:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 8018ed6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8018eda:	4413      	add	r3, r2
 8018edc:	338c      	adds	r3, #140	@ 0x8c
 8018ede:	0a1b      	lsrs	r3, r3, #8
 8018ee0:	b2da      	uxtb	r2, r3
 8018ee2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8018ee6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8018eea:	70da      	strb	r2, [r3, #3]
 8018eec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8018ef0:	b2da      	uxtb	r2, r3
 8018ef2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8018ef6:	b2db      	uxtb	r3, r3
 8018ef8:	4413      	add	r3, r2
 8018efa:	b2db      	uxtb	r3, r3
 8018efc:	3b74      	subs	r3, #116	@ 0x74
 8018efe:	b2da      	uxtb	r2, r3
 8018f00:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8018f04:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8018f08:	711a      	strb	r2, [r3, #4]
                hostname_extsz + 183 - 9 - 34 + sig_alg_sz);
  MG_STORE_BE16(msg_client_hello + 7,
 8018f0a:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 8018f0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8018f12:	4413      	add	r3, r2
 8018f14:	3388      	adds	r3, #136	@ 0x88
 8018f16:	0a1b      	lsrs	r3, r3, #8
 8018f18:	b2da      	uxtb	r2, r3
 8018f1a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8018f1e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8018f22:	71da      	strb	r2, [r3, #7]
 8018f24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8018f28:	b2da      	uxtb	r2, r3
 8018f2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8018f2e:	b2db      	uxtb	r3, r3
 8018f30:	4413      	add	r3, r2
 8018f32:	b2db      	uxtb	r3, r3
 8018f34:	3b78      	subs	r3, #120	@ 0x78
 8018f36:	b2da      	uxtb	r2, r3
 8018f38:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8018f3c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8018f40:	721a      	strb	r2, [r3, #8]
                hostname_extsz + 179 - 9 - 34 + sig_alg_sz);
  MG_STORE_BE16(msg_client_hello + 82,
 8018f42:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 8018f46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8018f4a:	4413      	add	r3, r2
 8018f4c:	333d      	adds	r3, #61	@ 0x3d
 8018f4e:	0a1b      	lsrs	r3, r3, #8
 8018f50:	b2da      	uxtb	r2, r3
 8018f52:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8018f56:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8018f5a:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
 8018f5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8018f62:	b2da      	uxtb	r2, r3
 8018f64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8018f68:	b2db      	uxtb	r3, r3
 8018f6a:	4413      	add	r3, r2
 8018f6c:	b2db      	uxtb	r3, r3
 8018f6e:	333d      	adds	r3, #61	@ 0x3d
 8018f70:	b2da      	uxtb	r2, r3
 8018f72:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8018f76:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8018f7a:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
                hostname_extsz + 104 - 9 - 34 + sig_alg_sz);

  if (hostnamesz > 0) {
 8018f7e:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8018f82:	2b00      	cmp	r3, #0
 8018f84:	d026      	beq.n	8018fd4 <mg_tls_client_send_hello+0x1e4>
    MG_STORE_BE16(server_name_ext + 2, hostnamesz + 5);
 8018f86:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8018f8a:	3305      	adds	r3, #5
 8018f8c:	0a1b      	lsrs	r3, r3, #8
 8018f8e:	b2db      	uxtb	r3, r3
 8018f90:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
 8018f94:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8018f98:	b2db      	uxtb	r3, r3
 8018f9a:	3305      	adds	r3, #5
 8018f9c:	b2db      	uxtb	r3, r3
 8018f9e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
    MG_STORE_BE16(server_name_ext + 4, hostnamesz + 3);
 8018fa2:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8018fa6:	3303      	adds	r3, #3
 8018fa8:	0a1b      	lsrs	r3, r3, #8
 8018faa:	b2db      	uxtb	r3, r3
 8018fac:	f887 30a4 	strb.w	r3, [r7, #164]	@ 0xa4
 8018fb0:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8018fb4:	b2db      	uxtb	r3, r3
 8018fb6:	3303      	adds	r3, #3
 8018fb8:	b2db      	uxtb	r3, r3
 8018fba:	f887 30a5 	strb.w	r3, [r7, #165]	@ 0xa5
    MG_STORE_BE16(server_name_ext + 7, hostnamesz);
 8018fbe:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8018fc2:	0a1b      	lsrs	r3, r3, #8
 8018fc4:	b2db      	uxtb	r3, r3
 8018fc6:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
 8018fca:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8018fce:	b2db      	uxtb	r3, r3
 8018fd0:	f887 30a8 	strb.w	r3, [r7, #168]	@ 0xa8
  }

  // calculate keyshare
  if (!mg_random(tls->x25519_cli, sizeof(tls->x25519_cli))) mg_error(c, "RNG");
 8018fd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8018fd8:	33d0      	adds	r3, #208	@ 0xd0
 8018fda:	2120      	movs	r1, #32
 8018fdc:	4618      	mov	r0, r3
 8018fde:	f7e7 fd89 	bl	8000af4 <mg_random>
 8018fe2:	4603      	mov	r3, r0
 8018fe4:	f083 0301 	eor.w	r3, r3, #1
 8018fe8:	b2db      	uxtb	r3, r3
 8018fea:	2b00      	cmp	r3, #0
 8018fec:	d007      	beq.n	8018ffe <mg_tls_client_send_hello+0x20e>
 8018fee:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8018ff2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8018ff6:	496c      	ldr	r1, [pc, #432]	@ (80191a8 <mg_tls_client_send_hello+0x3b8>)
 8018ff8:	6818      	ldr	r0, [r3, #0]
 8018ffa:	f7ef fddb 	bl	8008bb4 <mg_error>
  mg_tls_x25519(x25519_pub, tls->x25519_cli, X25519_BASE_POINT, 1);
 8018ffe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8019002:	f103 01d0 	add.w	r1, r3, #208	@ 0xd0
 8019006:	f107 00dc 	add.w	r0, r7, #220	@ 0xdc
 801900a:	2301      	movs	r3, #1
 801900c:	4a67      	ldr	r2, [pc, #412]	@ (80191ac <mg_tls_client_send_hello+0x3bc>)
 801900e:	f008 fbd7 	bl	80217c0 <mg_tls_x25519>

  // fill in the gaps: random + session ID + keyshare
  if (!mg_random(tls->session_id, sizeof(tls->session_id))) mg_error(c, "RNG");
 8019012:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8019016:	33b0      	adds	r3, #176	@ 0xb0
 8019018:	2120      	movs	r1, #32
 801901a:	4618      	mov	r0, r3
 801901c:	f7e7 fd6a 	bl	8000af4 <mg_random>
 8019020:	4603      	mov	r3, r0
 8019022:	f083 0301 	eor.w	r3, r3, #1
 8019026:	b2db      	uxtb	r3, r3
 8019028:	2b00      	cmp	r3, #0
 801902a:	d007      	beq.n	801903c <mg_tls_client_send_hello+0x24c>
 801902c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8019030:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8019034:	495c      	ldr	r1, [pc, #368]	@ (80191a8 <mg_tls_client_send_hello+0x3b8>)
 8019036:	6818      	ldr	r0, [r3, #0]
 8019038:	f7ef fdbc 	bl	8008bb4 <mg_error>
  if (!mg_random(tls->random, sizeof(tls->random))) mg_error(c, "RNG");
 801903c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8019040:	3390      	adds	r3, #144	@ 0x90
 8019042:	2120      	movs	r1, #32
 8019044:	4618      	mov	r0, r3
 8019046:	f7e7 fd55 	bl	8000af4 <mg_random>
 801904a:	4603      	mov	r3, r0
 801904c:	f083 0301 	eor.w	r3, r3, #1
 8019050:	b2db      	uxtb	r3, r3
 8019052:	2b00      	cmp	r3, #0
 8019054:	d007      	beq.n	8019066 <mg_tls_client_send_hello+0x276>
 8019056:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 801905a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801905e:	4952      	ldr	r1, [pc, #328]	@ (80191a8 <mg_tls_client_send_hello+0x3b8>)
 8019060:	6818      	ldr	r0, [r3, #0]
 8019062:	f7ef fda7 	bl	8008bb4 <mg_error>
  memmove(msg_client_hello + 11, tls->random, sizeof(tls->random));
 8019066:	f107 030c 	add.w	r3, r7, #12
 801906a:	330b      	adds	r3, #11
 801906c:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8019070:	3290      	adds	r2, #144	@ 0x90
 8019072:	6815      	ldr	r5, [r2, #0]
 8019074:	6854      	ldr	r4, [r2, #4]
 8019076:	6890      	ldr	r0, [r2, #8]
 8019078:	68d1      	ldr	r1, [r2, #12]
 801907a:	601d      	str	r5, [r3, #0]
 801907c:	605c      	str	r4, [r3, #4]
 801907e:	6098      	str	r0, [r3, #8]
 8019080:	60d9      	str	r1, [r3, #12]
 8019082:	6915      	ldr	r5, [r2, #16]
 8019084:	6954      	ldr	r4, [r2, #20]
 8019086:	6990      	ldr	r0, [r2, #24]
 8019088:	69d1      	ldr	r1, [r2, #28]
 801908a:	611d      	str	r5, [r3, #16]
 801908c:	615c      	str	r4, [r3, #20]
 801908e:	6198      	str	r0, [r3, #24]
 8019090:	61d9      	str	r1, [r3, #28]
  memmove(msg_client_hello + 44, tls->session_id, sizeof(tls->session_id));
 8019092:	f107 030c 	add.w	r3, r7, #12
 8019096:	332c      	adds	r3, #44	@ 0x2c
 8019098:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 801909c:	32b0      	adds	r2, #176	@ 0xb0
 801909e:	6815      	ldr	r5, [r2, #0]
 80190a0:	6854      	ldr	r4, [r2, #4]
 80190a2:	6890      	ldr	r0, [r2, #8]
 80190a4:	68d1      	ldr	r1, [r2, #12]
 80190a6:	601d      	str	r5, [r3, #0]
 80190a8:	605c      	str	r4, [r3, #4]
 80190aa:	6098      	str	r0, [r3, #8]
 80190ac:	60d9      	str	r1, [r3, #12]
 80190ae:	6915      	ldr	r5, [r2, #16]
 80190b0:	6954      	ldr	r4, [r2, #20]
 80190b2:	6990      	ldr	r0, [r2, #24]
 80190b4:	69d1      	ldr	r1, [r2, #28]
 80190b6:	611d      	str	r5, [r3, #16]
 80190b8:	615c      	str	r4, [r3, #20]
 80190ba:	6198      	str	r0, [r3, #24]
 80190bc:	61d9      	str	r1, [r3, #28]
  memmove(msg_client_hello + 94, x25519_pub, sizeof(x25519_pub));
 80190be:	f107 030c 	add.w	r3, r7, #12
 80190c2:	335e      	adds	r3, #94	@ 0x5e
 80190c4:	461d      	mov	r5, r3
 80190c6:	f107 04dc 	add.w	r4, r7, #220	@ 0xdc
 80190ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80190cc:	6028      	str	r0, [r5, #0]
 80190ce:	6069      	str	r1, [r5, #4]
 80190d0:	60aa      	str	r2, [r5, #8]
 80190d2:	60eb      	str	r3, [r5, #12]
 80190d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80190d6:	6128      	str	r0, [r5, #16]
 80190d8:	6169      	str	r1, [r5, #20]
 80190da:	61aa      	str	r2, [r5, #24]
 80190dc:	61eb      	str	r3, [r5, #28]

  // client hello message
  mg_iobuf_add(wio, wio->len, msg_client_hello, sizeof(msg_client_hello));
 80190de:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80190e2:	6899      	ldr	r1, [r3, #8]
 80190e4:	f107 020c 	add.w	r2, r7, #12
 80190e8:	2391      	movs	r3, #145	@ 0x91
 80190ea:	f8d7 0110 	ldr.w	r0, [r7, #272]	@ 0x110
 80190ee:	f7f4 fb6f 	bl	800d7d0 <mg_iobuf_add>
  mg_sha256_update(&tls->sha256, msg_client_hello + 5,
 80190f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80190f6:	f103 0020 	add.w	r0, r3, #32
 80190fa:	f107 030c 	add.w	r3, r7, #12
 80190fe:	3305      	adds	r3, #5
 8019100:	228c      	movs	r2, #140	@ 0x8c
 8019102:	4619      	mov	r1, r3
 8019104:	f7fc f946 	bl	8015394 <mg_sha256_update>
                   sizeof(msg_client_hello) - 5);
  mg_iobuf_add(wio, wio->len, sig_alg, sig_alg_sz);
 8019108:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 801910c:	6899      	ldr	r1, [r3, #8]
 801910e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8019112:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 8019116:	f8d7 0110 	ldr.w	r0, [r7, #272]	@ 0x110
 801911a:	f7f4 fb59 	bl	800d7d0 <mg_iobuf_add>
  mg_sha256_update(&tls->sha256, sig_alg, sig_alg_sz);
 801911e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8019122:	3320      	adds	r3, #32
 8019124:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 8019128:	f8d7 1100 	ldr.w	r1, [r7, #256]	@ 0x100
 801912c:	4618      	mov	r0, r3
 801912e:	f7fc f931 	bl	8015394 <mg_sha256_update>
  if (hostnamesz > 0) {
 8019132:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8019136:	2b00      	cmp	r3, #0
 8019138:	d027      	beq.n	801918a <mg_tls_client_send_hello+0x39a>
    mg_iobuf_add(wio, wio->len, server_name_ext, sizeof(server_name_ext));
 801913a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 801913e:	6899      	ldr	r1, [r3, #8]
 8019140:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 8019144:	2309      	movs	r3, #9
 8019146:	f8d7 0110 	ldr.w	r0, [r7, #272]	@ 0x110
 801914a:	f7f4 fb41 	bl	800d7d0 <mg_iobuf_add>
    mg_iobuf_add(wio, wio->len, hostname, hostnamesz);
 801914e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8019152:	6899      	ldr	r1, [r3, #8]
 8019154:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8019158:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 801915c:	f8d7 0110 	ldr.w	r0, [r7, #272]	@ 0x110
 8019160:	f7f4 fb36 	bl	800d7d0 <mg_iobuf_add>
    mg_sha256_update(&tls->sha256, server_name_ext, sizeof(server_name_ext));
 8019164:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8019168:	3320      	adds	r3, #32
 801916a:	f107 01a0 	add.w	r1, r7, #160	@ 0xa0
 801916e:	2209      	movs	r2, #9
 8019170:	4618      	mov	r0, r3
 8019172:	f7fc f90f 	bl	8015394 <mg_sha256_update>
    mg_sha256_update(&tls->sha256, (uint8_t *) hostname, hostnamesz);
 8019176:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801917a:	3320      	adds	r3, #32
 801917c:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8019180:	f8d7 110c 	ldr.w	r1, [r7, #268]	@ 0x10c
 8019184:	4618      	mov	r0, r3
 8019186:	f7fc f905 	bl	8015394 <mg_sha256_update>
  }

  // change cipher message
  mg_iobuf_add(wio, wio->len, (const char *) "\x14\x03\x03\x00\x01\x01", 6);
 801918a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 801918e:	6899      	ldr	r1, [r3, #8]
 8019190:	2306      	movs	r3, #6
 8019192:	4a07      	ldr	r2, [pc, #28]	@ (80191b0 <mg_tls_client_send_hello+0x3c0>)
 8019194:	f8d7 0110 	ldr.w	r0, [r7, #272]	@ 0x110
 8019198:	f7f4 fb1a 	bl	800d7d0 <mg_iobuf_add>
}
 801919c:	bf00      	nop
 801919e:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80191a2:	46bd      	mov	sp, r7
 80191a4:	bdb0      	pop	{r4, r5, r7, pc}
 80191a6:	bf00      	nop
 80191a8:	0802b7e8 	.word	0x0802b7e8
 80191ac:	0802d7b4 	.word	0x0802d7b4
 80191b0:	0802b804 	.word	0x0802b804

080191b4 <mg_tls_client_recv_hello>:

static int mg_tls_client_recv_hello(struct mg_connection *c) {
 80191b4:	b580      	push	{r7, lr}
 80191b6:	b08a      	sub	sp, #40	@ 0x28
 80191b8:	af00      	add	r7, sp, #0
 80191ba:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 80191bc:	687b      	ldr	r3, [r7, #4]
 80191be:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80191c2:	623b      	str	r3, [r7, #32]
  struct mg_iobuf *rio = &c->rtls;
 80191c4:	687b      	ldr	r3, [r7, #4]
 80191c6:	3368      	adds	r3, #104	@ 0x68
 80191c8:	61fb      	str	r3, [r7, #28]
  uint16_t msgsz;
  uint8_t *ext;
  uint16_t ext_len;
  int j;

  if (!mg_tls_got_record(c)) {
 80191ca:	6878      	ldr	r0, [r7, #4]
 80191cc:	f7fe fa77 	bl	80176be <mg_tls_got_record>
 80191d0:	4603      	mov	r3, r0
 80191d2:	f083 0301 	eor.w	r3, r3, #1
 80191d6:	b2db      	uxtb	r3, r3
 80191d8:	2b00      	cmp	r3, #0
 80191da:	d002      	beq.n	80191e2 <mg_tls_client_recv_hello+0x2e>
    return MG_IO_WAIT;
 80191dc:	f06f 0301 	mvn.w	r3, #1
 80191e0:	e109      	b.n	80193f6 <mg_tls_client_recv_hello+0x242>
  }
  if (rio->buf[0] != MG_TLS_HANDSHAKE || rio->buf[5] != MG_TLS_SERVER_HELLO) {
 80191e2:	69fb      	ldr	r3, [r7, #28]
 80191e4:	681b      	ldr	r3, [r3, #0]
 80191e6:	781b      	ldrb	r3, [r3, #0]
 80191e8:	2b16      	cmp	r3, #22
 80191ea:	d105      	bne.n	80191f8 <mg_tls_client_recv_hello+0x44>
 80191ec:	69fb      	ldr	r3, [r7, #28]
 80191ee:	681b      	ldr	r3, [r3, #0]
 80191f0:	3305      	adds	r3, #5
 80191f2:	781b      	ldrb	r3, [r3, #0]
 80191f4:	2b02      	cmp	r3, #2
 80191f6:	d032      	beq.n	801925e <mg_tls_client_recv_hello+0xaa>
    if (rio->buf[0] == MG_TLS_ALERT && rio->len >= 7) {
 80191f8:	69fb      	ldr	r3, [r7, #28]
 80191fa:	681b      	ldr	r3, [r3, #0]
 80191fc:	781b      	ldrb	r3, [r3, #0]
 80191fe:	2b15      	cmp	r3, #21
 8019200:	d10f      	bne.n	8019222 <mg_tls_client_recv_hello+0x6e>
 8019202:	69fb      	ldr	r3, [r7, #28]
 8019204:	689b      	ldr	r3, [r3, #8]
 8019206:	2b06      	cmp	r3, #6
 8019208:	d90b      	bls.n	8019222 <mg_tls_client_recv_hello+0x6e>
      mg_error(c, "tls alert %d", rio->buf[6]);
 801920a:	69fb      	ldr	r3, [r7, #28]
 801920c:	681b      	ldr	r3, [r3, #0]
 801920e:	3306      	adds	r3, #6
 8019210:	781b      	ldrb	r3, [r3, #0]
 8019212:	461a      	mov	r2, r3
 8019214:	497a      	ldr	r1, [pc, #488]	@ (8019400 <mg_tls_client_recv_hello+0x24c>)
 8019216:	6878      	ldr	r0, [r7, #4]
 8019218:	f7ef fccc 	bl	8008bb4 <mg_error>
      return -1;
 801921c:	f04f 33ff 	mov.w	r3, #4294967295
 8019220:	e0e9      	b.n	80193f6 <mg_tls_client_recv_hello+0x242>
    }
    MG_INFO(("got packet type 0x%02x/0x%02x", rio->buf[0], rio->buf[5]));
 8019222:	4b78      	ldr	r3, [pc, #480]	@ (8019404 <mg_tls_client_recv_hello+0x250>)
 8019224:	681b      	ldr	r3, [r3, #0]
 8019226:	2b01      	cmp	r3, #1
 8019228:	dd12      	ble.n	8019250 <mg_tls_client_recv_hello+0x9c>
 801922a:	4b77      	ldr	r3, [pc, #476]	@ (8019408 <mg_tls_client_recv_hello+0x254>)
 801922c:	f642 52f1 	movw	r2, #11761	@ 0x2df1
 8019230:	4976      	ldr	r1, [pc, #472]	@ (801940c <mg_tls_client_recv_hello+0x258>)
 8019232:	2002      	movs	r0, #2
 8019234:	f7f5 fb36 	bl	800e8a4 <mg_log_prefix>
 8019238:	69fb      	ldr	r3, [r7, #28]
 801923a:	681b      	ldr	r3, [r3, #0]
 801923c:	781b      	ldrb	r3, [r3, #0]
 801923e:	4619      	mov	r1, r3
 8019240:	69fb      	ldr	r3, [r7, #28]
 8019242:	681b      	ldr	r3, [r3, #0]
 8019244:	3305      	adds	r3, #5
 8019246:	781b      	ldrb	r3, [r3, #0]
 8019248:	461a      	mov	r2, r3
 801924a:	4871      	ldr	r0, [pc, #452]	@ (8019410 <mg_tls_client_recv_hello+0x25c>)
 801924c:	f7f5 fb7a 	bl	800e944 <mg_log>
    mg_error(c, "not a server hello packet");
 8019250:	4970      	ldr	r1, [pc, #448]	@ (8019414 <mg_tls_client_recv_hello+0x260>)
 8019252:	6878      	ldr	r0, [r7, #4]
 8019254:	f7ef fcae 	bl	8008bb4 <mg_error>
    return -1;
 8019258:	f04f 33ff 	mov.w	r3, #4294967295
 801925c:	e0cb      	b.n	80193f6 <mg_tls_client_recv_hello+0x242>
  }

  msgsz = MG_LOAD_BE16(rio->buf + 3);
 801925e:	69fb      	ldr	r3, [r7, #28]
 8019260:	681b      	ldr	r3, [r3, #0]
 8019262:	3303      	adds	r3, #3
 8019264:	781b      	ldrb	r3, [r3, #0]
 8019266:	b21b      	sxth	r3, r3
 8019268:	021b      	lsls	r3, r3, #8
 801926a:	b21a      	sxth	r2, r3
 801926c:	69fb      	ldr	r3, [r7, #28]
 801926e:	681b      	ldr	r3, [r3, #0]
 8019270:	3304      	adds	r3, #4
 8019272:	781b      	ldrb	r3, [r3, #0]
 8019274:	b21b      	sxth	r3, r3
 8019276:	4313      	orrs	r3, r2
 8019278:	b21b      	sxth	r3, r3
 801927a:	837b      	strh	r3, [r7, #26]
  mg_sha256_update(&tls->sha256, rio->buf + 5, msgsz);
 801927c:	6a3b      	ldr	r3, [r7, #32]
 801927e:	f103 0020 	add.w	r0, r3, #32
 8019282:	69fb      	ldr	r3, [r7, #28]
 8019284:	681b      	ldr	r3, [r3, #0]
 8019286:	3305      	adds	r3, #5
 8019288:	8b7a      	ldrh	r2, [r7, #26]
 801928a:	4619      	mov	r1, r3
 801928c:	f7fc f882 	bl	8015394 <mg_sha256_update>

  ext_len = MG_LOAD_BE16(rio->buf + 5 + 39 + 32 + 3);
 8019290:	69fb      	ldr	r3, [r7, #28]
 8019292:	681b      	ldr	r3, [r3, #0]
 8019294:	334f      	adds	r3, #79	@ 0x4f
 8019296:	781b      	ldrb	r3, [r3, #0]
 8019298:	b21b      	sxth	r3, r3
 801929a:	021b      	lsls	r3, r3, #8
 801929c:	b21a      	sxth	r2, r3
 801929e:	69fb      	ldr	r3, [r7, #28]
 80192a0:	681b      	ldr	r3, [r3, #0]
 80192a2:	3350      	adds	r3, #80	@ 0x50
 80192a4:	781b      	ldrb	r3, [r3, #0]
 80192a6:	b21b      	sxth	r3, r3
 80192a8:	4313      	orrs	r3, r2
 80192aa:	b21b      	sxth	r3, r3
 80192ac:	833b      	strh	r3, [r7, #24]
  ext = rio->buf + 5 + 39 + 32 + 3 + 2;
 80192ae:	69fb      	ldr	r3, [r7, #28]
 80192b0:	681b      	ldr	r3, [r3, #0]
 80192b2:	3351      	adds	r3, #81	@ 0x51
 80192b4:	617b      	str	r3, [r7, #20]
  if (ext_len > (rio->len - (5 + 39 + 32 + 3 + 2))) goto fail;
 80192b6:	8b3a      	ldrh	r2, [r7, #24]
 80192b8:	69fb      	ldr	r3, [r7, #28]
 80192ba:	689b      	ldr	r3, [r3, #8]
 80192bc:	3b51      	subs	r3, #81	@ 0x51
 80192be:	429a      	cmp	r2, r3
 80192c0:	f200 8090 	bhi.w	80193e4 <mg_tls_client_recv_hello+0x230>

  for (j = 0; j < ext_len;) {
 80192c4:	2300      	movs	r3, #0
 80192c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80192c8:	e086      	b.n	80193d8 <mg_tls_client_recv_hello+0x224>
    uint16_t ext_type = MG_LOAD_BE16(ext + j);
 80192ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80192cc:	697a      	ldr	r2, [r7, #20]
 80192ce:	4413      	add	r3, r2
 80192d0:	781b      	ldrb	r3, [r3, #0]
 80192d2:	b21b      	sxth	r3, r3
 80192d4:	021b      	lsls	r3, r3, #8
 80192d6:	b21a      	sxth	r2, r3
 80192d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80192da:	3301      	adds	r3, #1
 80192dc:	6979      	ldr	r1, [r7, #20]
 80192de:	440b      	add	r3, r1
 80192e0:	781b      	ldrb	r3, [r3, #0]
 80192e2:	b21b      	sxth	r3, r3
 80192e4:	4313      	orrs	r3, r2
 80192e6:	b21b      	sxth	r3, r3
 80192e8:	827b      	strh	r3, [r7, #18]
    uint16_t ext_len2 = MG_LOAD_BE16(ext + j + 2);
 80192ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80192ec:	3302      	adds	r3, #2
 80192ee:	697a      	ldr	r2, [r7, #20]
 80192f0:	4413      	add	r3, r2
 80192f2:	781b      	ldrb	r3, [r3, #0]
 80192f4:	b21b      	sxth	r3, r3
 80192f6:	021b      	lsls	r3, r3, #8
 80192f8:	b21a      	sxth	r2, r3
 80192fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80192fc:	3303      	adds	r3, #3
 80192fe:	6979      	ldr	r1, [r7, #20]
 8019300:	440b      	add	r3, r1
 8019302:	781b      	ldrb	r3, [r3, #0]
 8019304:	b21b      	sxth	r3, r3
 8019306:	4313      	orrs	r3, r2
 8019308:	b21b      	sxth	r3, r3
 801930a:	823b      	strh	r3, [r7, #16]
    uint16_t group;
    uint8_t *key_exchange;
    uint16_t key_exchange_len;
    if (ext_len2 > (ext_len - j - 4)) goto fail;
 801930c:	8b3a      	ldrh	r2, [r7, #24]
 801930e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019310:	1ad3      	subs	r3, r2, r3
 8019312:	1eda      	subs	r2, r3, #3
 8019314:	8a3b      	ldrh	r3, [r7, #16]
 8019316:	429a      	cmp	r2, r3
 8019318:	dd66      	ble.n	80193e8 <mg_tls_client_recv_hello+0x234>
    if (ext_type != 0x0033) {  // not a key share extension, ignore
 801931a:	8a7b      	ldrh	r3, [r7, #18]
 801931c:	2b33      	cmp	r3, #51	@ 0x33
 801931e:	d007      	beq.n	8019330 <mg_tls_client_recv_hello+0x17c>
      j += (uint16_t) (ext_len2 + 4);
 8019320:	8a3b      	ldrh	r3, [r7, #16]
 8019322:	3304      	adds	r3, #4
 8019324:	b29b      	uxth	r3, r3
 8019326:	461a      	mov	r2, r3
 8019328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801932a:	4413      	add	r3, r2
 801932c:	627b      	str	r3, [r7, #36]	@ 0x24
      continue;
 801932e:	e053      	b.n	80193d8 <mg_tls_client_recv_hello+0x224>
    }
    group = MG_LOAD_BE16(ext + j + 4);
 8019330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019332:	3304      	adds	r3, #4
 8019334:	697a      	ldr	r2, [r7, #20]
 8019336:	4413      	add	r3, r2
 8019338:	781b      	ldrb	r3, [r3, #0]
 801933a:	b21b      	sxth	r3, r3
 801933c:	021b      	lsls	r3, r3, #8
 801933e:	b21a      	sxth	r2, r3
 8019340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019342:	3305      	adds	r3, #5
 8019344:	6979      	ldr	r1, [r7, #20]
 8019346:	440b      	add	r3, r1
 8019348:	781b      	ldrb	r3, [r3, #0]
 801934a:	b21b      	sxth	r3, r3
 801934c:	4313      	orrs	r3, r2
 801934e:	b21b      	sxth	r3, r3
 8019350:	81fb      	strh	r3, [r7, #14]
    if (group != 0x001d) {
 8019352:	89fb      	ldrh	r3, [r7, #14]
 8019354:	2b1d      	cmp	r3, #29
 8019356:	d006      	beq.n	8019366 <mg_tls_client_recv_hello+0x1b2>
      mg_error(c, "bad key exchange group");
 8019358:	492f      	ldr	r1, [pc, #188]	@ (8019418 <mg_tls_client_recv_hello+0x264>)
 801935a:	6878      	ldr	r0, [r7, #4]
 801935c:	f7ef fc2a 	bl	8008bb4 <mg_error>
      return -1;
 8019360:	f04f 33ff 	mov.w	r3, #4294967295
 8019364:	e047      	b.n	80193f6 <mg_tls_client_recv_hello+0x242>
    }
    key_exchange_len = MG_LOAD_BE16(ext + j + 6);
 8019366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019368:	3306      	adds	r3, #6
 801936a:	697a      	ldr	r2, [r7, #20]
 801936c:	4413      	add	r3, r2
 801936e:	781b      	ldrb	r3, [r3, #0]
 8019370:	b21b      	sxth	r3, r3
 8019372:	021b      	lsls	r3, r3, #8
 8019374:	b21a      	sxth	r2, r3
 8019376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019378:	3307      	adds	r3, #7
 801937a:	6979      	ldr	r1, [r7, #20]
 801937c:	440b      	add	r3, r1
 801937e:	781b      	ldrb	r3, [r3, #0]
 8019380:	b21b      	sxth	r3, r3
 8019382:	4313      	orrs	r3, r2
 8019384:	b21b      	sxth	r3, r3
 8019386:	81bb      	strh	r3, [r7, #12]
    key_exchange = ext + j + 8;
 8019388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801938a:	3308      	adds	r3, #8
 801938c:	697a      	ldr	r2, [r7, #20]
 801938e:	4413      	add	r3, r2
 8019390:	60bb      	str	r3, [r7, #8]
    if (key_exchange_len != 32) {
 8019392:	89bb      	ldrh	r3, [r7, #12]
 8019394:	2b20      	cmp	r3, #32
 8019396:	d006      	beq.n	80193a6 <mg_tls_client_recv_hello+0x1f2>
      mg_error(c, "bad key exchange length");
 8019398:	4920      	ldr	r1, [pc, #128]	@ (801941c <mg_tls_client_recv_hello+0x268>)
 801939a:	6878      	ldr	r0, [r7, #4]
 801939c:	f7ef fc0a 	bl	8008bb4 <mg_error>
      return -1;
 80193a0:	f04f 33ff 	mov.w	r3, #4294967295
 80193a4:	e027      	b.n	80193f6 <mg_tls_client_recv_hello+0x242>
    }
    mg_tls_x25519(tls->x25519_sec, tls->x25519_cli, key_exchange, 1);
 80193a6:	6a3b      	ldr	r3, [r7, #32]
 80193a8:	f103 00f0 	add.w	r0, r3, #240	@ 0xf0
 80193ac:	6a3b      	ldr	r3, [r7, #32]
 80193ae:	f103 01d0 	add.w	r1, r3, #208	@ 0xd0
 80193b2:	2301      	movs	r3, #1
 80193b4:	68ba      	ldr	r2, [r7, #8]
 80193b6:	f008 fa03 	bl	80217c0 <mg_tls_x25519>
    mg_tls_hexdump("c x25519 sec", tls->x25519_sec, 32);
 80193ba:	6a3b      	ldr	r3, [r7, #32]
 80193bc:	33f0      	adds	r3, #240	@ 0xf0
 80193be:	2220      	movs	r2, #32
 80193c0:	4619      	mov	r1, r3
 80193c2:	4817      	ldr	r0, [pc, #92]	@ (8019420 <mg_tls_client_recv_hello+0x26c>)
 80193c4:	f7fe f824 	bl	8017410 <mg_tls_hexdump>
    mg_tls_drop_record(c);
 80193c8:	6878      	ldr	r0, [r7, #4]
 80193ca:	f7fe f9a0 	bl	801770e <mg_tls_drop_record>
    /* generate handshake keys */
    mg_tls_generate_handshake_keys(c);
 80193ce:	6878      	ldr	r0, [r7, #4]
 80193d0:	f7fe faa8 	bl	8017924 <mg_tls_generate_handshake_keys>
    return 0;
 80193d4:	2300      	movs	r3, #0
 80193d6:	e00e      	b.n	80193f6 <mg_tls_client_recv_hello+0x242>
  for (j = 0; j < ext_len;) {
 80193d8:	8b3b      	ldrh	r3, [r7, #24]
 80193da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80193dc:	429a      	cmp	r2, r3
 80193de:	f6ff af74 	blt.w	80192ca <mg_tls_client_recv_hello+0x116>
  }
fail:
 80193e2:	e002      	b.n	80193ea <mg_tls_client_recv_hello+0x236>
  if (ext_len > (rio->len - (5 + 39 + 32 + 3 + 2))) goto fail;
 80193e4:	bf00      	nop
 80193e6:	e000      	b.n	80193ea <mg_tls_client_recv_hello+0x236>
    if (ext_len2 > (ext_len - j - 4)) goto fail;
 80193e8:	bf00      	nop
  mg_error(c, "bad server hello");
 80193ea:	490e      	ldr	r1, [pc, #56]	@ (8019424 <mg_tls_client_recv_hello+0x270>)
 80193ec:	6878      	ldr	r0, [r7, #4]
 80193ee:	f7ef fbe1 	bl	8008bb4 <mg_error>
  return -1;
 80193f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80193f6:	4618      	mov	r0, r3
 80193f8:	3728      	adds	r7, #40	@ 0x28
 80193fa:	46bd      	mov	sp, r7
 80193fc:	bd80      	pop	{r7, pc}
 80193fe:	bf00      	nop
 8019400:	0802b998 	.word	0x0802b998
 8019404:	24000258 	.word	0x24000258
 8019408:	0802da74 	.word	0x0802da74
 801940c:	08029c3c 	.word	0x08029c3c
 8019410:	0802b9a8 	.word	0x0802b9a8
 8019414:	0802b9c8 	.word	0x0802b9c8
 8019418:	0802b9e4 	.word	0x0802b9e4
 801941c:	0802b9fc 	.word	0x0802b9fc
 8019420:	0802ba14 	.word	0x0802ba14
 8019424:	0802ba24 	.word	0x0802ba24

08019428 <mg_tls_client_recv_ext>:

static int mg_tls_client_recv_ext(struct mg_connection *c) {
 8019428:	b580      	push	{r7, lr}
 801942a:	b084      	sub	sp, #16
 801942c:	af00      	add	r7, sp, #0
 801942e:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8019430:	687b      	ldr	r3, [r7, #4]
 8019432:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8019436:	60fb      	str	r3, [r7, #12]
  unsigned char *recv_buf;
  if (mg_tls_recv_record(c) < 0) {
 8019438:	6878      	ldr	r0, [r7, #4]
 801943a:	f7fe fdd7 	bl	8017fec <mg_tls_recv_record>
 801943e:	4603      	mov	r3, r0
 8019440:	2b00      	cmp	r3, #0
 8019442:	da02      	bge.n	801944a <mg_tls_client_recv_ext+0x22>
    return -1;
 8019444:	f04f 33ff 	mov.w	r3, #4294967295
 8019448:	e017      	b.n	801947a <mg_tls_client_recv_ext+0x52>
  }
  recv_buf = &c->rtls.buf[tls->recv_offset];
 801944a:	687b      	ldr	r3, [r7, #4]
 801944c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 801944e:	68fb      	ldr	r3, [r7, #12]
 8019450:	695b      	ldr	r3, [r3, #20]
 8019452:	4413      	add	r3, r2
 8019454:	60bb      	str	r3, [r7, #8]
  if (recv_buf[0] != MG_TLS_ENCRYPTED_EXTENSIONS) {
 8019456:	68bb      	ldr	r3, [r7, #8]
 8019458:	781b      	ldrb	r3, [r3, #0]
 801945a:	2b08      	cmp	r3, #8
 801945c:	d009      	beq.n	8019472 <mg_tls_client_recv_ext+0x4a>
    mg_error(c, "expected server extensions but got msg 0x%02x", recv_buf[0]);
 801945e:	68bb      	ldr	r3, [r7, #8]
 8019460:	781b      	ldrb	r3, [r3, #0]
 8019462:	461a      	mov	r2, r3
 8019464:	4907      	ldr	r1, [pc, #28]	@ (8019484 <mg_tls_client_recv_ext+0x5c>)
 8019466:	6878      	ldr	r0, [r7, #4]
 8019468:	f7ef fba4 	bl	8008bb4 <mg_error>
    return -1;
 801946c:	f04f 33ff 	mov.w	r3, #4294967295
 8019470:	e003      	b.n	801947a <mg_tls_client_recv_ext+0x52>
  }
  mg_tls_drop_message(c);
 8019472:	6878      	ldr	r0, [r7, #4]
 8019474:	f7fe f96e 	bl	8017754 <mg_tls_drop_message>
  return 0;
 8019478:	2300      	movs	r3, #0
}
 801947a:	4618      	mov	r0, r3
 801947c:	3710      	adds	r7, #16
 801947e:	46bd      	mov	sp, r7
 8019480:	bd80      	pop	{r7, pc}
 8019482:	bf00      	nop
 8019484:	0802ba38 	.word	0x0802ba38

08019488 <mg_der_debug_cert_name>:
  struct mg_str sig;    // signature
  uint8_t tbshash[48];  // 32b for sha256/secp256, 48b for sha384/secp384
  size_t tbshashsz;     // actual TBS hash size
};

static void mg_der_debug_cert_name(const char *name, struct mg_der_tlv *tlv) {
 8019488:	b5f0      	push	{r4, r5, r6, r7, lr}
 801948a:	b099      	sub	sp, #100	@ 0x64
 801948c:	af06      	add	r7, sp, #24
 801948e:	6178      	str	r0, [r7, #20]
 8019490:	6139      	str	r1, [r7, #16]
  struct mg_der_tlv v;
  struct mg_str cn, c, o, ou;
  cn = c = o = ou = mg_str("");
 8019492:	f107 031c 	add.w	r3, r7, #28
 8019496:	4946      	ldr	r1, [pc, #280]	@ (80195b0 <mg_der_debug_cert_name+0x128>)
 8019498:	4618      	mov	r0, r3
 801949a:	f7fd fa03 	bl	80168a4 <mg_str_s>
 801949e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80194a2:	f107 021c 	add.w	r2, r7, #28
 80194a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80194aa:	e883 0003 	stmia.w	r3, {r0, r1}
 80194ae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80194b2:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80194b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80194ba:	e883 0003 	stmia.w	r3, {r0, r1}
 80194be:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80194c2:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80194c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80194ca:	e883 0003 	stmia.w	r3, {r0, r1}
  if (mg_der_find_oid(tlv, (uint8_t *) "\x55\x04\x03", 3, &v))
 80194ce:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80194d2:	2203      	movs	r2, #3
 80194d4:	4937      	ldr	r1, [pc, #220]	@ (80195b4 <mg_der_debug_cert_name+0x12c>)
 80194d6:	6938      	ldr	r0, [r7, #16]
 80194d8:	f7fe f84d 	bl	8017576 <mg_der_find_oid>
 80194dc:	4603      	mov	r3, r0
 80194de:	2b00      	cmp	r3, #0
 80194e0:	d006      	beq.n	80194f0 <mg_der_debug_cert_name+0x68>
    cn = mg_str_n((const char *) v.value, v.len);
 80194e2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80194e4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80194e6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80194ea:	4618      	mov	r0, r3
 80194ec:	f7fd f9f7 	bl	80168de <mg_str_n>
  if (mg_der_find_oid(tlv, (uint8_t *) "\x55\x04\x06", 3, &v))
 80194f0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80194f4:	2203      	movs	r2, #3
 80194f6:	4930      	ldr	r1, [pc, #192]	@ (80195b8 <mg_der_debug_cert_name+0x130>)
 80194f8:	6938      	ldr	r0, [r7, #16]
 80194fa:	f7fe f83c 	bl	8017576 <mg_der_find_oid>
 80194fe:	4603      	mov	r3, r0
 8019500:	2b00      	cmp	r3, #0
 8019502:	d006      	beq.n	8019512 <mg_der_debug_cert_name+0x8a>
    c = mg_str_n((const char *) v.value, v.len);
 8019504:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8019506:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8019508:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801950c:	4618      	mov	r0, r3
 801950e:	f7fd f9e6 	bl	80168de <mg_str_n>
  if (mg_der_find_oid(tlv, (uint8_t *) "\x55\x04\x0a", 3, &v))
 8019512:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8019516:	2203      	movs	r2, #3
 8019518:	4928      	ldr	r1, [pc, #160]	@ (80195bc <mg_der_debug_cert_name+0x134>)
 801951a:	6938      	ldr	r0, [r7, #16]
 801951c:	f7fe f82b 	bl	8017576 <mg_der_find_oid>
 8019520:	4603      	mov	r3, r0
 8019522:	2b00      	cmp	r3, #0
 8019524:	d006      	beq.n	8019534 <mg_der_debug_cert_name+0xac>
    o = mg_str_n((const char *) v.value, v.len);
 8019526:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8019528:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801952a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801952e:	4618      	mov	r0, r3
 8019530:	f7fd f9d5 	bl	80168de <mg_str_n>
  if (mg_der_find_oid(tlv, (uint8_t *) "\x55\x04\x0b", 3, &v))
 8019534:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8019538:	2203      	movs	r2, #3
 801953a:	4921      	ldr	r1, [pc, #132]	@ (80195c0 <mg_der_debug_cert_name+0x138>)
 801953c:	6938      	ldr	r0, [r7, #16]
 801953e:	f7fe f81a 	bl	8017576 <mg_der_find_oid>
 8019542:	4603      	mov	r3, r0
 8019544:	2b00      	cmp	r3, #0
 8019546:	d00e      	beq.n	8019566 <mg_der_debug_cert_name+0xde>
    ou = mg_str_n((const char *) v.value, v.len);
 8019548:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801954a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801954c:	f107 0308 	add.w	r3, r7, #8
 8019550:	4618      	mov	r0, r3
 8019552:	f7fd f9c4 	bl	80168de <mg_str_n>
 8019556:	f107 031c 	add.w	r3, r7, #28
 801955a:	f107 0208 	add.w	r2, r7, #8
 801955e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019562:	e883 0003 	stmia.w	r3, {r0, r1}
  MG_VERBOSE(("%s: CN=%.*s, C=%.*s, O=%.*s, OU=%.*s", name, cn.len, cn.buf,
 8019566:	4b17      	ldr	r3, [pc, #92]	@ (80195c4 <mg_der_debug_cert_name+0x13c>)
 8019568:	681b      	ldr	r3, [r3, #0]
 801956a:	2b03      	cmp	r3, #3
 801956c:	dd1b      	ble.n	80195a6 <mg_der_debug_cert_name+0x11e>
 801956e:	4b16      	ldr	r3, [pc, #88]	@ (80195c8 <mg_der_debug_cert_name+0x140>)
 8019570:	f642 6243 	movw	r2, #11843	@ 0x2e43
 8019574:	4915      	ldr	r1, [pc, #84]	@ (80195cc <mg_der_debug_cert_name+0x144>)
 8019576:	2004      	movs	r0, #4
 8019578:	f7f5 f994 	bl	800e8a4 <mg_log_prefix>
 801957c:	6bbe      	ldr	r6, [r7, #56]	@ 0x38
 801957e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019580:	607b      	str	r3, [r7, #4]
 8019582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019584:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8019586:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8019588:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801958a:	6a3c      	ldr	r4, [r7, #32]
 801958c:	69fd      	ldr	r5, [r7, #28]
 801958e:	9505      	str	r5, [sp, #20]
 8019590:	9404      	str	r4, [sp, #16]
 8019592:	9003      	str	r0, [sp, #12]
 8019594:	9102      	str	r1, [sp, #8]
 8019596:	9201      	str	r2, [sp, #4]
 8019598:	9300      	str	r3, [sp, #0]
 801959a:	687b      	ldr	r3, [r7, #4]
 801959c:	4632      	mov	r2, r6
 801959e:	6979      	ldr	r1, [r7, #20]
 80195a0:	480b      	ldr	r0, [pc, #44]	@ (80195d0 <mg_der_debug_cert_name+0x148>)
 80195a2:	f7f5 f9cf 	bl	800e944 <mg_log>
              c.len, c.buf, o.len, o.buf, ou.len, ou.buf));
}
 80195a6:	bf00      	nop
 80195a8:	374c      	adds	r7, #76	@ 0x4c
 80195aa:	46bd      	mov	sp, r7
 80195ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80195ae:	bf00      	nop
 80195b0:	0802a47c 	.word	0x0802a47c
 80195b4:	0802ba68 	.word	0x0802ba68
 80195b8:	0802ba6c 	.word	0x0802ba6c
 80195bc:	0802ba70 	.word	0x0802ba70
 80195c0:	0802ba74 	.word	0x0802ba74
 80195c4:	24000258 	.word	0x24000258
 80195c8:	0802da90 	.word	0x0802da90
 80195cc:	08029c3c 	.word	0x08029c3c
 80195d0:	0802ba78 	.word	0x0802ba78

080195d4 <mg_tls_parse_cert_der>:

static int mg_tls_parse_cert_der(void *buf, size_t dersz,
                                 struct mg_tls_cert *cert) {
 80195d4:	b590      	push	{r4, r7, lr}
 80195d6:	b0af      	sub	sp, #188	@ 0xbc
 80195d8:	af04      	add	r7, sp, #16
 80195da:	6178      	str	r0, [r7, #20]
 80195dc:	6139      	str	r1, [r7, #16]
 80195de:	60fa      	str	r2, [r7, #12]
  uint8_t *tbs, *der = (uint8_t *) buf;
 80195e0:	697b      	ldr	r3, [r7, #20]
 80195e2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  size_t tbssz;
  struct mg_der_tlv root, tbs_cert, field, algo;  // pubkey, signature;
  struct mg_der_tlv pki, pki_algo, pki_key, pki_curve, raw_sig;

  // Parse outermost SEQUENCE
  if (mg_der_parse(der, dersz, &root) <= 0 || root.type != 0x30) return -1;
 80195e6:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80195ea:	461a      	mov	r2, r3
 80195ec:	6939      	ldr	r1, [r7, #16]
 80195ee:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 80195f2:	f7fd ff35 	bl	8017460 <mg_der_parse>
 80195f6:	4603      	mov	r3, r0
 80195f8:	2b00      	cmp	r3, #0
 80195fa:	dd03      	ble.n	8019604 <mg_tls_parse_cert_der+0x30>
 80195fc:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 8019600:	2b30      	cmp	r3, #48	@ 0x30
 8019602:	d002      	beq.n	801960a <mg_tls_parse_cert_der+0x36>
 8019604:	f04f 33ff 	mov.w	r3, #4294967295
 8019608:	e38a      	b.n	8019d20 <mg_tls_parse_cert_der+0x74c>

  // Parse TBSCertificate SEQUENCE
  tbs = root.value;
 801960a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801960e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (mg_der_next(&root, &tbs_cert) <= 0 || tbs_cert.type != 0x30) return -1;
 8019612:	f107 0284 	add.w	r2, r7, #132	@ 0x84
 8019616:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 801961a:	4611      	mov	r1, r2
 801961c:	4618      	mov	r0, r3
 801961e:	f7fd ff7f 	bl	8017520 <mg_der_next>
 8019622:	4603      	mov	r3, r0
 8019624:	2b00      	cmp	r3, #0
 8019626:	dd03      	ble.n	8019630 <mg_tls_parse_cert_der+0x5c>
 8019628:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 801962c:	2b30      	cmp	r3, #48	@ 0x30
 801962e:	d002      	beq.n	8019636 <mg_tls_parse_cert_der+0x62>
 8019630:	f04f 33ff 	mov.w	r3, #4294967295
 8019634:	e374      	b.n	8019d20 <mg_tls_parse_cert_der+0x74c>
  tbssz = (size_t) (tbs_cert.value + tbs_cert.len - tbs);
 8019636:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 801963a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801963e:	441a      	add	r2, r3
 8019640:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8019644:	1ad3      	subs	r3, r2, r3
 8019646:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

  // Parse Version (optional field)
  if (mg_der_next(&tbs_cert, &field) <= 0) return -1;
 801964a:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 801964e:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8019652:	4611      	mov	r1, r2
 8019654:	4618      	mov	r0, r3
 8019656:	f7fd ff63 	bl	8017520 <mg_der_next>
 801965a:	4603      	mov	r3, r0
 801965c:	2b00      	cmp	r3, #0
 801965e:	dc02      	bgt.n	8019666 <mg_tls_parse_cert_der+0x92>
 8019660:	f04f 33ff 	mov.w	r3, #4294967295
 8019664:	e35c      	b.n	8019d20 <mg_tls_parse_cert_der+0x74c>
  if (field.type == 0xa0) {  // v3
 8019666:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 801966a:	2ba0      	cmp	r3, #160	@ 0xa0
 801966c:	d123      	bne.n	80196b6 <mg_tls_parse_cert_der+0xe2>
    if (mg_der_parse(field.value, field.len, &field) <= 0 || field.len != 1 ||
 801966e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8019672:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8019674:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 8019678:	4618      	mov	r0, r3
 801967a:	f7fd fef1 	bl	8017460 <mg_der_parse>
 801967e:	4603      	mov	r3, r0
 8019680:	2b00      	cmp	r3, #0
 8019682:	dd07      	ble.n	8019694 <mg_tls_parse_cert_der+0xc0>
 8019684:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8019686:	2b01      	cmp	r3, #1
 8019688:	d104      	bne.n	8019694 <mg_tls_parse_cert_der+0xc0>
        field.value[0] != 2)
 801968a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801968e:	781b      	ldrb	r3, [r3, #0]
    if (mg_der_parse(field.value, field.len, &field) <= 0 || field.len != 1 ||
 8019690:	2b02      	cmp	r3, #2
 8019692:	d002      	beq.n	801969a <mg_tls_parse_cert_der+0xc6>
      return -1;
 8019694:	f04f 33ff 	mov.w	r3, #4294967295
 8019698:	e342      	b.n	8019d20 <mg_tls_parse_cert_der+0x74c>
    if (mg_der_next(&tbs_cert, &field) <= 0) return -1;
 801969a:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 801969e:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80196a2:	4611      	mov	r1, r2
 80196a4:	4618      	mov	r0, r3
 80196a6:	f7fd ff3b 	bl	8017520 <mg_der_next>
 80196aa:	4603      	mov	r3, r0
 80196ac:	2b00      	cmp	r3, #0
 80196ae:	dc02      	bgt.n	80196b6 <mg_tls_parse_cert_der+0xe2>
 80196b0:	f04f 33ff 	mov.w	r3, #4294967295
 80196b4:	e334      	b.n	8019d20 <mg_tls_parse_cert_der+0x74c>
  }

  // Parse Serial Number
  if (field.type != 2) return -1;
 80196b6:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 80196ba:	2b02      	cmp	r3, #2
 80196bc:	d002      	beq.n	80196c4 <mg_tls_parse_cert_der+0xf0>
 80196be:	f04f 33ff 	mov.w	r3, #4294967295
 80196c2:	e32d      	b.n	8019d20 <mg_tls_parse_cert_der+0x74c>
  cert->sn = mg_str_n((char *) field.value, field.len);
 80196c4:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 80196c8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80196ca:	68fc      	ldr	r4, [r7, #12]
 80196cc:	463b      	mov	r3, r7
 80196ce:	4618      	mov	r0, r3
 80196d0:	f7fd f905 	bl	80168de <mg_str_n>
 80196d4:	1d23      	adds	r3, r4, #4
 80196d6:	463a      	mov	r2, r7
 80196d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80196dc:	e883 0003 	stmia.w	r3, {r0, r1}
  MG_VERBOSE(("cert s/n: %M", mg_print_hex, cert->sn.len, cert->sn.buf));
 80196e0:	4bae      	ldr	r3, [pc, #696]	@ (801999c <mg_tls_parse_cert_der+0x3c8>)
 80196e2:	681b      	ldr	r3, [r3, #0]
 80196e4:	2b03      	cmp	r3, #3
 80196e6:	dd0e      	ble.n	8019706 <mg_tls_parse_cert_der+0x132>
 80196e8:	4bad      	ldr	r3, [pc, #692]	@ (80199a0 <mg_tls_parse_cert_der+0x3cc>)
 80196ea:	f642 6262 	movw	r2, #11874	@ 0x2e62
 80196ee:	49ad      	ldr	r1, [pc, #692]	@ (80199a4 <mg_tls_parse_cert_der+0x3d0>)
 80196f0:	2004      	movs	r0, #4
 80196f2:	f7f5 f8d7 	bl	800e8a4 <mg_log_prefix>
 80196f6:	68fb      	ldr	r3, [r7, #12]
 80196f8:	689a      	ldr	r2, [r3, #8]
 80196fa:	68fb      	ldr	r3, [r7, #12]
 80196fc:	685b      	ldr	r3, [r3, #4]
 80196fe:	49aa      	ldr	r1, [pc, #680]	@ (80199a8 <mg_tls_parse_cert_der+0x3d4>)
 8019700:	48aa      	ldr	r0, [pc, #680]	@ (80199ac <mg_tls_parse_cert_der+0x3d8>)
 8019702:	f7f5 f91f 	bl	800e944 <mg_log>

  // Parse signature algorithm (first occurrence)
  if (mg_der_next(&tbs_cert, &field) <= 0 || field.type != 0x30) return -1;
 8019706:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 801970a:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 801970e:	4611      	mov	r1, r2
 8019710:	4618      	mov	r0, r3
 8019712:	f7fd ff05 	bl	8017520 <mg_der_next>
 8019716:	4603      	mov	r3, r0
 8019718:	2b00      	cmp	r3, #0
 801971a:	dd03      	ble.n	8019724 <mg_tls_parse_cert_der+0x150>
 801971c:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 8019720:	2b30      	cmp	r3, #48	@ 0x30
 8019722:	d002      	beq.n	801972a <mg_tls_parse_cert_der+0x156>
 8019724:	f04f 33ff 	mov.w	r3, #4294967295
 8019728:	e2fa      	b.n	8019d20 <mg_tls_parse_cert_der+0x74c>
  if (mg_der_next(&field, &algo) <= 0 || algo.type != 0x06) return -1;
 801972a:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 801972e:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8019732:	4611      	mov	r1, r2
 8019734:	4618      	mov	r0, r3
 8019736:	f7fd fef3 	bl	8017520 <mg_der_next>
 801973a:	4603      	mov	r3, r0
 801973c:	2b00      	cmp	r3, #0
 801973e:	dd03      	ble.n	8019748 <mg_tls_parse_cert_der+0x174>
 8019740:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 8019744:	2b06      	cmp	r3, #6
 8019746:	d002      	beq.n	801974e <mg_tls_parse_cert_der+0x17a>
 8019748:	f04f 33ff 	mov.w	r3, #4294967295
 801974c:	e2e8      	b.n	8019d20 <mg_tls_parse_cert_der+0x74c>

  MG_VERBOSE(("sig algo (oid): %M", mg_print_hex, algo.len, algo.value));
 801974e:	4b93      	ldr	r3, [pc, #588]	@ (801999c <mg_tls_parse_cert_der+0x3c8>)
 8019750:	681b      	ldr	r3, [r3, #0]
 8019752:	2b03      	cmp	r3, #3
 8019754:	dd0c      	ble.n	8019770 <mg_tls_parse_cert_der+0x19c>
 8019756:	4b92      	ldr	r3, [pc, #584]	@ (80199a0 <mg_tls_parse_cert_der+0x3cc>)
 8019758:	f642 6268 	movw	r2, #11880	@ 0x2e68
 801975c:	4991      	ldr	r1, [pc, #580]	@ (80199a4 <mg_tls_parse_cert_der+0x3d0>)
 801975e:	2004      	movs	r0, #4
 8019760:	f7f5 f8a0 	bl	800e8a4 <mg_log_prefix>
 8019764:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8019766:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8019768:	498f      	ldr	r1, [pc, #572]	@ (80199a8 <mg_tls_parse_cert_der+0x3d4>)
 801976a:	4891      	ldr	r0, [pc, #580]	@ (80199b0 <mg_tls_parse_cert_der+0x3dc>)
 801976c:	f7f5 f8ea 	bl	800e944 <mg_log>
  // Signature algorithm OID mapping
  if (memcmp(algo.value, "\x2A\x86\x48\xCE\x3D\x04\x03\x02", algo.len) == 0) {
 8019770:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8019772:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8019774:	498f      	ldr	r1, [pc, #572]	@ (80199b4 <mg_tls_parse_cert_der+0x3e0>)
 8019776:	4618      	mov	r0, r3
 8019778:	f00d ff7c 	bl	8027674 <memcmp>
 801977c:	4603      	mov	r3, r0
 801977e:	2b00      	cmp	r3, #0
 8019780:	d11a      	bne.n	80197b8 <mg_tls_parse_cert_der+0x1e4>
    MG_VERBOSE(("sig algo: ECDSA with SHA256"));
 8019782:	4b86      	ldr	r3, [pc, #536]	@ (801999c <mg_tls_parse_cert_der+0x3c8>)
 8019784:	681b      	ldr	r3, [r3, #0]
 8019786:	2b03      	cmp	r3, #3
 8019788:	dd09      	ble.n	801979e <mg_tls_parse_cert_der+0x1ca>
 801978a:	4b85      	ldr	r3, [pc, #532]	@ (80199a0 <mg_tls_parse_cert_der+0x3cc>)
 801978c:	f642 626b 	movw	r2, #11883	@ 0x2e6b
 8019790:	4984      	ldr	r1, [pc, #528]	@ (80199a4 <mg_tls_parse_cert_der+0x3d0>)
 8019792:	2004      	movs	r0, #4
 8019794:	f7f5 f886 	bl	800e8a4 <mg_log_prefix>
 8019798:	4887      	ldr	r0, [pc, #540]	@ (80199b8 <mg_tls_parse_cert_der+0x3e4>)
 801979a:	f7f5 f8d3 	bl	800e944 <mg_log>
    mg_sha256(cert->tbshash, tbs, tbssz);
 801979e:	68fb      	ldr	r3, [r7, #12]
 80197a0:	331c      	adds	r3, #28
 80197a2:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 80197a6:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 80197aa:	4618      	mov	r0, r3
 80197ac:	f7fb ff63 	bl	8015676 <mg_sha256>
    cert->tbshashsz = 32;
 80197b0:	68fb      	ldr	r3, [r7, #12]
 80197b2:	2220      	movs	r2, #32
 80197b4:	64da      	str	r2, [r3, #76]	@ 0x4c
 80197b6:	e07f      	b.n	80198b8 <mg_tls_parse_cert_der+0x2e4>
  } else if (memcmp(algo.value, "\x2A\x86\x48\x86\xF7\x0D\x01\x01\x0B",
 80197b8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
                    algo.len) == 0) {
 80197ba:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
  } else if (memcmp(algo.value, "\x2A\x86\x48\x86\xF7\x0D\x01\x01\x0B",
 80197bc:	497f      	ldr	r1, [pc, #508]	@ (80199bc <mg_tls_parse_cert_der+0x3e8>)
 80197be:	4618      	mov	r0, r3
 80197c0:	f00d ff58 	bl	8027674 <memcmp>
 80197c4:	4603      	mov	r3, r0
 80197c6:	2b00      	cmp	r3, #0
 80197c8:	d11a      	bne.n	8019800 <mg_tls_parse_cert_der+0x22c>
    MG_VERBOSE(("sig algo: RSA with SHA256"));
 80197ca:	4b74      	ldr	r3, [pc, #464]	@ (801999c <mg_tls_parse_cert_der+0x3c8>)
 80197cc:	681b      	ldr	r3, [r3, #0]
 80197ce:	2b03      	cmp	r3, #3
 80197d0:	dd09      	ble.n	80197e6 <mg_tls_parse_cert_der+0x212>
 80197d2:	4b73      	ldr	r3, [pc, #460]	@ (80199a0 <mg_tls_parse_cert_der+0x3cc>)
 80197d4:	f642 6270 	movw	r2, #11888	@ 0x2e70
 80197d8:	4972      	ldr	r1, [pc, #456]	@ (80199a4 <mg_tls_parse_cert_der+0x3d0>)
 80197da:	2004      	movs	r0, #4
 80197dc:	f7f5 f862 	bl	800e8a4 <mg_log_prefix>
 80197e0:	4877      	ldr	r0, [pc, #476]	@ (80199c0 <mg_tls_parse_cert_der+0x3ec>)
 80197e2:	f7f5 f8af 	bl	800e944 <mg_log>
    mg_sha256(cert->tbshash, tbs, tbssz);
 80197e6:	68fb      	ldr	r3, [r7, #12]
 80197e8:	331c      	adds	r3, #28
 80197ea:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 80197ee:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 80197f2:	4618      	mov	r0, r3
 80197f4:	f7fb ff3f 	bl	8015676 <mg_sha256>
    cert->tbshashsz = 32;
 80197f8:	68fb      	ldr	r3, [r7, #12]
 80197fa:	2220      	movs	r2, #32
 80197fc:	64da      	str	r2, [r3, #76]	@ 0x4c
 80197fe:	e05b      	b.n	80198b8 <mg_tls_parse_cert_der+0x2e4>
  } else if (memcmp(algo.value, "\x2A\x86\x48\xCE\x3D\x04\x03\x03", algo.len) ==
 8019800:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8019802:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8019804:	496f      	ldr	r1, [pc, #444]	@ (80199c4 <mg_tls_parse_cert_der+0x3f0>)
 8019806:	4618      	mov	r0, r3
 8019808:	f00d ff34 	bl	8027674 <memcmp>
 801980c:	4603      	mov	r3, r0
 801980e:	2b00      	cmp	r3, #0
 8019810:	d11a      	bne.n	8019848 <mg_tls_parse_cert_der+0x274>
             0) {
    MG_VERBOSE(("sig algo: ECDSA with SHA384"));
 8019812:	4b62      	ldr	r3, [pc, #392]	@ (801999c <mg_tls_parse_cert_der+0x3c8>)
 8019814:	681b      	ldr	r3, [r3, #0]
 8019816:	2b03      	cmp	r3, #3
 8019818:	dd09      	ble.n	801982e <mg_tls_parse_cert_der+0x25a>
 801981a:	4b61      	ldr	r3, [pc, #388]	@ (80199a0 <mg_tls_parse_cert_der+0x3cc>)
 801981c:	f642 6275 	movw	r2, #11893	@ 0x2e75
 8019820:	4960      	ldr	r1, [pc, #384]	@ (80199a4 <mg_tls_parse_cert_der+0x3d0>)
 8019822:	2004      	movs	r0, #4
 8019824:	f7f5 f83e 	bl	800e8a4 <mg_log_prefix>
 8019828:	4867      	ldr	r0, [pc, #412]	@ (80199c8 <mg_tls_parse_cert_der+0x3f4>)
 801982a:	f7f5 f88b 	bl	800e944 <mg_log>
    mg_sha384(cert->tbshash, tbs, tbssz);
 801982e:	68fb      	ldr	r3, [r7, #12]
 8019830:	331c      	adds	r3, #28
 8019832:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8019836:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 801983a:	4618      	mov	r0, r3
 801983c:	f7fc ffef 	bl	801681e <mg_sha384>
    cert->tbshashsz = 48;
 8019840:	68fb      	ldr	r3, [r7, #12]
 8019842:	2230      	movs	r2, #48	@ 0x30
 8019844:	64da      	str	r2, [r3, #76]	@ 0x4c
 8019846:	e037      	b.n	80198b8 <mg_tls_parse_cert_der+0x2e4>
  } else if (memcmp(algo.value, "\x2A\x86\x48\x86\xF7\x0D\x01\x01\x0C",
 8019848:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
                    algo.len) == 0) {
 801984a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
  } else if (memcmp(algo.value, "\x2A\x86\x48\x86\xF7\x0D\x01\x01\x0C",
 801984c:	495f      	ldr	r1, [pc, #380]	@ (80199cc <mg_tls_parse_cert_der+0x3f8>)
 801984e:	4618      	mov	r0, r3
 8019850:	f00d ff10 	bl	8027674 <memcmp>
 8019854:	4603      	mov	r3, r0
 8019856:	2b00      	cmp	r3, #0
 8019858:	d11a      	bne.n	8019890 <mg_tls_parse_cert_der+0x2bc>
    MG_VERBOSE(("sig algo: RSA with SHA384"));
 801985a:	4b50      	ldr	r3, [pc, #320]	@ (801999c <mg_tls_parse_cert_der+0x3c8>)
 801985c:	681b      	ldr	r3, [r3, #0]
 801985e:	2b03      	cmp	r3, #3
 8019860:	dd09      	ble.n	8019876 <mg_tls_parse_cert_der+0x2a2>
 8019862:	4b4f      	ldr	r3, [pc, #316]	@ (80199a0 <mg_tls_parse_cert_der+0x3cc>)
 8019864:	f642 627a 	movw	r2, #11898	@ 0x2e7a
 8019868:	494e      	ldr	r1, [pc, #312]	@ (80199a4 <mg_tls_parse_cert_der+0x3d0>)
 801986a:	2004      	movs	r0, #4
 801986c:	f7f5 f81a 	bl	800e8a4 <mg_log_prefix>
 8019870:	4857      	ldr	r0, [pc, #348]	@ (80199d0 <mg_tls_parse_cert_der+0x3fc>)
 8019872:	f7f5 f867 	bl	800e944 <mg_log>
    mg_sha384(cert->tbshash, tbs, tbssz);
 8019876:	68fb      	ldr	r3, [r7, #12]
 8019878:	331c      	adds	r3, #28
 801987a:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 801987e:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 8019882:	4618      	mov	r0, r3
 8019884:	f7fc ffcb 	bl	801681e <mg_sha384>
    cert->tbshashsz = 48;
 8019888:	68fb      	ldr	r3, [r7, #12]
 801988a:	2230      	movs	r2, #48	@ 0x30
 801988c:	64da      	str	r2, [r3, #76]	@ 0x4c
 801988e:	e013      	b.n	80198b8 <mg_tls_parse_cert_der+0x2e4>
  } else {
    MG_ERROR(
 8019890:	4b42      	ldr	r3, [pc, #264]	@ (801999c <mg_tls_parse_cert_der+0x3c8>)
 8019892:	681b      	ldr	r3, [r3, #0]
 8019894:	2b00      	cmp	r3, #0
 8019896:	dd0c      	ble.n	80198b2 <mg_tls_parse_cert_der+0x2de>
 8019898:	4b41      	ldr	r3, [pc, #260]	@ (80199a0 <mg_tls_parse_cert_der+0x3cc>)
 801989a:	f642 627e 	movw	r2, #11902	@ 0x2e7e
 801989e:	4941      	ldr	r1, [pc, #260]	@ (80199a4 <mg_tls_parse_cert_der+0x3d0>)
 80198a0:	2001      	movs	r0, #1
 80198a2:	f7f4 ffff 	bl	800e8a4 <mg_log_prefix>
 80198a6:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80198a8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80198aa:	493f      	ldr	r1, [pc, #252]	@ (80199a8 <mg_tls_parse_cert_der+0x3d4>)
 80198ac:	4849      	ldr	r0, [pc, #292]	@ (80199d4 <mg_tls_parse_cert_der+0x400>)
 80198ae:	f7f5 f849 	bl	800e944 <mg_log>
        ("sig algo: unsupported OID: %M", mg_print_hex, algo.len, algo.value));
    return -1;
 80198b2:	f04f 33ff 	mov.w	r3, #4294967295
 80198b6:	e233      	b.n	8019d20 <mg_tls_parse_cert_der+0x74c>
  }
  MG_VERBOSE(("tbs hash: %M", mg_print_hex, cert->tbshashsz, cert->tbshash));
 80198b8:	4b38      	ldr	r3, [pc, #224]	@ (801999c <mg_tls_parse_cert_der+0x3c8>)
 80198ba:	681b      	ldr	r3, [r3, #0]
 80198bc:	2b03      	cmp	r3, #3
 80198be:	dd0e      	ble.n	80198de <mg_tls_parse_cert_der+0x30a>
 80198c0:	4b37      	ldr	r3, [pc, #220]	@ (80199a0 <mg_tls_parse_cert_der+0x3cc>)
 80198c2:	f642 6282 	movw	r2, #11906	@ 0x2e82
 80198c6:	4937      	ldr	r1, [pc, #220]	@ (80199a4 <mg_tls_parse_cert_der+0x3d0>)
 80198c8:	2004      	movs	r0, #4
 80198ca:	f7f4 ffeb 	bl	800e8a4 <mg_log_prefix>
 80198ce:	68fb      	ldr	r3, [r7, #12]
 80198d0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80198d2:	68fb      	ldr	r3, [r7, #12]
 80198d4:	331c      	adds	r3, #28
 80198d6:	4934      	ldr	r1, [pc, #208]	@ (80199a8 <mg_tls_parse_cert_der+0x3d4>)
 80198d8:	483f      	ldr	r0, [pc, #252]	@ (80199d8 <mg_tls_parse_cert_der+0x404>)
 80198da:	f7f5 f833 	bl	800e944 <mg_log>

  // issuer
  if (mg_der_next(&tbs_cert, &field) <= 0 || field.type != 0x30) return -1;
 80198de:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 80198e2:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80198e6:	4611      	mov	r1, r2
 80198e8:	4618      	mov	r0, r3
 80198ea:	f7fd fe19 	bl	8017520 <mg_der_next>
 80198ee:	4603      	mov	r3, r0
 80198f0:	2b00      	cmp	r3, #0
 80198f2:	dd03      	ble.n	80198fc <mg_tls_parse_cert_der+0x328>
 80198f4:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 80198f8:	2b30      	cmp	r3, #48	@ 0x30
 80198fa:	d002      	beq.n	8019902 <mg_tls_parse_cert_der+0x32e>
 80198fc:	f04f 33ff 	mov.w	r3, #4294967295
 8019900:	e20e      	b.n	8019d20 <mg_tls_parse_cert_der+0x74c>
  mg_der_debug_cert_name("issuer", &field);
 8019902:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8019906:	4619      	mov	r1, r3
 8019908:	4834      	ldr	r0, [pc, #208]	@ (80199dc <mg_tls_parse_cert_der+0x408>)
 801990a:	f7ff fdbd 	bl	8019488 <mg_der_debug_cert_name>

  // validity dates (before/after)
  if (mg_der_next(&tbs_cert, &field) <= 0 || field.type != 0x30) return -1;
 801990e:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 8019912:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8019916:	4611      	mov	r1, r2
 8019918:	4618      	mov	r0, r3
 801991a:	f7fd fe01 	bl	8017520 <mg_der_next>
 801991e:	4603      	mov	r3, r0
 8019920:	2b00      	cmp	r3, #0
 8019922:	dd03      	ble.n	801992c <mg_tls_parse_cert_der+0x358>
 8019924:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 8019928:	2b30      	cmp	r3, #48	@ 0x30
 801992a:	d002      	beq.n	8019932 <mg_tls_parse_cert_der+0x35e>
 801992c:	f04f 33ff 	mov.w	r3, #4294967295
 8019930:	e1f6      	b.n	8019d20 <mg_tls_parse_cert_der+0x74c>
  if (1) {
    struct mg_der_tlv before, after;
    mg_der_next(&field, &before);
 8019932:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8019936:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 801993a:	4611      	mov	r1, r2
 801993c:	4618      	mov	r0, r3
 801993e:	f7fd fdef 	bl	8017520 <mg_der_next>
    mg_der_next(&field, &after);
 8019942:	f107 0218 	add.w	r2, r7, #24
 8019946:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 801994a:	4611      	mov	r1, r2
 801994c:	4618      	mov	r0, r3
 801994e:	f7fd fde7 	bl	8017520 <mg_der_next>
    if (memcmp(after.value, "250101000000Z", after.len) < 0) {
 8019952:	6a3b      	ldr	r3, [r7, #32]
 8019954:	69fa      	ldr	r2, [r7, #28]
 8019956:	4922      	ldr	r1, [pc, #136]	@ (80199e0 <mg_tls_parse_cert_der+0x40c>)
 8019958:	4618      	mov	r0, r3
 801995a:	f00d fe8b 	bl	8027674 <memcmp>
 801995e:	4603      	mov	r3, r0
 8019960:	2b00      	cmp	r3, #0
 8019962:	da41      	bge.n	80199e8 <mg_tls_parse_cert_der+0x414>
      MG_ERROR(("invalid validity dates: before=%M after=%M", mg_print_hex,
 8019964:	4b0d      	ldr	r3, [pc, #52]	@ (801999c <mg_tls_parse_cert_der+0x3c8>)
 8019966:	681b      	ldr	r3, [r3, #0]
 8019968:	2b00      	cmp	r3, #0
 801996a:	dd14      	ble.n	8019996 <mg_tls_parse_cert_der+0x3c2>
 801996c:	4b0c      	ldr	r3, [pc, #48]	@ (80199a0 <mg_tls_parse_cert_der+0x3cc>)
 801996e:	f642 628f 	movw	r2, #11919	@ 0x2e8f
 8019972:	490c      	ldr	r1, [pc, #48]	@ (80199a4 <mg_tls_parse_cert_der+0x3d0>)
 8019974:	2001      	movs	r0, #1
 8019976:	f7f4 ff95 	bl	800e8a4 <mg_log_prefix>
 801997a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801997c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801997e:	69fb      	ldr	r3, [r7, #28]
 8019980:	6a3a      	ldr	r2, [r7, #32]
 8019982:	9202      	str	r2, [sp, #8]
 8019984:	9301      	str	r3, [sp, #4]
 8019986:	4b08      	ldr	r3, [pc, #32]	@ (80199a8 <mg_tls_parse_cert_der+0x3d4>)
 8019988:	9300      	str	r3, [sp, #0]
 801998a:	4603      	mov	r3, r0
 801998c:	460a      	mov	r2, r1
 801998e:	4906      	ldr	r1, [pc, #24]	@ (80199a8 <mg_tls_parse_cert_der+0x3d4>)
 8019990:	4814      	ldr	r0, [pc, #80]	@ (80199e4 <mg_tls_parse_cert_der+0x410>)
 8019992:	f7f4 ffd7 	bl	800e944 <mg_log>
                before.len, before.value, mg_print_hex, after.len,
                after.value));
      return -1;
 8019996:	f04f 33ff 	mov.w	r3, #4294967295
 801999a:	e1c1      	b.n	8019d20 <mg_tls_parse_cert_der+0x74c>
 801999c:	24000258 	.word	0x24000258
 80199a0:	0802daa8 	.word	0x0802daa8
 80199a4:	08029c3c 	.word	0x08029c3c
 80199a8:	08013521 	.word	0x08013521
 80199ac:	0802baa0 	.word	0x0802baa0
 80199b0:	0802bab0 	.word	0x0802bab0
 80199b4:	0802bac4 	.word	0x0802bac4
 80199b8:	0802bad0 	.word	0x0802bad0
 80199bc:	0802baec 	.word	0x0802baec
 80199c0:	0802baf8 	.word	0x0802baf8
 80199c4:	0802bb14 	.word	0x0802bb14
 80199c8:	0802bb20 	.word	0x0802bb20
 80199cc:	0802bb3c 	.word	0x0802bb3c
 80199d0:	0802bb48 	.word	0x0802bb48
 80199d4:	0802bb64 	.word	0x0802bb64
 80199d8:	0802bb84 	.word	0x0802bb84
 80199dc:	0802bb94 	.word	0x0802bb94
 80199e0:	0802bb9c 	.word	0x0802bb9c
 80199e4:	0802bbac 	.word	0x0802bbac
    }
  }

  // subject
  if (mg_der_next(&tbs_cert, &field) <= 0 || field.type != 0x30) return -1;
 80199e8:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 80199ec:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80199f0:	4611      	mov	r1, r2
 80199f2:	4618      	mov	r0, r3
 80199f4:	f7fd fd94 	bl	8017520 <mg_der_next>
 80199f8:	4603      	mov	r3, r0
 80199fa:	2b00      	cmp	r3, #0
 80199fc:	dd03      	ble.n	8019a06 <mg_tls_parse_cert_der+0x432>
 80199fe:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 8019a02:	2b30      	cmp	r3, #48	@ 0x30
 8019a04:	d002      	beq.n	8019a0c <mg_tls_parse_cert_der+0x438>
 8019a06:	f04f 33ff 	mov.w	r3, #4294967295
 8019a0a:	e189      	b.n	8019d20 <mg_tls_parse_cert_der+0x74c>
  mg_der_debug_cert_name("subject", &field);
 8019a0c:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8019a10:	4619      	mov	r1, r3
 8019a12:	48a2      	ldr	r0, [pc, #648]	@ (8019c9c <mg_tls_parse_cert_der+0x6c8>)
 8019a14:	f7ff fd38 	bl	8019488 <mg_der_debug_cert_name>

  // subject public key info
  if (mg_der_next(&tbs_cert, &field) <= 0 || field.type != 0x30) return -1;
 8019a18:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 8019a1c:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8019a20:	4611      	mov	r1, r2
 8019a22:	4618      	mov	r0, r3
 8019a24:	f7fd fd7c 	bl	8017520 <mg_der_next>
 8019a28:	4603      	mov	r3, r0
 8019a2a:	2b00      	cmp	r3, #0
 8019a2c:	dd03      	ble.n	8019a36 <mg_tls_parse_cert_der+0x462>
 8019a2e:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 8019a32:	2b30      	cmp	r3, #48	@ 0x30
 8019a34:	d002      	beq.n	8019a3c <mg_tls_parse_cert_der+0x468>
 8019a36:	f04f 33ff 	mov.w	r3, #4294967295
 8019a3a:	e171      	b.n	8019d20 <mg_tls_parse_cert_der+0x74c>

  if (mg_der_next(&field, &pki) <= 0 || pki.type != 0x30) return -1;
 8019a3c:	f107 0260 	add.w	r2, r7, #96	@ 0x60
 8019a40:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8019a44:	4611      	mov	r1, r2
 8019a46:	4618      	mov	r0, r3
 8019a48:	f7fd fd6a 	bl	8017520 <mg_der_next>
 8019a4c:	4603      	mov	r3, r0
 8019a4e:	2b00      	cmp	r3, #0
 8019a50:	dd03      	ble.n	8019a5a <mg_tls_parse_cert_der+0x486>
 8019a52:	f897 3060 	ldrb.w	r3, [r7, #96]	@ 0x60
 8019a56:	2b30      	cmp	r3, #48	@ 0x30
 8019a58:	d002      	beq.n	8019a60 <mg_tls_parse_cert_der+0x48c>
 8019a5a:	f04f 33ff 	mov.w	r3, #4294967295
 8019a5e:	e15f      	b.n	8019d20 <mg_tls_parse_cert_der+0x74c>
  if (mg_der_next(&pki, &pki_algo) <= 0 || pki_algo.type != 0x06) return -1;
 8019a60:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 8019a64:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8019a68:	4611      	mov	r1, r2
 8019a6a:	4618      	mov	r0, r3
 8019a6c:	f7fd fd58 	bl	8017520 <mg_der_next>
 8019a70:	4603      	mov	r3, r0
 8019a72:	2b00      	cmp	r3, #0
 8019a74:	dd03      	ble.n	8019a7e <mg_tls_parse_cert_der+0x4aa>
 8019a76:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8019a7a:	2b06      	cmp	r3, #6
 8019a7c:	d002      	beq.n	8019a84 <mg_tls_parse_cert_der+0x4b0>
 8019a7e:	f04f 33ff 	mov.w	r3, #4294967295
 8019a82:	e14d      	b.n	8019d20 <mg_tls_parse_cert_der+0x74c>

  // public key algorithm
  MG_VERBOSE(("pk algo (oid): %M", mg_print_hex, pki_algo.len, pki_algo.value));
 8019a84:	4b86      	ldr	r3, [pc, #536]	@ (8019ca0 <mg_tls_parse_cert_der+0x6cc>)
 8019a86:	681b      	ldr	r3, [r3, #0]
 8019a88:	2b03      	cmp	r3, #3
 8019a8a:	dd0c      	ble.n	8019aa6 <mg_tls_parse_cert_der+0x4d2>
 8019a8c:	4b85      	ldr	r3, [pc, #532]	@ (8019ca4 <mg_tls_parse_cert_der+0x6d0>)
 8019a8e:	f642 62a1 	movw	r2, #11937	@ 0x2ea1
 8019a92:	4985      	ldr	r1, [pc, #532]	@ (8019ca8 <mg_tls_parse_cert_der+0x6d4>)
 8019a94:	2004      	movs	r0, #4
 8019a96:	f7f4 ff05 	bl	800e8a4 <mg_log_prefix>
 8019a9a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8019a9c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8019a9e:	4983      	ldr	r1, [pc, #524]	@ (8019cac <mg_tls_parse_cert_der+0x6d8>)
 8019aa0:	4883      	ldr	r0, [pc, #524]	@ (8019cb0 <mg_tls_parse_cert_der+0x6dc>)
 8019aa2:	f7f4 ff4f 	bl	800e944 <mg_log>
  if (memcmp(pki_algo.value, "\x2A\x86\x48\xCE\x3D\x03\x01\x07",
 8019aa6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
             pki_algo.len) == 0) {
 8019aa8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
  if (memcmp(pki_algo.value, "\x2A\x86\x48\xCE\x3D\x03\x01\x07",
 8019aaa:	4982      	ldr	r1, [pc, #520]	@ (8019cb4 <mg_tls_parse_cert_der+0x6e0>)
 8019aac:	4618      	mov	r0, r3
 8019aae:	f00d fde1 	bl	8027674 <memcmp>
 8019ab2:	4603      	mov	r3, r0
 8019ab4:	2b00      	cmp	r3, #0
 8019ab6:	d111      	bne.n	8019adc <mg_tls_parse_cert_der+0x508>
    cert->is_ec_pubkey = 1;
 8019ab8:	68fb      	ldr	r3, [r7, #12]
 8019aba:	2201      	movs	r2, #1
 8019abc:	601a      	str	r2, [r3, #0]
    MG_VERBOSE(("pk algo: ECDSA secp256r1"));
 8019abe:	4b78      	ldr	r3, [pc, #480]	@ (8019ca0 <mg_tls_parse_cert_der+0x6cc>)
 8019ac0:	681b      	ldr	r3, [r3, #0]
 8019ac2:	2b03      	cmp	r3, #3
 8019ac4:	dd6f      	ble.n	8019ba6 <mg_tls_parse_cert_der+0x5d2>
 8019ac6:	4b77      	ldr	r3, [pc, #476]	@ (8019ca4 <mg_tls_parse_cert_der+0x6d0>)
 8019ac8:	f642 62a5 	movw	r2, #11941	@ 0x2ea5
 8019acc:	4976      	ldr	r1, [pc, #472]	@ (8019ca8 <mg_tls_parse_cert_der+0x6d4>)
 8019ace:	2004      	movs	r0, #4
 8019ad0:	f7f4 fee8 	bl	800e8a4 <mg_log_prefix>
 8019ad4:	4878      	ldr	r0, [pc, #480]	@ (8019cb8 <mg_tls_parse_cert_der+0x6e4>)
 8019ad6:	f7f4 ff35 	bl	800e944 <mg_log>
 8019ada:	e064      	b.n	8019ba6 <mg_tls_parse_cert_der+0x5d2>
  } else if (memcmp(pki_algo.value, "\x2A\x86\x48\xCE\x3D\x03\x01\x08",
 8019adc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
                    pki_algo.len) == 0) {
 8019ade:	6dba      	ldr	r2, [r7, #88]	@ 0x58
  } else if (memcmp(pki_algo.value, "\x2A\x86\x48\xCE\x3D\x03\x01\x08",
 8019ae0:	4976      	ldr	r1, [pc, #472]	@ (8019cbc <mg_tls_parse_cert_der+0x6e8>)
 8019ae2:	4618      	mov	r0, r3
 8019ae4:	f00d fdc6 	bl	8027674 <memcmp>
 8019ae8:	4603      	mov	r3, r0
 8019aea:	2b00      	cmp	r3, #0
 8019aec:	d111      	bne.n	8019b12 <mg_tls_parse_cert_der+0x53e>
    cert->is_ec_pubkey = 1;
 8019aee:	68fb      	ldr	r3, [r7, #12]
 8019af0:	2201      	movs	r2, #1
 8019af2:	601a      	str	r2, [r3, #0]
    MG_VERBOSE(("pk algo: ECDSA secp384r1"));
 8019af4:	4b6a      	ldr	r3, [pc, #424]	@ (8019ca0 <mg_tls_parse_cert_der+0x6cc>)
 8019af6:	681b      	ldr	r3, [r3, #0]
 8019af8:	2b03      	cmp	r3, #3
 8019afa:	dd54      	ble.n	8019ba6 <mg_tls_parse_cert_der+0x5d2>
 8019afc:	4b69      	ldr	r3, [pc, #420]	@ (8019ca4 <mg_tls_parse_cert_der+0x6d0>)
 8019afe:	f642 62a9 	movw	r2, #11945	@ 0x2ea9
 8019b02:	4969      	ldr	r1, [pc, #420]	@ (8019ca8 <mg_tls_parse_cert_der+0x6d4>)
 8019b04:	2004      	movs	r0, #4
 8019b06:	f7f4 fecd 	bl	800e8a4 <mg_log_prefix>
 8019b0a:	486d      	ldr	r0, [pc, #436]	@ (8019cc0 <mg_tls_parse_cert_der+0x6ec>)
 8019b0c:	f7f4 ff1a 	bl	800e944 <mg_log>
 8019b10:	e049      	b.n	8019ba6 <mg_tls_parse_cert_der+0x5d2>
  } else if (memcmp(pki_algo.value, "\x2A\x86\x48\xCE\x3D\x02\x01",
 8019b12:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
                    pki_algo.len) == 0) {
 8019b14:	6dba      	ldr	r2, [r7, #88]	@ 0x58
  } else if (memcmp(pki_algo.value, "\x2A\x86\x48\xCE\x3D\x02\x01",
 8019b16:	496b      	ldr	r1, [pc, #428]	@ (8019cc4 <mg_tls_parse_cert_der+0x6f0>)
 8019b18:	4618      	mov	r0, r3
 8019b1a:	f00d fdab 	bl	8027674 <memcmp>
 8019b1e:	4603      	mov	r3, r0
 8019b20:	2b00      	cmp	r3, #0
 8019b22:	d111      	bne.n	8019b48 <mg_tls_parse_cert_der+0x574>
    cert->is_ec_pubkey = 1;
 8019b24:	68fb      	ldr	r3, [r7, #12]
 8019b26:	2201      	movs	r2, #1
 8019b28:	601a      	str	r2, [r3, #0]
    MG_VERBOSE(("pk algo: EC public key"));
 8019b2a:	4b5d      	ldr	r3, [pc, #372]	@ (8019ca0 <mg_tls_parse_cert_der+0x6cc>)
 8019b2c:	681b      	ldr	r3, [r3, #0]
 8019b2e:	2b03      	cmp	r3, #3
 8019b30:	dd39      	ble.n	8019ba6 <mg_tls_parse_cert_der+0x5d2>
 8019b32:	4b5c      	ldr	r3, [pc, #368]	@ (8019ca4 <mg_tls_parse_cert_der+0x6d0>)
 8019b34:	f642 62ad 	movw	r2, #11949	@ 0x2ead
 8019b38:	495b      	ldr	r1, [pc, #364]	@ (8019ca8 <mg_tls_parse_cert_der+0x6d4>)
 8019b3a:	2004      	movs	r0, #4
 8019b3c:	f7f4 feb2 	bl	800e8a4 <mg_log_prefix>
 8019b40:	4861      	ldr	r0, [pc, #388]	@ (8019cc8 <mg_tls_parse_cert_der+0x6f4>)
 8019b42:	f7f4 feff 	bl	800e944 <mg_log>
 8019b46:	e02e      	b.n	8019ba6 <mg_tls_parse_cert_der+0x5d2>
  } else if (memcmp(pki_algo.value, "\x2A\x86\x48\x86\xF7\x0D\x01\x01\x01",
 8019b48:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
                    pki_algo.len) == 0) {
 8019b4a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
  } else if (memcmp(pki_algo.value, "\x2A\x86\x48\x86\xF7\x0D\x01\x01\x01",
 8019b4c:	495f      	ldr	r1, [pc, #380]	@ (8019ccc <mg_tls_parse_cert_der+0x6f8>)
 8019b4e:	4618      	mov	r0, r3
 8019b50:	f00d fd90 	bl	8027674 <memcmp>
 8019b54:	4603      	mov	r3, r0
 8019b56:	2b00      	cmp	r3, #0
 8019b58:	d111      	bne.n	8019b7e <mg_tls_parse_cert_der+0x5aa>
    cert->is_ec_pubkey = 0;
 8019b5a:	68fb      	ldr	r3, [r7, #12]
 8019b5c:	2200      	movs	r2, #0
 8019b5e:	601a      	str	r2, [r3, #0]
    MG_VERBOSE(("pk algo: RSA"));
 8019b60:	4b4f      	ldr	r3, [pc, #316]	@ (8019ca0 <mg_tls_parse_cert_der+0x6cc>)
 8019b62:	681b      	ldr	r3, [r3, #0]
 8019b64:	2b03      	cmp	r3, #3
 8019b66:	dd1e      	ble.n	8019ba6 <mg_tls_parse_cert_der+0x5d2>
 8019b68:	4b4e      	ldr	r3, [pc, #312]	@ (8019ca4 <mg_tls_parse_cert_der+0x6d0>)
 8019b6a:	f642 62b1 	movw	r2, #11953	@ 0x2eb1
 8019b6e:	494e      	ldr	r1, [pc, #312]	@ (8019ca8 <mg_tls_parse_cert_der+0x6d4>)
 8019b70:	2004      	movs	r0, #4
 8019b72:	f7f4 fe97 	bl	800e8a4 <mg_log_prefix>
 8019b76:	4856      	ldr	r0, [pc, #344]	@ (8019cd0 <mg_tls_parse_cert_der+0x6fc>)
 8019b78:	f7f4 fee4 	bl	800e944 <mg_log>
 8019b7c:	e013      	b.n	8019ba6 <mg_tls_parse_cert_der+0x5d2>
  } else {
    MG_ERROR(("unsupported pk algo: %M", mg_print_hex, pki_algo.len,
 8019b7e:	4b48      	ldr	r3, [pc, #288]	@ (8019ca0 <mg_tls_parse_cert_der+0x6cc>)
 8019b80:	681b      	ldr	r3, [r3, #0]
 8019b82:	2b00      	cmp	r3, #0
 8019b84:	dd0c      	ble.n	8019ba0 <mg_tls_parse_cert_der+0x5cc>
 8019b86:	4b47      	ldr	r3, [pc, #284]	@ (8019ca4 <mg_tls_parse_cert_der+0x6d0>)
 8019b88:	f642 62b3 	movw	r2, #11955	@ 0x2eb3
 8019b8c:	4946      	ldr	r1, [pc, #280]	@ (8019ca8 <mg_tls_parse_cert_der+0x6d4>)
 8019b8e:	2001      	movs	r0, #1
 8019b90:	f7f4 fe88 	bl	800e8a4 <mg_log_prefix>
 8019b94:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8019b96:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8019b98:	4944      	ldr	r1, [pc, #272]	@ (8019cac <mg_tls_parse_cert_der+0x6d8>)
 8019b9a:	484e      	ldr	r0, [pc, #312]	@ (8019cd4 <mg_tls_parse_cert_der+0x700>)
 8019b9c:	f7f4 fed2 	bl	800e944 <mg_log>
              pki_algo.value));
    return -1;
 8019ba0:	f04f 33ff 	mov.w	r3, #4294967295
 8019ba4:	e0bc      	b.n	8019d20 <mg_tls_parse_cert_der+0x74c>
  }

  // Parse public key
  if (cert->is_ec_pubkey) {
 8019ba6:	68fb      	ldr	r3, [r7, #12]
 8019ba8:	681b      	ldr	r3, [r3, #0]
 8019baa:	2b00      	cmp	r3, #0
 8019bac:	d011      	beq.n	8019bd2 <mg_tls_parse_cert_der+0x5fe>
    if (mg_der_next(&pki, &pki_curve) <= 0 || pki_curve.type != 0x06) return -1;
 8019bae:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8019bb2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8019bb6:	4611      	mov	r1, r2
 8019bb8:	4618      	mov	r0, r3
 8019bba:	f7fd fcb1 	bl	8017520 <mg_der_next>
 8019bbe:	4603      	mov	r3, r0
 8019bc0:	2b00      	cmp	r3, #0
 8019bc2:	dd03      	ble.n	8019bcc <mg_tls_parse_cert_der+0x5f8>
 8019bc4:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8019bc8:	2b06      	cmp	r3, #6
 8019bca:	d002      	beq.n	8019bd2 <mg_tls_parse_cert_der+0x5fe>
 8019bcc:	f04f 33ff 	mov.w	r3, #4294967295
 8019bd0:	e0a6      	b.n	8019d20 <mg_tls_parse_cert_der+0x74c>
  }
  if (mg_der_next(&field, &pki_key) <= 0 || pki_key.type != 0x03) return -1;
 8019bd2:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8019bd6:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8019bda:	4611      	mov	r1, r2
 8019bdc:	4618      	mov	r0, r3
 8019bde:	f7fd fc9f 	bl	8017520 <mg_der_next>
 8019be2:	4603      	mov	r3, r0
 8019be4:	2b00      	cmp	r3, #0
 8019be6:	dd03      	ble.n	8019bf0 <mg_tls_parse_cert_der+0x61c>
 8019be8:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8019bec:	2b03      	cmp	r3, #3
 8019bee:	d002      	beq.n	8019bf6 <mg_tls_parse_cert_der+0x622>
 8019bf0:	f04f 33ff 	mov.w	r3, #4294967295
 8019bf4:	e094      	b.n	8019d20 <mg_tls_parse_cert_der+0x74c>

  if (cert->is_ec_pubkey) {  // Skip leading 0x00 and 0x04 (=uncompressed)
 8019bf6:	68fb      	ldr	r3, [r7, #12]
 8019bf8:	681b      	ldr	r3, [r3, #0]
 8019bfa:	2b00      	cmp	r3, #0
 8019bfc:	d010      	beq.n	8019c20 <mg_tls_parse_cert_der+0x64c>
    cert->pubkey = mg_str_n((char *) pki_key.value + 2, pki_key.len - 2);
 8019bfe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019c00:	1c99      	adds	r1, r3, #2
 8019c02:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019c04:	1e9a      	subs	r2, r3, #2
 8019c06:	68fc      	ldr	r4, [r7, #12]
 8019c08:	463b      	mov	r3, r7
 8019c0a:	4618      	mov	r0, r3
 8019c0c:	f7fc fe67 	bl	80168de <mg_str_n>
 8019c10:	f104 030c 	add.w	r3, r4, #12
 8019c14:	463a      	mov	r2, r7
 8019c16:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019c1a:	e883 0003 	stmia.w	r3, {r0, r1}
 8019c1e:	e00f      	b.n	8019c40 <mg_tls_parse_cert_der+0x66c>
  } else {  // Skip leading 0x00 byte
    cert->pubkey = mg_str_n((char *) pki_key.value + 1, pki_key.len - 1);
 8019c20:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019c22:	1c59      	adds	r1, r3, #1
 8019c24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019c26:	1e5a      	subs	r2, r3, #1
 8019c28:	68fc      	ldr	r4, [r7, #12]
 8019c2a:	463b      	mov	r3, r7
 8019c2c:	4618      	mov	r0, r3
 8019c2e:	f7fc fe56 	bl	80168de <mg_str_n>
 8019c32:	f104 030c 	add.w	r3, r4, #12
 8019c36:	463a      	mov	r2, r7
 8019c38:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019c3c:	e883 0003 	stmia.w	r3, {r0, r1}
  }

  // Parse signature
  if (mg_der_next(&root, &field) <= 0 || field.type != 0x30) return -1;
 8019c40:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 8019c44:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8019c48:	4611      	mov	r1, r2
 8019c4a:	4618      	mov	r0, r3
 8019c4c:	f7fd fc68 	bl	8017520 <mg_der_next>
 8019c50:	4603      	mov	r3, r0
 8019c52:	2b00      	cmp	r3, #0
 8019c54:	dd03      	ble.n	8019c5e <mg_tls_parse_cert_der+0x68a>
 8019c56:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 8019c5a:	2b30      	cmp	r3, #48	@ 0x30
 8019c5c:	d002      	beq.n	8019c64 <mg_tls_parse_cert_der+0x690>
 8019c5e:	f04f 33ff 	mov.w	r3, #4294967295
 8019c62:	e05d      	b.n	8019d20 <mg_tls_parse_cert_der+0x74c>
  if (mg_der_next(&root, &raw_sig) <= 0 || raw_sig.type != 0x03) return -1;
 8019c64:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8019c68:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8019c6c:	4611      	mov	r1, r2
 8019c6e:	4618      	mov	r0, r3
 8019c70:	f7fd fc56 	bl	8017520 <mg_der_next>
 8019c74:	4603      	mov	r3, r0
 8019c76:	2b00      	cmp	r3, #0
 8019c78:	dd03      	ble.n	8019c82 <mg_tls_parse_cert_der+0x6ae>
 8019c7a:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8019c7e:	2b03      	cmp	r3, #3
 8019c80:	d002      	beq.n	8019c88 <mg_tls_parse_cert_der+0x6b4>
 8019c82:	f04f 33ff 	mov.w	r3, #4294967295
 8019c86:	e04b      	b.n	8019d20 <mg_tls_parse_cert_der+0x74c>
  if (raw_sig.len < 1 || raw_sig.value[0] != 0x00) return -1;
 8019c88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019c8a:	2b00      	cmp	r3, #0
 8019c8c:	d003      	beq.n	8019c96 <mg_tls_parse_cert_der+0x6c2>
 8019c8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019c90:	781b      	ldrb	r3, [r3, #0]
 8019c92:	2b00      	cmp	r3, #0
 8019c94:	d020      	beq.n	8019cd8 <mg_tls_parse_cert_der+0x704>
 8019c96:	f04f 33ff 	mov.w	r3, #4294967295
 8019c9a:	e041      	b.n	8019d20 <mg_tls_parse_cert_der+0x74c>
 8019c9c:	0802bbd8 	.word	0x0802bbd8
 8019ca0:	24000258 	.word	0x24000258
 8019ca4:	0802daa8 	.word	0x0802daa8
 8019ca8:	08029c3c 	.word	0x08029c3c
 8019cac:	08013521 	.word	0x08013521
 8019cb0:	0802bbe0 	.word	0x0802bbe0
 8019cb4:	0802bbf4 	.word	0x0802bbf4
 8019cb8:	0802bc00 	.word	0x0802bc00
 8019cbc:	0802bc1c 	.word	0x0802bc1c
 8019cc0:	0802bc28 	.word	0x0802bc28
 8019cc4:	0802bc44 	.word	0x0802bc44
 8019cc8:	0802bc4c 	.word	0x0802bc4c
 8019ccc:	0802bc64 	.word	0x0802bc64
 8019cd0:	0802bc70 	.word	0x0802bc70
 8019cd4:	0802bc80 	.word	0x0802bc80

  cert->sig = mg_str_n((char *) raw_sig.value + 1, raw_sig.len - 1);
 8019cd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019cda:	1c59      	adds	r1, r3, #1
 8019cdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019cde:	1e5a      	subs	r2, r3, #1
 8019ce0:	68fc      	ldr	r4, [r7, #12]
 8019ce2:	463b      	mov	r3, r7
 8019ce4:	4618      	mov	r0, r3
 8019ce6:	f7fc fdfa 	bl	80168de <mg_str_n>
 8019cea:	f104 0314 	add.w	r3, r4, #20
 8019cee:	463a      	mov	r2, r7
 8019cf0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019cf4:	e883 0003 	stmia.w	r3, {r0, r1}
  MG_VERBOSE(("sig: %M", mg_print_hex, cert->sig.len, cert->sig.buf));
 8019cf8:	4b0b      	ldr	r3, [pc, #44]	@ (8019d28 <mg_tls_parse_cert_der+0x754>)
 8019cfa:	681b      	ldr	r3, [r3, #0]
 8019cfc:	2b03      	cmp	r3, #3
 8019cfe:	dd0e      	ble.n	8019d1e <mg_tls_parse_cert_der+0x74a>
 8019d00:	4b0a      	ldr	r3, [pc, #40]	@ (8019d2c <mg_tls_parse_cert_der+0x758>)
 8019d02:	f642 62ca 	movw	r2, #11978	@ 0x2eca
 8019d06:	490a      	ldr	r1, [pc, #40]	@ (8019d30 <mg_tls_parse_cert_der+0x75c>)
 8019d08:	2004      	movs	r0, #4
 8019d0a:	f7f4 fdcb 	bl	800e8a4 <mg_log_prefix>
 8019d0e:	68fb      	ldr	r3, [r7, #12]
 8019d10:	699a      	ldr	r2, [r3, #24]
 8019d12:	68fb      	ldr	r3, [r7, #12]
 8019d14:	695b      	ldr	r3, [r3, #20]
 8019d16:	4907      	ldr	r1, [pc, #28]	@ (8019d34 <mg_tls_parse_cert_der+0x760>)
 8019d18:	4807      	ldr	r0, [pc, #28]	@ (8019d38 <mg_tls_parse_cert_der+0x764>)
 8019d1a:	f7f4 fe13 	bl	800e944 <mg_log>

  return 0;
 8019d1e:	2300      	movs	r3, #0
}
 8019d20:	4618      	mov	r0, r3
 8019d22:	37ac      	adds	r7, #172	@ 0xac
 8019d24:	46bd      	mov	sp, r7
 8019d26:	bd90      	pop	{r4, r7, pc}
 8019d28:	24000258 	.word	0x24000258
 8019d2c:	0802daa8 	.word	0x0802daa8
 8019d30:	08029c3c 	.word	0x08029c3c
 8019d34:	08013521 	.word	0x08013521
 8019d38:	0802bc98 	.word	0x0802bc98

08019d3c <mg_tls_verify_cert_san>:

static int mg_tls_verify_cert_san(const uint8_t *der, size_t dersz,
                                  const char *server_name) {
 8019d3c:	b580      	push	{r7, lr}
 8019d3e:	b094      	sub	sp, #80	@ 0x50
 8019d40:	af02      	add	r7, sp, #8
 8019d42:	60f8      	str	r0, [r7, #12]
 8019d44:	60b9      	str	r1, [r7, #8]
 8019d46:	607a      	str	r2, [r7, #4]
  struct mg_der_tlv root, field, name;
  if (mg_der_parse((uint8_t *) der, dersz, &root) < 0 ||
 8019d48:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8019d4c:	461a      	mov	r2, r3
 8019d4e:	68b9      	ldr	r1, [r7, #8]
 8019d50:	68f8      	ldr	r0, [r7, #12]
 8019d52:	f7fd fb85 	bl	8017460 <mg_der_parse>
 8019d56:	4603      	mov	r3, r0
 8019d58:	2b00      	cmp	r3, #0
 8019d5a:	db0a      	blt.n	8019d72 <mg_tls_verify_cert_san+0x36>
      mg_der_find_oid(&root, (uint8_t *) "\x55\x1d\x11", 3, &field) < 0) {
 8019d5c:	f107 0320 	add.w	r3, r7, #32
 8019d60:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8019d64:	2203      	movs	r2, #3
 8019d66:	492f      	ldr	r1, [pc, #188]	@ (8019e24 <mg_tls_verify_cert_san+0xe8>)
 8019d68:	f7fd fc05 	bl	8017576 <mg_der_find_oid>
 8019d6c:	4603      	mov	r3, r0
  if (mg_der_parse((uint8_t *) der, dersz, &root) < 0 ||
 8019d6e:	2b00      	cmp	r3, #0
 8019d70:	da10      	bge.n	8019d94 <mg_tls_verify_cert_san+0x58>
    MG_ERROR(("failed to parse certificate to extract SAN"));
 8019d72:	4b2d      	ldr	r3, [pc, #180]	@ (8019e28 <mg_tls_verify_cert_san+0xec>)
 8019d74:	681b      	ldr	r3, [r3, #0]
 8019d76:	2b00      	cmp	r3, #0
 8019d78:	dd09      	ble.n	8019d8e <mg_tls_verify_cert_san+0x52>
 8019d7a:	4b2c      	ldr	r3, [pc, #176]	@ (8019e2c <mg_tls_verify_cert_san+0xf0>)
 8019d7c:	f642 62d4 	movw	r2, #11988	@ 0x2ed4
 8019d80:	492b      	ldr	r1, [pc, #172]	@ (8019e30 <mg_tls_verify_cert_san+0xf4>)
 8019d82:	2001      	movs	r0, #1
 8019d84:	f7f4 fd8e 	bl	800e8a4 <mg_log_prefix>
 8019d88:	482a      	ldr	r0, [pc, #168]	@ (8019e34 <mg_tls_verify_cert_san+0xf8>)
 8019d8a:	f7f4 fddb 	bl	800e944 <mg_log>
    return -1;
 8019d8e:	f04f 33ff 	mov.w	r3, #4294967295
 8019d92:	e043      	b.n	8019e1c <mg_tls_verify_cert_san+0xe0>
  }
  if (mg_der_parse(field.value, field.len, &field) < 0) {
 8019d94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019d96:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8019d98:	f107 0220 	add.w	r2, r7, #32
 8019d9c:	4618      	mov	r0, r3
 8019d9e:	f7fd fb5f 	bl	8017460 <mg_der_parse>
 8019da2:	4603      	mov	r3, r0
 8019da4:	2b00      	cmp	r3, #0
 8019da6:	da2c      	bge.n	8019e02 <mg_tls_verify_cert_san+0xc6>
    MG_ERROR(
 8019da8:	4b1f      	ldr	r3, [pc, #124]	@ (8019e28 <mg_tls_verify_cert_san+0xec>)
 8019daa:	681b      	ldr	r3, [r3, #0]
 8019dac:	2b00      	cmp	r3, #0
 8019dae:	dd09      	ble.n	8019dc4 <mg_tls_verify_cert_san+0x88>
 8019db0:	4b1e      	ldr	r3, [pc, #120]	@ (8019e2c <mg_tls_verify_cert_san+0xf0>)
 8019db2:	f642 62d8 	movw	r2, #11992	@ 0x2ed8
 8019db6:	491e      	ldr	r1, [pc, #120]	@ (8019e30 <mg_tls_verify_cert_san+0xf4>)
 8019db8:	2001      	movs	r0, #1
 8019dba:	f7f4 fd73 	bl	800e8a4 <mg_log_prefix>
 8019dbe:	481e      	ldr	r0, [pc, #120]	@ (8019e38 <mg_tls_verify_cert_san+0xfc>)
 8019dc0:	f7f4 fdc0 	bl	800e944 <mg_log>
        ("certificate subject alternative names is not a constructed object"));
    return -1;
 8019dc4:	f04f 33ff 	mov.w	r3, #4294967295
 8019dc8:	e028      	b.n	8019e1c <mg_tls_verify_cert_san+0xe0>
  }
  while (mg_der_next(&field, &name) > 0) {
    if (mg_match(mg_str(server_name),
 8019dca:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8019dce:	6879      	ldr	r1, [r7, #4]
 8019dd0:	4618      	mov	r0, r3
 8019dd2:	f7fc fd67 	bl	80168a4 <mg_str_s>
                 mg_str_n((const char *) name.value, name.len), NULL)) {
 8019dd6:	69f9      	ldr	r1, [r7, #28]
 8019dd8:	69ba      	ldr	r2, [r7, #24]
    if (mg_match(mg_str(server_name),
 8019dda:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8019dde:	4618      	mov	r0, r3
 8019de0:	f7fc fd7d 	bl	80168de <mg_str_n>
 8019de4:	2300      	movs	r3, #0
 8019de6:	9300      	str	r3, [sp, #0]
 8019de8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8019dec:	cb0c      	ldmia	r3, {r2, r3}
 8019dee:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8019df2:	c903      	ldmia	r1, {r0, r1}
 8019df4:	f7fc fe60 	bl	8016ab8 <mg_match>
 8019df8:	4603      	mov	r3, r0
 8019dfa:	2b00      	cmp	r3, #0
 8019dfc:	d001      	beq.n	8019e02 <mg_tls_verify_cert_san+0xc6>
      // Found SAN that matches the host name
      return 1;
 8019dfe:	2301      	movs	r3, #1
 8019e00:	e00c      	b.n	8019e1c <mg_tls_verify_cert_san+0xe0>
  while (mg_der_next(&field, &name) > 0) {
 8019e02:	f107 0214 	add.w	r2, r7, #20
 8019e06:	f107 0320 	add.w	r3, r7, #32
 8019e0a:	4611      	mov	r1, r2
 8019e0c:	4618      	mov	r0, r3
 8019e0e:	f7fd fb87 	bl	8017520 <mg_der_next>
 8019e12:	4603      	mov	r3, r0
 8019e14:	2b00      	cmp	r3, #0
 8019e16:	dcd8      	bgt.n	8019dca <mg_tls_verify_cert_san+0x8e>
    }
  }
  return -1;
 8019e18:	f04f 33ff 	mov.w	r3, #4294967295
}
 8019e1c:	4618      	mov	r0, r3
 8019e1e:	3748      	adds	r7, #72	@ 0x48
 8019e20:	46bd      	mov	sp, r7
 8019e22:	bd80      	pop	{r7, pc}
 8019e24:	0802bca0 	.word	0x0802bca0
 8019e28:	24000258 	.word	0x24000258
 8019e2c:	0802dac0 	.word	0x0802dac0
 8019e30:	08029c3c 	.word	0x08029c3c
 8019e34:	0802bca4 	.word	0x0802bca4
 8019e38:	0802bcd0 	.word	0x0802bcd0

08019e3c <mg_tls_verify_cert_signature>:

static int mg_tls_verify_cert_signature(const struct mg_tls_cert *cert,
                                        const struct mg_tls_cert *issuer) {
 8019e3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019e3e:	b0db      	sub	sp, #364	@ 0x16c
 8019e40:	af04      	add	r7, sp, #16
 8019e42:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8019e46:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8019e4a:	6018      	str	r0, [r3, #0]
 8019e4c:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8019e50:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8019e54:	6019      	str	r1, [r3, #0]
  if (issuer->is_ec_pubkey) {
 8019e56:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8019e5a:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8019e5e:	681b      	ldr	r3, [r3, #0]
 8019e60:	681b      	ldr	r3, [r3, #0]
 8019e62:	2b00      	cmp	r3, #0
 8019e64:	f000 80eb 	beq.w	801a03e <mg_tls_verify_cert_signature+0x202>
    uint8_t sig[128];
    struct mg_der_tlv seq = {0, 0, 0}, a = {0, 0, 0}, b = {0, 0, 0};
 8019e68:	2300      	movs	r3, #0
 8019e6a:	f887 3144 	strb.w	r3, [r7, #324]	@ 0x144
 8019e6e:	2300      	movs	r3, #0
 8019e70:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 8019e74:	2300      	movs	r3, #0
 8019e76:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8019e7a:	2300      	movs	r3, #0
 8019e7c:	f887 3138 	strb.w	r3, [r7, #312]	@ 0x138
 8019e80:	2300      	movs	r3, #0
 8019e82:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8019e86:	2300      	movs	r3, #0
 8019e88:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8019e8c:	2300      	movs	r3, #0
 8019e8e:	f887 312c 	strb.w	r3, [r7, #300]	@ 0x12c
 8019e92:	2300      	movs	r3, #0
 8019e94:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8019e98:	2300      	movs	r3, #0
 8019e9a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    mg_der_parse((uint8_t *) cert->sig.buf, cert->sig.len, &seq);
 8019e9e:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8019ea2:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8019ea6:	681b      	ldr	r3, [r3, #0]
 8019ea8:	6958      	ldr	r0, [r3, #20]
 8019eaa:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8019eae:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8019eb2:	681b      	ldr	r3, [r3, #0]
 8019eb4:	699b      	ldr	r3, [r3, #24]
 8019eb6:	f507 72a2 	add.w	r2, r7, #324	@ 0x144
 8019eba:	4619      	mov	r1, r3
 8019ebc:	f7fd fad0 	bl	8017460 <mg_der_parse>
    mg_der_next(&seq, &a);
 8019ec0:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8019ec4:	f507 73a2 	add.w	r3, r7, #324	@ 0x144
 8019ec8:	4611      	mov	r1, r2
 8019eca:	4618      	mov	r0, r3
 8019ecc:	f7fd fb28 	bl	8017520 <mg_der_next>
    mg_der_next(&seq, &b);
 8019ed0:	f507 7296 	add.w	r2, r7, #300	@ 0x12c
 8019ed4:	f507 73a2 	add.w	r3, r7, #324	@ 0x144
 8019ed8:	4611      	mov	r1, r2
 8019eda:	4618      	mov	r0, r3
 8019edc:	f7fd fb20 	bl	8017520 <mg_der_next>
    if (a.len == 0 || b.len == 0) {
 8019ee0:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8019ee4:	2b00      	cmp	r3, #0
 8019ee6:	d003      	beq.n	8019ef0 <mg_tls_verify_cert_signature+0xb4>
 8019ee8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8019eec:	2b00      	cmp	r3, #0
 8019eee:	d10f      	bne.n	8019f10 <mg_tls_verify_cert_signature+0xd4>
      MG_ERROR(("cert verification error"));
 8019ef0:	4b92      	ldr	r3, [pc, #584]	@ (801a13c <mg_tls_verify_cert_signature+0x300>)
 8019ef2:	681b      	ldr	r3, [r3, #0]
 8019ef4:	2b00      	cmp	r3, #0
 8019ef6:	dd09      	ble.n	8019f0c <mg_tls_verify_cert_signature+0xd0>
 8019ef8:	4b91      	ldr	r3, [pc, #580]	@ (801a140 <mg_tls_verify_cert_signature+0x304>)
 8019efa:	f642 62ef 	movw	r2, #12015	@ 0x2eef
 8019efe:	4991      	ldr	r1, [pc, #580]	@ (801a144 <mg_tls_verify_cert_signature+0x308>)
 8019f00:	2001      	movs	r0, #1
 8019f02:	f7f4 fccf 	bl	800e8a4 <mg_log_prefix>
 8019f06:	4890      	ldr	r0, [pc, #576]	@ (801a148 <mg_tls_verify_cert_signature+0x30c>)
 8019f08:	f7f4 fd1c 	bl	800e944 <mg_log>
      return 0;
 8019f0c:	2300      	movs	r3, #0
 8019f0e:	e110      	b.n	801a132 <mg_tls_verify_cert_signature+0x2f6>
    }
    if (issuer->pubkey.len == 64) {
 8019f10:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8019f14:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8019f18:	681b      	ldr	r3, [r3, #0]
 8019f1a:	691b      	ldr	r3, [r3, #16]
 8019f1c:	2b40      	cmp	r3, #64	@ 0x40
 8019f1e:	d15f      	bne.n	8019fe0 <mg_tls_verify_cert_signature+0x1a4>
      const uint32_t N = 32;
 8019f20:	2320      	movs	r3, #32
 8019f22:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
      if (a.len > N) a.value += (a.len - N), a.len = N;
 8019f26:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8019f2a:	f8d7 2150 	ldr.w	r2, [r7, #336]	@ 0x150
 8019f2e:	429a      	cmp	r2, r3
 8019f30:	d20d      	bcs.n	8019f4e <mg_tls_verify_cert_signature+0x112>
 8019f32:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 8019f36:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8019f3a:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8019f3e:	1acb      	subs	r3, r1, r3
 8019f40:	4413      	add	r3, r2
 8019f42:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8019f46:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8019f4a:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
      if (b.len > N) b.value += (b.len - N), b.len = N;
 8019f4e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8019f52:	f8d7 2150 	ldr.w	r2, [r7, #336]	@ 0x150
 8019f56:	429a      	cmp	r2, r3
 8019f58:	d20d      	bcs.n	8019f76 <mg_tls_verify_cert_signature+0x13a>
 8019f5a:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8019f5e:	f8d7 1130 	ldr.w	r1, [r7, #304]	@ 0x130
 8019f62:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8019f66:	1acb      	subs	r3, r1, r3
 8019f68:	4413      	add	r3, r2
 8019f6a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8019f6e:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8019f72:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
      memmove(sig, a.value, N);
 8019f76:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8019f7a:	f107 0308 	add.w	r3, r7, #8
 8019f7e:	f8d7 2150 	ldr.w	r2, [r7, #336]	@ 0x150
 8019f82:	4618      	mov	r0, r3
 8019f84:	f00d fb86 	bl	8027694 <memmove>
      memmove(sig + N, b.value, N);
 8019f88:	f107 0208 	add.w	r2, r7, #8
 8019f8c:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8019f90:	4413      	add	r3, r2
 8019f92:	f8d7 1134 	ldr.w	r1, [r7, #308]	@ 0x134
 8019f96:	f8d7 2150 	ldr.w	r2, [r7, #336]	@ 0x150
 8019f9a:	4618      	mov	r0, r3
 8019f9c:	f00d fb7a 	bl	8027694 <memmove>
      return mg_uecc_verify((uint8_t *) issuer->pubkey.buf, cert->tbshash,
 8019fa0:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8019fa4:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8019fa8:	681b      	ldr	r3, [r3, #0]
 8019faa:	68dc      	ldr	r4, [r3, #12]
 8019fac:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8019fb0:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8019fb4:	681b      	ldr	r3, [r3, #0]
 8019fb6:	f103 051c 	add.w	r5, r3, #28
                            (unsigned) cert->tbshashsz, sig,
 8019fba:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8019fbe:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8019fc2:	681b      	ldr	r3, [r3, #0]
 8019fc4:	6cde      	ldr	r6, [r3, #76]	@ 0x4c
      return mg_uecc_verify((uint8_t *) issuer->pubkey.buf, cert->tbshash,
 8019fc6:	f005 fba7 	bl	801f718 <mg_uecc_secp256r1>
 8019fca:	4602      	mov	r2, r0
 8019fcc:	f107 0308 	add.w	r3, r7, #8
 8019fd0:	9200      	str	r2, [sp, #0]
 8019fd2:	4632      	mov	r2, r6
 8019fd4:	4629      	mov	r1, r5
 8019fd6:	4620      	mov	r0, r4
 8019fd8:	f006 fd3a 	bl	8020a50 <mg_uecc_verify>
 8019fdc:	4603      	mov	r3, r0
 8019fde:	e0a8      	b.n	801a132 <mg_tls_verify_cert_signature+0x2f6>
                            mg_uecc_secp256r1());
    } else if (issuer->pubkey.len == 96) {
 8019fe0:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8019fe4:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8019fe8:	681b      	ldr	r3, [r3, #0]
 8019fea:	691b      	ldr	r3, [r3, #16]
 8019fec:	2b60      	cmp	r3, #96	@ 0x60
 8019fee:	d10f      	bne.n	801a010 <mg_tls_verify_cert_signature+0x1d4>
      MG_DEBUG(("ignore secp386 for now"));
 8019ff0:	4b52      	ldr	r3, [pc, #328]	@ (801a13c <mg_tls_verify_cert_signature+0x300>)
 8019ff2:	681b      	ldr	r3, [r3, #0]
 8019ff4:	2b02      	cmp	r3, #2
 8019ff6:	dd09      	ble.n	801a00c <mg_tls_verify_cert_signature+0x1d0>
 8019ff8:	4b51      	ldr	r3, [pc, #324]	@ (801a140 <mg_tls_verify_cert_signature+0x304>)
 8019ffa:	f642 62fc 	movw	r2, #12028	@ 0x2efc
 8019ffe:	4951      	ldr	r1, [pc, #324]	@ (801a144 <mg_tls_verify_cert_signature+0x308>)
 801a000:	2003      	movs	r0, #3
 801a002:	f7f4 fc4f 	bl	800e8a4 <mg_log_prefix>
 801a006:	4851      	ldr	r0, [pc, #324]	@ (801a14c <mg_tls_verify_cert_signature+0x310>)
 801a008:	f7f4 fc9c 	bl	800e944 <mg_log>
      return 1;
 801a00c:	2301      	movs	r3, #1
 801a00e:	e090      	b.n	801a132 <mg_tls_verify_cert_signature+0x2f6>
    } else {
      MG_ERROR(("unsupported public key length: %d", issuer->pubkey.len));
 801a010:	4b4a      	ldr	r3, [pc, #296]	@ (801a13c <mg_tls_verify_cert_signature+0x300>)
 801a012:	681b      	ldr	r3, [r3, #0]
 801a014:	2b00      	cmp	r3, #0
 801a016:	dd10      	ble.n	801a03a <mg_tls_verify_cert_signature+0x1fe>
 801a018:	4b49      	ldr	r3, [pc, #292]	@ (801a140 <mg_tls_verify_cert_signature+0x304>)
 801a01a:	f642 62ff 	movw	r2, #12031	@ 0x2eff
 801a01e:	4949      	ldr	r1, [pc, #292]	@ (801a144 <mg_tls_verify_cert_signature+0x308>)
 801a020:	2001      	movs	r0, #1
 801a022:	f7f4 fc3f 	bl	800e8a4 <mg_log_prefix>
 801a026:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 801a02a:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 801a02e:	681b      	ldr	r3, [r3, #0]
 801a030:	691b      	ldr	r3, [r3, #16]
 801a032:	4619      	mov	r1, r3
 801a034:	4846      	ldr	r0, [pc, #280]	@ (801a150 <mg_tls_verify_cert_signature+0x314>)
 801a036:	f7f4 fc85 	bl	800e944 <mg_log>
      return 0;
 801a03a:	2300      	movs	r3, #0
 801a03c:	e079      	b.n	801a132 <mg_tls_verify_cert_signature+0x2f6>
    }
  } else {
    int r;
    uint8_t sig2[256];  // 2048 bits
    struct mg_der_tlv seq, modulus, exponent;
    if (mg_der_parse((uint8_t *) issuer->pubkey.buf, issuer->pubkey.len,
 801a03e:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 801a042:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 801a046:	681b      	ldr	r3, [r3, #0]
 801a048:	68d8      	ldr	r0, [r3, #12]
 801a04a:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 801a04e:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 801a052:	681b      	ldr	r3, [r3, #0]
 801a054:	691b      	ldr	r3, [r3, #16]
 801a056:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 801a05a:	4619      	mov	r1, r3
 801a05c:	f7fd fa00 	bl	8017460 <mg_der_parse>
 801a060:	4603      	mov	r3, r0
 801a062:	2b00      	cmp	r3, #0
 801a064:	dd1d      	ble.n	801a0a2 <mg_tls_verify_cert_signature+0x266>
                     &seq) <= 0 ||
        mg_der_next(&seq, &modulus) <= 0 || modulus.type != 2 ||
 801a066:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 801a06a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801a06e:	4611      	mov	r1, r2
 801a070:	4618      	mov	r0, r3
 801a072:	f7fd fa55 	bl	8017520 <mg_der_next>
 801a076:	4603      	mov	r3, r0
                     &seq) <= 0 ||
 801a078:	2b00      	cmp	r3, #0
 801a07a:	dd12      	ble.n	801a0a2 <mg_tls_verify_cert_signature+0x266>
        mg_der_next(&seq, &modulus) <= 0 || modulus.type != 2 ||
 801a07c:	f897 3114 	ldrb.w	r3, [r7, #276]	@ 0x114
 801a080:	2b02      	cmp	r3, #2
 801a082:	d10e      	bne.n	801a0a2 <mg_tls_verify_cert_signature+0x266>
        mg_der_next(&seq, &exponent) <= 0 || exponent.type != 2) {
 801a084:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 801a088:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801a08c:	4611      	mov	r1, r2
 801a08e:	4618      	mov	r0, r3
 801a090:	f7fd fa46 	bl	8017520 <mg_der_next>
 801a094:	4603      	mov	r3, r0
        mg_der_next(&seq, &modulus) <= 0 || modulus.type != 2 ||
 801a096:	2b00      	cmp	r3, #0
 801a098:	dd03      	ble.n	801a0a2 <mg_tls_verify_cert_signature+0x266>
        mg_der_next(&seq, &exponent) <= 0 || exponent.type != 2) {
 801a09a:	f897 3108 	ldrb.w	r3, [r7, #264]	@ 0x108
 801a09e:	2b02      	cmp	r3, #2
 801a0a0:	d002      	beq.n	801a0a8 <mg_tls_verify_cert_signature+0x26c>
      return -1;
 801a0a2:	f04f 33ff 	mov.w	r3, #4294967295
 801a0a6:	e044      	b.n	801a132 <mg_tls_verify_cert_signature+0x2f6>
    }
    mg_rsa_mod_pow(modulus.value, modulus.len, exponent.value, exponent.len,
 801a0a8:	f8d7 011c 	ldr.w	r0, [r7, #284]	@ 0x11c
 801a0ac:	f8d7 4118 	ldr.w	r4, [r7, #280]	@ 0x118
 801a0b0:	f8d7 5110 	ldr.w	r5, [r7, #272]	@ 0x110
 801a0b4:	f8d7 610c 	ldr.w	r6, [r7, #268]	@ 0x10c
                   (uint8_t *) cert->sig.buf, cert->sig.len, sig2,
 801a0b8:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 801a0bc:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 801a0c0:	681b      	ldr	r3, [r3, #0]
 801a0c2:	695b      	ldr	r3, [r3, #20]
 801a0c4:	f507 72ac 	add.w	r2, r7, #344	@ 0x158
 801a0c8:	f5a2 72aa 	sub.w	r2, r2, #340	@ 0x154
 801a0cc:	6812      	ldr	r2, [r2, #0]
 801a0ce:	6992      	ldr	r2, [r2, #24]
    mg_rsa_mod_pow(modulus.value, modulus.len, exponent.value, exponent.len,
 801a0d0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801a0d4:	9103      	str	r1, [sp, #12]
 801a0d6:	f107 0108 	add.w	r1, r7, #8
 801a0da:	9102      	str	r1, [sp, #8]
 801a0dc:	9201      	str	r2, [sp, #4]
 801a0de:	9300      	str	r3, [sp, #0]
 801a0e0:	4633      	mov	r3, r6
 801a0e2:	462a      	mov	r2, r5
 801a0e4:	4621      	mov	r1, r4
 801a0e6:	f004 fae8 	bl	801e6ba <mg_rsa_mod_pow>
                   sizeof(sig2));

    r = memcmp(sig2 + sizeof(sig2) - cert->tbshashsz, cert->tbshash,
 801a0ea:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 801a0ee:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 801a0f2:	681b      	ldr	r3, [r3, #0]
 801a0f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801a0f6:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 801a0fa:	f107 0208 	add.w	r2, r7, #8
 801a0fe:	18d0      	adds	r0, r2, r3
 801a100:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 801a104:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 801a108:	681b      	ldr	r3, [r3, #0]
 801a10a:	f103 011c 	add.w	r1, r3, #28
               cert->tbshashsz);
 801a10e:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 801a112:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 801a116:	681b      	ldr	r3, [r3, #0]
 801a118:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    r = memcmp(sig2 + sizeof(sig2) - cert->tbshashsz, cert->tbshash,
 801a11a:	461a      	mov	r2, r3
 801a11c:	f00d faaa 	bl	8027674 <memcmp>
 801a120:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154
    return r == 0;
 801a124:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 801a128:	2b00      	cmp	r3, #0
 801a12a:	bf0c      	ite	eq
 801a12c:	2301      	moveq	r3, #1
 801a12e:	2300      	movne	r3, #0
 801a130:	b2db      	uxtb	r3, r3
  }
}
 801a132:	4618      	mov	r0, r3
 801a134:	f507 77ae 	add.w	r7, r7, #348	@ 0x15c
 801a138:	46bd      	mov	sp, r7
 801a13a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a13c:	24000258 	.word	0x24000258
 801a140:	0802dad8 	.word	0x0802dad8
 801a144:	08029c3c 	.word	0x08029c3c
 801a148:	0802bd14 	.word	0x0802bd14
 801a14c:	0802bd2c 	.word	0x0802bd2c
 801a150:	0802bd44 	.word	0x0802bd44

0801a154 <mg_tls_client_recv_cert>:

static int mg_tls_client_recv_cert(struct mg_connection *c) {
 801a154:	b580      	push	{r7, lr}
 801a156:	f5ad 7d44 	sub.w	sp, sp, #784	@ 0x310
 801a15a:	af00      	add	r7, sp, #0
 801a15c:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 801a160:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 801a164:	6018      	str	r0, [r3, #0]
  int subj_match = 0;
 801a166:	2300      	movs	r3, #0
 801a168:	f8c7 3300 	str.w	r3, [r7, #768]	@ 0x300
  struct tls_data *tls = (struct tls_data *) c->tls;
 801a16c:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 801a170:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 801a174:	681b      	ldr	r3, [r3, #0]
 801a176:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801a17a:	f8c7 32fc 	str.w	r3, [r7, #764]	@ 0x2fc
  unsigned char *recv_buf;
  (void) subj_match;

  if (mg_tls_recv_record(c) < 0) {
 801a17e:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 801a182:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 801a186:	6818      	ldr	r0, [r3, #0]
 801a188:	f7fd ff30 	bl	8017fec <mg_tls_recv_record>
 801a18c:	4603      	mov	r3, r0
 801a18e:	2b00      	cmp	r3, #0
 801a190:	da02      	bge.n	801a198 <mg_tls_client_recv_cert+0x44>
    return -1;
 801a192:	f04f 33ff 	mov.w	r3, #4294967295
 801a196:	e24a      	b.n	801a62e <mg_tls_client_recv_cert+0x4da>
  }

  recv_buf = &c->rtls.buf[tls->recv_offset];
 801a198:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 801a19c:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 801a1a0:	681b      	ldr	r3, [r3, #0]
 801a1a2:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 801a1a4:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 801a1a8:	695b      	ldr	r3, [r3, #20]
 801a1aa:	4413      	add	r3, r2
 801a1ac:	f8c7 32f8 	str.w	r3, [r7, #760]	@ 0x2f8

  if (recv_buf[0] == MG_TLS_CERTIFICATE_REQUEST) {
 801a1b0:	f8d7 32f8 	ldr.w	r3, [r7, #760]	@ 0x2f8
 801a1b4:	781b      	ldrb	r3, [r3, #0]
 801a1b6:	2b0d      	cmp	r3, #13
 801a1b8:	d11c      	bne.n	801a1f4 <mg_tls_client_recv_cert+0xa0>
    MG_VERBOSE(("got certificate request"));
 801a1ba:	4bcb      	ldr	r3, [pc, #812]	@ (801a4e8 <mg_tls_client_recv_cert+0x394>)
 801a1bc:	681b      	ldr	r3, [r3, #0]
 801a1be:	2b03      	cmp	r3, #3
 801a1c0:	dd09      	ble.n	801a1d6 <mg_tls_client_recv_cert+0x82>
 801a1c2:	4bca      	ldr	r3, [pc, #808]	@ (801a4ec <mg_tls_client_recv_cert+0x398>)
 801a1c4:	f642 7223 	movw	r2, #12067	@ 0x2f23
 801a1c8:	49c9      	ldr	r1, [pc, #804]	@ (801a4f0 <mg_tls_client_recv_cert+0x39c>)
 801a1ca:	2004      	movs	r0, #4
 801a1cc:	f7f4 fb6a 	bl	800e8a4 <mg_log_prefix>
 801a1d0:	48c8      	ldr	r0, [pc, #800]	@ (801a4f4 <mg_tls_client_recv_cert+0x3a0>)
 801a1d2:	f7f4 fbb7 	bl	800e944 <mg_log>
    mg_tls_drop_message(c);
 801a1d6:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 801a1da:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 801a1de:	6818      	ldr	r0, [r3, #0]
 801a1e0:	f7fd fab8 	bl	8017754 <mg_tls_drop_message>
    tls->cert_requested = 1;
 801a1e4:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 801a1e8:	2201      	movs	r2, #1
 801a1ea:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
    return -1;
 801a1ee:	f04f 33ff 	mov.w	r3, #4294967295
 801a1f2:	e21c      	b.n	801a62e <mg_tls_client_recv_cert+0x4da>
  }

  if (recv_buf[0] != MG_TLS_CERTIFICATE) {
 801a1f4:	f8d7 32f8 	ldr.w	r3, [r7, #760]	@ 0x2f8
 801a1f8:	781b      	ldrb	r3, [r3, #0]
 801a1fa:	2b0b      	cmp	r3, #11
 801a1fc:	d00e      	beq.n	801a21c <mg_tls_client_recv_cert+0xc8>
    mg_error(c, "expected server certificate but got msg 0x%02x", recv_buf[0]);
 801a1fe:	f8d7 32f8 	ldr.w	r3, [r7, #760]	@ 0x2f8
 801a202:	781b      	ldrb	r3, [r3, #0]
 801a204:	461a      	mov	r2, r3
 801a206:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 801a20a:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 801a20e:	49ba      	ldr	r1, [pc, #744]	@ (801a4f8 <mg_tls_client_recv_cert+0x3a4>)
 801a210:	6818      	ldr	r0, [r3, #0]
 801a212:	f7ee fccf 	bl	8008bb4 <mg_error>
    return -1;
 801a216:	f04f 33ff 	mov.w	r3, #4294967295
 801a21a:	e208      	b.n	801a62e <mg_tls_client_recv_cert+0x4da>
  }

  if (tls->recv_len < 11) {
 801a21c:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 801a220:	699b      	ldr	r3, [r3, #24]
 801a222:	2b0a      	cmp	r3, #10
 801a224:	d80a      	bhi.n	801a23c <mg_tls_client_recv_cert+0xe8>
    mg_error(c, "certificate list too short");
 801a226:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 801a22a:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 801a22e:	49b3      	ldr	r1, [pc, #716]	@ (801a4fc <mg_tls_client_recv_cert+0x3a8>)
 801a230:	6818      	ldr	r0, [r3, #0]
 801a232:	f7ee fcbf 	bl	8008bb4 <mg_error>
    return -1;
 801a236:	f04f 33ff 	mov.w	r3, #4294967295
 801a23a:	e1f8      	b.n	801a62e <mg_tls_client_recv_cert+0x4da>
  }

  uint32_t full_cert_chain_len = MG_LOAD_BE24(recv_buf + 1);
 801a23c:	f8d7 32f8 	ldr.w	r3, [r7, #760]	@ 0x2f8
 801a240:	3301      	adds	r3, #1
 801a242:	781b      	ldrb	r3, [r3, #0]
 801a244:	041a      	lsls	r2, r3, #16
 801a246:	f8d7 32f8 	ldr.w	r3, [r7, #760]	@ 0x2f8
 801a24a:	3302      	adds	r3, #2
 801a24c:	781b      	ldrb	r3, [r3, #0]
 801a24e:	021b      	lsls	r3, r3, #8
 801a250:	4313      	orrs	r3, r2
 801a252:	f8d7 22f8 	ldr.w	r2, [r7, #760]	@ 0x2f8
 801a256:	3203      	adds	r2, #3
 801a258:	7812      	ldrb	r2, [r2, #0]
 801a25a:	4313      	orrs	r3, r2
 801a25c:	f8c7 32f4 	str.w	r3, [r7, #756]	@ 0x2f4
  uint32_t cert_chain_len = MG_LOAD_BE24(recv_buf + 5);
 801a260:	f8d7 32f8 	ldr.w	r3, [r7, #760]	@ 0x2f8
 801a264:	3305      	adds	r3, #5
 801a266:	781b      	ldrb	r3, [r3, #0]
 801a268:	041a      	lsls	r2, r3, #16
 801a26a:	f8d7 32f8 	ldr.w	r3, [r7, #760]	@ 0x2f8
 801a26e:	3306      	adds	r3, #6
 801a270:	781b      	ldrb	r3, [r3, #0]
 801a272:	021b      	lsls	r3, r3, #8
 801a274:	4313      	orrs	r3, r2
 801a276:	f8d7 22f8 	ldr.w	r2, [r7, #760]	@ 0x2f8
 801a27a:	3207      	adds	r2, #7
 801a27c:	7812      	ldrb	r2, [r2, #0]
 801a27e:	4313      	orrs	r3, r2
 801a280:	f8c7 32f0 	str.w	r3, [r7, #752]	@ 0x2f0
  if (cert_chain_len != full_cert_chain_len - 4) {
 801a284:	f8d7 32f4 	ldr.w	r3, [r7, #756]	@ 0x2f4
 801a288:	3b04      	subs	r3, #4
 801a28a:	f8d7 22f0 	ldr.w	r2, [r7, #752]	@ 0x2f0
 801a28e:	429a      	cmp	r2, r3
 801a290:	d01c      	beq.n	801a2cc <mg_tls_client_recv_cert+0x178>
    MG_ERROR(("full chain length: %d, chain length: %d", full_cert_chain_len,
 801a292:	4b95      	ldr	r3, [pc, #596]	@ (801a4e8 <mg_tls_client_recv_cert+0x394>)
 801a294:	681b      	ldr	r3, [r3, #0]
 801a296:	2b00      	cmp	r3, #0
 801a298:	dd0d      	ble.n	801a2b6 <mg_tls_client_recv_cert+0x162>
 801a29a:	4b94      	ldr	r3, [pc, #592]	@ (801a4ec <mg_tls_client_recv_cert+0x398>)
 801a29c:	f642 7236 	movw	r2, #12086	@ 0x2f36
 801a2a0:	4993      	ldr	r1, [pc, #588]	@ (801a4f0 <mg_tls_client_recv_cert+0x39c>)
 801a2a2:	2001      	movs	r0, #1
 801a2a4:	f7f4 fafe 	bl	800e8a4 <mg_log_prefix>
 801a2a8:	f8d7 22f0 	ldr.w	r2, [r7, #752]	@ 0x2f0
 801a2ac:	f8d7 12f4 	ldr.w	r1, [r7, #756]	@ 0x2f4
 801a2b0:	4893      	ldr	r0, [pc, #588]	@ (801a500 <mg_tls_client_recv_cert+0x3ac>)
 801a2b2:	f7f4 fb47 	bl	800e944 <mg_log>
              cert_chain_len));
    mg_error(c, "certificate chain length mismatch");
 801a2b6:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 801a2ba:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 801a2be:	4991      	ldr	r1, [pc, #580]	@ (801a504 <mg_tls_client_recv_cert+0x3b0>)
 801a2c0:	6818      	ldr	r0, [r3, #0]
 801a2c2:	f7ee fc77 	bl	8008bb4 <mg_error>
    return -1;
 801a2c6:	f04f 33ff 	mov.w	r3, #4294967295
 801a2ca:	e1b0      	b.n	801a62e <mg_tls_client_recv_cert+0x4da>
  }

  // Normally, there are 2-3 certs in a chain
  struct mg_tls_cert certs[8];
  int certnum = 0;
 801a2cc:	2300      	movs	r3, #0
 801a2ce:	f8c7 330c 	str.w	r3, [r7, #780]	@ 0x30c
  uint8_t *p = recv_buf + 8;
 801a2d2:	f8d7 32f8 	ldr.w	r3, [r7, #760]	@ 0x2f8
 801a2d6:	3308      	adds	r3, #8
 801a2d8:	f8c7 3308 	str.w	r3, [r7, #776]	@ 0x308
  // uint8_t *endp = recv_buf + tls->recv_len;
  uint8_t *endp = recv_buf + cert_chain_len;
 801a2dc:	f8d7 22f8 	ldr.w	r2, [r7, #760]	@ 0x2f8
 801a2e0:	f8d7 32f0 	ldr.w	r3, [r7, #752]	@ 0x2f0
 801a2e4:	4413      	add	r3, r2
 801a2e6:	f8c7 32ec 	str.w	r3, [r7, #748]	@ 0x2ec

  int found_ca = 0;
 801a2ea:	2300      	movs	r3, #0
 801a2ec:	f8c7 3304 	str.w	r3, [r7, #772]	@ 0x304
  struct mg_tls_cert ca;

  memset(certs, 0, sizeof(certs));
 801a2f0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 801a2f4:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801a2f8:	2100      	movs	r1, #0
 801a2fa:	4618      	mov	r0, r3
 801a2fc:	f00d f9e4 	bl	80276c8 <memset>
  memset(&ca, 0, sizeof(ca));
 801a300:	f107 030c 	add.w	r3, r7, #12
 801a304:	2250      	movs	r2, #80	@ 0x50
 801a306:	2100      	movs	r1, #0
 801a308:	4618      	mov	r0, r3
 801a30a:	f00d f9dd 	bl	80276c8 <memset>

  if (tls->ca_der.len > 0) {
 801a30e:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 801a312:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 801a316:	2b00      	cmp	r3, #0
 801a318:	f000 8134 	beq.w	801a584 <mg_tls_client_recv_cert+0x430>
    if (mg_tls_parse_cert_der(tls->ca_der.buf, tls->ca_der.len, &ca) < 0) {
 801a31c:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 801a320:	f8d3 0120 	ldr.w	r0, [r3, #288]	@ 0x120
 801a324:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 801a328:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 801a32c:	f107 020c 	add.w	r2, r7, #12
 801a330:	4619      	mov	r1, r3
 801a332:	f7ff f94f 	bl	80195d4 <mg_tls_parse_cert_der>
 801a336:	4603      	mov	r3, r0
 801a338:	2b00      	cmp	r3, #0
 801a33a:	da0a      	bge.n	801a352 <mg_tls_client_recv_cert+0x1fe>
      mg_error(c, "failed to parse CA certificate");
 801a33c:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 801a340:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 801a344:	4970      	ldr	r1, [pc, #448]	@ (801a508 <mg_tls_client_recv_cert+0x3b4>)
 801a346:	6818      	ldr	r0, [r3, #0]
 801a348:	f7ee fc34 	bl	8008bb4 <mg_error>
      return -1;
 801a34c:	f04f 33ff 	mov.w	r3, #4294967295
 801a350:	e16d      	b.n	801a62e <mg_tls_client_recv_cert+0x4da>
    }
    MG_VERBOSE(("CA serial: %M", mg_print_hex, ca.sn.len, ca.sn.buf));
 801a352:	4b65      	ldr	r3, [pc, #404]	@ (801a4e8 <mg_tls_client_recv_cert+0x394>)
 801a354:	681b      	ldr	r3, [r3, #0]
 801a356:	2b03      	cmp	r3, #3
 801a358:	f340 8114 	ble.w	801a584 <mg_tls_client_recv_cert+0x430>
 801a35c:	4b63      	ldr	r3, [pc, #396]	@ (801a4ec <mg_tls_client_recv_cert+0x398>)
 801a35e:	f642 724e 	movw	r2, #12110	@ 0x2f4e
 801a362:	4963      	ldr	r1, [pc, #396]	@ (801a4f0 <mg_tls_client_recv_cert+0x39c>)
 801a364:	2004      	movs	r0, #4
 801a366:	f7f4 fa9d 	bl	800e8a4 <mg_log_prefix>
 801a36a:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 801a36e:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 801a372:	689a      	ldr	r2, [r3, #8]
 801a374:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 801a378:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 801a37c:	685b      	ldr	r3, [r3, #4]
 801a37e:	4963      	ldr	r1, [pc, #396]	@ (801a50c <mg_tls_client_recv_cert+0x3b8>)
 801a380:	4863      	ldr	r0, [pc, #396]	@ (801a510 <mg_tls_client_recv_cert+0x3bc>)
 801a382:	f7f4 fadf 	bl	800e944 <mg_log>
  }

  while (p < endp) {
 801a386:	e0fd      	b.n	801a584 <mg_tls_client_recv_cert+0x430>
    struct mg_tls_cert *ci = &certs[certnum++];
 801a388:	f8d7 230c 	ldr.w	r2, [r7, #780]	@ 0x30c
 801a38c:	1c53      	adds	r3, r2, #1
 801a38e:	f8c7 330c 	str.w	r3, [r7, #780]	@ 0x30c
 801a392:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 801a396:	4613      	mov	r3, r2
 801a398:	009b      	lsls	r3, r3, #2
 801a39a:	4413      	add	r3, r2
 801a39c:	011b      	lsls	r3, r3, #4
 801a39e:	440b      	add	r3, r1
 801a3a0:	f8c7 32e8 	str.w	r3, [r7, #744]	@ 0x2e8
    uint32_t certsz = MG_LOAD_BE24(p);
 801a3a4:	f8d7 3308 	ldr.w	r3, [r7, #776]	@ 0x308
 801a3a8:	781b      	ldrb	r3, [r3, #0]
 801a3aa:	041a      	lsls	r2, r3, #16
 801a3ac:	f8d7 3308 	ldr.w	r3, [r7, #776]	@ 0x308
 801a3b0:	3301      	adds	r3, #1
 801a3b2:	781b      	ldrb	r3, [r3, #0]
 801a3b4:	021b      	lsls	r3, r3, #8
 801a3b6:	4313      	orrs	r3, r2
 801a3b8:	f8d7 2308 	ldr.w	r2, [r7, #776]	@ 0x308
 801a3bc:	3202      	adds	r2, #2
 801a3be:	7812      	ldrb	r2, [r2, #0]
 801a3c0:	4313      	orrs	r3, r2
 801a3c2:	f8c7 32e4 	str.w	r3, [r7, #740]	@ 0x2e4
    uint8_t *cert = p + 3;
 801a3c6:	f8d7 3308 	ldr.w	r3, [r7, #776]	@ 0x308
 801a3ca:	3303      	adds	r3, #3
 801a3cc:	f8c7 32e0 	str.w	r3, [r7, #736]	@ 0x2e0
    uint16_t certext = MG_LOAD_BE16(cert + certsz);
 801a3d0:	f8d7 22e0 	ldr.w	r2, [r7, #736]	@ 0x2e0
 801a3d4:	f8d7 32e4 	ldr.w	r3, [r7, #740]	@ 0x2e4
 801a3d8:	4413      	add	r3, r2
 801a3da:	781b      	ldrb	r3, [r3, #0]
 801a3dc:	b21b      	sxth	r3, r3
 801a3de:	021b      	lsls	r3, r3, #8
 801a3e0:	b21a      	sxth	r2, r3
 801a3e2:	f8d7 32e4 	ldr.w	r3, [r7, #740]	@ 0x2e4
 801a3e6:	3301      	adds	r3, #1
 801a3e8:	f8d7 12e0 	ldr.w	r1, [r7, #736]	@ 0x2e0
 801a3ec:	440b      	add	r3, r1
 801a3ee:	781b      	ldrb	r3, [r3, #0]
 801a3f0:	b21b      	sxth	r3, r3
 801a3f2:	4313      	orrs	r3, r2
 801a3f4:	b21b      	sxth	r3, r3
 801a3f6:	f8a7 32de 	strh.w	r3, [r7, #734]	@ 0x2de
    if (certext != 0) {
 801a3fa:	f8b7 32de 	ldrh.w	r3, [r7, #734]	@ 0x2de
 801a3fe:	2b00      	cmp	r3, #0
 801a400:	d00a      	beq.n	801a418 <mg_tls_client_recv_cert+0x2c4>
      mg_error(c, "certificate extensions are not supported");
 801a402:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 801a406:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 801a40a:	4942      	ldr	r1, [pc, #264]	@ (801a514 <mg_tls_client_recv_cert+0x3c0>)
 801a40c:	6818      	ldr	r0, [r3, #0]
 801a40e:	f7ee fbd1 	bl	8008bb4 <mg_error>
      return -1;
 801a412:	f04f 33ff 	mov.w	r3, #4294967295
 801a416:	e10a      	b.n	801a62e <mg_tls_client_recv_cert+0x4da>
    }
    p = cert + certsz + 2;
 801a418:	f8d7 32e4 	ldr.w	r3, [r7, #740]	@ 0x2e4
 801a41c:	3302      	adds	r3, #2
 801a41e:	f8d7 22e0 	ldr.w	r2, [r7, #736]	@ 0x2e0
 801a422:	4413      	add	r3, r2
 801a424:	f8c7 3308 	str.w	r3, [r7, #776]	@ 0x308

    if (mg_tls_parse_cert_der(cert, certsz, ci) < 0) {
 801a428:	f8d7 22e8 	ldr.w	r2, [r7, #744]	@ 0x2e8
 801a42c:	f8d7 12e4 	ldr.w	r1, [r7, #740]	@ 0x2e4
 801a430:	f8d7 02e0 	ldr.w	r0, [r7, #736]	@ 0x2e0
 801a434:	f7ff f8ce 	bl	80195d4 <mg_tls_parse_cert_der>
 801a438:	4603      	mov	r3, r0
 801a43a:	2b00      	cmp	r3, #0
 801a43c:	da0a      	bge.n	801a454 <mg_tls_client_recv_cert+0x300>
      mg_error(c, "failed to parse certificate");
 801a43e:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 801a442:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 801a446:	4934      	ldr	r1, [pc, #208]	@ (801a518 <mg_tls_client_recv_cert+0x3c4>)
 801a448:	6818      	ldr	r0, [r3, #0]
 801a44a:	f7ee fbb3 	bl	8008bb4 <mg_error>
      return -1;
 801a44e:	f04f 33ff 	mov.w	r3, #4294967295
 801a452:	e0ec      	b.n	801a62e <mg_tls_client_recv_cert+0x4da>
    }

    if (ci == certs) {
 801a454:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 801a458:	f8d7 22e8 	ldr.w	r2, [r7, #744]	@ 0x2e8
 801a45c:	429a      	cmp	r2, r3
 801a45e:	d12d      	bne.n	801a4bc <mg_tls_client_recv_cert+0x368>
      // First certificate in the chain is peer cert, check SAN and store
      // public key for further CertVerify step
      if (mg_tls_verify_cert_san(cert, certsz, tls->hostname) <= 0) {
 801a460:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 801a464:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 801a468:	461a      	mov	r2, r3
 801a46a:	f8d7 12e4 	ldr.w	r1, [r7, #740]	@ 0x2e4
 801a46e:	f8d7 02e0 	ldr.w	r0, [r7, #736]	@ 0x2e0
 801a472:	f7ff fc63 	bl	8019d3c <mg_tls_verify_cert_san>
 801a476:	4603      	mov	r3, r0
 801a478:	2b00      	cmp	r3, #0
 801a47a:	dc0a      	bgt.n	801a492 <mg_tls_client_recv_cert+0x33e>
        mg_error(c, "failed to verify hostname");
 801a47c:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 801a480:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 801a484:	4925      	ldr	r1, [pc, #148]	@ (801a51c <mg_tls_client_recv_cert+0x3c8>)
 801a486:	6818      	ldr	r0, [r3, #0]
 801a488:	f7ee fb94 	bl	8008bb4 <mg_error>
        return -1;
 801a48c:	f04f 33ff 	mov.w	r3, #4294967295
 801a490:	e0cd      	b.n	801a62e <mg_tls_client_recv_cert+0x4da>
      }
      memmove(tls->pubkey, ci->pubkey.buf, ci->pubkey.len);
 801a492:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 801a496:	f503 7013 	add.w	r0, r3, #588	@ 0x24c
 801a49a:	f8d7 32e8 	ldr.w	r3, [r7, #744]	@ 0x2e8
 801a49e:	68d9      	ldr	r1, [r3, #12]
 801a4a0:	f8d7 32e8 	ldr.w	r3, [r7, #744]	@ 0x2e8
 801a4a4:	691b      	ldr	r3, [r3, #16]
 801a4a6:	461a      	mov	r2, r3
 801a4a8:	f00d f8f4 	bl	8027694 <memmove>
      tls->pubkeysz = ci->pubkey.len;
 801a4ac:	f8d7 32e8 	ldr.w	r3, [r7, #744]	@ 0x2e8
 801a4b0:	691a      	ldr	r2, [r3, #16]
 801a4b2:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 801a4b6:	f8c3 245c 	str.w	r2, [r3, #1116]	@ 0x45c
 801a4ba:	e033      	b.n	801a524 <mg_tls_client_recv_cert+0x3d0>
    } else {
      if (!mg_tls_verify_cert_signature(ci - 1, ci)) {
 801a4bc:	f8d7 32e8 	ldr.w	r3, [r7, #744]	@ 0x2e8
 801a4c0:	3b50      	subs	r3, #80	@ 0x50
 801a4c2:	f8d7 12e8 	ldr.w	r1, [r7, #744]	@ 0x2e8
 801a4c6:	4618      	mov	r0, r3
 801a4c8:	f7ff fcb8 	bl	8019e3c <mg_tls_verify_cert_signature>
 801a4cc:	4603      	mov	r3, r0
 801a4ce:	2b00      	cmp	r3, #0
 801a4d0:	d128      	bne.n	801a524 <mg_tls_client_recv_cert+0x3d0>
        mg_error(c, "failed to verify certificate chain");
 801a4d2:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 801a4d6:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 801a4da:	4911      	ldr	r1, [pc, #68]	@ (801a520 <mg_tls_client_recv_cert+0x3cc>)
 801a4dc:	6818      	ldr	r0, [r3, #0]
 801a4de:	f7ee fb69 	bl	8008bb4 <mg_error>
        return -1;
 801a4e2:	f04f 33ff 	mov.w	r3, #4294967295
 801a4e6:	e0a2      	b.n	801a62e <mg_tls_client_recv_cert+0x4da>
 801a4e8:	24000258 	.word	0x24000258
 801a4ec:	0802daf8 	.word	0x0802daf8
 801a4f0:	08029c3c 	.word	0x08029c3c
 801a4f4:	0802bd68 	.word	0x0802bd68
 801a4f8:	0802bd80 	.word	0x0802bd80
 801a4fc:	0802bdb0 	.word	0x0802bdb0
 801a500:	0802bdcc 	.word	0x0802bdcc
 801a504:	0802bdf4 	.word	0x0802bdf4
 801a508:	0802be18 	.word	0x0802be18
 801a50c:	08013521 	.word	0x08013521
 801a510:	0802be38 	.word	0x0802be38
 801a514:	0802be48 	.word	0x0802be48
 801a518:	0802be74 	.word	0x0802be74
 801a51c:	0802be90 	.word	0x0802be90
 801a520:	0802beac 	.word	0x0802beac
      }
    }

    if (ca.pubkey.len == ci->pubkey.len &&
 801a524:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 801a528:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 801a52c:	691a      	ldr	r2, [r3, #16]
 801a52e:	f8d7 32e8 	ldr.w	r3, [r7, #744]	@ 0x2e8
 801a532:	691b      	ldr	r3, [r3, #16]
 801a534:	429a      	cmp	r2, r3
 801a536:	d116      	bne.n	801a566 <mg_tls_client_recv_cert+0x412>
        memcmp(ca.pubkey.buf, ci->pubkey.buf, ca.pubkey.len) == 0) {
 801a538:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 801a53c:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 801a540:	68d8      	ldr	r0, [r3, #12]
 801a542:	f8d7 32e8 	ldr.w	r3, [r7, #744]	@ 0x2e8
 801a546:	68d9      	ldr	r1, [r3, #12]
 801a548:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 801a54c:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 801a550:	691b      	ldr	r3, [r3, #16]
 801a552:	461a      	mov	r2, r3
 801a554:	f00d f88e 	bl	8027674 <memcmp>
 801a558:	4603      	mov	r3, r0
    if (ca.pubkey.len == ci->pubkey.len &&
 801a55a:	2b00      	cmp	r3, #0
 801a55c:	d103      	bne.n	801a566 <mg_tls_client_recv_cert+0x412>
      found_ca = 1;
 801a55e:	2301      	movs	r3, #1
 801a560:	f8c7 3304 	str.w	r3, [r7, #772]	@ 0x304
      break;
 801a564:	e015      	b.n	801a592 <mg_tls_client_recv_cert+0x43e>
    }

    if (certnum == sizeof(certs) / sizeof(certs[0]) - 1) {
 801a566:	f8d7 330c 	ldr.w	r3, [r7, #780]	@ 0x30c
 801a56a:	2b07      	cmp	r3, #7
 801a56c:	d10a      	bne.n	801a584 <mg_tls_client_recv_cert+0x430>
      mg_error(c, "too many certificates in the chain");
 801a56e:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 801a572:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 801a576:	4930      	ldr	r1, [pc, #192]	@ (801a638 <mg_tls_client_recv_cert+0x4e4>)
 801a578:	6818      	ldr	r0, [r3, #0]
 801a57a:	f7ee fb1b 	bl	8008bb4 <mg_error>
      return -1;
 801a57e:	f04f 33ff 	mov.w	r3, #4294967295
 801a582:	e054      	b.n	801a62e <mg_tls_client_recv_cert+0x4da>
  while (p < endp) {
 801a584:	f8d7 2308 	ldr.w	r2, [r7, #776]	@ 0x308
 801a588:	f8d7 32ec 	ldr.w	r3, [r7, #748]	@ 0x2ec
 801a58c:	429a      	cmp	r2, r3
 801a58e:	f4ff aefb 	bcc.w	801a388 <mg_tls_client_recv_cert+0x234>
    }
  }

  if (!found_ca && tls->ca_der.len > 0) {
 801a592:	f8d7 3304 	ldr.w	r3, [r7, #772]	@ 0x304
 801a596:	2b00      	cmp	r3, #0
 801a598:	d135      	bne.n	801a606 <mg_tls_client_recv_cert+0x4b2>
 801a59a:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 801a59e:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 801a5a2:	2b00      	cmp	r3, #0
 801a5a4:	d02f      	beq.n	801a606 <mg_tls_client_recv_cert+0x4b2>
    if (certnum < 1 ||
 801a5a6:	f8d7 330c 	ldr.w	r3, [r7, #780]	@ 0x30c
 801a5aa:	2b00      	cmp	r3, #0
 801a5ac:	dd12      	ble.n	801a5d4 <mg_tls_client_recv_cert+0x480>
        !mg_tls_verify_cert_signature(&certs[certnum - 1], &ca)) {
 801a5ae:	f8d7 330c 	ldr.w	r3, [r7, #780]	@ 0x30c
 801a5b2:	1e5a      	subs	r2, r3, #1
 801a5b4:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 801a5b8:	4613      	mov	r3, r2
 801a5ba:	009b      	lsls	r3, r3, #2
 801a5bc:	4413      	add	r3, r2
 801a5be:	011b      	lsls	r3, r3, #4
 801a5c0:	440b      	add	r3, r1
 801a5c2:	f107 020c 	add.w	r2, r7, #12
 801a5c6:	4611      	mov	r1, r2
 801a5c8:	4618      	mov	r0, r3
 801a5ca:	f7ff fc37 	bl	8019e3c <mg_tls_verify_cert_signature>
 801a5ce:	4603      	mov	r3, r0
    if (certnum < 1 ||
 801a5d0:	2b00      	cmp	r3, #0
 801a5d2:	d10a      	bne.n	801a5ea <mg_tls_client_recv_cert+0x496>
      mg_error(c, "failed to verify CA");
 801a5d4:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 801a5d8:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 801a5dc:	4917      	ldr	r1, [pc, #92]	@ (801a63c <mg_tls_client_recv_cert+0x4e8>)
 801a5de:	6818      	ldr	r0, [r3, #0]
 801a5e0:	f7ee fae8 	bl	8008bb4 <mg_error>
      return -1;
 801a5e4:	f04f 33ff 	mov.w	r3, #4294967295
 801a5e8:	e021      	b.n	801a62e <mg_tls_client_recv_cert+0x4da>
    } else {
      MG_VERBOSE(
 801a5ea:	4b15      	ldr	r3, [pc, #84]	@ (801a640 <mg_tls_client_recv_cert+0x4ec>)
 801a5ec:	681b      	ldr	r3, [r3, #0]
 801a5ee:	2b03      	cmp	r3, #3
 801a5f0:	dd09      	ble.n	801a606 <mg_tls_client_recv_cert+0x4b2>
 801a5f2:	4b14      	ldr	r3, [pc, #80]	@ (801a644 <mg_tls_client_recv_cert+0x4f0>)
 801a5f4:	f642 7283 	movw	r2, #12163	@ 0x2f83
 801a5f8:	4913      	ldr	r1, [pc, #76]	@ (801a648 <mg_tls_client_recv_cert+0x4f4>)
 801a5fa:	2004      	movs	r0, #4
 801a5fc:	f7f4 f952 	bl	800e8a4 <mg_log_prefix>
 801a600:	4812      	ldr	r0, [pc, #72]	@ (801a64c <mg_tls_client_recv_cert+0x4f8>)
 801a602:	f7f4 f99f 	bl	800e944 <mg_log>
          ("CA was not in the chain, but verification with builtin CA passed"));
    }
  }

  mg_tls_drop_message(c);
 801a606:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 801a60a:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 801a60e:	6818      	ldr	r0, [r3, #0]
 801a610:	f7fd f8a0 	bl	8017754 <mg_tls_drop_message>
  mg_tls_calc_cert_verify_hash(c, tls->sighash, 0);
 801a614:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 801a618:	f503 618c 	add.w	r1, r3, #1120	@ 0x460
 801a61c:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 801a620:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 801a624:	2200      	movs	r2, #0
 801a626:	6818      	ldr	r0, [r3, #0]
 801a628:	f7fd fdfc 	bl	8018224 <mg_tls_calc_cert_verify_hash>
  return 0;
 801a62c:	2300      	movs	r3, #0
}
 801a62e:	4618      	mov	r0, r3
 801a630:	f507 7744 	add.w	r7, r7, #784	@ 0x310
 801a634:	46bd      	mov	sp, r7
 801a636:	bd80      	pop	{r7, pc}
 801a638:	0802bed0 	.word	0x0802bed0
 801a63c:	0802bef4 	.word	0x0802bef4
 801a640:	24000258 	.word	0x24000258
 801a644:	0802daf8 	.word	0x0802daf8
 801a648:	08029c3c 	.word	0x08029c3c
 801a64c:	0802bf08 	.word	0x0802bf08

0801a650 <mg_tls_client_recv_cert_verify>:

static int mg_tls_client_recv_cert_verify(struct mg_connection *c) {
 801a650:	b5b0      	push	{r4, r5, r7, lr}
 801a652:	f5ad 7d1c 	sub.w	sp, sp, #624	@ 0x270
 801a656:	af04      	add	r7, sp, #16
 801a658:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 801a65c:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 801a660:	6018      	str	r0, [r3, #0]
  struct tls_data *tls = (struct tls_data *) c->tls;
 801a662:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 801a666:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 801a66a:	681b      	ldr	r3, [r3, #0]
 801a66c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801a670:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
  unsigned char *recv_buf;
  if (mg_tls_recv_record(c) < 0) {
 801a674:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 801a678:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 801a67c:	6818      	ldr	r0, [r3, #0]
 801a67e:	f7fd fcb5 	bl	8017fec <mg_tls_recv_record>
 801a682:	4603      	mov	r3, r0
 801a684:	2b00      	cmp	r3, #0
 801a686:	da02      	bge.n	801a68e <mg_tls_client_recv_cert_verify+0x3e>
    return -1;
 801a688:	f04f 33ff 	mov.w	r3, #4294967295
 801a68c:	e1f9      	b.n	801aa82 <mg_tls_client_recv_cert_verify+0x432>
  }
  recv_buf = &c->rtls.buf[tls->recv_offset];
 801a68e:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 801a692:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 801a696:	681b      	ldr	r3, [r3, #0]
 801a698:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 801a69a:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 801a69e:	695b      	ldr	r3, [r3, #20]
 801a6a0:	4413      	add	r3, r2
 801a6a2:	f8c7 3258 	str.w	r3, [r7, #600]	@ 0x258
  if (recv_buf[0] != MG_TLS_CERTIFICATE_VERIFY) {
 801a6a6:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 801a6aa:	781b      	ldrb	r3, [r3, #0]
 801a6ac:	2b0f      	cmp	r3, #15
 801a6ae:	d00e      	beq.n	801a6ce <mg_tls_client_recv_cert_verify+0x7e>
    mg_error(c, "expected server certificate verify but got msg 0x%02x",
             recv_buf[0]);
 801a6b0:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 801a6b4:	781b      	ldrb	r3, [r3, #0]
    mg_error(c, "expected server certificate verify but got msg 0x%02x",
 801a6b6:	461a      	mov	r2, r3
 801a6b8:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 801a6bc:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 801a6c0:	49cb      	ldr	r1, [pc, #812]	@ (801a9f0 <mg_tls_client_recv_cert_verify+0x3a0>)
 801a6c2:	6818      	ldr	r0, [r3, #0]
 801a6c4:	f7ee fa76 	bl	8008bb4 <mg_error>
    return -1;
 801a6c8:	f04f 33ff 	mov.w	r3, #4294967295
 801a6cc:	e1d9      	b.n	801aa82 <mg_tls_client_recv_cert_verify+0x432>
  }
  if (tls->recv_len < 8) {
 801a6ce:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 801a6d2:	699b      	ldr	r3, [r3, #24]
 801a6d4:	2b07      	cmp	r3, #7
 801a6d6:	d80d      	bhi.n	801a6f4 <mg_tls_client_recv_cert_verify+0xa4>
    mg_error(c, "server certificate verify is too short: %d bytes",
 801a6d8:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 801a6dc:	699a      	ldr	r2, [r3, #24]
 801a6de:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 801a6e2:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 801a6e6:	49c3      	ldr	r1, [pc, #780]	@ (801a9f4 <mg_tls_client_recv_cert_verify+0x3a4>)
 801a6e8:	6818      	ldr	r0, [r3, #0]
 801a6ea:	f7ee fa63 	bl	8008bb4 <mg_error>
             tls->recv_len);
    return -1;
 801a6ee:	f04f 33ff 	mov.w	r3, #4294967295
 801a6f2:	e1c6      	b.n	801aa82 <mg_tls_client_recv_cert_verify+0x432>
  }

  // Ignore CertificateVerify is strict checks are not required
  if (tls->skip_verification) {
 801a6f4:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 801a6f8:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 801a6fc:	2b00      	cmp	r3, #0
 801a6fe:	d008      	beq.n	801a712 <mg_tls_client_recv_cert_verify+0xc2>
    mg_tls_drop_message(c);
 801a700:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 801a704:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 801a708:	6818      	ldr	r0, [r3, #0]
 801a70a:	f7fd f823 	bl	8017754 <mg_tls_drop_message>
    return 0;
 801a70e:	2300      	movs	r3, #0
 801a710:	e1b7      	b.n	801aa82 <mg_tls_client_recv_cert_verify+0x432>
  }

  uint16_t sigalg = MG_LOAD_BE16(recv_buf + 4);
 801a712:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 801a716:	3304      	adds	r3, #4
 801a718:	781b      	ldrb	r3, [r3, #0]
 801a71a:	b21b      	sxth	r3, r3
 801a71c:	021b      	lsls	r3, r3, #8
 801a71e:	b21a      	sxth	r2, r3
 801a720:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 801a724:	3305      	adds	r3, #5
 801a726:	781b      	ldrb	r3, [r3, #0]
 801a728:	b21b      	sxth	r3, r3
 801a72a:	4313      	orrs	r3, r2
 801a72c:	b21b      	sxth	r3, r3
 801a72e:	f8a7 3256 	strh.w	r3, [r7, #598]	@ 0x256
  uint16_t siglen = MG_LOAD_BE16(recv_buf + 6);
 801a732:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 801a736:	3306      	adds	r3, #6
 801a738:	781b      	ldrb	r3, [r3, #0]
 801a73a:	b21b      	sxth	r3, r3
 801a73c:	021b      	lsls	r3, r3, #8
 801a73e:	b21a      	sxth	r2, r3
 801a740:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 801a744:	3307      	adds	r3, #7
 801a746:	781b      	ldrb	r3, [r3, #0]
 801a748:	b21b      	sxth	r3, r3
 801a74a:	4313      	orrs	r3, r2
 801a74c:	b21b      	sxth	r3, r3
 801a74e:	f8a7 3254 	strh.w	r3, [r7, #596]	@ 0x254
  uint8_t *sigbuf = recv_buf + 8;
 801a752:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 801a756:	3308      	adds	r3, #8
 801a758:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250
  if (siglen > tls->recv_len - 8) {
 801a75c:	f8b7 2254 	ldrh.w	r2, [r7, #596]	@ 0x254
 801a760:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 801a764:	699b      	ldr	r3, [r3, #24]
 801a766:	3b08      	subs	r3, #8
 801a768:	429a      	cmp	r2, r3
 801a76a:	d910      	bls.n	801a78e <mg_tls_client_recv_cert_verify+0x13e>
    mg_error(c, "invalid certverify signature length: %d, expected %d", siglen,
 801a76c:	f8b7 2254 	ldrh.w	r2, [r7, #596]	@ 0x254
             tls->recv_len - 8);
 801a770:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 801a774:	699b      	ldr	r3, [r3, #24]
    mg_error(c, "invalid certverify signature length: %d, expected %d", siglen,
 801a776:	3b08      	subs	r3, #8
 801a778:	f507 7118 	add.w	r1, r7, #608	@ 0x260
 801a77c:	f5a1 7017 	sub.w	r0, r1, #604	@ 0x25c
 801a780:	499d      	ldr	r1, [pc, #628]	@ (801a9f8 <mg_tls_client_recv_cert_verify+0x3a8>)
 801a782:	6800      	ldr	r0, [r0, #0]
 801a784:	f7ee fa16 	bl	8008bb4 <mg_error>
    return -1;
 801a788:	f04f 33ff 	mov.w	r3, #4294967295
 801a78c:	e179      	b.n	801aa82 <mg_tls_client_recv_cert_verify+0x432>
  }
  MG_VERBOSE(
 801a78e:	4b9b      	ldr	r3, [pc, #620]	@ (801a9fc <mg_tls_client_recv_cert_verify+0x3ac>)
 801a790:	681b      	ldr	r3, [r3, #0]
 801a792:	2b03      	cmp	r3, #3
 801a794:	dd0e      	ble.n	801a7b4 <mg_tls_client_recv_cert_verify+0x164>
 801a796:	4b9a      	ldr	r3, [pc, #616]	@ (801aa00 <mg_tls_client_recv_cert_verify+0x3b0>)
 801a798:	f642 72ad 	movw	r2, #12205	@ 0x2fad
 801a79c:	4999      	ldr	r1, [pc, #612]	@ (801aa04 <mg_tls_client_recv_cert_verify+0x3b4>)
 801a79e:	2004      	movs	r0, #4
 801a7a0:	f7f4 f880 	bl	800e8a4 <mg_log_prefix>
 801a7a4:	f8b7 3256 	ldrh.w	r3, [r7, #598]	@ 0x256
 801a7a8:	f8b7 2254 	ldrh.w	r2, [r7, #596]	@ 0x254
 801a7ac:	4619      	mov	r1, r3
 801a7ae:	4896      	ldr	r0, [pc, #600]	@ (801aa08 <mg_tls_client_recv_cert_verify+0x3b8>)
 801a7b0:	f7f4 f8c8 	bl	800e944 <mg_log>
      ("certificate verification, algo=%04x, siglen=%d", sigalg, siglen));

  if (sigalg == 0x0804) {  // rsa_pss_rsae_sha256
 801a7b4:	f8b7 3256 	ldrh.w	r3, [r7, #598]	@ 0x256
 801a7b8:	f640 0204 	movw	r2, #2052	@ 0x804
 801a7bc:	4293      	cmp	r3, r2
 801a7be:	d173      	bne.n	801a8a8 <mg_tls_client_recv_cert_verify+0x258>
    uint8_t sig2[512];     // 2048 or 4096 bits
    struct mg_der_tlv seq, modulus, exponent;

    if (mg_der_parse(tls->pubkey, tls->pubkeysz, &seq) <= 0 ||
 801a7c0:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 801a7c4:	f503 7013 	add.w	r0, r3, #588	@ 0x24c
 801a7c8:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 801a7cc:	f8d3 345c 	ldr.w	r3, [r3, #1116]	@ 0x45c
 801a7d0:	f507 7211 	add.w	r2, r7, #580	@ 0x244
 801a7d4:	4619      	mov	r1, r3
 801a7d6:	f7fc fe43 	bl	8017460 <mg_der_parse>
 801a7da:	4603      	mov	r3, r0
 801a7dc:	2b00      	cmp	r3, #0
 801a7de:	dd1d      	ble.n	801a81c <mg_tls_client_recv_cert_verify+0x1cc>
        mg_der_next(&seq, &modulus) <= 0 || modulus.type != 2 ||
 801a7e0:	f507 720e 	add.w	r2, r7, #568	@ 0x238
 801a7e4:	f507 7311 	add.w	r3, r7, #580	@ 0x244
 801a7e8:	4611      	mov	r1, r2
 801a7ea:	4618      	mov	r0, r3
 801a7ec:	f7fc fe98 	bl	8017520 <mg_der_next>
 801a7f0:	4603      	mov	r3, r0
    if (mg_der_parse(tls->pubkey, tls->pubkeysz, &seq) <= 0 ||
 801a7f2:	2b00      	cmp	r3, #0
 801a7f4:	dd12      	ble.n	801a81c <mg_tls_client_recv_cert_verify+0x1cc>
        mg_der_next(&seq, &modulus) <= 0 || modulus.type != 2 ||
 801a7f6:	f897 3238 	ldrb.w	r3, [r7, #568]	@ 0x238
 801a7fa:	2b02      	cmp	r3, #2
 801a7fc:	d10e      	bne.n	801a81c <mg_tls_client_recv_cert_verify+0x1cc>
        mg_der_next(&seq, &exponent) <= 0 || exponent.type != 2) {
 801a7fe:	f507 720b 	add.w	r2, r7, #556	@ 0x22c
 801a802:	f507 7311 	add.w	r3, r7, #580	@ 0x244
 801a806:	4611      	mov	r1, r2
 801a808:	4618      	mov	r0, r3
 801a80a:	f7fc fe89 	bl	8017520 <mg_der_next>
 801a80e:	4603      	mov	r3, r0
        mg_der_next(&seq, &modulus) <= 0 || modulus.type != 2 ||
 801a810:	2b00      	cmp	r3, #0
 801a812:	dd03      	ble.n	801a81c <mg_tls_client_recv_cert_verify+0x1cc>
        mg_der_next(&seq, &exponent) <= 0 || exponent.type != 2) {
 801a814:	f897 322c 	ldrb.w	r3, [r7, #556]	@ 0x22c
 801a818:	2b02      	cmp	r3, #2
 801a81a:	d00a      	beq.n	801a832 <mg_tls_client_recv_cert_verify+0x1e2>
      mg_error(c, "invalid public key");
 801a81c:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 801a820:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 801a824:	4979      	ldr	r1, [pc, #484]	@ (801aa0c <mg_tls_client_recv_cert_verify+0x3bc>)
 801a826:	6818      	ldr	r0, [r3, #0]
 801a828:	f7ee f9c4 	bl	8008bb4 <mg_error>
      return -1;
 801a82c:	f04f 33ff 	mov.w	r3, #4294967295
 801a830:	e127      	b.n	801aa82 <mg_tls_client_recv_cert_verify+0x432>
    }

    mg_rsa_mod_pow(modulus.value, modulus.len, exponent.value, exponent.len,
 801a832:	f8d7 0240 	ldr.w	r0, [r7, #576]	@ 0x240
 801a836:	f8d7 123c 	ldr.w	r1, [r7, #572]	@ 0x23c
 801a83a:	f8d7 4234 	ldr.w	r4, [r7, #564]	@ 0x234
 801a83e:	f8d7 5230 	ldr.w	r5, [r7, #560]	@ 0x230
 801a842:	f8b7 3254 	ldrh.w	r3, [r7, #596]	@ 0x254
 801a846:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801a84a:	9203      	str	r2, [sp, #12]
 801a84c:	f107 0208 	add.w	r2, r7, #8
 801a850:	9202      	str	r2, [sp, #8]
 801a852:	9301      	str	r3, [sp, #4]
 801a854:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 801a858:	9300      	str	r3, [sp, #0]
 801a85a:	462b      	mov	r3, r5
 801a85c:	4622      	mov	r2, r4
 801a85e:	f003 ff2c 	bl	801e6ba <mg_rsa_mod_pow>
                   sigbuf, siglen, sig2, sizeof(sig2));

    if (sig2[sizeof(sig2) - 1] != 0xbc) {
 801a862:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 801a866:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 801a86a:	f893 31ff 	ldrb.w	r3, [r3, #511]	@ 0x1ff
 801a86e:	2bbc      	cmp	r3, #188	@ 0xbc
 801a870:	d00a      	beq.n	801a888 <mg_tls_client_recv_cert_verify+0x238>
      mg_error(c, "failed to verify RSA certificate (certverify)");
 801a872:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 801a876:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 801a87a:	4965      	ldr	r1, [pc, #404]	@ (801aa10 <mg_tls_client_recv_cert_verify+0x3c0>)
 801a87c:	6818      	ldr	r0, [r3, #0]
 801a87e:	f7ee f999 	bl	8008bb4 <mg_error>
      return -1;
 801a882:	f04f 33ff 	mov.w	r3, #4294967295
 801a886:	e0fc      	b.n	801aa82 <mg_tls_client_recv_cert_verify+0x432>
    }
    MG_DEBUG(("certificate verification successful (RSA)"));
 801a888:	4b5c      	ldr	r3, [pc, #368]	@ (801a9fc <mg_tls_client_recv_cert_verify+0x3ac>)
 801a88a:	681b      	ldr	r3, [r3, #0]
 801a88c:	2b02      	cmp	r3, #2
 801a88e:	f340 80f0 	ble.w	801aa72 <mg_tls_client_recv_cert_verify+0x422>
 801a892:	4b5b      	ldr	r3, [pc, #364]	@ (801aa00 <mg_tls_client_recv_cert_verify+0x3b0>)
 801a894:	f642 72c2 	movw	r2, #12226	@ 0x2fc2
 801a898:	495a      	ldr	r1, [pc, #360]	@ (801aa04 <mg_tls_client_recv_cert_verify+0x3b4>)
 801a89a:	2003      	movs	r0, #3
 801a89c:	f7f4 f802 	bl	800e8a4 <mg_log_prefix>
 801a8a0:	485c      	ldr	r0, [pc, #368]	@ (801aa14 <mg_tls_client_recv_cert_verify+0x3c4>)
 801a8a2:	f7f4 f84f 	bl	800e944 <mg_log>
 801a8a6:	e0e4      	b.n	801aa72 <mg_tls_client_recv_cert_verify+0x422>
  } else if (sigalg == 0x0403) {  // ecdsa_secp256r1_sha256
 801a8a8:	f8b7 3256 	ldrh.w	r3, [r7, #598]	@ 0x256
 801a8ac:	f240 4203 	movw	r2, #1027	@ 0x403
 801a8b0:	4293      	cmp	r3, r2
 801a8b2:	f040 80c8 	bne.w	801aa46 <mg_tls_client_recv_cert_verify+0x3f6>
    // Extract certificate signature and verify it using pubkey and sighash
    uint8_t sig[64];
    struct mg_der_tlv seq, r, s;
    if (mg_der_to_tlv(sigbuf, siglen, &seq) < 0) {
 801a8b6:	f8b7 3254 	ldrh.w	r3, [r7, #596]	@ 0x254
 801a8ba:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 801a8be:	4619      	mov	r1, r3
 801a8c0:	f8d7 0250 	ldr.w	r0, [r7, #592]	@ 0x250
 801a8c4:	f7fc fea7 	bl	8017616 <mg_der_to_tlv>
 801a8c8:	4603      	mov	r3, r0
 801a8ca:	2b00      	cmp	r3, #0
 801a8cc:	da0a      	bge.n	801a8e4 <mg_tls_client_recv_cert_verify+0x294>
      mg_error(c, "verification message is not an ASN.1 DER sequence");
 801a8ce:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 801a8d2:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 801a8d6:	4950      	ldr	r1, [pc, #320]	@ (801aa18 <mg_tls_client_recv_cert_verify+0x3c8>)
 801a8d8:	6818      	ldr	r0, [r3, #0]
 801a8da:	f7ee f96b 	bl	8008bb4 <mg_error>
      return -1;
 801a8de:	f04f 33ff 	mov.w	r3, #4294967295
 801a8e2:	e0ce      	b.n	801aa82 <mg_tls_client_recv_cert_verify+0x432>
    }
    if (mg_der_to_tlv(seq.value, seq.len, &r) < 0) {
 801a8e4:	f8d7 3228 	ldr.w	r3, [r7, #552]	@ 0x228
 801a8e8:	f8d7 1224 	ldr.w	r1, [r7, #548]	@ 0x224
 801a8ec:	f507 7205 	add.w	r2, r7, #532	@ 0x214
 801a8f0:	4618      	mov	r0, r3
 801a8f2:	f7fc fe90 	bl	8017616 <mg_der_to_tlv>
 801a8f6:	4603      	mov	r3, r0
 801a8f8:	2b00      	cmp	r3, #0
 801a8fa:	da0a      	bge.n	801a912 <mg_tls_client_recv_cert_verify+0x2c2>
      mg_error(c, "missing first part of the signature");
 801a8fc:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 801a900:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 801a904:	4945      	ldr	r1, [pc, #276]	@ (801aa1c <mg_tls_client_recv_cert_verify+0x3cc>)
 801a906:	6818      	ldr	r0, [r3, #0]
 801a908:	f7ee f954 	bl	8008bb4 <mg_error>
      return -1;
 801a90c:	f04f 33ff 	mov.w	r3, #4294967295
 801a910:	e0b7      	b.n	801aa82 <mg_tls_client_recv_cert_verify+0x432>
    }
    if (mg_der_to_tlv(r.value + r.len, seq.len - r.len, &s) < 0) {
 801a912:	f8d7 221c 	ldr.w	r2, [r7, #540]	@ 0x21c
 801a916:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 801a91a:	18d0      	adds	r0, r2, r3
 801a91c:	f8d7 2224 	ldr.w	r2, [r7, #548]	@ 0x224
 801a920:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 801a924:	1ad3      	subs	r3, r2, r3
 801a926:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 801a92a:	4619      	mov	r1, r3
 801a92c:	f7fc fe73 	bl	8017616 <mg_der_to_tlv>
 801a930:	4603      	mov	r3, r0
 801a932:	2b00      	cmp	r3, #0
 801a934:	da0a      	bge.n	801a94c <mg_tls_client_recv_cert_verify+0x2fc>
      mg_error(c, "missing second part of the signature");
 801a936:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 801a93a:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 801a93e:	4938      	ldr	r1, [pc, #224]	@ (801aa20 <mg_tls_client_recv_cert_verify+0x3d0>)
 801a940:	6818      	ldr	r0, [r3, #0]
 801a942:	f7ee f937 	bl	8008bb4 <mg_error>
      return -1;
 801a946:	f04f 33ff 	mov.w	r3, #4294967295
 801a94a:	e09a      	b.n	801aa82 <mg_tls_client_recv_cert_verify+0x432>
    }
    // Integers may be padded with zeroes
    if (r.len > 32) r.value = r.value + (r.len - 32), r.len = 32;
 801a94c:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 801a950:	2b20      	cmp	r3, #32
 801a952:	d90a      	bls.n	801a96a <mg_tls_client_recv_cert_verify+0x31a>
 801a954:	f8d7 221c 	ldr.w	r2, [r7, #540]	@ 0x21c
 801a958:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 801a95c:	3b20      	subs	r3, #32
 801a95e:	4413      	add	r3, r2
 801a960:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 801a964:	2320      	movs	r3, #32
 801a966:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
    if (s.len > 32) s.value = s.value + (s.len - 32), s.len = 32;
 801a96a:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 801a96e:	2b20      	cmp	r3, #32
 801a970:	d90a      	bls.n	801a988 <mg_tls_client_recv_cert_verify+0x338>
 801a972:	f8d7 2210 	ldr.w	r2, [r7, #528]	@ 0x210
 801a976:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 801a97a:	3b20      	subs	r3, #32
 801a97c:	4413      	add	r3, r2
 801a97e:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
 801a982:	2320      	movs	r3, #32
 801a984:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c

    memmove(sig, r.value, r.len);
 801a988:	f8d7 121c 	ldr.w	r1, [r7, #540]	@ 0x21c
 801a98c:	f8d7 2218 	ldr.w	r2, [r7, #536]	@ 0x218
 801a990:	f107 0308 	add.w	r3, r7, #8
 801a994:	4618      	mov	r0, r3
 801a996:	f00c fe7d 	bl	8027694 <memmove>
    memmove(sig + 32, s.value, s.len);
 801a99a:	f107 0308 	add.w	r3, r7, #8
 801a99e:	3320      	adds	r3, #32
 801a9a0:	f8d7 1210 	ldr.w	r1, [r7, #528]	@ 0x210
 801a9a4:	f8d7 220c 	ldr.w	r2, [r7, #524]	@ 0x20c
 801a9a8:	4618      	mov	r0, r3
 801a9aa:	f00c fe73 	bl	8027694 <memmove>

    if (mg_uecc_verify(tls->pubkey, tls->sighash, sizeof(tls->sighash), sig,
 801a9ae:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 801a9b2:	f503 7413 	add.w	r4, r3, #588	@ 0x24c
 801a9b6:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 801a9ba:	f503 658c 	add.w	r5, r3, #1120	@ 0x460
 801a9be:	f004 feab 	bl	801f718 <mg_uecc_secp256r1>
 801a9c2:	4602      	mov	r2, r0
 801a9c4:	f107 0308 	add.w	r3, r7, #8
 801a9c8:	9200      	str	r2, [sp, #0]
 801a9ca:	2220      	movs	r2, #32
 801a9cc:	4629      	mov	r1, r5
 801a9ce:	4620      	mov	r0, r4
 801a9d0:	f006 f83e 	bl	8020a50 <mg_uecc_verify>
 801a9d4:	4603      	mov	r3, r0
 801a9d6:	2b01      	cmp	r3, #1
 801a9d8:	d026      	beq.n	801aa28 <mg_tls_client_recv_cert_verify+0x3d8>
                       mg_uecc_secp256r1()) != 1) {
      mg_error(c, "failed to verify EC certificate (certverify)");
 801a9da:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 801a9de:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 801a9e2:	4910      	ldr	r1, [pc, #64]	@ (801aa24 <mg_tls_client_recv_cert_verify+0x3d4>)
 801a9e4:	6818      	ldr	r0, [r3, #0]
 801a9e6:	f7ee f8e5 	bl	8008bb4 <mg_error>
      return -1;
 801a9ea:	f04f 33ff 	mov.w	r3, #4294967295
 801a9ee:	e048      	b.n	801aa82 <mg_tls_client_recv_cert_verify+0x432>
 801a9f0:	0802bf4c 	.word	0x0802bf4c
 801a9f4:	0802bf84 	.word	0x0802bf84
 801a9f8:	0802bfb8 	.word	0x0802bfb8
 801a9fc:	24000258 	.word	0x24000258
 801aa00:	0802db10 	.word	0x0802db10
 801aa04:	08029c3c 	.word	0x08029c3c
 801aa08:	0802bff0 	.word	0x0802bff0
 801aa0c:	0802c020 	.word	0x0802c020
 801aa10:	0802c034 	.word	0x0802c034
 801aa14:	0802c064 	.word	0x0802c064
 801aa18:	0802c090 	.word	0x0802c090
 801aa1c:	0802c0c4 	.word	0x0802c0c4
 801aa20:	0802c0e8 	.word	0x0802c0e8
 801aa24:	0802c110 	.word	0x0802c110
    }
    MG_DEBUG(("certificate verification successful (EC)"));
 801aa28:	4b18      	ldr	r3, [pc, #96]	@ (801aa8c <mg_tls_client_recv_cert_verify+0x43c>)
 801aa2a:	681b      	ldr	r3, [r3, #0]
 801aa2c:	2b02      	cmp	r3, #2
 801aa2e:	dd20      	ble.n	801aa72 <mg_tls_client_recv_cert_verify+0x422>
 801aa30:	4b17      	ldr	r3, [pc, #92]	@ (801aa90 <mg_tls_client_recv_cert_verify+0x440>)
 801aa32:	f642 72df 	movw	r2, #12255	@ 0x2fdf
 801aa36:	4917      	ldr	r1, [pc, #92]	@ (801aa94 <mg_tls_client_recv_cert_verify+0x444>)
 801aa38:	2003      	movs	r0, #3
 801aa3a:	f7f3 ff33 	bl	800e8a4 <mg_log_prefix>
 801aa3e:	4816      	ldr	r0, [pc, #88]	@ (801aa98 <mg_tls_client_recv_cert_verify+0x448>)
 801aa40:	f7f3 ff80 	bl	800e944 <mg_log>
 801aa44:	e015      	b.n	801aa72 <mg_tls_client_recv_cert_verify+0x422>
    //   0807 = ed25519
    //   0808 = ed448
    //   0809 = rsa_pss_pss_sha256
    //   080A = rsa_pss_pss_sha384
    //   080B = rsa_pss_pss_sha512
    MG_ERROR(("unsupported certverify signature scheme: %x of %d bytes", sigalg,
 801aa46:	4b11      	ldr	r3, [pc, #68]	@ (801aa8c <mg_tls_client_recv_cert_verify+0x43c>)
 801aa48:	681b      	ldr	r3, [r3, #0]
 801aa4a:	2b00      	cmp	r3, #0
 801aa4c:	dd0e      	ble.n	801aa6c <mg_tls_client_recv_cert_verify+0x41c>
 801aa4e:	4b10      	ldr	r3, [pc, #64]	@ (801aa90 <mg_tls_client_recv_cert_verify+0x440>)
 801aa50:	f642 72ea 	movw	r2, #12266	@ 0x2fea
 801aa54:	490f      	ldr	r1, [pc, #60]	@ (801aa94 <mg_tls_client_recv_cert_verify+0x444>)
 801aa56:	2001      	movs	r0, #1
 801aa58:	f7f3 ff24 	bl	800e8a4 <mg_log_prefix>
 801aa5c:	f8b7 3256 	ldrh.w	r3, [r7, #598]	@ 0x256
 801aa60:	f8b7 2254 	ldrh.w	r2, [r7, #596]	@ 0x254
 801aa64:	4619      	mov	r1, r3
 801aa66:	480d      	ldr	r0, [pc, #52]	@ (801aa9c <mg_tls_client_recv_cert_verify+0x44c>)
 801aa68:	f7f3 ff6c 	bl	800e944 <mg_log>
              siglen));
    return -1;
 801aa6c:	f04f 33ff 	mov.w	r3, #4294967295
 801aa70:	e007      	b.n	801aa82 <mg_tls_client_recv_cert_verify+0x432>
  }
  mg_tls_drop_message(c);
 801aa72:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 801aa76:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 801aa7a:	6818      	ldr	r0, [r3, #0]
 801aa7c:	f7fc fe6a 	bl	8017754 <mg_tls_drop_message>
  return 0;
 801aa80:	2300      	movs	r3, #0
}
 801aa82:	4618      	mov	r0, r3
 801aa84:	f507 7718 	add.w	r7, r7, #608	@ 0x260
 801aa88:	46bd      	mov	sp, r7
 801aa8a:	bdb0      	pop	{r4, r5, r7, pc}
 801aa8c:	24000258 	.word	0x24000258
 801aa90:	0802db10 	.word	0x0802db10
 801aa94:	08029c3c 	.word	0x08029c3c
 801aa98:	0802c140 	.word	0x0802c140
 801aa9c:	0802c16c 	.word	0x0802c16c

0801aaa0 <mg_tls_client_recv_finish>:

static int mg_tls_client_recv_finish(struct mg_connection *c) {
 801aaa0:	b580      	push	{r7, lr}
 801aaa2:	b084      	sub	sp, #16
 801aaa4:	af00      	add	r7, sp, #0
 801aaa6:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 801aaa8:	687b      	ldr	r3, [r7, #4]
 801aaaa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801aaae:	60fb      	str	r3, [r7, #12]
  unsigned char *recv_buf;
  if (mg_tls_recv_record(c) < 0) {
 801aab0:	6878      	ldr	r0, [r7, #4]
 801aab2:	f7fd fa9b 	bl	8017fec <mg_tls_recv_record>
 801aab6:	4603      	mov	r3, r0
 801aab8:	2b00      	cmp	r3, #0
 801aaba:	da02      	bge.n	801aac2 <mg_tls_client_recv_finish+0x22>
    return -1;
 801aabc:	f04f 33ff 	mov.w	r3, #4294967295
 801aac0:	e017      	b.n	801aaf2 <mg_tls_client_recv_finish+0x52>
  }
  recv_buf = &c->rtls.buf[tls->recv_offset];
 801aac2:	687b      	ldr	r3, [r7, #4]
 801aac4:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 801aac6:	68fb      	ldr	r3, [r7, #12]
 801aac8:	695b      	ldr	r3, [r3, #20]
 801aaca:	4413      	add	r3, r2
 801aacc:	60bb      	str	r3, [r7, #8]
  if (recv_buf[0] != MG_TLS_FINISHED) {
 801aace:	68bb      	ldr	r3, [r7, #8]
 801aad0:	781b      	ldrb	r3, [r3, #0]
 801aad2:	2b14      	cmp	r3, #20
 801aad4:	d009      	beq.n	801aaea <mg_tls_client_recv_finish+0x4a>
    mg_error(c, "expected server finished but got msg 0x%02x", recv_buf[0]);
 801aad6:	68bb      	ldr	r3, [r7, #8]
 801aad8:	781b      	ldrb	r3, [r3, #0]
 801aada:	461a      	mov	r2, r3
 801aadc:	4907      	ldr	r1, [pc, #28]	@ (801aafc <mg_tls_client_recv_finish+0x5c>)
 801aade:	6878      	ldr	r0, [r7, #4]
 801aae0:	f7ee f868 	bl	8008bb4 <mg_error>
    return -1;
 801aae4:	f04f 33ff 	mov.w	r3, #4294967295
 801aae8:	e003      	b.n	801aaf2 <mg_tls_client_recv_finish+0x52>
  }
  mg_tls_drop_message(c);
 801aaea:	6878      	ldr	r0, [r7, #4]
 801aaec:	f7fc fe32 	bl	8017754 <mg_tls_drop_message>
  return 0;
 801aaf0:	2300      	movs	r3, #0
}
 801aaf2:	4618      	mov	r0, r3
 801aaf4:	3710      	adds	r7, #16
 801aaf6:	46bd      	mov	sp, r7
 801aaf8:	bd80      	pop	{r7, pc}
 801aafa:	bf00      	nop
 801aafc:	0802c1a4 	.word	0x0802c1a4

0801ab00 <mg_tls_client_send_finish>:

static void mg_tls_client_send_finish(struct mg_connection *c) {
 801ab00:	b580      	push	{r7, lr}
 801ab02:	b0b4      	sub	sp, #208	@ 0xd0
 801ab04:	af02      	add	r7, sp, #8
 801ab06:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 801ab08:	687b      	ldr	r3, [r7, #4]
 801ab0a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801ab0e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  mg_sha256_ctx sha256;
  uint8_t hash[32];
  uint8_t finish[36] = {0x14, 0, 0, 32};
 801ab12:	4b1a      	ldr	r3, [pc, #104]	@ (801ab7c <mg_tls_client_send_finish+0x7c>)
 801ab14:	60fb      	str	r3, [r7, #12]
 801ab16:	f107 0310 	add.w	r3, r7, #16
 801ab1a:	2220      	movs	r2, #32
 801ab1c:	2100      	movs	r1, #0
 801ab1e:	4618      	mov	r0, r3
 801ab20:	f00c fdd2 	bl	80276c8 <memset>
  memmove(&sha256, &tls->sha256, sizeof(mg_sha256_ctx));
 801ab24:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 801ab28:	f103 0120 	add.w	r1, r3, #32
 801ab2c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 801ab30:	2270      	movs	r2, #112	@ 0x70
 801ab32:	4618      	mov	r0, r3
 801ab34:	f00c fdae 	bl	8027694 <memmove>
  mg_sha256_final(hash, &sha256);
 801ab38:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 801ab3c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 801ab40:	4611      	mov	r1, r2
 801ab42:	4618      	mov	r0, r3
 801ab44:	f7fa fc5f 	bl	8015406 <mg_sha256_final>
  mg_hmac_sha256(finish + 4, tls->enc.client_finished_key, 32, hash, 32);
 801ab48:	f107 000c 	add.w	r0, r7, #12
 801ab4c:	3004      	adds	r0, #4
 801ab4e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 801ab52:	f503 61a4 	add.w	r1, r3, #1312	@ 0x520
 801ab56:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 801ab5a:	2220      	movs	r2, #32
 801ab5c:	9200      	str	r2, [sp, #0]
 801ab5e:	2220      	movs	r2, #32
 801ab60:	f7fa fda5 	bl	80156ae <mg_hmac_sha256>
  mg_tls_encrypt(c, finish, sizeof(finish), MG_TLS_HANDSHAKE);
 801ab64:	f107 010c 	add.w	r1, r7, #12
 801ab68:	2316      	movs	r3, #22
 801ab6a:	2224      	movs	r2, #36	@ 0x24
 801ab6c:	6878      	ldr	r0, [r7, #4]
 801ab6e:	f7fd f941 	bl	8017df4 <mg_tls_encrypt>
}
 801ab72:	bf00      	nop
 801ab74:	37c8      	adds	r7, #200	@ 0xc8
 801ab76:	46bd      	mov	sp, r7
 801ab78:	bd80      	pop	{r7, pc}
 801ab7a:	bf00      	nop
 801ab7c:	20000014 	.word	0x20000014

0801ab80 <mg_tls_client_handshake>:

static void mg_tls_client_handshake(struct mg_connection *c) {
 801ab80:	b580      	push	{r7, lr}
 801ab82:	b0e4      	sub	sp, #400	@ 0x190
 801ab84:	af00      	add	r7, sp, #0
 801ab86:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 801ab8a:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 801ab8e:	6018      	str	r0, [r3, #0]
  struct tls_data *tls = (struct tls_data *) c->tls;
 801ab90:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 801ab94:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 801ab98:	681b      	ldr	r3, [r3, #0]
 801ab9a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801ab9e:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  switch (tls->state) {
 801aba2:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 801aba6:	781b      	ldrb	r3, [r3, #0]
 801aba8:	2b05      	cmp	r3, #5
 801abaa:	f200 80da 	bhi.w	801ad62 <mg_tls_client_handshake+0x1e2>
 801abae:	a201      	add	r2, pc, #4	@ (adr r2, 801abb4 <mg_tls_client_handshake+0x34>)
 801abb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801abb4:	0801abcd 	.word	0x0801abcd
 801abb8:	0801abe3 	.word	0x0801abe3
 801abbc:	0801ac01 	.word	0x0801ac01
 801abc0:	0801ac1f 	.word	0x0801ac1f
 801abc4:	0801ac3d 	.word	0x0801ac3d
 801abc8:	0801ac5b 	.word	0x0801ac5b
    case MG_TLS_STATE_CLIENT_START:
      mg_tls_client_send_hello(c);
 801abcc:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 801abd0:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 801abd4:	6818      	ldr	r0, [r3, #0]
 801abd6:	f7fe f90b 	bl	8018df0 <mg_tls_client_send_hello>
      tls->state = MG_TLS_STATE_CLIENT_WAIT_SH;
 801abda:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 801abde:	2201      	movs	r2, #1
 801abe0:	701a      	strb	r2, [r3, #0]
      // Fallthrough
    case MG_TLS_STATE_CLIENT_WAIT_SH:
      if (mg_tls_client_recv_hello(c) < 0) {
 801abe2:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 801abe6:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 801abea:	6818      	ldr	r0, [r3, #0]
 801abec:	f7fe fae2 	bl	80191b4 <mg_tls_client_recv_hello>
 801abf0:	4603      	mov	r3, r0
 801abf2:	2b00      	cmp	r3, #0
 801abf4:	f2c0 80c2 	blt.w	801ad7c <mg_tls_client_handshake+0x1fc>
        break;
      }
      tls->state = MG_TLS_STATE_CLIENT_WAIT_EE;
 801abf8:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 801abfc:	2202      	movs	r2, #2
 801abfe:	701a      	strb	r2, [r3, #0]
      // Fallthrough
    case MG_TLS_STATE_CLIENT_WAIT_EE:
      if (mg_tls_client_recv_ext(c) < 0) {
 801ac00:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 801ac04:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 801ac08:	6818      	ldr	r0, [r3, #0]
 801ac0a:	f7fe fc0d 	bl	8019428 <mg_tls_client_recv_ext>
 801ac0e:	4603      	mov	r3, r0
 801ac10:	2b00      	cmp	r3, #0
 801ac12:	f2c0 80b5 	blt.w	801ad80 <mg_tls_client_handshake+0x200>
        break;
      }
      tls->state = MG_TLS_STATE_CLIENT_WAIT_CERT;
 801ac16:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 801ac1a:	2203      	movs	r2, #3
 801ac1c:	701a      	strb	r2, [r3, #0]
      // Fallthrough
    case MG_TLS_STATE_CLIENT_WAIT_CERT:
      if (mg_tls_client_recv_cert(c) < 0) {
 801ac1e:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 801ac22:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 801ac26:	6818      	ldr	r0, [r3, #0]
 801ac28:	f7ff fa94 	bl	801a154 <mg_tls_client_recv_cert>
 801ac2c:	4603      	mov	r3, r0
 801ac2e:	2b00      	cmp	r3, #0
 801ac30:	f2c0 80a8 	blt.w	801ad84 <mg_tls_client_handshake+0x204>
        break;
      }
      tls->state = MG_TLS_STATE_CLIENT_WAIT_CV;
 801ac34:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 801ac38:	2204      	movs	r2, #4
 801ac3a:	701a      	strb	r2, [r3, #0]
      // Fallthrough
    case MG_TLS_STATE_CLIENT_WAIT_CV:
      if (mg_tls_client_recv_cert_verify(c) < 0) {
 801ac3c:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 801ac40:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 801ac44:	6818      	ldr	r0, [r3, #0]
 801ac46:	f7ff fd03 	bl	801a650 <mg_tls_client_recv_cert_verify>
 801ac4a:	4603      	mov	r3, r0
 801ac4c:	2b00      	cmp	r3, #0
 801ac4e:	f2c0 809b 	blt.w	801ad88 <mg_tls_client_handshake+0x208>
        break;
      }
      tls->state = MG_TLS_STATE_CLIENT_WAIT_FINISH;
 801ac52:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 801ac56:	2205      	movs	r2, #5
 801ac58:	701a      	strb	r2, [r3, #0]
      // Fallthrough
    case MG_TLS_STATE_CLIENT_WAIT_FINISH:
      if (mg_tls_client_recv_finish(c) < 0) {
 801ac5a:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 801ac5e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 801ac62:	6818      	ldr	r0, [r3, #0]
 801ac64:	f7ff ff1c 	bl	801aaa0 <mg_tls_client_recv_finish>
 801ac68:	4603      	mov	r3, r0
 801ac6a:	2b00      	cmp	r3, #0
 801ac6c:	f2c0 808e 	blt.w	801ad8c <mg_tls_client_handshake+0x20c>
        break;
      }
      if (tls->cert_requested) {
 801ac70:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 801ac74:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 801ac78:	2b00      	cmp	r3, #0
 801ac7a:	d04b      	beq.n	801ad14 <mg_tls_client_handshake+0x194>
        /* for mTLS we should generate application keys at this point
         * but then restore handshake keys and continue with
         * the rest of the handshake */
        struct tls_enc app_keys;
        struct tls_enc hs_keys = tls->enc;
 801ac7c:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 801ac80:	f107 00cc 	add.w	r0, r7, #204	@ 0xcc
 801ac84:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 801ac88:	22c0      	movs	r2, #192	@ 0xc0
 801ac8a:	4619      	mov	r1, r3
 801ac8c:	f00c fe55 	bl	802793a <memcpy>
        mg_tls_generate_application_keys(c);
 801ac90:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 801ac94:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 801ac98:	6818      	ldr	r0, [r3, #0]
 801ac9a:	f7fc ff93 	bl	8017bc4 <mg_tls_generate_application_keys>
        app_keys = tls->enc;
 801ac9e:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 801aca2:	f5a3 72c2 	sub.w	r2, r3, #388	@ 0x184
 801aca6:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 801acaa:	4610      	mov	r0, r2
 801acac:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 801acb0:	22c0      	movs	r2, #192	@ 0xc0
 801acb2:	4619      	mov	r1, r3
 801acb4:	f00c fe41 	bl	802793a <memcpy>
        tls->enc = hs_keys;
 801acb8:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 801acbc:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 801acc0:	f107 01cc 	add.w	r1, r7, #204	@ 0xcc
 801acc4:	22c0      	movs	r2, #192	@ 0xc0
 801acc6:	4618      	mov	r0, r3
 801acc8:	f00c fe37 	bl	802793a <memcpy>
        mg_tls_server_send_cert(c);
 801accc:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 801acd0:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 801acd4:	6818      	ldr	r0, [r3, #0]
 801acd6:	f7fd fda9 	bl	801882c <mg_tls_server_send_cert>
        mg_tls_send_cert_verify(c, 1);
 801acda:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 801acde:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 801ace2:	2101      	movs	r1, #1
 801ace4:	6818      	ldr	r0, [r3, #0]
 801ace6:	f7fd fec7 	bl	8018a78 <mg_tls_send_cert_verify>
        mg_tls_client_send_finish(c);
 801acea:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 801acee:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 801acf2:	6818      	ldr	r0, [r3, #0]
 801acf4:	f7ff ff04 	bl	801ab00 <mg_tls_client_send_finish>
        tls->enc = app_keys;
 801acf8:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 801acfc:	f507 72c8 	add.w	r2, r7, #400	@ 0x190
 801ad00:	f5a2 72c2 	sub.w	r2, r2, #388	@ 0x184
 801ad04:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 801ad08:	4611      	mov	r1, r2
 801ad0a:	22c0      	movs	r2, #192	@ 0xc0
 801ad0c:	4618      	mov	r0, r3
 801ad0e:	f00c fe14 	bl	802793a <memcpy>
 801ad12:	e00d      	b.n	801ad30 <mg_tls_client_handshake+0x1b0>
      } else {
        mg_tls_client_send_finish(c);
 801ad14:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 801ad18:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 801ad1c:	6818      	ldr	r0, [r3, #0]
 801ad1e:	f7ff feef 	bl	801ab00 <mg_tls_client_send_finish>
        mg_tls_generate_application_keys(c);
 801ad22:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 801ad26:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 801ad2a:	6818      	ldr	r0, [r3, #0]
 801ad2c:	f7fc ff4a 	bl	8017bc4 <mg_tls_generate_application_keys>
      }
      tls->state = MG_TLS_STATE_CLIENT_CONNECTED;
 801ad30:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 801ad34:	2206      	movs	r2, #6
 801ad36:	701a      	strb	r2, [r3, #0]
      c->is_tls_hs = 0;
 801ad38:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 801ad3c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 801ad40:	681a      	ldr	r2, [r3, #0]
 801ad42:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 801ad46:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801ad4a:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
      mg_call(c, MG_EV_TLS_HS, NULL);
 801ad4e:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 801ad52:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 801ad56:	2200      	movs	r2, #0
 801ad58:	2106      	movs	r1, #6
 801ad5a:	6818      	ldr	r0, [r3, #0]
 801ad5c:	f7ed ff0a 	bl	8008b74 <mg_call>
      break;
 801ad60:	e015      	b.n	801ad8e <mg_tls_client_handshake+0x20e>
    default:
      mg_error(c, "unexpected client state: %d", tls->state);
 801ad62:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 801ad66:	781b      	ldrb	r3, [r3, #0]
 801ad68:	461a      	mov	r2, r3
 801ad6a:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 801ad6e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 801ad72:	4909      	ldr	r1, [pc, #36]	@ (801ad98 <mg_tls_client_handshake+0x218>)
 801ad74:	6818      	ldr	r0, [r3, #0]
 801ad76:	f7ed ff1d 	bl	8008bb4 <mg_error>
      break;
 801ad7a:	e008      	b.n	801ad8e <mg_tls_client_handshake+0x20e>
        break;
 801ad7c:	bf00      	nop
 801ad7e:	e006      	b.n	801ad8e <mg_tls_client_handshake+0x20e>
        break;
 801ad80:	bf00      	nop
 801ad82:	e004      	b.n	801ad8e <mg_tls_client_handshake+0x20e>
        break;
 801ad84:	bf00      	nop
 801ad86:	e002      	b.n	801ad8e <mg_tls_client_handshake+0x20e>
        break;
 801ad88:	bf00      	nop
 801ad8a:	e000      	b.n	801ad8e <mg_tls_client_handshake+0x20e>
        break;
 801ad8c:	bf00      	nop
  }
}
 801ad8e:	bf00      	nop
 801ad90:	f507 77c8 	add.w	r7, r7, #400	@ 0x190
 801ad94:	46bd      	mov	sp, r7
 801ad96:	bd80      	pop	{r7, pc}
 801ad98:	0802c1d0 	.word	0x0802c1d0

0801ad9c <mg_tls_server_handshake>:

static void mg_tls_server_handshake(struct mg_connection *c) {
 801ad9c:	b580      	push	{r7, lr}
 801ad9e:	b084      	sub	sp, #16
 801ada0:	af00      	add	r7, sp, #0
 801ada2:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 801ada4:	687b      	ldr	r3, [r7, #4]
 801ada6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801adaa:	60fb      	str	r3, [r7, #12]
  switch (tls->state) {
 801adac:	68fb      	ldr	r3, [r7, #12]
 801adae:	781b      	ldrb	r3, [r3, #0]
 801adb0:	2b07      	cmp	r3, #7
 801adb2:	d002      	beq.n	801adba <mg_tls_server_handshake+0x1e>
 801adb4:	2b08      	cmp	r3, #8
 801adb6:	d01c      	beq.n	801adf2 <mg_tls_server_handshake+0x56>
 801adb8:	e02f      	b.n	801ae1a <mg_tls_server_handshake+0x7e>
    case MG_TLS_STATE_SERVER_START:
      if (mg_tls_server_recv_hello(c) < 0) {
 801adba:	6878      	ldr	r0, [r7, #4]
 801adbc:	f7fd fad4 	bl	8018368 <mg_tls_server_recv_hello>
 801adc0:	4603      	mov	r3, r0
 801adc2:	2b00      	cmp	r3, #0
 801adc4:	db31      	blt.n	801ae2a <mg_tls_server_handshake+0x8e>
        return;
      }
      mg_tls_server_send_hello(c);
 801adc6:	6878      	ldr	r0, [r7, #4]
 801adc8:	f7fd fc5a 	bl	8018680 <mg_tls_server_send_hello>
      mg_tls_generate_handshake_keys(c);
 801adcc:	6878      	ldr	r0, [r7, #4]
 801adce:	f7fc fda9 	bl	8017924 <mg_tls_generate_handshake_keys>
      mg_tls_server_send_ext(c);
 801add2:	6878      	ldr	r0, [r7, #4]
 801add4:	f7fd fd08 	bl	80187e8 <mg_tls_server_send_ext>
      mg_tls_server_send_cert(c);
 801add8:	6878      	ldr	r0, [r7, #4]
 801adda:	f7fd fd27 	bl	801882c <mg_tls_server_send_cert>
      mg_tls_send_cert_verify(c, 0);
 801adde:	2100      	movs	r1, #0
 801ade0:	6878      	ldr	r0, [r7, #4]
 801ade2:	f7fd fe49 	bl	8018a78 <mg_tls_send_cert_verify>
      mg_tls_server_send_finish(c);
 801ade6:	6878      	ldr	r0, [r7, #4]
 801ade8:	f7fd ff7a 	bl	8018ce0 <mg_tls_server_send_finish>
      tls->state = MG_TLS_STATE_SERVER_NEGOTIATED;
 801adec:	68fb      	ldr	r3, [r7, #12]
 801adee:	2208      	movs	r2, #8
 801adf0:	701a      	strb	r2, [r3, #0]
      // fallthrough
    case MG_TLS_STATE_SERVER_NEGOTIATED:
      if (mg_tls_server_recv_finish(c) < 0) {
 801adf2:	6878      	ldr	r0, [r7, #4]
 801adf4:	f7fd ffbc 	bl	8018d70 <mg_tls_server_recv_finish>
 801adf8:	4603      	mov	r3, r0
 801adfa:	2b00      	cmp	r3, #0
 801adfc:	db17      	blt.n	801ae2e <mg_tls_server_handshake+0x92>
        return;
      }
      mg_tls_generate_application_keys(c);
 801adfe:	6878      	ldr	r0, [r7, #4]
 801ae00:	f7fc fee0 	bl	8017bc4 <mg_tls_generate_application_keys>
      tls->state = MG_TLS_STATE_SERVER_CONNECTED;
 801ae04:	68fb      	ldr	r3, [r7, #12]
 801ae06:	2209      	movs	r2, #9
 801ae08:	701a      	strb	r2, [r3, #0]
      c->is_tls_hs = 0;
 801ae0a:	687a      	ldr	r2, [r7, #4]
 801ae0c:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 801ae10:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801ae14:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
      return;
 801ae18:	e00a      	b.n	801ae30 <mg_tls_server_handshake+0x94>
    default:
      mg_error(c, "unexpected server state: %d", tls->state);
 801ae1a:	68fb      	ldr	r3, [r7, #12]
 801ae1c:	781b      	ldrb	r3, [r3, #0]
 801ae1e:	461a      	mov	r2, r3
 801ae20:	4905      	ldr	r1, [pc, #20]	@ (801ae38 <mg_tls_server_handshake+0x9c>)
 801ae22:	6878      	ldr	r0, [r7, #4]
 801ae24:	f7ed fec6 	bl	8008bb4 <mg_error>
      break;
 801ae28:	e002      	b.n	801ae30 <mg_tls_server_handshake+0x94>
        return;
 801ae2a:	bf00      	nop
 801ae2c:	e000      	b.n	801ae30 <mg_tls_server_handshake+0x94>
        return;
 801ae2e:	bf00      	nop
  }
}
 801ae30:	3710      	adds	r7, #16
 801ae32:	46bd      	mov	sp, r7
 801ae34:	bd80      	pop	{r7, pc}
 801ae36:	bf00      	nop
 801ae38:	0802c1ec 	.word	0x0802c1ec

0801ae3c <mg_tls_handshake>:

void mg_tls_handshake(struct mg_connection *c) {
 801ae3c:	b580      	push	{r7, lr}
 801ae3e:	b084      	sub	sp, #16
 801ae40:	af00      	add	r7, sp, #0
 801ae42:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 801ae44:	687b      	ldr	r3, [r7, #4]
 801ae46:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801ae4a:	60fb      	str	r3, [r7, #12]
  long n;
  if (c->is_client) {
 801ae4c:	687b      	ldr	r3, [r7, #4]
 801ae4e:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801ae52:	f003 0302 	and.w	r3, r3, #2
 801ae56:	b2db      	uxtb	r3, r3
 801ae58:	2b00      	cmp	r3, #0
 801ae5a:	d003      	beq.n	801ae64 <mg_tls_handshake+0x28>
    // will clear is_hs when sending last chunk
    mg_tls_client_handshake(c);
 801ae5c:	6878      	ldr	r0, [r7, #4]
 801ae5e:	f7ff fe8f 	bl	801ab80 <mg_tls_client_handshake>
 801ae62:	e00a      	b.n	801ae7a <mg_tls_handshake+0x3e>
  } else {
    mg_tls_server_handshake(c);
 801ae64:	6878      	ldr	r0, [r7, #4]
 801ae66:	f7ff ff99 	bl	801ad9c <mg_tls_server_handshake>
  }
  while (tls->send.len > 0 &&
 801ae6a:	e006      	b.n	801ae7a <mg_tls_handshake+0x3e>
         (n = mg_io_send(c, tls->send.buf, tls->send.len)) > 0) {
    mg_iobuf_del(&tls->send, 0, (size_t) n);
 801ae6c:	68fb      	ldr	r3, [r7, #12]
 801ae6e:	3304      	adds	r3, #4
 801ae70:	68ba      	ldr	r2, [r7, #8]
 801ae72:	2100      	movs	r1, #0
 801ae74:	4618      	mov	r0, r3
 801ae76:	f7f2 fcfd 	bl	800d874 <mg_iobuf_del>
  while (tls->send.len > 0 &&
 801ae7a:	68fb      	ldr	r3, [r7, #12]
 801ae7c:	68db      	ldr	r3, [r3, #12]
 801ae7e:	2b00      	cmp	r3, #0
 801ae80:	d00b      	beq.n	801ae9a <mg_tls_handshake+0x5e>
         (n = mg_io_send(c, tls->send.buf, tls->send.len)) > 0) {
 801ae82:	68fb      	ldr	r3, [r7, #12]
 801ae84:	6859      	ldr	r1, [r3, #4]
 801ae86:	68fb      	ldr	r3, [r7, #12]
 801ae88:	68db      	ldr	r3, [r3, #12]
 801ae8a:	461a      	mov	r2, r3
 801ae8c:	6878      	ldr	r0, [r7, #4]
 801ae8e:	f7f6 f901 	bl	8011094 <mg_io_send>
 801ae92:	60b8      	str	r0, [r7, #8]
  while (tls->send.len > 0 &&
 801ae94:	68bb      	ldr	r3, [r7, #8]
 801ae96:	2b00      	cmp	r3, #0
 801ae98:	dce8      	bgt.n	801ae6c <mg_tls_handshake+0x30>
  } // if last chunk fails to be sent, it will be sent with first app data,
    // otherwise, it needs to be flushed
}
 801ae9a:	bf00      	nop
 801ae9c:	3710      	adds	r7, #16
 801ae9e:	46bd      	mov	sp, r7
 801aea0:	bd80      	pop	{r7, pc}
	...

0801aea4 <mg_parse_pem>:

static int mg_parse_pem(const struct mg_str pem, const struct mg_str label,
                        struct mg_str *der) {
 801aea4:	b590      	push	{r4, r7, lr}
 801aea6:	b09b      	sub	sp, #108	@ 0x6c
 801aea8:	af02      	add	r7, sp, #8
 801aeaa:	f107 0410 	add.w	r4, r7, #16
 801aeae:	e884 0003 	stmia.w	r4, {r0, r1}
 801aeb2:	f107 0108 	add.w	r1, r7, #8
 801aeb6:	e881 000c 	stmia.w	r1, {r2, r3}
  size_t n = 0, m = 0;
 801aeba:	2300      	movs	r3, #0
 801aebc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801aebe:	2300      	movs	r3, #0
 801aec0:	657b      	str	r3, [r7, #84]	@ 0x54
  char *s;
  const char *c;
  struct mg_str caps[6];  // number of wildcards + 1
  if (!mg_match(pem, mg_str("#-----BEGIN #-----#-----END #-----#"), caps)) {
 801aec2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 801aec6:	4946      	ldr	r1, [pc, #280]	@ (801afe0 <mg_parse_pem+0x13c>)
 801aec8:	4618      	mov	r0, r3
 801aeca:	f7fb fceb 	bl	80168a4 <mg_str_s>
 801aece:	f107 0318 	add.w	r3, r7, #24
 801aed2:	9300      	str	r3, [sp, #0]
 801aed4:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 801aed8:	cb0c      	ldmia	r3, {r2, r3}
 801aeda:	f107 0110 	add.w	r1, r7, #16
 801aede:	c903      	ldmia	r1, {r0, r1}
 801aee0:	f7fb fdea 	bl	8016ab8 <mg_match>
 801aee4:	4603      	mov	r3, r0
 801aee6:	f083 0301 	eor.w	r3, r3, #1
 801aeea:	b2db      	uxtb	r3, r3
 801aeec:	2b00      	cmp	r3, #0
 801aeee:	d00f      	beq.n	801af10 <mg_parse_pem+0x6c>
    *der = mg_strdup(pem);
 801aef0:	6f3c      	ldr	r4, [r7, #112]	@ 0x70
 801aef2:	4638      	mov	r0, r7
 801aef4:	f107 0310 	add.w	r3, r7, #16
 801aef8:	e893 0006 	ldmia.w	r3, {r1, r2}
 801aefc:	f7fb fd1c 	bl	8016938 <mg_strdup>
 801af00:	4622      	mov	r2, r4
 801af02:	463b      	mov	r3, r7
 801af04:	e893 0003 	ldmia.w	r3, {r0, r1}
 801af08:	e882 0003 	stmia.w	r2, {r0, r1}
    return 0;
 801af0c:	2300      	movs	r3, #0
 801af0e:	e062      	b.n	801afd6 <mg_parse_pem+0x132>
  }
  if (mg_strcmp(caps[1], label) != 0 || mg_strcmp(caps[3], label) != 0) {
 801af10:	f107 0308 	add.w	r3, r7, #8
 801af14:	cb0c      	ldmia	r3, {r2, r3}
 801af16:	f107 0120 	add.w	r1, r7, #32
 801af1a:	c903      	ldmia	r1, {r0, r1}
 801af1c:	f7fb fd43 	bl	80169a6 <mg_strcmp>
 801af20:	4603      	mov	r3, r0
 801af22:	2b00      	cmp	r3, #0
 801af24:	d10a      	bne.n	801af3c <mg_parse_pem+0x98>
 801af26:	f107 0308 	add.w	r3, r7, #8
 801af2a:	cb0c      	ldmia	r3, {r2, r3}
 801af2c:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 801af30:	c903      	ldmia	r1, {r0, r1}
 801af32:	f7fb fd38 	bl	80169a6 <mg_strcmp>
 801af36:	4603      	mov	r3, r0
 801af38:	2b00      	cmp	r3, #0
 801af3a:	d002      	beq.n	801af42 <mg_parse_pem+0x9e>
    return -1;  // bad label
 801af3c:	f04f 33ff 	mov.w	r3, #4294967295
 801af40:	e049      	b.n	801afd6 <mg_parse_pem+0x132>
  }
  if ((s = (char *) calloc(1, caps[2].len)) == NULL) {
 801af42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801af44:	4619      	mov	r1, r3
 801af46:	2001      	movs	r0, #1
 801af48:	f00a fd10 	bl	802596c <calloc>
 801af4c:	4603      	mov	r3, r0
 801af4e:	653b      	str	r3, [r7, #80]	@ 0x50
 801af50:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801af52:	2b00      	cmp	r3, #0
 801af54:	d102      	bne.n	801af5c <mg_parse_pem+0xb8>
    return -1;
 801af56:	f04f 33ff 	mov.w	r3, #4294967295
 801af5a:	e03c      	b.n	801afd6 <mg_parse_pem+0x132>
  }

  for (c = caps[2].buf; c < caps[2].buf + caps[2].len; c++) {
 801af5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801af5e:	65bb      	str	r3, [r7, #88]	@ 0x58
 801af60:	e01c      	b.n	801af9c <mg_parse_pem+0xf8>
    if (*c == ' ' || *c == '\n' || *c == '\r' || *c == '\t') {
 801af62:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801af64:	781b      	ldrb	r3, [r3, #0]
 801af66:	2b20      	cmp	r3, #32
 801af68:	d014      	beq.n	801af94 <mg_parse_pem+0xf0>
 801af6a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801af6c:	781b      	ldrb	r3, [r3, #0]
 801af6e:	2b0a      	cmp	r3, #10
 801af70:	d010      	beq.n	801af94 <mg_parse_pem+0xf0>
 801af72:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801af74:	781b      	ldrb	r3, [r3, #0]
 801af76:	2b0d      	cmp	r3, #13
 801af78:	d00c      	beq.n	801af94 <mg_parse_pem+0xf0>
 801af7a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801af7c:	781b      	ldrb	r3, [r3, #0]
 801af7e:	2b09      	cmp	r3, #9
 801af80:	d008      	beq.n	801af94 <mg_parse_pem+0xf0>
      continue;
    }
    s[n++] = *c;
 801af82:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801af84:	1c5a      	adds	r2, r3, #1
 801af86:	65fa      	str	r2, [r7, #92]	@ 0x5c
 801af88:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801af8a:	4413      	add	r3, r2
 801af8c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801af8e:	7812      	ldrb	r2, [r2, #0]
 801af90:	701a      	strb	r2, [r3, #0]
 801af92:	e000      	b.n	801af96 <mg_parse_pem+0xf2>
      continue;
 801af94:	bf00      	nop
  for (c = caps[2].buf; c < caps[2].buf + caps[2].len; c++) {
 801af96:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801af98:	3301      	adds	r3, #1
 801af9a:	65bb      	str	r3, [r7, #88]	@ 0x58
 801af9c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801af9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801afa0:	4413      	add	r3, r2
 801afa2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801afa4:	429a      	cmp	r2, r3
 801afa6:	d3dc      	bcc.n	801af62 <mg_parse_pem+0xbe>
  }
  m = mg_base64_decode(s, n, s, n);
 801afa8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801afaa:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801afac:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 801afae:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 801afb0:	f7ec ff5c 	bl	8007e6c <mg_base64_decode>
 801afb4:	6578      	str	r0, [r7, #84]	@ 0x54
  if (m == 0) {
 801afb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801afb8:	2b00      	cmp	r3, #0
 801afba:	d105      	bne.n	801afc8 <mg_parse_pem+0x124>
    free(s);
 801afbc:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 801afbe:	f00a fcf9 	bl	80259b4 <free>
    return -1;
 801afc2:	f04f 33ff 	mov.w	r3, #4294967295
 801afc6:	e006      	b.n	801afd6 <mg_parse_pem+0x132>
  }
  der->buf = s;
 801afc8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801afca:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801afcc:	601a      	str	r2, [r3, #0]
  der->len = m;
 801afce:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801afd0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801afd2:	605a      	str	r2, [r3, #4]
  return 0;
 801afd4:	2300      	movs	r3, #0
}
 801afd6:	4618      	mov	r0, r3
 801afd8:	3764      	adds	r7, #100	@ 0x64
 801afda:	46bd      	mov	sp, r7
 801afdc:	bd90      	pop	{r4, r7, pc}
 801afde:	bf00      	nop
 801afe0:	0802c208 	.word	0x0802c208

0801afe4 <mg_tls_init>:

void mg_tls_init(struct mg_connection *c, const struct mg_tls_opts *opts) {
 801afe4:	b580      	push	{r7, lr}
 801afe6:	b090      	sub	sp, #64	@ 0x40
 801afe8:	af02      	add	r7, sp, #8
 801afea:	6078      	str	r0, [r7, #4]
 801afec:	6039      	str	r1, [r7, #0]
  struct mg_str key;
  struct tls_data *tls = (struct tls_data *) calloc(1, sizeof(struct tls_data));
 801afee:	f44f 61a8 	mov.w	r1, #1344	@ 0x540
 801aff2:	2001      	movs	r0, #1
 801aff4:	f00a fcba 	bl	802596c <calloc>
 801aff8:	4603      	mov	r3, r0
 801affa:	637b      	str	r3, [r7, #52]	@ 0x34
  if (tls == NULL) {
 801affc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801affe:	2b00      	cmp	r3, #0
 801b000:	d104      	bne.n	801b00c <mg_tls_init+0x28>
    mg_error(c, "tls oom");
 801b002:	49a5      	ldr	r1, [pc, #660]	@ (801b298 <mg_tls_init+0x2b4>)
 801b004:	6878      	ldr	r0, [r7, #4]
 801b006:	f7ed fdd5 	bl	8008bb4 <mg_error>
    return;
 801b00a:	e141      	b.n	801b290 <mg_tls_init+0x2ac>
  }

  tls->state =
      c->is_client ? MG_TLS_STATE_CLIENT_START : MG_TLS_STATE_SERVER_START;
 801b00c:	687b      	ldr	r3, [r7, #4]
 801b00e:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801b012:	f003 0302 	and.w	r3, r3, #2
 801b016:	b2db      	uxtb	r3, r3
 801b018:	2b00      	cmp	r3, #0
 801b01a:	d001      	beq.n	801b020 <mg_tls_init+0x3c>
 801b01c:	2200      	movs	r2, #0
 801b01e:	e000      	b.n	801b022 <mg_tls_init+0x3e>
 801b020:	2207      	movs	r2, #7
  tls->state =
 801b022:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b024:	701a      	strb	r2, [r3, #0]

  tls->skip_verification = opts->skip_verification;
 801b026:	683b      	ldr	r3, [r7, #0]
 801b028:	6a1a      	ldr	r2, [r3, #32]
 801b02a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b02c:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
  // tls->send.align = MG_IO_SIZE;

  c->tls = tls;
 801b030:	687b      	ldr	r3, [r7, #4]
 801b032:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801b034:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  c->is_tls = c->is_tls_hs = 1;
 801b038:	687a      	ldr	r2, [r7, #4]
 801b03a:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 801b03e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801b042:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
 801b046:	687b      	ldr	r3, [r7, #4]
 801b048:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801b04c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 801b050:	b2d9      	uxtb	r1, r3
 801b052:	687a      	ldr	r2, [r7, #4]
 801b054:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 801b058:	f361 1386 	bfi	r3, r1, #6, #1
 801b05c:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
  mg_sha256_init(&tls->sha256);
 801b060:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b062:	3320      	adds	r3, #32
 801b064:	4618      	mov	r0, r3
 801b066:	f7f9 ff51 	bl	8014f0c <mg_sha256_init>

  // save hostname (client extension)
  if (opts->name.len > 0) {
 801b06a:	683b      	ldr	r3, [r7, #0]
 801b06c:	69db      	ldr	r3, [r3, #28]
 801b06e:	2b00      	cmp	r3, #0
 801b070:	d018      	beq.n	801b0a4 <mg_tls_init+0xc0>
    if (opts->name.len >= sizeof(tls->hostname) - 1) {
 801b072:	683b      	ldr	r3, [r7, #0]
 801b074:	69db      	ldr	r3, [r3, #28]
 801b076:	2bfc      	cmp	r3, #252	@ 0xfc
 801b078:	d904      	bls.n	801b084 <mg_tls_init+0xa0>
      mg_error(c, "hostname too long");
 801b07a:	4988      	ldr	r1, [pc, #544]	@ (801b29c <mg_tls_init+0x2b8>)
 801b07c:	6878      	ldr	r0, [r7, #4]
 801b07e:	f7ed fd99 	bl	8008bb4 <mg_error>
      return;
 801b082:	e105      	b.n	801b290 <mg_tls_init+0x2ac>
    }
    strncpy((char *) tls->hostname, opts->name.buf, sizeof(tls->hostname) - 1);
 801b084:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b086:	f503 70a4 	add.w	r0, r3, #328	@ 0x148
 801b08a:	683b      	ldr	r3, [r7, #0]
 801b08c:	699b      	ldr	r3, [r3, #24]
 801b08e:	22fd      	movs	r2, #253	@ 0xfd
 801b090:	4619      	mov	r1, r3
 801b092:	f00c fb40 	bl	8027716 <strncpy>
    tls->hostname[opts->name.len] = 0;
 801b096:	683b      	ldr	r3, [r7, #0]
 801b098:	69db      	ldr	r3, [r3, #28]
 801b09a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801b09c:	4413      	add	r3, r2
 801b09e:	2200      	movs	r2, #0
 801b0a0:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
  }
  // server CA certificate, store serial number
  if (opts->ca.len > 0) {
 801b0a4:	683b      	ldr	r3, [r7, #0]
 801b0a6:	685b      	ldr	r3, [r3, #4]
 801b0a8:	2b00      	cmp	r3, #0
 801b0aa:	d023      	beq.n	801b0f4 <mg_tls_init+0x110>
    if (mg_parse_pem(opts->ca, mg_str_s("CERTIFICATE"), &tls->ca_der) < 0) {
 801b0ac:	f107 0314 	add.w	r3, r7, #20
 801b0b0:	497b      	ldr	r1, [pc, #492]	@ (801b2a0 <mg_tls_init+0x2bc>)
 801b0b2:	4618      	mov	r0, r3
 801b0b4:	f7fb fbf6 	bl	80168a4 <mg_str_s>
 801b0b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b0ba:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 801b0be:	6839      	ldr	r1, [r7, #0]
 801b0c0:	9300      	str	r3, [sp, #0]
 801b0c2:	f107 0314 	add.w	r3, r7, #20
 801b0c6:	cb0c      	ldmia	r3, {r2, r3}
 801b0c8:	c903      	ldmia	r1, {r0, r1}
 801b0ca:	f7ff feeb 	bl	801aea4 <mg_parse_pem>
 801b0ce:	4603      	mov	r3, r0
 801b0d0:	2b00      	cmp	r3, #0
 801b0d2:	da0f      	bge.n	801b0f4 <mg_tls_init+0x110>
      MG_ERROR(("Failed to load certificate"));
 801b0d4:	4b73      	ldr	r3, [pc, #460]	@ (801b2a4 <mg_tls_init+0x2c0>)
 801b0d6:	681b      	ldr	r3, [r3, #0]
 801b0d8:	2b00      	cmp	r3, #0
 801b0da:	f340 80d0 	ble.w	801b27e <mg_tls_init+0x29a>
 801b0de:	4b72      	ldr	r3, [pc, #456]	@ (801b2a8 <mg_tls_init+0x2c4>)
 801b0e0:	f243 02b6 	movw	r2, #12470	@ 0x30b6
 801b0e4:	4971      	ldr	r1, [pc, #452]	@ (801b2ac <mg_tls_init+0x2c8>)
 801b0e6:	2001      	movs	r0, #1
 801b0e8:	f7f3 fbdc 	bl	800e8a4 <mg_log_prefix>
 801b0ec:	4870      	ldr	r0, [pc, #448]	@ (801b2b0 <mg_tls_init+0x2cc>)
 801b0ee:	f7f3 fc29 	bl	800e944 <mg_log>
      return;
 801b0f2:	e0c4      	b.n	801b27e <mg_tls_init+0x29a>
    }
  }

  if (opts->cert.buf == NULL) {
 801b0f4:	683b      	ldr	r3, [r7, #0]
 801b0f6:	689b      	ldr	r3, [r3, #8]
 801b0f8:	2b00      	cmp	r3, #0
 801b0fa:	d10f      	bne.n	801b11c <mg_tls_init+0x138>
    MG_VERBOSE(("No certificate provided"));
 801b0fc:	4b69      	ldr	r3, [pc, #420]	@ (801b2a4 <mg_tls_init+0x2c0>)
 801b0fe:	681b      	ldr	r3, [r3, #0]
 801b100:	2b03      	cmp	r3, #3
 801b102:	f340 80be 	ble.w	801b282 <mg_tls_init+0x29e>
 801b106:	4b68      	ldr	r3, [pc, #416]	@ (801b2a8 <mg_tls_init+0x2c4>)
 801b108:	f243 02bc 	movw	r2, #12476	@ 0x30bc
 801b10c:	4967      	ldr	r1, [pc, #412]	@ (801b2ac <mg_tls_init+0x2c8>)
 801b10e:	2004      	movs	r0, #4
 801b110:	f7f3 fbc8 	bl	800e8a4 <mg_log_prefix>
 801b114:	4867      	ldr	r0, [pc, #412]	@ (801b2b4 <mg_tls_init+0x2d0>)
 801b116:	f7f3 fc15 	bl	800e944 <mg_log>
    return;
 801b11a:	e0b2      	b.n	801b282 <mg_tls_init+0x29e>
  }

  // parse PEM or DER certificate
  if (mg_parse_pem(opts->cert, mg_str_s("CERTIFICATE"), &tls->cert_der) < 0) {
 801b11c:	f107 031c 	add.w	r3, r7, #28
 801b120:	495f      	ldr	r1, [pc, #380]	@ (801b2a0 <mg_tls_init+0x2bc>)
 801b122:	4618      	mov	r0, r3
 801b124:	f7fb fbbe 	bl	80168a4 <mg_str_s>
 801b128:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b12a:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 801b12e:	6839      	ldr	r1, [r7, #0]
 801b130:	9300      	str	r3, [sp, #0]
 801b132:	f107 031c 	add.w	r3, r7, #28
 801b136:	cb0c      	ldmia	r3, {r2, r3}
 801b138:	3108      	adds	r1, #8
 801b13a:	c903      	ldmia	r1, {r0, r1}
 801b13c:	f7ff feb2 	bl	801aea4 <mg_parse_pem>
 801b140:	4603      	mov	r3, r0
 801b142:	2b00      	cmp	r3, #0
 801b144:	da0f      	bge.n	801b166 <mg_tls_init+0x182>
    MG_ERROR(("Failed to load certificate"));
 801b146:	4b57      	ldr	r3, [pc, #348]	@ (801b2a4 <mg_tls_init+0x2c0>)
 801b148:	681b      	ldr	r3, [r3, #0]
 801b14a:	2b00      	cmp	r3, #0
 801b14c:	f340 809b 	ble.w	801b286 <mg_tls_init+0x2a2>
 801b150:	4b55      	ldr	r3, [pc, #340]	@ (801b2a8 <mg_tls_init+0x2c4>)
 801b152:	f243 02c2 	movw	r2, #12482	@ 0x30c2
 801b156:	4955      	ldr	r1, [pc, #340]	@ (801b2ac <mg_tls_init+0x2c8>)
 801b158:	2001      	movs	r0, #1
 801b15a:	f7f3 fba3 	bl	800e8a4 <mg_log_prefix>
 801b15e:	4854      	ldr	r0, [pc, #336]	@ (801b2b0 <mg_tls_init+0x2cc>)
 801b160:	f7f3 fbf0 	bl	800e944 <mg_log>
    return;
 801b164:	e08f      	b.n	801b286 <mg_tls_init+0x2a2>
  }

  // parse PEM or DER EC key
  if (opts->key.buf == NULL) {
 801b166:	683b      	ldr	r3, [r7, #0]
 801b168:	691b      	ldr	r3, [r3, #16]
 801b16a:	2b00      	cmp	r3, #0
 801b16c:	d104      	bne.n	801b178 <mg_tls_init+0x194>
    mg_error(c, "Certificate provided without a private key");
 801b16e:	4952      	ldr	r1, [pc, #328]	@ (801b2b8 <mg_tls_init+0x2d4>)
 801b170:	6878      	ldr	r0, [r7, #4]
 801b172:	f7ed fd1f 	bl	8008bb4 <mg_error>
    return;
 801b176:	e08b      	b.n	801b290 <mg_tls_init+0x2ac>
  }

  if (mg_parse_pem(opts->key, mg_str_s("EC PRIVATE KEY"), &key) == 0) {
 801b178:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801b17c:	494f      	ldr	r1, [pc, #316]	@ (801b2bc <mg_tls_init+0x2d8>)
 801b17e:	4618      	mov	r0, r3
 801b180:	f7fb fb90 	bl	80168a4 <mg_str_s>
 801b184:	6839      	ldr	r1, [r7, #0]
 801b186:	f107 030c 	add.w	r3, r7, #12
 801b18a:	9300      	str	r3, [sp, #0]
 801b18c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801b190:	cb0c      	ldmia	r3, {r2, r3}
 801b192:	3110      	adds	r1, #16
 801b194:	c903      	ldmia	r1, {r0, r1}
 801b196:	f7ff fe85 	bl	801aea4 <mg_parse_pem>
 801b19a:	4603      	mov	r3, r0
 801b19c:	2b00      	cmp	r3, #0
 801b19e:	d150      	bne.n	801b242 <mg_tls_init+0x25e>
    if (key.len < 39) {
 801b1a0:	693b      	ldr	r3, [r7, #16]
 801b1a2:	2b26      	cmp	r3, #38	@ 0x26
 801b1a4:	d80e      	bhi.n	801b1c4 <mg_tls_init+0x1e0>
      MG_ERROR(("EC private key too short"));
 801b1a6:	4b3f      	ldr	r3, [pc, #252]	@ (801b2a4 <mg_tls_init+0x2c0>)
 801b1a8:	681b      	ldr	r3, [r3, #0]
 801b1aa:	2b00      	cmp	r3, #0
 801b1ac:	dd6d      	ble.n	801b28a <mg_tls_init+0x2a6>
 801b1ae:	4b3e      	ldr	r3, [pc, #248]	@ (801b2a8 <mg_tls_init+0x2c4>)
 801b1b0:	f243 02ce 	movw	r2, #12494	@ 0x30ce
 801b1b4:	493d      	ldr	r1, [pc, #244]	@ (801b2ac <mg_tls_init+0x2c8>)
 801b1b6:	2001      	movs	r0, #1
 801b1b8:	f7f3 fb74 	bl	800e8a4 <mg_log_prefix>
 801b1bc:	4840      	ldr	r0, [pc, #256]	@ (801b2c0 <mg_tls_init+0x2dc>)
 801b1be:	f7f3 fbc1 	bl	800e944 <mg_log>
      return;
 801b1c2:	e062      	b.n	801b28a <mg_tls_init+0x2a6>
    }
    // expect ASN.1 SEQUENCE=[INTEGER=1, BITSTRING of 32 bytes, ...]
    // 30 nn 02 01 01 04 20 [key] ...
    if (key.buf[0] != 0x30 || (key.buf[1] & 0x80) != 0) {
 801b1c4:	68fb      	ldr	r3, [r7, #12]
 801b1c6:	781b      	ldrb	r3, [r3, #0]
 801b1c8:	2b30      	cmp	r3, #48	@ 0x30
 801b1ca:	d105      	bne.n	801b1d8 <mg_tls_init+0x1f4>
 801b1cc:	68fb      	ldr	r3, [r7, #12]
 801b1ce:	3301      	adds	r3, #1
 801b1d0:	781b      	ldrb	r3, [r3, #0]
 801b1d2:	b25b      	sxtb	r3, r3
 801b1d4:	2b00      	cmp	r3, #0
 801b1d6:	da0e      	bge.n	801b1f6 <mg_tls_init+0x212>
      MG_ERROR(("EC private key: ASN.1 bad sequence"));
 801b1d8:	4b32      	ldr	r3, [pc, #200]	@ (801b2a4 <mg_tls_init+0x2c0>)
 801b1da:	681b      	ldr	r3, [r3, #0]
 801b1dc:	2b00      	cmp	r3, #0
 801b1de:	dd56      	ble.n	801b28e <mg_tls_init+0x2aa>
 801b1e0:	4b31      	ldr	r3, [pc, #196]	@ (801b2a8 <mg_tls_init+0x2c4>)
 801b1e2:	f243 02d4 	movw	r2, #12500	@ 0x30d4
 801b1e6:	4931      	ldr	r1, [pc, #196]	@ (801b2ac <mg_tls_init+0x2c8>)
 801b1e8:	2001      	movs	r0, #1
 801b1ea:	f7f3 fb5b 	bl	800e8a4 <mg_log_prefix>
 801b1ee:	4835      	ldr	r0, [pc, #212]	@ (801b2c4 <mg_tls_init+0x2e0>)
 801b1f0:	f7f3 fba8 	bl	800e944 <mg_log>
      return;
 801b1f4:	e04b      	b.n	801b28e <mg_tls_init+0x2aa>
    }
    if (memcmp(key.buf + 2, "\x02\x01\x01\x04\x20", 5) != 0) {
 801b1f6:	68fb      	ldr	r3, [r7, #12]
 801b1f8:	3302      	adds	r3, #2
 801b1fa:	2205      	movs	r2, #5
 801b1fc:	4932      	ldr	r1, [pc, #200]	@ (801b2c8 <mg_tls_init+0x2e4>)
 801b1fe:	4618      	mov	r0, r3
 801b200:	f00c fa38 	bl	8027674 <memcmp>
 801b204:	4603      	mov	r3, r0
 801b206:	2b00      	cmp	r3, #0
 801b208:	d00d      	beq.n	801b226 <mg_tls_init+0x242>
      MG_ERROR(("EC private key: ASN.1 bad data"));
 801b20a:	4b26      	ldr	r3, [pc, #152]	@ (801b2a4 <mg_tls_init+0x2c0>)
 801b20c:	681b      	ldr	r3, [r3, #0]
 801b20e:	2b00      	cmp	r3, #0
 801b210:	dd09      	ble.n	801b226 <mg_tls_init+0x242>
 801b212:	4b25      	ldr	r3, [pc, #148]	@ (801b2a8 <mg_tls_init+0x2c4>)
 801b214:	f243 02d8 	movw	r2, #12504	@ 0x30d8
 801b218:	4924      	ldr	r1, [pc, #144]	@ (801b2ac <mg_tls_init+0x2c8>)
 801b21a:	2001      	movs	r0, #1
 801b21c:	f7f3 fb42 	bl	800e8a4 <mg_log_prefix>
 801b220:	482a      	ldr	r0, [pc, #168]	@ (801b2cc <mg_tls_init+0x2e8>)
 801b222:	f7f3 fb8f 	bl	800e944 <mg_log>
    }
    memmove(tls->ec_key, key.buf + 7, 32);
 801b226:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b228:	f503 7094 	add.w	r0, r3, #296	@ 0x128
 801b22c:	68fb      	ldr	r3, [r7, #12]
 801b22e:	3307      	adds	r3, #7
 801b230:	2220      	movs	r2, #32
 801b232:	4619      	mov	r1, r3
 801b234:	f00c fa2e 	bl	8027694 <memmove>
    free((void *) key.buf);
 801b238:	68fb      	ldr	r3, [r7, #12]
 801b23a:	4618      	mov	r0, r3
 801b23c:	f00a fbba 	bl	80259b4 <free>
 801b240:	e026      	b.n	801b290 <mg_tls_init+0x2ac>
  } else if (mg_parse_pem(opts->key, mg_str_s("PRIVATE KEY"), &key) == 0) {
 801b242:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801b246:	4922      	ldr	r1, [pc, #136]	@ (801b2d0 <mg_tls_init+0x2ec>)
 801b248:	4618      	mov	r0, r3
 801b24a:	f7fb fb2b 	bl	80168a4 <mg_str_s>
 801b24e:	6839      	ldr	r1, [r7, #0]
 801b250:	f107 030c 	add.w	r3, r7, #12
 801b254:	9300      	str	r3, [sp, #0]
 801b256:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801b25a:	cb0c      	ldmia	r3, {r2, r3}
 801b25c:	3110      	adds	r1, #16
 801b25e:	c903      	ldmia	r1, {r0, r1}
 801b260:	f7ff fe20 	bl	801aea4 <mg_parse_pem>
 801b264:	4603      	mov	r3, r0
 801b266:	2b00      	cmp	r3, #0
 801b268:	d104      	bne.n	801b274 <mg_tls_init+0x290>
    mg_error(c, "PKCS8 private key format is not supported");
 801b26a:	491a      	ldr	r1, [pc, #104]	@ (801b2d4 <mg_tls_init+0x2f0>)
 801b26c:	6878      	ldr	r0, [r7, #4]
 801b26e:	f7ed fca1 	bl	8008bb4 <mg_error>
 801b272:	e00d      	b.n	801b290 <mg_tls_init+0x2ac>
  } else {
    mg_error(c, "Expected EC PRIVATE KEY or PRIVATE KEY");
 801b274:	4918      	ldr	r1, [pc, #96]	@ (801b2d8 <mg_tls_init+0x2f4>)
 801b276:	6878      	ldr	r0, [r7, #4]
 801b278:	f7ed fc9c 	bl	8008bb4 <mg_error>
 801b27c:	e008      	b.n	801b290 <mg_tls_init+0x2ac>
      return;
 801b27e:	bf00      	nop
 801b280:	e006      	b.n	801b290 <mg_tls_init+0x2ac>
    return;
 801b282:	bf00      	nop
 801b284:	e004      	b.n	801b290 <mg_tls_init+0x2ac>
    return;
 801b286:	bf00      	nop
 801b288:	e002      	b.n	801b290 <mg_tls_init+0x2ac>
      return;
 801b28a:	bf00      	nop
 801b28c:	e000      	b.n	801b290 <mg_tls_init+0x2ac>
      return;
 801b28e:	bf00      	nop
  }
}
 801b290:	3738      	adds	r7, #56	@ 0x38
 801b292:	46bd      	mov	sp, r7
 801b294:	bd80      	pop	{r7, pc}
 801b296:	bf00      	nop
 801b298:	0802c22c 	.word	0x0802c22c
 801b29c:	0802c234 	.word	0x0802c234
 801b2a0:	0802c248 	.word	0x0802c248
 801b2a4:	24000258 	.word	0x24000258
 801b2a8:	0802db30 	.word	0x0802db30
 801b2ac:	08029c3c 	.word	0x08029c3c
 801b2b0:	0802c254 	.word	0x0802c254
 801b2b4:	0802c270 	.word	0x0802c270
 801b2b8:	0802c288 	.word	0x0802c288
 801b2bc:	0802c2b4 	.word	0x0802c2b4
 801b2c0:	0802c2c4 	.word	0x0802c2c4
 801b2c4:	0802c2e0 	.word	0x0802c2e0
 801b2c8:	0802c304 	.word	0x0802c304
 801b2cc:	0802c30c 	.word	0x0802c30c
 801b2d0:	0802c32c 	.word	0x0802c32c
 801b2d4:	0802c338 	.word	0x0802c338
 801b2d8:	0802c364 	.word	0x0802c364

0801b2dc <mg_tls_free>:

void mg_tls_free(struct mg_connection *c) {
 801b2dc:	b580      	push	{r7, lr}
 801b2de:	b084      	sub	sp, #16
 801b2e0:	af00      	add	r7, sp, #0
 801b2e2:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 801b2e4:	687b      	ldr	r3, [r7, #4]
 801b2e6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801b2ea:	60fb      	str	r3, [r7, #12]
  if (tls != NULL) {
 801b2ec:	68fb      	ldr	r3, [r7, #12]
 801b2ee:	2b00      	cmp	r3, #0
 801b2f0:	d010      	beq.n	801b314 <mg_tls_free+0x38>
    mg_iobuf_free(&tls->send);
 801b2f2:	68fb      	ldr	r3, [r7, #12]
 801b2f4:	3304      	adds	r3, #4
 801b2f6:	4618      	mov	r0, r3
 801b2f8:	f7f2 fb07 	bl	800d90a <mg_iobuf_free>
    free((void *) tls->cert_der.buf);
 801b2fc:	68fb      	ldr	r3, [r7, #12]
 801b2fe:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 801b302:	4618      	mov	r0, r3
 801b304:	f00a fb56 	bl	80259b4 <free>
    free((void *) tls->ca_der.buf);
 801b308:	68fb      	ldr	r3, [r7, #12]
 801b30a:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 801b30e:	4618      	mov	r0, r3
 801b310:	f00a fb50 	bl	80259b4 <free>
  }
  free(c->tls);
 801b314:	687b      	ldr	r3, [r7, #4]
 801b316:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801b31a:	4618      	mov	r0, r3
 801b31c:	f00a fb4a 	bl	80259b4 <free>
  c->tls = NULL;
 801b320:	687b      	ldr	r3, [r7, #4]
 801b322:	2200      	movs	r2, #0
 801b324:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
}
 801b328:	bf00      	nop
 801b32a:	3710      	adds	r7, #16
 801b32c:	46bd      	mov	sp, r7
 801b32e:	bd80      	pop	{r7, pc}

0801b330 <mg_tls_send>:

long mg_tls_send(struct mg_connection *c, const void *buf, size_t len) {
 801b330:	b590      	push	{r4, r7, lr}
 801b332:	b08d      	sub	sp, #52	@ 0x34
 801b334:	af04      	add	r7, sp, #16
 801b336:	60f8      	str	r0, [r7, #12]
 801b338:	60b9      	str	r1, [r7, #8]
 801b33a:	607a      	str	r2, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 801b33c:	68fb      	ldr	r3, [r7, #12]
 801b33e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801b342:	61bb      	str	r3, [r7, #24]
  long n = MG_IO_WAIT;
 801b344:	f06f 0301 	mvn.w	r3, #1
 801b348:	61fb      	str	r3, [r7, #28]
  bool was_throttled = c->is_tls_throttled;  // see #3074
 801b34a:	68fb      	ldr	r3, [r7, #12]
 801b34c:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 801b350:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 801b354:	b2db      	uxtb	r3, r3
 801b356:	2b00      	cmp	r3, #0
 801b358:	bf14      	ite	ne
 801b35a:	2301      	movne	r3, #1
 801b35c:	2300      	moveq	r3, #0
 801b35e:	75fb      	strb	r3, [r7, #23]
  if (!was_throttled) {                      // encrypt new data
 801b360:	7dfb      	ldrb	r3, [r7, #23]
 801b362:	f083 0301 	eor.w	r3, r3, #1
 801b366:	b2db      	uxtb	r3, r3
 801b368:	2b00      	cmp	r3, #0
 801b36a:	d01b      	beq.n	801b3a4 <mg_tls_send+0x74>
    if (len > MG_IO_SIZE) len = MG_IO_SIZE;
 801b36c:	687b      	ldr	r3, [r7, #4]
 801b36e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801b372:	d902      	bls.n	801b37a <mg_tls_send+0x4a>
 801b374:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801b378:	607b      	str	r3, [r7, #4]
    if (len > 16384) len = 16384;
 801b37a:	687b      	ldr	r3, [r7, #4]
 801b37c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801b380:	d902      	bls.n	801b388 <mg_tls_send+0x58>
 801b382:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 801b386:	607b      	str	r3, [r7, #4]
    mg_tls_encrypt(c, (const uint8_t *) buf, len, MG_TLS_APP_DATA);
 801b388:	2317      	movs	r3, #23
 801b38a:	687a      	ldr	r2, [r7, #4]
 801b38c:	68b9      	ldr	r1, [r7, #8]
 801b38e:	68f8      	ldr	r0, [r7, #12]
 801b390:	f7fc fd30 	bl	8017df4 <mg_tls_encrypt>
  }  // else, resend outstanding encrypted data in tls->send
  while (tls->send.len > 0 &&
 801b394:	e006      	b.n	801b3a4 <mg_tls_send+0x74>
         (n = mg_io_send(c, tls->send.buf, tls->send.len)) > 0) {
    mg_iobuf_del(&tls->send, 0, (size_t) n);
 801b396:	69bb      	ldr	r3, [r7, #24]
 801b398:	3304      	adds	r3, #4
 801b39a:	69fa      	ldr	r2, [r7, #28]
 801b39c:	2100      	movs	r1, #0
 801b39e:	4618      	mov	r0, r3
 801b3a0:	f7f2 fa68 	bl	800d874 <mg_iobuf_del>
  while (tls->send.len > 0 &&
 801b3a4:	69bb      	ldr	r3, [r7, #24]
 801b3a6:	68db      	ldr	r3, [r3, #12]
 801b3a8:	2b00      	cmp	r3, #0
 801b3aa:	d00b      	beq.n	801b3c4 <mg_tls_send+0x94>
         (n = mg_io_send(c, tls->send.buf, tls->send.len)) > 0) {
 801b3ac:	69bb      	ldr	r3, [r7, #24]
 801b3ae:	6859      	ldr	r1, [r3, #4]
 801b3b0:	69bb      	ldr	r3, [r7, #24]
 801b3b2:	68db      	ldr	r3, [r3, #12]
 801b3b4:	461a      	mov	r2, r3
 801b3b6:	68f8      	ldr	r0, [r7, #12]
 801b3b8:	f7f5 fe6c 	bl	8011094 <mg_io_send>
 801b3bc:	61f8      	str	r0, [r7, #28]
  while (tls->send.len > 0 &&
 801b3be:	69fb      	ldr	r3, [r7, #28]
 801b3c0:	2b00      	cmp	r3, #0
 801b3c2:	dce8      	bgt.n	801b396 <mg_tls_send+0x66>
  } // if last chunk fails to be sent, it needs to be flushed
  c->is_tls_throttled = (tls->send.len > 0 && n == MG_IO_WAIT);
 801b3c4:	69bb      	ldr	r3, [r7, #24]
 801b3c6:	68db      	ldr	r3, [r3, #12]
 801b3c8:	2b00      	cmp	r3, #0
 801b3ca:	d005      	beq.n	801b3d8 <mg_tls_send+0xa8>
 801b3cc:	69fb      	ldr	r3, [r7, #28]
 801b3ce:	f113 0f02 	cmn.w	r3, #2
 801b3d2:	d101      	bne.n	801b3d8 <mg_tls_send+0xa8>
 801b3d4:	2301      	movs	r3, #1
 801b3d6:	e000      	b.n	801b3da <mg_tls_send+0xaa>
 801b3d8:	2300      	movs	r3, #0
 801b3da:	f003 0301 	and.w	r3, r3, #1
 801b3de:	b2d9      	uxtb	r1, r3
 801b3e0:	68fa      	ldr	r2, [r7, #12]
 801b3e2:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 801b3e6:	f361 13c7 	bfi	r3, r1, #7, #1
 801b3ea:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
  MG_VERBOSE(("%lu %ld %ld %ld %c %c", c->id, (long) len, (long) tls->send.len,
 801b3ee:	4b1e      	ldr	r3, [pc, #120]	@ (801b468 <mg_tls_send+0x138>)
 801b3f0:	681b      	ldr	r3, [r3, #0]
 801b3f2:	2b03      	cmp	r3, #3
 801b3f4:	dd26      	ble.n	801b444 <mg_tls_send+0x114>
 801b3f6:	4b1d      	ldr	r3, [pc, #116]	@ (801b46c <mg_tls_send+0x13c>)
 801b3f8:	f243 02fc 	movw	r2, #12540	@ 0x30fc
 801b3fc:	491c      	ldr	r1, [pc, #112]	@ (801b470 <mg_tls_send+0x140>)
 801b3fe:	2004      	movs	r0, #4
 801b400:	f7f3 fa50 	bl	800e8a4 <mg_log_prefix>
 801b404:	68fb      	ldr	r3, [r7, #12]
 801b406:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 801b408:	6878      	ldr	r0, [r7, #4]
 801b40a:	69bb      	ldr	r3, [r7, #24]
 801b40c:	68db      	ldr	r3, [r3, #12]
 801b40e:	461c      	mov	r4, r3
 801b410:	7dfb      	ldrb	r3, [r7, #23]
 801b412:	2b00      	cmp	r3, #0
 801b414:	d001      	beq.n	801b41a <mg_tls_send+0xea>
 801b416:	2354      	movs	r3, #84	@ 0x54
 801b418:	e000      	b.n	801b41c <mg_tls_send+0xec>
 801b41a:	2374      	movs	r3, #116	@ 0x74
 801b41c:	68fa      	ldr	r2, [r7, #12]
 801b41e:	f892 20ad 	ldrb.w	r2, [r2, #173]	@ 0xad
 801b422:	f022 027f 	bic.w	r2, r2, #127	@ 0x7f
 801b426:	b2d2      	uxtb	r2, r2
 801b428:	2a00      	cmp	r2, #0
 801b42a:	d001      	beq.n	801b430 <mg_tls_send+0x100>
 801b42c:	2254      	movs	r2, #84	@ 0x54
 801b42e:	e000      	b.n	801b432 <mg_tls_send+0x102>
 801b430:	2274      	movs	r2, #116	@ 0x74
 801b432:	9202      	str	r2, [sp, #8]
 801b434:	9301      	str	r3, [sp, #4]
 801b436:	69fb      	ldr	r3, [r7, #28]
 801b438:	9300      	str	r3, [sp, #0]
 801b43a:	4623      	mov	r3, r4
 801b43c:	4602      	mov	r2, r0
 801b43e:	480d      	ldr	r0, [pc, #52]	@ (801b474 <mg_tls_send+0x144>)
 801b440:	f7f3 fa80 	bl	800e944 <mg_log>
              n, was_throttled ? 'T' : 't', c->is_tls_throttled ? 'T' : 't'));
  if (n == MG_IO_ERR) return MG_IO_ERR;
 801b444:	69fb      	ldr	r3, [r7, #28]
 801b446:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b44a:	d102      	bne.n	801b452 <mg_tls_send+0x122>
 801b44c:	f04f 33ff 	mov.w	r3, #4294967295
 801b450:	e006      	b.n	801b460 <mg_tls_send+0x130>
  if (was_throttled) return MG_IO_WAIT;  // sent throttled data instead
 801b452:	7dfb      	ldrb	r3, [r7, #23]
 801b454:	2b00      	cmp	r3, #0
 801b456:	d002      	beq.n	801b45e <mg_tls_send+0x12e>
 801b458:	f06f 0301 	mvn.w	r3, #1
 801b45c:	e000      	b.n	801b460 <mg_tls_send+0x130>
  return (long) len;  // return len even when throttled, already encripted that
 801b45e:	687b      	ldr	r3, [r7, #4]
}
 801b460:	4618      	mov	r0, r3
 801b462:	3724      	adds	r7, #36	@ 0x24
 801b464:	46bd      	mov	sp, r7
 801b466:	bd90      	pop	{r4, r7, pc}
 801b468:	24000258 	.word	0x24000258
 801b46c:	0802db3c 	.word	0x0802db3c
 801b470:	08029c3c 	.word	0x08029c3c
 801b474:	0802c38c 	.word	0x0802c38c

0801b478 <mg_tls_recv>:

long mg_tls_recv(struct mg_connection *c, void *buf, size_t len) {
 801b478:	b580      	push	{r7, lr}
 801b47a:	b088      	sub	sp, #32
 801b47c:	af00      	add	r7, sp, #0
 801b47e:	60f8      	str	r0, [r7, #12]
 801b480:	60b9      	str	r1, [r7, #8]
 801b482:	607a      	str	r2, [r7, #4]
  int r = 0;
 801b484:	2300      	movs	r3, #0
 801b486:	61fb      	str	r3, [r7, #28]
  struct tls_data *tls = (struct tls_data *) c->tls;
 801b488:	68fb      	ldr	r3, [r7, #12]
 801b48a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801b48e:	61bb      	str	r3, [r7, #24]
  unsigned char *recv_buf;
  size_t minlen;

  r = mg_tls_recv_record(c);
 801b490:	68f8      	ldr	r0, [r7, #12]
 801b492:	f7fc fdab 	bl	8017fec <mg_tls_recv_record>
 801b496:	61f8      	str	r0, [r7, #28]
  if (r < 0) {
 801b498:	69fb      	ldr	r3, [r7, #28]
 801b49a:	2b00      	cmp	r3, #0
 801b49c:	da01      	bge.n	801b4a2 <mg_tls_recv+0x2a>
    return r;
 801b49e:	69fb      	ldr	r3, [r7, #28]
 801b4a0:	e03a      	b.n	801b518 <mg_tls_recv+0xa0>
  }
  recv_buf = &c->rtls.buf[tls->recv_offset];
 801b4a2:	68fb      	ldr	r3, [r7, #12]
 801b4a4:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 801b4a6:	69bb      	ldr	r3, [r7, #24]
 801b4a8:	695b      	ldr	r3, [r3, #20]
 801b4aa:	4413      	add	r3, r2
 801b4ac:	617b      	str	r3, [r7, #20]

  if (tls->content_type != MG_TLS_APP_DATA) {
 801b4ae:	69bb      	ldr	r3, [r7, #24]
 801b4b0:	7f1b      	ldrb	r3, [r3, #28]
 801b4b2:	2b17      	cmp	r3, #23
 801b4b4:	d008      	beq.n	801b4c8 <mg_tls_recv+0x50>
    tls->recv_len = 0;
 801b4b6:	69bb      	ldr	r3, [r7, #24]
 801b4b8:	2200      	movs	r2, #0
 801b4ba:	619a      	str	r2, [r3, #24]
    mg_tls_drop_record(c);
 801b4bc:	68f8      	ldr	r0, [r7, #12]
 801b4be:	f7fc f926 	bl	801770e <mg_tls_drop_record>
    return MG_IO_WAIT;
 801b4c2:	f06f 0301 	mvn.w	r3, #1
 801b4c6:	e027      	b.n	801b518 <mg_tls_recv+0xa0>
  }
  if (buf == NULL || len == 0) return 0L;
 801b4c8:	68bb      	ldr	r3, [r7, #8]
 801b4ca:	2b00      	cmp	r3, #0
 801b4cc:	d002      	beq.n	801b4d4 <mg_tls_recv+0x5c>
 801b4ce:	687b      	ldr	r3, [r7, #4]
 801b4d0:	2b00      	cmp	r3, #0
 801b4d2:	d101      	bne.n	801b4d8 <mg_tls_recv+0x60>
 801b4d4:	2300      	movs	r3, #0
 801b4d6:	e01f      	b.n	801b518 <mg_tls_recv+0xa0>
  minlen = len < tls->recv_len ? len : tls->recv_len;
 801b4d8:	69bb      	ldr	r3, [r7, #24]
 801b4da:	699b      	ldr	r3, [r3, #24]
 801b4dc:	687a      	ldr	r2, [r7, #4]
 801b4de:	4293      	cmp	r3, r2
 801b4e0:	bf28      	it	cs
 801b4e2:	4613      	movcs	r3, r2
 801b4e4:	613b      	str	r3, [r7, #16]
  memmove(buf, recv_buf, minlen);
 801b4e6:	693a      	ldr	r2, [r7, #16]
 801b4e8:	6979      	ldr	r1, [r7, #20]
 801b4ea:	68b8      	ldr	r0, [r7, #8]
 801b4ec:	f00c f8d2 	bl	8027694 <memmove>
  tls->recv_offset += minlen;
 801b4f0:	69bb      	ldr	r3, [r7, #24]
 801b4f2:	695a      	ldr	r2, [r3, #20]
 801b4f4:	693b      	ldr	r3, [r7, #16]
 801b4f6:	441a      	add	r2, r3
 801b4f8:	69bb      	ldr	r3, [r7, #24]
 801b4fa:	615a      	str	r2, [r3, #20]
  tls->recv_len -= minlen;
 801b4fc:	69bb      	ldr	r3, [r7, #24]
 801b4fe:	699a      	ldr	r2, [r3, #24]
 801b500:	693b      	ldr	r3, [r7, #16]
 801b502:	1ad2      	subs	r2, r2, r3
 801b504:	69bb      	ldr	r3, [r7, #24]
 801b506:	619a      	str	r2, [r3, #24]
  if (tls->recv_len == 0) {
 801b508:	69bb      	ldr	r3, [r7, #24]
 801b50a:	699b      	ldr	r3, [r3, #24]
 801b50c:	2b00      	cmp	r3, #0
 801b50e:	d102      	bne.n	801b516 <mg_tls_recv+0x9e>
    mg_tls_drop_record(c);
 801b510:	68f8      	ldr	r0, [r7, #12]
 801b512:	f7fc f8fc 	bl	801770e <mg_tls_drop_record>
  }
  return (long) minlen;
 801b516:	693b      	ldr	r3, [r7, #16]
}
 801b518:	4618      	mov	r0, r3
 801b51a:	3720      	adds	r7, #32
 801b51c:	46bd      	mov	sp, r7
 801b51e:	bd80      	pop	{r7, pc}

0801b520 <mg_tls_pending>:

size_t mg_tls_pending(struct mg_connection *c) {
 801b520:	b480      	push	{r7}
 801b522:	b085      	sub	sp, #20
 801b524:	af00      	add	r7, sp, #0
 801b526:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 801b528:	687b      	ldr	r3, [r7, #4]
 801b52a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801b52e:	60fb      	str	r3, [r7, #12]
  return tls != NULL ? tls->recv_len : 0;
 801b530:	68fb      	ldr	r3, [r7, #12]
 801b532:	2b00      	cmp	r3, #0
 801b534:	d002      	beq.n	801b53c <mg_tls_pending+0x1c>
 801b536:	68fb      	ldr	r3, [r7, #12]
 801b538:	699b      	ldr	r3, [r3, #24]
 801b53a:	e000      	b.n	801b53e <mg_tls_pending+0x1e>
 801b53c:	2300      	movs	r3, #0
}
 801b53e:	4618      	mov	r0, r3
 801b540:	3714      	adds	r7, #20
 801b542:	46bd      	mov	sp, r7
 801b544:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b548:	4770      	bx	lr

0801b54a <mg_tls_flush>:

void mg_tls_flush(struct mg_connection *c) {
 801b54a:	b580      	push	{r7, lr}
 801b54c:	b084      	sub	sp, #16
 801b54e:	af00      	add	r7, sp, #0
 801b550:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 801b552:	687b      	ldr	r3, [r7, #4]
 801b554:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801b558:	60fb      	str	r3, [r7, #12]
  long n;
  while (tls->send.len > 0 &&
 801b55a:	e006      	b.n	801b56a <mg_tls_flush+0x20>
         (n = mg_io_send(c, tls->send.buf, tls->send.len)) > 0) {
    mg_iobuf_del(&tls->send, 0, (size_t) n);
 801b55c:	68fb      	ldr	r3, [r7, #12]
 801b55e:	3304      	adds	r3, #4
 801b560:	68ba      	ldr	r2, [r7, #8]
 801b562:	2100      	movs	r1, #0
 801b564:	4618      	mov	r0, r3
 801b566:	f7f2 f985 	bl	800d874 <mg_iobuf_del>
  while (tls->send.len > 0 &&
 801b56a:	68fb      	ldr	r3, [r7, #12]
 801b56c:	68db      	ldr	r3, [r3, #12]
 801b56e:	2b00      	cmp	r3, #0
 801b570:	d00b      	beq.n	801b58a <mg_tls_flush+0x40>
         (n = mg_io_send(c, tls->send.buf, tls->send.len)) > 0) {
 801b572:	68fb      	ldr	r3, [r7, #12]
 801b574:	6859      	ldr	r1, [r3, #4]
 801b576:	68fb      	ldr	r3, [r7, #12]
 801b578:	68db      	ldr	r3, [r3, #12]
 801b57a:	461a      	mov	r2, r3
 801b57c:	6878      	ldr	r0, [r7, #4]
 801b57e:	f7f5 fd89 	bl	8011094 <mg_io_send>
 801b582:	60b8      	str	r0, [r7, #8]
  while (tls->send.len > 0 &&
 801b584:	68bb      	ldr	r3, [r7, #8]
 801b586:	2b00      	cmp	r3, #0
 801b588:	dce8      	bgt.n	801b55c <mg_tls_flush+0x12>
  }
}
 801b58a:	bf00      	nop
 801b58c:	3710      	adds	r7, #16
 801b58e:	46bd      	mov	sp, r7
 801b590:	bd80      	pop	{r7, pc}

0801b592 <mg_tls_ctx_init>:

void mg_tls_ctx_init(struct mg_mgr *mgr) {
 801b592:	b480      	push	{r7}
 801b594:	b083      	sub	sp, #12
 801b596:	af00      	add	r7, sp, #0
 801b598:	6078      	str	r0, [r7, #4]
  (void) mgr;
}
 801b59a:	bf00      	nop
 801b59c:	370c      	adds	r7, #12
 801b59e:	46bd      	mov	sp, r7
 801b5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b5a4:	4770      	bx	lr
	...

0801b5a8 <initialize_state>:
#endif

static void initialize_state(uint32_t state[CHACHA20_STATE_WORDS],
                             const uint8_t key[CHACHA20_KEY_SIZE],
                             const uint8_t nonce[CHACHA20_NONCE_SIZE],
                             uint32_t counter) {
 801b5a8:	b480      	push	{r7}
 801b5aa:	b085      	sub	sp, #20
 801b5ac:	af00      	add	r7, sp, #0
 801b5ae:	60f8      	str	r0, [r7, #12]
 801b5b0:	60b9      	str	r1, [r7, #8]
 801b5b2:	607a      	str	r2, [r7, #4]
 801b5b4:	603b      	str	r3, [r7, #0]
  static_assert(sizeof(uint32_t) == 4,
                "We don't support systems that do not conform to standard of "
                "uint32_t being exact 32bit wide");
#endif
#endif
  state[0] = 0x61707865;
 801b5b6:	68fb      	ldr	r3, [r7, #12]
 801b5b8:	4a2b      	ldr	r2, [pc, #172]	@ (801b668 <initialize_state+0xc0>)
 801b5ba:	601a      	str	r2, [r3, #0]
  state[1] = 0x3320646e;
 801b5bc:	68fb      	ldr	r3, [r7, #12]
 801b5be:	3304      	adds	r3, #4
 801b5c0:	4a2a      	ldr	r2, [pc, #168]	@ (801b66c <initialize_state+0xc4>)
 801b5c2:	601a      	str	r2, [r3, #0]
  state[2] = 0x79622d32;
 801b5c4:	68fb      	ldr	r3, [r7, #12]
 801b5c6:	3308      	adds	r3, #8
 801b5c8:	4a29      	ldr	r2, [pc, #164]	@ (801b670 <initialize_state+0xc8>)
 801b5ca:	601a      	str	r2, [r3, #0]
  state[3] = 0x6b206574;
 801b5cc:	68fb      	ldr	r3, [r7, #12]
 801b5ce:	330c      	adds	r3, #12
 801b5d0:	4a28      	ldr	r2, [pc, #160]	@ (801b674 <initialize_state+0xcc>)
 801b5d2:	601a      	str	r2, [r3, #0]
  store_32_le(state[4], key);
 801b5d4:	68fb      	ldr	r3, [r7, #12]
 801b5d6:	3310      	adds	r3, #16
 801b5d8:	68ba      	ldr	r2, [r7, #8]
 801b5da:	6812      	ldr	r2, [r2, #0]
 801b5dc:	601a      	str	r2, [r3, #0]
  store_32_le(state[5], key + 4);
 801b5de:	68fb      	ldr	r3, [r7, #12]
 801b5e0:	3314      	adds	r3, #20
 801b5e2:	68ba      	ldr	r2, [r7, #8]
 801b5e4:	3204      	adds	r2, #4
 801b5e6:	6812      	ldr	r2, [r2, #0]
 801b5e8:	601a      	str	r2, [r3, #0]
  store_32_le(state[6], key + 8);
 801b5ea:	68fb      	ldr	r3, [r7, #12]
 801b5ec:	3318      	adds	r3, #24
 801b5ee:	68ba      	ldr	r2, [r7, #8]
 801b5f0:	3208      	adds	r2, #8
 801b5f2:	6812      	ldr	r2, [r2, #0]
 801b5f4:	601a      	str	r2, [r3, #0]
  store_32_le(state[7], key + 12);
 801b5f6:	68fb      	ldr	r3, [r7, #12]
 801b5f8:	331c      	adds	r3, #28
 801b5fa:	68ba      	ldr	r2, [r7, #8]
 801b5fc:	320c      	adds	r2, #12
 801b5fe:	6812      	ldr	r2, [r2, #0]
 801b600:	601a      	str	r2, [r3, #0]
  store_32_le(state[8], key + 16);
 801b602:	68fb      	ldr	r3, [r7, #12]
 801b604:	3320      	adds	r3, #32
 801b606:	68ba      	ldr	r2, [r7, #8]
 801b608:	3210      	adds	r2, #16
 801b60a:	6812      	ldr	r2, [r2, #0]
 801b60c:	601a      	str	r2, [r3, #0]
  store_32_le(state[9], key + 20);
 801b60e:	68fb      	ldr	r3, [r7, #12]
 801b610:	3324      	adds	r3, #36	@ 0x24
 801b612:	68ba      	ldr	r2, [r7, #8]
 801b614:	3214      	adds	r2, #20
 801b616:	6812      	ldr	r2, [r2, #0]
 801b618:	601a      	str	r2, [r3, #0]
  store_32_le(state[10], key + 24);
 801b61a:	68fb      	ldr	r3, [r7, #12]
 801b61c:	3328      	adds	r3, #40	@ 0x28
 801b61e:	68ba      	ldr	r2, [r7, #8]
 801b620:	3218      	adds	r2, #24
 801b622:	6812      	ldr	r2, [r2, #0]
 801b624:	601a      	str	r2, [r3, #0]
  store_32_le(state[11], key + 28);
 801b626:	68fb      	ldr	r3, [r7, #12]
 801b628:	332c      	adds	r3, #44	@ 0x2c
 801b62a:	68ba      	ldr	r2, [r7, #8]
 801b62c:	321c      	adds	r2, #28
 801b62e:	6812      	ldr	r2, [r2, #0]
 801b630:	601a      	str	r2, [r3, #0]
  state[12] = counter;
 801b632:	68fb      	ldr	r3, [r7, #12]
 801b634:	3330      	adds	r3, #48	@ 0x30
 801b636:	683a      	ldr	r2, [r7, #0]
 801b638:	601a      	str	r2, [r3, #0]
  store_32_le(state[13], nonce);
 801b63a:	68fb      	ldr	r3, [r7, #12]
 801b63c:	3334      	adds	r3, #52	@ 0x34
 801b63e:	687a      	ldr	r2, [r7, #4]
 801b640:	6812      	ldr	r2, [r2, #0]
 801b642:	601a      	str	r2, [r3, #0]
  store_32_le(state[14], nonce + 4);
 801b644:	68fb      	ldr	r3, [r7, #12]
 801b646:	3338      	adds	r3, #56	@ 0x38
 801b648:	687a      	ldr	r2, [r7, #4]
 801b64a:	3204      	adds	r2, #4
 801b64c:	6812      	ldr	r2, [r2, #0]
 801b64e:	601a      	str	r2, [r3, #0]
  store_32_le(state[15], nonce + 8);
 801b650:	68fb      	ldr	r3, [r7, #12]
 801b652:	333c      	adds	r3, #60	@ 0x3c
 801b654:	687a      	ldr	r2, [r7, #4]
 801b656:	3208      	adds	r2, #8
 801b658:	6812      	ldr	r2, [r2, #0]
 801b65a:	601a      	str	r2, [r3, #0]
}
 801b65c:	bf00      	nop
 801b65e:	3714      	adds	r7, #20
 801b660:	46bd      	mov	sp, r7
 801b662:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b666:	4770      	bx	lr
 801b668:	61707865 	.word	0x61707865
 801b66c:	3320646e 	.word	0x3320646e
 801b670:	79622d32 	.word	0x79622d32
 801b674:	6b206574 	.word	0x6b206574

0801b678 <core_block>:
#define TIMES16(x)                                                          \
  x(0) x(1) x(2) x(3) x(4) x(5) x(6) x(7) x(8) x(9) x(10) x(11) x(12) x(13) \
      x(14) x(15)

static void core_block(const uint32_t *restrict start,
                       uint32_t *restrict output) {
 801b678:	b480      	push	{r7}
 801b67a:	b095      	sub	sp, #84	@ 0x54
 801b67c:	af00      	add	r7, sp, #0
 801b67e:	6078      	str	r0, [r7, #4]
 801b680:	6039      	str	r1, [r7, #0]
  int i;
// instead of working on the output array,
// we let the compiler allocate 16 local variables on the stack
#define __LV(i) uint32_t __t##i = start[i];
  TIMES16(__LV)
 801b682:	687b      	ldr	r3, [r7, #4]
 801b684:	681b      	ldr	r3, [r3, #0]
 801b686:	64bb      	str	r3, [r7, #72]	@ 0x48
 801b688:	687b      	ldr	r3, [r7, #4]
 801b68a:	3304      	adds	r3, #4
 801b68c:	681b      	ldr	r3, [r3, #0]
 801b68e:	647b      	str	r3, [r7, #68]	@ 0x44
 801b690:	687b      	ldr	r3, [r7, #4]
 801b692:	3308      	adds	r3, #8
 801b694:	681b      	ldr	r3, [r3, #0]
 801b696:	643b      	str	r3, [r7, #64]	@ 0x40
 801b698:	687b      	ldr	r3, [r7, #4]
 801b69a:	330c      	adds	r3, #12
 801b69c:	681b      	ldr	r3, [r3, #0]
 801b69e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801b6a0:	687b      	ldr	r3, [r7, #4]
 801b6a2:	3310      	adds	r3, #16
 801b6a4:	681b      	ldr	r3, [r3, #0]
 801b6a6:	63bb      	str	r3, [r7, #56]	@ 0x38
 801b6a8:	687b      	ldr	r3, [r7, #4]
 801b6aa:	3314      	adds	r3, #20
 801b6ac:	681b      	ldr	r3, [r3, #0]
 801b6ae:	637b      	str	r3, [r7, #52]	@ 0x34
 801b6b0:	687b      	ldr	r3, [r7, #4]
 801b6b2:	3318      	adds	r3, #24
 801b6b4:	681b      	ldr	r3, [r3, #0]
 801b6b6:	633b      	str	r3, [r7, #48]	@ 0x30
 801b6b8:	687b      	ldr	r3, [r7, #4]
 801b6ba:	331c      	adds	r3, #28
 801b6bc:	681b      	ldr	r3, [r3, #0]
 801b6be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801b6c0:	687b      	ldr	r3, [r7, #4]
 801b6c2:	3320      	adds	r3, #32
 801b6c4:	681b      	ldr	r3, [r3, #0]
 801b6c6:	62bb      	str	r3, [r7, #40]	@ 0x28
 801b6c8:	687b      	ldr	r3, [r7, #4]
 801b6ca:	3324      	adds	r3, #36	@ 0x24
 801b6cc:	681b      	ldr	r3, [r3, #0]
 801b6ce:	627b      	str	r3, [r7, #36]	@ 0x24
 801b6d0:	687b      	ldr	r3, [r7, #4]
 801b6d2:	3328      	adds	r3, #40	@ 0x28
 801b6d4:	681b      	ldr	r3, [r3, #0]
 801b6d6:	623b      	str	r3, [r7, #32]
 801b6d8:	687b      	ldr	r3, [r7, #4]
 801b6da:	332c      	adds	r3, #44	@ 0x2c
 801b6dc:	681b      	ldr	r3, [r3, #0]
 801b6de:	61fb      	str	r3, [r7, #28]
 801b6e0:	687b      	ldr	r3, [r7, #4]
 801b6e2:	3330      	adds	r3, #48	@ 0x30
 801b6e4:	681b      	ldr	r3, [r3, #0]
 801b6e6:	61bb      	str	r3, [r7, #24]
 801b6e8:	687b      	ldr	r3, [r7, #4]
 801b6ea:	3334      	adds	r3, #52	@ 0x34
 801b6ec:	681b      	ldr	r3, [r3, #0]
 801b6ee:	617b      	str	r3, [r7, #20]
 801b6f0:	687b      	ldr	r3, [r7, #4]
 801b6f2:	3338      	adds	r3, #56	@ 0x38
 801b6f4:	681b      	ldr	r3, [r3, #0]
 801b6f6:	613b      	str	r3, [r7, #16]
 801b6f8:	687b      	ldr	r3, [r7, #4]
 801b6fa:	333c      	adds	r3, #60	@ 0x3c
 801b6fc:	681b      	ldr	r3, [r3, #0]
 801b6fe:	60fb      	str	r3, [r7, #12]

#define __Q(a, b, c, d) Qround(__t##a, __t##b, __t##c, __t##d)

  for (i = 0; i < 10; i++) {
 801b700:	2300      	movs	r3, #0
 801b702:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801b704:	e182      	b.n	801ba0c <core_block+0x394>
    __Q(0, 4, 8, 12);
 801b706:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801b708:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b70a:	4413      	add	r3, r2
 801b70c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801b70e:	69ba      	ldr	r2, [r7, #24]
 801b710:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801b712:	4053      	eors	r3, r2
 801b714:	61bb      	str	r3, [r7, #24]
 801b716:	69bb      	ldr	r3, [r7, #24]
 801b718:	ea4f 4333 	mov.w	r3, r3, ror #16
 801b71c:	61bb      	str	r3, [r7, #24]
 801b71e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801b720:	69bb      	ldr	r3, [r7, #24]
 801b722:	4413      	add	r3, r2
 801b724:	62bb      	str	r3, [r7, #40]	@ 0x28
 801b726:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801b728:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b72a:	4053      	eors	r3, r2
 801b72c:	63bb      	str	r3, [r7, #56]	@ 0x38
 801b72e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b730:	ea4f 5333 	mov.w	r3, r3, ror #20
 801b734:	63bb      	str	r3, [r7, #56]	@ 0x38
 801b736:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801b738:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b73a:	4413      	add	r3, r2
 801b73c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801b73e:	69ba      	ldr	r2, [r7, #24]
 801b740:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801b742:	4053      	eors	r3, r2
 801b744:	61bb      	str	r3, [r7, #24]
 801b746:	69bb      	ldr	r3, [r7, #24]
 801b748:	ea4f 6333 	mov.w	r3, r3, ror #24
 801b74c:	61bb      	str	r3, [r7, #24]
 801b74e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801b750:	69bb      	ldr	r3, [r7, #24]
 801b752:	4413      	add	r3, r2
 801b754:	62bb      	str	r3, [r7, #40]	@ 0x28
 801b756:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801b758:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b75a:	4053      	eors	r3, r2
 801b75c:	63bb      	str	r3, [r7, #56]	@ 0x38
 801b75e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b760:	ea4f 6373 	mov.w	r3, r3, ror #25
 801b764:	63bb      	str	r3, [r7, #56]	@ 0x38
    __Q(1, 5, 9, 13);
 801b766:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801b768:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b76a:	4413      	add	r3, r2
 801b76c:	647b      	str	r3, [r7, #68]	@ 0x44
 801b76e:	697a      	ldr	r2, [r7, #20]
 801b770:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801b772:	4053      	eors	r3, r2
 801b774:	617b      	str	r3, [r7, #20]
 801b776:	697b      	ldr	r3, [r7, #20]
 801b778:	ea4f 4333 	mov.w	r3, r3, ror #16
 801b77c:	617b      	str	r3, [r7, #20]
 801b77e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801b780:	697b      	ldr	r3, [r7, #20]
 801b782:	4413      	add	r3, r2
 801b784:	627b      	str	r3, [r7, #36]	@ 0x24
 801b786:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801b788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b78a:	4053      	eors	r3, r2
 801b78c:	637b      	str	r3, [r7, #52]	@ 0x34
 801b78e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b790:	ea4f 5333 	mov.w	r3, r3, ror #20
 801b794:	637b      	str	r3, [r7, #52]	@ 0x34
 801b796:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801b798:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b79a:	4413      	add	r3, r2
 801b79c:	647b      	str	r3, [r7, #68]	@ 0x44
 801b79e:	697a      	ldr	r2, [r7, #20]
 801b7a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801b7a2:	4053      	eors	r3, r2
 801b7a4:	617b      	str	r3, [r7, #20]
 801b7a6:	697b      	ldr	r3, [r7, #20]
 801b7a8:	ea4f 6333 	mov.w	r3, r3, ror #24
 801b7ac:	617b      	str	r3, [r7, #20]
 801b7ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801b7b0:	697b      	ldr	r3, [r7, #20]
 801b7b2:	4413      	add	r3, r2
 801b7b4:	627b      	str	r3, [r7, #36]	@ 0x24
 801b7b6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801b7b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b7ba:	4053      	eors	r3, r2
 801b7bc:	637b      	str	r3, [r7, #52]	@ 0x34
 801b7be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b7c0:	ea4f 6373 	mov.w	r3, r3, ror #25
 801b7c4:	637b      	str	r3, [r7, #52]	@ 0x34
    __Q(2, 6, 10, 14);
 801b7c6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801b7c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b7ca:	4413      	add	r3, r2
 801b7cc:	643b      	str	r3, [r7, #64]	@ 0x40
 801b7ce:	693a      	ldr	r2, [r7, #16]
 801b7d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801b7d2:	4053      	eors	r3, r2
 801b7d4:	613b      	str	r3, [r7, #16]
 801b7d6:	693b      	ldr	r3, [r7, #16]
 801b7d8:	ea4f 4333 	mov.w	r3, r3, ror #16
 801b7dc:	613b      	str	r3, [r7, #16]
 801b7de:	6a3a      	ldr	r2, [r7, #32]
 801b7e0:	693b      	ldr	r3, [r7, #16]
 801b7e2:	4413      	add	r3, r2
 801b7e4:	623b      	str	r3, [r7, #32]
 801b7e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801b7e8:	6a3b      	ldr	r3, [r7, #32]
 801b7ea:	4053      	eors	r3, r2
 801b7ec:	633b      	str	r3, [r7, #48]	@ 0x30
 801b7ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b7f0:	ea4f 5333 	mov.w	r3, r3, ror #20
 801b7f4:	633b      	str	r3, [r7, #48]	@ 0x30
 801b7f6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801b7f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b7fa:	4413      	add	r3, r2
 801b7fc:	643b      	str	r3, [r7, #64]	@ 0x40
 801b7fe:	693a      	ldr	r2, [r7, #16]
 801b800:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801b802:	4053      	eors	r3, r2
 801b804:	613b      	str	r3, [r7, #16]
 801b806:	693b      	ldr	r3, [r7, #16]
 801b808:	ea4f 6333 	mov.w	r3, r3, ror #24
 801b80c:	613b      	str	r3, [r7, #16]
 801b80e:	6a3a      	ldr	r2, [r7, #32]
 801b810:	693b      	ldr	r3, [r7, #16]
 801b812:	4413      	add	r3, r2
 801b814:	623b      	str	r3, [r7, #32]
 801b816:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801b818:	6a3b      	ldr	r3, [r7, #32]
 801b81a:	4053      	eors	r3, r2
 801b81c:	633b      	str	r3, [r7, #48]	@ 0x30
 801b81e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b820:	ea4f 6373 	mov.w	r3, r3, ror #25
 801b824:	633b      	str	r3, [r7, #48]	@ 0x30
    __Q(3, 7, 11, 15);
 801b826:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801b828:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b82a:	4413      	add	r3, r2
 801b82c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801b82e:	68fa      	ldr	r2, [r7, #12]
 801b830:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b832:	4053      	eors	r3, r2
 801b834:	60fb      	str	r3, [r7, #12]
 801b836:	68fb      	ldr	r3, [r7, #12]
 801b838:	ea4f 4333 	mov.w	r3, r3, ror #16
 801b83c:	60fb      	str	r3, [r7, #12]
 801b83e:	69fa      	ldr	r2, [r7, #28]
 801b840:	68fb      	ldr	r3, [r7, #12]
 801b842:	4413      	add	r3, r2
 801b844:	61fb      	str	r3, [r7, #28]
 801b846:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801b848:	69fb      	ldr	r3, [r7, #28]
 801b84a:	4053      	eors	r3, r2
 801b84c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801b84e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b850:	ea4f 5333 	mov.w	r3, r3, ror #20
 801b854:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801b856:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801b858:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b85a:	4413      	add	r3, r2
 801b85c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801b85e:	68fa      	ldr	r2, [r7, #12]
 801b860:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b862:	4053      	eors	r3, r2
 801b864:	60fb      	str	r3, [r7, #12]
 801b866:	68fb      	ldr	r3, [r7, #12]
 801b868:	ea4f 6333 	mov.w	r3, r3, ror #24
 801b86c:	60fb      	str	r3, [r7, #12]
 801b86e:	69fa      	ldr	r2, [r7, #28]
 801b870:	68fb      	ldr	r3, [r7, #12]
 801b872:	4413      	add	r3, r2
 801b874:	61fb      	str	r3, [r7, #28]
 801b876:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801b878:	69fb      	ldr	r3, [r7, #28]
 801b87a:	4053      	eors	r3, r2
 801b87c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801b87e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b880:	ea4f 6373 	mov.w	r3, r3, ror #25
 801b884:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __Q(0, 5, 10, 15);
 801b886:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801b888:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b88a:	4413      	add	r3, r2
 801b88c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801b88e:	68fa      	ldr	r2, [r7, #12]
 801b890:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801b892:	4053      	eors	r3, r2
 801b894:	60fb      	str	r3, [r7, #12]
 801b896:	68fb      	ldr	r3, [r7, #12]
 801b898:	ea4f 4333 	mov.w	r3, r3, ror #16
 801b89c:	60fb      	str	r3, [r7, #12]
 801b89e:	6a3a      	ldr	r2, [r7, #32]
 801b8a0:	68fb      	ldr	r3, [r7, #12]
 801b8a2:	4413      	add	r3, r2
 801b8a4:	623b      	str	r3, [r7, #32]
 801b8a6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801b8a8:	6a3b      	ldr	r3, [r7, #32]
 801b8aa:	4053      	eors	r3, r2
 801b8ac:	637b      	str	r3, [r7, #52]	@ 0x34
 801b8ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b8b0:	ea4f 5333 	mov.w	r3, r3, ror #20
 801b8b4:	637b      	str	r3, [r7, #52]	@ 0x34
 801b8b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801b8b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b8ba:	4413      	add	r3, r2
 801b8bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 801b8be:	68fa      	ldr	r2, [r7, #12]
 801b8c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801b8c2:	4053      	eors	r3, r2
 801b8c4:	60fb      	str	r3, [r7, #12]
 801b8c6:	68fb      	ldr	r3, [r7, #12]
 801b8c8:	ea4f 6333 	mov.w	r3, r3, ror #24
 801b8cc:	60fb      	str	r3, [r7, #12]
 801b8ce:	6a3a      	ldr	r2, [r7, #32]
 801b8d0:	68fb      	ldr	r3, [r7, #12]
 801b8d2:	4413      	add	r3, r2
 801b8d4:	623b      	str	r3, [r7, #32]
 801b8d6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801b8d8:	6a3b      	ldr	r3, [r7, #32]
 801b8da:	4053      	eors	r3, r2
 801b8dc:	637b      	str	r3, [r7, #52]	@ 0x34
 801b8de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b8e0:	ea4f 6373 	mov.w	r3, r3, ror #25
 801b8e4:	637b      	str	r3, [r7, #52]	@ 0x34
    __Q(1, 6, 11, 12);
 801b8e6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801b8e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b8ea:	4413      	add	r3, r2
 801b8ec:	647b      	str	r3, [r7, #68]	@ 0x44
 801b8ee:	69ba      	ldr	r2, [r7, #24]
 801b8f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801b8f2:	4053      	eors	r3, r2
 801b8f4:	61bb      	str	r3, [r7, #24]
 801b8f6:	69bb      	ldr	r3, [r7, #24]
 801b8f8:	ea4f 4333 	mov.w	r3, r3, ror #16
 801b8fc:	61bb      	str	r3, [r7, #24]
 801b8fe:	69fa      	ldr	r2, [r7, #28]
 801b900:	69bb      	ldr	r3, [r7, #24]
 801b902:	4413      	add	r3, r2
 801b904:	61fb      	str	r3, [r7, #28]
 801b906:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801b908:	69fb      	ldr	r3, [r7, #28]
 801b90a:	4053      	eors	r3, r2
 801b90c:	633b      	str	r3, [r7, #48]	@ 0x30
 801b90e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b910:	ea4f 5333 	mov.w	r3, r3, ror #20
 801b914:	633b      	str	r3, [r7, #48]	@ 0x30
 801b916:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801b918:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b91a:	4413      	add	r3, r2
 801b91c:	647b      	str	r3, [r7, #68]	@ 0x44
 801b91e:	69ba      	ldr	r2, [r7, #24]
 801b920:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801b922:	4053      	eors	r3, r2
 801b924:	61bb      	str	r3, [r7, #24]
 801b926:	69bb      	ldr	r3, [r7, #24]
 801b928:	ea4f 6333 	mov.w	r3, r3, ror #24
 801b92c:	61bb      	str	r3, [r7, #24]
 801b92e:	69fa      	ldr	r2, [r7, #28]
 801b930:	69bb      	ldr	r3, [r7, #24]
 801b932:	4413      	add	r3, r2
 801b934:	61fb      	str	r3, [r7, #28]
 801b936:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801b938:	69fb      	ldr	r3, [r7, #28]
 801b93a:	4053      	eors	r3, r2
 801b93c:	633b      	str	r3, [r7, #48]	@ 0x30
 801b93e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b940:	ea4f 6373 	mov.w	r3, r3, ror #25
 801b944:	633b      	str	r3, [r7, #48]	@ 0x30
    __Q(2, 7, 8, 13);
 801b946:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801b948:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b94a:	4413      	add	r3, r2
 801b94c:	643b      	str	r3, [r7, #64]	@ 0x40
 801b94e:	697a      	ldr	r2, [r7, #20]
 801b950:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801b952:	4053      	eors	r3, r2
 801b954:	617b      	str	r3, [r7, #20]
 801b956:	697b      	ldr	r3, [r7, #20]
 801b958:	ea4f 4333 	mov.w	r3, r3, ror #16
 801b95c:	617b      	str	r3, [r7, #20]
 801b95e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801b960:	697b      	ldr	r3, [r7, #20]
 801b962:	4413      	add	r3, r2
 801b964:	62bb      	str	r3, [r7, #40]	@ 0x28
 801b966:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801b968:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b96a:	4053      	eors	r3, r2
 801b96c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801b96e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b970:	ea4f 5333 	mov.w	r3, r3, ror #20
 801b974:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801b976:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801b978:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b97a:	4413      	add	r3, r2
 801b97c:	643b      	str	r3, [r7, #64]	@ 0x40
 801b97e:	697a      	ldr	r2, [r7, #20]
 801b980:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801b982:	4053      	eors	r3, r2
 801b984:	617b      	str	r3, [r7, #20]
 801b986:	697b      	ldr	r3, [r7, #20]
 801b988:	ea4f 6333 	mov.w	r3, r3, ror #24
 801b98c:	617b      	str	r3, [r7, #20]
 801b98e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801b990:	697b      	ldr	r3, [r7, #20]
 801b992:	4413      	add	r3, r2
 801b994:	62bb      	str	r3, [r7, #40]	@ 0x28
 801b996:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801b998:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b99a:	4053      	eors	r3, r2
 801b99c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801b99e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b9a0:	ea4f 6373 	mov.w	r3, r3, ror #25
 801b9a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __Q(3, 4, 9, 14);
 801b9a6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801b9a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b9aa:	4413      	add	r3, r2
 801b9ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801b9ae:	693a      	ldr	r2, [r7, #16]
 801b9b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b9b2:	4053      	eors	r3, r2
 801b9b4:	613b      	str	r3, [r7, #16]
 801b9b6:	693b      	ldr	r3, [r7, #16]
 801b9b8:	ea4f 4333 	mov.w	r3, r3, ror #16
 801b9bc:	613b      	str	r3, [r7, #16]
 801b9be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801b9c0:	693b      	ldr	r3, [r7, #16]
 801b9c2:	4413      	add	r3, r2
 801b9c4:	627b      	str	r3, [r7, #36]	@ 0x24
 801b9c6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801b9c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b9ca:	4053      	eors	r3, r2
 801b9cc:	63bb      	str	r3, [r7, #56]	@ 0x38
 801b9ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b9d0:	ea4f 5333 	mov.w	r3, r3, ror #20
 801b9d4:	63bb      	str	r3, [r7, #56]	@ 0x38
 801b9d6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801b9d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b9da:	4413      	add	r3, r2
 801b9dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801b9de:	693a      	ldr	r2, [r7, #16]
 801b9e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b9e2:	4053      	eors	r3, r2
 801b9e4:	613b      	str	r3, [r7, #16]
 801b9e6:	693b      	ldr	r3, [r7, #16]
 801b9e8:	ea4f 6333 	mov.w	r3, r3, ror #24
 801b9ec:	613b      	str	r3, [r7, #16]
 801b9ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801b9f0:	693b      	ldr	r3, [r7, #16]
 801b9f2:	4413      	add	r3, r2
 801b9f4:	627b      	str	r3, [r7, #36]	@ 0x24
 801b9f6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801b9f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b9fa:	4053      	eors	r3, r2
 801b9fc:	63bb      	str	r3, [r7, #56]	@ 0x38
 801b9fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ba00:	ea4f 6373 	mov.w	r3, r3, ror #25
 801ba04:	63bb      	str	r3, [r7, #56]	@ 0x38
  for (i = 0; i < 10; i++) {
 801ba06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ba08:	3301      	adds	r3, #1
 801ba0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801ba0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ba0e:	2b09      	cmp	r3, #9
 801ba10:	f77f ae79 	ble.w	801b706 <core_block+0x8e>
  }

#define __FIN(i) output[i] = start[i] + __t##i;
  TIMES16(__FIN)
 801ba14:	687b      	ldr	r3, [r7, #4]
 801ba16:	681a      	ldr	r2, [r3, #0]
 801ba18:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801ba1a:	441a      	add	r2, r3
 801ba1c:	683b      	ldr	r3, [r7, #0]
 801ba1e:	601a      	str	r2, [r3, #0]
 801ba20:	687b      	ldr	r3, [r7, #4]
 801ba22:	3304      	adds	r3, #4
 801ba24:	6819      	ldr	r1, [r3, #0]
 801ba26:	683b      	ldr	r3, [r7, #0]
 801ba28:	3304      	adds	r3, #4
 801ba2a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801ba2c:	440a      	add	r2, r1
 801ba2e:	601a      	str	r2, [r3, #0]
 801ba30:	687b      	ldr	r3, [r7, #4]
 801ba32:	3308      	adds	r3, #8
 801ba34:	6819      	ldr	r1, [r3, #0]
 801ba36:	683b      	ldr	r3, [r7, #0]
 801ba38:	3308      	adds	r3, #8
 801ba3a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801ba3c:	440a      	add	r2, r1
 801ba3e:	601a      	str	r2, [r3, #0]
 801ba40:	687b      	ldr	r3, [r7, #4]
 801ba42:	330c      	adds	r3, #12
 801ba44:	6819      	ldr	r1, [r3, #0]
 801ba46:	683b      	ldr	r3, [r7, #0]
 801ba48:	330c      	adds	r3, #12
 801ba4a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801ba4c:	440a      	add	r2, r1
 801ba4e:	601a      	str	r2, [r3, #0]
 801ba50:	687b      	ldr	r3, [r7, #4]
 801ba52:	3310      	adds	r3, #16
 801ba54:	6819      	ldr	r1, [r3, #0]
 801ba56:	683b      	ldr	r3, [r7, #0]
 801ba58:	3310      	adds	r3, #16
 801ba5a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801ba5c:	440a      	add	r2, r1
 801ba5e:	601a      	str	r2, [r3, #0]
 801ba60:	687b      	ldr	r3, [r7, #4]
 801ba62:	3314      	adds	r3, #20
 801ba64:	6819      	ldr	r1, [r3, #0]
 801ba66:	683b      	ldr	r3, [r7, #0]
 801ba68:	3314      	adds	r3, #20
 801ba6a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801ba6c:	440a      	add	r2, r1
 801ba6e:	601a      	str	r2, [r3, #0]
 801ba70:	687b      	ldr	r3, [r7, #4]
 801ba72:	3318      	adds	r3, #24
 801ba74:	6819      	ldr	r1, [r3, #0]
 801ba76:	683b      	ldr	r3, [r7, #0]
 801ba78:	3318      	adds	r3, #24
 801ba7a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801ba7c:	440a      	add	r2, r1
 801ba7e:	601a      	str	r2, [r3, #0]
 801ba80:	687b      	ldr	r3, [r7, #4]
 801ba82:	331c      	adds	r3, #28
 801ba84:	6819      	ldr	r1, [r3, #0]
 801ba86:	683b      	ldr	r3, [r7, #0]
 801ba88:	331c      	adds	r3, #28
 801ba8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801ba8c:	440a      	add	r2, r1
 801ba8e:	601a      	str	r2, [r3, #0]
 801ba90:	687b      	ldr	r3, [r7, #4]
 801ba92:	3320      	adds	r3, #32
 801ba94:	6819      	ldr	r1, [r3, #0]
 801ba96:	683b      	ldr	r3, [r7, #0]
 801ba98:	3320      	adds	r3, #32
 801ba9a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801ba9c:	440a      	add	r2, r1
 801ba9e:	601a      	str	r2, [r3, #0]
 801baa0:	687b      	ldr	r3, [r7, #4]
 801baa2:	3324      	adds	r3, #36	@ 0x24
 801baa4:	6819      	ldr	r1, [r3, #0]
 801baa6:	683b      	ldr	r3, [r7, #0]
 801baa8:	3324      	adds	r3, #36	@ 0x24
 801baaa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801baac:	440a      	add	r2, r1
 801baae:	601a      	str	r2, [r3, #0]
 801bab0:	687b      	ldr	r3, [r7, #4]
 801bab2:	3328      	adds	r3, #40	@ 0x28
 801bab4:	6819      	ldr	r1, [r3, #0]
 801bab6:	683b      	ldr	r3, [r7, #0]
 801bab8:	3328      	adds	r3, #40	@ 0x28
 801baba:	6a3a      	ldr	r2, [r7, #32]
 801babc:	440a      	add	r2, r1
 801babe:	601a      	str	r2, [r3, #0]
 801bac0:	687b      	ldr	r3, [r7, #4]
 801bac2:	332c      	adds	r3, #44	@ 0x2c
 801bac4:	6819      	ldr	r1, [r3, #0]
 801bac6:	683b      	ldr	r3, [r7, #0]
 801bac8:	332c      	adds	r3, #44	@ 0x2c
 801baca:	69fa      	ldr	r2, [r7, #28]
 801bacc:	440a      	add	r2, r1
 801bace:	601a      	str	r2, [r3, #0]
 801bad0:	687b      	ldr	r3, [r7, #4]
 801bad2:	3330      	adds	r3, #48	@ 0x30
 801bad4:	6819      	ldr	r1, [r3, #0]
 801bad6:	683b      	ldr	r3, [r7, #0]
 801bad8:	3330      	adds	r3, #48	@ 0x30
 801bada:	69ba      	ldr	r2, [r7, #24]
 801badc:	440a      	add	r2, r1
 801bade:	601a      	str	r2, [r3, #0]
 801bae0:	687b      	ldr	r3, [r7, #4]
 801bae2:	3334      	adds	r3, #52	@ 0x34
 801bae4:	6819      	ldr	r1, [r3, #0]
 801bae6:	683b      	ldr	r3, [r7, #0]
 801bae8:	3334      	adds	r3, #52	@ 0x34
 801baea:	697a      	ldr	r2, [r7, #20]
 801baec:	440a      	add	r2, r1
 801baee:	601a      	str	r2, [r3, #0]
 801baf0:	687b      	ldr	r3, [r7, #4]
 801baf2:	3338      	adds	r3, #56	@ 0x38
 801baf4:	6819      	ldr	r1, [r3, #0]
 801baf6:	683b      	ldr	r3, [r7, #0]
 801baf8:	3338      	adds	r3, #56	@ 0x38
 801bafa:	693a      	ldr	r2, [r7, #16]
 801bafc:	440a      	add	r2, r1
 801bafe:	601a      	str	r2, [r3, #0]
 801bb00:	687b      	ldr	r3, [r7, #4]
 801bb02:	333c      	adds	r3, #60	@ 0x3c
 801bb04:	6819      	ldr	r1, [r3, #0]
 801bb06:	683b      	ldr	r3, [r7, #0]
 801bb08:	333c      	adds	r3, #60	@ 0x3c
 801bb0a:	68fa      	ldr	r2, [r7, #12]
 801bb0c:	440a      	add	r2, r1
 801bb0e:	601a      	str	r2, [r3, #0]
}
 801bb10:	bf00      	nop
 801bb12:	3754      	adds	r7, #84	@ 0x54
 801bb14:	46bd      	mov	sp, r7
 801bb16:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bb1a:	4770      	bx	lr

0801bb1c <xor_block>:
  for (i = 0; i < words; i++) {                                   \
    xor32_le(index8_32(dest, i), index8_32(source, i), (pad) + i) \
  }

static void xor_block(uint8_t *restrict dest, const uint8_t *restrict source,
                      const uint32_t *restrict pad, unsigned int chunk_size) {
 801bb1c:	b480      	push	{r7}
 801bb1e:	b089      	sub	sp, #36	@ 0x24
 801bb20:	af00      	add	r7, sp, #0
 801bb22:	60f8      	str	r0, [r7, #12]
 801bb24:	60b9      	str	r1, [r7, #8]
 801bb26:	607a      	str	r2, [r7, #4]
 801bb28:	603b      	str	r3, [r7, #0]
  unsigned int i, full_blocks = chunk_size / (unsigned int) sizeof(uint32_t);
 801bb2a:	683b      	ldr	r3, [r7, #0]
 801bb2c:	089b      	lsrs	r3, r3, #2
 801bb2e:	61bb      	str	r3, [r7, #24]
  // have to be carefull, we are going back from uint32 to uint8, so endianness
  // matters again
  xor32_blocks(dest, source, pad, full_blocks)
 801bb30:	2300      	movs	r3, #0
 801bb32:	61fb      	str	r3, [r7, #28]
 801bb34:	e016      	b.n	801bb64 <xor_block+0x48>
 801bb36:	69fb      	ldr	r3, [r7, #28]
 801bb38:	009b      	lsls	r3, r3, #2
 801bb3a:	68ba      	ldr	r2, [r7, #8]
 801bb3c:	4413      	add	r3, r2
 801bb3e:	681b      	ldr	r3, [r3, #0]
 801bb40:	617b      	str	r3, [r7, #20]
 801bb42:	69fb      	ldr	r3, [r7, #28]
 801bb44:	009b      	lsls	r3, r3, #2
 801bb46:	687a      	ldr	r2, [r7, #4]
 801bb48:	4413      	add	r3, r2
 801bb4a:	681a      	ldr	r2, [r3, #0]
 801bb4c:	697b      	ldr	r3, [r7, #20]
 801bb4e:	4053      	eors	r3, r2
 801bb50:	617b      	str	r3, [r7, #20]
 801bb52:	69fb      	ldr	r3, [r7, #28]
 801bb54:	009b      	lsls	r3, r3, #2
 801bb56:	68fa      	ldr	r2, [r7, #12]
 801bb58:	4413      	add	r3, r2
 801bb5a:	697a      	ldr	r2, [r7, #20]
 801bb5c:	601a      	str	r2, [r3, #0]
 801bb5e:	69fb      	ldr	r3, [r7, #28]
 801bb60:	3301      	adds	r3, #1
 801bb62:	61fb      	str	r3, [r7, #28]
 801bb64:	69fa      	ldr	r2, [r7, #28]
 801bb66:	69bb      	ldr	r3, [r7, #24]
 801bb68:	429a      	cmp	r2, r3
 801bb6a:	d3e4      	bcc.n	801bb36 <xor_block+0x1a>

      dest += full_blocks * sizeof(uint32_t);
 801bb6c:	69bb      	ldr	r3, [r7, #24]
 801bb6e:	009b      	lsls	r3, r3, #2
 801bb70:	68fa      	ldr	r2, [r7, #12]
 801bb72:	4413      	add	r3, r2
 801bb74:	60fb      	str	r3, [r7, #12]
  source += full_blocks * sizeof(uint32_t);
 801bb76:	69bb      	ldr	r3, [r7, #24]
 801bb78:	009b      	lsls	r3, r3, #2
 801bb7a:	68ba      	ldr	r2, [r7, #8]
 801bb7c:	4413      	add	r3, r2
 801bb7e:	60bb      	str	r3, [r7, #8]
  pad += full_blocks;
 801bb80:	69bb      	ldr	r3, [r7, #24]
 801bb82:	009b      	lsls	r3, r3, #2
 801bb84:	687a      	ldr	r2, [r7, #4]
 801bb86:	4413      	add	r3, r2
 801bb88:	607b      	str	r3, [r7, #4]

  switch (chunk_size % sizeof(uint32_t)) {
 801bb8a:	683b      	ldr	r3, [r7, #0]
 801bb8c:	f003 0303 	and.w	r3, r3, #3
 801bb90:	2b03      	cmp	r3, #3
 801bb92:	d026      	beq.n	801bbe2 <xor_block+0xc6>
 801bb94:	2b03      	cmp	r3, #3
 801bb96:	d846      	bhi.n	801bc26 <xor_block+0x10a>
 801bb98:	2b01      	cmp	r3, #1
 801bb9a:	d002      	beq.n	801bba2 <xor_block+0x86>
 801bb9c:	2b02      	cmp	r3, #2
 801bb9e:	d00a      	beq.n	801bbb6 <xor_block+0x9a>
      dest[0] = source[0] ^ U8(*pad);
      dest[1] = source[1] ^ U8(*pad >> 8);
      dest[2] = source[2] ^ U8(*pad >> 16);
      break;
  }
}
 801bba0:	e041      	b.n	801bc26 <xor_block+0x10a>
      dest[0] = source[0] ^ U8(*pad);
 801bba2:	68bb      	ldr	r3, [r7, #8]
 801bba4:	781a      	ldrb	r2, [r3, #0]
 801bba6:	687b      	ldr	r3, [r7, #4]
 801bba8:	681b      	ldr	r3, [r3, #0]
 801bbaa:	b2db      	uxtb	r3, r3
 801bbac:	4053      	eors	r3, r2
 801bbae:	b2da      	uxtb	r2, r3
 801bbb0:	68fb      	ldr	r3, [r7, #12]
 801bbb2:	701a      	strb	r2, [r3, #0]
      break;
 801bbb4:	e037      	b.n	801bc26 <xor_block+0x10a>
      dest[0] = source[0] ^ U8(*pad);
 801bbb6:	68bb      	ldr	r3, [r7, #8]
 801bbb8:	781a      	ldrb	r2, [r3, #0]
 801bbba:	687b      	ldr	r3, [r7, #4]
 801bbbc:	681b      	ldr	r3, [r3, #0]
 801bbbe:	b2db      	uxtb	r3, r3
 801bbc0:	4053      	eors	r3, r2
 801bbc2:	b2da      	uxtb	r2, r3
 801bbc4:	68fb      	ldr	r3, [r7, #12]
 801bbc6:	701a      	strb	r2, [r3, #0]
      dest[1] = source[1] ^ U8(*pad >> 8);
 801bbc8:	68bb      	ldr	r3, [r7, #8]
 801bbca:	3301      	adds	r3, #1
 801bbcc:	7819      	ldrb	r1, [r3, #0]
 801bbce:	687b      	ldr	r3, [r7, #4]
 801bbd0:	681b      	ldr	r3, [r3, #0]
 801bbd2:	0a1b      	lsrs	r3, r3, #8
 801bbd4:	b2da      	uxtb	r2, r3
 801bbd6:	68fb      	ldr	r3, [r7, #12]
 801bbd8:	3301      	adds	r3, #1
 801bbda:	404a      	eors	r2, r1
 801bbdc:	b2d2      	uxtb	r2, r2
 801bbde:	701a      	strb	r2, [r3, #0]
      break;
 801bbe0:	e021      	b.n	801bc26 <xor_block+0x10a>
      dest[0] = source[0] ^ U8(*pad);
 801bbe2:	68bb      	ldr	r3, [r7, #8]
 801bbe4:	781a      	ldrb	r2, [r3, #0]
 801bbe6:	687b      	ldr	r3, [r7, #4]
 801bbe8:	681b      	ldr	r3, [r3, #0]
 801bbea:	b2db      	uxtb	r3, r3
 801bbec:	4053      	eors	r3, r2
 801bbee:	b2da      	uxtb	r2, r3
 801bbf0:	68fb      	ldr	r3, [r7, #12]
 801bbf2:	701a      	strb	r2, [r3, #0]
      dest[1] = source[1] ^ U8(*pad >> 8);
 801bbf4:	68bb      	ldr	r3, [r7, #8]
 801bbf6:	3301      	adds	r3, #1
 801bbf8:	7819      	ldrb	r1, [r3, #0]
 801bbfa:	687b      	ldr	r3, [r7, #4]
 801bbfc:	681b      	ldr	r3, [r3, #0]
 801bbfe:	0a1b      	lsrs	r3, r3, #8
 801bc00:	b2da      	uxtb	r2, r3
 801bc02:	68fb      	ldr	r3, [r7, #12]
 801bc04:	3301      	adds	r3, #1
 801bc06:	404a      	eors	r2, r1
 801bc08:	b2d2      	uxtb	r2, r2
 801bc0a:	701a      	strb	r2, [r3, #0]
      dest[2] = source[2] ^ U8(*pad >> 16);
 801bc0c:	68bb      	ldr	r3, [r7, #8]
 801bc0e:	3302      	adds	r3, #2
 801bc10:	7819      	ldrb	r1, [r3, #0]
 801bc12:	687b      	ldr	r3, [r7, #4]
 801bc14:	681b      	ldr	r3, [r3, #0]
 801bc16:	0c1b      	lsrs	r3, r3, #16
 801bc18:	b2da      	uxtb	r2, r3
 801bc1a:	68fb      	ldr	r3, [r7, #12]
 801bc1c:	3302      	adds	r3, #2
 801bc1e:	404a      	eors	r2, r1
 801bc20:	b2d2      	uxtb	r2, r2
 801bc22:	701a      	strb	r2, [r3, #0]
      break;
 801bc24:	bf00      	nop
}
 801bc26:	bf00      	nop
 801bc28:	3724      	adds	r7, #36	@ 0x24
 801bc2a:	46bd      	mov	sp, r7
 801bc2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc30:	4770      	bx	lr

0801bc32 <chacha20_xor_stream>:

static void chacha20_xor_stream(uint8_t *restrict dest,
                                const uint8_t *restrict source, size_t length,
                                const uint8_t key[CHACHA20_KEY_SIZE],
                                const uint8_t nonce[CHACHA20_NONCE_SIZE],
                                uint32_t counter) {
 801bc32:	b580      	push	{r7, lr}
 801bc34:	b0aa      	sub	sp, #168	@ 0xa8
 801bc36:	af00      	add	r7, sp, #0
 801bc38:	60f8      	str	r0, [r7, #12]
 801bc3a:	60b9      	str	r1, [r7, #8]
 801bc3c:	607a      	str	r2, [r7, #4]
 801bc3e:	603b      	str	r3, [r7, #0]
  uint32_t state[CHACHA20_STATE_WORDS];
  uint32_t pad[CHACHA20_STATE_WORDS];
  size_t i, b, last_block, full_blocks = length / CHACHA20_BLOCK_SIZE;
 801bc40:	687b      	ldr	r3, [r7, #4]
 801bc42:	099b      	lsrs	r3, r3, #6
 801bc44:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  initialize_state(state, key, nonce, counter);
 801bc48:	f107 0058 	add.w	r0, r7, #88	@ 0x58
 801bc4c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801bc50:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 801bc54:	6839      	ldr	r1, [r7, #0]
 801bc56:	f7ff fca7 	bl	801b5a8 <initialize_state>
  for (b = 0; b < full_blocks; b++) {
 801bc5a:	2300      	movs	r3, #0
 801bc5c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 801bc60:	e03c      	b.n	801bcdc <chacha20_xor_stream+0xaa>
    core_block(state, pad);
 801bc62:	f107 0218 	add.w	r2, r7, #24
 801bc66:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 801bc6a:	4611      	mov	r1, r2
 801bc6c:	4618      	mov	r0, r3
 801bc6e:	f7ff fd03 	bl	801b678 <core_block>
    increment_counter(state);
 801bc72:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801bc76:	3301      	adds	r3, #1
 801bc78:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    xor32_blocks(dest, source, pad, CHACHA20_STATE_WORDS) dest +=
 801bc7c:	2300      	movs	r3, #0
 801bc7e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 801bc82:	e01c      	b.n	801bcbe <chacha20_xor_stream+0x8c>
 801bc84:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801bc88:	009b      	lsls	r3, r3, #2
 801bc8a:	68ba      	ldr	r2, [r7, #8]
 801bc8c:	4413      	add	r3, r2
 801bc8e:	681b      	ldr	r3, [r3, #0]
 801bc90:	617b      	str	r3, [r7, #20]
 801bc92:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801bc96:	009b      	lsls	r3, r3, #2
 801bc98:	f107 0218 	add.w	r2, r7, #24
 801bc9c:	4413      	add	r3, r2
 801bc9e:	681a      	ldr	r2, [r3, #0]
 801bca0:	697b      	ldr	r3, [r7, #20]
 801bca2:	4053      	eors	r3, r2
 801bca4:	617b      	str	r3, [r7, #20]
 801bca6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801bcaa:	009b      	lsls	r3, r3, #2
 801bcac:	68fa      	ldr	r2, [r7, #12]
 801bcae:	4413      	add	r3, r2
 801bcb0:	697a      	ldr	r2, [r7, #20]
 801bcb2:	601a      	str	r2, [r3, #0]
 801bcb4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801bcb8:	3301      	adds	r3, #1
 801bcba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 801bcbe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801bcc2:	2b0f      	cmp	r3, #15
 801bcc4:	d9de      	bls.n	801bc84 <chacha20_xor_stream+0x52>
 801bcc6:	68fb      	ldr	r3, [r7, #12]
 801bcc8:	3340      	adds	r3, #64	@ 0x40
 801bcca:	60fb      	str	r3, [r7, #12]
        CHACHA20_BLOCK_SIZE;
    source += CHACHA20_BLOCK_SIZE;
 801bccc:	68bb      	ldr	r3, [r7, #8]
 801bcce:	3340      	adds	r3, #64	@ 0x40
 801bcd0:	60bb      	str	r3, [r7, #8]
  for (b = 0; b < full_blocks; b++) {
 801bcd2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801bcd6:	3301      	adds	r3, #1
 801bcd8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 801bcdc:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 801bce0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801bce4:	429a      	cmp	r2, r3
 801bce6:	d3bc      	bcc.n	801bc62 <chacha20_xor_stream+0x30>
  }
  last_block = length % CHACHA20_BLOCK_SIZE;
 801bce8:	687b      	ldr	r3, [r7, #4]
 801bcea:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801bcee:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (last_block > 0) {
 801bcf2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801bcf6:	2b00      	cmp	r3, #0
 801bcf8:	d00f      	beq.n	801bd1a <chacha20_xor_stream+0xe8>
    core_block(state, pad);
 801bcfa:	f107 0218 	add.w	r2, r7, #24
 801bcfe:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 801bd02:	4611      	mov	r1, r2
 801bd04:	4618      	mov	r0, r3
 801bd06:	f7ff fcb7 	bl	801b678 <core_block>
    xor_block(dest, source, pad, (unsigned int) last_block);
 801bd0a:	f107 0218 	add.w	r2, r7, #24
 801bd0e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801bd12:	68b9      	ldr	r1, [r7, #8]
 801bd14:	68f8      	ldr	r0, [r7, #12]
 801bd16:	f7ff ff01 	bl	801bb1c <xor_block>
  }
}
 801bd1a:	bf00      	nop
 801bd1c:	37a8      	adds	r7, #168	@ 0xa8
 801bd1e:	46bd      	mov	sp, r7
 801bd20:	bd80      	pop	{r7, pc}

0801bd22 <rfc8439_keygen>:
  }
#endif

static void rfc8439_keygen(uint8_t poly_key[32],
                           const uint8_t key[CHACHA20_KEY_SIZE],
                           const uint8_t nonce[CHACHA20_NONCE_SIZE]) {
 801bd22:	b580      	push	{r7, lr}
 801bd24:	b0a4      	sub	sp, #144	@ 0x90
 801bd26:	af00      	add	r7, sp, #0
 801bd28:	60f8      	str	r0, [r7, #12]
 801bd2a:	60b9      	str	r1, [r7, #8]
 801bd2c:	607a      	str	r2, [r7, #4]
  uint32_t state[CHACHA20_STATE_WORDS];
  uint32_t result[CHACHA20_STATE_WORDS];
  size_t i;
  initialize_state(state, key, nonce, 0);
 801bd2e:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 801bd32:	2300      	movs	r3, #0
 801bd34:	687a      	ldr	r2, [r7, #4]
 801bd36:	68b9      	ldr	r1, [r7, #8]
 801bd38:	f7ff fc36 	bl	801b5a8 <initialize_state>
  core_block(state, result);
 801bd3c:	f107 0210 	add.w	r2, r7, #16
 801bd40:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 801bd44:	4611      	mov	r1, r2
 801bd46:	4618      	mov	r0, r3
 801bd48:	f7ff fc96 	bl	801b678 <core_block>
  serialize(poly_key, result);
 801bd4c:	f107 0310 	add.w	r3, r7, #16
 801bd50:	2220      	movs	r2, #32
 801bd52:	4619      	mov	r1, r3
 801bd54:	68f8      	ldr	r0, [r7, #12]
 801bd56:	f00b fdf0 	bl	802793a <memcpy>
  (void) i;
}
 801bd5a:	bf00      	nop
 801bd5c:	3790      	adds	r7, #144	@ 0x90
 801bd5e:	46bd      	mov	sp, r7
 801bd60:	bd80      	pop	{r7, pc}

0801bd62 <U8TO32>:
  unsigned char final;
} poly1305_state_internal_t;

/* interpret four 8 bit unsigned integers as a 32 bit unsigned integer in little
 * endian */
static unsigned long U8TO32(const unsigned char *p) {
 801bd62:	b480      	push	{r7}
 801bd64:	b083      	sub	sp, #12
 801bd66:	af00      	add	r7, sp, #0
 801bd68:	6078      	str	r0, [r7, #4]
  return (((unsigned long) (p[0] & 0xff)) |
 801bd6a:	687b      	ldr	r3, [r7, #4]
 801bd6c:	781b      	ldrb	r3, [r3, #0]
 801bd6e:	461a      	mov	r2, r3
          ((unsigned long) (p[1] & 0xff) << 8) |
 801bd70:	687b      	ldr	r3, [r7, #4]
 801bd72:	3301      	adds	r3, #1
 801bd74:	781b      	ldrb	r3, [r3, #0]
 801bd76:	021b      	lsls	r3, r3, #8
  return (((unsigned long) (p[0] & 0xff)) |
 801bd78:	431a      	orrs	r2, r3
          ((unsigned long) (p[2] & 0xff) << 16) |
 801bd7a:	687b      	ldr	r3, [r7, #4]
 801bd7c:	3302      	adds	r3, #2
 801bd7e:	781b      	ldrb	r3, [r3, #0]
 801bd80:	041b      	lsls	r3, r3, #16
          ((unsigned long) (p[1] & 0xff) << 8) |
 801bd82:	431a      	orrs	r2, r3
          ((unsigned long) (p[3] & 0xff) << 24));
 801bd84:	687b      	ldr	r3, [r7, #4]
 801bd86:	3303      	adds	r3, #3
 801bd88:	781b      	ldrb	r3, [r3, #0]
 801bd8a:	061b      	lsls	r3, r3, #24
          ((unsigned long) (p[2] & 0xff) << 16) |
 801bd8c:	4313      	orrs	r3, r2
}
 801bd8e:	4618      	mov	r0, r3
 801bd90:	370c      	adds	r7, #12
 801bd92:	46bd      	mov	sp, r7
 801bd94:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd98:	4770      	bx	lr

0801bd9a <U32TO8>:

/* store a 32 bit unsigned integer as four 8 bit unsigned integers in little
 * endian */
static void U32TO8(unsigned char *p, unsigned long v) {
 801bd9a:	b480      	push	{r7}
 801bd9c:	b083      	sub	sp, #12
 801bd9e:	af00      	add	r7, sp, #0
 801bda0:	6078      	str	r0, [r7, #4]
 801bda2:	6039      	str	r1, [r7, #0]
  p[0] = (unsigned char) ((v) &0xff);
 801bda4:	683b      	ldr	r3, [r7, #0]
 801bda6:	b2da      	uxtb	r2, r3
 801bda8:	687b      	ldr	r3, [r7, #4]
 801bdaa:	701a      	strb	r2, [r3, #0]
  p[1] = (unsigned char) ((v >> 8) & 0xff);
 801bdac:	683b      	ldr	r3, [r7, #0]
 801bdae:	0a1a      	lsrs	r2, r3, #8
 801bdb0:	687b      	ldr	r3, [r7, #4]
 801bdb2:	3301      	adds	r3, #1
 801bdb4:	b2d2      	uxtb	r2, r2
 801bdb6:	701a      	strb	r2, [r3, #0]
  p[2] = (unsigned char) ((v >> 16) & 0xff);
 801bdb8:	683b      	ldr	r3, [r7, #0]
 801bdba:	0c1a      	lsrs	r2, r3, #16
 801bdbc:	687b      	ldr	r3, [r7, #4]
 801bdbe:	3302      	adds	r3, #2
 801bdc0:	b2d2      	uxtb	r2, r2
 801bdc2:	701a      	strb	r2, [r3, #0]
  p[3] = (unsigned char) ((v >> 24) & 0xff);
 801bdc4:	683b      	ldr	r3, [r7, #0]
 801bdc6:	0e1a      	lsrs	r2, r3, #24
 801bdc8:	687b      	ldr	r3, [r7, #4]
 801bdca:	3303      	adds	r3, #3
 801bdcc:	b2d2      	uxtb	r2, r2
 801bdce:	701a      	strb	r2, [r3, #0]
}
 801bdd0:	bf00      	nop
 801bdd2:	370c      	adds	r7, #12
 801bdd4:	46bd      	mov	sp, r7
 801bdd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bdda:	4770      	bx	lr

0801bddc <poly1305_init>:

static void poly1305_init(poly1305_context *ctx, const unsigned char key[32]) {
 801bddc:	b580      	push	{r7, lr}
 801bdde:	b084      	sub	sp, #16
 801bde0:	af00      	add	r7, sp, #0
 801bde2:	6078      	str	r0, [r7, #4]
 801bde4:	6039      	str	r1, [r7, #0]
  poly1305_state_internal_t *st = (poly1305_state_internal_t *) ctx;
 801bde6:	687b      	ldr	r3, [r7, #4]
 801bde8:	60fb      	str	r3, [r7, #12]

  /* r &= 0xffffffc0ffffffc0ffffffc0fffffff */
  st->r[0] = (U8TO32(&key[0])) & 0x3ffffff;
 801bdea:	6838      	ldr	r0, [r7, #0]
 801bdec:	f7ff ffb9 	bl	801bd62 <U8TO32>
 801bdf0:	4603      	mov	r3, r0
 801bdf2:	f023 427c 	bic.w	r2, r3, #4227858432	@ 0xfc000000
 801bdf6:	68fb      	ldr	r3, [r7, #12]
 801bdf8:	601a      	str	r2, [r3, #0]
  st->r[1] = (U8TO32(&key[3]) >> 2) & 0x3ffff03;
 801bdfa:	683b      	ldr	r3, [r7, #0]
 801bdfc:	3303      	adds	r3, #3
 801bdfe:	4618      	mov	r0, r3
 801be00:	f7ff ffaf 	bl	801bd62 <U8TO32>
 801be04:	4603      	mov	r3, r0
 801be06:	089a      	lsrs	r2, r3, #2
 801be08:	4b2f      	ldr	r3, [pc, #188]	@ (801bec8 <poly1305_init+0xec>)
 801be0a:	4013      	ands	r3, r2
 801be0c:	68fa      	ldr	r2, [r7, #12]
 801be0e:	6053      	str	r3, [r2, #4]
  st->r[2] = (U8TO32(&key[6]) >> 4) & 0x3ffc0ff;
 801be10:	683b      	ldr	r3, [r7, #0]
 801be12:	3306      	adds	r3, #6
 801be14:	4618      	mov	r0, r3
 801be16:	f7ff ffa4 	bl	801bd62 <U8TO32>
 801be1a:	4603      	mov	r3, r0
 801be1c:	091a      	lsrs	r2, r3, #4
 801be1e:	4b2b      	ldr	r3, [pc, #172]	@ (801becc <poly1305_init+0xf0>)
 801be20:	4013      	ands	r3, r2
 801be22:	68fa      	ldr	r2, [r7, #12]
 801be24:	6093      	str	r3, [r2, #8]
  st->r[3] = (U8TO32(&key[9]) >> 6) & 0x3f03fff;
 801be26:	683b      	ldr	r3, [r7, #0]
 801be28:	3309      	adds	r3, #9
 801be2a:	4618      	mov	r0, r3
 801be2c:	f7ff ff99 	bl	801bd62 <U8TO32>
 801be30:	4603      	mov	r3, r0
 801be32:	099a      	lsrs	r2, r3, #6
 801be34:	4b26      	ldr	r3, [pc, #152]	@ (801bed0 <poly1305_init+0xf4>)
 801be36:	4013      	ands	r3, r2
 801be38:	68fa      	ldr	r2, [r7, #12]
 801be3a:	60d3      	str	r3, [r2, #12]
  st->r[4] = (U8TO32(&key[12]) >> 8) & 0x00fffff;
 801be3c:	683b      	ldr	r3, [r7, #0]
 801be3e:	330c      	adds	r3, #12
 801be40:	4618      	mov	r0, r3
 801be42:	f7ff ff8e 	bl	801bd62 <U8TO32>
 801be46:	4603      	mov	r3, r0
 801be48:	0a1b      	lsrs	r3, r3, #8
 801be4a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801be4e:	68fb      	ldr	r3, [r7, #12]
 801be50:	611a      	str	r2, [r3, #16]

  /* h = 0 */
  st->h[0] = 0;
 801be52:	68fb      	ldr	r3, [r7, #12]
 801be54:	2200      	movs	r2, #0
 801be56:	615a      	str	r2, [r3, #20]
  st->h[1] = 0;
 801be58:	68fb      	ldr	r3, [r7, #12]
 801be5a:	2200      	movs	r2, #0
 801be5c:	619a      	str	r2, [r3, #24]
  st->h[2] = 0;
 801be5e:	68fb      	ldr	r3, [r7, #12]
 801be60:	2200      	movs	r2, #0
 801be62:	61da      	str	r2, [r3, #28]
  st->h[3] = 0;
 801be64:	68fb      	ldr	r3, [r7, #12]
 801be66:	2200      	movs	r2, #0
 801be68:	621a      	str	r2, [r3, #32]
  st->h[4] = 0;
 801be6a:	68fb      	ldr	r3, [r7, #12]
 801be6c:	2200      	movs	r2, #0
 801be6e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* save pad for later */
  st->pad[0] = U8TO32(&key[16]);
 801be70:	683b      	ldr	r3, [r7, #0]
 801be72:	3310      	adds	r3, #16
 801be74:	4618      	mov	r0, r3
 801be76:	f7ff ff74 	bl	801bd62 <U8TO32>
 801be7a:	4602      	mov	r2, r0
 801be7c:	68fb      	ldr	r3, [r7, #12]
 801be7e:	629a      	str	r2, [r3, #40]	@ 0x28
  st->pad[1] = U8TO32(&key[20]);
 801be80:	683b      	ldr	r3, [r7, #0]
 801be82:	3314      	adds	r3, #20
 801be84:	4618      	mov	r0, r3
 801be86:	f7ff ff6c 	bl	801bd62 <U8TO32>
 801be8a:	4602      	mov	r2, r0
 801be8c:	68fb      	ldr	r3, [r7, #12]
 801be8e:	62da      	str	r2, [r3, #44]	@ 0x2c
  st->pad[2] = U8TO32(&key[24]);
 801be90:	683b      	ldr	r3, [r7, #0]
 801be92:	3318      	adds	r3, #24
 801be94:	4618      	mov	r0, r3
 801be96:	f7ff ff64 	bl	801bd62 <U8TO32>
 801be9a:	4602      	mov	r2, r0
 801be9c:	68fb      	ldr	r3, [r7, #12]
 801be9e:	631a      	str	r2, [r3, #48]	@ 0x30
  st->pad[3] = U8TO32(&key[28]);
 801bea0:	683b      	ldr	r3, [r7, #0]
 801bea2:	331c      	adds	r3, #28
 801bea4:	4618      	mov	r0, r3
 801bea6:	f7ff ff5c 	bl	801bd62 <U8TO32>
 801beaa:	4602      	mov	r2, r0
 801beac:	68fb      	ldr	r3, [r7, #12]
 801beae:	635a      	str	r2, [r3, #52]	@ 0x34

  st->leftover = 0;
 801beb0:	68fb      	ldr	r3, [r7, #12]
 801beb2:	2200      	movs	r2, #0
 801beb4:	639a      	str	r2, [r3, #56]	@ 0x38
  st->final = 0;
 801beb6:	68fb      	ldr	r3, [r7, #12]
 801beb8:	2200      	movs	r2, #0
 801beba:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
}
 801bebe:	bf00      	nop
 801bec0:	3710      	adds	r7, #16
 801bec2:	46bd      	mov	sp, r7
 801bec4:	bd80      	pop	{r7, pc}
 801bec6:	bf00      	nop
 801bec8:	03ffff03 	.word	0x03ffff03
 801becc:	03ffc0ff 	.word	0x03ffc0ff
 801bed0:	03f03fff 	.word	0x03f03fff

0801bed4 <poly1305_blocks>:

static void poly1305_blocks(poly1305_state_internal_t *st,
                            const unsigned char *m, size_t bytes) {
 801bed4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801bed8:	f5ad 7d68 	sub.w	sp, sp, #928	@ 0x3a0
 801bedc:	af00      	add	r7, sp, #0
 801bede:	f8c7 032c 	str.w	r0, [r7, #812]	@ 0x32c
 801bee2:	f8c7 1328 	str.w	r1, [r7, #808]	@ 0x328
 801bee6:	f8c7 2324 	str.w	r2, [r7, #804]	@ 0x324
  const unsigned long hibit = (st->final) ? 0 : (1UL << 24); /* 1 << 128 */
 801beea:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 801beee:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 801bef2:	2b00      	cmp	r3, #0
 801bef4:	d001      	beq.n	801befa <poly1305_blocks+0x26>
 801bef6:	2300      	movs	r3, #0
 801bef8:	e001      	b.n	801befe <poly1305_blocks+0x2a>
 801befa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 801befe:	f8c7 3388 	str.w	r3, [r7, #904]	@ 0x388
  unsigned long s1, s2, s3, s4;
  unsigned long h0, h1, h2, h3, h4;
  uint64_t d0, d1, d2, d3, d4;
  unsigned long c;

  r0 = st->r[0];
 801bf02:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 801bf06:	681b      	ldr	r3, [r3, #0]
 801bf08:	f8c7 3384 	str.w	r3, [r7, #900]	@ 0x384
  r1 = st->r[1];
 801bf0c:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 801bf10:	685b      	ldr	r3, [r3, #4]
 801bf12:	f8c7 3380 	str.w	r3, [r7, #896]	@ 0x380
  r2 = st->r[2];
 801bf16:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 801bf1a:	689b      	ldr	r3, [r3, #8]
 801bf1c:	f8c7 337c 	str.w	r3, [r7, #892]	@ 0x37c
  r3 = st->r[3];
 801bf20:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 801bf24:	68db      	ldr	r3, [r3, #12]
 801bf26:	f8c7 3378 	str.w	r3, [r7, #888]	@ 0x378
  r4 = st->r[4];
 801bf2a:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 801bf2e:	691b      	ldr	r3, [r3, #16]
 801bf30:	f8c7 3374 	str.w	r3, [r7, #884]	@ 0x374

  s1 = r1 * 5;
 801bf34:	f8d7 2380 	ldr.w	r2, [r7, #896]	@ 0x380
 801bf38:	4613      	mov	r3, r2
 801bf3a:	009b      	lsls	r3, r3, #2
 801bf3c:	4413      	add	r3, r2
 801bf3e:	f8c7 3370 	str.w	r3, [r7, #880]	@ 0x370
  s2 = r2 * 5;
 801bf42:	f8d7 237c 	ldr.w	r2, [r7, #892]	@ 0x37c
 801bf46:	4613      	mov	r3, r2
 801bf48:	009b      	lsls	r3, r3, #2
 801bf4a:	4413      	add	r3, r2
 801bf4c:	f8c7 336c 	str.w	r3, [r7, #876]	@ 0x36c
  s3 = r3 * 5;
 801bf50:	f8d7 2378 	ldr.w	r2, [r7, #888]	@ 0x378
 801bf54:	4613      	mov	r3, r2
 801bf56:	009b      	lsls	r3, r3, #2
 801bf58:	4413      	add	r3, r2
 801bf5a:	f8c7 3368 	str.w	r3, [r7, #872]	@ 0x368
  s4 = r4 * 5;
 801bf5e:	f8d7 2374 	ldr.w	r2, [r7, #884]	@ 0x374
 801bf62:	4613      	mov	r3, r2
 801bf64:	009b      	lsls	r3, r3, #2
 801bf66:	4413      	add	r3, r2
 801bf68:	f8c7 3364 	str.w	r3, [r7, #868]	@ 0x364

  h0 = st->h[0];
 801bf6c:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 801bf70:	695b      	ldr	r3, [r3, #20]
 801bf72:	f8c7 339c 	str.w	r3, [r7, #924]	@ 0x39c
  h1 = st->h[1];
 801bf76:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 801bf7a:	699b      	ldr	r3, [r3, #24]
 801bf7c:	f8c7 3398 	str.w	r3, [r7, #920]	@ 0x398
  h2 = st->h[2];
 801bf80:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 801bf84:	69db      	ldr	r3, [r3, #28]
 801bf86:	f8c7 3394 	str.w	r3, [r7, #916]	@ 0x394
  h3 = st->h[3];
 801bf8a:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 801bf8e:	6a1b      	ldr	r3, [r3, #32]
 801bf90:	f8c7 3390 	str.w	r3, [r7, #912]	@ 0x390
  h4 = st->h[4];
 801bf94:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 801bf98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801bf9a:	f8c7 338c 	str.w	r3, [r7, #908]	@ 0x38c

  while (bytes >= poly1305_block_size) {
 801bf9e:	f000 be78 	b.w	801cc92 <poly1305_blocks+0xdbe>
    /* h += m[i] */
    h0 += (U8TO32(m + 0)) & 0x3ffffff;
 801bfa2:	f8d7 0328 	ldr.w	r0, [r7, #808]	@ 0x328
 801bfa6:	f7ff fedc 	bl	801bd62 <U8TO32>
 801bfaa:	4603      	mov	r3, r0
 801bfac:	f023 427c 	bic.w	r2, r3, #4227858432	@ 0xfc000000
 801bfb0:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 801bfb4:	4413      	add	r3, r2
 801bfb6:	f8c7 339c 	str.w	r3, [r7, #924]	@ 0x39c
    h1 += (U8TO32(m + 3) >> 2) & 0x3ffffff;
 801bfba:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 801bfbe:	3303      	adds	r3, #3
 801bfc0:	4618      	mov	r0, r3
 801bfc2:	f7ff fece 	bl	801bd62 <U8TO32>
 801bfc6:	4603      	mov	r3, r0
 801bfc8:	089b      	lsrs	r3, r3, #2
 801bfca:	f023 427c 	bic.w	r2, r3, #4227858432	@ 0xfc000000
 801bfce:	f8d7 3398 	ldr.w	r3, [r7, #920]	@ 0x398
 801bfd2:	4413      	add	r3, r2
 801bfd4:	f8c7 3398 	str.w	r3, [r7, #920]	@ 0x398
    h2 += (U8TO32(m + 6) >> 4) & 0x3ffffff;
 801bfd8:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 801bfdc:	3306      	adds	r3, #6
 801bfde:	4618      	mov	r0, r3
 801bfe0:	f7ff febf 	bl	801bd62 <U8TO32>
 801bfe4:	4603      	mov	r3, r0
 801bfe6:	091b      	lsrs	r3, r3, #4
 801bfe8:	f023 427c 	bic.w	r2, r3, #4227858432	@ 0xfc000000
 801bfec:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 801bff0:	4413      	add	r3, r2
 801bff2:	f8c7 3394 	str.w	r3, [r7, #916]	@ 0x394
    h3 += (U8TO32(m + 9) >> 6) & 0x3ffffff;
 801bff6:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 801bffa:	3309      	adds	r3, #9
 801bffc:	4618      	mov	r0, r3
 801bffe:	f7ff feb0 	bl	801bd62 <U8TO32>
 801c002:	4603      	mov	r3, r0
 801c004:	099b      	lsrs	r3, r3, #6
 801c006:	f023 427c 	bic.w	r2, r3, #4227858432	@ 0xfc000000
 801c00a:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 801c00e:	4413      	add	r3, r2
 801c010:	f8c7 3390 	str.w	r3, [r7, #912]	@ 0x390
    h4 += (U8TO32(m + 12) >> 8) | hibit;
 801c014:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 801c018:	330c      	adds	r3, #12
 801c01a:	4618      	mov	r0, r3
 801c01c:	f7ff fea1 	bl	801bd62 <U8TO32>
 801c020:	4603      	mov	r3, r0
 801c022:	0a1a      	lsrs	r2, r3, #8
 801c024:	f8d7 3388 	ldr.w	r3, [r7, #904]	@ 0x388
 801c028:	431a      	orrs	r2, r3
 801c02a:	f8d7 338c 	ldr.w	r3, [r7, #908]	@ 0x38c
 801c02e:	4413      	add	r3, r2
 801c030:	f8c7 338c 	str.w	r3, [r7, #908]	@ 0x38c

    /* h *= r */
    d0 = ((uint64_t) h0 * r0) + ((uint64_t) h1 * s4) + ((uint64_t) h2 * s3) +
 801c034:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 801c038:	2200      	movs	r2, #0
 801c03a:	f8c7 32e0 	str.w	r3, [r7, #736]	@ 0x2e0
 801c03e:	f8c7 22e4 	str.w	r2, [r7, #740]	@ 0x2e4
 801c042:	f8d7 3384 	ldr.w	r3, [r7, #900]	@ 0x384
 801c046:	2200      	movs	r2, #0
 801c048:	f8c7 32d8 	str.w	r3, [r7, #728]	@ 0x2d8
 801c04c:	f8c7 22dc 	str.w	r2, [r7, #732]	@ 0x2dc
 801c050:	e9d7 01b8 	ldrd	r0, r1, [r7, #736]	@ 0x2e0
 801c054:	460b      	mov	r3, r1
 801c056:	f8d7 22d8 	ldr.w	r2, [r7, #728]	@ 0x2d8
 801c05a:	fb02 f203 	mul.w	r2, r2, r3
 801c05e:	f8d7 32dc 	ldr.w	r3, [r7, #732]	@ 0x2dc
 801c062:	e9c7 01b8 	strd	r0, r1, [r7, #736]	@ 0x2e0
 801c066:	4601      	mov	r1, r0
 801c068:	fb01 f303 	mul.w	r3, r1, r3
 801c06c:	4413      	add	r3, r2
 801c06e:	f8d7 22e0 	ldr.w	r2, [r7, #736]	@ 0x2e0
 801c072:	f8d7 12d8 	ldr.w	r1, [r7, #728]	@ 0x2d8
 801c076:	fba2 1201 	umull	r1, r2, r2, r1
 801c07a:	f8c7 231c 	str.w	r2, [r7, #796]	@ 0x31c
 801c07e:	460a      	mov	r2, r1
 801c080:	f8c7 2318 	str.w	r2, [r7, #792]	@ 0x318
 801c084:	f8d7 231c 	ldr.w	r2, [r7, #796]	@ 0x31c
 801c088:	4413      	add	r3, r2
 801c08a:	f8c7 331c 	str.w	r3, [r7, #796]	@ 0x31c
 801c08e:	f8d7 3398 	ldr.w	r3, [r7, #920]	@ 0x398
 801c092:	2200      	movs	r2, #0
 801c094:	f8c7 32d0 	str.w	r3, [r7, #720]	@ 0x2d0
 801c098:	f8c7 22d4 	str.w	r2, [r7, #724]	@ 0x2d4
 801c09c:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 801c0a0:	2200      	movs	r2, #0
 801c0a2:	f8c7 32c8 	str.w	r3, [r7, #712]	@ 0x2c8
 801c0a6:	f8c7 22cc 	str.w	r2, [r7, #716]	@ 0x2cc
 801c0aa:	e9d7 01b4 	ldrd	r0, r1, [r7, #720]	@ 0x2d0
 801c0ae:	460b      	mov	r3, r1
 801c0b0:	f8d7 22c8 	ldr.w	r2, [r7, #712]	@ 0x2c8
 801c0b4:	fb02 f203 	mul.w	r2, r2, r3
 801c0b8:	f8d7 32cc 	ldr.w	r3, [r7, #716]	@ 0x2cc
 801c0bc:	e9c7 01b4 	strd	r0, r1, [r7, #720]	@ 0x2d0
 801c0c0:	4601      	mov	r1, r0
 801c0c2:	fb01 f303 	mul.w	r3, r1, r3
 801c0c6:	4413      	add	r3, r2
 801c0c8:	f8d7 22d0 	ldr.w	r2, [r7, #720]	@ 0x2d0
 801c0cc:	f8d7 12c8 	ldr.w	r1, [r7, #712]	@ 0x2c8
 801c0d0:	fba2 1201 	umull	r1, r2, r2, r1
 801c0d4:	f8c7 22c4 	str.w	r2, [r7, #708]	@ 0x2c4
 801c0d8:	460a      	mov	r2, r1
 801c0da:	f8c7 22c0 	str.w	r2, [r7, #704]	@ 0x2c0
 801c0de:	f8d7 22c4 	ldr.w	r2, [r7, #708]	@ 0x2c4
 801c0e2:	4413      	add	r3, r2
 801c0e4:	f8c7 32c4 	str.w	r3, [r7, #708]	@ 0x2c4
 801c0e8:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 801c0ec:	e9d7 01b0 	ldrd	r0, r1, [r7, #704]	@ 0x2c0
 801c0f0:	4602      	mov	r2, r0
 801c0f2:	189b      	adds	r3, r3, r2
 801c0f4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 801c0f8:	f8d7 331c 	ldr.w	r3, [r7, #796]	@ 0x31c
 801c0fc:	460a      	mov	r2, r1
 801c0fe:	4153      	adcs	r3, r2
 801c100:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
         ((uint64_t) h3 * s2) + ((uint64_t) h4 * s1);
 801c104:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 801c108:	2200      	movs	r2, #0
 801c10a:	f8c7 32b8 	str.w	r3, [r7, #696]	@ 0x2b8
 801c10e:	f8c7 22bc 	str.w	r2, [r7, #700]	@ 0x2bc
 801c112:	f8d7 336c 	ldr.w	r3, [r7, #876]	@ 0x36c
 801c116:	2200      	movs	r2, #0
 801c118:	f8c7 32b0 	str.w	r3, [r7, #688]	@ 0x2b0
 801c11c:	f8c7 22b4 	str.w	r2, [r7, #692]	@ 0x2b4
 801c120:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	@ 0x2b8
 801c124:	460b      	mov	r3, r1
 801c126:	f8d7 22b0 	ldr.w	r2, [r7, #688]	@ 0x2b0
 801c12a:	fb02 f203 	mul.w	r2, r2, r3
 801c12e:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 801c132:	e9c7 01ae 	strd	r0, r1, [r7, #696]	@ 0x2b8
 801c136:	4601      	mov	r1, r0
 801c138:	fb01 f303 	mul.w	r3, r1, r3
 801c13c:	4413      	add	r3, r2
 801c13e:	f8d7 22b8 	ldr.w	r2, [r7, #696]	@ 0x2b8
 801c142:	f8d7 12b0 	ldr.w	r1, [r7, #688]	@ 0x2b0
 801c146:	fba2 1201 	umull	r1, r2, r2, r1
 801c14a:	f8c7 2314 	str.w	r2, [r7, #788]	@ 0x314
 801c14e:	460a      	mov	r2, r1
 801c150:	f8c7 2310 	str.w	r2, [r7, #784]	@ 0x310
 801c154:	f8d7 2314 	ldr.w	r2, [r7, #788]	@ 0x314
 801c158:	4413      	add	r3, r2
 801c15a:	f8c7 3314 	str.w	r3, [r7, #788]	@ 0x314
    d0 = ((uint64_t) h0 * r0) + ((uint64_t) h1 * s4) + ((uint64_t) h2 * s3) +
 801c15e:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 801c162:	2200      	movs	r2, #0
 801c164:	f8c7 32a8 	str.w	r3, [r7, #680]	@ 0x2a8
 801c168:	f8c7 22ac 	str.w	r2, [r7, #684]	@ 0x2ac
 801c16c:	f8d7 3368 	ldr.w	r3, [r7, #872]	@ 0x368
 801c170:	2200      	movs	r2, #0
 801c172:	f8c7 32a0 	str.w	r3, [r7, #672]	@ 0x2a0
 801c176:	f8c7 22a4 	str.w	r2, [r7, #676]	@ 0x2a4
 801c17a:	e9d7 01aa 	ldrd	r0, r1, [r7, #680]	@ 0x2a8
 801c17e:	460b      	mov	r3, r1
 801c180:	f8d7 22a0 	ldr.w	r2, [r7, #672]	@ 0x2a0
 801c184:	fb02 f203 	mul.w	r2, r2, r3
 801c188:	f8d7 32a4 	ldr.w	r3, [r7, #676]	@ 0x2a4
 801c18c:	e9c7 01aa 	strd	r0, r1, [r7, #680]	@ 0x2a8
 801c190:	4601      	mov	r1, r0
 801c192:	fb01 f303 	mul.w	r3, r1, r3
 801c196:	4413      	add	r3, r2
 801c198:	f8d7 22a8 	ldr.w	r2, [r7, #680]	@ 0x2a8
 801c19c:	f8d7 12a0 	ldr.w	r1, [r7, #672]	@ 0x2a0
 801c1a0:	fba2 1201 	umull	r1, r2, r2, r1
 801c1a4:	f8c7 229c 	str.w	r2, [r7, #668]	@ 0x29c
 801c1a8:	460a      	mov	r2, r1
 801c1aa:	f8c7 2298 	str.w	r2, [r7, #664]	@ 0x298
 801c1ae:	f8d7 229c 	ldr.w	r2, [r7, #668]	@ 0x29c
 801c1b2:	4413      	add	r3, r2
 801c1b4:	f8c7 329c 	str.w	r3, [r7, #668]	@ 0x29c
 801c1b8:	f8d7 3310 	ldr.w	r3, [r7, #784]	@ 0x310
 801c1bc:	e9d7 01a6 	ldrd	r0, r1, [r7, #664]	@ 0x298
 801c1c0:	4602      	mov	r2, r0
 801c1c2:	189b      	adds	r3, r3, r2
 801c1c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 801c1c6:	f8d7 3314 	ldr.w	r3, [r7, #788]	@ 0x314
 801c1ca:	460a      	mov	r2, r1
 801c1cc:	4153      	adcs	r3, r2
 801c1ce:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801c1d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 801c1d4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 801c1d8:	4602      	mov	r2, r0
 801c1da:	189b      	adds	r3, r3, r2
 801c1dc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 801c1e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801c1e4:	460a      	mov	r2, r1
 801c1e6:	4153      	adcs	r3, r2
 801c1e8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
         ((uint64_t) h3 * s2) + ((uint64_t) h4 * s1);
 801c1ec:	f8d7 338c 	ldr.w	r3, [r7, #908]	@ 0x38c
 801c1f0:	2200      	movs	r2, #0
 801c1f2:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290
 801c1f6:	f8c7 2294 	str.w	r2, [r7, #660]	@ 0x294
 801c1fa:	f8d7 3370 	ldr.w	r3, [r7, #880]	@ 0x370
 801c1fe:	2200      	movs	r2, #0
 801c200:	f8c7 3288 	str.w	r3, [r7, #648]	@ 0x288
 801c204:	f8c7 228c 	str.w	r2, [r7, #652]	@ 0x28c
 801c208:	e9d7 01a4 	ldrd	r0, r1, [r7, #656]	@ 0x290
 801c20c:	460b      	mov	r3, r1
 801c20e:	f8d7 2288 	ldr.w	r2, [r7, #648]	@ 0x288
 801c212:	fb02 f203 	mul.w	r2, r2, r3
 801c216:	f8d7 328c 	ldr.w	r3, [r7, #652]	@ 0x28c
 801c21a:	e9c7 01a4 	strd	r0, r1, [r7, #656]	@ 0x290
 801c21e:	4601      	mov	r1, r0
 801c220:	fb01 f303 	mul.w	r3, r1, r3
 801c224:	4413      	add	r3, r2
 801c226:	f8d7 2290 	ldr.w	r2, [r7, #656]	@ 0x290
 801c22a:	f8d7 1288 	ldr.w	r1, [r7, #648]	@ 0x288
 801c22e:	fba2 1201 	umull	r1, r2, r2, r1
 801c232:	f8c7 2284 	str.w	r2, [r7, #644]	@ 0x284
 801c236:	460a      	mov	r2, r1
 801c238:	f8c7 2280 	str.w	r2, [r7, #640]	@ 0x280
 801c23c:	f8d7 2284 	ldr.w	r2, [r7, #644]	@ 0x284
 801c240:	4413      	add	r3, r2
 801c242:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
    d0 = ((uint64_t) h0 * r0) + ((uint64_t) h1 * s4) + ((uint64_t) h2 * s3) +
 801c246:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 801c24a:	e9d7 01a0 	ldrd	r0, r1, [r7, #640]	@ 0x280
 801c24e:	4602      	mov	r2, r0
 801c250:	189b      	adds	r3, r3, r2
 801c252:	643b      	str	r3, [r7, #64]	@ 0x40
 801c254:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801c258:	460a      	mov	r2, r1
 801c25a:	4153      	adcs	r3, r2
 801c25c:	647b      	str	r3, [r7, #68]	@ 0x44
 801c25e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 801c262:	e9c7 23d6 	strd	r2, r3, [r7, #856]	@ 0x358
    d1 = ((uint64_t) h0 * r1) + ((uint64_t) h1 * r0) + ((uint64_t) h2 * s4) +
 801c266:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 801c26a:	2200      	movs	r2, #0
 801c26c:	f8c7 3278 	str.w	r3, [r7, #632]	@ 0x278
 801c270:	f8c7 227c 	str.w	r2, [r7, #636]	@ 0x27c
 801c274:	f8d7 3380 	ldr.w	r3, [r7, #896]	@ 0x380
 801c278:	2200      	movs	r2, #0
 801c27a:	f8c7 3270 	str.w	r3, [r7, #624]	@ 0x270
 801c27e:	f8c7 2274 	str.w	r2, [r7, #628]	@ 0x274
 801c282:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	@ 0x278
 801c286:	460b      	mov	r3, r1
 801c288:	f8d7 2270 	ldr.w	r2, [r7, #624]	@ 0x270
 801c28c:	fb02 f203 	mul.w	r2, r2, r3
 801c290:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 801c294:	e9c7 019e 	strd	r0, r1, [r7, #632]	@ 0x278
 801c298:	4601      	mov	r1, r0
 801c29a:	fb01 f303 	mul.w	r3, r1, r3
 801c29e:	4413      	add	r3, r2
 801c2a0:	f8d7 2278 	ldr.w	r2, [r7, #632]	@ 0x278
 801c2a4:	f8d7 1270 	ldr.w	r1, [r7, #624]	@ 0x270
 801c2a8:	fba2 1201 	umull	r1, r2, r2, r1
 801c2ac:	f8c7 230c 	str.w	r2, [r7, #780]	@ 0x30c
 801c2b0:	460a      	mov	r2, r1
 801c2b2:	f8c7 2308 	str.w	r2, [r7, #776]	@ 0x308
 801c2b6:	f8d7 230c 	ldr.w	r2, [r7, #780]	@ 0x30c
 801c2ba:	4413      	add	r3, r2
 801c2bc:	f8c7 330c 	str.w	r3, [r7, #780]	@ 0x30c
 801c2c0:	f8d7 3398 	ldr.w	r3, [r7, #920]	@ 0x398
 801c2c4:	2200      	movs	r2, #0
 801c2c6:	f8c7 3268 	str.w	r3, [r7, #616]	@ 0x268
 801c2ca:	f8c7 226c 	str.w	r2, [r7, #620]	@ 0x26c
 801c2ce:	f8d7 3384 	ldr.w	r3, [r7, #900]	@ 0x384
 801c2d2:	2200      	movs	r2, #0
 801c2d4:	f8c7 3260 	str.w	r3, [r7, #608]	@ 0x260
 801c2d8:	f8c7 2264 	str.w	r2, [r7, #612]	@ 0x264
 801c2dc:	e9d7 019a 	ldrd	r0, r1, [r7, #616]	@ 0x268
 801c2e0:	460b      	mov	r3, r1
 801c2e2:	f8d7 2260 	ldr.w	r2, [r7, #608]	@ 0x260
 801c2e6:	fb02 f203 	mul.w	r2, r2, r3
 801c2ea:	f8d7 3264 	ldr.w	r3, [r7, #612]	@ 0x264
 801c2ee:	e9c7 019a 	strd	r0, r1, [r7, #616]	@ 0x268
 801c2f2:	4601      	mov	r1, r0
 801c2f4:	fb01 f303 	mul.w	r3, r1, r3
 801c2f8:	4413      	add	r3, r2
 801c2fa:	f8d7 2268 	ldr.w	r2, [r7, #616]	@ 0x268
 801c2fe:	f8d7 1260 	ldr.w	r1, [r7, #608]	@ 0x260
 801c302:	fba2 1201 	umull	r1, r2, r2, r1
 801c306:	f8c7 225c 	str.w	r2, [r7, #604]	@ 0x25c
 801c30a:	460a      	mov	r2, r1
 801c30c:	f8c7 2258 	str.w	r2, [r7, #600]	@ 0x258
 801c310:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 801c314:	4413      	add	r3, r2
 801c316:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
 801c31a:	f8d7 3308 	ldr.w	r3, [r7, #776]	@ 0x308
 801c31e:	e9d7 0196 	ldrd	r0, r1, [r7, #600]	@ 0x258
 801c322:	4602      	mov	r2, r0
 801c324:	189b      	adds	r3, r3, r2
 801c326:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 801c32a:	f8d7 330c 	ldr.w	r3, [r7, #780]	@ 0x30c
 801c32e:	460a      	mov	r2, r1
 801c330:	4153      	adcs	r3, r2
 801c332:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
         ((uint64_t) h3 * s3) + ((uint64_t) h4 * s2);
 801c336:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 801c33a:	2200      	movs	r2, #0
 801c33c:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250
 801c340:	f8c7 2254 	str.w	r2, [r7, #596]	@ 0x254
 801c344:	f8d7 3368 	ldr.w	r3, [r7, #872]	@ 0x368
 801c348:	2200      	movs	r2, #0
 801c34a:	f8c7 3248 	str.w	r3, [r7, #584]	@ 0x248
 801c34e:	f8c7 224c 	str.w	r2, [r7, #588]	@ 0x24c
 801c352:	e9d7 0194 	ldrd	r0, r1, [r7, #592]	@ 0x250
 801c356:	460b      	mov	r3, r1
 801c358:	f8d7 2248 	ldr.w	r2, [r7, #584]	@ 0x248
 801c35c:	fb02 f203 	mul.w	r2, r2, r3
 801c360:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 801c364:	e9c7 0194 	strd	r0, r1, [r7, #592]	@ 0x250
 801c368:	4601      	mov	r1, r0
 801c36a:	fb01 f303 	mul.w	r3, r1, r3
 801c36e:	4413      	add	r3, r2
 801c370:	f8d7 2250 	ldr.w	r2, [r7, #592]	@ 0x250
 801c374:	f8d7 1248 	ldr.w	r1, [r7, #584]	@ 0x248
 801c378:	fba2 1201 	umull	r1, r2, r2, r1
 801c37c:	f8c7 2304 	str.w	r2, [r7, #772]	@ 0x304
 801c380:	460a      	mov	r2, r1
 801c382:	f8c7 2300 	str.w	r2, [r7, #768]	@ 0x300
 801c386:	f8d7 2304 	ldr.w	r2, [r7, #772]	@ 0x304
 801c38a:	4413      	add	r3, r2
 801c38c:	f8c7 3304 	str.w	r3, [r7, #772]	@ 0x304
    d1 = ((uint64_t) h0 * r1) + ((uint64_t) h1 * r0) + ((uint64_t) h2 * s4) +
 801c390:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 801c394:	2200      	movs	r2, #0
 801c396:	f8c7 3240 	str.w	r3, [r7, #576]	@ 0x240
 801c39a:	f8c7 2244 	str.w	r2, [r7, #580]	@ 0x244
 801c39e:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 801c3a2:	2200      	movs	r2, #0
 801c3a4:	f8c7 3238 	str.w	r3, [r7, #568]	@ 0x238
 801c3a8:	f8c7 223c 	str.w	r2, [r7, #572]	@ 0x23c
 801c3ac:	e9d7 0190 	ldrd	r0, r1, [r7, #576]	@ 0x240
 801c3b0:	460b      	mov	r3, r1
 801c3b2:	f8d7 2238 	ldr.w	r2, [r7, #568]	@ 0x238
 801c3b6:	fb02 f203 	mul.w	r2, r2, r3
 801c3ba:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 801c3be:	e9c7 0190 	strd	r0, r1, [r7, #576]	@ 0x240
 801c3c2:	4601      	mov	r1, r0
 801c3c4:	fb01 f303 	mul.w	r3, r1, r3
 801c3c8:	4413      	add	r3, r2
 801c3ca:	f8d7 2240 	ldr.w	r2, [r7, #576]	@ 0x240
 801c3ce:	f8d7 1238 	ldr.w	r1, [r7, #568]	@ 0x238
 801c3d2:	fba2 1201 	umull	r1, r2, r2, r1
 801c3d6:	f8c7 2234 	str.w	r2, [r7, #564]	@ 0x234
 801c3da:	460a      	mov	r2, r1
 801c3dc:	f8c7 2230 	str.w	r2, [r7, #560]	@ 0x230
 801c3e0:	f8d7 2234 	ldr.w	r2, [r7, #564]	@ 0x234
 801c3e4:	4413      	add	r3, r2
 801c3e6:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
 801c3ea:	f8d7 3300 	ldr.w	r3, [r7, #768]	@ 0x300
 801c3ee:	e9d7 018c 	ldrd	r0, r1, [r7, #560]	@ 0x230
 801c3f2:	4602      	mov	r2, r0
 801c3f4:	189b      	adds	r3, r3, r2
 801c3f6:	663b      	str	r3, [r7, #96]	@ 0x60
 801c3f8:	f8d7 3304 	ldr.w	r3, [r7, #772]	@ 0x304
 801c3fc:	460a      	mov	r2, r1
 801c3fe:	4153      	adcs	r3, r2
 801c400:	667b      	str	r3, [r7, #100]	@ 0x64
 801c402:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 801c406:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 801c40a:	4602      	mov	r2, r0
 801c40c:	189b      	adds	r3, r3, r2
 801c40e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 801c412:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801c416:	460a      	mov	r2, r1
 801c418:	4153      	adcs	r3, r2
 801c41a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
         ((uint64_t) h3 * s3) + ((uint64_t) h4 * s2);
 801c41e:	f8d7 338c 	ldr.w	r3, [r7, #908]	@ 0x38c
 801c422:	2200      	movs	r2, #0
 801c424:	f8c7 3228 	str.w	r3, [r7, #552]	@ 0x228
 801c428:	f8c7 222c 	str.w	r2, [r7, #556]	@ 0x22c
 801c42c:	f8d7 336c 	ldr.w	r3, [r7, #876]	@ 0x36c
 801c430:	2200      	movs	r2, #0
 801c432:	f8c7 3220 	str.w	r3, [r7, #544]	@ 0x220
 801c436:	f8c7 2224 	str.w	r2, [r7, #548]	@ 0x224
 801c43a:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	@ 0x228
 801c43e:	460b      	mov	r3, r1
 801c440:	f8d7 2220 	ldr.w	r2, [r7, #544]	@ 0x220
 801c444:	fb02 f203 	mul.w	r2, r2, r3
 801c448:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 801c44c:	e9c7 018a 	strd	r0, r1, [r7, #552]	@ 0x228
 801c450:	4601      	mov	r1, r0
 801c452:	fb01 f303 	mul.w	r3, r1, r3
 801c456:	4413      	add	r3, r2
 801c458:	f8d7 2228 	ldr.w	r2, [r7, #552]	@ 0x228
 801c45c:	f8d7 1220 	ldr.w	r1, [r7, #544]	@ 0x220
 801c460:	fba2 1201 	umull	r1, r2, r2, r1
 801c464:	f8c7 221c 	str.w	r2, [r7, #540]	@ 0x21c
 801c468:	460a      	mov	r2, r1
 801c46a:	f8c7 2218 	str.w	r2, [r7, #536]	@ 0x218
 801c46e:	f8d7 221c 	ldr.w	r2, [r7, #540]	@ 0x21c
 801c472:	4413      	add	r3, r2
 801c474:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
    d1 = ((uint64_t) h0 * r1) + ((uint64_t) h1 * r0) + ((uint64_t) h2 * s4) +
 801c478:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 801c47c:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	@ 0x218
 801c480:	4602      	mov	r2, r0
 801c482:	189b      	adds	r3, r3, r2
 801c484:	63bb      	str	r3, [r7, #56]	@ 0x38
 801c486:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 801c48a:	460a      	mov	r2, r1
 801c48c:	4153      	adcs	r3, r2
 801c48e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801c490:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 801c494:	e9c7 23d4 	strd	r2, r3, [r7, #848]	@ 0x350
    d2 = ((uint64_t) h0 * r2) + ((uint64_t) h1 * r1) + ((uint64_t) h2 * r0) +
 801c498:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 801c49c:	2200      	movs	r2, #0
 801c49e:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
 801c4a2:	f8c7 2214 	str.w	r2, [r7, #532]	@ 0x214
 801c4a6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
 801c4aa:	2200      	movs	r2, #0
 801c4ac:	f8c7 3208 	str.w	r3, [r7, #520]	@ 0x208
 801c4b0:	f8c7 220c 	str.w	r2, [r7, #524]	@ 0x20c
 801c4b4:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	@ 0x210
 801c4b8:	460b      	mov	r3, r1
 801c4ba:	f8d7 2208 	ldr.w	r2, [r7, #520]	@ 0x208
 801c4be:	fb02 f203 	mul.w	r2, r2, r3
 801c4c2:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 801c4c6:	e9c7 0184 	strd	r0, r1, [r7, #528]	@ 0x210
 801c4ca:	4601      	mov	r1, r0
 801c4cc:	fb01 f303 	mul.w	r3, r1, r3
 801c4d0:	4413      	add	r3, r2
 801c4d2:	f8d7 2210 	ldr.w	r2, [r7, #528]	@ 0x210
 801c4d6:	f8d7 1208 	ldr.w	r1, [r7, #520]	@ 0x208
 801c4da:	fba2 1201 	umull	r1, r2, r2, r1
 801c4de:	f8c7 22fc 	str.w	r2, [r7, #764]	@ 0x2fc
 801c4e2:	460a      	mov	r2, r1
 801c4e4:	f8c7 22f8 	str.w	r2, [r7, #760]	@ 0x2f8
 801c4e8:	f8d7 22fc 	ldr.w	r2, [r7, #764]	@ 0x2fc
 801c4ec:	4413      	add	r3, r2
 801c4ee:	f8c7 32fc 	str.w	r3, [r7, #764]	@ 0x2fc
 801c4f2:	f8d7 3398 	ldr.w	r3, [r7, #920]	@ 0x398
 801c4f6:	2200      	movs	r2, #0
 801c4f8:	f8c7 3200 	str.w	r3, [r7, #512]	@ 0x200
 801c4fc:	f8c7 2204 	str.w	r2, [r7, #516]	@ 0x204
 801c500:	f8d7 3380 	ldr.w	r3, [r7, #896]	@ 0x380
 801c504:	2200      	movs	r2, #0
 801c506:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
 801c50a:	f8c7 21fc 	str.w	r2, [r7, #508]	@ 0x1fc
 801c50e:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	@ 0x200
 801c512:	460b      	mov	r3, r1
 801c514:	f8d7 21f8 	ldr.w	r2, [r7, #504]	@ 0x1f8
 801c518:	fb02 f203 	mul.w	r2, r2, r3
 801c51c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 801c520:	e9c7 0180 	strd	r0, r1, [r7, #512]	@ 0x200
 801c524:	4601      	mov	r1, r0
 801c526:	fb01 f303 	mul.w	r3, r1, r3
 801c52a:	4413      	add	r3, r2
 801c52c:	f8d7 2200 	ldr.w	r2, [r7, #512]	@ 0x200
 801c530:	f8d7 11f8 	ldr.w	r1, [r7, #504]	@ 0x1f8
 801c534:	fba2 1201 	umull	r1, r2, r2, r1
 801c538:	f8c7 21f4 	str.w	r2, [r7, #500]	@ 0x1f4
 801c53c:	460a      	mov	r2, r1
 801c53e:	f8c7 21f0 	str.w	r2, [r7, #496]	@ 0x1f0
 801c542:	f8d7 21f4 	ldr.w	r2, [r7, #500]	@ 0x1f4
 801c546:	4413      	add	r3, r2
 801c548:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
 801c54c:	f8d7 32f8 	ldr.w	r3, [r7, #760]	@ 0x2f8
 801c550:	e9d7 017c 	ldrd	r0, r1, [r7, #496]	@ 0x1f0
 801c554:	4602      	mov	r2, r0
 801c556:	189b      	adds	r3, r3, r2
 801c558:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 801c55c:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 801c560:	460a      	mov	r2, r1
 801c562:	4153      	adcs	r3, r2
 801c564:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
         ((uint64_t) h3 * s4) + ((uint64_t) h4 * s3);
 801c568:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 801c56c:	2200      	movs	r2, #0
 801c56e:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 801c572:	f8c7 21ec 	str.w	r2, [r7, #492]	@ 0x1ec
 801c576:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 801c57a:	2200      	movs	r2, #0
 801c57c:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 801c580:	f8c7 21e4 	str.w	r2, [r7, #484]	@ 0x1e4
 801c584:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	@ 0x1e8
 801c588:	460b      	mov	r3, r1
 801c58a:	f8d7 21e0 	ldr.w	r2, [r7, #480]	@ 0x1e0
 801c58e:	fb02 f203 	mul.w	r2, r2, r3
 801c592:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 801c596:	e9c7 017a 	strd	r0, r1, [r7, #488]	@ 0x1e8
 801c59a:	4601      	mov	r1, r0
 801c59c:	fb01 f303 	mul.w	r3, r1, r3
 801c5a0:	4413      	add	r3, r2
 801c5a2:	f8d7 21e8 	ldr.w	r2, [r7, #488]	@ 0x1e8
 801c5a6:	f8d7 11e0 	ldr.w	r1, [r7, #480]	@ 0x1e0
 801c5aa:	fba2 1201 	umull	r1, r2, r2, r1
 801c5ae:	f8c7 22f4 	str.w	r2, [r7, #756]	@ 0x2f4
 801c5b2:	460a      	mov	r2, r1
 801c5b4:	f8c7 22f0 	str.w	r2, [r7, #752]	@ 0x2f0
 801c5b8:	f8d7 22f4 	ldr.w	r2, [r7, #756]	@ 0x2f4
 801c5bc:	4413      	add	r3, r2
 801c5be:	f8c7 32f4 	str.w	r3, [r7, #756]	@ 0x2f4
    d2 = ((uint64_t) h0 * r2) + ((uint64_t) h1 * r1) + ((uint64_t) h2 * r0) +
 801c5c2:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 801c5c6:	2200      	movs	r2, #0
 801c5c8:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
 801c5cc:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 801c5d0:	f8d7 3384 	ldr.w	r3, [r7, #900]	@ 0x384
 801c5d4:	2200      	movs	r2, #0
 801c5d6:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 801c5da:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
 801c5de:	e9d7 0176 	ldrd	r0, r1, [r7, #472]	@ 0x1d8
 801c5e2:	460b      	mov	r3, r1
 801c5e4:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 801c5e8:	fb02 f203 	mul.w	r2, r2, r3
 801c5ec:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 801c5f0:	e9c7 0176 	strd	r0, r1, [r7, #472]	@ 0x1d8
 801c5f4:	4601      	mov	r1, r0
 801c5f6:	fb01 f303 	mul.w	r3, r1, r3
 801c5fa:	4413      	add	r3, r2
 801c5fc:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 801c600:	f8d7 11d0 	ldr.w	r1, [r7, #464]	@ 0x1d0
 801c604:	fba2 1201 	umull	r1, r2, r2, r1
 801c608:	f8c7 21cc 	str.w	r2, [r7, #460]	@ 0x1cc
 801c60c:	460a      	mov	r2, r1
 801c60e:	f8c7 21c8 	str.w	r2, [r7, #456]	@ 0x1c8
 801c612:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 801c616:	4413      	add	r3, r2
 801c618:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
 801c61c:	f8d7 32f0 	ldr.w	r3, [r7, #752]	@ 0x2f0
 801c620:	e9d7 0172 	ldrd	r0, r1, [r7, #456]	@ 0x1c8
 801c624:	4602      	mov	r2, r0
 801c626:	189b      	adds	r3, r3, r2
 801c628:	65bb      	str	r3, [r7, #88]	@ 0x58
 801c62a:	f8d7 32f4 	ldr.w	r3, [r7, #756]	@ 0x2f4
 801c62e:	460a      	mov	r2, r1
 801c630:	4153      	adcs	r3, r2
 801c632:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801c634:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801c638:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 801c63c:	4602      	mov	r2, r0
 801c63e:	189b      	adds	r3, r3, r2
 801c640:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 801c644:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801c648:	460a      	mov	r2, r1
 801c64a:	4153      	adcs	r3, r2
 801c64c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
         ((uint64_t) h3 * s4) + ((uint64_t) h4 * s3);
 801c650:	f8d7 338c 	ldr.w	r3, [r7, #908]	@ 0x38c
 801c654:	2200      	movs	r2, #0
 801c656:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 801c65a:	f8c7 21c4 	str.w	r2, [r7, #452]	@ 0x1c4
 801c65e:	f8d7 3368 	ldr.w	r3, [r7, #872]	@ 0x368
 801c662:	2200      	movs	r2, #0
 801c664:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 801c668:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 801c66c:	e9d7 0170 	ldrd	r0, r1, [r7, #448]	@ 0x1c0
 801c670:	460b      	mov	r3, r1
 801c672:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 801c676:	fb02 f203 	mul.w	r2, r2, r3
 801c67a:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 801c67e:	e9c7 0170 	strd	r0, r1, [r7, #448]	@ 0x1c0
 801c682:	4601      	mov	r1, r0
 801c684:	fb01 f303 	mul.w	r3, r1, r3
 801c688:	4413      	add	r3, r2
 801c68a:	f8d7 21c0 	ldr.w	r2, [r7, #448]	@ 0x1c0
 801c68e:	f8d7 11b8 	ldr.w	r1, [r7, #440]	@ 0x1b8
 801c692:	fba2 1201 	umull	r1, r2, r2, r1
 801c696:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
 801c69a:	460a      	mov	r2, r1
 801c69c:	f8c7 21b0 	str.w	r2, [r7, #432]	@ 0x1b0
 801c6a0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 801c6a4:	4413      	add	r3, r2
 801c6a6:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
    d2 = ((uint64_t) h0 * r2) + ((uint64_t) h1 * r1) + ((uint64_t) h2 * r0) +
 801c6aa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801c6ae:	e9d7 016c 	ldrd	r0, r1, [r7, #432]	@ 0x1b0
 801c6b2:	4602      	mov	r2, r0
 801c6b4:	189b      	adds	r3, r3, r2
 801c6b6:	633b      	str	r3, [r7, #48]	@ 0x30
 801c6b8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801c6bc:	460a      	mov	r2, r1
 801c6be:	4153      	adcs	r3, r2
 801c6c0:	637b      	str	r3, [r7, #52]	@ 0x34
 801c6c2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 801c6c6:	e9c7 23d2 	strd	r2, r3, [r7, #840]	@ 0x348
    d3 = ((uint64_t) h0 * r3) + ((uint64_t) h1 * r2) + ((uint64_t) h2 * r1) +
 801c6ca:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 801c6ce:	2200      	movs	r2, #0
 801c6d0:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 801c6d4:	f8c7 21ac 	str.w	r2, [r7, #428]	@ 0x1ac
 801c6d8:	f8d7 3378 	ldr.w	r3, [r7, #888]	@ 0x378
 801c6dc:	2200      	movs	r2, #0
 801c6de:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 801c6e2:	f8c7 21a4 	str.w	r2, [r7, #420]	@ 0x1a4
 801c6e6:	e9d7 016a 	ldrd	r0, r1, [r7, #424]	@ 0x1a8
 801c6ea:	460b      	mov	r3, r1
 801c6ec:	f8d7 21a0 	ldr.w	r2, [r7, #416]	@ 0x1a0
 801c6f0:	fb02 f203 	mul.w	r2, r2, r3
 801c6f4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 801c6f8:	e9c7 016a 	strd	r0, r1, [r7, #424]	@ 0x1a8
 801c6fc:	4601      	mov	r1, r0
 801c6fe:	fb01 f303 	mul.w	r3, r1, r3
 801c702:	4413      	add	r3, r2
 801c704:	f8d7 21a8 	ldr.w	r2, [r7, #424]	@ 0x1a8
 801c708:	f8d7 11a0 	ldr.w	r1, [r7, #416]	@ 0x1a0
 801c70c:	fba2 1201 	umull	r1, r2, r2, r1
 801c710:	f8c7 22ec 	str.w	r2, [r7, #748]	@ 0x2ec
 801c714:	460a      	mov	r2, r1
 801c716:	f8c7 22e8 	str.w	r2, [r7, #744]	@ 0x2e8
 801c71a:	f8d7 22ec 	ldr.w	r2, [r7, #748]	@ 0x2ec
 801c71e:	4413      	add	r3, r2
 801c720:	f8c7 32ec 	str.w	r3, [r7, #748]	@ 0x2ec
 801c724:	f8d7 3398 	ldr.w	r3, [r7, #920]	@ 0x398
 801c728:	2200      	movs	r2, #0
 801c72a:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 801c72e:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 801c732:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
 801c736:	2200      	movs	r2, #0
 801c738:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
 801c73c:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
 801c740:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 801c744:	460b      	mov	r3, r1
 801c746:	f8d7 2190 	ldr.w	r2, [r7, #400]	@ 0x190
 801c74a:	fb02 f203 	mul.w	r2, r2, r3
 801c74e:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 801c752:	e9c7 0166 	strd	r0, r1, [r7, #408]	@ 0x198
 801c756:	4601      	mov	r1, r0
 801c758:	fb01 f303 	mul.w	r3, r1, r3
 801c75c:	4413      	add	r3, r2
 801c75e:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 801c762:	f8d7 1190 	ldr.w	r1, [r7, #400]	@ 0x190
 801c766:	fba2 1201 	umull	r1, r2, r2, r1
 801c76a:	f8c7 218c 	str.w	r2, [r7, #396]	@ 0x18c
 801c76e:	460a      	mov	r2, r1
 801c770:	f8c7 2188 	str.w	r2, [r7, #392]	@ 0x188
 801c774:	f8d7 218c 	ldr.w	r2, [r7, #396]	@ 0x18c
 801c778:	4413      	add	r3, r2
 801c77a:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 801c77e:	f8d7 32e8 	ldr.w	r3, [r7, #744]	@ 0x2e8
 801c782:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 801c786:	4602      	mov	r2, r0
 801c788:	189b      	adds	r3, r3, r2
 801c78a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 801c78e:	f8d7 32ec 	ldr.w	r3, [r7, #748]	@ 0x2ec
 801c792:	460a      	mov	r2, r1
 801c794:	4153      	adcs	r3, r2
 801c796:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
         ((uint64_t) h3 * r0) + ((uint64_t) h4 * s4);
 801c79a:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 801c79e:	2200      	movs	r2, #0
 801c7a0:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 801c7a4:	f8c7 2184 	str.w	r2, [r7, #388]	@ 0x184
 801c7a8:	f8d7 3384 	ldr.w	r3, [r7, #900]	@ 0x384
 801c7ac:	2200      	movs	r2, #0
 801c7ae:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 801c7b2:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 801c7b6:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	@ 0x180
 801c7ba:	460b      	mov	r3, r1
 801c7bc:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 801c7c0:	fb02 f203 	mul.w	r2, r2, r3
 801c7c4:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 801c7c8:	e9c7 0160 	strd	r0, r1, [r7, #384]	@ 0x180
 801c7cc:	4601      	mov	r1, r0
 801c7ce:	fb01 f303 	mul.w	r3, r1, r3
 801c7d2:	4413      	add	r3, r2
 801c7d4:	f8d7 2180 	ldr.w	r2, [r7, #384]	@ 0x180
 801c7d8:	f8d7 1178 	ldr.w	r1, [r7, #376]	@ 0x178
 801c7dc:	fba2 ab01 	umull	sl, fp, r2, r1
 801c7e0:	445b      	add	r3, fp
 801c7e2:	469b      	mov	fp, r3
    d3 = ((uint64_t) h0 * r3) + ((uint64_t) h1 * r2) + ((uint64_t) h2 * r1) +
 801c7e4:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 801c7e8:	2200      	movs	r2, #0
 801c7ea:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 801c7ee:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
 801c7f2:	f8d7 3380 	ldr.w	r3, [r7, #896]	@ 0x380
 801c7f6:	2200      	movs	r2, #0
 801c7f8:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 801c7fc:	f8c7 216c 	str.w	r2, [r7, #364]	@ 0x16c
 801c800:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	@ 0x170
 801c804:	460b      	mov	r3, r1
 801c806:	f8d7 2168 	ldr.w	r2, [r7, #360]	@ 0x168
 801c80a:	fb02 f203 	mul.w	r2, r2, r3
 801c80e:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 801c812:	e9c7 015c 	strd	r0, r1, [r7, #368]	@ 0x170
 801c816:	4601      	mov	r1, r0
 801c818:	fb01 f303 	mul.w	r3, r1, r3
 801c81c:	4413      	add	r3, r2
 801c81e:	f8d7 2170 	ldr.w	r2, [r7, #368]	@ 0x170
 801c822:	f8d7 1168 	ldr.w	r1, [r7, #360]	@ 0x168
 801c826:	fba2 1201 	umull	r1, r2, r2, r1
 801c82a:	f8c7 2164 	str.w	r2, [r7, #356]	@ 0x164
 801c82e:	460a      	mov	r2, r1
 801c830:	f8c7 2160 	str.w	r2, [r7, #352]	@ 0x160
 801c834:	f8d7 2164 	ldr.w	r2, [r7, #356]	@ 0x164
 801c838:	4413      	add	r3, r2
 801c83a:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 801c83e:	e9d7 1258 	ldrd	r1, r2, [r7, #352]	@ 0x160
 801c842:	460b      	mov	r3, r1
 801c844:	eb1a 0303 	adds.w	r3, sl, r3
 801c848:	653b      	str	r3, [r7, #80]	@ 0x50
 801c84a:	4613      	mov	r3, r2
 801c84c:	eb4b 0303 	adc.w	r3, fp, r3
 801c850:	657b      	str	r3, [r7, #84]	@ 0x54
 801c852:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801c856:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 801c85a:	4602      	mov	r2, r0
 801c85c:	189b      	adds	r3, r3, r2
 801c85e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 801c862:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801c866:	460a      	mov	r2, r1
 801c868:	4153      	adcs	r3, r2
 801c86a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
         ((uint64_t) h3 * r0) + ((uint64_t) h4 * s4);
 801c86e:	f8d7 338c 	ldr.w	r3, [r7, #908]	@ 0x38c
 801c872:	2200      	movs	r2, #0
 801c874:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 801c878:	f8c7 215c 	str.w	r2, [r7, #348]	@ 0x15c
 801c87c:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 801c880:	2200      	movs	r2, #0
 801c882:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 801c886:	f8c7 2154 	str.w	r2, [r7, #340]	@ 0x154
 801c88a:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	@ 0x158
 801c88e:	460b      	mov	r3, r1
 801c890:	f8d7 2150 	ldr.w	r2, [r7, #336]	@ 0x150
 801c894:	fb02 f203 	mul.w	r2, r2, r3
 801c898:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 801c89c:	e9c7 0156 	strd	r0, r1, [r7, #344]	@ 0x158
 801c8a0:	4601      	mov	r1, r0
 801c8a2:	fb01 f303 	mul.w	r3, r1, r3
 801c8a6:	4413      	add	r3, r2
 801c8a8:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 801c8ac:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 801c8b0:	fba2 1201 	umull	r1, r2, r2, r1
 801c8b4:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 801c8b8:	460a      	mov	r2, r1
 801c8ba:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 801c8be:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 801c8c2:	4413      	add	r3, r2
 801c8c4:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
    d3 = ((uint64_t) h0 * r3) + ((uint64_t) h1 * r2) + ((uint64_t) h2 * r1) +
 801c8c8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801c8cc:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 801c8d0:	4602      	mov	r2, r0
 801c8d2:	189b      	adds	r3, r3, r2
 801c8d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 801c8d6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801c8da:	460a      	mov	r2, r1
 801c8dc:	4153      	adcs	r3, r2
 801c8de:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801c8e0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 801c8e4:	e9c7 23d0 	strd	r2, r3, [r7, #832]	@ 0x340
    d4 = ((uint64_t) h0 * r4) + ((uint64_t) h1 * r3) + ((uint64_t) h2 * r2) +
 801c8e8:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 801c8ec:	2200      	movs	r2, #0
 801c8ee:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 801c8f2:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
 801c8f6:	f8d7 3374 	ldr.w	r3, [r7, #884]	@ 0x374
 801c8fa:	2200      	movs	r2, #0
 801c8fc:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 801c900:	f8c7 213c 	str.w	r2, [r7, #316]	@ 0x13c
 801c904:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
 801c908:	460b      	mov	r3, r1
 801c90a:	f8d7 2138 	ldr.w	r2, [r7, #312]	@ 0x138
 801c90e:	fb02 f203 	mul.w	r2, r2, r3
 801c912:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 801c916:	e9c7 0150 	strd	r0, r1, [r7, #320]	@ 0x140
 801c91a:	4601      	mov	r1, r0
 801c91c:	fb01 f303 	mul.w	r3, r1, r3
 801c920:	4413      	add	r3, r2
 801c922:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 801c926:	f8d7 1138 	ldr.w	r1, [r7, #312]	@ 0x138
 801c92a:	fba2 8901 	umull	r8, r9, r2, r1
 801c92e:	444b      	add	r3, r9
 801c930:	4699      	mov	r9, r3
 801c932:	f8d7 3398 	ldr.w	r3, [r7, #920]	@ 0x398
 801c936:	2200      	movs	r2, #0
 801c938:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 801c93c:	f8c7 2134 	str.w	r2, [r7, #308]	@ 0x134
 801c940:	f8d7 3378 	ldr.w	r3, [r7, #888]	@ 0x378
 801c944:	2200      	movs	r2, #0
 801c946:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 801c94a:	f8c7 212c 	str.w	r2, [r7, #300]	@ 0x12c
 801c94e:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	@ 0x130
 801c952:	460b      	mov	r3, r1
 801c954:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 801c958:	fb02 f203 	mul.w	r2, r2, r3
 801c95c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801c960:	e9c7 014c 	strd	r0, r1, [r7, #304]	@ 0x130
 801c964:	4601      	mov	r1, r0
 801c966:	fb01 f303 	mul.w	r3, r1, r3
 801c96a:	4413      	add	r3, r2
 801c96c:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 801c970:	f8d7 1128 	ldr.w	r1, [r7, #296]	@ 0x128
 801c974:	fba2 1201 	umull	r1, r2, r2, r1
 801c978:	f8c7 2124 	str.w	r2, [r7, #292]	@ 0x124
 801c97c:	460a      	mov	r2, r1
 801c97e:	f8c7 2120 	str.w	r2, [r7, #288]	@ 0x120
 801c982:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 801c986:	4413      	add	r3, r2
 801c988:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 801c98c:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	@ 0x120
 801c990:	460b      	mov	r3, r1
 801c992:	eb18 0303 	adds.w	r3, r8, r3
 801c996:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801c99a:	4613      	mov	r3, r2
 801c99c:	eb49 0303 	adc.w	r3, r9, r3
 801c9a0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
         ((uint64_t) h3 * r1) + ((uint64_t) h4 * r0);
 801c9a4:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 801c9a8:	2200      	movs	r2, #0
 801c9aa:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 801c9ae:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 801c9b2:	f8d7 3380 	ldr.w	r3, [r7, #896]	@ 0x380
 801c9b6:	2200      	movs	r2, #0
 801c9b8:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 801c9bc:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
 801c9c0:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 801c9c4:	460b      	mov	r3, r1
 801c9c6:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 801c9ca:	fb02 f203 	mul.w	r2, r2, r3
 801c9ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c9d2:	e9c7 0146 	strd	r0, r1, [r7, #280]	@ 0x118
 801c9d6:	4601      	mov	r1, r0
 801c9d8:	fb01 f303 	mul.w	r3, r1, r3
 801c9dc:	4413      	add	r3, r2
 801c9de:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 801c9e2:	f8d7 1110 	ldr.w	r1, [r7, #272]	@ 0x110
 801c9e6:	fba2 4501 	umull	r4, r5, r2, r1
 801c9ea:	442b      	add	r3, r5
 801c9ec:	461d      	mov	r5, r3
    d4 = ((uint64_t) h0 * r4) + ((uint64_t) h1 * r3) + ((uint64_t) h2 * r2) +
 801c9ee:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 801c9f2:	2200      	movs	r2, #0
 801c9f4:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 801c9f8:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
 801c9fc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
 801ca00:	2200      	movs	r2, #0
 801ca02:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 801ca06:	f8c7 2104 	str.w	r2, [r7, #260]	@ 0x104
 801ca0a:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	@ 0x108
 801ca0e:	460b      	mov	r3, r1
 801ca10:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 801ca14:	fb02 f203 	mul.w	r2, r2, r3
 801ca18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801ca1c:	e9c7 0142 	strd	r0, r1, [r7, #264]	@ 0x108
 801ca20:	4601      	mov	r1, r0
 801ca22:	fb01 f303 	mul.w	r3, r1, r3
 801ca26:	4413      	add	r3, r2
 801ca28:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 801ca2c:	f8d7 1100 	ldr.w	r1, [r7, #256]	@ 0x100
 801ca30:	fba2 1201 	umull	r1, r2, r2, r1
 801ca34:	f8c7 20fc 	str.w	r2, [r7, #252]	@ 0xfc
 801ca38:	460a      	mov	r2, r1
 801ca3a:	f8c7 20f8 	str.w	r2, [r7, #248]	@ 0xf8
 801ca3e:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 801ca42:	4413      	add	r3, r2
 801ca44:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 801ca48:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 801ca4c:	460b      	mov	r3, r1
 801ca4e:	18e3      	adds	r3, r4, r3
 801ca50:	64bb      	str	r3, [r7, #72]	@ 0x48
 801ca52:	4613      	mov	r3, r2
 801ca54:	eb45 0303 	adc.w	r3, r5, r3
 801ca58:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801ca5a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801ca5e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 801ca62:	4602      	mov	r2, r0
 801ca64:	189b      	adds	r3, r3, r2
 801ca66:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801ca6a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801ca6e:	460a      	mov	r2, r1
 801ca70:	4153      	adcs	r3, r2
 801ca72:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
         ((uint64_t) h3 * r1) + ((uint64_t) h4 * r0);
 801ca76:	f8d7 338c 	ldr.w	r3, [r7, #908]	@ 0x38c
 801ca7a:	2200      	movs	r2, #0
 801ca7c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 801ca80:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 801ca84:	f8d7 3384 	ldr.w	r3, [r7, #900]	@ 0x384
 801ca88:	2200      	movs	r2, #0
 801ca8a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 801ca8e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 801ca92:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	@ 0xf0
 801ca96:	460b      	mov	r3, r1
 801ca98:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 801ca9c:	fb02 f203 	mul.w	r2, r2, r3
 801caa0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 801caa4:	e9c7 013c 	strd	r0, r1, [r7, #240]	@ 0xf0
 801caa8:	4601      	mov	r1, r0
 801caaa:	fb01 f303 	mul.w	r3, r1, r3
 801caae:	4413      	add	r3, r2
 801cab0:	f8d7 20f0 	ldr.w	r2, [r7, #240]	@ 0xf0
 801cab4:	f8d7 10e8 	ldr.w	r1, [r7, #232]	@ 0xe8
 801cab8:	fba2 1201 	umull	r1, r2, r2, r1
 801cabc:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 801cac0:	460a      	mov	r2, r1
 801cac2:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 801cac6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 801caca:	4413      	add	r3, r2
 801cacc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    d4 = ((uint64_t) h0 * r4) + ((uint64_t) h1 * r3) + ((uint64_t) h2 * r2) +
 801cad0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801cad4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 801cad8:	4602      	mov	r2, r0
 801cada:	189b      	adds	r3, r3, r2
 801cadc:	623b      	str	r3, [r7, #32]
 801cade:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801cae2:	460a      	mov	r2, r1
 801cae4:	4153      	adcs	r3, r2
 801cae6:	627b      	str	r3, [r7, #36]	@ 0x24
 801cae8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801caec:	e9c7 23ce 	strd	r2, r3, [r7, #824]	@ 0x338

    /* (partial) h %= p */
    c = (unsigned long) (d0 >> 26);
 801caf0:	e9d7 23d6 	ldrd	r2, r3, [r7, #856]	@ 0x358
 801caf4:	f04f 0000 	mov.w	r0, #0
 801caf8:	f04f 0100 	mov.w	r1, #0
 801cafc:	0e90      	lsrs	r0, r2, #26
 801cafe:	ea40 1083 	orr.w	r0, r0, r3, lsl #6
 801cb02:	0e99      	lsrs	r1, r3, #26
 801cb04:	4603      	mov	r3, r0
 801cb06:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
    h0 = (unsigned long) d0 & 0x3ffffff;
 801cb0a:	f8d7 3358 	ldr.w	r3, [r7, #856]	@ 0x358
 801cb0e:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 801cb12:	f8c7 339c 	str.w	r3, [r7, #924]	@ 0x39c
    d1 += c;
 801cb16:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 801cb1a:	2200      	movs	r2, #0
 801cb1c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 801cb20:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 801cb24:	e9d7 23d4 	ldrd	r2, r3, [r7, #848]	@ 0x350
 801cb28:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 801cb2c:	1851      	adds	r1, r2, r1
 801cb2e:	61b9      	str	r1, [r7, #24]
 801cb30:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 801cb34:	414b      	adcs	r3, r1
 801cb36:	61fb      	str	r3, [r7, #28]
 801cb38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801cb3c:	e9c7 23d4 	strd	r2, r3, [r7, #848]	@ 0x350
    c = (unsigned long) (d1 >> 26);
 801cb40:	e9d7 23d4 	ldrd	r2, r3, [r7, #848]	@ 0x350
 801cb44:	f04f 0000 	mov.w	r0, #0
 801cb48:	f04f 0100 	mov.w	r1, #0
 801cb4c:	0e90      	lsrs	r0, r2, #26
 801cb4e:	ea40 1083 	orr.w	r0, r0, r3, lsl #6
 801cb52:	0e99      	lsrs	r1, r3, #26
 801cb54:	4603      	mov	r3, r0
 801cb56:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
    h1 = (unsigned long) d1 & 0x3ffffff;
 801cb5a:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 801cb5e:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 801cb62:	f8c7 3398 	str.w	r3, [r7, #920]	@ 0x398
    d2 += c;
 801cb66:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 801cb6a:	2200      	movs	r2, #0
 801cb6c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 801cb70:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 801cb74:	e9d7 23d2 	ldrd	r2, r3, [r7, #840]	@ 0x348
 801cb78:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 801cb7c:	1851      	adds	r1, r2, r1
 801cb7e:	6139      	str	r1, [r7, #16]
 801cb80:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 801cb84:	414b      	adcs	r3, r1
 801cb86:	617b      	str	r3, [r7, #20]
 801cb88:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801cb8c:	e9c7 23d2 	strd	r2, r3, [r7, #840]	@ 0x348
    c = (unsigned long) (d2 >> 26);
 801cb90:	e9d7 23d2 	ldrd	r2, r3, [r7, #840]	@ 0x348
 801cb94:	f04f 0000 	mov.w	r0, #0
 801cb98:	f04f 0100 	mov.w	r1, #0
 801cb9c:	0e90      	lsrs	r0, r2, #26
 801cb9e:	ea40 1083 	orr.w	r0, r0, r3, lsl #6
 801cba2:	0e99      	lsrs	r1, r3, #26
 801cba4:	4603      	mov	r3, r0
 801cba6:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
    h2 = (unsigned long) d2 & 0x3ffffff;
 801cbaa:	f8d7 3348 	ldr.w	r3, [r7, #840]	@ 0x348
 801cbae:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 801cbb2:	f8c7 3394 	str.w	r3, [r7, #916]	@ 0x394
    d3 += c;
 801cbb6:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 801cbba:	2200      	movs	r2, #0
 801cbbc:	67bb      	str	r3, [r7, #120]	@ 0x78
 801cbbe:	67fa      	str	r2, [r7, #124]	@ 0x7c
 801cbc0:	e9d7 23d0 	ldrd	r2, r3, [r7, #832]	@ 0x340
 801cbc4:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 801cbc6:	1851      	adds	r1, r2, r1
 801cbc8:	60b9      	str	r1, [r7, #8]
 801cbca:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 801cbcc:	414b      	adcs	r3, r1
 801cbce:	60fb      	str	r3, [r7, #12]
 801cbd0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801cbd4:	e9c7 23d0 	strd	r2, r3, [r7, #832]	@ 0x340
    c = (unsigned long) (d3 >> 26);
 801cbd8:	e9d7 23d0 	ldrd	r2, r3, [r7, #832]	@ 0x340
 801cbdc:	f04f 0000 	mov.w	r0, #0
 801cbe0:	f04f 0100 	mov.w	r1, #0
 801cbe4:	0e90      	lsrs	r0, r2, #26
 801cbe6:	ea40 1083 	orr.w	r0, r0, r3, lsl #6
 801cbea:	0e99      	lsrs	r1, r3, #26
 801cbec:	4603      	mov	r3, r0
 801cbee:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
    h3 = (unsigned long) d3 & 0x3ffffff;
 801cbf2:	f8d7 3340 	ldr.w	r3, [r7, #832]	@ 0x340
 801cbf6:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 801cbfa:	f8c7 3390 	str.w	r3, [r7, #912]	@ 0x390
    d4 += c;
 801cbfe:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 801cc02:	2200      	movs	r2, #0
 801cc04:	673b      	str	r3, [r7, #112]	@ 0x70
 801cc06:	677a      	str	r2, [r7, #116]	@ 0x74
 801cc08:	e9d7 23ce 	ldrd	r2, r3, [r7, #824]	@ 0x338
 801cc0c:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 801cc0e:	1851      	adds	r1, r2, r1
 801cc10:	6039      	str	r1, [r7, #0]
 801cc12:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 801cc14:	414b      	adcs	r3, r1
 801cc16:	607b      	str	r3, [r7, #4]
 801cc18:	e9d7 2300 	ldrd	r2, r3, [r7]
 801cc1c:	e9c7 23ce 	strd	r2, r3, [r7, #824]	@ 0x338
    c = (unsigned long) (d4 >> 26);
 801cc20:	e9d7 23ce 	ldrd	r2, r3, [r7, #824]	@ 0x338
 801cc24:	f04f 0000 	mov.w	r0, #0
 801cc28:	f04f 0100 	mov.w	r1, #0
 801cc2c:	0e90      	lsrs	r0, r2, #26
 801cc2e:	ea40 1083 	orr.w	r0, r0, r3, lsl #6
 801cc32:	0e99      	lsrs	r1, r3, #26
 801cc34:	4603      	mov	r3, r0
 801cc36:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
    h4 = (unsigned long) d4 & 0x3ffffff;
 801cc3a:	f8d7 3338 	ldr.w	r3, [r7, #824]	@ 0x338
 801cc3e:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 801cc42:	f8c7 338c 	str.w	r3, [r7, #908]	@ 0x38c
    h0 += c * 5;
 801cc46:	f8d7 2334 	ldr.w	r2, [r7, #820]	@ 0x334
 801cc4a:	4613      	mov	r3, r2
 801cc4c:	009b      	lsls	r3, r3, #2
 801cc4e:	441a      	add	r2, r3
 801cc50:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 801cc54:	4413      	add	r3, r2
 801cc56:	f8c7 339c 	str.w	r3, [r7, #924]	@ 0x39c
    c = (h0 >> 26);
 801cc5a:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 801cc5e:	0e9b      	lsrs	r3, r3, #26
 801cc60:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
    h0 = h0 & 0x3ffffff;
 801cc64:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 801cc68:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 801cc6c:	f8c7 339c 	str.w	r3, [r7, #924]	@ 0x39c
    h1 += c;
 801cc70:	f8d7 2398 	ldr.w	r2, [r7, #920]	@ 0x398
 801cc74:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 801cc78:	4413      	add	r3, r2
 801cc7a:	f8c7 3398 	str.w	r3, [r7, #920]	@ 0x398

    m += poly1305_block_size;
 801cc7e:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 801cc82:	3310      	adds	r3, #16
 801cc84:	f8c7 3328 	str.w	r3, [r7, #808]	@ 0x328
    bytes -= poly1305_block_size;
 801cc88:	f8d7 3324 	ldr.w	r3, [r7, #804]	@ 0x324
 801cc8c:	3b10      	subs	r3, #16
 801cc8e:	f8c7 3324 	str.w	r3, [r7, #804]	@ 0x324
  while (bytes >= poly1305_block_size) {
 801cc92:	f8d7 3324 	ldr.w	r3, [r7, #804]	@ 0x324
 801cc96:	2b0f      	cmp	r3, #15
 801cc98:	f63f a983 	bhi.w	801bfa2 <poly1305_blocks+0xce>
  }

  st->h[0] = h0;
 801cc9c:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 801cca0:	f8d7 239c 	ldr.w	r2, [r7, #924]	@ 0x39c
 801cca4:	615a      	str	r2, [r3, #20]
  st->h[1] = h1;
 801cca6:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 801ccaa:	f8d7 2398 	ldr.w	r2, [r7, #920]	@ 0x398
 801ccae:	619a      	str	r2, [r3, #24]
  st->h[2] = h2;
 801ccb0:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 801ccb4:	f8d7 2394 	ldr.w	r2, [r7, #916]	@ 0x394
 801ccb8:	61da      	str	r2, [r3, #28]
  st->h[3] = h3;
 801ccba:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 801ccbe:	f8d7 2390 	ldr.w	r2, [r7, #912]	@ 0x390
 801ccc2:	621a      	str	r2, [r3, #32]
  st->h[4] = h4;
 801ccc4:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 801ccc8:	f8d7 238c 	ldr.w	r2, [r7, #908]	@ 0x38c
 801cccc:	625a      	str	r2, [r3, #36]	@ 0x24
}
 801ccce:	bf00      	nop
 801ccd0:	f507 7768 	add.w	r7, r7, #928	@ 0x3a0
 801ccd4:	46bd      	mov	sp, r7
 801ccd6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0801ccda <poly1305_finish>:

static POLY1305_NOINLINE void poly1305_finish(poly1305_context *ctx,
                                              unsigned char mac[16]) {
 801ccda:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801ccde:	b0aa      	sub	sp, #168	@ 0xa8
 801cce0:	af00      	add	r7, sp, #0
 801cce2:	6678      	str	r0, [r7, #100]	@ 0x64
 801cce4:	6639      	str	r1, [r7, #96]	@ 0x60
  poly1305_state_internal_t *st = (poly1305_state_internal_t *) ctx;
 801cce6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801cce8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  unsigned long g0, g1, g2, g3, g4;
  uint64_t f;
  unsigned long mask;

  /* process the remaining block */
  if (st->leftover) {
 801ccec:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801ccf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801ccf2:	2b00      	cmp	r3, #0
 801ccf4:	d030      	beq.n	801cd58 <poly1305_finish+0x7e>
    size_t i = st->leftover;
 801ccf6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801ccfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801ccfc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    st->buffer[i++] = 1;
 801cd00:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 801cd04:	1c53      	adds	r3, r2, #1
 801cd06:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 801cd0a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801cd0e:	441a      	add	r2, r3
 801cd10:	2301      	movs	r3, #1
 801cd12:	f882 303c 	strb.w	r3, [r2, #60]	@ 0x3c
    for (; i < poly1305_block_size; i++) st->buffer[i] = 0;
 801cd16:	e00d      	b.n	801cd34 <poly1305_finish+0x5a>
 801cd18:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 801cd1c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801cd20:	4413      	add	r3, r2
 801cd22:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 801cd26:	2300      	movs	r3, #0
 801cd28:	7013      	strb	r3, [r2, #0]
 801cd2a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801cd2e:	3301      	adds	r3, #1
 801cd30:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 801cd34:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801cd38:	2b0f      	cmp	r3, #15
 801cd3a:	d9ed      	bls.n	801cd18 <poly1305_finish+0x3e>
    st->final = 1;
 801cd3c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 801cd40:	2301      	movs	r3, #1
 801cd42:	f882 304c 	strb.w	r3, [r2, #76]	@ 0x4c
    poly1305_blocks(st, st->buffer, poly1305_block_size);
 801cd46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801cd4a:	333c      	adds	r3, #60	@ 0x3c
 801cd4c:	2210      	movs	r2, #16
 801cd4e:	4619      	mov	r1, r3
 801cd50:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 801cd54:	f7ff f8be 	bl	801bed4 <poly1305_blocks>
  }

  /* fully carry h */
  h0 = st->h[0];
 801cd58:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801cd5c:	695b      	ldr	r3, [r3, #20]
 801cd5e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  h1 = st->h[1];
 801cd62:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801cd66:	699b      	ldr	r3, [r3, #24]
 801cd68:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  h2 = st->h[2];
 801cd6c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801cd70:	69db      	ldr	r3, [r3, #28]
 801cd72:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  h3 = st->h[3];
 801cd76:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801cd7a:	6a1b      	ldr	r3, [r3, #32]
 801cd7c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  h4 = st->h[4];
 801cd80:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801cd84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801cd86:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

  c = h1 >> 26;
 801cd8a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801cd8e:	0e9b      	lsrs	r3, r3, #26
 801cd90:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  h1 = h1 & 0x3ffffff;
 801cd94:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801cd98:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 801cd9c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  h2 += c;
 801cda0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 801cda4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801cda8:	4413      	add	r3, r2
 801cdaa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  c = h2 >> 26;
 801cdae:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801cdb2:	0e9b      	lsrs	r3, r3, #26
 801cdb4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  h2 = h2 & 0x3ffffff;
 801cdb8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801cdbc:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 801cdc0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  h3 += c;
 801cdc4:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 801cdc8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801cdcc:	4413      	add	r3, r2
 801cdce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  c = h3 >> 26;
 801cdd2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801cdd6:	0e9b      	lsrs	r3, r3, #26
 801cdd8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  h3 = h3 & 0x3ffffff;
 801cddc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801cde0:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 801cde4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  h4 += c;
 801cde8:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 801cdec:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801cdf0:	4413      	add	r3, r2
 801cdf2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  c = h4 >> 26;
 801cdf6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801cdfa:	0e9b      	lsrs	r3, r3, #26
 801cdfc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  h4 = h4 & 0x3ffffff;
 801ce00:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801ce04:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 801ce08:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  h0 += c * 5;
 801ce0c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 801ce10:	4613      	mov	r3, r2
 801ce12:	009b      	lsls	r3, r3, #2
 801ce14:	441a      	add	r2, r3
 801ce16:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801ce1a:	4413      	add	r3, r2
 801ce1c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  c = h0 >> 26;
 801ce20:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801ce24:	0e9b      	lsrs	r3, r3, #26
 801ce26:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  h0 = h0 & 0x3ffffff;
 801ce2a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801ce2e:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 801ce32:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  h1 += c;
 801ce36:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 801ce3a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801ce3e:	4413      	add	r3, r2
 801ce40:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98

  /* compute h + -p */
  g0 = h0 + 5;
 801ce44:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801ce48:	3305      	adds	r3, #5
 801ce4a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  c = g0 >> 26;
 801ce4e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801ce52:	0e9b      	lsrs	r3, r3, #26
 801ce54:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  g0 &= 0x3ffffff;
 801ce58:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801ce5c:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 801ce60:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  g1 = h1 + c;
 801ce64:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 801ce68:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801ce6c:	4413      	add	r3, r2
 801ce6e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  c = g1 >> 26;
 801ce72:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801ce76:	0e9b      	lsrs	r3, r3, #26
 801ce78:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  g1 &= 0x3ffffff;
 801ce7c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801ce80:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 801ce84:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  g2 = h2 + c;
 801ce88:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 801ce8c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801ce90:	4413      	add	r3, r2
 801ce92:	67fb      	str	r3, [r7, #124]	@ 0x7c
  c = g2 >> 26;
 801ce94:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801ce96:	0e9b      	lsrs	r3, r3, #26
 801ce98:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  g2 &= 0x3ffffff;
 801ce9c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801ce9e:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 801cea2:	67fb      	str	r3, [r7, #124]	@ 0x7c
  g3 = h3 + c;
 801cea4:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 801cea8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801ceac:	4413      	add	r3, r2
 801ceae:	67bb      	str	r3, [r7, #120]	@ 0x78
  c = g3 >> 26;
 801ceb0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801ceb2:	0e9b      	lsrs	r3, r3, #26
 801ceb4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  g3 &= 0x3ffffff;
 801ceb8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801ceba:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 801cebe:	67bb      	str	r3, [r7, #120]	@ 0x78
  g4 = h4 + c - (1UL << 26);
 801cec0:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 801cec4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801cec8:	4413      	add	r3, r2
 801ceca:	f103 437c 	add.w	r3, r3, #4227858432	@ 0xfc000000
 801cece:	677b      	str	r3, [r7, #116]	@ 0x74

  /* select h if h < p, or h + -p if h >= p */
  mask = (g4 >> ((sizeof(unsigned long) * 8) - 1)) - 1;
 801ced0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801ced2:	0fdb      	lsrs	r3, r3, #31
 801ced4:	3b01      	subs	r3, #1
 801ced6:	673b      	str	r3, [r7, #112]	@ 0x70
  g0 &= mask;
 801ced8:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 801cedc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801cede:	4013      	ands	r3, r2
 801cee0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  g1 &= mask;
 801cee4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801cee8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801ceea:	4013      	ands	r3, r2
 801ceec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  g2 &= mask;
 801cef0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 801cef2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801cef4:	4013      	ands	r3, r2
 801cef6:	67fb      	str	r3, [r7, #124]	@ 0x7c
  g3 &= mask;
 801cef8:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 801cefa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801cefc:	4013      	ands	r3, r2
 801cefe:	67bb      	str	r3, [r7, #120]	@ 0x78
  g4 &= mask;
 801cf00:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 801cf02:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801cf04:	4013      	ands	r3, r2
 801cf06:	677b      	str	r3, [r7, #116]	@ 0x74
  mask = ~mask;
 801cf08:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801cf0a:	43db      	mvns	r3, r3
 801cf0c:	673b      	str	r3, [r7, #112]	@ 0x70
  h0 = (h0 & mask) | g0;
 801cf0e:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 801cf12:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801cf14:	401a      	ands	r2, r3
 801cf16:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801cf1a:	4313      	orrs	r3, r2
 801cf1c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  h1 = (h1 & mask) | g1;
 801cf20:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 801cf24:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801cf26:	401a      	ands	r2, r3
 801cf28:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801cf2c:	4313      	orrs	r3, r2
 801cf2e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  h2 = (h2 & mask) | g2;
 801cf32:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 801cf36:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801cf38:	401a      	ands	r2, r3
 801cf3a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801cf3c:	4313      	orrs	r3, r2
 801cf3e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  h3 = (h3 & mask) | g3;
 801cf42:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 801cf46:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801cf48:	401a      	ands	r2, r3
 801cf4a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801cf4c:	4313      	orrs	r3, r2
 801cf4e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  h4 = (h4 & mask) | g4;
 801cf52:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 801cf56:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801cf58:	401a      	ands	r2, r3
 801cf5a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801cf5c:	4313      	orrs	r3, r2
 801cf5e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

  /* h = h % (2^128) */
  h0 = ((h0) | (h1 << 26)) & 0xffffffff;
 801cf62:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801cf66:	069a      	lsls	r2, r3, #26
 801cf68:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801cf6c:	4313      	orrs	r3, r2
 801cf6e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  h1 = ((h1 >> 6) | (h2 << 20)) & 0xffffffff;
 801cf72:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801cf76:	099a      	lsrs	r2, r3, #6
 801cf78:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801cf7c:	051b      	lsls	r3, r3, #20
 801cf7e:	4313      	orrs	r3, r2
 801cf80:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  h2 = ((h2 >> 12) | (h3 << 14)) & 0xffffffff;
 801cf84:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801cf88:	0b1a      	lsrs	r2, r3, #12
 801cf8a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801cf8e:	039b      	lsls	r3, r3, #14
 801cf90:	4313      	orrs	r3, r2
 801cf92:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  h3 = ((h3 >> 18) | (h4 << 8)) & 0xffffffff;
 801cf96:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801cf9a:	0c9a      	lsrs	r2, r3, #18
 801cf9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801cfa0:	021b      	lsls	r3, r3, #8
 801cfa2:	4313      	orrs	r3, r2
 801cfa4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* mac = (h + pad) % (2^128) */
  f = (uint64_t) h0 + st->pad[0];
 801cfa8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801cfac:	2200      	movs	r2, #0
 801cfae:	65bb      	str	r3, [r7, #88]	@ 0x58
 801cfb0:	65fa      	str	r2, [r7, #92]	@ 0x5c
 801cfb2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801cfb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801cfb8:	2200      	movs	r2, #0
 801cfba:	64bb      	str	r3, [r7, #72]	@ 0x48
 801cfbc:	64fa      	str	r2, [r7, #76]	@ 0x4c
 801cfbe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801cfc0:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 801cfc4:	4602      	mov	r2, r0
 801cfc6:	189b      	adds	r3, r3, r2
 801cfc8:	61bb      	str	r3, [r7, #24]
 801cfca:	460b      	mov	r3, r1
 801cfcc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801cfce:	eb42 0303 	adc.w	r3, r2, r3
 801cfd2:	61fb      	str	r3, [r7, #28]
 801cfd4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801cfd8:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
  h0 = (unsigned long) f;
 801cfdc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801cfde:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  f = (uint64_t) h1 + st->pad[1] + (f >> 32);
 801cfe2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801cfe6:	2200      	movs	r2, #0
 801cfe8:	653b      	str	r3, [r7, #80]	@ 0x50
 801cfea:	657a      	str	r2, [r7, #84]	@ 0x54
 801cfec:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801cff0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801cff2:	2200      	movs	r2, #0
 801cff4:	643b      	str	r3, [r7, #64]	@ 0x40
 801cff6:	647a      	str	r2, [r7, #68]	@ 0x44
 801cff8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801cffa:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 801cffe:	4602      	mov	r2, r0
 801d000:	189c      	adds	r4, r3, r2
 801d002:	460b      	mov	r3, r1
 801d004:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801d006:	eb42 0303 	adc.w	r3, r2, r3
 801d00a:	461d      	mov	r5, r3
 801d00c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 801d010:	f04f 0000 	mov.w	r0, #0
 801d014:	f04f 0100 	mov.w	r1, #0
 801d018:	0018      	movs	r0, r3
 801d01a:	2100      	movs	r1, #0
 801d01c:	1823      	adds	r3, r4, r0
 801d01e:	613b      	str	r3, [r7, #16]
 801d020:	eb45 0301 	adc.w	r3, r5, r1
 801d024:	617b      	str	r3, [r7, #20]
 801d026:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 801d02a:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
  h1 = (unsigned long) f;
 801d02e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801d030:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  f = (uint64_t) h2 + st->pad[2] + (f >> 32);
 801d034:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801d038:	2200      	movs	r2, #0
 801d03a:	63bb      	str	r3, [r7, #56]	@ 0x38
 801d03c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 801d03e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801d042:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d044:	2200      	movs	r2, #0
 801d046:	633b      	str	r3, [r7, #48]	@ 0x30
 801d048:	637a      	str	r2, [r7, #52]	@ 0x34
 801d04a:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 801d04e:	4623      	mov	r3, r4
 801d050:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 801d054:	4602      	mov	r2, r0
 801d056:	eb13 0a02 	adds.w	sl, r3, r2
 801d05a:	462b      	mov	r3, r5
 801d05c:	460a      	mov	r2, r1
 801d05e:	eb43 0b02 	adc.w	fp, r3, r2
 801d062:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 801d066:	f04f 0200 	mov.w	r2, #0
 801d06a:	f04f 0300 	mov.w	r3, #0
 801d06e:	000a      	movs	r2, r1
 801d070:	2300      	movs	r3, #0
 801d072:	eb1a 0102 	adds.w	r1, sl, r2
 801d076:	60b9      	str	r1, [r7, #8]
 801d078:	eb4b 0303 	adc.w	r3, fp, r3
 801d07c:	60fb      	str	r3, [r7, #12]
 801d07e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 801d082:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
  h2 = (unsigned long) f;
 801d086:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801d088:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  f = (uint64_t) h3 + st->pad[3] + (f >> 32);
 801d08c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801d090:	2200      	movs	r2, #0
 801d092:	62bb      	str	r3, [r7, #40]	@ 0x28
 801d094:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801d096:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801d09a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801d09c:	2200      	movs	r2, #0
 801d09e:	623b      	str	r3, [r7, #32]
 801d0a0:	627a      	str	r2, [r7, #36]	@ 0x24
 801d0a2:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 801d0a6:	4623      	mov	r3, r4
 801d0a8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 801d0ac:	4602      	mov	r2, r0
 801d0ae:	eb13 0802 	adds.w	r8, r3, r2
 801d0b2:	462b      	mov	r3, r5
 801d0b4:	460a      	mov	r2, r1
 801d0b6:	eb43 0902 	adc.w	r9, r3, r2
 801d0ba:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 801d0be:	f04f 0200 	mov.w	r2, #0
 801d0c2:	f04f 0300 	mov.w	r3, #0
 801d0c6:	000a      	movs	r2, r1
 801d0c8:	2300      	movs	r3, #0
 801d0ca:	eb18 0102 	adds.w	r1, r8, r2
 801d0ce:	6039      	str	r1, [r7, #0]
 801d0d0:	eb49 0303 	adc.w	r3, r9, r3
 801d0d4:	607b      	str	r3, [r7, #4]
 801d0d6:	e9d7 3400 	ldrd	r3, r4, [r7]
 801d0da:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
  h3 = (unsigned long) f;
 801d0de:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801d0e0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  U32TO8(mac + 0, h0);
 801d0e4:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 801d0e8:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 801d0ea:	f7fe fe56 	bl	801bd9a <U32TO8>
  U32TO8(mac + 4, h1);
 801d0ee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801d0f0:	3304      	adds	r3, #4
 801d0f2:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 801d0f6:	4618      	mov	r0, r3
 801d0f8:	f7fe fe4f 	bl	801bd9a <U32TO8>
  U32TO8(mac + 8, h2);
 801d0fc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801d0fe:	3308      	adds	r3, #8
 801d100:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 801d104:	4618      	mov	r0, r3
 801d106:	f7fe fe48 	bl	801bd9a <U32TO8>
  U32TO8(mac + 12, h3);
 801d10a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801d10c:	330c      	adds	r3, #12
 801d10e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 801d112:	4618      	mov	r0, r3
 801d114:	f7fe fe41 	bl	801bd9a <U32TO8>

  /* zero out the state */
  st->h[0] = 0;
 801d118:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801d11c:	2200      	movs	r2, #0
 801d11e:	615a      	str	r2, [r3, #20]
  st->h[1] = 0;
 801d120:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801d124:	2200      	movs	r2, #0
 801d126:	619a      	str	r2, [r3, #24]
  st->h[2] = 0;
 801d128:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801d12c:	2200      	movs	r2, #0
 801d12e:	61da      	str	r2, [r3, #28]
  st->h[3] = 0;
 801d130:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801d134:	2200      	movs	r2, #0
 801d136:	621a      	str	r2, [r3, #32]
  st->h[4] = 0;
 801d138:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801d13c:	2200      	movs	r2, #0
 801d13e:	625a      	str	r2, [r3, #36]	@ 0x24
  st->r[0] = 0;
 801d140:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801d144:	2200      	movs	r2, #0
 801d146:	601a      	str	r2, [r3, #0]
  st->r[1] = 0;
 801d148:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801d14c:	2200      	movs	r2, #0
 801d14e:	605a      	str	r2, [r3, #4]
  st->r[2] = 0;
 801d150:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801d154:	2200      	movs	r2, #0
 801d156:	609a      	str	r2, [r3, #8]
  st->r[3] = 0;
 801d158:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801d15c:	2200      	movs	r2, #0
 801d15e:	60da      	str	r2, [r3, #12]
  st->r[4] = 0;
 801d160:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801d164:	2200      	movs	r2, #0
 801d166:	611a      	str	r2, [r3, #16]
  st->pad[0] = 0;
 801d168:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801d16c:	2200      	movs	r2, #0
 801d16e:	629a      	str	r2, [r3, #40]	@ 0x28
  st->pad[1] = 0;
 801d170:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801d174:	2200      	movs	r2, #0
 801d176:	62da      	str	r2, [r3, #44]	@ 0x2c
  st->pad[2] = 0;
 801d178:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801d17c:	2200      	movs	r2, #0
 801d17e:	631a      	str	r2, [r3, #48]	@ 0x30
  st->pad[3] = 0;
 801d180:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801d184:	2200      	movs	r2, #0
 801d186:	635a      	str	r2, [r3, #52]	@ 0x34
}
 801d188:	bf00      	nop
 801d18a:	37a8      	adds	r7, #168	@ 0xa8
 801d18c:	46bd      	mov	sp, r7
 801d18e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0801d192 <poly1305_update>:
}

#endif

static void poly1305_update(poly1305_context *ctx, const unsigned char *m,
                            size_t bytes) {
 801d192:	b580      	push	{r7, lr}
 801d194:	b088      	sub	sp, #32
 801d196:	af00      	add	r7, sp, #0
 801d198:	60f8      	str	r0, [r7, #12]
 801d19a:	60b9      	str	r1, [r7, #8]
 801d19c:	607a      	str	r2, [r7, #4]
  poly1305_state_internal_t *st = (poly1305_state_internal_t *) ctx;
 801d19e:	68fb      	ldr	r3, [r7, #12]
 801d1a0:	617b      	str	r3, [r7, #20]
  size_t i;

  /* handle leftover */
  if (st->leftover) {
 801d1a2:	697b      	ldr	r3, [r7, #20]
 801d1a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801d1a6:	2b00      	cmp	r3, #0
 801d1a8:	d03d      	beq.n	801d226 <poly1305_update+0x94>
    size_t want = (poly1305_block_size - st->leftover);
 801d1aa:	697b      	ldr	r3, [r7, #20]
 801d1ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801d1ae:	f1c3 0310 	rsb	r3, r3, #16
 801d1b2:	61bb      	str	r3, [r7, #24]
    if (want > bytes) want = bytes;
 801d1b4:	69ba      	ldr	r2, [r7, #24]
 801d1b6:	687b      	ldr	r3, [r7, #4]
 801d1b8:	429a      	cmp	r2, r3
 801d1ba:	d901      	bls.n	801d1c0 <poly1305_update+0x2e>
 801d1bc:	687b      	ldr	r3, [r7, #4]
 801d1be:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < want; i++) st->buffer[st->leftover + i] = m[i];
 801d1c0:	2300      	movs	r3, #0
 801d1c2:	61fb      	str	r3, [r7, #28]
 801d1c4:	e00f      	b.n	801d1e6 <poly1305_update+0x54>
 801d1c6:	68ba      	ldr	r2, [r7, #8]
 801d1c8:	69fb      	ldr	r3, [r7, #28]
 801d1ca:	441a      	add	r2, r3
 801d1cc:	697b      	ldr	r3, [r7, #20]
 801d1ce:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 801d1d0:	69fb      	ldr	r3, [r7, #28]
 801d1d2:	440b      	add	r3, r1
 801d1d4:	7811      	ldrb	r1, [r2, #0]
 801d1d6:	697a      	ldr	r2, [r7, #20]
 801d1d8:	4413      	add	r3, r2
 801d1da:	460a      	mov	r2, r1
 801d1dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 801d1e0:	69fb      	ldr	r3, [r7, #28]
 801d1e2:	3301      	adds	r3, #1
 801d1e4:	61fb      	str	r3, [r7, #28]
 801d1e6:	69fa      	ldr	r2, [r7, #28]
 801d1e8:	69bb      	ldr	r3, [r7, #24]
 801d1ea:	429a      	cmp	r2, r3
 801d1ec:	d3eb      	bcc.n	801d1c6 <poly1305_update+0x34>
    bytes -= want;
 801d1ee:	687a      	ldr	r2, [r7, #4]
 801d1f0:	69bb      	ldr	r3, [r7, #24]
 801d1f2:	1ad3      	subs	r3, r2, r3
 801d1f4:	607b      	str	r3, [r7, #4]
    m += want;
 801d1f6:	68ba      	ldr	r2, [r7, #8]
 801d1f8:	69bb      	ldr	r3, [r7, #24]
 801d1fa:	4413      	add	r3, r2
 801d1fc:	60bb      	str	r3, [r7, #8]
    st->leftover += want;
 801d1fe:	697b      	ldr	r3, [r7, #20]
 801d200:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801d202:	69bb      	ldr	r3, [r7, #24]
 801d204:	441a      	add	r2, r3
 801d206:	697b      	ldr	r3, [r7, #20]
 801d208:	639a      	str	r2, [r3, #56]	@ 0x38
    if (st->leftover < poly1305_block_size) return;
 801d20a:	697b      	ldr	r3, [r7, #20]
 801d20c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801d20e:	2b0f      	cmp	r3, #15
 801d210:	d93e      	bls.n	801d290 <poly1305_update+0xfe>
    poly1305_blocks(st, st->buffer, poly1305_block_size);
 801d212:	697b      	ldr	r3, [r7, #20]
 801d214:	333c      	adds	r3, #60	@ 0x3c
 801d216:	2210      	movs	r2, #16
 801d218:	4619      	mov	r1, r3
 801d21a:	6978      	ldr	r0, [r7, #20]
 801d21c:	f7fe fe5a 	bl	801bed4 <poly1305_blocks>
    st->leftover = 0;
 801d220:	697b      	ldr	r3, [r7, #20]
 801d222:	2200      	movs	r2, #0
 801d224:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* process full blocks */
  if (bytes >= poly1305_block_size) {
 801d226:	687b      	ldr	r3, [r7, #4]
 801d228:	2b0f      	cmp	r3, #15
 801d22a:	d910      	bls.n	801d24e <poly1305_update+0xbc>
    size_t want = (bytes & (size_t) ~(poly1305_block_size - 1));
 801d22c:	687b      	ldr	r3, [r7, #4]
 801d22e:	f023 030f 	bic.w	r3, r3, #15
 801d232:	613b      	str	r3, [r7, #16]
    poly1305_blocks(st, m, want);
 801d234:	693a      	ldr	r2, [r7, #16]
 801d236:	68b9      	ldr	r1, [r7, #8]
 801d238:	6978      	ldr	r0, [r7, #20]
 801d23a:	f7fe fe4b 	bl	801bed4 <poly1305_blocks>
    m += want;
 801d23e:	68ba      	ldr	r2, [r7, #8]
 801d240:	693b      	ldr	r3, [r7, #16]
 801d242:	4413      	add	r3, r2
 801d244:	60bb      	str	r3, [r7, #8]
    bytes -= want;
 801d246:	687a      	ldr	r2, [r7, #4]
 801d248:	693b      	ldr	r3, [r7, #16]
 801d24a:	1ad3      	subs	r3, r2, r3
 801d24c:	607b      	str	r3, [r7, #4]
  }

  /* store leftover */
  if (bytes) {
 801d24e:	687b      	ldr	r3, [r7, #4]
 801d250:	2b00      	cmp	r3, #0
 801d252:	d01e      	beq.n	801d292 <poly1305_update+0x100>
    for (i = 0; i < bytes; i++) st->buffer[st->leftover + i] = m[i];
 801d254:	2300      	movs	r3, #0
 801d256:	61fb      	str	r3, [r7, #28]
 801d258:	e00f      	b.n	801d27a <poly1305_update+0xe8>
 801d25a:	68ba      	ldr	r2, [r7, #8]
 801d25c:	69fb      	ldr	r3, [r7, #28]
 801d25e:	441a      	add	r2, r3
 801d260:	697b      	ldr	r3, [r7, #20]
 801d262:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 801d264:	69fb      	ldr	r3, [r7, #28]
 801d266:	440b      	add	r3, r1
 801d268:	7811      	ldrb	r1, [r2, #0]
 801d26a:	697a      	ldr	r2, [r7, #20]
 801d26c:	4413      	add	r3, r2
 801d26e:	460a      	mov	r2, r1
 801d270:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 801d274:	69fb      	ldr	r3, [r7, #28]
 801d276:	3301      	adds	r3, #1
 801d278:	61fb      	str	r3, [r7, #28]
 801d27a:	69fa      	ldr	r2, [r7, #28]
 801d27c:	687b      	ldr	r3, [r7, #4]
 801d27e:	429a      	cmp	r2, r3
 801d280:	d3eb      	bcc.n	801d25a <poly1305_update+0xc8>
    st->leftover += bytes;
 801d282:	697b      	ldr	r3, [r7, #20]
 801d284:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801d286:	687b      	ldr	r3, [r7, #4]
 801d288:	441a      	add	r2, r3
 801d28a:	697b      	ldr	r3, [r7, #20]
 801d28c:	639a      	str	r2, [r3, #56]	@ 0x38
 801d28e:	e000      	b.n	801d292 <poly1305_update+0x100>
    if (st->leftover < poly1305_block_size) return;
 801d290:	bf00      	nop
  }
}
 801d292:	3720      	adds	r7, #32
 801d294:	46bd      	mov	sp, r7
 801d296:	bd80      	pop	{r7, pc}

0801d298 <pad_if_needed>:
#define __CHACHA20_BLOCK_SIZE (64)
#define __POLY1305_KEY_SIZE (32)

static PORTABLE_8439_DECL uint8_t __ZEROES[16] = {0};
static PORTABLE_8439_DECL void pad_if_needed(poly1305_context *ctx,
                                             size_t size) {
 801d298:	b580      	push	{r7, lr}
 801d29a:	b084      	sub	sp, #16
 801d29c:	af00      	add	r7, sp, #0
 801d29e:	6078      	str	r0, [r7, #4]
 801d2a0:	6039      	str	r1, [r7, #0]
  size_t padding = size % 16;
 801d2a2:	683b      	ldr	r3, [r7, #0]
 801d2a4:	f003 030f 	and.w	r3, r3, #15
 801d2a8:	60fb      	str	r3, [r7, #12]
  if (padding != 0) {
 801d2aa:	68fb      	ldr	r3, [r7, #12]
 801d2ac:	2b00      	cmp	r3, #0
 801d2ae:	d007      	beq.n	801d2c0 <pad_if_needed+0x28>
    poly1305_update(ctx, __ZEROES, 16 - padding);
 801d2b0:	68fb      	ldr	r3, [r7, #12]
 801d2b2:	f1c3 0310 	rsb	r3, r3, #16
 801d2b6:	461a      	mov	r2, r3
 801d2b8:	4903      	ldr	r1, [pc, #12]	@ (801d2c8 <pad_if_needed+0x30>)
 801d2ba:	6878      	ldr	r0, [r7, #4]
 801d2bc:	f7ff ff69 	bl	801d192 <poly1305_update>
  }
}
 801d2c0:	bf00      	nop
 801d2c2:	3710      	adds	r7, #16
 801d2c4:	46bd      	mov	sp, r7
 801d2c6:	bd80      	pop	{r7, pc}
 801d2c8:	24002390 	.word	0x24002390

0801d2cc <write_64bit_int>:

#define __u8(v) ((uint8_t) ((v) &0xFF))

// TODO: make this depending on the unaligned/native read size possible
static PORTABLE_8439_DECL void write_64bit_int(poly1305_context *ctx,
                                               uint64_t value) {
 801d2cc:	b580      	push	{r7, lr}
 801d2ce:	b086      	sub	sp, #24
 801d2d0:	af00      	add	r7, sp, #0
 801d2d2:	60f8      	str	r0, [r7, #12]
 801d2d4:	e9c7 2300 	strd	r2, r3, [r7]
  uint8_t result[8];
  result[0] = __u8(value);
 801d2d8:	783b      	ldrb	r3, [r7, #0]
 801d2da:	743b      	strb	r3, [r7, #16]
  result[1] = __u8(value >> 8);
 801d2dc:	e9d7 0100 	ldrd	r0, r1, [r7]
 801d2e0:	f04f 0200 	mov.w	r2, #0
 801d2e4:	f04f 0300 	mov.w	r3, #0
 801d2e8:	0a02      	lsrs	r2, r0, #8
 801d2ea:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 801d2ee:	0a0b      	lsrs	r3, r1, #8
 801d2f0:	b2d3      	uxtb	r3, r2
 801d2f2:	747b      	strb	r3, [r7, #17]
  result[2] = __u8(value >> 16);
 801d2f4:	e9d7 0100 	ldrd	r0, r1, [r7]
 801d2f8:	f04f 0200 	mov.w	r2, #0
 801d2fc:	f04f 0300 	mov.w	r3, #0
 801d300:	0c02      	lsrs	r2, r0, #16
 801d302:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 801d306:	0c0b      	lsrs	r3, r1, #16
 801d308:	b2d3      	uxtb	r3, r2
 801d30a:	74bb      	strb	r3, [r7, #18]
  result[3] = __u8(value >> 24);
 801d30c:	e9d7 0100 	ldrd	r0, r1, [r7]
 801d310:	f04f 0200 	mov.w	r2, #0
 801d314:	f04f 0300 	mov.w	r3, #0
 801d318:	0e02      	lsrs	r2, r0, #24
 801d31a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 801d31e:	0e0b      	lsrs	r3, r1, #24
 801d320:	b2d3      	uxtb	r3, r2
 801d322:	74fb      	strb	r3, [r7, #19]
  result[4] = __u8(value >> 32);
 801d324:	e9d7 0100 	ldrd	r0, r1, [r7]
 801d328:	f04f 0200 	mov.w	r2, #0
 801d32c:	f04f 0300 	mov.w	r3, #0
 801d330:	000a      	movs	r2, r1
 801d332:	2300      	movs	r3, #0
 801d334:	b2d3      	uxtb	r3, r2
 801d336:	753b      	strb	r3, [r7, #20]
  result[5] = __u8(value >> 40);
 801d338:	e9d7 0100 	ldrd	r0, r1, [r7]
 801d33c:	f04f 0200 	mov.w	r2, #0
 801d340:	f04f 0300 	mov.w	r3, #0
 801d344:	0a0a      	lsrs	r2, r1, #8
 801d346:	2300      	movs	r3, #0
 801d348:	b2d3      	uxtb	r3, r2
 801d34a:	757b      	strb	r3, [r7, #21]
  result[6] = __u8(value >> 48);
 801d34c:	e9d7 0100 	ldrd	r0, r1, [r7]
 801d350:	f04f 0200 	mov.w	r2, #0
 801d354:	f04f 0300 	mov.w	r3, #0
 801d358:	0c0a      	lsrs	r2, r1, #16
 801d35a:	2300      	movs	r3, #0
 801d35c:	b2d3      	uxtb	r3, r2
 801d35e:	75bb      	strb	r3, [r7, #22]
  result[7] = __u8(value >> 56);
 801d360:	e9d7 0100 	ldrd	r0, r1, [r7]
 801d364:	f04f 0200 	mov.w	r2, #0
 801d368:	f04f 0300 	mov.w	r3, #0
 801d36c:	0e0a      	lsrs	r2, r1, #24
 801d36e:	2300      	movs	r3, #0
 801d370:	b2d3      	uxtb	r3, r2
 801d372:	75fb      	strb	r3, [r7, #23]
  poly1305_update(ctx, result, 8);
 801d374:	f107 0310 	add.w	r3, r7, #16
 801d378:	2208      	movs	r2, #8
 801d37a:	4619      	mov	r1, r3
 801d37c:	68f8      	ldr	r0, [r7, #12]
 801d37e:	f7ff ff08 	bl	801d192 <poly1305_update>
}
 801d382:	bf00      	nop
 801d384:	3718      	adds	r7, #24
 801d386:	46bd      	mov	sp, r7
 801d388:	bd80      	pop	{r7, pc}

0801d38a <poly1305_calculate_mac>:

static PORTABLE_8439_DECL void poly1305_calculate_mac(
    uint8_t *mac, const uint8_t *cipher_text, size_t cipher_text_size,
    const uint8_t key[RFC_8439_KEY_SIZE],
    const uint8_t nonce[RFC_8439_NONCE_SIZE], const uint8_t *ad,
    size_t ad_size) {
 801d38a:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801d38e:	b0b0      	sub	sp, #192	@ 0xc0
 801d390:	af00      	add	r7, sp, #0
 801d392:	60f8      	str	r0, [r7, #12]
 801d394:	60b9      	str	r1, [r7, #8]
 801d396:	607a      	str	r2, [r7, #4]
 801d398:	603b      	str	r3, [r7, #0]
  // init poly key (section 2.6)
  uint8_t poly_key[__POLY1305_KEY_SIZE] = {0};
 801d39a:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 801d39e:	2220      	movs	r2, #32
 801d3a0:	2100      	movs	r1, #0
 801d3a2:	4618      	mov	r0, r3
 801d3a4:	f00a f990 	bl	80276c8 <memset>
  poly1305_context poly_ctx;
  rfc8439_keygen(poly_key, key, nonce);
 801d3a8:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 801d3ac:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 801d3b0:	6839      	ldr	r1, [r7, #0]
 801d3b2:	4618      	mov	r0, r3
 801d3b4:	f7fe fcb5 	bl	801bd22 <rfc8439_keygen>
  // start poly1305 mac
  poly1305_init(&poly_ctx, poly_key);
 801d3b8:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 801d3bc:	f107 0314 	add.w	r3, r7, #20
 801d3c0:	4611      	mov	r1, r2
 801d3c2:	4618      	mov	r0, r3
 801d3c4:	f7fe fd0a 	bl	801bddc <poly1305_init>

  if (ad != NULL && ad_size > 0) {
 801d3c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801d3cc:	2b00      	cmp	r3, #0
 801d3ce:	d013      	beq.n	801d3f8 <poly1305_calculate_mac+0x6e>
 801d3d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801d3d4:	2b00      	cmp	r3, #0
 801d3d6:	d00f      	beq.n	801d3f8 <poly1305_calculate_mac+0x6e>
    // write AD if present
    poly1305_update(&poly_ctx, ad, ad_size);
 801d3d8:	f107 0314 	add.w	r3, r7, #20
 801d3dc:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 801d3e0:	f8d7 10dc 	ldr.w	r1, [r7, #220]	@ 0xdc
 801d3e4:	4618      	mov	r0, r3
 801d3e6:	f7ff fed4 	bl	801d192 <poly1305_update>
    pad_if_needed(&poly_ctx, ad_size);
 801d3ea:	f107 0314 	add.w	r3, r7, #20
 801d3ee:	f8d7 10e0 	ldr.w	r1, [r7, #224]	@ 0xe0
 801d3f2:	4618      	mov	r0, r3
 801d3f4:	f7ff ff50 	bl	801d298 <pad_if_needed>
  }

  // now write the cipher text
  poly1305_update(&poly_ctx, cipher_text, cipher_text_size);
 801d3f8:	f107 0314 	add.w	r3, r7, #20
 801d3fc:	687a      	ldr	r2, [r7, #4]
 801d3fe:	68b9      	ldr	r1, [r7, #8]
 801d400:	4618      	mov	r0, r3
 801d402:	f7ff fec6 	bl	801d192 <poly1305_update>
  pad_if_needed(&poly_ctx, cipher_text_size);
 801d406:	f107 0314 	add.w	r3, r7, #20
 801d40a:	6879      	ldr	r1, [r7, #4]
 801d40c:	4618      	mov	r0, r3
 801d40e:	f7ff ff43 	bl	801d298 <pad_if_needed>

  // write sizes
  write_64bit_int(&poly_ctx, ad_size);
 801d412:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801d416:	2200      	movs	r2, #0
 801d418:	4698      	mov	r8, r3
 801d41a:	4691      	mov	r9, r2
 801d41c:	f107 0114 	add.w	r1, r7, #20
 801d420:	4642      	mov	r2, r8
 801d422:	464b      	mov	r3, r9
 801d424:	4608      	mov	r0, r1
 801d426:	f7ff ff51 	bl	801d2cc <write_64bit_int>
  write_64bit_int(&poly_ctx, cipher_text_size);
 801d42a:	687b      	ldr	r3, [r7, #4]
 801d42c:	2200      	movs	r2, #0
 801d42e:	461c      	mov	r4, r3
 801d430:	4615      	mov	r5, r2
 801d432:	f107 0114 	add.w	r1, r7, #20
 801d436:	4622      	mov	r2, r4
 801d438:	462b      	mov	r3, r5
 801d43a:	4608      	mov	r0, r1
 801d43c:	f7ff ff46 	bl	801d2cc <write_64bit_int>

  // calculate MAC
  poly1305_finish(&poly_ctx, mac);
 801d440:	f107 0314 	add.w	r3, r7, #20
 801d444:	68f9      	ldr	r1, [r7, #12]
 801d446:	4618      	mov	r0, r3
 801d448:	f7ff fc47 	bl	801ccda <poly1305_finish>
}
 801d44c:	bf00      	nop
 801d44e:	37c0      	adds	r7, #192	@ 0xc0
 801d450:	46bd      	mov	sp, r7
 801d452:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0801d456 <mg_chacha20_poly1305_encrypt>:

PORTABLE_8439_DECL size_t mg_chacha20_poly1305_encrypt(
    uint8_t *restrict cipher_text, const uint8_t key[RFC_8439_KEY_SIZE],
    const uint8_t nonce[RFC_8439_NONCE_SIZE], const uint8_t *restrict ad,
    size_t ad_size, const uint8_t *restrict plain_text,
    size_t plain_text_size) {
 801d456:	b580      	push	{r7, lr}
 801d458:	b08a      	sub	sp, #40	@ 0x28
 801d45a:	af04      	add	r7, sp, #16
 801d45c:	60f8      	str	r0, [r7, #12]
 801d45e:	60b9      	str	r1, [r7, #8]
 801d460:	607a      	str	r2, [r7, #4]
 801d462:	603b      	str	r3, [r7, #0]
  size_t new_size = plain_text_size + RFC_8439_TAG_SIZE;
 801d464:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d466:	3310      	adds	r3, #16
 801d468:	617b      	str	r3, [r7, #20]
  if (MG_OVERLAPPING(plain_text, plain_text_size, cipher_text, new_size)) {
 801d46a:	68fa      	ldr	r2, [r7, #12]
 801d46c:	697b      	ldr	r3, [r7, #20]
 801d46e:	4413      	add	r3, r2
 801d470:	461a      	mov	r2, r3
 801d472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d474:	429a      	cmp	r2, r3
 801d476:	d909      	bls.n	801d48c <mg_chacha20_poly1305_encrypt+0x36>
 801d478:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801d47a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d47c:	4413      	add	r3, r2
 801d47e:	461a      	mov	r2, r3
 801d480:	68fb      	ldr	r3, [r7, #12]
 801d482:	429a      	cmp	r2, r3
 801d484:	d902      	bls.n	801d48c <mg_chacha20_poly1305_encrypt+0x36>
    return (size_t) -1;
 801d486:	f04f 33ff 	mov.w	r3, #4294967295
 801d48a:	e018      	b.n	801d4be <mg_chacha20_poly1305_encrypt+0x68>
  }
  chacha20_xor_stream(cipher_text, plain_text, plain_text_size, key, nonce, 1);
 801d48c:	2301      	movs	r3, #1
 801d48e:	9301      	str	r3, [sp, #4]
 801d490:	687b      	ldr	r3, [r7, #4]
 801d492:	9300      	str	r3, [sp, #0]
 801d494:	68bb      	ldr	r3, [r7, #8]
 801d496:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801d498:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801d49a:	68f8      	ldr	r0, [r7, #12]
 801d49c:	f7fe fbc9 	bl	801bc32 <chacha20_xor_stream>
  poly1305_calculate_mac(cipher_text + plain_text_size, cipher_text,
 801d4a0:	68fa      	ldr	r2, [r7, #12]
 801d4a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d4a4:	18d0      	adds	r0, r2, r3
 801d4a6:	6a3b      	ldr	r3, [r7, #32]
 801d4a8:	9302      	str	r3, [sp, #8]
 801d4aa:	683b      	ldr	r3, [r7, #0]
 801d4ac:	9301      	str	r3, [sp, #4]
 801d4ae:	687b      	ldr	r3, [r7, #4]
 801d4b0:	9300      	str	r3, [sp, #0]
 801d4b2:	68bb      	ldr	r3, [r7, #8]
 801d4b4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801d4b6:	68f9      	ldr	r1, [r7, #12]
 801d4b8:	f7ff ff67 	bl	801d38a <poly1305_calculate_mac>
                         plain_text_size, key, nonce, ad, ad_size);
  return new_size;
 801d4bc:	697b      	ldr	r3, [r7, #20]
}
 801d4be:	4618      	mov	r0, r3
 801d4c0:	3718      	adds	r7, #24
 801d4c2:	46bd      	mov	sp, r7
 801d4c4:	bd80      	pop	{r7, pc}

0801d4c6 <mg_chacha20_poly1305_decrypt>:

PORTABLE_8439_DECL size_t mg_chacha20_poly1305_decrypt(
    uint8_t *restrict plain_text, const uint8_t key[RFC_8439_KEY_SIZE],
    const uint8_t nonce[RFC_8439_NONCE_SIZE],
    const uint8_t *restrict cipher_text, size_t cipher_text_size) {
 801d4c6:	b580      	push	{r7, lr}
 801d4c8:	b088      	sub	sp, #32
 801d4ca:	af02      	add	r7, sp, #8
 801d4cc:	60f8      	str	r0, [r7, #12]
 801d4ce:	60b9      	str	r1, [r7, #8]
 801d4d0:	607a      	str	r2, [r7, #4]
 801d4d2:	603b      	str	r3, [r7, #0]
  // first we calculate the mac and see if it lines up, only then do we decrypt
  size_t actual_size = cipher_text_size - RFC_8439_TAG_SIZE;
 801d4d4:	6a3b      	ldr	r3, [r7, #32]
 801d4d6:	3b10      	subs	r3, #16
 801d4d8:	617b      	str	r3, [r7, #20]
  if (MG_OVERLAPPING(plain_text, actual_size, cipher_text, cipher_text_size)) {
 801d4da:	683a      	ldr	r2, [r7, #0]
 801d4dc:	6a3b      	ldr	r3, [r7, #32]
 801d4de:	4413      	add	r3, r2
 801d4e0:	461a      	mov	r2, r3
 801d4e2:	68fb      	ldr	r3, [r7, #12]
 801d4e4:	429a      	cmp	r2, r3
 801d4e6:	d909      	bls.n	801d4fc <mg_chacha20_poly1305_decrypt+0x36>
 801d4e8:	68fa      	ldr	r2, [r7, #12]
 801d4ea:	697b      	ldr	r3, [r7, #20]
 801d4ec:	4413      	add	r3, r2
 801d4ee:	461a      	mov	r2, r3
 801d4f0:	683b      	ldr	r3, [r7, #0]
 801d4f2:	429a      	cmp	r2, r3
 801d4f4:	d902      	bls.n	801d4fc <mg_chacha20_poly1305_decrypt+0x36>
    return (size_t) -1;
 801d4f6:	f04f 33ff 	mov.w	r3, #4294967295
 801d4fa:	e00a      	b.n	801d512 <mg_chacha20_poly1305_decrypt+0x4c>
  }

  chacha20_xor_stream(plain_text, cipher_text, actual_size, key, nonce, 1);
 801d4fc:	2301      	movs	r3, #1
 801d4fe:	9301      	str	r3, [sp, #4]
 801d500:	687b      	ldr	r3, [r7, #4]
 801d502:	9300      	str	r3, [sp, #0]
 801d504:	68bb      	ldr	r3, [r7, #8]
 801d506:	697a      	ldr	r2, [r7, #20]
 801d508:	6839      	ldr	r1, [r7, #0]
 801d50a:	68f8      	ldr	r0, [r7, #12]
 801d50c:	f7fe fb91 	bl	801bc32 <chacha20_xor_stream>
  return actual_size;
 801d510:	697b      	ldr	r3, [r7, #20]
}
 801d512:	4618      	mov	r0, r3
 801d514:	3718      	adds	r7, #24
 801d516:	46bd      	mov	sp, r7
 801d518:	bd80      	pop	{r7, pc}

0801d51a <bi_initialize>:

/**
 * @brief Start a new bigint context.
 * @return A bigint context.
 */
NS_INTERNAL BI_CTX *bi_initialize(void) {
 801d51a:	b580      	push	{r7, lr}
 801d51c:	b082      	sub	sp, #8
 801d51e:	af00      	add	r7, sp, #0
  /* calloc() sets everything to zero */
  BI_CTX *ctx = (BI_CTX *) calloc(1, sizeof(BI_CTX));
 801d520:	2138      	movs	r1, #56	@ 0x38
 801d522:	2001      	movs	r0, #1
 801d524:	f008 fa22 	bl	802596c <calloc>
 801d528:	4603      	mov	r3, r0
 801d52a:	607b      	str	r3, [r7, #4]

  /* the radix */
  ctx->bi_radix = alloc(ctx, 2);
 801d52c:	2102      	movs	r1, #2
 801d52e:	6878      	ldr	r0, [r7, #4]
 801d530:	f000 fefe 	bl	801e330 <alloc>
 801d534:	4602      	mov	r2, r0
 801d536:	687b      	ldr	r3, [r7, #4]
 801d538:	609a      	str	r2, [r3, #8]
  ctx->bi_radix->comps[0] = 0;
 801d53a:	687b      	ldr	r3, [r7, #4]
 801d53c:	689b      	ldr	r3, [r3, #8]
 801d53e:	68db      	ldr	r3, [r3, #12]
 801d540:	2200      	movs	r2, #0
 801d542:	601a      	str	r2, [r3, #0]
  ctx->bi_radix->comps[1] = 1;
 801d544:	687b      	ldr	r3, [r7, #4]
 801d546:	689b      	ldr	r3, [r3, #8]
 801d548:	68db      	ldr	r3, [r3, #12]
 801d54a:	3304      	adds	r3, #4
 801d54c:	2201      	movs	r2, #1
 801d54e:	601a      	str	r2, [r3, #0]
  bi_permanent(ctx->bi_radix);
 801d550:	687b      	ldr	r3, [r7, #4]
 801d552:	689b      	ldr	r3, [r3, #8]
 801d554:	4618      	mov	r0, r3
 801d556:	f000 f81d 	bl	801d594 <bi_permanent>
  return ctx;
 801d55a:	687b      	ldr	r3, [r7, #4]
}
 801d55c:	4618      	mov	r0, r3
 801d55e:	3708      	adds	r7, #8
 801d560:	46bd      	mov	sp, r7
 801d562:	bd80      	pop	{r7, pc}

0801d564 <bi_copy>:
 * @brief Increment the number of references to this object.
 * It does not do a full copy.
 * @param bi [in]   The bigint to copy.
 * @return A reference to the same bigint.
 */
NS_INTERNAL bigint *bi_copy(bigint *bi) {
 801d564:	b480      	push	{r7}
 801d566:	b083      	sub	sp, #12
 801d568:	af00      	add	r7, sp, #0
 801d56a:	6078      	str	r0, [r7, #4]
  check(bi);
  if (bi->refs != PERMANENT) bi->refs++;
 801d56c:	687b      	ldr	r3, [r7, #4]
 801d56e:	689b      	ldr	r3, [r3, #8]
 801d570:	4a07      	ldr	r2, [pc, #28]	@ (801d590 <bi_copy+0x2c>)
 801d572:	4293      	cmp	r3, r2
 801d574:	d004      	beq.n	801d580 <bi_copy+0x1c>
 801d576:	687b      	ldr	r3, [r7, #4]
 801d578:	689b      	ldr	r3, [r3, #8]
 801d57a:	1c5a      	adds	r2, r3, #1
 801d57c:	687b      	ldr	r3, [r7, #4]
 801d57e:	609a      	str	r2, [r3, #8]
  return bi;
 801d580:	687b      	ldr	r3, [r7, #4]
}
 801d582:	4618      	mov	r0, r3
 801d584:	370c      	adds	r7, #12
 801d586:	46bd      	mov	sp, r7
 801d588:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d58c:	4770      	bx	lr
 801d58e:	bf00      	nop
 801d590:	7fff55aa 	.word	0x7fff55aa

0801d594 <bi_permanent>:
 * @brief Simply make a bigint object "unfreeable" if bi_free() is called on it.
 *
 * For this object to be freed, bi_depermanent() must be called.
 * @param bi [in]   The bigint to be made permanent.
 */
NS_INTERNAL void bi_permanent(bigint *bi) {
 801d594:	b580      	push	{r7, lr}
 801d596:	b082      	sub	sp, #8
 801d598:	af00      	add	r7, sp, #0
 801d59a:	6078      	str	r0, [r7, #4]
  check(bi);
  if (bi->refs != 1) {
 801d59c:	687b      	ldr	r3, [r7, #4]
 801d59e:	689b      	ldr	r3, [r3, #8]
 801d5a0:	2b01      	cmp	r3, #1
 801d5a2:	d001      	beq.n	801d5a8 <bi_permanent+0x14>
#ifdef CONFIG_SSL_FULL_MODE
    printf("bi_permanent: refs was not 1\n");
#endif
    abort();
 801d5a4:	f008 f9b4 	bl	8025910 <abort>
  }

  bi->refs = PERMANENT;
 801d5a8:	687b      	ldr	r3, [r7, #4]
 801d5aa:	4a03      	ldr	r2, [pc, #12]	@ (801d5b8 <bi_permanent+0x24>)
 801d5ac:	609a      	str	r2, [r3, #8]
}
 801d5ae:	bf00      	nop
 801d5b0:	3708      	adds	r7, #8
 801d5b2:	46bd      	mov	sp, r7
 801d5b4:	bd80      	pop	{r7, pc}
 801d5b6:	bf00      	nop
 801d5b8:	7fff55aa 	.word	0x7fff55aa

0801d5bc <bi_depermanent>:

/**
 * @brief Take a permanent object and make it eligible for freedom.
 * @param bi [in]   The bigint to be made back to temporary.
 */
NS_INTERNAL void bi_depermanent(bigint *bi) {
 801d5bc:	b580      	push	{r7, lr}
 801d5be:	b082      	sub	sp, #8
 801d5c0:	af00      	add	r7, sp, #0
 801d5c2:	6078      	str	r0, [r7, #4]
  check(bi);
  if (bi->refs != PERMANENT) {
 801d5c4:	687b      	ldr	r3, [r7, #4]
 801d5c6:	689b      	ldr	r3, [r3, #8]
 801d5c8:	4a05      	ldr	r2, [pc, #20]	@ (801d5e0 <bi_depermanent+0x24>)
 801d5ca:	4293      	cmp	r3, r2
 801d5cc:	d001      	beq.n	801d5d2 <bi_depermanent+0x16>
#ifdef CONFIG_SSL_FULL_MODE
    printf("bi_depermanent: bigint was not permanent\n");
#endif
    abort();
 801d5ce:	f008 f99f 	bl	8025910 <abort>
  }

  bi->refs = 1;
 801d5d2:	687b      	ldr	r3, [r7, #4]
 801d5d4:	2201      	movs	r2, #1
 801d5d6:	609a      	str	r2, [r3, #8]
}
 801d5d8:	bf00      	nop
 801d5da:	3708      	adds	r7, #8
 801d5dc:	46bd      	mov	sp, r7
 801d5de:	bd80      	pop	{r7, pc}
 801d5e0:	7fff55aa 	.word	0x7fff55aa

0801d5e4 <bi_free>:
 *
 * The memory itself it not actually freed, just tagged as being available
 * @param ctx [in]   The bigint session context.
 * @param bi [in]    The bigint to be freed.
 */
NS_INTERNAL void bi_free(BI_CTX *ctx, bigint *bi) {
 801d5e4:	b580      	push	{r7, lr}
 801d5e6:	b082      	sub	sp, #8
 801d5e8:	af00      	add	r7, sp, #0
 801d5ea:	6078      	str	r0, [r7, #4]
 801d5ec:	6039      	str	r1, [r7, #0]
  check(bi);
  if (bi->refs == PERMANENT) {
 801d5ee:	683b      	ldr	r3, [r7, #0]
 801d5f0:	689b      	ldr	r3, [r3, #8]
 801d5f2:	4a14      	ldr	r2, [pc, #80]	@ (801d644 <bi_free+0x60>)
 801d5f4:	4293      	cmp	r3, r2
 801d5f6:	d01f      	beq.n	801d638 <bi_free+0x54>
    return;
  }

  if (--bi->refs > 0) {
 801d5f8:	683b      	ldr	r3, [r7, #0]
 801d5fa:	689b      	ldr	r3, [r3, #8]
 801d5fc:	1e5a      	subs	r2, r3, #1
 801d5fe:	683b      	ldr	r3, [r7, #0]
 801d600:	609a      	str	r2, [r3, #8]
 801d602:	683b      	ldr	r3, [r7, #0]
 801d604:	689b      	ldr	r3, [r3, #8]
 801d606:	2b00      	cmp	r3, #0
 801d608:	dc18      	bgt.n	801d63c <bi_free+0x58>
    return;
  }

  bi->next = ctx->free_list;
 801d60a:	687b      	ldr	r3, [r7, #4]
 801d60c:	685a      	ldr	r2, [r3, #4]
 801d60e:	683b      	ldr	r3, [r7, #0]
 801d610:	601a      	str	r2, [r3, #0]
  ctx->free_list = bi;
 801d612:	687b      	ldr	r3, [r7, #4]
 801d614:	683a      	ldr	r2, [r7, #0]
 801d616:	605a      	str	r2, [r3, #4]
  ctx->free_count++;
 801d618:	687b      	ldr	r3, [r7, #4]
 801d61a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d61c:	1c5a      	adds	r2, r3, #1
 801d61e:	687b      	ldr	r3, [r7, #4]
 801d620:	631a      	str	r2, [r3, #48]	@ 0x30

  if (--ctx->active_count < 0) {
 801d622:	687b      	ldr	r3, [r7, #4]
 801d624:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d626:	1e5a      	subs	r2, r3, #1
 801d628:	687b      	ldr	r3, [r7, #4]
 801d62a:	62da      	str	r2, [r3, #44]	@ 0x2c
 801d62c:	687b      	ldr	r3, [r7, #4]
 801d62e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d630:	2b00      	cmp	r3, #0
 801d632:	da04      	bge.n	801d63e <bi_free+0x5a>
#ifdef CONFIG_SSL_FULL_MODE
    printf(
        "bi_free: active_count went negative "
        "- double-freed bigint?\n");
#endif
    abort();
 801d634:	f008 f96c 	bl	8025910 <abort>
    return;
 801d638:	bf00      	nop
 801d63a:	e000      	b.n	801d63e <bi_free+0x5a>
    return;
 801d63c:	bf00      	nop
  }
}
 801d63e:	3708      	adds	r7, #8
 801d640:	46bd      	mov	sp, r7
 801d642:	bd80      	pop	{r7, pc}
 801d644:	7fff55aa 	.word	0x7fff55aa

0801d648 <int_to_bi>:
 * @brief Convert an (unsigned) integer into a bigint.
 * @param ctx [in]   The bigint session context.
 * @param i [in]     The (unsigned) integer to be converted.
 *
 */
NS_INTERNAL bigint *int_to_bi(BI_CTX *ctx, comp i) {
 801d648:	b580      	push	{r7, lr}
 801d64a:	b084      	sub	sp, #16
 801d64c:	af00      	add	r7, sp, #0
 801d64e:	6078      	str	r0, [r7, #4]
 801d650:	6039      	str	r1, [r7, #0]
  bigint *biR = alloc(ctx, 1);
 801d652:	2101      	movs	r1, #1
 801d654:	6878      	ldr	r0, [r7, #4]
 801d656:	f000 fe6b 	bl	801e330 <alloc>
 801d65a:	60f8      	str	r0, [r7, #12]
  biR->comps[0] = i;
 801d65c:	68fb      	ldr	r3, [r7, #12]
 801d65e:	68db      	ldr	r3, [r3, #12]
 801d660:	683a      	ldr	r2, [r7, #0]
 801d662:	601a      	str	r2, [r3, #0]
  return biR;
 801d664:	68fb      	ldr	r3, [r7, #12]
}
 801d666:	4618      	mov	r0, r3
 801d668:	3710      	adds	r7, #16
 801d66a:	46bd      	mov	sp, r7
 801d66c:	bd80      	pop	{r7, pc}

0801d66e <bi_clone>:
/**
 * @brief Do a full copy of the bigint object.
 * @param ctx [in]   The bigint session context.
 * @param bi  [in]   The bigint object to be copied.
 */
NS_INTERNAL bigint *bi_clone(BI_CTX *ctx, const bigint *bi) {
 801d66e:	b580      	push	{r7, lr}
 801d670:	b084      	sub	sp, #16
 801d672:	af00      	add	r7, sp, #0
 801d674:	6078      	str	r0, [r7, #4]
 801d676:	6039      	str	r1, [r7, #0]
  bigint *biR = alloc(ctx, bi->size);
 801d678:	683b      	ldr	r3, [r7, #0]
 801d67a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801d67e:	4619      	mov	r1, r3
 801d680:	6878      	ldr	r0, [r7, #4]
 801d682:	f000 fe55 	bl	801e330 <alloc>
 801d686:	60f8      	str	r0, [r7, #12]
  check(bi);
  memcpy(biR->comps, bi->comps, (size_t) bi->size * COMP_BYTE_SIZE);
 801d688:	68fb      	ldr	r3, [r7, #12]
 801d68a:	68d8      	ldr	r0, [r3, #12]
 801d68c:	683b      	ldr	r3, [r7, #0]
 801d68e:	68d9      	ldr	r1, [r3, #12]
 801d690:	683b      	ldr	r3, [r7, #0]
 801d692:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801d696:	009b      	lsls	r3, r3, #2
 801d698:	461a      	mov	r2, r3
 801d69a:	f00a f94e 	bl	802793a <memcpy>
  return biR;
 801d69e:	68fb      	ldr	r3, [r7, #12]
}
 801d6a0:	4618      	mov	r0, r3
 801d6a2:	3710      	adds	r7, #16
 801d6a4:	46bd      	mov	sp, r7
 801d6a6:	bd80      	pop	{r7, pc}

0801d6a8 <bi_add>:
 * @param ctx [in]  The bigint session context.
 * @param bia [in]  A bigint.
 * @param bib [in]  Another bigint.
 * @return The result of the addition.
 */
NS_INTERNAL bigint *bi_add(BI_CTX *ctx, bigint *bia, bigint *bib) {
 801d6a8:	b580      	push	{r7, lr}
 801d6aa:	b08c      	sub	sp, #48	@ 0x30
 801d6ac:	af00      	add	r7, sp, #0
 801d6ae:	60f8      	str	r0, [r7, #12]
 801d6b0:	60b9      	str	r1, [r7, #8]
 801d6b2:	607a      	str	r2, [r7, #4]
  int n;
  comp carry = 0;
 801d6b4:	2300      	movs	r3, #0
 801d6b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  comp *pa, *pb;

  check(bia);
  check(bib);

  n = MAX(bia->size, bib->size);
 801d6b8:	687b      	ldr	r3, [r7, #4]
 801d6ba:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 801d6be:	68bb      	ldr	r3, [r7, #8]
 801d6c0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801d6c4:	4293      	cmp	r3, r2
 801d6c6:	bfb8      	it	lt
 801d6c8:	4613      	movlt	r3, r2
 801d6ca:	b21b      	sxth	r3, r3
 801d6cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  more_comps(bia, n + 1);
 801d6ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d6d0:	3301      	adds	r3, #1
 801d6d2:	4619      	mov	r1, r3
 801d6d4:	68b8      	ldr	r0, [r7, #8]
 801d6d6:	f000 fdcf 	bl	801e278 <more_comps>
  more_comps(bib, n);
 801d6da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801d6dc:	6878      	ldr	r0, [r7, #4]
 801d6de:	f000 fdcb 	bl	801e278 <more_comps>
  pa = bia->comps;
 801d6e2:	68bb      	ldr	r3, [r7, #8]
 801d6e4:	68db      	ldr	r3, [r3, #12]
 801d6e6:	627b      	str	r3, [r7, #36]	@ 0x24
  pb = bib->comps;
 801d6e8:	687b      	ldr	r3, [r7, #4]
 801d6ea:	68db      	ldr	r3, [r3, #12]
 801d6ec:	623b      	str	r3, [r7, #32]

  do {
    comp sl, rl, cy1;
    sl = *pa + *pb++;
 801d6ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d6f0:	681a      	ldr	r2, [r3, #0]
 801d6f2:	6a3b      	ldr	r3, [r7, #32]
 801d6f4:	1d19      	adds	r1, r3, #4
 801d6f6:	6239      	str	r1, [r7, #32]
 801d6f8:	681b      	ldr	r3, [r3, #0]
 801d6fa:	4413      	add	r3, r2
 801d6fc:	61fb      	str	r3, [r7, #28]
    rl = sl + carry;
 801d6fe:	69fa      	ldr	r2, [r7, #28]
 801d700:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d702:	4413      	add	r3, r2
 801d704:	61bb      	str	r3, [r7, #24]
    cy1 = sl < *pa;
 801d706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d708:	681b      	ldr	r3, [r3, #0]
 801d70a:	69fa      	ldr	r2, [r7, #28]
 801d70c:	429a      	cmp	r2, r3
 801d70e:	bf34      	ite	cc
 801d710:	2301      	movcc	r3, #1
 801d712:	2300      	movcs	r3, #0
 801d714:	b2db      	uxtb	r3, r3
 801d716:	617b      	str	r3, [r7, #20]
    carry = cy1 | (rl < sl);
 801d718:	69ba      	ldr	r2, [r7, #24]
 801d71a:	69fb      	ldr	r3, [r7, #28]
 801d71c:	429a      	cmp	r2, r3
 801d71e:	bf34      	ite	cc
 801d720:	2301      	movcc	r3, #1
 801d722:	2300      	movcs	r3, #0
 801d724:	b2db      	uxtb	r3, r3
 801d726:	461a      	mov	r2, r3
 801d728:	697b      	ldr	r3, [r7, #20]
 801d72a:	4313      	orrs	r3, r2
 801d72c:	62bb      	str	r3, [r7, #40]	@ 0x28
    *pa++ = rl;
 801d72e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d730:	1d1a      	adds	r2, r3, #4
 801d732:	627a      	str	r2, [r7, #36]	@ 0x24
 801d734:	69ba      	ldr	r2, [r7, #24]
 801d736:	601a      	str	r2, [r3, #0]
  } while (--n != 0);
 801d738:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d73a:	3b01      	subs	r3, #1
 801d73c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801d73e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d740:	2b00      	cmp	r3, #0
 801d742:	d1d4      	bne.n	801d6ee <bi_add+0x46>

  *pa = carry; /* do overflow */
 801d744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d746:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801d748:	601a      	str	r2, [r3, #0]
  bi_free(ctx, bib);
 801d74a:	6879      	ldr	r1, [r7, #4]
 801d74c:	68f8      	ldr	r0, [r7, #12]
 801d74e:	f7ff ff49 	bl	801d5e4 <bi_free>
  return trim(bia);
 801d752:	68b8      	ldr	r0, [r7, #8]
 801d754:	f000 fe9d 	bl	801e492 <trim>
 801d758:	4603      	mov	r3, r0
}
 801d75a:	4618      	mov	r0, r3
 801d75c:	3730      	adds	r7, #48	@ 0x30
 801d75e:	46bd      	mov	sp, r7
 801d760:	bd80      	pop	{r7, pc}

0801d762 <bi_subtract>:
 * @param is_negative [out] If defined, indicates that the result was negative.
 * is_negative may be null.
 * @return The result of the subtraction. The result is always positive.
 */
NS_INTERNAL bigint *bi_subtract(BI_CTX *ctx, bigint *bia, bigint *bib,
                                int *is_negative) {
 801d762:	b580      	push	{r7, lr}
 801d764:	b08c      	sub	sp, #48	@ 0x30
 801d766:	af00      	add	r7, sp, #0
 801d768:	60f8      	str	r0, [r7, #12]
 801d76a:	60b9      	str	r1, [r7, #8]
 801d76c:	607a      	str	r2, [r7, #4]
 801d76e:	603b      	str	r3, [r7, #0]
  int n = bia->size;
 801d770:	68bb      	ldr	r3, [r7, #8]
 801d772:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801d776:	62fb      	str	r3, [r7, #44]	@ 0x2c
  comp *pa, *pb, carry = 0;
 801d778:	2300      	movs	r3, #0
 801d77a:	623b      	str	r3, [r7, #32]

  check(bia);
  check(bib);

  more_comps(bib, n);
 801d77c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801d77e:	6878      	ldr	r0, [r7, #4]
 801d780:	f000 fd7a 	bl	801e278 <more_comps>
  pa = bia->comps;
 801d784:	68bb      	ldr	r3, [r7, #8]
 801d786:	68db      	ldr	r3, [r3, #12]
 801d788:	62bb      	str	r3, [r7, #40]	@ 0x28
  pb = bib->comps;
 801d78a:	687b      	ldr	r3, [r7, #4]
 801d78c:	68db      	ldr	r3, [r3, #12]
 801d78e:	627b      	str	r3, [r7, #36]	@ 0x24

  do {
    comp sl, rl, cy1;
    sl = *pa - *pb++;
 801d790:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d792:	681a      	ldr	r2, [r3, #0]
 801d794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d796:	1d19      	adds	r1, r3, #4
 801d798:	6279      	str	r1, [r7, #36]	@ 0x24
 801d79a:	681b      	ldr	r3, [r3, #0]
 801d79c:	1ad3      	subs	r3, r2, r3
 801d79e:	61fb      	str	r3, [r7, #28]
    rl = sl - carry;
 801d7a0:	69fa      	ldr	r2, [r7, #28]
 801d7a2:	6a3b      	ldr	r3, [r7, #32]
 801d7a4:	1ad3      	subs	r3, r2, r3
 801d7a6:	61bb      	str	r3, [r7, #24]
    cy1 = sl > *pa;
 801d7a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d7aa:	681b      	ldr	r3, [r3, #0]
 801d7ac:	69fa      	ldr	r2, [r7, #28]
 801d7ae:	429a      	cmp	r2, r3
 801d7b0:	bf8c      	ite	hi
 801d7b2:	2301      	movhi	r3, #1
 801d7b4:	2300      	movls	r3, #0
 801d7b6:	b2db      	uxtb	r3, r3
 801d7b8:	617b      	str	r3, [r7, #20]
    carry = cy1 | (rl > sl);
 801d7ba:	69ba      	ldr	r2, [r7, #24]
 801d7bc:	69fb      	ldr	r3, [r7, #28]
 801d7be:	429a      	cmp	r2, r3
 801d7c0:	bf8c      	ite	hi
 801d7c2:	2301      	movhi	r3, #1
 801d7c4:	2300      	movls	r3, #0
 801d7c6:	b2db      	uxtb	r3, r3
 801d7c8:	461a      	mov	r2, r3
 801d7ca:	697b      	ldr	r3, [r7, #20]
 801d7cc:	4313      	orrs	r3, r2
 801d7ce:	623b      	str	r3, [r7, #32]
    *pa++ = rl;
 801d7d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d7d2:	1d1a      	adds	r2, r3, #4
 801d7d4:	62ba      	str	r2, [r7, #40]	@ 0x28
 801d7d6:	69ba      	ldr	r2, [r7, #24]
 801d7d8:	601a      	str	r2, [r3, #0]
  } while (--n != 0);
 801d7da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d7dc:	3b01      	subs	r3, #1
 801d7de:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801d7e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d7e2:	2b00      	cmp	r3, #0
 801d7e4:	d1d4      	bne.n	801d790 <bi_subtract+0x2e>

  if (is_negative) /* indicate a negative result */
 801d7e6:	683b      	ldr	r3, [r7, #0]
 801d7e8:	2b00      	cmp	r3, #0
 801d7ea:	d002      	beq.n	801d7f2 <bi_subtract+0x90>
  {
    *is_negative = (int) carry;
 801d7ec:	6a3a      	ldr	r2, [r7, #32]
 801d7ee:	683b      	ldr	r3, [r7, #0]
 801d7f0:	601a      	str	r2, [r3, #0]
  }

  bi_free(ctx, trim(bib)); /* put bib back to the way it was */
 801d7f2:	6878      	ldr	r0, [r7, #4]
 801d7f4:	f000 fe4d 	bl	801e492 <trim>
 801d7f8:	4603      	mov	r3, r0
 801d7fa:	4619      	mov	r1, r3
 801d7fc:	68f8      	ldr	r0, [r7, #12]
 801d7fe:	f7ff fef1 	bl	801d5e4 <bi_free>
  return trim(bia);
 801d802:	68b8      	ldr	r0, [r7, #8]
 801d804:	f000 fe45 	bl	801e492 <trim>
 801d808:	4603      	mov	r3, r0
}
 801d80a:	4618      	mov	r0, r3
 801d80c:	3730      	adds	r7, #48	@ 0x30
 801d80e:	46bd      	mov	sp, r7
 801d810:	bd80      	pop	{r7, pc}

0801d812 <bi_int_multiply>:

/**
 * Perform a multiply between a bigint an an (unsigned) integer
 */
static bigint *bi_int_multiply(BI_CTX *ctx, bigint *bia, comp b) {
 801d812:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801d816:	b094      	sub	sp, #80	@ 0x50
 801d818:	af00      	add	r7, sp, #0
 801d81a:	62f8      	str	r0, [r7, #44]	@ 0x2c
 801d81c:	62b9      	str	r1, [r7, #40]	@ 0x28
 801d81e:	627a      	str	r2, [r7, #36]	@ 0x24
  int j = 0, n = bia->size;
 801d820:	2300      	movs	r3, #0
 801d822:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801d824:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d826:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801d82a:	643b      	str	r3, [r7, #64]	@ 0x40
  bigint *biR = alloc(ctx, n + 1);
 801d82c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d82e:	3301      	adds	r3, #1
 801d830:	4619      	mov	r1, r3
 801d832:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801d834:	f000 fd7c 	bl	801e330 <alloc>
 801d838:	63f8      	str	r0, [r7, #60]	@ 0x3c
  comp carry = 0;
 801d83a:	2300      	movs	r3, #0
 801d83c:	64bb      	str	r3, [r7, #72]	@ 0x48
  comp *r = biR->comps;
 801d83e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801d840:	68db      	ldr	r3, [r3, #12]
 801d842:	647b      	str	r3, [r7, #68]	@ 0x44
  comp *a = bia->comps;
 801d844:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d846:	68db      	ldr	r3, [r3, #12]
 801d848:	63bb      	str	r3, [r7, #56]	@ 0x38

  check(bia);

  /* clear things to start with */
  memset(r, 0, (size_t) ((n + 1) * COMP_BYTE_SIZE));
 801d84a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d84c:	3301      	adds	r3, #1
 801d84e:	009b      	lsls	r3, r3, #2
 801d850:	461a      	mov	r2, r3
 801d852:	2100      	movs	r1, #0
 801d854:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 801d856:	f009 ff37 	bl	80276c8 <memset>

  do {
    long_comp tmp = *r + (long_comp) a[j] * b + carry;
 801d85a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801d85c:	681b      	ldr	r3, [r3, #0]
 801d85e:	2200      	movs	r2, #0
 801d860:	61bb      	str	r3, [r7, #24]
 801d862:	61fa      	str	r2, [r7, #28]
 801d864:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d866:	009a      	lsls	r2, r3, #2
 801d868:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d86a:	4413      	add	r3, r2
 801d86c:	681b      	ldr	r3, [r3, #0]
 801d86e:	2200      	movs	r2, #0
 801d870:	613b      	str	r3, [r7, #16]
 801d872:	617a      	str	r2, [r7, #20]
 801d874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d876:	2200      	movs	r2, #0
 801d878:	469a      	mov	sl, r3
 801d87a:	4693      	mov	fp, r2
 801d87c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801d880:	460b      	mov	r3, r1
 801d882:	fb0a f203 	mul.w	r2, sl, r3
 801d886:	4603      	mov	r3, r0
 801d888:	fb03 f30b 	mul.w	r3, r3, fp
 801d88c:	4413      	add	r3, r2
 801d88e:	4602      	mov	r2, r0
 801d890:	fba2 450a 	umull	r4, r5, r2, sl
 801d894:	442b      	add	r3, r5
 801d896:	461d      	mov	r5, r3
 801d898:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 801d89c:	460b      	mov	r3, r1
 801d89e:	eb13 0804 	adds.w	r8, r3, r4
 801d8a2:	4613      	mov	r3, r2
 801d8a4:	eb43 0905 	adc.w	r9, r3, r5
 801d8a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801d8aa:	2200      	movs	r2, #0
 801d8ac:	60bb      	str	r3, [r7, #8]
 801d8ae:	60fa      	str	r2, [r7, #12]
 801d8b0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 801d8b4:	460b      	mov	r3, r1
 801d8b6:	eb18 0303 	adds.w	r3, r8, r3
 801d8ba:	603b      	str	r3, [r7, #0]
 801d8bc:	4613      	mov	r3, r2
 801d8be:	eb49 0303 	adc.w	r3, r9, r3
 801d8c2:	607b      	str	r3, [r7, #4]
 801d8c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 801d8c8:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    *r++ = (comp) tmp; /* downsize */
 801d8cc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801d8ce:	1d13      	adds	r3, r2, #4
 801d8d0:	647b      	str	r3, [r7, #68]	@ 0x44
 801d8d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d8d4:	6013      	str	r3, [r2, #0]
    carry = (comp)(tmp >> COMP_BIT_SIZE);
 801d8d6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 801d8da:	f04f 0000 	mov.w	r0, #0
 801d8de:	f04f 0100 	mov.w	r1, #0
 801d8e2:	0018      	movs	r0, r3
 801d8e4:	2100      	movs	r1, #0
 801d8e6:	4603      	mov	r3, r0
 801d8e8:	64bb      	str	r3, [r7, #72]	@ 0x48
  } while (++j < n);
 801d8ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d8ec:	3301      	adds	r3, #1
 801d8ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801d8f0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801d8f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d8f4:	429a      	cmp	r2, r3
 801d8f6:	dbb0      	blt.n	801d85a <bi_int_multiply+0x48>

  *r = carry;
 801d8f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801d8fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801d8fc:	601a      	str	r2, [r3, #0]
  bi_free(ctx, bia);
 801d8fe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801d900:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801d902:	f7ff fe6f 	bl	801d5e4 <bi_free>
  return trim(biR);
 801d906:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 801d908:	f000 fdc3 	bl	801e492 <trim>
 801d90c:	4603      	mov	r3, r0
}
 801d90e:	4618      	mov	r0, r3
 801d910:	3750      	adds	r7, #80	@ 0x50
 801d912:	46bd      	mov	sp, r7
 801d914:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0801d918 <bi_divide>:
 * @param v [in]    Either the denominator or the modulus depending on the mode.
 * @param is_mod [n] Determines if this is a normal division (0) or a reduction
 * (1).
 * @return  The result of the division/reduction.
 */
NS_INTERNAL bigint *bi_divide(BI_CTX *ctx, bigint *u, bigint *v, int is_mod) {
 801d918:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801d91c:	b0a0      	sub	sp, #128	@ 0x80
 801d91e:	af00      	add	r7, sp, #0
 801d920:	64f8      	str	r0, [r7, #76]	@ 0x4c
 801d922:	64b9      	str	r1, [r7, #72]	@ 0x48
 801d924:	647a      	str	r2, [r7, #68]	@ 0x44
 801d926:	643b      	str	r3, [r7, #64]	@ 0x40
  int n = v->size, m = u->size - n;
 801d928:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801d92a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801d92e:	673b      	str	r3, [r7, #112]	@ 0x70
 801d930:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801d932:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801d936:	461a      	mov	r2, r3
 801d938:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801d93a:	1ad3      	subs	r3, r2, r3
 801d93c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  int j = 0, orig_u_size = u->size;
 801d93e:	2300      	movs	r3, #0
 801d940:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801d942:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801d944:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801d948:	66bb      	str	r3, [r7, #104]	@ 0x68
  uint8_t mod_offset = ctx->mod_offset;
 801d94a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d94c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801d950:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67

  check(u);
  check(v);

  /* if doing reduction and we are < mod, then return mod */
  if (is_mod && bi_compare(v, u) > 0) {
 801d954:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d956:	2b00      	cmp	r3, #0
 801d958:	d00c      	beq.n	801d974 <bi_divide+0x5c>
 801d95a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 801d95c:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 801d95e:	f000 fc36 	bl	801e1ce <bi_compare>
 801d962:	4603      	mov	r3, r0
 801d964:	2b00      	cmp	r3, #0
 801d966:	dd05      	ble.n	801d974 <bi_divide+0x5c>
    bi_free(ctx, v);
 801d968:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801d96a:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801d96c:	f7ff fe3a 	bl	801d5e4 <bi_free>
    return u;
 801d970:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801d972:	e1fe      	b.n	801dd72 <bi_divide+0x45a>
  }

  quotient = alloc(ctx, m + 1);
 801d974:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801d976:	3301      	adds	r3, #1
 801d978:	4619      	mov	r1, r3
 801d97a:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801d97c:	f000 fcd8 	bl	801e330 <alloc>
 801d980:	6638      	str	r0, [r7, #96]	@ 0x60
  tmp_u = alloc(ctx, n + 1);
 801d982:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801d984:	3301      	adds	r3, #1
 801d986:	4619      	mov	r1, r3
 801d988:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801d98a:	f000 fcd1 	bl	801e330 <alloc>
 801d98e:	67b8      	str	r0, [r7, #120]	@ 0x78
  v = trim(v); /* make sure we have no leading 0's */
 801d990:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 801d992:	f000 fd7e 	bl	801e492 <trim>
 801d996:	6478      	str	r0, [r7, #68]	@ 0x44
  d = (comp)((long_comp) COMP_RADIX / (V1 + 1));
 801d998:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801d99a:	68d9      	ldr	r1, [r3, #12]
 801d99c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801d99e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801d9a2:	461a      	mov	r2, r3
 801d9a4:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801d9a8:	4413      	add	r3, r2
 801d9aa:	009b      	lsls	r3, r3, #2
 801d9ac:	440b      	add	r3, r1
 801d9ae:	681b      	ldr	r3, [r3, #0]
 801d9b0:	3301      	adds	r3, #1
 801d9b2:	2200      	movs	r2, #0
 801d9b4:	461c      	mov	r4, r3
 801d9b6:	4615      	mov	r5, r2
 801d9b8:	4622      	mov	r2, r4
 801d9ba:	462b      	mov	r3, r5
 801d9bc:	f04f 0000 	mov.w	r0, #0
 801d9c0:	f04f 0101 	mov.w	r1, #1
 801d9c4:	f7e2 fec8 	bl	8000758 <__aeabi_uldivmod>
 801d9c8:	4602      	mov	r2, r0
 801d9ca:	460b      	mov	r3, r1
 801d9cc:	4613      	mov	r3, r2
 801d9ce:	65fb      	str	r3, [r7, #92]	@ 0x5c

  /* clear things to start with */
  memset(quotient->comps, 0, (size_t) ((quotient->size) * COMP_BYTE_SIZE));
 801d9d0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801d9d2:	68d8      	ldr	r0, [r3, #12]
 801d9d4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801d9d6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801d9da:	009b      	lsls	r3, r3, #2
 801d9dc:	461a      	mov	r2, r3
 801d9de:	2100      	movs	r1, #0
 801d9e0:	f009 fe72 	bl	80276c8 <memset>

  /* normalise */
  if (d > 1) {
 801d9e4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801d9e6:	2b01      	cmp	r3, #1
 801d9e8:	d916      	bls.n	801da18 <bi_divide+0x100>
    u = bi_int_multiply(ctx, u, d);
 801d9ea:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801d9ec:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 801d9ee:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801d9f0:	f7ff ff0f 	bl	801d812 <bi_int_multiply>
 801d9f4:	64b8      	str	r0, [r7, #72]	@ 0x48

    if (is_mod) {
 801d9f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d9f8:	2b00      	cmp	r3, #0
 801d9fa:	d007      	beq.n	801da0c <bi_divide+0xf4>
      v = ctx->bi_normalised_mod[mod_offset];
 801d9fc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801da00:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801da02:	3306      	adds	r3, #6
 801da04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801da08:	647b      	str	r3, [r7, #68]	@ 0x44
 801da0a:	e005      	b.n	801da18 <bi_divide+0x100>
    } else {
      v = bi_int_multiply(ctx, v, d);
 801da0c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801da0e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801da10:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801da12:	f7ff fefe 	bl	801d812 <bi_int_multiply>
 801da16:	6478      	str	r0, [r7, #68]	@ 0x44
    }
  }

  if (orig_u_size == u->size) /* new digit position u0 */
 801da18:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801da1a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801da1e:	461a      	mov	r2, r3
 801da20:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801da22:	4293      	cmp	r3, r2
 801da24:	d105      	bne.n	801da32 <bi_divide+0x11a>
  {
    more_comps(u, orig_u_size + 1);
 801da26:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801da28:	3301      	adds	r3, #1
 801da2a:	4619      	mov	r1, r3
 801da2c:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 801da2e:	f000 fc23 	bl	801e278 <more_comps>
  }

  do {
    /* get a temporary short version of u */
    memcpy(tmp_u->comps, &u->comps[u->size - n - 1 - j],
 801da32:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801da34:	68d8      	ldr	r0, [r3, #12]
 801da36:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801da38:	68d9      	ldr	r1, [r3, #12]
 801da3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801da3c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801da40:	461a      	mov	r2, r3
 801da42:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801da44:	1ad3      	subs	r3, r2, r3
 801da46:	1e5a      	subs	r2, r3, #1
 801da48:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801da4a:	1ad3      	subs	r3, r2, r3
 801da4c:	009b      	lsls	r3, r3, #2
 801da4e:	4419      	add	r1, r3
           (size_t) (n + 1) * COMP_BYTE_SIZE);
 801da50:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801da52:	3301      	adds	r3, #1
    memcpy(tmp_u->comps, &u->comps[u->size - n - 1 - j],
 801da54:	009b      	lsls	r3, r3, #2
 801da56:	461a      	mov	r2, r3
 801da58:	f009 ff6f 	bl	802793a <memcpy>

    /* calculate q' */
    if (U(0) == V1) {
 801da5c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801da5e:	68d9      	ldr	r1, [r3, #12]
 801da60:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801da62:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801da66:	461a      	mov	r2, r3
 801da68:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801da6c:	4413      	add	r3, r2
 801da6e:	009b      	lsls	r3, r3, #2
 801da70:	440b      	add	r3, r1
 801da72:	6818      	ldr	r0, [r3, #0]
 801da74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801da76:	68d9      	ldr	r1, [r3, #12]
 801da78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801da7a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801da7e:	461a      	mov	r2, r3
 801da80:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801da84:	4413      	add	r3, r2
 801da86:	009b      	lsls	r3, r3, #2
 801da88:	440b      	add	r3, r1
 801da8a:	681b      	ldr	r3, [r3, #0]
 801da8c:	4298      	cmp	r0, r3
 801da8e:	d103      	bne.n	801da98 <bi_divide+0x180>
      q_dash = COMP_RADIX - 1;
 801da90:	f04f 33ff 	mov.w	r3, #4294967295
 801da94:	677b      	str	r3, [r7, #116]	@ 0x74
 801da96:	e0c2      	b.n	801dc1e <bi_divide+0x306>
    } else {
      q_dash = (comp)(((long_comp) U(0) * COMP_RADIX + U(1)) / V1);
 801da98:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801da9a:	68d9      	ldr	r1, [r3, #12]
 801da9c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801da9e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801daa2:	461a      	mov	r2, r3
 801daa4:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801daa8:	4413      	add	r3, r2
 801daaa:	009b      	lsls	r3, r3, #2
 801daac:	440b      	add	r3, r1
 801daae:	681b      	ldr	r3, [r3, #0]
 801dab0:	2200      	movs	r2, #0
 801dab2:	633b      	str	r3, [r7, #48]	@ 0x30
 801dab4:	637a      	str	r2, [r7, #52]	@ 0x34
 801dab6:	f04f 0000 	mov.w	r0, #0
 801daba:	f04f 0100 	mov.w	r1, #0
 801dabe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801dac0:	0019      	movs	r1, r3
 801dac2:	2000      	movs	r0, #0
 801dac4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801dac6:	68dc      	ldr	r4, [r3, #12]
 801dac8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801daca:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801dace:	461a      	mov	r2, r3
 801dad0:	4baa      	ldr	r3, [pc, #680]	@ (801dd7c <bi_divide+0x464>)
 801dad2:	4413      	add	r3, r2
 801dad4:	009b      	lsls	r3, r3, #2
 801dad6:	4423      	add	r3, r4
 801dad8:	681b      	ldr	r3, [r3, #0]
 801dada:	2200      	movs	r2, #0
 801dadc:	62bb      	str	r3, [r7, #40]	@ 0x28
 801dade:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801dae0:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 801dae4:	4623      	mov	r3, r4
 801dae6:	18c3      	adds	r3, r0, r3
 801dae8:	623b      	str	r3, [r7, #32]
 801daea:	462b      	mov	r3, r5
 801daec:	eb41 0303 	adc.w	r3, r1, r3
 801daf0:	627b      	str	r3, [r7, #36]	@ 0x24
 801daf2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801daf4:	68d9      	ldr	r1, [r3, #12]
 801daf6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801daf8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801dafc:	461a      	mov	r2, r3
 801dafe:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801db02:	4413      	add	r3, r2
 801db04:	009b      	lsls	r3, r3, #2
 801db06:	440b      	add	r3, r1
 801db08:	681b      	ldr	r3, [r3, #0]
 801db0a:	2200      	movs	r2, #0
 801db0c:	61bb      	str	r3, [r7, #24]
 801db0e:	61fa      	str	r2, [r7, #28]
 801db10:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801db14:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 801db18:	f7e2 fe1e 	bl	8000758 <__aeabi_uldivmod>
 801db1c:	4602      	mov	r2, r0
 801db1e:	460b      	mov	r3, r1
 801db20:	4613      	mov	r3, r2
 801db22:	677b      	str	r3, [r7, #116]	@ 0x74

      if (v->size > 1 && V2) {
 801db24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801db26:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801db2a:	2b01      	cmp	r3, #1
 801db2c:	dd77      	ble.n	801dc1e <bi_divide+0x306>
 801db2e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801db30:	68d9      	ldr	r1, [r3, #12]
 801db32:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801db34:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801db38:	461a      	mov	r2, r3
 801db3a:	4b90      	ldr	r3, [pc, #576]	@ (801dd7c <bi_divide+0x464>)
 801db3c:	4413      	add	r3, r2
 801db3e:	009b      	lsls	r3, r3, #2
 801db40:	440b      	add	r3, r1
 801db42:	681b      	ldr	r3, [r3, #0]
 801db44:	2b00      	cmp	r3, #0
 801db46:	d06a      	beq.n	801dc1e <bi_divide+0x306>
        /* we are implementing the following:
        if (V2*q_dash > (((U(0)*COMP_RADIX + U(1) -
                q_dash*V1)*COMP_RADIX) + U(2))) ... */
        comp inner = (comp)((long_comp) COMP_RADIX * U(0) + U(1) -
 801db48:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801db4a:	68d9      	ldr	r1, [r3, #12]
 801db4c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801db4e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801db52:	461a      	mov	r2, r3
 801db54:	4b89      	ldr	r3, [pc, #548]	@ (801dd7c <bi_divide+0x464>)
 801db56:	4413      	add	r3, r2
 801db58:	009b      	lsls	r3, r3, #2
 801db5a:	440b      	add	r3, r1
 801db5c:	6818      	ldr	r0, [r3, #0]
                            (long_comp) q_dash * V1);
 801db5e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801db60:	68d9      	ldr	r1, [r3, #12]
 801db62:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801db64:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801db68:	461a      	mov	r2, r3
 801db6a:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801db6e:	4413      	add	r3, r2
 801db70:	009b      	lsls	r3, r3, #2
 801db72:	440b      	add	r3, r1
 801db74:	681a      	ldr	r2, [r3, #0]
 801db76:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801db78:	fb02 f303 	mul.w	r3, r2, r3
        comp inner = (comp)((long_comp) COMP_RADIX * U(0) + U(1) -
 801db7c:	1ac3      	subs	r3, r0, r3
 801db7e:	65bb      	str	r3, [r7, #88]	@ 0x58
        if ((long_comp) V2 * q_dash > (long_comp) inner * COMP_RADIX + U(2)) {
 801db80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801db82:	68d9      	ldr	r1, [r3, #12]
 801db84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801db86:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801db8a:	461a      	mov	r2, r3
 801db8c:	4b7b      	ldr	r3, [pc, #492]	@ (801dd7c <bi_divide+0x464>)
 801db8e:	4413      	add	r3, r2
 801db90:	009b      	lsls	r3, r3, #2
 801db92:	440b      	add	r3, r1
 801db94:	681b      	ldr	r3, [r3, #0]
 801db96:	2200      	movs	r2, #0
 801db98:	613b      	str	r3, [r7, #16]
 801db9a:	617a      	str	r2, [r7, #20]
 801db9c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801db9e:	2200      	movs	r2, #0
 801dba0:	63bb      	str	r3, [r7, #56]	@ 0x38
 801dba2:	63fa      	str	r2, [r7, #60]	@ 0x3c
 801dba4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 801dba8:	462b      	mov	r3, r5
 801dbaa:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 801dbae:	4602      	mov	r2, r0
 801dbb0:	fb02 f203 	mul.w	r2, r2, r3
 801dbb4:	e9c7 010e 	strd	r0, r1, [r7, #56]	@ 0x38
 801dbb8:	460b      	mov	r3, r1
 801dbba:	4621      	mov	r1, r4
 801dbbc:	fb01 f303 	mul.w	r3, r1, r3
 801dbc0:	4413      	add	r3, r2
 801dbc2:	4622      	mov	r2, r4
 801dbc4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801dbc6:	fba2 8901 	umull	r8, r9, r2, r1
 801dbca:	444b      	add	r3, r9
 801dbcc:	4699      	mov	r9, r3
 801dbce:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801dbd0:	2200      	movs	r2, #0
 801dbd2:	60bb      	str	r3, [r7, #8]
 801dbd4:	60fa      	str	r2, [r7, #12]
 801dbd6:	f04f 0000 	mov.w	r0, #0
 801dbda:	f04f 0100 	mov.w	r1, #0
 801dbde:	68bb      	ldr	r3, [r7, #8]
 801dbe0:	0019      	movs	r1, r3
 801dbe2:	2000      	movs	r0, #0
 801dbe4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801dbe6:	68dc      	ldr	r4, [r3, #12]
 801dbe8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801dbea:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801dbee:	461a      	mov	r2, r3
 801dbf0:	4b63      	ldr	r3, [pc, #396]	@ (801dd80 <bi_divide+0x468>)
 801dbf2:	4413      	add	r3, r2
 801dbf4:	009b      	lsls	r3, r3, #2
 801dbf6:	4423      	add	r3, r4
 801dbf8:	681b      	ldr	r3, [r3, #0]
 801dbfa:	2200      	movs	r2, #0
 801dbfc:	603b      	str	r3, [r7, #0]
 801dbfe:	607a      	str	r2, [r7, #4]
 801dc00:	e9d7 4500 	ldrd	r4, r5, [r7]
 801dc04:	4623      	mov	r3, r4
 801dc06:	eb10 0a03 	adds.w	sl, r0, r3
 801dc0a:	462b      	mov	r3, r5
 801dc0c:	eb41 0b03 	adc.w	fp, r1, r3
 801dc10:	45c2      	cmp	sl, r8
 801dc12:	eb7b 0309 	sbcs.w	r3, fp, r9
 801dc16:	d202      	bcs.n	801dc1e <bi_divide+0x306>
          q_dash--;
 801dc18:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801dc1a:	3b01      	subs	r3, #1
 801dc1c:	677b      	str	r3, [r7, #116]	@ 0x74
        }
      }
    }

    /* multiply and subtract */
    if (q_dash) {
 801dc1e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801dc20:	2b00      	cmp	r3, #0
 801dc22:	d057      	beq.n	801dcd4 <bi_divide+0x3bc>
      int is_negative;
      tmp_u = bi_subtract(ctx, tmp_u, bi_int_multiply(ctx, bi_copy(v), q_dash),
 801dc24:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 801dc26:	f7ff fc9d 	bl	801d564 <bi_copy>
 801dc2a:	4603      	mov	r3, r0
 801dc2c:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 801dc2e:	4619      	mov	r1, r3
 801dc30:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801dc32:	f7ff fdee 	bl	801d812 <bi_int_multiply>
 801dc36:	4602      	mov	r2, r0
 801dc38:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 801dc3c:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 801dc3e:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801dc40:	f7ff fd8f 	bl	801d762 <bi_subtract>
 801dc44:	67b8      	str	r0, [r7, #120]	@ 0x78
                          &is_negative);
      more_comps(tmp_u, n + 1);
 801dc46:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801dc48:	3301      	adds	r3, #1
 801dc4a:	4619      	mov	r1, r3
 801dc4c:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 801dc4e:	f000 fb13 	bl	801e278 <more_comps>

      Q(j) = q_dash;
 801dc52:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801dc54:	68d9      	ldr	r1, [r3, #12]
 801dc56:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801dc58:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801dc5c:	461a      	mov	r2, r3
 801dc5e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801dc60:	1ad3      	subs	r3, r2, r3
 801dc62:	461a      	mov	r2, r3
 801dc64:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801dc68:	4413      	add	r3, r2
 801dc6a:	009b      	lsls	r3, r3, #2
 801dc6c:	18ca      	adds	r2, r1, r3
 801dc6e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801dc70:	6013      	str	r3, [r2, #0]

      /* add back */
      if (is_negative) {
 801dc72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801dc74:	2b00      	cmp	r3, #0
 801dc76:	d03d      	beq.n	801dcf4 <bi_divide+0x3dc>
        Q(j)--;
 801dc78:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801dc7a:	68d9      	ldr	r1, [r3, #12]
 801dc7c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801dc7e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801dc82:	461a      	mov	r2, r3
 801dc84:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801dc86:	1ad3      	subs	r3, r2, r3
 801dc88:	461a      	mov	r2, r3
 801dc8a:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801dc8e:	4413      	add	r3, r2
 801dc90:	009b      	lsls	r3, r3, #2
 801dc92:	18ca      	adds	r2, r1, r3
 801dc94:	6813      	ldr	r3, [r2, #0]
 801dc96:	3b01      	subs	r3, #1
 801dc98:	6013      	str	r3, [r2, #0]
        tmp_u = bi_add(ctx, tmp_u, bi_copy(v));
 801dc9a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 801dc9c:	f7ff fc62 	bl	801d564 <bi_copy>
 801dca0:	4603      	mov	r3, r0
 801dca2:	461a      	mov	r2, r3
 801dca4:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 801dca6:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801dca8:	f7ff fcfe 	bl	801d6a8 <bi_add>
 801dcac:	67b8      	str	r0, [r7, #120]	@ 0x78

        /* lop off the carry */
        tmp_u->size--;
 801dcae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801dcb0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801dcb4:	b29b      	uxth	r3, r3
 801dcb6:	3b01      	subs	r3, #1
 801dcb8:	b29b      	uxth	r3, r3
 801dcba:	b21b      	sxth	r3, r3
 801dcbc:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 801dcbe:	8093      	strh	r3, [r2, #4]
        v->size--;
 801dcc0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801dcc2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801dcc6:	b29b      	uxth	r3, r3
 801dcc8:	3b01      	subs	r3, #1
 801dcca:	b29b      	uxth	r3, r3
 801dccc:	b21b      	sxth	r3, r3
 801dcce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801dcd0:	8093      	strh	r3, [r2, #4]
 801dcd2:	e00f      	b.n	801dcf4 <bi_divide+0x3dc>
      }
    } else {
      Q(j) = 0;
 801dcd4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801dcd6:	68d9      	ldr	r1, [r3, #12]
 801dcd8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801dcda:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801dcde:	461a      	mov	r2, r3
 801dce0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801dce2:	1ad3      	subs	r3, r2, r3
 801dce4:	461a      	mov	r2, r3
 801dce6:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801dcea:	4413      	add	r3, r2
 801dcec:	009b      	lsls	r3, r3, #2
 801dcee:	18ca      	adds	r2, r1, r3
 801dcf0:	2300      	movs	r3, #0
 801dcf2:	6013      	str	r3, [r2, #0]
    }

    /* copy back to u */
    memcpy(&u->comps[u->size - n - 1 - j], tmp_u->comps,
 801dcf4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801dcf6:	68d9      	ldr	r1, [r3, #12]
 801dcf8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801dcfa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801dcfe:	461a      	mov	r2, r3
 801dd00:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801dd02:	1ad3      	subs	r3, r2, r3
 801dd04:	1e5a      	subs	r2, r3, #1
 801dd06:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801dd08:	1ad3      	subs	r3, r2, r3
 801dd0a:	009b      	lsls	r3, r3, #2
 801dd0c:	18c8      	adds	r0, r1, r3
 801dd0e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801dd10:	68d9      	ldr	r1, [r3, #12]
           (size_t) (n + 1) * COMP_BYTE_SIZE);
 801dd12:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801dd14:	3301      	adds	r3, #1
    memcpy(&u->comps[u->size - n - 1 - j], tmp_u->comps,
 801dd16:	009b      	lsls	r3, r3, #2
 801dd18:	461a      	mov	r2, r3
 801dd1a:	f009 fe0e 	bl	802793a <memcpy>
  } while (++j <= m);
 801dd1e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801dd20:	3301      	adds	r3, #1
 801dd22:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801dd24:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 801dd26:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801dd28:	429a      	cmp	r2, r3
 801dd2a:	f77f ae82 	ble.w	801da32 <bi_divide+0x11a>

  bi_free(ctx, tmp_u);
 801dd2e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 801dd30:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801dd32:	f7ff fc57 	bl	801d5e4 <bi_free>
  bi_free(ctx, v);
 801dd36:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801dd38:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801dd3a:	f7ff fc53 	bl	801d5e4 <bi_free>

  if (is_mod) /* get the remainder */
 801dd3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801dd40:	2b00      	cmp	r3, #0
 801dd42:	d00e      	beq.n	801dd62 <bi_divide+0x44a>
  {
    bi_free(ctx, quotient);
 801dd44:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 801dd46:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801dd48:	f7ff fc4c 	bl	801d5e4 <bi_free>
    return bi_int_divide(ctx, trim(u), d);
 801dd4c:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 801dd4e:	f000 fba0 	bl	801e492 <trim>
 801dd52:	4603      	mov	r3, r0
 801dd54:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801dd56:	4619      	mov	r1, r3
 801dd58:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801dd5a:	f000 f813 	bl	801dd84 <bi_int_divide>
 801dd5e:	4603      	mov	r3, r0
 801dd60:	e007      	b.n	801dd72 <bi_divide+0x45a>
  } else /* get the quotient */
  {
    bi_free(ctx, u);
 801dd62:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 801dd64:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801dd66:	f7ff fc3d 	bl	801d5e4 <bi_free>
    return trim(quotient);
 801dd6a:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 801dd6c:	f000 fb91 	bl	801e492 <trim>
 801dd70:	4603      	mov	r3, r0
  }
}
 801dd72:	4618      	mov	r0, r3
 801dd74:	3780      	adds	r7, #128	@ 0x80
 801dd76:	46bd      	mov	sp, r7
 801dd78:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801dd7c:	3ffffffe 	.word	0x3ffffffe
 801dd80:	3ffffffd 	.word	0x3ffffffd

0801dd84 <bi_int_divide>:

/*
 * Perform an integer divide on a bigint.
 */
static bigint *bi_int_divide(BI_CTX *ctx, bigint *biR, comp denom) {
 801dd84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801dd88:	b08a      	sub	sp, #40	@ 0x28
 801dd8a:	af00      	add	r7, sp, #0
 801dd8c:	6178      	str	r0, [r7, #20]
 801dd8e:	6139      	str	r1, [r7, #16]
 801dd90:	60fa      	str	r2, [r7, #12]
  int i = biR->size - 1;
 801dd92:	693b      	ldr	r3, [r7, #16]
 801dd94:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801dd98:	3b01      	subs	r3, #1
 801dd9a:	627b      	str	r3, [r7, #36]	@ 0x24
  long_comp r = 0;
 801dd9c:	f04f 0200 	mov.w	r2, #0
 801dda0:	f04f 0300 	mov.w	r3, #0
 801dda4:	e9c7 2306 	strd	r2, r3, [r7, #24]

  (void) ctx;
  check(biR);

  do {
    r = (r << COMP_BIT_SIZE) + biR->comps[i];
 801dda8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 801ddac:	f04f 0200 	mov.w	r2, #0
 801ddb0:	f04f 0300 	mov.w	r3, #0
 801ddb4:	0003      	movs	r3, r0
 801ddb6:	2200      	movs	r2, #0
 801ddb8:	6939      	ldr	r1, [r7, #16]
 801ddba:	68c8      	ldr	r0, [r1, #12]
 801ddbc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801ddbe:	0089      	lsls	r1, r1, #2
 801ddc0:	4401      	add	r1, r0
 801ddc2:	6809      	ldr	r1, [r1, #0]
 801ddc4:	2000      	movs	r0, #0
 801ddc6:	460c      	mov	r4, r1
 801ddc8:	4605      	mov	r5, r0
 801ddca:	eb12 0804 	adds.w	r8, r2, r4
 801ddce:	eb43 0905 	adc.w	r9, r3, r5
 801ddd2:	e9c7 8906 	strd	r8, r9, [r7, #24]
    biR->comps[i] = (comp)(r / denom);
 801ddd6:	68fb      	ldr	r3, [r7, #12]
 801ddd8:	2200      	movs	r2, #0
 801ddda:	603b      	str	r3, [r7, #0]
 801dddc:	607a      	str	r2, [r7, #4]
 801ddde:	e9d7 2300 	ldrd	r2, r3, [r7]
 801dde2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 801dde6:	f7e2 fcb7 	bl	8000758 <__aeabi_uldivmod>
 801ddea:	4602      	mov	r2, r0
 801ddec:	460b      	mov	r3, r1
 801ddee:	4610      	mov	r0, r2
 801ddf0:	4619      	mov	r1, r3
 801ddf2:	693b      	ldr	r3, [r7, #16]
 801ddf4:	68da      	ldr	r2, [r3, #12]
 801ddf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ddf8:	009b      	lsls	r3, r3, #2
 801ddfa:	4413      	add	r3, r2
 801ddfc:	4602      	mov	r2, r0
 801ddfe:	601a      	str	r2, [r3, #0]
    r %= denom;
 801de00:	68fb      	ldr	r3, [r7, #12]
 801de02:	2200      	movs	r2, #0
 801de04:	469a      	mov	sl, r3
 801de06:	4693      	mov	fp, r2
 801de08:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 801de0c:	4652      	mov	r2, sl
 801de0e:	465b      	mov	r3, fp
 801de10:	f7e2 fca2 	bl	8000758 <__aeabi_uldivmod>
 801de14:	e9c7 2306 	strd	r2, r3, [r7, #24]
  } while (--i >= 0);
 801de18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801de1a:	3b01      	subs	r3, #1
 801de1c:	627b      	str	r3, [r7, #36]	@ 0x24
 801de1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801de20:	2b00      	cmp	r3, #0
 801de22:	dac1      	bge.n	801dda8 <bi_int_divide+0x24>

  return trim(biR);
 801de24:	6938      	ldr	r0, [r7, #16]
 801de26:	f000 fb34 	bl	801e492 <trim>
 801de2a:	4603      	mov	r3, r0
}
 801de2c:	4618      	mov	r0, r3
 801de2e:	3728      	adds	r7, #40	@ 0x28
 801de30:	46bd      	mov	sp, r7
 801de32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0801de36 <bi_import>:
 * @param ctx [in]  The bigint session context.
 * @param data [in] The data to be converted.
 * @param size [in] The number of bytes of data.
 * @return A bigint representing this data.
 */
NS_INTERNAL bigint *bi_import(BI_CTX *ctx, const uint8_t *data, int size) {
 801de36:	b580      	push	{r7, lr}
 801de38:	b088      	sub	sp, #32
 801de3a:	af00      	add	r7, sp, #0
 801de3c:	60f8      	str	r0, [r7, #12]
 801de3e:	60b9      	str	r1, [r7, #8]
 801de40:	607a      	str	r2, [r7, #4]
  bigint *biR = alloc(ctx, (size + COMP_BYTE_SIZE - 1) / COMP_BYTE_SIZE);
 801de42:	687b      	ldr	r3, [r7, #4]
 801de44:	3303      	adds	r3, #3
 801de46:	2b00      	cmp	r3, #0
 801de48:	da00      	bge.n	801de4c <bi_import+0x16>
 801de4a:	3303      	adds	r3, #3
 801de4c:	109b      	asrs	r3, r3, #2
 801de4e:	4619      	mov	r1, r3
 801de50:	68f8      	ldr	r0, [r7, #12]
 801de52:	f000 fa6d 	bl	801e330 <alloc>
 801de56:	6138      	str	r0, [r7, #16]
  int i, j = 0, offset = 0;
 801de58:	2300      	movs	r3, #0
 801de5a:	61bb      	str	r3, [r7, #24]
 801de5c:	2300      	movs	r3, #0
 801de5e:	617b      	str	r3, [r7, #20]

  memset(biR->comps, 0, (size_t) (biR->size * COMP_BYTE_SIZE));
 801de60:	693b      	ldr	r3, [r7, #16]
 801de62:	68d8      	ldr	r0, [r3, #12]
 801de64:	693b      	ldr	r3, [r7, #16]
 801de66:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801de6a:	009b      	lsls	r3, r3, #2
 801de6c:	461a      	mov	r2, r3
 801de6e:	2100      	movs	r1, #0
 801de70:	f009 fc2a 	bl	80276c8 <memset>

  for (i = size - 1; i >= 0; i--) {
 801de74:	687b      	ldr	r3, [r7, #4]
 801de76:	3b01      	subs	r3, #1
 801de78:	61fb      	str	r3, [r7, #28]
 801de7a:	e022      	b.n	801dec2 <bi_import+0x8c>
    biR->comps[offset] += (comp) data[i] << (j * 8);
 801de7c:	693b      	ldr	r3, [r7, #16]
 801de7e:	68da      	ldr	r2, [r3, #12]
 801de80:	697b      	ldr	r3, [r7, #20]
 801de82:	009b      	lsls	r3, r3, #2
 801de84:	4413      	add	r3, r2
 801de86:	6819      	ldr	r1, [r3, #0]
 801de88:	69fb      	ldr	r3, [r7, #28]
 801de8a:	68ba      	ldr	r2, [r7, #8]
 801de8c:	4413      	add	r3, r2
 801de8e:	781b      	ldrb	r3, [r3, #0]
 801de90:	461a      	mov	r2, r3
 801de92:	69bb      	ldr	r3, [r7, #24]
 801de94:	00db      	lsls	r3, r3, #3
 801de96:	409a      	lsls	r2, r3
 801de98:	693b      	ldr	r3, [r7, #16]
 801de9a:	68d8      	ldr	r0, [r3, #12]
 801de9c:	697b      	ldr	r3, [r7, #20]
 801de9e:	009b      	lsls	r3, r3, #2
 801dea0:	4403      	add	r3, r0
 801dea2:	440a      	add	r2, r1
 801dea4:	601a      	str	r2, [r3, #0]

    if (++j == COMP_BYTE_SIZE) {
 801dea6:	69bb      	ldr	r3, [r7, #24]
 801dea8:	3301      	adds	r3, #1
 801deaa:	61bb      	str	r3, [r7, #24]
 801deac:	69bb      	ldr	r3, [r7, #24]
 801deae:	2b04      	cmp	r3, #4
 801deb0:	d104      	bne.n	801debc <bi_import+0x86>
      j = 0;
 801deb2:	2300      	movs	r3, #0
 801deb4:	61bb      	str	r3, [r7, #24]
      offset++;
 801deb6:	697b      	ldr	r3, [r7, #20]
 801deb8:	3301      	adds	r3, #1
 801deba:	617b      	str	r3, [r7, #20]
  for (i = size - 1; i >= 0; i--) {
 801debc:	69fb      	ldr	r3, [r7, #28]
 801debe:	3b01      	subs	r3, #1
 801dec0:	61fb      	str	r3, [r7, #28]
 801dec2:	69fb      	ldr	r3, [r7, #28]
 801dec4:	2b00      	cmp	r3, #0
 801dec6:	dad9      	bge.n	801de7c <bi_import+0x46>
    }
  }

  return trim(biR);
 801dec8:	6938      	ldr	r0, [r7, #16]
 801deca:	f000 fae2 	bl	801e492 <trim>
 801dece:	4603      	mov	r3, r0
}
 801ded0:	4618      	mov	r0, r3
 801ded2:	3720      	adds	r7, #32
 801ded4:	46bd      	mov	sp, r7
 801ded6:	bd80      	pop	{r7, pc}

0801ded8 <bi_export>:
 * @param x [in]  The bigint to be converted.
 * @param data [out] The converted data as a byte stream.
 * @param size [in] The maximum size of the byte stream. Unused bytes will be
 * zeroed.
 */
NS_INTERNAL void bi_export(BI_CTX *ctx, bigint *x, uint8_t *data, int size) {
 801ded8:	b580      	push	{r7, lr}
 801deda:	b08a      	sub	sp, #40	@ 0x28
 801dedc:	af00      	add	r7, sp, #0
 801dede:	60f8      	str	r0, [r7, #12]
 801dee0:	60b9      	str	r1, [r7, #8]
 801dee2:	607a      	str	r2, [r7, #4]
 801dee4:	603b      	str	r3, [r7, #0]
  int i, j, k = size - 1;
 801dee6:	683b      	ldr	r3, [r7, #0]
 801dee8:	3b01      	subs	r3, #1
 801deea:	61fb      	str	r3, [r7, #28]

  check(x);
  memset(data, 0, (size_t) size); /* ensure all leading 0's are cleared */
 801deec:	683b      	ldr	r3, [r7, #0]
 801deee:	461a      	mov	r2, r3
 801def0:	2100      	movs	r1, #0
 801def2:	6878      	ldr	r0, [r7, #4]
 801def4:	f009 fbe8 	bl	80276c8 <memset>

  for (i = 0; i < x->size; i++) {
 801def8:	2300      	movs	r3, #0
 801defa:	627b      	str	r3, [r7, #36]	@ 0x24
 801defc:	e02b      	b.n	801df56 <bi_export+0x7e>
    for (j = 0; j < COMP_BYTE_SIZE; j++) {
 801defe:	2300      	movs	r3, #0
 801df00:	623b      	str	r3, [r7, #32]
 801df02:	e022      	b.n	801df4a <bi_export+0x72>
      comp mask = (comp) 0xff << (j * 8);
 801df04:	6a3b      	ldr	r3, [r7, #32]
 801df06:	00db      	lsls	r3, r3, #3
 801df08:	22ff      	movs	r2, #255	@ 0xff
 801df0a:	fa02 f303 	lsl.w	r3, r2, r3
 801df0e:	61bb      	str	r3, [r7, #24]
      int num = (int) (x->comps[i] & mask) >> (j * 8);
 801df10:	68bb      	ldr	r3, [r7, #8]
 801df12:	68da      	ldr	r2, [r3, #12]
 801df14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801df16:	009b      	lsls	r3, r3, #2
 801df18:	4413      	add	r3, r2
 801df1a:	681a      	ldr	r2, [r3, #0]
 801df1c:	69bb      	ldr	r3, [r7, #24]
 801df1e:	4013      	ands	r3, r2
 801df20:	461a      	mov	r2, r3
 801df22:	6a3b      	ldr	r3, [r7, #32]
 801df24:	00db      	lsls	r3, r3, #3
 801df26:	fa42 f303 	asr.w	r3, r2, r3
 801df2a:	617b      	str	r3, [r7, #20]
      data[k--] = (uint8_t) num;
 801df2c:	69fb      	ldr	r3, [r7, #28]
 801df2e:	1e5a      	subs	r2, r3, #1
 801df30:	61fa      	str	r2, [r7, #28]
 801df32:	461a      	mov	r2, r3
 801df34:	687b      	ldr	r3, [r7, #4]
 801df36:	4413      	add	r3, r2
 801df38:	697a      	ldr	r2, [r7, #20]
 801df3a:	b2d2      	uxtb	r2, r2
 801df3c:	701a      	strb	r2, [r3, #0]

      if (k < 0) {
 801df3e:	69fb      	ldr	r3, [r7, #28]
 801df40:	2b00      	cmp	r3, #0
 801df42:	db10      	blt.n	801df66 <bi_export+0x8e>
    for (j = 0; j < COMP_BYTE_SIZE; j++) {
 801df44:	6a3b      	ldr	r3, [r7, #32]
 801df46:	3301      	adds	r3, #1
 801df48:	623b      	str	r3, [r7, #32]
 801df4a:	6a3b      	ldr	r3, [r7, #32]
 801df4c:	2b03      	cmp	r3, #3
 801df4e:	ddd9      	ble.n	801df04 <bi_export+0x2c>
  for (i = 0; i < x->size; i++) {
 801df50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801df52:	3301      	adds	r3, #1
 801df54:	627b      	str	r3, [r7, #36]	@ 0x24
 801df56:	68bb      	ldr	r3, [r7, #8]
 801df58:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801df5c:	461a      	mov	r2, r3
 801df5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801df60:	4293      	cmp	r3, r2
 801df62:	dbcc      	blt.n	801defe <bi_export+0x26>
        goto buf_done;
      }
    }
  }
buf_done:
 801df64:	e000      	b.n	801df68 <bi_export+0x90>
        goto buf_done;
 801df66:	bf00      	nop

  bi_free(ctx, x);
 801df68:	68b9      	ldr	r1, [r7, #8]
 801df6a:	68f8      	ldr	r0, [r7, #12]
 801df6c:	f7ff fb3a 	bl	801d5e4 <bi_free>
}
 801df70:	bf00      	nop
 801df72:	3728      	adds	r7, #40	@ 0x28
 801df74:	46bd      	mov	sp, r7
 801df76:	bd80      	pop	{r7, pc}

0801df78 <bi_set_mod>:
 * @param mod_offset [in] There are three moduluii that can be stored - the
 * standard modulus, and its two primes p and q. This offset refers to which
 * modulus we are referring to.
 * @see bi_free_mod(), bi_mod_power().
 */
NS_INTERNAL void bi_set_mod(BI_CTX *ctx, bigint *bim, int mod_offset) {
 801df78:	b5b0      	push	{r4, r5, r7, lr}
 801df7a:	b086      	sub	sp, #24
 801df7c:	af00      	add	r7, sp, #0
 801df7e:	60f8      	str	r0, [r7, #12]
 801df80:	60b9      	str	r1, [r7, #8]
 801df82:	607a      	str	r2, [r7, #4]
  int k = bim->size;
 801df84:	68bb      	ldr	r3, [r7, #8]
 801df86:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801df8a:	617b      	str	r3, [r7, #20]
  comp d = (comp)((long_comp) COMP_RADIX / (bim->comps[k - 1] + 1));
 801df8c:	68bb      	ldr	r3, [r7, #8]
 801df8e:	68da      	ldr	r2, [r3, #12]
 801df90:	6979      	ldr	r1, [r7, #20]
 801df92:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801df96:	440b      	add	r3, r1
 801df98:	009b      	lsls	r3, r3, #2
 801df9a:	4413      	add	r3, r2
 801df9c:	681b      	ldr	r3, [r3, #0]
 801df9e:	3301      	adds	r3, #1
 801dfa0:	2200      	movs	r2, #0
 801dfa2:	461c      	mov	r4, r3
 801dfa4:	4615      	mov	r5, r2
 801dfa6:	4622      	mov	r2, r4
 801dfa8:	462b      	mov	r3, r5
 801dfaa:	f04f 0000 	mov.w	r0, #0
 801dfae:	f04f 0101 	mov.w	r1, #1
 801dfb2:	f7e2 fbd1 	bl	8000758 <__aeabi_uldivmod>
 801dfb6:	4602      	mov	r2, r0
 801dfb8:	460b      	mov	r3, r1
 801dfba:	4613      	mov	r3, r2
 801dfbc:	613b      	str	r3, [r7, #16]
#ifdef CONFIG_BIGINT_MONTGOMERY
  bigint *R, *R2;
#endif

  ctx->bi_mod[mod_offset] = bim;
 801dfbe:	68fa      	ldr	r2, [r7, #12]
 801dfc0:	687b      	ldr	r3, [r7, #4]
 801dfc2:	3302      	adds	r3, #2
 801dfc4:	009b      	lsls	r3, r3, #2
 801dfc6:	4413      	add	r3, r2
 801dfc8:	68ba      	ldr	r2, [r7, #8]
 801dfca:	605a      	str	r2, [r3, #4]
  bi_permanent(ctx->bi_mod[mod_offset]);
 801dfcc:	68fa      	ldr	r2, [r7, #12]
 801dfce:	687b      	ldr	r3, [r7, #4]
 801dfd0:	3302      	adds	r3, #2
 801dfd2:	009b      	lsls	r3, r3, #2
 801dfd4:	4413      	add	r3, r2
 801dfd6:	685b      	ldr	r3, [r3, #4]
 801dfd8:	4618      	mov	r0, r3
 801dfda:	f7ff fadb 	bl	801d594 <bi_permanent>
  ctx->bi_normalised_mod[mod_offset] = bi_int_multiply(ctx, bim, d);
 801dfde:	693a      	ldr	r2, [r7, #16]
 801dfe0:	68b9      	ldr	r1, [r7, #8]
 801dfe2:	68f8      	ldr	r0, [r7, #12]
 801dfe4:	f7ff fc15 	bl	801d812 <bi_int_multiply>
 801dfe8:	4601      	mov	r1, r0
 801dfea:	68fb      	ldr	r3, [r7, #12]
 801dfec:	687a      	ldr	r2, [r7, #4]
 801dfee:	3206      	adds	r2, #6
 801dff0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  bi_permanent(ctx->bi_normalised_mod[mod_offset]);
 801dff4:	68fb      	ldr	r3, [r7, #12]
 801dff6:	687a      	ldr	r2, [r7, #4]
 801dff8:	3206      	adds	r2, #6
 801dffa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801dffe:	4618      	mov	r0, r3
 801e000:	f7ff fac8 	bl	801d594 <bi_permanent>
  ctx->bi_mu[mod_offset] =
      bi_divide(ctx, comp_left_shift(bi_clone(ctx, ctx->bi_radix), k * 2 - 1),
                ctx->bi_mod[mod_offset], 0);
  bi_permanent(ctx->bi_mu[mod_offset]);
#endif
}
 801e004:	bf00      	nop
 801e006:	3718      	adds	r7, #24
 801e008:	46bd      	mov	sp, r7
 801e00a:	bdb0      	pop	{r4, r5, r7, pc}

0801e00c <regular_multiply>:
 * Barrett reduction has no need for some parts of the product, so ignore bits
 * of the multiply. This routine gives Barrett its big performance
 * improvements over Classical/Montgomery reduction methods.
 */
static bigint *regular_multiply(BI_CTX *ctx, bigint *bia, bigint *bib,
                                int inner_partial, int outer_partial) {
 801e00c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801e010:	b098      	sub	sp, #96	@ 0x60
 801e012:	af00      	add	r7, sp, #0
 801e014:	62f8      	str	r0, [r7, #44]	@ 0x2c
 801e016:	62b9      	str	r1, [r7, #40]	@ 0x28
 801e018:	627a      	str	r2, [r7, #36]	@ 0x24
 801e01a:	623b      	str	r3, [r7, #32]
  int i = 0, j;
 801e01c:	2300      	movs	r3, #0
 801e01e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  int n = bia->size;
 801e020:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e022:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801e026:	64fb      	str	r3, [r7, #76]	@ 0x4c
  int t = bib->size;
 801e028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e02a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801e02e:	64bb      	str	r3, [r7, #72]	@ 0x48
  bigint *biR = alloc(ctx, n + t);
 801e030:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801e032:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801e034:	4413      	add	r3, r2
 801e036:	4619      	mov	r1, r3
 801e038:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801e03a:	f000 f979 	bl	801e330 <alloc>
 801e03e:	6478      	str	r0, [r7, #68]	@ 0x44
  comp *sr = biR->comps;
 801e040:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801e042:	68db      	ldr	r3, [r3, #12]
 801e044:	643b      	str	r3, [r7, #64]	@ 0x40
  comp *sa = bia->comps;
 801e046:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e048:	68db      	ldr	r3, [r3, #12]
 801e04a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  comp *sb = bib->comps;
 801e04c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e04e:	68db      	ldr	r3, [r3, #12]
 801e050:	63bb      	str	r3, [r7, #56]	@ 0x38

  check(bia);
  check(bib);

  /* clear things to start with */
  memset(biR->comps, 0, (size_t) ((n + t) * COMP_BYTE_SIZE));
 801e052:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801e054:	68d8      	ldr	r0, [r3, #12]
 801e056:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801e058:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801e05a:	4413      	add	r3, r2
 801e05c:	009b      	lsls	r3, r3, #2
 801e05e:	461a      	mov	r2, r3
 801e060:	2100      	movs	r1, #0
 801e062:	f009 fb31 	bl	80276c8 <memset>

  do {
    long_comp tmp;
    comp carry = 0;
 801e066:	2300      	movs	r3, #0
 801e068:	657b      	str	r3, [r7, #84]	@ 0x54
    int r_index = i;
 801e06a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801e06c:	653b      	str	r3, [r7, #80]	@ 0x50
    j = 0;
 801e06e:	2300      	movs	r3, #0
 801e070:	65bb      	str	r3, [r7, #88]	@ 0x58

    if (outer_partial && outer_partial - i > 0 && outer_partial < n) {
 801e072:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801e076:	2b00      	cmp	r3, #0
 801e078:	d014      	beq.n	801e0a4 <regular_multiply+0x98>
 801e07a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801e07e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801e080:	1ad3      	subs	r3, r2, r3
 801e082:	2b00      	cmp	r3, #0
 801e084:	dd0e      	ble.n	801e0a4 <regular_multiply+0x98>
 801e086:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801e08a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801e08c:	429a      	cmp	r2, r3
 801e08e:	da09      	bge.n	801e0a4 <regular_multiply+0x98>
      r_index = outer_partial - 1;
 801e090:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801e094:	3b01      	subs	r3, #1
 801e096:	653b      	str	r3, [r7, #80]	@ 0x50
      j = outer_partial - i - 1;
 801e098:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801e09c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801e09e:	1ad3      	subs	r3, r2, r3
 801e0a0:	3b01      	subs	r3, #1
 801e0a2:	65bb      	str	r3, [r7, #88]	@ 0x58
    }

    do {
      if (inner_partial && r_index >= inner_partial) {
 801e0a4:	6a3b      	ldr	r3, [r7, #32]
 801e0a6:	2b00      	cmp	r3, #0
 801e0a8:	d003      	beq.n	801e0b2 <regular_multiply+0xa6>
 801e0aa:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801e0ac:	6a3b      	ldr	r3, [r7, #32]
 801e0ae:	429a      	cmp	r2, r3
 801e0b0:	da5a      	bge.n	801e168 <regular_multiply+0x15c>
        break;
      }

      tmp = sr[r_index] + ((long_comp) sa[j]) * sb[i] + carry;
 801e0b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801e0b4:	009a      	lsls	r2, r3, #2
 801e0b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801e0b8:	4413      	add	r3, r2
 801e0ba:	681b      	ldr	r3, [r3, #0]
 801e0bc:	2200      	movs	r2, #0
 801e0be:	61bb      	str	r3, [r7, #24]
 801e0c0:	61fa      	str	r2, [r7, #28]
 801e0c2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801e0c4:	009a      	lsls	r2, r3, #2
 801e0c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801e0c8:	4413      	add	r3, r2
 801e0ca:	681b      	ldr	r3, [r3, #0]
 801e0cc:	2200      	movs	r2, #0
 801e0ce:	469a      	mov	sl, r3
 801e0d0:	4693      	mov	fp, r2
 801e0d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801e0d4:	009a      	lsls	r2, r3, #2
 801e0d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e0d8:	4413      	add	r3, r2
 801e0da:	681b      	ldr	r3, [r3, #0]
 801e0dc:	2200      	movs	r2, #0
 801e0de:	613b      	str	r3, [r7, #16]
 801e0e0:	617a      	str	r2, [r7, #20]
 801e0e2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801e0e6:	4603      	mov	r3, r0
 801e0e8:	fb03 f20b 	mul.w	r2, r3, fp
 801e0ec:	460b      	mov	r3, r1
 801e0ee:	fb0a f303 	mul.w	r3, sl, r3
 801e0f2:	4413      	add	r3, r2
 801e0f4:	4602      	mov	r2, r0
 801e0f6:	fbaa 4502 	umull	r4, r5, sl, r2
 801e0fa:	442b      	add	r3, r5
 801e0fc:	461d      	mov	r5, r3
 801e0fe:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 801e102:	460b      	mov	r3, r1
 801e104:	eb13 0804 	adds.w	r8, r3, r4
 801e108:	4613      	mov	r3, r2
 801e10a:	eb43 0905 	adc.w	r9, r3, r5
 801e10e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801e110:	2200      	movs	r2, #0
 801e112:	60bb      	str	r3, [r7, #8]
 801e114:	60fa      	str	r2, [r7, #12]
 801e116:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 801e11a:	460b      	mov	r3, r1
 801e11c:	eb18 0303 	adds.w	r3, r8, r3
 801e120:	603b      	str	r3, [r7, #0]
 801e122:	4613      	mov	r3, r2
 801e124:	eb49 0303 	adc.w	r3, r9, r3
 801e128:	607b      	str	r3, [r7, #4]
 801e12a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801e12e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
      sr[r_index++] = (comp) tmp; /* downsize */
 801e132:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801e134:	1c53      	adds	r3, r2, #1
 801e136:	653b      	str	r3, [r7, #80]	@ 0x50
 801e138:	4613      	mov	r3, r2
 801e13a:	009a      	lsls	r2, r3, #2
 801e13c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801e13e:	441a      	add	r2, r3
 801e140:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e142:	6013      	str	r3, [r2, #0]
      carry = (comp) (tmp >> COMP_BIT_SIZE);
 801e144:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 801e148:	f04f 0000 	mov.w	r0, #0
 801e14c:	f04f 0100 	mov.w	r1, #0
 801e150:	0018      	movs	r0, r3
 801e152:	2100      	movs	r1, #0
 801e154:	4603      	mov	r3, r0
 801e156:	657b      	str	r3, [r7, #84]	@ 0x54
    } while (++j < n);
 801e158:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801e15a:	3301      	adds	r3, #1
 801e15c:	65bb      	str	r3, [r7, #88]	@ 0x58
 801e15e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801e160:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801e162:	429a      	cmp	r2, r3
 801e164:	db9e      	blt.n	801e0a4 <regular_multiply+0x98>
 801e166:	e000      	b.n	801e16a <regular_multiply+0x15e>
        break;
 801e168:	bf00      	nop

    sr[r_index] = carry;
 801e16a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801e16c:	009a      	lsls	r2, r3, #2
 801e16e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801e170:	441a      	add	r2, r3
 801e172:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801e174:	6013      	str	r3, [r2, #0]
  } while (++i < t);
 801e176:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801e178:	3301      	adds	r3, #1
 801e17a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801e17c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801e17e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801e180:	429a      	cmp	r2, r3
 801e182:	f6ff af70 	blt.w	801e066 <regular_multiply+0x5a>

  bi_free(ctx, bia);
 801e186:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801e188:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801e18a:	f7ff fa2b 	bl	801d5e4 <bi_free>
  bi_free(ctx, bib);
 801e18e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801e190:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801e192:	f7ff fa27 	bl	801d5e4 <bi_free>
  return trim(biR);
 801e196:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 801e198:	f000 f97b 	bl	801e492 <trim>
 801e19c:	4603      	mov	r3, r0
}
 801e19e:	4618      	mov	r0, r3
 801e1a0:	3760      	adds	r7, #96	@ 0x60
 801e1a2:	46bd      	mov	sp, r7
 801e1a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0801e1a8 <bi_multiply>:
 * @param ctx [in]  The bigint session context.
 * @param bia [in]  A bigint.
 * @param bib [in]  Another bigint.
 * @return The result of the multiplication.
 */
NS_INTERNAL bigint *bi_multiply(BI_CTX *ctx, bigint *bia, bigint *bib) {
 801e1a8:	b580      	push	{r7, lr}
 801e1aa:	b086      	sub	sp, #24
 801e1ac:	af02      	add	r7, sp, #8
 801e1ae:	60f8      	str	r0, [r7, #12]
 801e1b0:	60b9      	str	r1, [r7, #8]
 801e1b2:	607a      	str	r2, [r7, #4]
    return regular_multiply(ctx, bia, bib, 0, 0);
  }

  return karatsuba(ctx, bia, bib, 0);
#else
  return regular_multiply(ctx, bia, bib, 0, 0);
 801e1b4:	2300      	movs	r3, #0
 801e1b6:	9300      	str	r3, [sp, #0]
 801e1b8:	2300      	movs	r3, #0
 801e1ba:	687a      	ldr	r2, [r7, #4]
 801e1bc:	68b9      	ldr	r1, [r7, #8]
 801e1be:	68f8      	ldr	r0, [r7, #12]
 801e1c0:	f7ff ff24 	bl	801e00c <regular_multiply>
 801e1c4:	4603      	mov	r3, r0
#endif
}
 801e1c6:	4618      	mov	r0, r3
 801e1c8:	3710      	adds	r7, #16
 801e1ca:	46bd      	mov	sp, r7
 801e1cc:	bd80      	pop	{r7, pc}

0801e1ce <bi_compare>:
 * @brief Compare two bigints.
 * @param bia [in]  A bigint.
 * @param bib [in]  Another bigint.
 * @return -1 if smaller, 1 if larger and 0 if equal.
 */
NS_INTERNAL int bi_compare(bigint *bia, bigint *bib) {
 801e1ce:	b480      	push	{r7}
 801e1d0:	b087      	sub	sp, #28
 801e1d2:	af00      	add	r7, sp, #0
 801e1d4:	6078      	str	r0, [r7, #4]
 801e1d6:	6039      	str	r1, [r7, #0]
  int r, i;

  check(bia);
  check(bib);

  if (bia->size > bib->size)
 801e1d8:	687b      	ldr	r3, [r7, #4]
 801e1da:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 801e1de:	683b      	ldr	r3, [r7, #0]
 801e1e0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801e1e4:	429a      	cmp	r2, r3
 801e1e6:	dd02      	ble.n	801e1ee <bi_compare+0x20>
    r = 1;
 801e1e8:	2301      	movs	r3, #1
 801e1ea:	617b      	str	r3, [r7, #20]
 801e1ec:	e03d      	b.n	801e26a <bi_compare+0x9c>
  else if (bia->size < bib->size)
 801e1ee:	687b      	ldr	r3, [r7, #4]
 801e1f0:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 801e1f4:	683b      	ldr	r3, [r7, #0]
 801e1f6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801e1fa:	429a      	cmp	r2, r3
 801e1fc:	da03      	bge.n	801e206 <bi_compare+0x38>
    r = -1;
 801e1fe:	f04f 33ff 	mov.w	r3, #4294967295
 801e202:	617b      	str	r3, [r7, #20]
 801e204:	e031      	b.n	801e26a <bi_compare+0x9c>
  else {
    comp *a = bia->comps;
 801e206:	687b      	ldr	r3, [r7, #4]
 801e208:	68db      	ldr	r3, [r3, #12]
 801e20a:	60fb      	str	r3, [r7, #12]
    comp *b = bib->comps;
 801e20c:	683b      	ldr	r3, [r7, #0]
 801e20e:	68db      	ldr	r3, [r3, #12]
 801e210:	60bb      	str	r3, [r7, #8]

    /* Same number of components.  Compare starting from the high end
     * and working down. */
    r = 0;
 801e212:	2300      	movs	r3, #0
 801e214:	617b      	str	r3, [r7, #20]
    i = bia->size - 1;
 801e216:	687b      	ldr	r3, [r7, #4]
 801e218:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801e21c:	3b01      	subs	r3, #1
 801e21e:	613b      	str	r3, [r7, #16]

    do {
      if (a[i] > b[i]) {
 801e220:	693b      	ldr	r3, [r7, #16]
 801e222:	009b      	lsls	r3, r3, #2
 801e224:	68fa      	ldr	r2, [r7, #12]
 801e226:	4413      	add	r3, r2
 801e228:	681a      	ldr	r2, [r3, #0]
 801e22a:	693b      	ldr	r3, [r7, #16]
 801e22c:	009b      	lsls	r3, r3, #2
 801e22e:	68b9      	ldr	r1, [r7, #8]
 801e230:	440b      	add	r3, r1
 801e232:	681b      	ldr	r3, [r3, #0]
 801e234:	429a      	cmp	r2, r3
 801e236:	d902      	bls.n	801e23e <bi_compare+0x70>
        r = 1;
 801e238:	2301      	movs	r3, #1
 801e23a:	617b      	str	r3, [r7, #20]
        break;
 801e23c:	e015      	b.n	801e26a <bi_compare+0x9c>
      } else if (a[i] < b[i]) {
 801e23e:	693b      	ldr	r3, [r7, #16]
 801e240:	009b      	lsls	r3, r3, #2
 801e242:	68fa      	ldr	r2, [r7, #12]
 801e244:	4413      	add	r3, r2
 801e246:	681a      	ldr	r2, [r3, #0]
 801e248:	693b      	ldr	r3, [r7, #16]
 801e24a:	009b      	lsls	r3, r3, #2
 801e24c:	68b9      	ldr	r1, [r7, #8]
 801e24e:	440b      	add	r3, r1
 801e250:	681b      	ldr	r3, [r3, #0]
 801e252:	429a      	cmp	r2, r3
 801e254:	d203      	bcs.n	801e25e <bi_compare+0x90>
        r = -1;
 801e256:	f04f 33ff 	mov.w	r3, #4294967295
 801e25a:	617b      	str	r3, [r7, #20]
        break;
 801e25c:	e005      	b.n	801e26a <bi_compare+0x9c>
      }
    } while (--i >= 0);
 801e25e:	693b      	ldr	r3, [r7, #16]
 801e260:	3b01      	subs	r3, #1
 801e262:	613b      	str	r3, [r7, #16]
 801e264:	693b      	ldr	r3, [r7, #16]
 801e266:	2b00      	cmp	r3, #0
 801e268:	dada      	bge.n	801e220 <bi_compare+0x52>
  }

  return r;
 801e26a:	697b      	ldr	r3, [r7, #20]
}
 801e26c:	4618      	mov	r0, r3
 801e26e:	371c      	adds	r7, #28
 801e270:	46bd      	mov	sp, r7
 801e272:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e276:	4770      	bx	lr

0801e278 <more_comps>:

/*
 * Allocate and zero more components.  Does not consume bi.
 */
static void more_comps(bigint *bi, int n) {
 801e278:	b580      	push	{r7, lr}
 801e27a:	b084      	sub	sp, #16
 801e27c:	af00      	add	r7, sp, #0
 801e27e:	6078      	str	r0, [r7, #4]
 801e280:	6039      	str	r1, [r7, #0]
  if (n > bi->max_comps) {
 801e282:	687b      	ldr	r3, [r7, #4]
 801e284:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801e288:	461a      	mov	r2, r3
 801e28a:	683b      	ldr	r3, [r7, #0]
 801e28c:	4293      	cmp	r3, r2
 801e28e:	dd2e      	ble.n	801e2ee <more_comps+0x76>
    int max = MAX(bi->max_comps * 2, n);
 801e290:	687b      	ldr	r3, [r7, #4]
 801e292:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801e296:	005b      	lsls	r3, r3, #1
 801e298:	683a      	ldr	r2, [r7, #0]
 801e29a:	4293      	cmp	r3, r2
 801e29c:	bfb8      	it	lt
 801e29e:	4613      	movlt	r3, r2
 801e2a0:	60fb      	str	r3, [r7, #12]
    void *p = calloc(1, (size_t) max * COMP_BYTE_SIZE);
 801e2a2:	68fb      	ldr	r3, [r7, #12]
 801e2a4:	009b      	lsls	r3, r3, #2
 801e2a6:	4619      	mov	r1, r3
 801e2a8:	2001      	movs	r0, #1
 801e2aa:	f007 fb5f 	bl	802596c <calloc>
 801e2ae:	4603      	mov	r3, r0
 801e2b0:	60bb      	str	r3, [r7, #8]
    if (p != NULL && bi->size > 0) memcpy(p, bi->comps, (size_t) bi->max_comps * COMP_BYTE_SIZE);
 801e2b2:	68bb      	ldr	r3, [r7, #8]
 801e2b4:	2b00      	cmp	r3, #0
 801e2b6:	d00e      	beq.n	801e2d6 <more_comps+0x5e>
 801e2b8:	687b      	ldr	r3, [r7, #4]
 801e2ba:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801e2be:	2b00      	cmp	r3, #0
 801e2c0:	dd09      	ble.n	801e2d6 <more_comps+0x5e>
 801e2c2:	687b      	ldr	r3, [r7, #4]
 801e2c4:	68d9      	ldr	r1, [r3, #12]
 801e2c6:	687b      	ldr	r3, [r7, #4]
 801e2c8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801e2cc:	009b      	lsls	r3, r3, #2
 801e2ce:	461a      	mov	r2, r3
 801e2d0:	68b8      	ldr	r0, [r7, #8]
 801e2d2:	f009 fb32 	bl	802793a <memcpy>
    free(bi->comps);
 801e2d6:	687b      	ldr	r3, [r7, #4]
 801e2d8:	68db      	ldr	r3, [r3, #12]
 801e2da:	4618      	mov	r0, r3
 801e2dc:	f007 fb6a 	bl	80259b4 <free>
    bi->max_comps = (short) max;
 801e2e0:	68fb      	ldr	r3, [r7, #12]
 801e2e2:	b21a      	sxth	r2, r3
 801e2e4:	687b      	ldr	r3, [r7, #4]
 801e2e6:	80da      	strh	r2, [r3, #6]
    bi->comps = (comp *) p;
 801e2e8:	687b      	ldr	r3, [r7, #4]
 801e2ea:	68ba      	ldr	r2, [r7, #8]
 801e2ec:	60da      	str	r2, [r3, #12]
  }

  if (n > bi->size) {
 801e2ee:	687b      	ldr	r3, [r7, #4]
 801e2f0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801e2f4:	461a      	mov	r2, r3
 801e2f6:	683b      	ldr	r3, [r7, #0]
 801e2f8:	4293      	cmp	r3, r2
 801e2fa:	dd11      	ble.n	801e320 <more_comps+0xa8>
    memset(&bi->comps[bi->size], 0, (size_t) (n - bi->size) * COMP_BYTE_SIZE);
 801e2fc:	687b      	ldr	r3, [r7, #4]
 801e2fe:	68da      	ldr	r2, [r3, #12]
 801e300:	687b      	ldr	r3, [r7, #4]
 801e302:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801e306:	009b      	lsls	r3, r3, #2
 801e308:	18d0      	adds	r0, r2, r3
 801e30a:	687b      	ldr	r3, [r7, #4]
 801e30c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801e310:	461a      	mov	r2, r3
 801e312:	683b      	ldr	r3, [r7, #0]
 801e314:	1a9b      	subs	r3, r3, r2
 801e316:	009b      	lsls	r3, r3, #2
 801e318:	461a      	mov	r2, r3
 801e31a:	2100      	movs	r1, #0
 801e31c:	f009 f9d4 	bl	80276c8 <memset>
  }

  bi->size = (short) n;
 801e320:	683b      	ldr	r3, [r7, #0]
 801e322:	b21a      	sxth	r2, r3
 801e324:	687b      	ldr	r3, [r7, #4]
 801e326:	809a      	strh	r2, [r3, #4]
}
 801e328:	bf00      	nop
 801e32a:	3710      	adds	r7, #16
 801e32c:	46bd      	mov	sp, r7
 801e32e:	bd80      	pop	{r7, pc}

0801e330 <alloc>:

/*
 * Make a new empty bigint. It may just use an old one if one is available.
 * Otherwise get one off the heap.
 */
static bigint *alloc(BI_CTX *ctx, int size) {
 801e330:	b580      	push	{r7, lr}
 801e332:	b084      	sub	sp, #16
 801e334:	af00      	add	r7, sp, #0
 801e336:	6078      	str	r0, [r7, #4]
 801e338:	6039      	str	r1, [r7, #0]
  bigint *biR;

  /* Can we recycle an old bigint? */
  if (ctx->free_list != NULL) {
 801e33a:	687b      	ldr	r3, [r7, #4]
 801e33c:	685b      	ldr	r3, [r3, #4]
 801e33e:	2b00      	cmp	r3, #0
 801e340:	d016      	beq.n	801e370 <alloc+0x40>
    biR = ctx->free_list;
 801e342:	687b      	ldr	r3, [r7, #4]
 801e344:	685b      	ldr	r3, [r3, #4]
 801e346:	60fb      	str	r3, [r7, #12]
    ctx->free_list = biR->next;
 801e348:	68fb      	ldr	r3, [r7, #12]
 801e34a:	681a      	ldr	r2, [r3, #0]
 801e34c:	687b      	ldr	r3, [r7, #4]
 801e34e:	605a      	str	r2, [r3, #4]
    ctx->free_count--;
 801e350:	687b      	ldr	r3, [r7, #4]
 801e352:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801e354:	1e5a      	subs	r2, r3, #1
 801e356:	687b      	ldr	r3, [r7, #4]
 801e358:	631a      	str	r2, [r3, #48]	@ 0x30

    if (biR->refs != 0) {
 801e35a:	68fb      	ldr	r3, [r7, #12]
 801e35c:	689b      	ldr	r3, [r3, #8]
 801e35e:	2b00      	cmp	r3, #0
 801e360:	d001      	beq.n	801e366 <alloc+0x36>
#ifdef CONFIG_SSL_FULL_MODE
      printf("alloc: refs was not 0\n");
#endif
      abort(); /* create a stack trace from a core dump */
 801e362:	f007 fad5 	bl	8025910 <abort>
    }

    more_comps(biR, size);
 801e366:	6839      	ldr	r1, [r7, #0]
 801e368:	68f8      	ldr	r0, [r7, #12]
 801e36a:	f7ff ff85 	bl	801e278 <more_comps>
 801e36e:	e013      	b.n	801e398 <alloc+0x68>
  } else {
    /* No free bigints available - create a new one. */
    biR = (bigint *) calloc(1, sizeof(bigint));
 801e370:	2110      	movs	r1, #16
 801e372:	2001      	movs	r0, #1
 801e374:	f007 fafa 	bl	802596c <calloc>
 801e378:	4603      	mov	r3, r0
 801e37a:	60fb      	str	r3, [r7, #12]
    biR->comps = (comp *) calloc(1, (size_t) size * COMP_BYTE_SIZE);
 801e37c:	683b      	ldr	r3, [r7, #0]
 801e37e:	009b      	lsls	r3, r3, #2
 801e380:	4619      	mov	r1, r3
 801e382:	2001      	movs	r0, #1
 801e384:	f007 faf2 	bl	802596c <calloc>
 801e388:	4603      	mov	r3, r0
 801e38a:	461a      	mov	r2, r3
 801e38c:	68fb      	ldr	r3, [r7, #12]
 801e38e:	60da      	str	r2, [r3, #12]
    biR->max_comps = (short) size; /* give some space to spare */
 801e390:	683b      	ldr	r3, [r7, #0]
 801e392:	b21a      	sxth	r2, r3
 801e394:	68fb      	ldr	r3, [r7, #12]
 801e396:	80da      	strh	r2, [r3, #6]
  }

  biR->size = (short) size;
 801e398:	683b      	ldr	r3, [r7, #0]
 801e39a:	b21a      	sxth	r2, r3
 801e39c:	68fb      	ldr	r3, [r7, #12]
 801e39e:	809a      	strh	r2, [r3, #4]
  biR->refs = 1;
 801e3a0:	68fb      	ldr	r3, [r7, #12]
 801e3a2:	2201      	movs	r2, #1
 801e3a4:	609a      	str	r2, [r3, #8]
  biR->next = NULL;
 801e3a6:	68fb      	ldr	r3, [r7, #12]
 801e3a8:	2200      	movs	r2, #0
 801e3aa:	601a      	str	r2, [r3, #0]
  ctx->active_count++;
 801e3ac:	687b      	ldr	r3, [r7, #4]
 801e3ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e3b0:	1c5a      	adds	r2, r3, #1
 801e3b2:	687b      	ldr	r3, [r7, #4]
 801e3b4:	62da      	str	r2, [r3, #44]	@ 0x2c
  return biR;
 801e3b6:	68fb      	ldr	r3, [r7, #12]
}
 801e3b8:	4618      	mov	r0, r3
 801e3ba:	3710      	adds	r7, #16
 801e3bc:	46bd      	mov	sp, r7
 801e3be:	bd80      	pop	{r7, pc}

0801e3c0 <find_max_exp_index>:

/*
 * Work out the highest '1' bit in an exponent. Used when doing sliding-window
 * exponentiation.
 */
static int find_max_exp_index(bigint *biexp) {
 801e3c0:	b480      	push	{r7}
 801e3c2:	b087      	sub	sp, #28
 801e3c4:	af00      	add	r7, sp, #0
 801e3c6:	6078      	str	r0, [r7, #4]
  int i = COMP_BIT_SIZE - 1;
 801e3c8:	231f      	movs	r3, #31
 801e3ca:	617b      	str	r3, [r7, #20]
  comp shift = COMP_RADIX / 2;
 801e3cc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 801e3d0:	613b      	str	r3, [r7, #16]
  comp test = biexp->comps[biexp->size - 1]; /* assume no leading zeroes */
 801e3d2:	687b      	ldr	r3, [r7, #4]
 801e3d4:	68da      	ldr	r2, [r3, #12]
 801e3d6:	687b      	ldr	r3, [r7, #4]
 801e3d8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801e3dc:	4619      	mov	r1, r3
 801e3de:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801e3e2:	440b      	add	r3, r1
 801e3e4:	009b      	lsls	r3, r3, #2
 801e3e6:	4413      	add	r3, r2
 801e3e8:	681b      	ldr	r3, [r3, #0]
 801e3ea:	60fb      	str	r3, [r7, #12]

  check(biexp);

  do {
    if (test & shift) {
 801e3ec:	68fa      	ldr	r2, [r7, #12]
 801e3ee:	693b      	ldr	r3, [r7, #16]
 801e3f0:	4013      	ands	r3, r2
 801e3f2:	2b00      	cmp	r3, #0
 801e3f4:	d007      	beq.n	801e406 <find_max_exp_index+0x46>
      return i + (biexp->size - 1) * COMP_BIT_SIZE;
 801e3f6:	687b      	ldr	r3, [r7, #4]
 801e3f8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801e3fc:	3b01      	subs	r3, #1
 801e3fe:	015a      	lsls	r2, r3, #5
 801e400:	697b      	ldr	r3, [r7, #20]
 801e402:	4413      	add	r3, r2
 801e404:	e009      	b.n	801e41a <find_max_exp_index+0x5a>
    }

    shift >>= 1;
 801e406:	693b      	ldr	r3, [r7, #16]
 801e408:	085b      	lsrs	r3, r3, #1
 801e40a:	613b      	str	r3, [r7, #16]
  } while (i-- != 0);
 801e40c:	697b      	ldr	r3, [r7, #20]
 801e40e:	1e5a      	subs	r2, r3, #1
 801e410:	617a      	str	r2, [r7, #20]
 801e412:	2b00      	cmp	r3, #0
 801e414:	d1ea      	bne.n	801e3ec <find_max_exp_index+0x2c>

  return -1; /* error - must have been a leading 0 */
 801e416:	f04f 33ff 	mov.w	r3, #4294967295
}
 801e41a:	4618      	mov	r0, r3
 801e41c:	371c      	adds	r7, #28
 801e41e:	46bd      	mov	sp, r7
 801e420:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e424:	4770      	bx	lr

0801e426 <exp_bit_is_one>:

/*
 * Is a particular bit is an exponent 1 or 0? Used when doing sliding-window
 * exponentiation.
 */
static int exp_bit_is_one(bigint *biexp, int offset) {
 801e426:	b480      	push	{r7}
 801e428:	b087      	sub	sp, #28
 801e42a:	af00      	add	r7, sp, #0
 801e42c:	6078      	str	r0, [r7, #4]
 801e42e:	6039      	str	r1, [r7, #0]
  comp test = biexp->comps[offset / COMP_BIT_SIZE];
 801e430:	687b      	ldr	r3, [r7, #4]
 801e432:	68da      	ldr	r2, [r3, #12]
 801e434:	683b      	ldr	r3, [r7, #0]
 801e436:	2b00      	cmp	r3, #0
 801e438:	da00      	bge.n	801e43c <exp_bit_is_one+0x16>
 801e43a:	331f      	adds	r3, #31
 801e43c:	115b      	asrs	r3, r3, #5
 801e43e:	009b      	lsls	r3, r3, #2
 801e440:	4413      	add	r3, r2
 801e442:	681b      	ldr	r3, [r3, #0]
 801e444:	60fb      	str	r3, [r7, #12]
  int num_shifts = offset % COMP_BIT_SIZE;
 801e446:	683b      	ldr	r3, [r7, #0]
 801e448:	425a      	negs	r2, r3
 801e44a:	f003 031f 	and.w	r3, r3, #31
 801e44e:	f002 021f 	and.w	r2, r2, #31
 801e452:	bf58      	it	pl
 801e454:	4253      	negpl	r3, r2
 801e456:	60bb      	str	r3, [r7, #8]
  comp shift = 1;
 801e458:	2301      	movs	r3, #1
 801e45a:	617b      	str	r3, [r7, #20]
  int i;

  check(biexp);

  for (i = 0; i < num_shifts; i++) {
 801e45c:	2300      	movs	r3, #0
 801e45e:	613b      	str	r3, [r7, #16]
 801e460:	e005      	b.n	801e46e <exp_bit_is_one+0x48>
    shift <<= 1;
 801e462:	697b      	ldr	r3, [r7, #20]
 801e464:	005b      	lsls	r3, r3, #1
 801e466:	617b      	str	r3, [r7, #20]
  for (i = 0; i < num_shifts; i++) {
 801e468:	693b      	ldr	r3, [r7, #16]
 801e46a:	3301      	adds	r3, #1
 801e46c:	613b      	str	r3, [r7, #16]
 801e46e:	693a      	ldr	r2, [r7, #16]
 801e470:	68bb      	ldr	r3, [r7, #8]
 801e472:	429a      	cmp	r2, r3
 801e474:	dbf5      	blt.n	801e462 <exp_bit_is_one+0x3c>
  }

  return (test & shift) != 0;
 801e476:	68fa      	ldr	r2, [r7, #12]
 801e478:	697b      	ldr	r3, [r7, #20]
 801e47a:	4013      	ands	r3, r2
 801e47c:	2b00      	cmp	r3, #0
 801e47e:	bf14      	ite	ne
 801e480:	2301      	movne	r3, #1
 801e482:	2300      	moveq	r3, #0
 801e484:	b2db      	uxtb	r3, r3
}
 801e486:	4618      	mov	r0, r3
 801e488:	371c      	adds	r7, #28
 801e48a:	46bd      	mov	sp, r7
 801e48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e490:	4770      	bx	lr

0801e492 <trim>:
#endif

/*
 * Delete any leading 0's (and allow for 0).
 */
static bigint *trim(bigint *bi) {
 801e492:	b480      	push	{r7}
 801e494:	b083      	sub	sp, #12
 801e496:	af00      	add	r7, sp, #0
 801e498:	6078      	str	r0, [r7, #4]
  check(bi);

  while (bi->comps[bi->size - 1] == 0 && bi->size > 1) {
 801e49a:	e008      	b.n	801e4ae <trim+0x1c>
    bi->size--;
 801e49c:	687b      	ldr	r3, [r7, #4]
 801e49e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801e4a2:	b29b      	uxth	r3, r3
 801e4a4:	3b01      	subs	r3, #1
 801e4a6:	b29b      	uxth	r3, r3
 801e4a8:	b21a      	sxth	r2, r3
 801e4aa:	687b      	ldr	r3, [r7, #4]
 801e4ac:	809a      	strh	r2, [r3, #4]
  while (bi->comps[bi->size - 1] == 0 && bi->size > 1) {
 801e4ae:	687b      	ldr	r3, [r7, #4]
 801e4b0:	68da      	ldr	r2, [r3, #12]
 801e4b2:	687b      	ldr	r3, [r7, #4]
 801e4b4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801e4b8:	4619      	mov	r1, r3
 801e4ba:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801e4be:	440b      	add	r3, r1
 801e4c0:	009b      	lsls	r3, r3, #2
 801e4c2:	4413      	add	r3, r2
 801e4c4:	681b      	ldr	r3, [r3, #0]
 801e4c6:	2b00      	cmp	r3, #0
 801e4c8:	d104      	bne.n	801e4d4 <trim+0x42>
 801e4ca:	687b      	ldr	r3, [r7, #4]
 801e4cc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801e4d0:	2b01      	cmp	r3, #1
 801e4d2:	dce3      	bgt.n	801e49c <trim+0xa>
  }

  return bi;
 801e4d4:	687b      	ldr	r3, [r7, #4]
}
 801e4d6:	4618      	mov	r0, r3
 801e4d8:	370c      	adds	r7, #12
 801e4da:	46bd      	mov	sp, r7
 801e4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e4e0:	4770      	bx	lr

0801e4e2 <bi_mod_power>:
 * @param bi  [in]  The bigint on which to perform the mod power operation.
 * @param biexp [in] The bigint exponent.
 * @return The result of the mod exponentiation operation
 * @see bi_set_mod().
 */
NS_INTERNAL bigint *bi_mod_power(BI_CTX *ctx, bigint *bi, bigint *biexp) {
 801e4e2:	b590      	push	{r4, r7, lr}
 801e4e4:	b08b      	sub	sp, #44	@ 0x2c
 801e4e6:	af00      	add	r7, sp, #0
 801e4e8:	60f8      	str	r0, [r7, #12]
 801e4ea:	60b9      	str	r1, [r7, #8]
 801e4ec:	607a      	str	r2, [r7, #4]
  int i = find_max_exp_index(biexp), j, window_size = 1;
 801e4ee:	6878      	ldr	r0, [r7, #4]
 801e4f0:	f7ff ff66 	bl	801e3c0 <find_max_exp_index>
 801e4f4:	6278      	str	r0, [r7, #36]	@ 0x24
 801e4f6:	2301      	movs	r3, #1
 801e4f8:	613b      	str	r3, [r7, #16]
  bigint *biR = int_to_bi(ctx, 1);
 801e4fa:	2101      	movs	r1, #1
 801e4fc:	68f8      	ldr	r0, [r7, #12]
 801e4fe:	f7ff f8a3 	bl	801d648 <int_to_bi>
 801e502:	61f8      	str	r0, [r7, #28]
    window_size++;

  /* work out the slide constants */
  precompute_slide_window(ctx, window_size, bi);
#else /* just one constant */
  ctx->g = (bigint **) calloc(1, sizeof(bigint *));
 801e504:	2104      	movs	r1, #4
 801e506:	2001      	movs	r0, #1
 801e508:	f007 fa30 	bl	802596c <calloc>
 801e50c:	4603      	mov	r3, r0
 801e50e:	461a      	mov	r2, r3
 801e510:	68fb      	ldr	r3, [r7, #12]
 801e512:	625a      	str	r2, [r3, #36]	@ 0x24
  ctx->g[0] = bi_clone(ctx, bi);
 801e514:	68fb      	ldr	r3, [r7, #12]
 801e516:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 801e518:	68b9      	ldr	r1, [r7, #8]
 801e51a:	68f8      	ldr	r0, [r7, #12]
 801e51c:	f7ff f8a7 	bl	801d66e <bi_clone>
 801e520:	4603      	mov	r3, r0
 801e522:	6023      	str	r3, [r4, #0]
  ctx->window = 1;
 801e524:	68fb      	ldr	r3, [r7, #12]
 801e526:	2201      	movs	r2, #1
 801e528:	629a      	str	r2, [r3, #40]	@ 0x28
  bi_permanent(ctx->g[0]);
 801e52a:	68fb      	ldr	r3, [r7, #12]
 801e52c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e52e:	681b      	ldr	r3, [r3, #0]
 801e530:	4618      	mov	r0, r3
 801e532:	f7ff f82f 	bl	801d594 <bi_permanent>
#endif

  /* if sliding-window is off, then only one bit will be done at a time and
   * will reduce to standard left-to-right exponentiation */
  do {
    if (exp_bit_is_one(biexp, i)) {
 801e536:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801e538:	6878      	ldr	r0, [r7, #4]
 801e53a:	f7ff ff74 	bl	801e426 <exp_bit_is_one>
 801e53e:	4603      	mov	r3, r0
 801e540:	2b00      	cmp	r3, #0
 801e542:	d06c      	beq.n	801e61e <bi_mod_power+0x13c>
      int l = i - window_size + 1;
 801e544:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801e546:	693b      	ldr	r3, [r7, #16]
 801e548:	1ad3      	subs	r3, r2, r3
 801e54a:	3301      	adds	r3, #1
 801e54c:	61bb      	str	r3, [r7, #24]
      int part_exp = 0;
 801e54e:	2300      	movs	r3, #0
 801e550:	617b      	str	r3, [r7, #20]

      if (l < 0) /* LSB of exponent will always be 1 */
 801e552:	69bb      	ldr	r3, [r7, #24]
 801e554:	2b00      	cmp	r3, #0
 801e556:	da05      	bge.n	801e564 <bi_mod_power+0x82>
        l = 0;
 801e558:	2300      	movs	r3, #0
 801e55a:	61bb      	str	r3, [r7, #24]
 801e55c:	e009      	b.n	801e572 <bi_mod_power+0x90>
      else {
        while (exp_bit_is_one(biexp, l) == 0) l++; /* go back up */
 801e55e:	69bb      	ldr	r3, [r7, #24]
 801e560:	3301      	adds	r3, #1
 801e562:	61bb      	str	r3, [r7, #24]
 801e564:	69b9      	ldr	r1, [r7, #24]
 801e566:	6878      	ldr	r0, [r7, #4]
 801e568:	f7ff ff5d 	bl	801e426 <exp_bit_is_one>
 801e56c:	4603      	mov	r3, r0
 801e56e:	2b00      	cmp	r3, #0
 801e570:	d0f5      	beq.n	801e55e <bi_mod_power+0x7c>
      }

      /* build up the section of the exponent */
      for (j = i; j >= l; j--) {
 801e572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e574:	623b      	str	r3, [r7, #32]
 801e576:	e02a      	b.n	801e5ce <bi_mod_power+0xec>
        biR = bi_residue(ctx, bi_square(ctx, biR));
 801e578:	69f8      	ldr	r0, [r7, #28]
 801e57a:	f7fe fff3 	bl	801d564 <bi_copy>
 801e57e:	4603      	mov	r3, r0
 801e580:	69fa      	ldr	r2, [r7, #28]
 801e582:	4619      	mov	r1, r3
 801e584:	68f8      	ldr	r0, [r7, #12]
 801e586:	f7ff fe0f 	bl	801e1a8 <bi_multiply>
 801e58a:	4601      	mov	r1, r0
 801e58c:	68fb      	ldr	r3, [r7, #12]
 801e58e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801e592:	68fa      	ldr	r2, [r7, #12]
 801e594:	3302      	adds	r3, #2
 801e596:	009b      	lsls	r3, r3, #2
 801e598:	4413      	add	r3, r2
 801e59a:	685a      	ldr	r2, [r3, #4]
 801e59c:	2301      	movs	r3, #1
 801e59e:	68f8      	ldr	r0, [r7, #12]
 801e5a0:	f7ff f9ba 	bl	801d918 <bi_divide>
 801e5a4:	61f8      	str	r0, [r7, #28]
        if (exp_bit_is_one(biexp, j)) part_exp++;
 801e5a6:	6a39      	ldr	r1, [r7, #32]
 801e5a8:	6878      	ldr	r0, [r7, #4]
 801e5aa:	f7ff ff3c 	bl	801e426 <exp_bit_is_one>
 801e5ae:	4603      	mov	r3, r0
 801e5b0:	2b00      	cmp	r3, #0
 801e5b2:	d002      	beq.n	801e5ba <bi_mod_power+0xd8>
 801e5b4:	697b      	ldr	r3, [r7, #20]
 801e5b6:	3301      	adds	r3, #1
 801e5b8:	617b      	str	r3, [r7, #20]

        if (j != l) part_exp <<= 1;
 801e5ba:	6a3a      	ldr	r2, [r7, #32]
 801e5bc:	69bb      	ldr	r3, [r7, #24]
 801e5be:	429a      	cmp	r2, r3
 801e5c0:	d002      	beq.n	801e5c8 <bi_mod_power+0xe6>
 801e5c2:	697b      	ldr	r3, [r7, #20]
 801e5c4:	005b      	lsls	r3, r3, #1
 801e5c6:	617b      	str	r3, [r7, #20]
      for (j = i; j >= l; j--) {
 801e5c8:	6a3b      	ldr	r3, [r7, #32]
 801e5ca:	3b01      	subs	r3, #1
 801e5cc:	623b      	str	r3, [r7, #32]
 801e5ce:	6a3a      	ldr	r2, [r7, #32]
 801e5d0:	69bb      	ldr	r3, [r7, #24]
 801e5d2:	429a      	cmp	r2, r3
 801e5d4:	dad0      	bge.n	801e578 <bi_mod_power+0x96>
      }

      part_exp = (part_exp - 1) / 2; /* adjust for array */
 801e5d6:	697b      	ldr	r3, [r7, #20]
 801e5d8:	3b01      	subs	r3, #1
 801e5da:	2b00      	cmp	r3, #0
 801e5dc:	da00      	bge.n	801e5e0 <bi_mod_power+0xfe>
 801e5de:	3301      	adds	r3, #1
 801e5e0:	105b      	asrs	r3, r3, #1
 801e5e2:	617b      	str	r3, [r7, #20]
      biR = bi_residue(ctx, bi_multiply(ctx, biR, ctx->g[part_exp]));
 801e5e4:	68fb      	ldr	r3, [r7, #12]
 801e5e6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801e5e8:	697b      	ldr	r3, [r7, #20]
 801e5ea:	009b      	lsls	r3, r3, #2
 801e5ec:	4413      	add	r3, r2
 801e5ee:	681b      	ldr	r3, [r3, #0]
 801e5f0:	461a      	mov	r2, r3
 801e5f2:	69f9      	ldr	r1, [r7, #28]
 801e5f4:	68f8      	ldr	r0, [r7, #12]
 801e5f6:	f7ff fdd7 	bl	801e1a8 <bi_multiply>
 801e5fa:	4601      	mov	r1, r0
 801e5fc:	68fb      	ldr	r3, [r7, #12]
 801e5fe:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801e602:	68fa      	ldr	r2, [r7, #12]
 801e604:	3302      	adds	r3, #2
 801e606:	009b      	lsls	r3, r3, #2
 801e608:	4413      	add	r3, r2
 801e60a:	685a      	ldr	r2, [r3, #4]
 801e60c:	2301      	movs	r3, #1
 801e60e:	68f8      	ldr	r0, [r7, #12]
 801e610:	f7ff f982 	bl	801d918 <bi_divide>
 801e614:	61f8      	str	r0, [r7, #28]
      i = l - 1;
 801e616:	69bb      	ldr	r3, [r7, #24]
 801e618:	3b01      	subs	r3, #1
 801e61a:	627b      	str	r3, [r7, #36]	@ 0x24
 801e61c:	e019      	b.n	801e652 <bi_mod_power+0x170>
    } else /* square it */
    {
      biR = bi_residue(ctx, bi_square(ctx, biR));
 801e61e:	69f8      	ldr	r0, [r7, #28]
 801e620:	f7fe ffa0 	bl	801d564 <bi_copy>
 801e624:	4603      	mov	r3, r0
 801e626:	69fa      	ldr	r2, [r7, #28]
 801e628:	4619      	mov	r1, r3
 801e62a:	68f8      	ldr	r0, [r7, #12]
 801e62c:	f7ff fdbc 	bl	801e1a8 <bi_multiply>
 801e630:	4601      	mov	r1, r0
 801e632:	68fb      	ldr	r3, [r7, #12]
 801e634:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801e638:	68fa      	ldr	r2, [r7, #12]
 801e63a:	3302      	adds	r3, #2
 801e63c:	009b      	lsls	r3, r3, #2
 801e63e:	4413      	add	r3, r2
 801e640:	685a      	ldr	r2, [r3, #4]
 801e642:	2301      	movs	r3, #1
 801e644:	68f8      	ldr	r0, [r7, #12]
 801e646:	f7ff f967 	bl	801d918 <bi_divide>
 801e64a:	61f8      	str	r0, [r7, #28]
      i--;
 801e64c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e64e:	3b01      	subs	r3, #1
 801e650:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  } while (i >= 0);
 801e652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e654:	2b00      	cmp	r3, #0
 801e656:	f6bf af6e 	bge.w	801e536 <bi_mod_power+0x54>

  /* cleanup */
  for (i = 0; i < ctx->window; i++) {
 801e65a:	2300      	movs	r3, #0
 801e65c:	627b      	str	r3, [r7, #36]	@ 0x24
 801e65e:	e015      	b.n	801e68c <bi_mod_power+0x1aa>
    bi_depermanent(ctx->g[i]);
 801e660:	68fb      	ldr	r3, [r7, #12]
 801e662:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801e664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e666:	009b      	lsls	r3, r3, #2
 801e668:	4413      	add	r3, r2
 801e66a:	681b      	ldr	r3, [r3, #0]
 801e66c:	4618      	mov	r0, r3
 801e66e:	f7fe ffa5 	bl	801d5bc <bi_depermanent>
    bi_free(ctx, ctx->g[i]);
 801e672:	68fb      	ldr	r3, [r7, #12]
 801e674:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801e676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e678:	009b      	lsls	r3, r3, #2
 801e67a:	4413      	add	r3, r2
 801e67c:	681b      	ldr	r3, [r3, #0]
 801e67e:	4619      	mov	r1, r3
 801e680:	68f8      	ldr	r0, [r7, #12]
 801e682:	f7fe ffaf 	bl	801d5e4 <bi_free>
  for (i = 0; i < ctx->window; i++) {
 801e686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e688:	3301      	adds	r3, #1
 801e68a:	627b      	str	r3, [r7, #36]	@ 0x24
 801e68c:	68fb      	ldr	r3, [r7, #12]
 801e68e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801e690:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801e692:	429a      	cmp	r2, r3
 801e694:	dbe4      	blt.n	801e660 <bi_mod_power+0x17e>
  }

  free(ctx->g);
 801e696:	68fb      	ldr	r3, [r7, #12]
 801e698:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e69a:	4618      	mov	r0, r3
 801e69c:	f007 f98a 	bl	80259b4 <free>
  bi_free(ctx, bi);
 801e6a0:	68b9      	ldr	r1, [r7, #8]
 801e6a2:	68f8      	ldr	r0, [r7, #12]
 801e6a4:	f7fe ff9e 	bl	801d5e4 <bi_free>
  bi_free(ctx, biexp);
 801e6a8:	6879      	ldr	r1, [r7, #4]
 801e6aa:	68f8      	ldr	r0, [r7, #12]
 801e6ac:	f7fe ff9a 	bl	801d5e4 <bi_free>
#if defined CONFIG_BIGINT_MONTGOMERY
  return ctx->use_classical ? biR : bi_mont(ctx, biR); /* convert back */
#else /* CONFIG_BIGINT_CLASSICAL or CONFIG_BIGINT_BARRETT */
  return biR;
 801e6b0:	69fb      	ldr	r3, [r7, #28]
#endif
}
 801e6b2:	4618      	mov	r0, r3
 801e6b4:	372c      	adds	r7, #44	@ 0x2c
 801e6b6:	46bd      	mov	sp, r7
 801e6b8:	bd90      	pop	{r4, r7, pc}

0801e6ba <mg_rsa_mod_pow>:
#endif
  return bi_add(ctx, m2, bi_multiply(ctx, q, h));
}
#endif

int mg_rsa_mod_pow(const uint8_t *mod, size_t modsz, const uint8_t *exp, size_t expsz, const uint8_t *msg, size_t msgsz, uint8_t *out, size_t outsz) {
 801e6ba:	b580      	push	{r7, lr}
 801e6bc:	b08a      	sub	sp, #40	@ 0x28
 801e6be:	af00      	add	r7, sp, #0
 801e6c0:	60f8      	str	r0, [r7, #12]
 801e6c2:	60b9      	str	r1, [r7, #8]
 801e6c4:	607a      	str	r2, [r7, #4]
 801e6c6:	603b      	str	r3, [r7, #0]
	BI_CTX *bi_ctx = bi_initialize();
 801e6c8:	f7fe ff27 	bl	801d51a <bi_initialize>
 801e6cc:	6278      	str	r0, [r7, #36]	@ 0x24
	bigint *n = bi_import(bi_ctx, mod, (int) modsz);
 801e6ce:	68bb      	ldr	r3, [r7, #8]
 801e6d0:	461a      	mov	r2, r3
 801e6d2:	68f9      	ldr	r1, [r7, #12]
 801e6d4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801e6d6:	f7ff fbae 	bl	801de36 <bi_import>
 801e6da:	6238      	str	r0, [r7, #32]
	bigint *e = bi_import(bi_ctx, exp, (int) expsz);
 801e6dc:	683b      	ldr	r3, [r7, #0]
 801e6de:	461a      	mov	r2, r3
 801e6e0:	6879      	ldr	r1, [r7, #4]
 801e6e2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801e6e4:	f7ff fba7 	bl	801de36 <bi_import>
 801e6e8:	61f8      	str	r0, [r7, #28]
	bigint *h = bi_import(bi_ctx, msg, (int) msgsz);
 801e6ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e6ec:	461a      	mov	r2, r3
 801e6ee:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801e6f0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801e6f2:	f7ff fba0 	bl	801de36 <bi_import>
 801e6f6:	61b8      	str	r0, [r7, #24]
	bi_set_mod(bi_ctx, n, 0);
 801e6f8:	2200      	movs	r2, #0
 801e6fa:	6a39      	ldr	r1, [r7, #32]
 801e6fc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801e6fe:	f7ff fc3b 	bl	801df78 <bi_set_mod>
	bigint *m1 = bi_mod_power(bi_ctx, h, e);
 801e702:	69fa      	ldr	r2, [r7, #28]
 801e704:	69b9      	ldr	r1, [r7, #24]
 801e706:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801e708:	f7ff feeb 	bl	801e4e2 <bi_mod_power>
 801e70c:	6178      	str	r0, [r7, #20]
	bi_export(bi_ctx, m1, out, (int) outsz);
 801e70e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801e710:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801e712:	6979      	ldr	r1, [r7, #20]
 801e714:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801e716:	f7ff fbdf 	bl	801ded8 <bi_export>
	bi_free(bi_ctx, n);
 801e71a:	6a39      	ldr	r1, [r7, #32]
 801e71c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801e71e:	f7fe ff61 	bl	801d5e4 <bi_free>
	bi_free(bi_ctx, e);
 801e722:	69f9      	ldr	r1, [r7, #28]
 801e724:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801e726:	f7fe ff5d 	bl	801d5e4 <bi_free>
	bi_free(bi_ctx, h);
 801e72a:	69b9      	ldr	r1, [r7, #24]
 801e72c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801e72e:	f7fe ff59 	bl	801d5e4 <bi_free>
	bi_free(bi_ctx, m1);
 801e732:	6979      	ldr	r1, [r7, #20]
 801e734:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801e736:	f7fe ff55 	bl	801d5e4 <bi_free>
	return 0;
 801e73a:	2300      	movs	r3, #0
}
 801e73c:	4618      	mov	r0, r3
 801e73e:	3728      	adds	r7, #40	@ 0x28
 801e740:	46bd      	mov	sp, r7
 801e742:	bd80      	pop	{r7, pc}

0801e744 <mg_uecc_vli_clear>:
  return 2 * curve->num_bytes;
}

#if !asm_clear
MG_UECC_VLI_API void mg_uecc_vli_clear(mg_uecc_word_t *vli,
                                       wordcount_t num_words) {
 801e744:	b480      	push	{r7}
 801e746:	b085      	sub	sp, #20
 801e748:	af00      	add	r7, sp, #0
 801e74a:	6078      	str	r0, [r7, #4]
 801e74c:	460b      	mov	r3, r1
 801e74e:	70fb      	strb	r3, [r7, #3]
  wordcount_t i;
  for (i = 0; i < num_words; ++i) {
 801e750:	2300      	movs	r3, #0
 801e752:	73fb      	strb	r3, [r7, #15]
 801e754:	e00a      	b.n	801e76c <mg_uecc_vli_clear+0x28>
    vli[i] = 0;
 801e756:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801e75a:	009b      	lsls	r3, r3, #2
 801e75c:	687a      	ldr	r2, [r7, #4]
 801e75e:	4413      	add	r3, r2
 801e760:	2200      	movs	r2, #0
 801e762:	601a      	str	r2, [r3, #0]
  for (i = 0; i < num_words; ++i) {
 801e764:	7bfb      	ldrb	r3, [r7, #15]
 801e766:	3301      	adds	r3, #1
 801e768:	b2db      	uxtb	r3, r3
 801e76a:	73fb      	strb	r3, [r7, #15]
 801e76c:	f997 200f 	ldrsb.w	r2, [r7, #15]
 801e770:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801e774:	429a      	cmp	r2, r3
 801e776:	dbee      	blt.n	801e756 <mg_uecc_vli_clear+0x12>
  }
}
 801e778:	bf00      	nop
 801e77a:	bf00      	nop
 801e77c:	3714      	adds	r7, #20
 801e77e:	46bd      	mov	sp, r7
 801e780:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e784:	4770      	bx	lr

0801e786 <mg_uecc_vli_isZero>:
#endif /* !asm_clear */

/* Constant-time comparison to zero - secure way to compare long integers */
/* Returns 1 if vli == 0, 0 otherwise. */
MG_UECC_VLI_API mg_uecc_word_t mg_uecc_vli_isZero(const mg_uecc_word_t *vli,
                                                  wordcount_t num_words) {
 801e786:	b480      	push	{r7}
 801e788:	b085      	sub	sp, #20
 801e78a:	af00      	add	r7, sp, #0
 801e78c:	6078      	str	r0, [r7, #4]
 801e78e:	460b      	mov	r3, r1
 801e790:	70fb      	strb	r3, [r7, #3]
  mg_uecc_word_t bits = 0;
 801e792:	2300      	movs	r3, #0
 801e794:	60fb      	str	r3, [r7, #12]
  wordcount_t i;
  for (i = 0; i < num_words; ++i) {
 801e796:	2300      	movs	r3, #0
 801e798:	72fb      	strb	r3, [r7, #11]
 801e79a:	e00c      	b.n	801e7b6 <mg_uecc_vli_isZero+0x30>
    bits |= vli[i];
 801e79c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801e7a0:	009b      	lsls	r3, r3, #2
 801e7a2:	687a      	ldr	r2, [r7, #4]
 801e7a4:	4413      	add	r3, r2
 801e7a6:	681b      	ldr	r3, [r3, #0]
 801e7a8:	68fa      	ldr	r2, [r7, #12]
 801e7aa:	4313      	orrs	r3, r2
 801e7ac:	60fb      	str	r3, [r7, #12]
  for (i = 0; i < num_words; ++i) {
 801e7ae:	7afb      	ldrb	r3, [r7, #11]
 801e7b0:	3301      	adds	r3, #1
 801e7b2:	b2db      	uxtb	r3, r3
 801e7b4:	72fb      	strb	r3, [r7, #11]
 801e7b6:	f997 200b 	ldrsb.w	r2, [r7, #11]
 801e7ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801e7be:	429a      	cmp	r2, r3
 801e7c0:	dbec      	blt.n	801e79c <mg_uecc_vli_isZero+0x16>
  }
  return (bits == 0);
 801e7c2:	68fb      	ldr	r3, [r7, #12]
 801e7c4:	2b00      	cmp	r3, #0
 801e7c6:	bf0c      	ite	eq
 801e7c8:	2301      	moveq	r3, #1
 801e7ca:	2300      	movne	r3, #0
 801e7cc:	b2db      	uxtb	r3, r3
}
 801e7ce:	4618      	mov	r0, r3
 801e7d0:	3714      	adds	r7, #20
 801e7d2:	46bd      	mov	sp, r7
 801e7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e7d8:	4770      	bx	lr

0801e7da <mg_uecc_vli_testBit>:

/* Returns nonzero if bit 'bit' of vli is set. */
MG_UECC_VLI_API mg_uecc_word_t mg_uecc_vli_testBit(const mg_uecc_word_t *vli,
                                                   bitcount_t bit) {
 801e7da:	b480      	push	{r7}
 801e7dc:	b083      	sub	sp, #12
 801e7de:	af00      	add	r7, sp, #0
 801e7e0:	6078      	str	r0, [r7, #4]
 801e7e2:	460b      	mov	r3, r1
 801e7e4:	807b      	strh	r3, [r7, #2]
  return (vli[bit >> MG_UECC_WORD_BITS_SHIFT] &
 801e7e6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801e7ea:	115b      	asrs	r3, r3, #5
 801e7ec:	b21b      	sxth	r3, r3
 801e7ee:	009b      	lsls	r3, r3, #2
 801e7f0:	687a      	ldr	r2, [r7, #4]
 801e7f2:	4413      	add	r3, r2
 801e7f4:	681a      	ldr	r2, [r3, #0]
          ((mg_uecc_word_t) 1 << (bit & MG_UECC_WORD_BITS_MASK)));
 801e7f6:	887b      	ldrh	r3, [r7, #2]
 801e7f8:	f003 031f 	and.w	r3, r3, #31
 801e7fc:	2101      	movs	r1, #1
 801e7fe:	fa01 f303 	lsl.w	r3, r1, r3
  return (vli[bit >> MG_UECC_WORD_BITS_SHIFT] &
 801e802:	4013      	ands	r3, r2
}
 801e804:	4618      	mov	r0, r3
 801e806:	370c      	adds	r7, #12
 801e808:	46bd      	mov	sp, r7
 801e80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e80e:	4770      	bx	lr

0801e810 <vli_numDigits>:

/* Counts the number of words in vli. */
static wordcount_t vli_numDigits(const mg_uecc_word_t *vli,
                                 const wordcount_t max_words) {
 801e810:	b480      	push	{r7}
 801e812:	b085      	sub	sp, #20
 801e814:	af00      	add	r7, sp, #0
 801e816:	6078      	str	r0, [r7, #4]
 801e818:	460b      	mov	r3, r1
 801e81a:	70fb      	strb	r3, [r7, #3]
  wordcount_t i;
  /* Search from the end until we find a non-zero digit.
     We do it in reverse because we expect that most digits will be nonzero. */
  for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
 801e81c:	78fb      	ldrb	r3, [r7, #3]
 801e81e:	3b01      	subs	r3, #1
 801e820:	b2db      	uxtb	r3, r3
 801e822:	73fb      	strb	r3, [r7, #15]
 801e824:	e003      	b.n	801e82e <vli_numDigits+0x1e>
 801e826:	7bfb      	ldrb	r3, [r7, #15]
 801e828:	3b01      	subs	r3, #1
 801e82a:	b2db      	uxtb	r3, r3
 801e82c:	73fb      	strb	r3, [r7, #15]
 801e82e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801e832:	2b00      	cmp	r3, #0
 801e834:	db07      	blt.n	801e846 <vli_numDigits+0x36>
 801e836:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801e83a:	009b      	lsls	r3, r3, #2
 801e83c:	687a      	ldr	r2, [r7, #4]
 801e83e:	4413      	add	r3, r2
 801e840:	681b      	ldr	r3, [r3, #0]
 801e842:	2b00      	cmp	r3, #0
 801e844:	d0ef      	beq.n	801e826 <vli_numDigits+0x16>
  }

  return (i + 1);
 801e846:	7bfb      	ldrb	r3, [r7, #15]
 801e848:	3301      	adds	r3, #1
 801e84a:	b2db      	uxtb	r3, r3
 801e84c:	b25b      	sxtb	r3, r3
}
 801e84e:	4618      	mov	r0, r3
 801e850:	3714      	adds	r7, #20
 801e852:	46bd      	mov	sp, r7
 801e854:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e858:	4770      	bx	lr

0801e85a <mg_uecc_vli_numBits>:

/* Counts the number of bits required to represent vli. */
MG_UECC_VLI_API bitcount_t mg_uecc_vli_numBits(const mg_uecc_word_t *vli,
                                               const wordcount_t max_words) {
 801e85a:	b580      	push	{r7, lr}
 801e85c:	b086      	sub	sp, #24
 801e85e:	af00      	add	r7, sp, #0
 801e860:	6078      	str	r0, [r7, #4]
 801e862:	460b      	mov	r3, r1
 801e864:	70fb      	strb	r3, [r7, #3]
  mg_uecc_word_t i;
  mg_uecc_word_t digit;

  wordcount_t num_digits = vli_numDigits(vli, max_words);
 801e866:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801e86a:	4619      	mov	r1, r3
 801e86c:	6878      	ldr	r0, [r7, #4]
 801e86e:	f7ff ffcf 	bl	801e810 <vli_numDigits>
 801e872:	4603      	mov	r3, r0
 801e874:	73fb      	strb	r3, [r7, #15]
  if (num_digits == 0) {
 801e876:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801e87a:	2b00      	cmp	r3, #0
 801e87c:	d101      	bne.n	801e882 <mg_uecc_vli_numBits+0x28>
    return 0;
 801e87e:	2300      	movs	r3, #0
 801e880:	e020      	b.n	801e8c4 <mg_uecc_vli_numBits+0x6a>
  }

  digit = vli[num_digits - 1];
 801e882:	f997 200f 	ldrsb.w	r2, [r7, #15]
 801e886:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801e88a:	4413      	add	r3, r2
 801e88c:	009b      	lsls	r3, r3, #2
 801e88e:	687a      	ldr	r2, [r7, #4]
 801e890:	4413      	add	r3, r2
 801e892:	681b      	ldr	r3, [r3, #0]
 801e894:	613b      	str	r3, [r7, #16]
  for (i = 0; digit; ++i) {
 801e896:	2300      	movs	r3, #0
 801e898:	617b      	str	r3, [r7, #20]
 801e89a:	e005      	b.n	801e8a8 <mg_uecc_vli_numBits+0x4e>
    digit >>= 1;
 801e89c:	693b      	ldr	r3, [r7, #16]
 801e89e:	085b      	lsrs	r3, r3, #1
 801e8a0:	613b      	str	r3, [r7, #16]
  for (i = 0; digit; ++i) {
 801e8a2:	697b      	ldr	r3, [r7, #20]
 801e8a4:	3301      	adds	r3, #1
 801e8a6:	617b      	str	r3, [r7, #20]
 801e8a8:	693b      	ldr	r3, [r7, #16]
 801e8aa:	2b00      	cmp	r3, #0
 801e8ac:	d1f6      	bne.n	801e89c <mg_uecc_vli_numBits+0x42>
  }

  return (((bitcount_t) ((num_digits - 1) << MG_UECC_WORD_BITS_SHIFT)) +
 801e8ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801e8b2:	3b01      	subs	r3, #1
 801e8b4:	b29b      	uxth	r3, r3
 801e8b6:	015b      	lsls	r3, r3, #5
 801e8b8:	b29a      	uxth	r2, r3
          (bitcount_t) i);
 801e8ba:	697b      	ldr	r3, [r7, #20]
 801e8bc:	b29b      	uxth	r3, r3
  return (((bitcount_t) ((num_digits - 1) << MG_UECC_WORD_BITS_SHIFT)) +
 801e8be:	4413      	add	r3, r2
 801e8c0:	b29b      	uxth	r3, r3
 801e8c2:	b21b      	sxth	r3, r3
}
 801e8c4:	4618      	mov	r0, r3
 801e8c6:	3718      	adds	r7, #24
 801e8c8:	46bd      	mov	sp, r7
 801e8ca:	bd80      	pop	{r7, pc}

0801e8cc <mg_uecc_vli_set>:

/* Sets dest = src. */
#if !asm_set
MG_UECC_VLI_API void mg_uecc_vli_set(mg_uecc_word_t *dest,
                                     const mg_uecc_word_t *src,
                                     wordcount_t num_words) {
 801e8cc:	b480      	push	{r7}
 801e8ce:	b087      	sub	sp, #28
 801e8d0:	af00      	add	r7, sp, #0
 801e8d2:	60f8      	str	r0, [r7, #12]
 801e8d4:	60b9      	str	r1, [r7, #8]
 801e8d6:	4613      	mov	r3, r2
 801e8d8:	71fb      	strb	r3, [r7, #7]
  wordcount_t i;
  for (i = 0; i < num_words; ++i) {
 801e8da:	2300      	movs	r3, #0
 801e8dc:	75fb      	strb	r3, [r7, #23]
 801e8de:	e00f      	b.n	801e900 <mg_uecc_vli_set+0x34>
    dest[i] = src[i];
 801e8e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801e8e4:	009b      	lsls	r3, r3, #2
 801e8e6:	68ba      	ldr	r2, [r7, #8]
 801e8e8:	441a      	add	r2, r3
 801e8ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801e8ee:	009b      	lsls	r3, r3, #2
 801e8f0:	68f9      	ldr	r1, [r7, #12]
 801e8f2:	440b      	add	r3, r1
 801e8f4:	6812      	ldr	r2, [r2, #0]
 801e8f6:	601a      	str	r2, [r3, #0]
  for (i = 0; i < num_words; ++i) {
 801e8f8:	7dfb      	ldrb	r3, [r7, #23]
 801e8fa:	3301      	adds	r3, #1
 801e8fc:	b2db      	uxtb	r3, r3
 801e8fe:	75fb      	strb	r3, [r7, #23]
 801e900:	f997 2017 	ldrsb.w	r2, [r7, #23]
 801e904:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801e908:	429a      	cmp	r2, r3
 801e90a:	dbe9      	blt.n	801e8e0 <mg_uecc_vli_set+0x14>
  }
}
 801e90c:	bf00      	nop
 801e90e:	bf00      	nop
 801e910:	371c      	adds	r7, #28
 801e912:	46bd      	mov	sp, r7
 801e914:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e918:	4770      	bx	lr

0801e91a <mg_uecc_vli_cmp_unsafe>:
#endif /* !asm_set */

/* Returns sign of left - right. */
static cmpresult_t mg_uecc_vli_cmp_unsafe(const mg_uecc_word_t *left,
                                          const mg_uecc_word_t *right,
                                          wordcount_t num_words) {
 801e91a:	b480      	push	{r7}
 801e91c:	b087      	sub	sp, #28
 801e91e:	af00      	add	r7, sp, #0
 801e920:	60f8      	str	r0, [r7, #12]
 801e922:	60b9      	str	r1, [r7, #8]
 801e924:	4613      	mov	r3, r2
 801e926:	71fb      	strb	r3, [r7, #7]
  wordcount_t i;
  for (i = num_words - 1; i >= 0; --i) {
 801e928:	79fb      	ldrb	r3, [r7, #7]
 801e92a:	3b01      	subs	r3, #1
 801e92c:	b2db      	uxtb	r3, r3
 801e92e:	75fb      	strb	r3, [r7, #23]
 801e930:	e024      	b.n	801e97c <mg_uecc_vli_cmp_unsafe+0x62>
    if (left[i] > right[i]) {
 801e932:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801e936:	009b      	lsls	r3, r3, #2
 801e938:	68fa      	ldr	r2, [r7, #12]
 801e93a:	4413      	add	r3, r2
 801e93c:	681a      	ldr	r2, [r3, #0]
 801e93e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801e942:	009b      	lsls	r3, r3, #2
 801e944:	68b9      	ldr	r1, [r7, #8]
 801e946:	440b      	add	r3, r1
 801e948:	681b      	ldr	r3, [r3, #0]
 801e94a:	429a      	cmp	r2, r3
 801e94c:	d901      	bls.n	801e952 <mg_uecc_vli_cmp_unsafe+0x38>
      return 1;
 801e94e:	2301      	movs	r3, #1
 801e950:	e019      	b.n	801e986 <mg_uecc_vli_cmp_unsafe+0x6c>
    } else if (left[i] < right[i]) {
 801e952:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801e956:	009b      	lsls	r3, r3, #2
 801e958:	68fa      	ldr	r2, [r7, #12]
 801e95a:	4413      	add	r3, r2
 801e95c:	681a      	ldr	r2, [r3, #0]
 801e95e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801e962:	009b      	lsls	r3, r3, #2
 801e964:	68b9      	ldr	r1, [r7, #8]
 801e966:	440b      	add	r3, r1
 801e968:	681b      	ldr	r3, [r3, #0]
 801e96a:	429a      	cmp	r2, r3
 801e96c:	d202      	bcs.n	801e974 <mg_uecc_vli_cmp_unsafe+0x5a>
      return -1;
 801e96e:	f04f 33ff 	mov.w	r3, #4294967295
 801e972:	e008      	b.n	801e986 <mg_uecc_vli_cmp_unsafe+0x6c>
  for (i = num_words - 1; i >= 0; --i) {
 801e974:	7dfb      	ldrb	r3, [r7, #23]
 801e976:	3b01      	subs	r3, #1
 801e978:	b2db      	uxtb	r3, r3
 801e97a:	75fb      	strb	r3, [r7, #23]
 801e97c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801e980:	2b00      	cmp	r3, #0
 801e982:	dad6      	bge.n	801e932 <mg_uecc_vli_cmp_unsafe+0x18>
    }
  }
  return 0;
 801e984:	2300      	movs	r3, #0
}
 801e986:	4618      	mov	r0, r3
 801e988:	371c      	adds	r7, #28
 801e98a:	46bd      	mov	sp, r7
 801e98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e990:	4770      	bx	lr

0801e992 <mg_uecc_vli_equal>:

/* Constant-time comparison function - secure way to compare long integers */
/* Returns one if left == right, zero otherwise. */
MG_UECC_VLI_API mg_uecc_word_t mg_uecc_vli_equal(const mg_uecc_word_t *left,
                                                 const mg_uecc_word_t *right,
                                                 wordcount_t num_words) {
 801e992:	b480      	push	{r7}
 801e994:	b087      	sub	sp, #28
 801e996:	af00      	add	r7, sp, #0
 801e998:	60f8      	str	r0, [r7, #12]
 801e99a:	60b9      	str	r1, [r7, #8]
 801e99c:	4613      	mov	r3, r2
 801e99e:	71fb      	strb	r3, [r7, #7]
  mg_uecc_word_t diff = 0;
 801e9a0:	2300      	movs	r3, #0
 801e9a2:	617b      	str	r3, [r7, #20]
  wordcount_t i;
  for (i = num_words - 1; i >= 0; --i) {
 801e9a4:	79fb      	ldrb	r3, [r7, #7]
 801e9a6:	3b01      	subs	r3, #1
 801e9a8:	b2db      	uxtb	r3, r3
 801e9aa:	74fb      	strb	r3, [r7, #19]
 801e9ac:	e013      	b.n	801e9d6 <mg_uecc_vli_equal+0x44>
    diff |= (left[i] ^ right[i]);
 801e9ae:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801e9b2:	009b      	lsls	r3, r3, #2
 801e9b4:	68fa      	ldr	r2, [r7, #12]
 801e9b6:	4413      	add	r3, r2
 801e9b8:	681a      	ldr	r2, [r3, #0]
 801e9ba:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801e9be:	009b      	lsls	r3, r3, #2
 801e9c0:	68b9      	ldr	r1, [r7, #8]
 801e9c2:	440b      	add	r3, r1
 801e9c4:	681b      	ldr	r3, [r3, #0]
 801e9c6:	4053      	eors	r3, r2
 801e9c8:	697a      	ldr	r2, [r7, #20]
 801e9ca:	4313      	orrs	r3, r2
 801e9cc:	617b      	str	r3, [r7, #20]
  for (i = num_words - 1; i >= 0; --i) {
 801e9ce:	7cfb      	ldrb	r3, [r7, #19]
 801e9d0:	3b01      	subs	r3, #1
 801e9d2:	b2db      	uxtb	r3, r3
 801e9d4:	74fb      	strb	r3, [r7, #19]
 801e9d6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801e9da:	2b00      	cmp	r3, #0
 801e9dc:	dae7      	bge.n	801e9ae <mg_uecc_vli_equal+0x1c>
  }
  return (diff == 0);
 801e9de:	697b      	ldr	r3, [r7, #20]
 801e9e0:	2b00      	cmp	r3, #0
 801e9e2:	bf0c      	ite	eq
 801e9e4:	2301      	moveq	r3, #1
 801e9e6:	2300      	movne	r3, #0
 801e9e8:	b2db      	uxtb	r3, r3
}
 801e9ea:	4618      	mov	r0, r3
 801e9ec:	371c      	adds	r7, #28
 801e9ee:	46bd      	mov	sp, r7
 801e9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e9f4:	4770      	bx	lr

0801e9f6 <mg_uecc_vli_cmp>:
                                               wordcount_t num_words);

/* Returns sign of left - right, in constant time. */
MG_UECC_VLI_API cmpresult_t mg_uecc_vli_cmp(const mg_uecc_word_t *left,
                                            const mg_uecc_word_t *right,
                                            wordcount_t num_words) {
 801e9f6:	b580      	push	{r7, lr}
 801e9f8:	b08e      	sub	sp, #56	@ 0x38
 801e9fa:	af00      	add	r7, sp, #0
 801e9fc:	60f8      	str	r0, [r7, #12]
 801e9fe:	60b9      	str	r1, [r7, #8]
 801ea00:	4613      	mov	r3, r2
 801ea02:	71fb      	strb	r3, [r7, #7]
  mg_uecc_word_t tmp[MG_UECC_MAX_WORDS];
  mg_uecc_word_t neg = !!mg_uecc_vli_sub(tmp, left, right, num_words);
 801ea04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801ea08:	f107 0010 	add.w	r0, r7, #16
 801ea0c:	68ba      	ldr	r2, [r7, #8]
 801ea0e:	68f9      	ldr	r1, [r7, #12]
 801ea10:	f000 f896 	bl	801eb40 <mg_uecc_vli_sub>
 801ea14:	4603      	mov	r3, r0
 801ea16:	2b00      	cmp	r3, #0
 801ea18:	bf14      	ite	ne
 801ea1a:	2301      	movne	r3, #1
 801ea1c:	2300      	moveq	r3, #0
 801ea1e:	b2db      	uxtb	r3, r3
 801ea20:	637b      	str	r3, [r7, #52]	@ 0x34
  mg_uecc_word_t equal = mg_uecc_vli_isZero(tmp, num_words);
 801ea22:	f997 2007 	ldrsb.w	r2, [r7, #7]
 801ea26:	f107 0310 	add.w	r3, r7, #16
 801ea2a:	4611      	mov	r1, r2
 801ea2c:	4618      	mov	r0, r3
 801ea2e:	f7ff feaa 	bl	801e786 <mg_uecc_vli_isZero>
 801ea32:	6338      	str	r0, [r7, #48]	@ 0x30
  return (cmpresult_t) (!equal - 2 * neg);
 801ea34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ea36:	2b00      	cmp	r3, #0
 801ea38:	bf0c      	ite	eq
 801ea3a:	2301      	moveq	r3, #1
 801ea3c:	2300      	movne	r3, #0
 801ea3e:	b2db      	uxtb	r3, r3
 801ea40:	461a      	mov	r2, r3
 801ea42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ea44:	b2db      	uxtb	r3, r3
 801ea46:	005b      	lsls	r3, r3, #1
 801ea48:	b2db      	uxtb	r3, r3
 801ea4a:	1ad3      	subs	r3, r2, r3
 801ea4c:	b2db      	uxtb	r3, r3
 801ea4e:	b25b      	sxtb	r3, r3
}
 801ea50:	4618      	mov	r0, r3
 801ea52:	3738      	adds	r7, #56	@ 0x38
 801ea54:	46bd      	mov	sp, r7
 801ea56:	bd80      	pop	{r7, pc}

0801ea58 <mg_uecc_vli_rshift1>:

/* Computes vli = vli >> 1. */
#if !asm_rshift1
MG_UECC_VLI_API void mg_uecc_vli_rshift1(mg_uecc_word_t *vli,
                                         wordcount_t num_words) {
 801ea58:	b480      	push	{r7}
 801ea5a:	b087      	sub	sp, #28
 801ea5c:	af00      	add	r7, sp, #0
 801ea5e:	6078      	str	r0, [r7, #4]
 801ea60:	460b      	mov	r3, r1
 801ea62:	70fb      	strb	r3, [r7, #3]
  mg_uecc_word_t *end = vli;
 801ea64:	687b      	ldr	r3, [r7, #4]
 801ea66:	613b      	str	r3, [r7, #16]
  mg_uecc_word_t carry = 0;
 801ea68:	2300      	movs	r3, #0
 801ea6a:	617b      	str	r3, [r7, #20]

  vli += num_words;
 801ea6c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801ea70:	009b      	lsls	r3, r3, #2
 801ea72:	687a      	ldr	r2, [r7, #4]
 801ea74:	4413      	add	r3, r2
 801ea76:	607b      	str	r3, [r7, #4]
  while (vli-- > end) {
 801ea78:	e00b      	b.n	801ea92 <mg_uecc_vli_rshift1+0x3a>
    mg_uecc_word_t temp = *vli;
 801ea7a:	687b      	ldr	r3, [r7, #4]
 801ea7c:	681b      	ldr	r3, [r3, #0]
 801ea7e:	60fb      	str	r3, [r7, #12]
    *vli = (temp >> 1) | carry;
 801ea80:	68fb      	ldr	r3, [r7, #12]
 801ea82:	085a      	lsrs	r2, r3, #1
 801ea84:	697b      	ldr	r3, [r7, #20]
 801ea86:	431a      	orrs	r2, r3
 801ea88:	687b      	ldr	r3, [r7, #4]
 801ea8a:	601a      	str	r2, [r3, #0]
    carry = temp << (MG_UECC_WORD_BITS - 1);
 801ea8c:	68fb      	ldr	r3, [r7, #12]
 801ea8e:	07db      	lsls	r3, r3, #31
 801ea90:	617b      	str	r3, [r7, #20]
  while (vli-- > end) {
 801ea92:	687b      	ldr	r3, [r7, #4]
 801ea94:	1f1a      	subs	r2, r3, #4
 801ea96:	607a      	str	r2, [r7, #4]
 801ea98:	693a      	ldr	r2, [r7, #16]
 801ea9a:	429a      	cmp	r2, r3
 801ea9c:	d3ed      	bcc.n	801ea7a <mg_uecc_vli_rshift1+0x22>
  }
}
 801ea9e:	bf00      	nop
 801eaa0:	bf00      	nop
 801eaa2:	371c      	adds	r7, #28
 801eaa4:	46bd      	mov	sp, r7
 801eaa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eaaa:	4770      	bx	lr

0801eaac <mg_uecc_vli_add>:
/* Computes result = left + right, returning carry. Can modify in place. */
#if !asm_add
MG_UECC_VLI_API mg_uecc_word_t mg_uecc_vli_add(mg_uecc_word_t *result,
                                               const mg_uecc_word_t *left,
                                               const mg_uecc_word_t *right,
                                               wordcount_t num_words) {
 801eaac:	b480      	push	{r7}
 801eaae:	b089      	sub	sp, #36	@ 0x24
 801eab0:	af00      	add	r7, sp, #0
 801eab2:	60f8      	str	r0, [r7, #12]
 801eab4:	60b9      	str	r1, [r7, #8]
 801eab6:	607a      	str	r2, [r7, #4]
 801eab8:	70fb      	strb	r3, [r7, #3]
  mg_uecc_word_t carry = 0;
 801eaba:	2300      	movs	r3, #0
 801eabc:	61fb      	str	r3, [r7, #28]
  wordcount_t i;
  for (i = 0; i < num_words; ++i) {
 801eabe:	2300      	movs	r3, #0
 801eac0:	76fb      	strb	r3, [r7, #27]
 801eac2:	e030      	b.n	801eb26 <mg_uecc_vli_add+0x7a>
    mg_uecc_word_t sum = left[i] + right[i] + carry;
 801eac4:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801eac8:	009b      	lsls	r3, r3, #2
 801eaca:	68ba      	ldr	r2, [r7, #8]
 801eacc:	4413      	add	r3, r2
 801eace:	681a      	ldr	r2, [r3, #0]
 801ead0:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801ead4:	009b      	lsls	r3, r3, #2
 801ead6:	6879      	ldr	r1, [r7, #4]
 801ead8:	440b      	add	r3, r1
 801eada:	681b      	ldr	r3, [r3, #0]
 801eadc:	4413      	add	r3, r2
 801eade:	69fa      	ldr	r2, [r7, #28]
 801eae0:	4413      	add	r3, r2
 801eae2:	617b      	str	r3, [r7, #20]
    if (sum != left[i]) {
 801eae4:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801eae8:	009b      	lsls	r3, r3, #2
 801eaea:	68ba      	ldr	r2, [r7, #8]
 801eaec:	4413      	add	r3, r2
 801eaee:	681b      	ldr	r3, [r3, #0]
 801eaf0:	697a      	ldr	r2, [r7, #20]
 801eaf2:	429a      	cmp	r2, r3
 801eaf4:	d00c      	beq.n	801eb10 <mg_uecc_vli_add+0x64>
      carry = (sum < left[i]);
 801eaf6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801eafa:	009b      	lsls	r3, r3, #2
 801eafc:	68ba      	ldr	r2, [r7, #8]
 801eafe:	4413      	add	r3, r2
 801eb00:	681b      	ldr	r3, [r3, #0]
 801eb02:	697a      	ldr	r2, [r7, #20]
 801eb04:	429a      	cmp	r2, r3
 801eb06:	bf34      	ite	cc
 801eb08:	2301      	movcc	r3, #1
 801eb0a:	2300      	movcs	r3, #0
 801eb0c:	b2db      	uxtb	r3, r3
 801eb0e:	61fb      	str	r3, [r7, #28]
    }
    result[i] = sum;
 801eb10:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801eb14:	009b      	lsls	r3, r3, #2
 801eb16:	68fa      	ldr	r2, [r7, #12]
 801eb18:	4413      	add	r3, r2
 801eb1a:	697a      	ldr	r2, [r7, #20]
 801eb1c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < num_words; ++i) {
 801eb1e:	7efb      	ldrb	r3, [r7, #27]
 801eb20:	3301      	adds	r3, #1
 801eb22:	b2db      	uxtb	r3, r3
 801eb24:	76fb      	strb	r3, [r7, #27]
 801eb26:	f997 201b 	ldrsb.w	r2, [r7, #27]
 801eb2a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801eb2e:	429a      	cmp	r2, r3
 801eb30:	dbc8      	blt.n	801eac4 <mg_uecc_vli_add+0x18>
  }
  return carry;
 801eb32:	69fb      	ldr	r3, [r7, #28]
}
 801eb34:	4618      	mov	r0, r3
 801eb36:	3724      	adds	r7, #36	@ 0x24
 801eb38:	46bd      	mov	sp, r7
 801eb3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eb3e:	4770      	bx	lr

0801eb40 <mg_uecc_vli_sub>:
/* Computes result = left - right, returning borrow. Can modify in place. */
#if !asm_sub
MG_UECC_VLI_API mg_uecc_word_t mg_uecc_vli_sub(mg_uecc_word_t *result,
                                               const mg_uecc_word_t *left,
                                               const mg_uecc_word_t *right,
                                               wordcount_t num_words) {
 801eb40:	b480      	push	{r7}
 801eb42:	b089      	sub	sp, #36	@ 0x24
 801eb44:	af00      	add	r7, sp, #0
 801eb46:	60f8      	str	r0, [r7, #12]
 801eb48:	60b9      	str	r1, [r7, #8]
 801eb4a:	607a      	str	r2, [r7, #4]
 801eb4c:	70fb      	strb	r3, [r7, #3]
  mg_uecc_word_t borrow = 0;
 801eb4e:	2300      	movs	r3, #0
 801eb50:	61fb      	str	r3, [r7, #28]
  wordcount_t i;
  for (i = 0; i < num_words; ++i) {
 801eb52:	2300      	movs	r3, #0
 801eb54:	76fb      	strb	r3, [r7, #27]
 801eb56:	e030      	b.n	801ebba <mg_uecc_vli_sub+0x7a>
    mg_uecc_word_t diff = left[i] - right[i] - borrow;
 801eb58:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801eb5c:	009b      	lsls	r3, r3, #2
 801eb5e:	68ba      	ldr	r2, [r7, #8]
 801eb60:	4413      	add	r3, r2
 801eb62:	681a      	ldr	r2, [r3, #0]
 801eb64:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801eb68:	009b      	lsls	r3, r3, #2
 801eb6a:	6879      	ldr	r1, [r7, #4]
 801eb6c:	440b      	add	r3, r1
 801eb6e:	681b      	ldr	r3, [r3, #0]
 801eb70:	1ad2      	subs	r2, r2, r3
 801eb72:	69fb      	ldr	r3, [r7, #28]
 801eb74:	1ad3      	subs	r3, r2, r3
 801eb76:	617b      	str	r3, [r7, #20]
    if (diff != left[i]) {
 801eb78:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801eb7c:	009b      	lsls	r3, r3, #2
 801eb7e:	68ba      	ldr	r2, [r7, #8]
 801eb80:	4413      	add	r3, r2
 801eb82:	681b      	ldr	r3, [r3, #0]
 801eb84:	697a      	ldr	r2, [r7, #20]
 801eb86:	429a      	cmp	r2, r3
 801eb88:	d00c      	beq.n	801eba4 <mg_uecc_vli_sub+0x64>
      borrow = (diff > left[i]);
 801eb8a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801eb8e:	009b      	lsls	r3, r3, #2
 801eb90:	68ba      	ldr	r2, [r7, #8]
 801eb92:	4413      	add	r3, r2
 801eb94:	681b      	ldr	r3, [r3, #0]
 801eb96:	697a      	ldr	r2, [r7, #20]
 801eb98:	429a      	cmp	r2, r3
 801eb9a:	bf8c      	ite	hi
 801eb9c:	2301      	movhi	r3, #1
 801eb9e:	2300      	movls	r3, #0
 801eba0:	b2db      	uxtb	r3, r3
 801eba2:	61fb      	str	r3, [r7, #28]
    }
    result[i] = diff;
 801eba4:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801eba8:	009b      	lsls	r3, r3, #2
 801ebaa:	68fa      	ldr	r2, [r7, #12]
 801ebac:	4413      	add	r3, r2
 801ebae:	697a      	ldr	r2, [r7, #20]
 801ebb0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < num_words; ++i) {
 801ebb2:	7efb      	ldrb	r3, [r7, #27]
 801ebb4:	3301      	adds	r3, #1
 801ebb6:	b2db      	uxtb	r3, r3
 801ebb8:	76fb      	strb	r3, [r7, #27]
 801ebba:	f997 201b 	ldrsb.w	r2, [r7, #27]
 801ebbe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801ebc2:	429a      	cmp	r2, r3
 801ebc4:	dbc8      	blt.n	801eb58 <mg_uecc_vli_sub+0x18>
  }
  return borrow;
 801ebc6:	69fb      	ldr	r3, [r7, #28]
}
 801ebc8:	4618      	mov	r0, r3
 801ebca:	3724      	adds	r7, #36	@ 0x24
 801ebcc:	46bd      	mov	sp, r7
 801ebce:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ebd2:	4770      	bx	lr

0801ebd4 <muladd>:

#if !asm_mult || (MG_UECC_SQUARE_FUNC && !asm_square) ||               \
    (MG_UECC_SUPPORTS_secp256k1 && (MG_UECC_OPTIMIZATION_LEVEL > 0) && \
     ((MG_UECC_WORD_SIZE == 1) || (MG_UECC_WORD_SIZE == 8)))
static void muladd(mg_uecc_word_t a, mg_uecc_word_t b, mg_uecc_word_t *r0,
                   mg_uecc_word_t *r1, mg_uecc_word_t *r2) {
 801ebd4:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 801ebd8:	b091      	sub	sp, #68	@ 0x44
 801ebda:	af00      	add	r7, sp, #0
 801ebdc:	62f8      	str	r0, [r7, #44]	@ 0x2c
 801ebde:	62b9      	str	r1, [r7, #40]	@ 0x28
 801ebe0:	627a      	str	r2, [r7, #36]	@ 0x24
 801ebe2:	623b      	str	r3, [r7, #32]

  *r0 += p0;
  *r1 += (p1 + (*r0 < p0));
  *r2 += ((*r1 < p1) || (*r1 == p1 && *r0 < p0));
#else
  mg_uecc_dword_t p = (mg_uecc_dword_t) a * b;
 801ebe4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ebe6:	2200      	movs	r2, #0
 801ebe8:	4698      	mov	r8, r3
 801ebea:	4691      	mov	r9, r2
 801ebec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ebee:	2200      	movs	r2, #0
 801ebf0:	469a      	mov	sl, r3
 801ebf2:	4693      	mov	fp, r2
 801ebf4:	fb0a f209 	mul.w	r2, sl, r9
 801ebf8:	fb08 f30b 	mul.w	r3, r8, fp
 801ebfc:	4413      	add	r3, r2
 801ebfe:	fba8 450a 	umull	r4, r5, r8, sl
 801ec02:	442b      	add	r3, r5
 801ec04:	461d      	mov	r5, r3
 801ec06:	e9c7 450e 	strd	r4, r5, [r7, #56]	@ 0x38
 801ec0a:	e9c7 450e 	strd	r4, r5, [r7, #56]	@ 0x38
  mg_uecc_dword_t r01 = ((mg_uecc_dword_t) (*r1) << MG_UECC_WORD_BITS) | *r0;
 801ec0e:	6a3b      	ldr	r3, [r7, #32]
 801ec10:	681b      	ldr	r3, [r3, #0]
 801ec12:	2200      	movs	r2, #0
 801ec14:	61bb      	str	r3, [r7, #24]
 801ec16:	61fa      	str	r2, [r7, #28]
 801ec18:	f04f 0200 	mov.w	r2, #0
 801ec1c:	f04f 0300 	mov.w	r3, #0
 801ec20:	69b9      	ldr	r1, [r7, #24]
 801ec22:	000b      	movs	r3, r1
 801ec24:	2200      	movs	r2, #0
 801ec26:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801ec28:	6809      	ldr	r1, [r1, #0]
 801ec2a:	2000      	movs	r0, #0
 801ec2c:	6139      	str	r1, [r7, #16]
 801ec2e:	6178      	str	r0, [r7, #20]
 801ec30:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 801ec34:	4621      	mov	r1, r4
 801ec36:	4311      	orrs	r1, r2
 801ec38:	60b9      	str	r1, [r7, #8]
 801ec3a:	4629      	mov	r1, r5
 801ec3c:	4319      	orrs	r1, r3
 801ec3e:	60f9      	str	r1, [r7, #12]
 801ec40:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 801ec44:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30
  r01 += p;
 801ec48:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 801ec4c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 801ec50:	1884      	adds	r4, r0, r2
 801ec52:	603c      	str	r4, [r7, #0]
 801ec54:	eb41 0303 	adc.w	r3, r1, r3
 801ec58:	607b      	str	r3, [r7, #4]
 801ec5a:	e9d7 3400 	ldrd	r3, r4, [r7]
 801ec5e:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30
  *r2 += (r01 < p);
 801ec62:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801ec64:	681c      	ldr	r4, [r3, #0]
 801ec66:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 801ec6a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 801ec6e:	4290      	cmp	r0, r2
 801ec70:	eb71 0303 	sbcs.w	r3, r1, r3
 801ec74:	bf34      	ite	cc
 801ec76:	2301      	movcc	r3, #1
 801ec78:	2300      	movcs	r3, #0
 801ec7a:	b2db      	uxtb	r3, r3
 801ec7c:	18e2      	adds	r2, r4, r3
 801ec7e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801ec80:	601a      	str	r2, [r3, #0]
  *r1 = (mg_uecc_word_t) (r01 >> MG_UECC_WORD_BITS);
 801ec82:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 801ec86:	f04f 0200 	mov.w	r2, #0
 801ec8a:	f04f 0300 	mov.w	r3, #0
 801ec8e:	000a      	movs	r2, r1
 801ec90:	2300      	movs	r3, #0
 801ec92:	6a3b      	ldr	r3, [r7, #32]
 801ec94:	601a      	str	r2, [r3, #0]
  *r0 = (mg_uecc_word_t) r01;
 801ec96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801ec98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ec9a:	601a      	str	r2, [r3, #0]
#endif
}
 801ec9c:	bf00      	nop
 801ec9e:	3744      	adds	r7, #68	@ 0x44
 801eca0:	46bd      	mov	sp, r7
 801eca2:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 801eca6:	4770      	bx	lr

0801eca8 <mg_uecc_vli_mult>:

#if !asm_mult
MG_UECC_VLI_API void mg_uecc_vli_mult(mg_uecc_word_t *result,
                                      const mg_uecc_word_t *left,
                                      const mg_uecc_word_t *right,
                                      wordcount_t num_words) {
 801eca8:	b590      	push	{r4, r7, lr}
 801ecaa:	b08b      	sub	sp, #44	@ 0x2c
 801ecac:	af02      	add	r7, sp, #8
 801ecae:	60f8      	str	r0, [r7, #12]
 801ecb0:	60b9      	str	r1, [r7, #8]
 801ecb2:	607a      	str	r2, [r7, #4]
 801ecb4:	70fb      	strb	r3, [r7, #3]
  mg_uecc_word_t r0 = 0;
 801ecb6:	2300      	movs	r3, #0
 801ecb8:	61bb      	str	r3, [r7, #24]
  mg_uecc_word_t r1 = 0;
 801ecba:	2300      	movs	r3, #0
 801ecbc:	617b      	str	r3, [r7, #20]
  mg_uecc_word_t r2 = 0;
 801ecbe:	2300      	movs	r3, #0
 801ecc0:	613b      	str	r3, [r7, #16]
  wordcount_t i, k;

  /* Compute each digit of result in sequence, maintaining the carries. */
  for (k = 0; k < num_words; ++k) {
 801ecc2:	2300      	movs	r3, #0
 801ecc4:	77bb      	strb	r3, [r7, #30]
 801ecc6:	e036      	b.n	801ed36 <mg_uecc_vli_mult+0x8e>
    for (i = 0; i <= k; ++i) {
 801ecc8:	2300      	movs	r3, #0
 801ecca:	77fb      	strb	r3, [r7, #31]
 801eccc:	e01c      	b.n	801ed08 <mg_uecc_vli_mult+0x60>
      muladd(left[i], right[k - i], &r0, &r1, &r2);
 801ecce:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801ecd2:	009b      	lsls	r3, r3, #2
 801ecd4:	68ba      	ldr	r2, [r7, #8]
 801ecd6:	4413      	add	r3, r2
 801ecd8:	6818      	ldr	r0, [r3, #0]
 801ecda:	f997 201e 	ldrsb.w	r2, [r7, #30]
 801ecde:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801ece2:	1ad3      	subs	r3, r2, r3
 801ece4:	009b      	lsls	r3, r3, #2
 801ece6:	687a      	ldr	r2, [r7, #4]
 801ece8:	4413      	add	r3, r2
 801ecea:	6819      	ldr	r1, [r3, #0]
 801ecec:	f107 0414 	add.w	r4, r7, #20
 801ecf0:	f107 0218 	add.w	r2, r7, #24
 801ecf4:	f107 0310 	add.w	r3, r7, #16
 801ecf8:	9300      	str	r3, [sp, #0]
 801ecfa:	4623      	mov	r3, r4
 801ecfc:	f7ff ff6a 	bl	801ebd4 <muladd>
    for (i = 0; i <= k; ++i) {
 801ed00:	7ffb      	ldrb	r3, [r7, #31]
 801ed02:	3301      	adds	r3, #1
 801ed04:	b2db      	uxtb	r3, r3
 801ed06:	77fb      	strb	r3, [r7, #31]
 801ed08:	f997 201f 	ldrsb.w	r2, [r7, #31]
 801ed0c:	f997 301e 	ldrsb.w	r3, [r7, #30]
 801ed10:	429a      	cmp	r2, r3
 801ed12:	dddc      	ble.n	801ecce <mg_uecc_vli_mult+0x26>
    }
    result[k] = r0;
 801ed14:	f997 301e 	ldrsb.w	r3, [r7, #30]
 801ed18:	009b      	lsls	r3, r3, #2
 801ed1a:	68fa      	ldr	r2, [r7, #12]
 801ed1c:	4413      	add	r3, r2
 801ed1e:	69ba      	ldr	r2, [r7, #24]
 801ed20:	601a      	str	r2, [r3, #0]
    r0 = r1;
 801ed22:	697b      	ldr	r3, [r7, #20]
 801ed24:	61bb      	str	r3, [r7, #24]
    r1 = r2;
 801ed26:	693b      	ldr	r3, [r7, #16]
 801ed28:	617b      	str	r3, [r7, #20]
    r2 = 0;
 801ed2a:	2300      	movs	r3, #0
 801ed2c:	613b      	str	r3, [r7, #16]
  for (k = 0; k < num_words; ++k) {
 801ed2e:	7fbb      	ldrb	r3, [r7, #30]
 801ed30:	3301      	adds	r3, #1
 801ed32:	b2db      	uxtb	r3, r3
 801ed34:	77bb      	strb	r3, [r7, #30]
 801ed36:	f997 201e 	ldrsb.w	r2, [r7, #30]
 801ed3a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801ed3e:	429a      	cmp	r2, r3
 801ed40:	dbc2      	blt.n	801ecc8 <mg_uecc_vli_mult+0x20>
  }
  for (k = num_words; k < num_words * 2 - 1; ++k) {
 801ed42:	78fb      	ldrb	r3, [r7, #3]
 801ed44:	77bb      	strb	r3, [r7, #30]
 801ed46:	e03b      	b.n	801edc0 <mg_uecc_vli_mult+0x118>
    for (i = (wordcount_t) ((k + 1) - num_words); i < num_words; ++i) {
 801ed48:	7fba      	ldrb	r2, [r7, #30]
 801ed4a:	78fb      	ldrb	r3, [r7, #3]
 801ed4c:	1ad3      	subs	r3, r2, r3
 801ed4e:	b2db      	uxtb	r3, r3
 801ed50:	3301      	adds	r3, #1
 801ed52:	b2db      	uxtb	r3, r3
 801ed54:	77fb      	strb	r3, [r7, #31]
 801ed56:	e01c      	b.n	801ed92 <mg_uecc_vli_mult+0xea>
      muladd(left[i], right[k - i], &r0, &r1, &r2);
 801ed58:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801ed5c:	009b      	lsls	r3, r3, #2
 801ed5e:	68ba      	ldr	r2, [r7, #8]
 801ed60:	4413      	add	r3, r2
 801ed62:	6818      	ldr	r0, [r3, #0]
 801ed64:	f997 201e 	ldrsb.w	r2, [r7, #30]
 801ed68:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801ed6c:	1ad3      	subs	r3, r2, r3
 801ed6e:	009b      	lsls	r3, r3, #2
 801ed70:	687a      	ldr	r2, [r7, #4]
 801ed72:	4413      	add	r3, r2
 801ed74:	6819      	ldr	r1, [r3, #0]
 801ed76:	f107 0414 	add.w	r4, r7, #20
 801ed7a:	f107 0218 	add.w	r2, r7, #24
 801ed7e:	f107 0310 	add.w	r3, r7, #16
 801ed82:	9300      	str	r3, [sp, #0]
 801ed84:	4623      	mov	r3, r4
 801ed86:	f7ff ff25 	bl	801ebd4 <muladd>
    for (i = (wordcount_t) ((k + 1) - num_words); i < num_words; ++i) {
 801ed8a:	7ffb      	ldrb	r3, [r7, #31]
 801ed8c:	3301      	adds	r3, #1
 801ed8e:	b2db      	uxtb	r3, r3
 801ed90:	77fb      	strb	r3, [r7, #31]
 801ed92:	f997 201f 	ldrsb.w	r2, [r7, #31]
 801ed96:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801ed9a:	429a      	cmp	r2, r3
 801ed9c:	dbdc      	blt.n	801ed58 <mg_uecc_vli_mult+0xb0>
    }
    result[k] = r0;
 801ed9e:	f997 301e 	ldrsb.w	r3, [r7, #30]
 801eda2:	009b      	lsls	r3, r3, #2
 801eda4:	68fa      	ldr	r2, [r7, #12]
 801eda6:	4413      	add	r3, r2
 801eda8:	69ba      	ldr	r2, [r7, #24]
 801edaa:	601a      	str	r2, [r3, #0]
    r0 = r1;
 801edac:	697b      	ldr	r3, [r7, #20]
 801edae:	61bb      	str	r3, [r7, #24]
    r1 = r2;
 801edb0:	693b      	ldr	r3, [r7, #16]
 801edb2:	617b      	str	r3, [r7, #20]
    r2 = 0;
 801edb4:	2300      	movs	r3, #0
 801edb6:	613b      	str	r3, [r7, #16]
  for (k = num_words; k < num_words * 2 - 1; ++k) {
 801edb8:	7fbb      	ldrb	r3, [r7, #30]
 801edba:	3301      	adds	r3, #1
 801edbc:	b2db      	uxtb	r3, r3
 801edbe:	77bb      	strb	r3, [r7, #30]
 801edc0:	f997 201e 	ldrsb.w	r2, [r7, #30]
 801edc4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801edc8:	005b      	lsls	r3, r3, #1
 801edca:	3b01      	subs	r3, #1
 801edcc:	429a      	cmp	r2, r3
 801edce:	dbbb      	blt.n	801ed48 <mg_uecc_vli_mult+0xa0>
  }
  result[num_words * 2 - 1] = r0;
 801edd0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801edd4:	00db      	lsls	r3, r3, #3
 801edd6:	3b04      	subs	r3, #4
 801edd8:	68fa      	ldr	r2, [r7, #12]
 801edda:	4413      	add	r3, r2
 801eddc:	69ba      	ldr	r2, [r7, #24]
 801edde:	601a      	str	r2, [r3, #0]
}
 801ede0:	bf00      	nop
 801ede2:	3724      	adds	r7, #36	@ 0x24
 801ede4:	46bd      	mov	sp, r7
 801ede6:	bd90      	pop	{r4, r7, pc}

0801ede8 <mg_uecc_vli_modAdd>:
   mod. */
MG_UECC_VLI_API void mg_uecc_vli_modAdd(mg_uecc_word_t *result,
                                        const mg_uecc_word_t *left,
                                        const mg_uecc_word_t *right,
                                        const mg_uecc_word_t *mod,
                                        wordcount_t num_words) {
 801ede8:	b580      	push	{r7, lr}
 801edea:	b086      	sub	sp, #24
 801edec:	af00      	add	r7, sp, #0
 801edee:	60f8      	str	r0, [r7, #12]
 801edf0:	60b9      	str	r1, [r7, #8]
 801edf2:	607a      	str	r2, [r7, #4]
 801edf4:	603b      	str	r3, [r7, #0]
  mg_uecc_word_t carry = mg_uecc_vli_add(result, left, right, num_words);
 801edf6:	f997 3020 	ldrsb.w	r3, [r7, #32]
 801edfa:	687a      	ldr	r2, [r7, #4]
 801edfc:	68b9      	ldr	r1, [r7, #8]
 801edfe:	68f8      	ldr	r0, [r7, #12]
 801ee00:	f7ff fe54 	bl	801eaac <mg_uecc_vli_add>
 801ee04:	6178      	str	r0, [r7, #20]
  if (carry || mg_uecc_vli_cmp_unsafe(mod, result, num_words) != 1) {
 801ee06:	697b      	ldr	r3, [r7, #20]
 801ee08:	2b00      	cmp	r3, #0
 801ee0a:	d109      	bne.n	801ee20 <mg_uecc_vli_modAdd+0x38>
 801ee0c:	f997 3020 	ldrsb.w	r3, [r7, #32]
 801ee10:	461a      	mov	r2, r3
 801ee12:	68f9      	ldr	r1, [r7, #12]
 801ee14:	6838      	ldr	r0, [r7, #0]
 801ee16:	f7ff fd80 	bl	801e91a <mg_uecc_vli_cmp_unsafe>
 801ee1a:	4603      	mov	r3, r0
 801ee1c:	2b01      	cmp	r3, #1
 801ee1e:	d006      	beq.n	801ee2e <mg_uecc_vli_modAdd+0x46>
    /* result > mod (result = mod + remainder), so subtract mod to get
     * remainder. */
    mg_uecc_vli_sub(result, result, mod, num_words);
 801ee20:	f997 3020 	ldrsb.w	r3, [r7, #32]
 801ee24:	683a      	ldr	r2, [r7, #0]
 801ee26:	68f9      	ldr	r1, [r7, #12]
 801ee28:	68f8      	ldr	r0, [r7, #12]
 801ee2a:	f7ff fe89 	bl	801eb40 <mg_uecc_vli_sub>
  }
}
 801ee2e:	bf00      	nop
 801ee30:	3718      	adds	r7, #24
 801ee32:	46bd      	mov	sp, r7
 801ee34:	bd80      	pop	{r7, pc}

0801ee36 <mg_uecc_vli_modSub>:
   mod. */
MG_UECC_VLI_API void mg_uecc_vli_modSub(mg_uecc_word_t *result,
                                        const mg_uecc_word_t *left,
                                        const mg_uecc_word_t *right,
                                        const mg_uecc_word_t *mod,
                                        wordcount_t num_words) {
 801ee36:	b580      	push	{r7, lr}
 801ee38:	b086      	sub	sp, #24
 801ee3a:	af00      	add	r7, sp, #0
 801ee3c:	60f8      	str	r0, [r7, #12]
 801ee3e:	60b9      	str	r1, [r7, #8]
 801ee40:	607a      	str	r2, [r7, #4]
 801ee42:	603b      	str	r3, [r7, #0]
  mg_uecc_word_t l_borrow = mg_uecc_vli_sub(result, left, right, num_words);
 801ee44:	f997 3020 	ldrsb.w	r3, [r7, #32]
 801ee48:	687a      	ldr	r2, [r7, #4]
 801ee4a:	68b9      	ldr	r1, [r7, #8]
 801ee4c:	68f8      	ldr	r0, [r7, #12]
 801ee4e:	f7ff fe77 	bl	801eb40 <mg_uecc_vli_sub>
 801ee52:	6178      	str	r0, [r7, #20]
  if (l_borrow) {
 801ee54:	697b      	ldr	r3, [r7, #20]
 801ee56:	2b00      	cmp	r3, #0
 801ee58:	d006      	beq.n	801ee68 <mg_uecc_vli_modSub+0x32>
    /* In this case, result == -diff == (max int) - diff. Since -x % d == d - x,
       we can get the correct result from result + mod (with overflow). */
    mg_uecc_vli_add(result, result, mod, num_words);
 801ee5a:	f997 3020 	ldrsb.w	r3, [r7, #32]
 801ee5e:	683a      	ldr	r2, [r7, #0]
 801ee60:	68f9      	ldr	r1, [r7, #12]
 801ee62:	68f8      	ldr	r0, [r7, #12]
 801ee64:	f7ff fe22 	bl	801eaac <mg_uecc_vli_add>
  }
}
 801ee68:	bf00      	nop
 801ee6a:	3718      	adds	r7, #24
 801ee6c:	46bd      	mov	sp, r7
 801ee6e:	bd80      	pop	{r7, pc}

0801ee70 <mg_uecc_vli_mmod>:
/* Computes result = product % mod, where product is 2N words long. */
/* Currently only designed to work for curve_p or curve_n. */
MG_UECC_VLI_API void mg_uecc_vli_mmod(mg_uecc_word_t *result,
                                      mg_uecc_word_t *product,
                                      const mg_uecc_word_t *mod,
                                      wordcount_t num_words) {
 801ee70:	b590      	push	{r4, r7, lr}
 801ee72:	b0ad      	sub	sp, #180	@ 0xb4
 801ee74:	af00      	add	r7, sp, #0
 801ee76:	60f8      	str	r0, [r7, #12]
 801ee78:	60b9      	str	r1, [r7, #8]
 801ee7a:	607a      	str	r2, [r7, #4]
 801ee7c:	70fb      	strb	r3, [r7, #3]
  mg_uecc_word_t mod_multiple[2 * MG_UECC_MAX_WORDS];
  mg_uecc_word_t tmp[2 * MG_UECC_MAX_WORDS];
  mg_uecc_word_t *v[2] = {tmp, product};
 801ee7e:	f107 0318 	add.w	r3, r7, #24
 801ee82:	613b      	str	r3, [r7, #16]
 801ee84:	68bb      	ldr	r3, [r7, #8]
 801ee86:	617b      	str	r3, [r7, #20]
  mg_uecc_word_t index;

  /* Shift mod so its highest set bit is at the maximum position. */
  bitcount_t shift = (bitcount_t) ((num_words * 2 * MG_UECC_WORD_BITS) -
 801ee88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801ee8c:	b29b      	uxth	r3, r3
 801ee8e:	019b      	lsls	r3, r3, #6
 801ee90:	b29c      	uxth	r4, r3
                                   mg_uecc_vli_numBits(mod, num_words));
 801ee92:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801ee96:	4619      	mov	r1, r3
 801ee98:	6878      	ldr	r0, [r7, #4]
 801ee9a:	f7ff fcde 	bl	801e85a <mg_uecc_vli_numBits>
 801ee9e:	4603      	mov	r3, r0
 801eea0:	b29b      	uxth	r3, r3
  bitcount_t shift = (bitcount_t) ((num_words * 2 * MG_UECC_WORD_BITS) -
 801eea2:	1ae3      	subs	r3, r4, r3
 801eea4:	b29b      	uxth	r3, r3
 801eea6:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  wordcount_t word_shift = (wordcount_t) (shift / MG_UECC_WORD_BITS);
 801eeaa:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	@ 0xaa
 801eeae:	2b00      	cmp	r3, #0
 801eeb0:	da00      	bge.n	801eeb4 <mg_uecc_vli_mmod+0x44>
 801eeb2:	331f      	adds	r3, #31
 801eeb4:	115b      	asrs	r3, r3, #5
 801eeb6:	b21b      	sxth	r3, r3
 801eeb8:	f887 309e 	strb.w	r3, [r7, #158]	@ 0x9e
  wordcount_t bit_shift = (wordcount_t) (shift % MG_UECC_WORD_BITS);
 801eebc:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	@ 0xaa
 801eec0:	425a      	negs	r2, r3
 801eec2:	f003 031f 	and.w	r3, r3, #31
 801eec6:	f002 021f 	and.w	r2, r2, #31
 801eeca:	bf58      	it	pl
 801eecc:	4253      	negpl	r3, r2
 801eece:	b21b      	sxth	r3, r3
 801eed0:	f887 309d 	strb.w	r3, [r7, #157]	@ 0x9d
  mg_uecc_word_t carry = 0;
 801eed4:	2300      	movs	r3, #0
 801eed6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  mg_uecc_vli_clear(mod_multiple, word_shift);
 801eeda:	f997 209e 	ldrsb.w	r2, [r7, #158]	@ 0x9e
 801eede:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 801eee2:	4611      	mov	r1, r2
 801eee4:	4618      	mov	r0, r3
 801eee6:	f7ff fc2d 	bl	801e744 <mg_uecc_vli_clear>
  if (bit_shift > 0) {
 801eeea:	f997 309d 	ldrsb.w	r3, [r7, #157]	@ 0x9d
 801eeee:	2b00      	cmp	r3, #0
 801eef0:	dd34      	ble.n	801ef5c <mg_uecc_vli_mmod+0xec>
    for (index = 0; index < (mg_uecc_word_t) num_words; ++index) {
 801eef2:	2300      	movs	r3, #0
 801eef4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 801eef8:	e029      	b.n	801ef4e <mg_uecc_vli_mmod+0xde>
      mod_multiple[(mg_uecc_word_t) word_shift + index] =
          (mg_uecc_word_t) (mod[index] << bit_shift) | carry;
 801eefa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801eefe:	009b      	lsls	r3, r3, #2
 801ef00:	687a      	ldr	r2, [r7, #4]
 801ef02:	4413      	add	r3, r2
 801ef04:	681a      	ldr	r2, [r3, #0]
 801ef06:	f997 309d 	ldrsb.w	r3, [r7, #157]	@ 0x9d
 801ef0a:	fa02 f103 	lsl.w	r1, r2, r3
      mod_multiple[(mg_uecc_word_t) word_shift + index] =
 801ef0e:	f997 209e 	ldrsb.w	r2, [r7, #158]	@ 0x9e
 801ef12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801ef16:	4413      	add	r3, r2
          (mg_uecc_word_t) (mod[index] << bit_shift) | carry;
 801ef18:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 801ef1c:	430a      	orrs	r2, r1
      mod_multiple[(mg_uecc_word_t) word_shift + index] =
 801ef1e:	009b      	lsls	r3, r3, #2
 801ef20:	33b0      	adds	r3, #176	@ 0xb0
 801ef22:	443b      	add	r3, r7
 801ef24:	f843 2c58 	str.w	r2, [r3, #-88]
      carry = mod[index] >> (MG_UECC_WORD_BITS - bit_shift);
 801ef28:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801ef2c:	009b      	lsls	r3, r3, #2
 801ef2e:	687a      	ldr	r2, [r7, #4]
 801ef30:	4413      	add	r3, r2
 801ef32:	681a      	ldr	r2, [r3, #0]
 801ef34:	f997 309d 	ldrsb.w	r3, [r7, #157]	@ 0x9d
 801ef38:	f1c3 0320 	rsb	r3, r3, #32
 801ef3c:	fa22 f303 	lsr.w	r3, r2, r3
 801ef40:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    for (index = 0; index < (mg_uecc_word_t) num_words; ++index) {
 801ef44:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801ef48:	3301      	adds	r3, #1
 801ef4a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 801ef4e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801ef52:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 801ef56:	429a      	cmp	r2, r3
 801ef58:	d3cf      	bcc.n	801eefa <mg_uecc_vli_mmod+0x8a>
 801ef5a:	e00b      	b.n	801ef74 <mg_uecc_vli_mmod+0x104>
    }
  } else {
    mg_uecc_vli_set(mod_multiple + word_shift, mod, num_words);
 801ef5c:	f997 309e 	ldrsb.w	r3, [r7, #158]	@ 0x9e
 801ef60:	009b      	lsls	r3, r3, #2
 801ef62:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 801ef66:	4413      	add	r3, r2
 801ef68:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801ef6c:	6879      	ldr	r1, [r7, #4]
 801ef6e:	4618      	mov	r0, r3
 801ef70:	f7ff fcac 	bl	801e8cc <mg_uecc_vli_set>
  }

  for (index = 1; shift >= 0; --shift) {
 801ef74:	2301      	movs	r3, #1
 801ef76:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 801ef7a:	e09f      	b.n	801f0bc <mg_uecc_vli_mmod+0x24c>
    mg_uecc_word_t borrow = 0;
 801ef7c:	2300      	movs	r3, #0
 801ef7e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    wordcount_t i;
    for (i = 0; i < num_words * 2; ++i) {
 801ef82:	2300      	movs	r3, #0
 801ef84:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
 801ef88:	e053      	b.n	801f032 <mg_uecc_vli_mmod+0x1c2>
      mg_uecc_word_t diff = v[index][i] - mod_multiple[i] - borrow;
 801ef8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801ef8e:	009b      	lsls	r3, r3, #2
 801ef90:	33b0      	adds	r3, #176	@ 0xb0
 801ef92:	443b      	add	r3, r7
 801ef94:	f853 2ca0 	ldr.w	r2, [r3, #-160]
 801ef98:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 801ef9c:	009b      	lsls	r3, r3, #2
 801ef9e:	4413      	add	r3, r2
 801efa0:	681a      	ldr	r2, [r3, #0]
 801efa2:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 801efa6:	009b      	lsls	r3, r3, #2
 801efa8:	33b0      	adds	r3, #176	@ 0xb0
 801efaa:	443b      	add	r3, r7
 801efac:	f853 3c58 	ldr.w	r3, [r3, #-88]
 801efb0:	1ad2      	subs	r2, r2, r3
 801efb2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801efb6:	1ad3      	subs	r3, r2, r3
 801efb8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
      if (diff != v[index][i]) {
 801efbc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801efc0:	009b      	lsls	r3, r3, #2
 801efc2:	33b0      	adds	r3, #176	@ 0xb0
 801efc4:	443b      	add	r3, r7
 801efc6:	f853 2ca0 	ldr.w	r2, [r3, #-160]
 801efca:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 801efce:	009b      	lsls	r3, r3, #2
 801efd0:	4413      	add	r3, r2
 801efd2:	681b      	ldr	r3, [r3, #0]
 801efd4:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 801efd8:	429a      	cmp	r2, r3
 801efda:	d014      	beq.n	801f006 <mg_uecc_vli_mmod+0x196>
        borrow = (diff > v[index][i]);
 801efdc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801efe0:	009b      	lsls	r3, r3, #2
 801efe2:	33b0      	adds	r3, #176	@ 0xb0
 801efe4:	443b      	add	r3, r7
 801efe6:	f853 2ca0 	ldr.w	r2, [r3, #-160]
 801efea:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 801efee:	009b      	lsls	r3, r3, #2
 801eff0:	4413      	add	r3, r2
 801eff2:	681b      	ldr	r3, [r3, #0]
 801eff4:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 801eff8:	429a      	cmp	r2, r3
 801effa:	bf8c      	ite	hi
 801effc:	2301      	movhi	r3, #1
 801effe:	2300      	movls	r3, #0
 801f000:	b2db      	uxtb	r3, r3
 801f002:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      }
      v[1 - index][i] = diff;
 801f006:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801f00a:	f1c3 0301 	rsb	r3, r3, #1
 801f00e:	009b      	lsls	r3, r3, #2
 801f010:	33b0      	adds	r3, #176	@ 0xb0
 801f012:	443b      	add	r3, r7
 801f014:	f853 2ca0 	ldr.w	r2, [r3, #-160]
 801f018:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 801f01c:	009b      	lsls	r3, r3, #2
 801f01e:	4413      	add	r3, r2
 801f020:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 801f024:	601a      	str	r2, [r3, #0]
    for (i = 0; i < num_words * 2; ++i) {
 801f026:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 801f02a:	3301      	adds	r3, #1
 801f02c:	b2db      	uxtb	r3, r3
 801f02e:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
 801f032:	f997 209f 	ldrsb.w	r2, [r7, #159]	@ 0x9f
 801f036:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801f03a:	005b      	lsls	r3, r3, #1
 801f03c:	429a      	cmp	r2, r3
 801f03e:	dba4      	blt.n	801ef8a <mg_uecc_vli_mmod+0x11a>
    }
    index = !(index ^ borrow); /* Swap the index if there was no borrow */
 801f040:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 801f044:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801f048:	429a      	cmp	r2, r3
 801f04a:	bf0c      	ite	eq
 801f04c:	2301      	moveq	r3, #1
 801f04e:	2300      	movne	r3, #0
 801f050:	b2db      	uxtb	r3, r3
 801f052:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    mg_uecc_vli_rshift1(mod_multiple, num_words);
 801f056:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801f05a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 801f05e:	4611      	mov	r1, r2
 801f060:	4618      	mov	r0, r3
 801f062:	f7ff fcf9 	bl	801ea58 <mg_uecc_vli_rshift1>
    mod_multiple[num_words - 1] |= mod_multiple[num_words]
 801f066:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801f06a:	3b01      	subs	r3, #1
 801f06c:	009b      	lsls	r3, r3, #2
 801f06e:	33b0      	adds	r3, #176	@ 0xb0
 801f070:	443b      	add	r3, r7
 801f072:	f853 1c58 	ldr.w	r1, [r3, #-88]
 801f076:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801f07a:	009b      	lsls	r3, r3, #2
 801f07c:	33b0      	adds	r3, #176	@ 0xb0
 801f07e:	443b      	add	r3, r7
 801f080:	f853 3c58 	ldr.w	r3, [r3, #-88]
                                   << (MG_UECC_WORD_BITS - 1);
 801f084:	07da      	lsls	r2, r3, #31
    mod_multiple[num_words - 1] |= mod_multiple[num_words]
 801f086:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801f08a:	3b01      	subs	r3, #1
 801f08c:	430a      	orrs	r2, r1
 801f08e:	009b      	lsls	r3, r3, #2
 801f090:	33b0      	adds	r3, #176	@ 0xb0
 801f092:	443b      	add	r3, r7
 801f094:	f843 2c58 	str.w	r2, [r3, #-88]
    mg_uecc_vli_rshift1(mod_multiple + num_words, num_words);
 801f098:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801f09c:	009b      	lsls	r3, r3, #2
 801f09e:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 801f0a2:	4413      	add	r3, r2
 801f0a4:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801f0a8:	4611      	mov	r1, r2
 801f0aa:	4618      	mov	r0, r3
 801f0ac:	f7ff fcd4 	bl	801ea58 <mg_uecc_vli_rshift1>
  for (index = 1; shift >= 0; --shift) {
 801f0b0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 801f0b4:	3b01      	subs	r3, #1
 801f0b6:	b29b      	uxth	r3, r3
 801f0b8:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
 801f0bc:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	@ 0xaa
 801f0c0:	2b00      	cmp	r3, #0
 801f0c2:	f6bf af5b 	bge.w	801ef7c <mg_uecc_vli_mmod+0x10c>
  }
  mg_uecc_vli_set(result, v[index], num_words);
 801f0c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801f0ca:	009b      	lsls	r3, r3, #2
 801f0cc:	33b0      	adds	r3, #176	@ 0xb0
 801f0ce:	443b      	add	r3, r7
 801f0d0:	f853 3ca0 	ldr.w	r3, [r3, #-160]
 801f0d4:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801f0d8:	4619      	mov	r1, r3
 801f0da:	68f8      	ldr	r0, [r7, #12]
 801f0dc:	f7ff fbf6 	bl	801e8cc <mg_uecc_vli_set>
}
 801f0e0:	bf00      	nop
 801f0e2:	37b4      	adds	r7, #180	@ 0xb4
 801f0e4:	46bd      	mov	sp, r7
 801f0e6:	bd90      	pop	{r4, r7, pc}

0801f0e8 <mg_uecc_vli_modMult>:
/* Computes result = (left * right) % mod. */
MG_UECC_VLI_API void mg_uecc_vli_modMult(mg_uecc_word_t *result,
                                         const mg_uecc_word_t *left,
                                         const mg_uecc_word_t *right,
                                         const mg_uecc_word_t *mod,
                                         wordcount_t num_words) {
 801f0e8:	b580      	push	{r7, lr}
 801f0ea:	b094      	sub	sp, #80	@ 0x50
 801f0ec:	af00      	add	r7, sp, #0
 801f0ee:	60f8      	str	r0, [r7, #12]
 801f0f0:	60b9      	str	r1, [r7, #8]
 801f0f2:	607a      	str	r2, [r7, #4]
 801f0f4:	603b      	str	r3, [r7, #0]
  mg_uecc_word_t product[2 * MG_UECC_MAX_WORDS];
  mg_uecc_vli_mult(product, left, right, num_words);
 801f0f6:	f997 3058 	ldrsb.w	r3, [r7, #88]	@ 0x58
 801f0fa:	f107 0010 	add.w	r0, r7, #16
 801f0fe:	687a      	ldr	r2, [r7, #4]
 801f100:	68b9      	ldr	r1, [r7, #8]
 801f102:	f7ff fdd1 	bl	801eca8 <mg_uecc_vli_mult>
  mg_uecc_vli_mmod(result, product, mod, num_words);
 801f106:	f997 3058 	ldrsb.w	r3, [r7, #88]	@ 0x58
 801f10a:	f107 0110 	add.w	r1, r7, #16
 801f10e:	683a      	ldr	r2, [r7, #0]
 801f110:	68f8      	ldr	r0, [r7, #12]
 801f112:	f7ff fead 	bl	801ee70 <mg_uecc_vli_mmod>
}
 801f116:	bf00      	nop
 801f118:	3750      	adds	r7, #80	@ 0x50
 801f11a:	46bd      	mov	sp, r7
 801f11c:	bd80      	pop	{r7, pc}

0801f11e <mg_uecc_vli_modMult_fast>:

MG_UECC_VLI_API void mg_uecc_vli_modMult_fast(mg_uecc_word_t *result,
                                              const mg_uecc_word_t *left,
                                              const mg_uecc_word_t *right,
                                              MG_UECC_Curve curve) {
 801f11e:	b580      	push	{r7, lr}
 801f120:	b094      	sub	sp, #80	@ 0x50
 801f122:	af00      	add	r7, sp, #0
 801f124:	60f8      	str	r0, [r7, #12]
 801f126:	60b9      	str	r1, [r7, #8]
 801f128:	607a      	str	r2, [r7, #4]
 801f12a:	603b      	str	r3, [r7, #0]
  mg_uecc_word_t product[2 * MG_UECC_MAX_WORDS];
  mg_uecc_vli_mult(product, left, right, curve->num_words);
 801f12c:	683b      	ldr	r3, [r7, #0]
 801f12e:	f993 3000 	ldrsb.w	r3, [r3]
 801f132:	f107 0010 	add.w	r0, r7, #16
 801f136:	687a      	ldr	r2, [r7, #4]
 801f138:	68b9      	ldr	r1, [r7, #8]
 801f13a:	f7ff fdb5 	bl	801eca8 <mg_uecc_vli_mult>
#if (MG_UECC_OPTIMIZATION_LEVEL > 0)
  curve->mmod_fast(result, product);
 801f13e:	683b      	ldr	r3, [r7, #0]
 801f140:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 801f144:	f107 0210 	add.w	r2, r7, #16
 801f148:	4611      	mov	r1, r2
 801f14a:	68f8      	ldr	r0, [r7, #12]
 801f14c:	4798      	blx	r3
#else
  mg_uecc_vli_mmod(result, product, curve->p, curve->num_words);
#endif
}
 801f14e:	bf00      	nop
 801f150:	3750      	adds	r7, #80	@ 0x50
 801f152:	46bd      	mov	sp, r7
 801f154:	bd80      	pop	{r7, pc}

0801f156 <mg_uecc_vli_modSquare_fast>:
}
#endif /* MG_UECC_ENABLE_VLI_API */

MG_UECC_VLI_API void mg_uecc_vli_modSquare_fast(mg_uecc_word_t *result,
                                                const mg_uecc_word_t *left,
                                                MG_UECC_Curve curve) {
 801f156:	b580      	push	{r7, lr}
 801f158:	b084      	sub	sp, #16
 801f15a:	af00      	add	r7, sp, #0
 801f15c:	60f8      	str	r0, [r7, #12]
 801f15e:	60b9      	str	r1, [r7, #8]
 801f160:	607a      	str	r2, [r7, #4]
  mg_uecc_vli_modMult_fast(result, left, left, curve);
 801f162:	687b      	ldr	r3, [r7, #4]
 801f164:	68ba      	ldr	r2, [r7, #8]
 801f166:	68b9      	ldr	r1, [r7, #8]
 801f168:	68f8      	ldr	r0, [r7, #12]
 801f16a:	f7ff ffd8 	bl	801f11e <mg_uecc_vli_modMult_fast>
}
 801f16e:	bf00      	nop
 801f170:	3710      	adds	r7, #16
 801f172:	46bd      	mov	sp, r7
 801f174:	bd80      	pop	{r7, pc}

0801f176 <vli_modInv_update>:

#endif /* MG_UECC_SQUARE_FUNC */

#define EVEN(vli) (!(vli[0] & 1))
static void vli_modInv_update(mg_uecc_word_t *uv, const mg_uecc_word_t *mod,
                              wordcount_t num_words) {
 801f176:	b580      	push	{r7, lr}
 801f178:	b086      	sub	sp, #24
 801f17a:	af00      	add	r7, sp, #0
 801f17c:	60f8      	str	r0, [r7, #12]
 801f17e:	60b9      	str	r1, [r7, #8]
 801f180:	4613      	mov	r3, r2
 801f182:	71fb      	strb	r3, [r7, #7]
  mg_uecc_word_t carry = 0;
 801f184:	2300      	movs	r3, #0
 801f186:	617b      	str	r3, [r7, #20]
  if (!EVEN(uv)) {
 801f188:	68fb      	ldr	r3, [r7, #12]
 801f18a:	681b      	ldr	r3, [r3, #0]
 801f18c:	f003 0301 	and.w	r3, r3, #1
 801f190:	2b00      	cmp	r3, #0
 801f192:	d007      	beq.n	801f1a4 <vli_modInv_update+0x2e>
    carry = mg_uecc_vli_add(uv, uv, mod, num_words);
 801f194:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801f198:	68ba      	ldr	r2, [r7, #8]
 801f19a:	68f9      	ldr	r1, [r7, #12]
 801f19c:	68f8      	ldr	r0, [r7, #12]
 801f19e:	f7ff fc85 	bl	801eaac <mg_uecc_vli_add>
 801f1a2:	6178      	str	r0, [r7, #20]
  }
  mg_uecc_vli_rshift1(uv, num_words);
 801f1a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801f1a8:	4619      	mov	r1, r3
 801f1aa:	68f8      	ldr	r0, [r7, #12]
 801f1ac:	f7ff fc54 	bl	801ea58 <mg_uecc_vli_rshift1>
  if (carry) {
 801f1b0:	697b      	ldr	r3, [r7, #20]
 801f1b2:	2b00      	cmp	r3, #0
 801f1b4:	d013      	beq.n	801f1de <vli_modInv_update+0x68>
    uv[num_words - 1] |= HIGH_BIT_SET;
 801f1b6:	f997 2007 	ldrsb.w	r2, [r7, #7]
 801f1ba:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801f1be:	4413      	add	r3, r2
 801f1c0:	009b      	lsls	r3, r3, #2
 801f1c2:	68fa      	ldr	r2, [r7, #12]
 801f1c4:	4413      	add	r3, r2
 801f1c6:	681a      	ldr	r2, [r3, #0]
 801f1c8:	f997 1007 	ldrsb.w	r1, [r7, #7]
 801f1cc:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801f1d0:	440b      	add	r3, r1
 801f1d2:	009b      	lsls	r3, r3, #2
 801f1d4:	68f9      	ldr	r1, [r7, #12]
 801f1d6:	440b      	add	r3, r1
 801f1d8:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 801f1dc:	601a      	str	r2, [r3, #0]
  }
}
 801f1de:	bf00      	nop
 801f1e0:	3718      	adds	r7, #24
 801f1e2:	46bd      	mov	sp, r7
 801f1e4:	bd80      	pop	{r7, pc}

0801f1e6 <mg_uecc_vli_modInv>:
/* Computes result = (1 / input) % mod. All VLIs are the same size.
   See "From Euclid's GCD to Montgomery Multiplication to the Great Divide" */
MG_UECC_VLI_API void mg_uecc_vli_modInv(mg_uecc_word_t *result,
                                        const mg_uecc_word_t *input,
                                        const mg_uecc_word_t *mod,
                                        wordcount_t num_words) {
 801f1e6:	b580      	push	{r7, lr}
 801f1e8:	b0a6      	sub	sp, #152	@ 0x98
 801f1ea:	af00      	add	r7, sp, #0
 801f1ec:	60f8      	str	r0, [r7, #12]
 801f1ee:	60b9      	str	r1, [r7, #8]
 801f1f0:	607a      	str	r2, [r7, #4]
 801f1f2:	70fb      	strb	r3, [r7, #3]
  mg_uecc_word_t a[MG_UECC_MAX_WORDS], b[MG_UECC_MAX_WORDS],
      u[MG_UECC_MAX_WORDS], v[MG_UECC_MAX_WORDS];
  cmpresult_t cmpResult;

  if (mg_uecc_vli_isZero(input, num_words)) {
 801f1f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801f1f8:	4619      	mov	r1, r3
 801f1fa:	68b8      	ldr	r0, [r7, #8]
 801f1fc:	f7ff fac3 	bl	801e786 <mg_uecc_vli_isZero>
 801f200:	4603      	mov	r3, r0
 801f202:	2b00      	cmp	r3, #0
 801f204:	d006      	beq.n	801f214 <mg_uecc_vli_modInv+0x2e>
    mg_uecc_vli_clear(result, num_words);
 801f206:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801f20a:	4619      	mov	r1, r3
 801f20c:	68f8      	ldr	r0, [r7, #12]
 801f20e:	f7ff fa99 	bl	801e744 <mg_uecc_vli_clear>
 801f212:	e0de      	b.n	801f3d2 <mg_uecc_vli_modInv+0x1ec>
    return;
  }

  mg_uecc_vli_set(a, input, num_words);
 801f214:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801f218:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 801f21c:	68b9      	ldr	r1, [r7, #8]
 801f21e:	4618      	mov	r0, r3
 801f220:	f7ff fb54 	bl	801e8cc <mg_uecc_vli_set>
  mg_uecc_vli_set(b, mod, num_words);
 801f224:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801f228:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 801f22c:	6879      	ldr	r1, [r7, #4]
 801f22e:	4618      	mov	r0, r3
 801f230:	f7ff fb4c 	bl	801e8cc <mg_uecc_vli_set>
  mg_uecc_vli_clear(u, num_words);
 801f234:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801f238:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 801f23c:	4611      	mov	r1, r2
 801f23e:	4618      	mov	r0, r3
 801f240:	f7ff fa80 	bl	801e744 <mg_uecc_vli_clear>
  u[0] = 1;
 801f244:	2301      	movs	r3, #1
 801f246:	637b      	str	r3, [r7, #52]	@ 0x34
  mg_uecc_vli_clear(v, num_words);
 801f248:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801f24c:	f107 0314 	add.w	r3, r7, #20
 801f250:	4611      	mov	r1, r2
 801f252:	4618      	mov	r0, r3
 801f254:	f7ff fa76 	bl	801e744 <mg_uecc_vli_clear>
  while ((cmpResult = mg_uecc_vli_cmp_unsafe(a, b, num_words)) != 0) {
 801f258:	e0a2      	b.n	801f3a0 <mg_uecc_vli_modInv+0x1ba>
    if (EVEN(a)) {
 801f25a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801f25c:	f003 0301 	and.w	r3, r3, #1
 801f260:	2b00      	cmp	r3, #0
 801f262:	d110      	bne.n	801f286 <mg_uecc_vli_modInv+0xa0>
      mg_uecc_vli_rshift1(a, num_words);
 801f264:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801f268:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 801f26c:	4611      	mov	r1, r2
 801f26e:	4618      	mov	r0, r3
 801f270:	f7ff fbf2 	bl	801ea58 <mg_uecc_vli_rshift1>
      vli_modInv_update(u, mod, num_words);
 801f274:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801f278:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 801f27c:	6879      	ldr	r1, [r7, #4]
 801f27e:	4618      	mov	r0, r3
 801f280:	f7ff ff79 	bl	801f176 <vli_modInv_update>
 801f284:	e08c      	b.n	801f3a0 <mg_uecc_vli_modInv+0x1ba>
    } else if (EVEN(b)) {
 801f286:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801f288:	f003 0301 	and.w	r3, r3, #1
 801f28c:	2b00      	cmp	r3, #0
 801f28e:	d110      	bne.n	801f2b2 <mg_uecc_vli_modInv+0xcc>
      mg_uecc_vli_rshift1(b, num_words);
 801f290:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801f294:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 801f298:	4611      	mov	r1, r2
 801f29a:	4618      	mov	r0, r3
 801f29c:	f7ff fbdc 	bl	801ea58 <mg_uecc_vli_rshift1>
      vli_modInv_update(v, mod, num_words);
 801f2a0:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801f2a4:	f107 0314 	add.w	r3, r7, #20
 801f2a8:	6879      	ldr	r1, [r7, #4]
 801f2aa:	4618      	mov	r0, r3
 801f2ac:	f7ff ff63 	bl	801f176 <vli_modInv_update>
 801f2b0:	e076      	b.n	801f3a0 <mg_uecc_vli_modInv+0x1ba>
    } else if (cmpResult > 0) {
 801f2b2:	f997 3097 	ldrsb.w	r3, [r7, #151]	@ 0x97
 801f2b6:	2b00      	cmp	r3, #0
 801f2b8:	dd39      	ble.n	801f32e <mg_uecc_vli_modInv+0x148>
      mg_uecc_vli_sub(a, a, b, num_words);
 801f2ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801f2be:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 801f2c2:	f107 0174 	add.w	r1, r7, #116	@ 0x74
 801f2c6:	f107 0074 	add.w	r0, r7, #116	@ 0x74
 801f2ca:	f7ff fc39 	bl	801eb40 <mg_uecc_vli_sub>
      mg_uecc_vli_rshift1(a, num_words);
 801f2ce:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801f2d2:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 801f2d6:	4611      	mov	r1, r2
 801f2d8:	4618      	mov	r0, r3
 801f2da:	f7ff fbbd 	bl	801ea58 <mg_uecc_vli_rshift1>
      if (mg_uecc_vli_cmp_unsafe(u, v, num_words) < 0) {
 801f2de:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801f2e2:	f107 0114 	add.w	r1, r7, #20
 801f2e6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 801f2ea:	4618      	mov	r0, r3
 801f2ec:	f7ff fb15 	bl	801e91a <mg_uecc_vli_cmp_unsafe>
 801f2f0:	4603      	mov	r3, r0
 801f2f2:	2b00      	cmp	r3, #0
 801f2f4:	da08      	bge.n	801f308 <mg_uecc_vli_modInv+0x122>
        mg_uecc_vli_add(u, u, mod, num_words);
 801f2f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801f2fa:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 801f2fe:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 801f302:	687a      	ldr	r2, [r7, #4]
 801f304:	f7ff fbd2 	bl	801eaac <mg_uecc_vli_add>
      }
      mg_uecc_vli_sub(u, u, v, num_words);
 801f308:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801f30c:	f107 0214 	add.w	r2, r7, #20
 801f310:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 801f314:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 801f318:	f7ff fc12 	bl	801eb40 <mg_uecc_vli_sub>
      vli_modInv_update(u, mod, num_words);
 801f31c:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801f320:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 801f324:	6879      	ldr	r1, [r7, #4]
 801f326:	4618      	mov	r0, r3
 801f328:	f7ff ff25 	bl	801f176 <vli_modInv_update>
 801f32c:	e038      	b.n	801f3a0 <mg_uecc_vli_modInv+0x1ba>
    } else {
      mg_uecc_vli_sub(b, b, a, num_words);
 801f32e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801f332:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 801f336:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 801f33a:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 801f33e:	f7ff fbff 	bl	801eb40 <mg_uecc_vli_sub>
      mg_uecc_vli_rshift1(b, num_words);
 801f342:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801f346:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 801f34a:	4611      	mov	r1, r2
 801f34c:	4618      	mov	r0, r3
 801f34e:	f7ff fb83 	bl	801ea58 <mg_uecc_vli_rshift1>
      if (mg_uecc_vli_cmp_unsafe(v, u, num_words) < 0) {
 801f352:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801f356:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 801f35a:	f107 0314 	add.w	r3, r7, #20
 801f35e:	4618      	mov	r0, r3
 801f360:	f7ff fadb 	bl	801e91a <mg_uecc_vli_cmp_unsafe>
 801f364:	4603      	mov	r3, r0
 801f366:	2b00      	cmp	r3, #0
 801f368:	da08      	bge.n	801f37c <mg_uecc_vli_modInv+0x196>
        mg_uecc_vli_add(v, v, mod, num_words);
 801f36a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801f36e:	f107 0114 	add.w	r1, r7, #20
 801f372:	f107 0014 	add.w	r0, r7, #20
 801f376:	687a      	ldr	r2, [r7, #4]
 801f378:	f7ff fb98 	bl	801eaac <mg_uecc_vli_add>
      }
      mg_uecc_vli_sub(v, v, u, num_words);
 801f37c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801f380:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 801f384:	f107 0114 	add.w	r1, r7, #20
 801f388:	f107 0014 	add.w	r0, r7, #20
 801f38c:	f7ff fbd8 	bl	801eb40 <mg_uecc_vli_sub>
      vli_modInv_update(v, mod, num_words);
 801f390:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801f394:	f107 0314 	add.w	r3, r7, #20
 801f398:	6879      	ldr	r1, [r7, #4]
 801f39a:	4618      	mov	r0, r3
 801f39c:	f7ff feeb 	bl	801f176 <vli_modInv_update>
  while ((cmpResult = mg_uecc_vli_cmp_unsafe(a, b, num_words)) != 0) {
 801f3a0:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801f3a4:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 801f3a8:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 801f3ac:	4618      	mov	r0, r3
 801f3ae:	f7ff fab4 	bl	801e91a <mg_uecc_vli_cmp_unsafe>
 801f3b2:	4603      	mov	r3, r0
 801f3b4:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 801f3b8:	f997 3097 	ldrsb.w	r3, [r7, #151]	@ 0x97
 801f3bc:	2b00      	cmp	r3, #0
 801f3be:	f47f af4c 	bne.w	801f25a <mg_uecc_vli_modInv+0x74>
    }
  }
  mg_uecc_vli_set(result, u, num_words);
 801f3c2:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801f3c6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 801f3ca:	4619      	mov	r1, r3
 801f3cc:	68f8      	ldr	r0, [r7, #12]
 801f3ce:	f7ff fa7d 	bl	801e8cc <mg_uecc_vli_set>
}
 801f3d2:	3798      	adds	r7, #152	@ 0x98
 801f3d4:	46bd      	mov	sp, r7
 801f3d6:	bd80      	pop	{r7, pc}

0801f3d8 <double_jacobian_default>:
#endif /* MG_UECC_WORD_SIZE */

#if MG_UECC_SUPPORTS_secp160r1 || MG_UECC_SUPPORTS_secp192r1 || \
    MG_UECC_SUPPORTS_secp224r1 || MG_UECC_SUPPORTS_secp256r1
static void double_jacobian_default(mg_uecc_word_t *X1, mg_uecc_word_t *Y1,
                                    mg_uecc_word_t *Z1, MG_UECC_Curve curve) {
 801f3d8:	b580      	push	{r7, lr}
 801f3da:	b098      	sub	sp, #96	@ 0x60
 801f3dc:	af02      	add	r7, sp, #8
 801f3de:	60f8      	str	r0, [r7, #12]
 801f3e0:	60b9      	str	r1, [r7, #8]
 801f3e2:	607a      	str	r2, [r7, #4]
 801f3e4:	603b      	str	r3, [r7, #0]
  /* t1 = X, t2 = Y, t3 = Z */
  mg_uecc_word_t t4[MG_UECC_MAX_WORDS];
  mg_uecc_word_t t5[MG_UECC_MAX_WORDS];
  wordcount_t num_words = curve->num_words;
 801f3e6:	683b      	ldr	r3, [r7, #0]
 801f3e8:	781b      	ldrb	r3, [r3, #0]
 801f3ea:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

  if (mg_uecc_vli_isZero(Z1, num_words)) {
 801f3ee:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 801f3f2:	4619      	mov	r1, r3
 801f3f4:	6878      	ldr	r0, [r7, #4]
 801f3f6:	f7ff f9c6 	bl	801e786 <mg_uecc_vli_isZero>
 801f3fa:	4603      	mov	r3, r0
 801f3fc:	2b00      	cmp	r3, #0
 801f3fe:	f040 80e6 	bne.w	801f5ce <double_jacobian_default+0x1f6>
    return;
  }

  mg_uecc_vli_modSquare_fast(t4, Y1, curve);   /* t4 = y1^2 */
 801f402:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 801f406:	683a      	ldr	r2, [r7, #0]
 801f408:	68b9      	ldr	r1, [r7, #8]
 801f40a:	4618      	mov	r0, r3
 801f40c:	f7ff fea3 	bl	801f156 <mg_uecc_vli_modSquare_fast>
  mg_uecc_vli_modMult_fast(t5, X1, t4, curve); /* t5 = x1*y1^2 = A */
 801f410:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801f414:	f107 0010 	add.w	r0, r7, #16
 801f418:	683b      	ldr	r3, [r7, #0]
 801f41a:	68f9      	ldr	r1, [r7, #12]
 801f41c:	f7ff fe7f 	bl	801f11e <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modSquare_fast(t4, t4, curve);   /* t4 = y1^4 */
 801f420:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 801f424:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 801f428:	683a      	ldr	r2, [r7, #0]
 801f42a:	4618      	mov	r0, r3
 801f42c:	f7ff fe93 	bl	801f156 <mg_uecc_vli_modSquare_fast>
  mg_uecc_vli_modMult_fast(Y1, Y1, Z1, curve); /* t2 = y1*z1 = z3 */
 801f430:	683b      	ldr	r3, [r7, #0]
 801f432:	687a      	ldr	r2, [r7, #4]
 801f434:	68b9      	ldr	r1, [r7, #8]
 801f436:	68b8      	ldr	r0, [r7, #8]
 801f438:	f7ff fe71 	bl	801f11e <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modSquare_fast(Z1, Z1, curve);   /* t3 = z1^2 */
 801f43c:	683a      	ldr	r2, [r7, #0]
 801f43e:	6879      	ldr	r1, [r7, #4]
 801f440:	6878      	ldr	r0, [r7, #4]
 801f442:	f7ff fe88 	bl	801f156 <mg_uecc_vli_modSquare_fast>

  mg_uecc_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
 801f446:	683b      	ldr	r3, [r7, #0]
 801f448:	1d1a      	adds	r2, r3, #4
 801f44a:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 801f44e:	9300      	str	r3, [sp, #0]
 801f450:	4613      	mov	r3, r2
 801f452:	687a      	ldr	r2, [r7, #4]
 801f454:	68f9      	ldr	r1, [r7, #12]
 801f456:	68f8      	ldr	r0, [r7, #12]
 801f458:	f7ff fcc6 	bl	801ede8 <mg_uecc_vli_modAdd>
  mg_uecc_vli_modAdd(Z1, Z1, Z1, curve->p, num_words); /* t3 = 2*z1^2 */
 801f45c:	683b      	ldr	r3, [r7, #0]
 801f45e:	1d1a      	adds	r2, r3, #4
 801f460:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 801f464:	9300      	str	r3, [sp, #0]
 801f466:	4613      	mov	r3, r2
 801f468:	687a      	ldr	r2, [r7, #4]
 801f46a:	6879      	ldr	r1, [r7, #4]
 801f46c:	6878      	ldr	r0, [r7, #4]
 801f46e:	f7ff fcbb 	bl	801ede8 <mg_uecc_vli_modAdd>
  mg_uecc_vli_modSub(Z1, X1, Z1, curve->p, num_words); /* t3 = x1 - z1^2 */
 801f472:	683b      	ldr	r3, [r7, #0]
 801f474:	1d1a      	adds	r2, r3, #4
 801f476:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 801f47a:	9300      	str	r3, [sp, #0]
 801f47c:	4613      	mov	r3, r2
 801f47e:	687a      	ldr	r2, [r7, #4]
 801f480:	68f9      	ldr	r1, [r7, #12]
 801f482:	6878      	ldr	r0, [r7, #4]
 801f484:	f7ff fcd7 	bl	801ee36 <mg_uecc_vli_modSub>
  mg_uecc_vli_modMult_fast(X1, X1, Z1, curve);         /* t1 = x1^2 - z1^4 */
 801f488:	683b      	ldr	r3, [r7, #0]
 801f48a:	687a      	ldr	r2, [r7, #4]
 801f48c:	68f9      	ldr	r1, [r7, #12]
 801f48e:	68f8      	ldr	r0, [r7, #12]
 801f490:	f7ff fe45 	bl	801f11e <mg_uecc_vli_modMult_fast>

  mg_uecc_vli_modAdd(Z1, X1, X1, curve->p,
 801f494:	683b      	ldr	r3, [r7, #0]
 801f496:	1d1a      	adds	r2, r3, #4
 801f498:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 801f49c:	9300      	str	r3, [sp, #0]
 801f49e:	4613      	mov	r3, r2
 801f4a0:	68fa      	ldr	r2, [r7, #12]
 801f4a2:	68f9      	ldr	r1, [r7, #12]
 801f4a4:	6878      	ldr	r0, [r7, #4]
 801f4a6:	f7ff fc9f 	bl	801ede8 <mg_uecc_vli_modAdd>
                     num_words); /* t3 = 2*(x1^2 - z1^4) */
  mg_uecc_vli_modAdd(X1, X1, Z1, curve->p,
 801f4aa:	683b      	ldr	r3, [r7, #0]
 801f4ac:	1d1a      	adds	r2, r3, #4
 801f4ae:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 801f4b2:	9300      	str	r3, [sp, #0]
 801f4b4:	4613      	mov	r3, r2
 801f4b6:	687a      	ldr	r2, [r7, #4]
 801f4b8:	68f9      	ldr	r1, [r7, #12]
 801f4ba:	68f8      	ldr	r0, [r7, #12]
 801f4bc:	f7ff fc94 	bl	801ede8 <mg_uecc_vli_modAdd>
                     num_words); /* t1 = 3*(x1^2 - z1^4) */
  if (mg_uecc_vli_testBit(X1, 0)) {
 801f4c0:	2100      	movs	r1, #0
 801f4c2:	68f8      	ldr	r0, [r7, #12]
 801f4c4:	f7ff f989 	bl	801e7da <mg_uecc_vli_testBit>
 801f4c8:	4603      	mov	r3, r0
 801f4ca:	2b00      	cmp	r3, #0
 801f4cc:	d024      	beq.n	801f518 <double_jacobian_default+0x140>
    mg_uecc_word_t l_carry = mg_uecc_vli_add(X1, X1, curve->p, num_words);
 801f4ce:	683b      	ldr	r3, [r7, #0]
 801f4d0:	1d1a      	adds	r2, r3, #4
 801f4d2:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 801f4d6:	68f9      	ldr	r1, [r7, #12]
 801f4d8:	68f8      	ldr	r0, [r7, #12]
 801f4da:	f7ff fae7 	bl	801eaac <mg_uecc_vli_add>
 801f4de:	6538      	str	r0, [r7, #80]	@ 0x50
    mg_uecc_vli_rshift1(X1, num_words);
 801f4e0:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 801f4e4:	4619      	mov	r1, r3
 801f4e6:	68f8      	ldr	r0, [r7, #12]
 801f4e8:	f7ff fab6 	bl	801ea58 <mg_uecc_vli_rshift1>
    X1[num_words - 1] |= l_carry << (MG_UECC_WORD_BITS - 1);
 801f4ec:	f997 2057 	ldrsb.w	r2, [r7, #87]	@ 0x57
 801f4f0:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801f4f4:	4413      	add	r3, r2
 801f4f6:	009b      	lsls	r3, r3, #2
 801f4f8:	68fa      	ldr	r2, [r7, #12]
 801f4fa:	4413      	add	r3, r2
 801f4fc:	6819      	ldr	r1, [r3, #0]
 801f4fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801f500:	07da      	lsls	r2, r3, #31
 801f502:	f997 0057 	ldrsb.w	r0, [r7, #87]	@ 0x57
 801f506:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801f50a:	4403      	add	r3, r0
 801f50c:	009b      	lsls	r3, r3, #2
 801f50e:	68f8      	ldr	r0, [r7, #12]
 801f510:	4403      	add	r3, r0
 801f512:	430a      	orrs	r2, r1
 801f514:	601a      	str	r2, [r3, #0]
 801f516:	e005      	b.n	801f524 <double_jacobian_default+0x14c>
  } else {
    mg_uecc_vli_rshift1(X1, num_words);
 801f518:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 801f51c:	4619      	mov	r1, r3
 801f51e:	68f8      	ldr	r0, [r7, #12]
 801f520:	f7ff fa9a 	bl	801ea58 <mg_uecc_vli_rshift1>
  }
  /* t1 = 3/2*(x1^2 - z1^4) = B */

  mg_uecc_vli_modSquare_fast(Z1, X1, curve);           /* t3 = B^2 */
 801f524:	683a      	ldr	r2, [r7, #0]
 801f526:	68f9      	ldr	r1, [r7, #12]
 801f528:	6878      	ldr	r0, [r7, #4]
 801f52a:	f7ff fe14 	bl	801f156 <mg_uecc_vli_modSquare_fast>
  mg_uecc_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - A */
 801f52e:	683b      	ldr	r3, [r7, #0]
 801f530:	1d19      	adds	r1, r3, #4
 801f532:	f107 0210 	add.w	r2, r7, #16
 801f536:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 801f53a:	9300      	str	r3, [sp, #0]
 801f53c:	460b      	mov	r3, r1
 801f53e:	6879      	ldr	r1, [r7, #4]
 801f540:	6878      	ldr	r0, [r7, #4]
 801f542:	f7ff fc78 	bl	801ee36 <mg_uecc_vli_modSub>
  mg_uecc_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - 2A = x3 */
 801f546:	683b      	ldr	r3, [r7, #0]
 801f548:	1d19      	adds	r1, r3, #4
 801f54a:	f107 0210 	add.w	r2, r7, #16
 801f54e:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 801f552:	9300      	str	r3, [sp, #0]
 801f554:	460b      	mov	r3, r1
 801f556:	6879      	ldr	r1, [r7, #4]
 801f558:	6878      	ldr	r0, [r7, #4]
 801f55a:	f7ff fc6c 	bl	801ee36 <mg_uecc_vli_modSub>
  mg_uecc_vli_modSub(t5, t5, Z1, curve->p, num_words); /* t5 = A - x3 */
 801f55e:	683b      	ldr	r3, [r7, #0]
 801f560:	1d1a      	adds	r2, r3, #4
 801f562:	f107 0110 	add.w	r1, r7, #16
 801f566:	f107 0010 	add.w	r0, r7, #16
 801f56a:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 801f56e:	9300      	str	r3, [sp, #0]
 801f570:	4613      	mov	r3, r2
 801f572:	687a      	ldr	r2, [r7, #4]
 801f574:	f7ff fc5f 	bl	801ee36 <mg_uecc_vli_modSub>
  mg_uecc_vli_modMult_fast(X1, X1, t5, curve);         /* t1 = B * (A - x3) */
 801f578:	f107 0210 	add.w	r2, r7, #16
 801f57c:	683b      	ldr	r3, [r7, #0]
 801f57e:	68f9      	ldr	r1, [r7, #12]
 801f580:	68f8      	ldr	r0, [r7, #12]
 801f582:	f7ff fdcc 	bl	801f11e <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modSub(t4, X1, t4, curve->p,
 801f586:	683b      	ldr	r3, [r7, #0]
 801f588:	1d19      	adds	r1, r3, #4
 801f58a:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801f58e:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 801f592:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 801f596:	9300      	str	r3, [sp, #0]
 801f598:	460b      	mov	r3, r1
 801f59a:	68f9      	ldr	r1, [r7, #12]
 801f59c:	f7ff fc4b 	bl	801ee36 <mg_uecc_vli_modSub>
                     num_words); /* t4 = B * (A - x3) - y1^4 = y3 */

  mg_uecc_vli_set(X1, Z1, num_words);
 801f5a0:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 801f5a4:	461a      	mov	r2, r3
 801f5a6:	6879      	ldr	r1, [r7, #4]
 801f5a8:	68f8      	ldr	r0, [r7, #12]
 801f5aa:	f7ff f98f 	bl	801e8cc <mg_uecc_vli_set>
  mg_uecc_vli_set(Z1, Y1, num_words);
 801f5ae:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 801f5b2:	461a      	mov	r2, r3
 801f5b4:	68b9      	ldr	r1, [r7, #8]
 801f5b6:	6878      	ldr	r0, [r7, #4]
 801f5b8:	f7ff f988 	bl	801e8cc <mg_uecc_vli_set>
  mg_uecc_vli_set(Y1, t4, num_words);
 801f5bc:	f997 2057 	ldrsb.w	r2, [r7, #87]	@ 0x57
 801f5c0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 801f5c4:	4619      	mov	r1, r3
 801f5c6:	68b8      	ldr	r0, [r7, #8]
 801f5c8:	f7ff f980 	bl	801e8cc <mg_uecc_vli_set>
 801f5cc:	e000      	b.n	801f5d0 <double_jacobian_default+0x1f8>
    return;
 801f5ce:	bf00      	nop
}
 801f5d0:	3758      	adds	r7, #88	@ 0x58
 801f5d2:	46bd      	mov	sp, r7
 801f5d4:	bd80      	pop	{r7, pc}

0801f5d6 <x_side_default>:

/* Computes result = x^3 + ax + b. result must not overlap x. */
static void x_side_default(mg_uecc_word_t *result, const mg_uecc_word_t *x,
                           MG_UECC_Curve curve) {
 801f5d6:	b580      	push	{r7, lr}
 801f5d8:	b090      	sub	sp, #64	@ 0x40
 801f5da:	af02      	add	r7, sp, #8
 801f5dc:	60f8      	str	r0, [r7, #12]
 801f5de:	60b9      	str	r1, [r7, #8]
 801f5e0:	607a      	str	r2, [r7, #4]
  mg_uecc_word_t _3[MG_UECC_MAX_WORDS] = {3}; /* -a = 3 */
 801f5e2:	f107 0314 	add.w	r3, r7, #20
 801f5e6:	2220      	movs	r2, #32
 801f5e8:	2100      	movs	r1, #0
 801f5ea:	4618      	mov	r0, r3
 801f5ec:	f008 f86c 	bl	80276c8 <memset>
 801f5f0:	2303      	movs	r3, #3
 801f5f2:	617b      	str	r3, [r7, #20]
  wordcount_t num_words = curve->num_words;
 801f5f4:	687b      	ldr	r3, [r7, #4]
 801f5f6:	781b      	ldrb	r3, [r3, #0]
 801f5f8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

  mg_uecc_vli_modSquare_fast(result, x, curve);                /* r = x^2 */
 801f5fc:	687a      	ldr	r2, [r7, #4]
 801f5fe:	68b9      	ldr	r1, [r7, #8]
 801f600:	68f8      	ldr	r0, [r7, #12]
 801f602:	f7ff fda8 	bl	801f156 <mg_uecc_vli_modSquare_fast>
  mg_uecc_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
 801f606:	687b      	ldr	r3, [r7, #4]
 801f608:	1d19      	adds	r1, r3, #4
 801f60a:	f107 0214 	add.w	r2, r7, #20
 801f60e:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 801f612:	9300      	str	r3, [sp, #0]
 801f614:	460b      	mov	r3, r1
 801f616:	68f9      	ldr	r1, [r7, #12]
 801f618:	68f8      	ldr	r0, [r7, #12]
 801f61a:	f7ff fc0c 	bl	801ee36 <mg_uecc_vli_modSub>
  mg_uecc_vli_modMult_fast(result, result, x, curve); /* r = x^3 - 3x */
 801f61e:	687b      	ldr	r3, [r7, #4]
 801f620:	68ba      	ldr	r2, [r7, #8]
 801f622:	68f9      	ldr	r1, [r7, #12]
 801f624:	68f8      	ldr	r0, [r7, #12]
 801f626:	f7ff fd7a 	bl	801f11e <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modAdd(result, result, curve->b, curve->p,
 801f62a:	687b      	ldr	r3, [r7, #4]
 801f62c:	f103 0284 	add.w	r2, r3, #132	@ 0x84
 801f630:	687b      	ldr	r3, [r7, #4]
 801f632:	1d19      	adds	r1, r3, #4
 801f634:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 801f638:	9300      	str	r3, [sp, #0]
 801f63a:	460b      	mov	r3, r1
 801f63c:	68f9      	ldr	r1, [r7, #12]
 801f63e:	68f8      	ldr	r0, [r7, #12]
 801f640:	f7ff fbd2 	bl	801ede8 <mg_uecc_vli_modAdd>
                     num_words); /* r = x^3 - 3x + b */
}
 801f644:	bf00      	nop
 801f646:	3738      	adds	r7, #56	@ 0x38
 801f648:	46bd      	mov	sp, r7
 801f64a:	bd80      	pop	{r7, pc}

0801f64c <mod_sqrt_default>:

#if MG_UECC_SUPPORT_COMPRESSED_POINT
#if MG_UECC_SUPPORTS_secp160r1 || MG_UECC_SUPPORTS_secp192r1 || \
    MG_UECC_SUPPORTS_secp256r1 || MG_UECC_SUPPORTS_secp256k1
/* Compute a = sqrt(a) (mod curve_p). */
static void mod_sqrt_default(mg_uecc_word_t *a, MG_UECC_Curve curve) {
 801f64c:	b580      	push	{r7, lr}
 801f64e:	b094      	sub	sp, #80	@ 0x50
 801f650:	af00      	add	r7, sp, #0
 801f652:	6078      	str	r0, [r7, #4]
 801f654:	6039      	str	r1, [r7, #0]
  bitcount_t i;
  mg_uecc_word_t p1[MG_UECC_MAX_WORDS] = {1};
 801f656:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801f65a:	2220      	movs	r2, #32
 801f65c:	2100      	movs	r1, #0
 801f65e:	4618      	mov	r0, r3
 801f660:	f008 f832 	bl	80276c8 <memset>
 801f664:	2301      	movs	r3, #1
 801f666:	62fb      	str	r3, [r7, #44]	@ 0x2c
  mg_uecc_word_t l_result[MG_UECC_MAX_WORDS] = {1};
 801f668:	f107 030c 	add.w	r3, r7, #12
 801f66c:	2220      	movs	r2, #32
 801f66e:	2100      	movs	r1, #0
 801f670:	4618      	mov	r0, r3
 801f672:	f008 f829 	bl	80276c8 <memset>
 801f676:	2301      	movs	r3, #1
 801f678:	60fb      	str	r3, [r7, #12]
  wordcount_t num_words = curve->num_words;
 801f67a:	683b      	ldr	r3, [r7, #0]
 801f67c:	781b      	ldrb	r3, [r3, #0]
 801f67e:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

  /* When curve->p == 3 (mod 4), we can compute
     sqrt(a) = a^((curve->p + 1) / 4) (mod curve->p). */
  mg_uecc_vli_add(p1, curve->p, p1, num_words); /* p1 = curve_p + 1 */
 801f682:	683b      	ldr	r3, [r7, #0]
 801f684:	1d19      	adds	r1, r3, #4
 801f686:	f997 304d 	ldrsb.w	r3, [r7, #77]	@ 0x4d
 801f68a:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 801f68e:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 801f692:	f7ff fa0b 	bl	801eaac <mg_uecc_vli_add>
  for (i = mg_uecc_vli_numBits(p1, num_words) - 1; i > 1; --i) {
 801f696:	f997 204d 	ldrsb.w	r2, [r7, #77]	@ 0x4d
 801f69a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801f69e:	4611      	mov	r1, r2
 801f6a0:	4618      	mov	r0, r3
 801f6a2:	f7ff f8da 	bl	801e85a <mg_uecc_vli_numBits>
 801f6a6:	4603      	mov	r3, r0
 801f6a8:	b29b      	uxth	r3, r3
 801f6aa:	3b01      	subs	r3, #1
 801f6ac:	b29b      	uxth	r3, r3
 801f6ae:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 801f6b2:	e020      	b.n	801f6f6 <mod_sqrt_default+0xaa>
    mg_uecc_vli_modSquare_fast(l_result, l_result, curve);
 801f6b4:	f107 010c 	add.w	r1, r7, #12
 801f6b8:	f107 030c 	add.w	r3, r7, #12
 801f6bc:	683a      	ldr	r2, [r7, #0]
 801f6be:	4618      	mov	r0, r3
 801f6c0:	f7ff fd49 	bl	801f156 <mg_uecc_vli_modSquare_fast>
    if (mg_uecc_vli_testBit(p1, i)) {
 801f6c4:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	@ 0x4e
 801f6c8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801f6cc:	4611      	mov	r1, r2
 801f6ce:	4618      	mov	r0, r3
 801f6d0:	f7ff f883 	bl	801e7da <mg_uecc_vli_testBit>
 801f6d4:	4603      	mov	r3, r0
 801f6d6:	2b00      	cmp	r3, #0
 801f6d8:	d007      	beq.n	801f6ea <mod_sqrt_default+0x9e>
      mg_uecc_vli_modMult_fast(l_result, l_result, a, curve);
 801f6da:	f107 010c 	add.w	r1, r7, #12
 801f6de:	f107 000c 	add.w	r0, r7, #12
 801f6e2:	683b      	ldr	r3, [r7, #0]
 801f6e4:	687a      	ldr	r2, [r7, #4]
 801f6e6:	f7ff fd1a 	bl	801f11e <mg_uecc_vli_modMult_fast>
  for (i = mg_uecc_vli_numBits(p1, num_words) - 1; i > 1; --i) {
 801f6ea:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 801f6ee:	3b01      	subs	r3, #1
 801f6f0:	b29b      	uxth	r3, r3
 801f6f2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 801f6f6:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 801f6fa:	2b01      	cmp	r3, #1
 801f6fc:	dcda      	bgt.n	801f6b4 <mod_sqrt_default+0x68>
    }
  }
  mg_uecc_vli_set(a, l_result, num_words);
 801f6fe:	f997 204d 	ldrsb.w	r2, [r7, #77]	@ 0x4d
 801f702:	f107 030c 	add.w	r3, r7, #12
 801f706:	4619      	mov	r1, r3
 801f708:	6878      	ldr	r0, [r7, #4]
 801f70a:	f7ff f8df 	bl	801e8cc <mg_uecc_vli_set>
}
 801f70e:	bf00      	nop
 801f710:	3750      	adds	r7, #80	@ 0x50
 801f712:	46bd      	mov	sp, r7
 801f714:	bd80      	pop	{r7, pc}
	...

0801f718 <mg_uecc_secp256r1>:
#if (MG_UECC_OPTIMIZATION_LEVEL > 0)
    &vli_mmod_fast_secp256r1
#endif
};

MG_UECC_Curve mg_uecc_secp256r1(void) {
 801f718:	b480      	push	{r7}
 801f71a:	af00      	add	r7, sp, #0
  return &curve_secp256r1;
 801f71c:	4b02      	ldr	r3, [pc, #8]	@ (801f728 <mg_uecc_secp256r1+0x10>)
}
 801f71e:	4618      	mov	r0, r3
 801f720:	46bd      	mov	sp, r7
 801f722:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f726:	4770      	bx	lr
 801f728:	0802d700 	.word	0x0802d700

0801f72c <vli_mmod_fast_secp256r1>:
                               num_words_secp256r1);
    }
  }
}
#elif MG_UECC_WORD_SIZE == 4
static void vli_mmod_fast_secp256r1(uint32_t *result, uint32_t *product) {
 801f72c:	b580      	push	{r7, lr}
 801f72e:	b08c      	sub	sp, #48	@ 0x30
 801f730:	af00      	add	r7, sp, #0
 801f732:	6078      	str	r0, [r7, #4]
 801f734:	6039      	str	r1, [r7, #0]
  uint32_t tmp[num_words_secp256r1];
  int carry;

  /* t */
  mg_uecc_vli_set(result, product, num_words_secp256r1);
 801f736:	2208      	movs	r2, #8
 801f738:	6839      	ldr	r1, [r7, #0]
 801f73a:	6878      	ldr	r0, [r7, #4]
 801f73c:	f7ff f8c6 	bl	801e8cc <mg_uecc_vli_set>

  /* s1 */
  tmp[0] = tmp[1] = tmp[2] = 0;
 801f740:	2300      	movs	r3, #0
 801f742:	617b      	str	r3, [r7, #20]
 801f744:	697b      	ldr	r3, [r7, #20]
 801f746:	613b      	str	r3, [r7, #16]
 801f748:	693b      	ldr	r3, [r7, #16]
 801f74a:	60fb      	str	r3, [r7, #12]
  tmp[3] = product[11];
 801f74c:	683b      	ldr	r3, [r7, #0]
 801f74e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f750:	61bb      	str	r3, [r7, #24]
  tmp[4] = product[12];
 801f752:	683b      	ldr	r3, [r7, #0]
 801f754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801f756:	61fb      	str	r3, [r7, #28]
  tmp[5] = product[13];
 801f758:	683b      	ldr	r3, [r7, #0]
 801f75a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801f75c:	623b      	str	r3, [r7, #32]
  tmp[6] = product[14];
 801f75e:	683b      	ldr	r3, [r7, #0]
 801f760:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801f762:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp[7] = product[15];
 801f764:	683b      	ldr	r3, [r7, #0]
 801f766:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801f768:	62bb      	str	r3, [r7, #40]	@ 0x28
  carry = (int) mg_uecc_vli_add(tmp, tmp, tmp, num_words_secp256r1);
 801f76a:	f107 020c 	add.w	r2, r7, #12
 801f76e:	f107 010c 	add.w	r1, r7, #12
 801f772:	f107 000c 	add.w	r0, r7, #12
 801f776:	2308      	movs	r3, #8
 801f778:	f7ff f998 	bl	801eaac <mg_uecc_vli_add>
 801f77c:	4603      	mov	r3, r0
 801f77e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  carry += (int) mg_uecc_vli_add(result, result, tmp, num_words_secp256r1);
 801f780:	f107 020c 	add.w	r2, r7, #12
 801f784:	2308      	movs	r3, #8
 801f786:	6879      	ldr	r1, [r7, #4]
 801f788:	6878      	ldr	r0, [r7, #4]
 801f78a:	f7ff f98f 	bl	801eaac <mg_uecc_vli_add>
 801f78e:	4603      	mov	r3, r0
 801f790:	461a      	mov	r2, r3
 801f792:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f794:	4413      	add	r3, r2
 801f796:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* s2 */
  tmp[3] = product[12];
 801f798:	683b      	ldr	r3, [r7, #0]
 801f79a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801f79c:	61bb      	str	r3, [r7, #24]
  tmp[4] = product[13];
 801f79e:	683b      	ldr	r3, [r7, #0]
 801f7a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801f7a2:	61fb      	str	r3, [r7, #28]
  tmp[5] = product[14];
 801f7a4:	683b      	ldr	r3, [r7, #0]
 801f7a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801f7a8:	623b      	str	r3, [r7, #32]
  tmp[6] = product[15];
 801f7aa:	683b      	ldr	r3, [r7, #0]
 801f7ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801f7ae:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp[7] = 0;
 801f7b0:	2300      	movs	r3, #0
 801f7b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  carry += (int) mg_uecc_vli_add(tmp, tmp, tmp, num_words_secp256r1);
 801f7b4:	f107 020c 	add.w	r2, r7, #12
 801f7b8:	f107 010c 	add.w	r1, r7, #12
 801f7bc:	f107 000c 	add.w	r0, r7, #12
 801f7c0:	2308      	movs	r3, #8
 801f7c2:	f7ff f973 	bl	801eaac <mg_uecc_vli_add>
 801f7c6:	4603      	mov	r3, r0
 801f7c8:	461a      	mov	r2, r3
 801f7ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f7cc:	4413      	add	r3, r2
 801f7ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  carry += (int) mg_uecc_vli_add(result, result, tmp, num_words_secp256r1);
 801f7d0:	f107 020c 	add.w	r2, r7, #12
 801f7d4:	2308      	movs	r3, #8
 801f7d6:	6879      	ldr	r1, [r7, #4]
 801f7d8:	6878      	ldr	r0, [r7, #4]
 801f7da:	f7ff f967 	bl	801eaac <mg_uecc_vli_add>
 801f7de:	4603      	mov	r3, r0
 801f7e0:	461a      	mov	r2, r3
 801f7e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f7e4:	4413      	add	r3, r2
 801f7e6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* s3 */
  tmp[0] = product[8];
 801f7e8:	683b      	ldr	r3, [r7, #0]
 801f7ea:	6a1b      	ldr	r3, [r3, #32]
 801f7ec:	60fb      	str	r3, [r7, #12]
  tmp[1] = product[9];
 801f7ee:	683b      	ldr	r3, [r7, #0]
 801f7f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801f7f2:	613b      	str	r3, [r7, #16]
  tmp[2] = product[10];
 801f7f4:	683b      	ldr	r3, [r7, #0]
 801f7f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f7f8:	617b      	str	r3, [r7, #20]
  tmp[3] = tmp[4] = tmp[5] = 0;
 801f7fa:	2300      	movs	r3, #0
 801f7fc:	623b      	str	r3, [r7, #32]
 801f7fe:	6a3b      	ldr	r3, [r7, #32]
 801f800:	61fb      	str	r3, [r7, #28]
 801f802:	69fb      	ldr	r3, [r7, #28]
 801f804:	61bb      	str	r3, [r7, #24]
  tmp[6] = product[14];
 801f806:	683b      	ldr	r3, [r7, #0]
 801f808:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801f80a:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp[7] = product[15];
 801f80c:	683b      	ldr	r3, [r7, #0]
 801f80e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801f810:	62bb      	str	r3, [r7, #40]	@ 0x28
  carry += (int) mg_uecc_vli_add(result, result, tmp, num_words_secp256r1);
 801f812:	f107 020c 	add.w	r2, r7, #12
 801f816:	2308      	movs	r3, #8
 801f818:	6879      	ldr	r1, [r7, #4]
 801f81a:	6878      	ldr	r0, [r7, #4]
 801f81c:	f7ff f946 	bl	801eaac <mg_uecc_vli_add>
 801f820:	4603      	mov	r3, r0
 801f822:	461a      	mov	r2, r3
 801f824:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f826:	4413      	add	r3, r2
 801f828:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* s4 */
  tmp[0] = product[9];
 801f82a:	683b      	ldr	r3, [r7, #0]
 801f82c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801f82e:	60fb      	str	r3, [r7, #12]
  tmp[1] = product[10];
 801f830:	683b      	ldr	r3, [r7, #0]
 801f832:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f834:	613b      	str	r3, [r7, #16]
  tmp[2] = product[11];
 801f836:	683b      	ldr	r3, [r7, #0]
 801f838:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f83a:	617b      	str	r3, [r7, #20]
  tmp[3] = product[13];
 801f83c:	683b      	ldr	r3, [r7, #0]
 801f83e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801f840:	61bb      	str	r3, [r7, #24]
  tmp[4] = product[14];
 801f842:	683b      	ldr	r3, [r7, #0]
 801f844:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801f846:	61fb      	str	r3, [r7, #28]
  tmp[5] = product[15];
 801f848:	683b      	ldr	r3, [r7, #0]
 801f84a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801f84c:	623b      	str	r3, [r7, #32]
  tmp[6] = product[13];
 801f84e:	683b      	ldr	r3, [r7, #0]
 801f850:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801f852:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp[7] = product[8];
 801f854:	683b      	ldr	r3, [r7, #0]
 801f856:	6a1b      	ldr	r3, [r3, #32]
 801f858:	62bb      	str	r3, [r7, #40]	@ 0x28
  carry += (int) mg_uecc_vli_add(result, result, tmp, num_words_secp256r1);
 801f85a:	f107 020c 	add.w	r2, r7, #12
 801f85e:	2308      	movs	r3, #8
 801f860:	6879      	ldr	r1, [r7, #4]
 801f862:	6878      	ldr	r0, [r7, #4]
 801f864:	f7ff f922 	bl	801eaac <mg_uecc_vli_add>
 801f868:	4603      	mov	r3, r0
 801f86a:	461a      	mov	r2, r3
 801f86c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f86e:	4413      	add	r3, r2
 801f870:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* d1 */
  tmp[0] = product[11];
 801f872:	683b      	ldr	r3, [r7, #0]
 801f874:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f876:	60fb      	str	r3, [r7, #12]
  tmp[1] = product[12];
 801f878:	683b      	ldr	r3, [r7, #0]
 801f87a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801f87c:	613b      	str	r3, [r7, #16]
  tmp[2] = product[13];
 801f87e:	683b      	ldr	r3, [r7, #0]
 801f880:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801f882:	617b      	str	r3, [r7, #20]
  tmp[3] = tmp[4] = tmp[5] = 0;
 801f884:	2300      	movs	r3, #0
 801f886:	623b      	str	r3, [r7, #32]
 801f888:	6a3b      	ldr	r3, [r7, #32]
 801f88a:	61fb      	str	r3, [r7, #28]
 801f88c:	69fb      	ldr	r3, [r7, #28]
 801f88e:	61bb      	str	r3, [r7, #24]
  tmp[6] = product[8];
 801f890:	683b      	ldr	r3, [r7, #0]
 801f892:	6a1b      	ldr	r3, [r3, #32]
 801f894:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp[7] = product[10];
 801f896:	683b      	ldr	r3, [r7, #0]
 801f898:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f89a:	62bb      	str	r3, [r7, #40]	@ 0x28
  carry -= (int) mg_uecc_vli_sub(result, result, tmp, num_words_secp256r1);
 801f89c:	f107 020c 	add.w	r2, r7, #12
 801f8a0:	2308      	movs	r3, #8
 801f8a2:	6879      	ldr	r1, [r7, #4]
 801f8a4:	6878      	ldr	r0, [r7, #4]
 801f8a6:	f7ff f94b 	bl	801eb40 <mg_uecc_vli_sub>
 801f8aa:	4603      	mov	r3, r0
 801f8ac:	461a      	mov	r2, r3
 801f8ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f8b0:	1a9b      	subs	r3, r3, r2
 801f8b2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* d2 */
  tmp[0] = product[12];
 801f8b4:	683b      	ldr	r3, [r7, #0]
 801f8b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801f8b8:	60fb      	str	r3, [r7, #12]
  tmp[1] = product[13];
 801f8ba:	683b      	ldr	r3, [r7, #0]
 801f8bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801f8be:	613b      	str	r3, [r7, #16]
  tmp[2] = product[14];
 801f8c0:	683b      	ldr	r3, [r7, #0]
 801f8c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801f8c4:	617b      	str	r3, [r7, #20]
  tmp[3] = product[15];
 801f8c6:	683b      	ldr	r3, [r7, #0]
 801f8c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801f8ca:	61bb      	str	r3, [r7, #24]
  tmp[4] = tmp[5] = 0;
 801f8cc:	2300      	movs	r3, #0
 801f8ce:	623b      	str	r3, [r7, #32]
 801f8d0:	6a3b      	ldr	r3, [r7, #32]
 801f8d2:	61fb      	str	r3, [r7, #28]
  tmp[6] = product[9];
 801f8d4:	683b      	ldr	r3, [r7, #0]
 801f8d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801f8d8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp[7] = product[11];
 801f8da:	683b      	ldr	r3, [r7, #0]
 801f8dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f8de:	62bb      	str	r3, [r7, #40]	@ 0x28
  carry -= (int) mg_uecc_vli_sub(result, result, tmp, num_words_secp256r1);
 801f8e0:	f107 020c 	add.w	r2, r7, #12
 801f8e4:	2308      	movs	r3, #8
 801f8e6:	6879      	ldr	r1, [r7, #4]
 801f8e8:	6878      	ldr	r0, [r7, #4]
 801f8ea:	f7ff f929 	bl	801eb40 <mg_uecc_vli_sub>
 801f8ee:	4603      	mov	r3, r0
 801f8f0:	461a      	mov	r2, r3
 801f8f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f8f4:	1a9b      	subs	r3, r3, r2
 801f8f6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* d3 */
  tmp[0] = product[13];
 801f8f8:	683b      	ldr	r3, [r7, #0]
 801f8fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801f8fc:	60fb      	str	r3, [r7, #12]
  tmp[1] = product[14];
 801f8fe:	683b      	ldr	r3, [r7, #0]
 801f900:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801f902:	613b      	str	r3, [r7, #16]
  tmp[2] = product[15];
 801f904:	683b      	ldr	r3, [r7, #0]
 801f906:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801f908:	617b      	str	r3, [r7, #20]
  tmp[3] = product[8];
 801f90a:	683b      	ldr	r3, [r7, #0]
 801f90c:	6a1b      	ldr	r3, [r3, #32]
 801f90e:	61bb      	str	r3, [r7, #24]
  tmp[4] = product[9];
 801f910:	683b      	ldr	r3, [r7, #0]
 801f912:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801f914:	61fb      	str	r3, [r7, #28]
  tmp[5] = product[10];
 801f916:	683b      	ldr	r3, [r7, #0]
 801f918:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f91a:	623b      	str	r3, [r7, #32]
  tmp[6] = 0;
 801f91c:	2300      	movs	r3, #0
 801f91e:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp[7] = product[12];
 801f920:	683b      	ldr	r3, [r7, #0]
 801f922:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801f924:	62bb      	str	r3, [r7, #40]	@ 0x28
  carry -= (int) mg_uecc_vli_sub(result, result, tmp, num_words_secp256r1);
 801f926:	f107 020c 	add.w	r2, r7, #12
 801f92a:	2308      	movs	r3, #8
 801f92c:	6879      	ldr	r1, [r7, #4]
 801f92e:	6878      	ldr	r0, [r7, #4]
 801f930:	f7ff f906 	bl	801eb40 <mg_uecc_vli_sub>
 801f934:	4603      	mov	r3, r0
 801f936:	461a      	mov	r2, r3
 801f938:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f93a:	1a9b      	subs	r3, r3, r2
 801f93c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* d4 */
  tmp[0] = product[14];
 801f93e:	683b      	ldr	r3, [r7, #0]
 801f940:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801f942:	60fb      	str	r3, [r7, #12]
  tmp[1] = product[15];
 801f944:	683b      	ldr	r3, [r7, #0]
 801f946:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801f948:	613b      	str	r3, [r7, #16]
  tmp[2] = 0;
 801f94a:	2300      	movs	r3, #0
 801f94c:	617b      	str	r3, [r7, #20]
  tmp[3] = product[9];
 801f94e:	683b      	ldr	r3, [r7, #0]
 801f950:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801f952:	61bb      	str	r3, [r7, #24]
  tmp[4] = product[10];
 801f954:	683b      	ldr	r3, [r7, #0]
 801f956:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f958:	61fb      	str	r3, [r7, #28]
  tmp[5] = product[11];
 801f95a:	683b      	ldr	r3, [r7, #0]
 801f95c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f95e:	623b      	str	r3, [r7, #32]
  tmp[6] = 0;
 801f960:	2300      	movs	r3, #0
 801f962:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp[7] = product[13];
 801f964:	683b      	ldr	r3, [r7, #0]
 801f966:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801f968:	62bb      	str	r3, [r7, #40]	@ 0x28
  carry -= (int) mg_uecc_vli_sub(result, result, tmp, num_words_secp256r1);
 801f96a:	f107 020c 	add.w	r2, r7, #12
 801f96e:	2308      	movs	r3, #8
 801f970:	6879      	ldr	r1, [r7, #4]
 801f972:	6878      	ldr	r0, [r7, #4]
 801f974:	f7ff f8e4 	bl	801eb40 <mg_uecc_vli_sub>
 801f978:	4603      	mov	r3, r0
 801f97a:	461a      	mov	r2, r3
 801f97c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f97e:	1a9b      	subs	r3, r3, r2
 801f980:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (carry < 0) {
 801f982:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f984:	2b00      	cmp	r3, #0
 801f986:	da19      	bge.n	801f9bc <vli_mmod_fast_secp256r1+0x290>
    do {
      carry += (int) mg_uecc_vli_add(result, result, curve_secp256r1.p,
 801f988:	2308      	movs	r3, #8
 801f98a:	4a14      	ldr	r2, [pc, #80]	@ (801f9dc <vli_mmod_fast_secp256r1+0x2b0>)
 801f98c:	6879      	ldr	r1, [r7, #4]
 801f98e:	6878      	ldr	r0, [r7, #4]
 801f990:	f7ff f88c 	bl	801eaac <mg_uecc_vli_add>
 801f994:	4603      	mov	r3, r0
 801f996:	461a      	mov	r2, r3
 801f998:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f99a:	4413      	add	r3, r2
 801f99c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                     num_words_secp256r1);
    } while (carry < 0);
 801f99e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f9a0:	2b00      	cmp	r3, #0
 801f9a2:	dbf1      	blt.n	801f988 <vli_mmod_fast_secp256r1+0x25c>
                                           num_words_secp256r1) != 1) {
      carry -= (int) mg_uecc_vli_sub(result, result, curve_secp256r1.p,
                                     num_words_secp256r1);
    }
  }
}
 801f9a4:	e015      	b.n	801f9d2 <vli_mmod_fast_secp256r1+0x2a6>
      carry -= (int) mg_uecc_vli_sub(result, result, curve_secp256r1.p,
 801f9a6:	2308      	movs	r3, #8
 801f9a8:	4a0c      	ldr	r2, [pc, #48]	@ (801f9dc <vli_mmod_fast_secp256r1+0x2b0>)
 801f9aa:	6879      	ldr	r1, [r7, #4]
 801f9ac:	6878      	ldr	r0, [r7, #4]
 801f9ae:	f7ff f8c7 	bl	801eb40 <mg_uecc_vli_sub>
 801f9b2:	4603      	mov	r3, r0
 801f9b4:	461a      	mov	r2, r3
 801f9b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f9b8:	1a9b      	subs	r3, r3, r2
 801f9ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (carry || mg_uecc_vli_cmp_unsafe(curve_secp256r1.p, result,
 801f9bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f9be:	2b00      	cmp	r3, #0
 801f9c0:	d1f1      	bne.n	801f9a6 <vli_mmod_fast_secp256r1+0x27a>
 801f9c2:	2208      	movs	r2, #8
 801f9c4:	6879      	ldr	r1, [r7, #4]
 801f9c6:	4805      	ldr	r0, [pc, #20]	@ (801f9dc <vli_mmod_fast_secp256r1+0x2b0>)
 801f9c8:	f7fe ffa7 	bl	801e91a <mg_uecc_vli_cmp_unsafe>
 801f9cc:	4603      	mov	r3, r0
 801f9ce:	2b01      	cmp	r3, #1
 801f9d0:	d1e9      	bne.n	801f9a6 <vli_mmod_fast_secp256r1+0x27a>
}
 801f9d2:	bf00      	nop
 801f9d4:	3730      	adds	r7, #48	@ 0x30
 801f9d6:	46bd      	mov	sp, r7
 801f9d8:	bd80      	pop	{r7, pc}
 801f9da:	bf00      	nop
 801f9dc:	0802d704 	.word	0x0802d704

0801f9e0 <apply_z>:
coordinates. From http://eprint.iacr.org/2011/338.pdf
*/

/* Modify (x1, y1) => (x1 * z^2, y1 * z^3) */
static void apply_z(mg_uecc_word_t *X1, mg_uecc_word_t *Y1,
                    const mg_uecc_word_t *const Z, MG_UECC_Curve curve) {
 801f9e0:	b580      	push	{r7, lr}
 801f9e2:	b08c      	sub	sp, #48	@ 0x30
 801f9e4:	af00      	add	r7, sp, #0
 801f9e6:	60f8      	str	r0, [r7, #12]
 801f9e8:	60b9      	str	r1, [r7, #8]
 801f9ea:	607a      	str	r2, [r7, #4]
 801f9ec:	603b      	str	r3, [r7, #0]
  mg_uecc_word_t t1[MG_UECC_MAX_WORDS];

  mg_uecc_vli_modSquare_fast(t1, Z, curve);    /* z^2 */
 801f9ee:	f107 0310 	add.w	r3, r7, #16
 801f9f2:	683a      	ldr	r2, [r7, #0]
 801f9f4:	6879      	ldr	r1, [r7, #4]
 801f9f6:	4618      	mov	r0, r3
 801f9f8:	f7ff fbad 	bl	801f156 <mg_uecc_vli_modSquare_fast>
  mg_uecc_vli_modMult_fast(X1, X1, t1, curve); /* x1 * z^2 */
 801f9fc:	f107 0210 	add.w	r2, r7, #16
 801fa00:	683b      	ldr	r3, [r7, #0]
 801fa02:	68f9      	ldr	r1, [r7, #12]
 801fa04:	68f8      	ldr	r0, [r7, #12]
 801fa06:	f7ff fb8a 	bl	801f11e <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modMult_fast(t1, t1, Z, curve);  /* z^3 */
 801fa0a:	f107 0110 	add.w	r1, r7, #16
 801fa0e:	f107 0010 	add.w	r0, r7, #16
 801fa12:	683b      	ldr	r3, [r7, #0]
 801fa14:	687a      	ldr	r2, [r7, #4]
 801fa16:	f7ff fb82 	bl	801f11e <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modMult_fast(Y1, Y1, t1, curve); /* y1 * z^3 */
 801fa1a:	f107 0210 	add.w	r2, r7, #16
 801fa1e:	683b      	ldr	r3, [r7, #0]
 801fa20:	68b9      	ldr	r1, [r7, #8]
 801fa22:	68b8      	ldr	r0, [r7, #8]
 801fa24:	f7ff fb7b 	bl	801f11e <mg_uecc_vli_modMult_fast>
}
 801fa28:	bf00      	nop
 801fa2a:	3730      	adds	r7, #48	@ 0x30
 801fa2c:	46bd      	mov	sp, r7
 801fa2e:	bd80      	pop	{r7, pc}

0801fa30 <XYcZ_initial_double>:

/* P = (x1, y1) => 2P, (x2, y2) => P' */
static void XYcZ_initial_double(mg_uecc_word_t *X1, mg_uecc_word_t *Y1,
                                mg_uecc_word_t *X2, mg_uecc_word_t *Y2,
                                const mg_uecc_word_t *const initial_Z,
                                MG_UECC_Curve curve) {
 801fa30:	b590      	push	{r4, r7, lr}
 801fa32:	b08f      	sub	sp, #60	@ 0x3c
 801fa34:	af00      	add	r7, sp, #0
 801fa36:	60f8      	str	r0, [r7, #12]
 801fa38:	60b9      	str	r1, [r7, #8]
 801fa3a:	607a      	str	r2, [r7, #4]
 801fa3c:	603b      	str	r3, [r7, #0]
  mg_uecc_word_t z[MG_UECC_MAX_WORDS];
  wordcount_t num_words = curve->num_words;
 801fa3e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801fa40:	781b      	ldrb	r3, [r3, #0]
 801fa42:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (initial_Z) {
 801fa46:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801fa48:	2b00      	cmp	r3, #0
 801fa4a:	d008      	beq.n	801fa5e <XYcZ_initial_double+0x2e>
    mg_uecc_vli_set(z, initial_Z, num_words);
 801fa4c:	f997 2037 	ldrsb.w	r2, [r7, #55]	@ 0x37
 801fa50:	f107 0314 	add.w	r3, r7, #20
 801fa54:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 801fa56:	4618      	mov	r0, r3
 801fa58:	f7fe ff38 	bl	801e8cc <mg_uecc_vli_set>
 801fa5c:	e009      	b.n	801fa72 <XYcZ_initial_double+0x42>
  } else {
    mg_uecc_vli_clear(z, num_words);
 801fa5e:	f997 2037 	ldrsb.w	r2, [r7, #55]	@ 0x37
 801fa62:	f107 0314 	add.w	r3, r7, #20
 801fa66:	4611      	mov	r1, r2
 801fa68:	4618      	mov	r0, r3
 801fa6a:	f7fe fe6b 	bl	801e744 <mg_uecc_vli_clear>
    z[0] = 1;
 801fa6e:	2301      	movs	r3, #1
 801fa70:	617b      	str	r3, [r7, #20]
  }

  mg_uecc_vli_set(X2, X1, num_words);
 801fa72:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 801fa76:	461a      	mov	r2, r3
 801fa78:	68f9      	ldr	r1, [r7, #12]
 801fa7a:	6878      	ldr	r0, [r7, #4]
 801fa7c:	f7fe ff26 	bl	801e8cc <mg_uecc_vli_set>
  mg_uecc_vli_set(Y2, Y1, num_words);
 801fa80:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 801fa84:	461a      	mov	r2, r3
 801fa86:	68b9      	ldr	r1, [r7, #8]
 801fa88:	6838      	ldr	r0, [r7, #0]
 801fa8a:	f7fe ff1f 	bl	801e8cc <mg_uecc_vli_set>

  apply_z(X1, Y1, z, curve);
 801fa8e:	f107 0214 	add.w	r2, r7, #20
 801fa92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801fa94:	68b9      	ldr	r1, [r7, #8]
 801fa96:	68f8      	ldr	r0, [r7, #12]
 801fa98:	f7ff ffa2 	bl	801f9e0 <apply_z>
  curve->double_jacobian(X1, Y1, z, curve);
 801fa9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801fa9e:	f8d3 40a4 	ldr.w	r4, [r3, #164]	@ 0xa4
 801faa2:	f107 0214 	add.w	r2, r7, #20
 801faa6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801faa8:	68b9      	ldr	r1, [r7, #8]
 801faaa:	68f8      	ldr	r0, [r7, #12]
 801faac:	47a0      	blx	r4
  apply_z(X2, Y2, z, curve);
 801faae:	f107 0214 	add.w	r2, r7, #20
 801fab2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801fab4:	6839      	ldr	r1, [r7, #0]
 801fab6:	6878      	ldr	r0, [r7, #4]
 801fab8:	f7ff ff92 	bl	801f9e0 <apply_z>
}
 801fabc:	bf00      	nop
 801fabe:	373c      	adds	r7, #60	@ 0x3c
 801fac0:	46bd      	mov	sp, r7
 801fac2:	bd90      	pop	{r4, r7, pc}

0801fac4 <XYcZ_add>:
/* Input P = (x1, y1, Z), Q = (x2, y2, Z)
   Output P' = (x1', y1', Z3), P + Q = (x3, y3, Z3)
   or P => P', Q => P + Q
*/
static void XYcZ_add(mg_uecc_word_t *X1, mg_uecc_word_t *Y1, mg_uecc_word_t *X2,
                     mg_uecc_word_t *Y2, MG_UECC_Curve curve) {
 801fac4:	b580      	push	{r7, lr}
 801fac6:	b090      	sub	sp, #64	@ 0x40
 801fac8:	af02      	add	r7, sp, #8
 801faca:	60f8      	str	r0, [r7, #12]
 801facc:	60b9      	str	r1, [r7, #8]
 801face:	607a      	str	r2, [r7, #4]
 801fad0:	603b      	str	r3, [r7, #0]
  /* t1 = X1, t2 = Y1, t3 = X2, t4 = Y2 */
  mg_uecc_word_t t5[MG_UECC_MAX_WORDS] = {0};
 801fad2:	f107 0314 	add.w	r3, r7, #20
 801fad6:	2220      	movs	r2, #32
 801fad8:	2100      	movs	r1, #0
 801fada:	4618      	mov	r0, r3
 801fadc:	f007 fdf4 	bl	80276c8 <memset>
  wordcount_t num_words = curve->num_words;
 801fae0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801fae2:	781b      	ldrb	r3, [r3, #0]
 801fae4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

  mg_uecc_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
 801fae8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801faea:	1d1a      	adds	r2, r3, #4
 801faec:	f107 0014 	add.w	r0, r7, #20
 801faf0:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 801faf4:	9300      	str	r3, [sp, #0]
 801faf6:	4613      	mov	r3, r2
 801faf8:	68fa      	ldr	r2, [r7, #12]
 801fafa:	6879      	ldr	r1, [r7, #4]
 801fafc:	f7ff f99b 	bl	801ee36 <mg_uecc_vli_modSub>
  mg_uecc_vli_modSquare_fast(t5, t5, curve);   /* t5 = (x2 - x1)^2 = A */
 801fb00:	f107 0114 	add.w	r1, r7, #20
 801fb04:	f107 0314 	add.w	r3, r7, #20
 801fb08:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801fb0a:	4618      	mov	r0, r3
 801fb0c:	f7ff fb23 	bl	801f156 <mg_uecc_vli_modSquare_fast>
  mg_uecc_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
 801fb10:	f107 0214 	add.w	r2, r7, #20
 801fb14:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801fb16:	68f9      	ldr	r1, [r7, #12]
 801fb18:	68f8      	ldr	r0, [r7, #12]
 801fb1a:	f7ff fb00 	bl	801f11e <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
 801fb1e:	f107 0214 	add.w	r2, r7, #20
 801fb22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801fb24:	6879      	ldr	r1, [r7, #4]
 801fb26:	6878      	ldr	r0, [r7, #4]
 801fb28:	f7ff faf9 	bl	801f11e <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
 801fb2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801fb2e:	1d1a      	adds	r2, r3, #4
 801fb30:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 801fb34:	9300      	str	r3, [sp, #0]
 801fb36:	4613      	mov	r3, r2
 801fb38:	68ba      	ldr	r2, [r7, #8]
 801fb3a:	6839      	ldr	r1, [r7, #0]
 801fb3c:	6838      	ldr	r0, [r7, #0]
 801fb3e:	f7ff f97a 	bl	801ee36 <mg_uecc_vli_modSub>
  mg_uecc_vli_modSquare_fast(t5, Y2, curve); /* t5 = (y2 - y1)^2 = D */
 801fb42:	f107 0314 	add.w	r3, r7, #20
 801fb46:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801fb48:	6839      	ldr	r1, [r7, #0]
 801fb4a:	4618      	mov	r0, r3
 801fb4c:	f7ff fb03 	bl	801f156 <mg_uecc_vli_modSquare_fast>

  mg_uecc_vli_modSub(t5, t5, X1, curve->p, num_words); /* t5 = D - B */
 801fb50:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801fb52:	1d1a      	adds	r2, r3, #4
 801fb54:	f107 0114 	add.w	r1, r7, #20
 801fb58:	f107 0014 	add.w	r0, r7, #20
 801fb5c:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 801fb60:	9300      	str	r3, [sp, #0]
 801fb62:	4613      	mov	r3, r2
 801fb64:	68fa      	ldr	r2, [r7, #12]
 801fb66:	f7ff f966 	bl	801ee36 <mg_uecc_vli_modSub>
  mg_uecc_vli_modSub(t5, t5, X2, curve->p, num_words); /* t5 = D - B - C = x3 */
 801fb6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801fb6c:	1d1a      	adds	r2, r3, #4
 801fb6e:	f107 0114 	add.w	r1, r7, #20
 801fb72:	f107 0014 	add.w	r0, r7, #20
 801fb76:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 801fb7a:	9300      	str	r3, [sp, #0]
 801fb7c:	4613      	mov	r3, r2
 801fb7e:	687a      	ldr	r2, [r7, #4]
 801fb80:	f7ff f959 	bl	801ee36 <mg_uecc_vli_modSub>
  mg_uecc_vli_modSub(X2, X2, X1, curve->p, num_words); /* t3 = C - B */
 801fb84:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801fb86:	1d1a      	adds	r2, r3, #4
 801fb88:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 801fb8c:	9300      	str	r3, [sp, #0]
 801fb8e:	4613      	mov	r3, r2
 801fb90:	68fa      	ldr	r2, [r7, #12]
 801fb92:	6879      	ldr	r1, [r7, #4]
 801fb94:	6878      	ldr	r0, [r7, #4]
 801fb96:	f7ff f94e 	bl	801ee36 <mg_uecc_vli_modSub>
  mg_uecc_vli_modMult_fast(Y1, Y1, X2, curve);         /* t2 = y1*(C - B) */
 801fb9a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801fb9c:	687a      	ldr	r2, [r7, #4]
 801fb9e:	68b9      	ldr	r1, [r7, #8]
 801fba0:	68b8      	ldr	r0, [r7, #8]
 801fba2:	f7ff fabc 	bl	801f11e <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modSub(X2, X1, t5, curve->p, num_words); /* t3 = B - x3 */
 801fba6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801fba8:	1d19      	adds	r1, r3, #4
 801fbaa:	f107 0214 	add.w	r2, r7, #20
 801fbae:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 801fbb2:	9300      	str	r3, [sp, #0]
 801fbb4:	460b      	mov	r3, r1
 801fbb6:	68f9      	ldr	r1, [r7, #12]
 801fbb8:	6878      	ldr	r0, [r7, #4]
 801fbba:	f7ff f93c 	bl	801ee36 <mg_uecc_vli_modSub>
  mg_uecc_vli_modMult_fast(Y2, Y2, X2, curve); /* t4 = (y2 - y1)*(B - x3) */
 801fbbe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801fbc0:	687a      	ldr	r2, [r7, #4]
 801fbc2:	6839      	ldr	r1, [r7, #0]
 801fbc4:	6838      	ldr	r0, [r7, #0]
 801fbc6:	f7ff faaa 	bl	801f11e <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y3 */
 801fbca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801fbcc:	1d1a      	adds	r2, r3, #4
 801fbce:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 801fbd2:	9300      	str	r3, [sp, #0]
 801fbd4:	4613      	mov	r3, r2
 801fbd6:	68ba      	ldr	r2, [r7, #8]
 801fbd8:	6839      	ldr	r1, [r7, #0]
 801fbda:	6838      	ldr	r0, [r7, #0]
 801fbdc:	f7ff f92b 	bl	801ee36 <mg_uecc_vli_modSub>

  mg_uecc_vli_set(X2, t5, num_words);
 801fbe0:	f997 2037 	ldrsb.w	r2, [r7, #55]	@ 0x37
 801fbe4:	f107 0314 	add.w	r3, r7, #20
 801fbe8:	4619      	mov	r1, r3
 801fbea:	6878      	ldr	r0, [r7, #4]
 801fbec:	f7fe fe6e 	bl	801e8cc <mg_uecc_vli_set>
}
 801fbf0:	bf00      	nop
 801fbf2:	3738      	adds	r7, #56	@ 0x38
 801fbf4:	46bd      	mov	sp, r7
 801fbf6:	bd80      	pop	{r7, pc}

0801fbf8 <XYcZ_addC>:
   Output P + Q = (x3, y3, Z3), P - Q = (x3', y3', Z3)
   or P => P - Q, Q => P + Q
*/
static void XYcZ_addC(mg_uecc_word_t *X1, mg_uecc_word_t *Y1,
                      mg_uecc_word_t *X2, mg_uecc_word_t *Y2,
                      MG_UECC_Curve curve) {
 801fbf8:	b590      	push	{r4, r7, lr}
 801fbfa:	b0a1      	sub	sp, #132	@ 0x84
 801fbfc:	af02      	add	r7, sp, #8
 801fbfe:	60f8      	str	r0, [r7, #12]
 801fc00:	60b9      	str	r1, [r7, #8]
 801fc02:	607a      	str	r2, [r7, #4]
 801fc04:	603b      	str	r3, [r7, #0]
  /* t1 = X1, t2 = Y1, t3 = X2, t4 = Y2 */
  mg_uecc_word_t t5[MG_UECC_MAX_WORDS] = {0};
 801fc06:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 801fc0a:	2220      	movs	r2, #32
 801fc0c:	2100      	movs	r1, #0
 801fc0e:	4618      	mov	r0, r3
 801fc10:	f007 fd5a 	bl	80276c8 <memset>
  mg_uecc_word_t t6[MG_UECC_MAX_WORDS];
  mg_uecc_word_t t7[MG_UECC_MAX_WORDS];
  wordcount_t num_words = curve->num_words;
 801fc14:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801fc18:	781b      	ldrb	r3, [r3, #0]
 801fc1a:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

  mg_uecc_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
 801fc1e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801fc22:	1d1a      	adds	r2, r3, #4
 801fc24:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 801fc28:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 801fc2c:	9300      	str	r3, [sp, #0]
 801fc2e:	4613      	mov	r3, r2
 801fc30:	68fa      	ldr	r2, [r7, #12]
 801fc32:	6879      	ldr	r1, [r7, #4]
 801fc34:	f7ff f8ff 	bl	801ee36 <mg_uecc_vli_modSub>
  mg_uecc_vli_modSquare_fast(t5, t5, curve);   /* t5 = (x2 - x1)^2 = A */
 801fc38:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 801fc3c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 801fc40:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 801fc44:	4618      	mov	r0, r3
 801fc46:	f7ff fa86 	bl	801f156 <mg_uecc_vli_modSquare_fast>
  mg_uecc_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
 801fc4a:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 801fc4e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801fc52:	68f9      	ldr	r1, [r7, #12]
 801fc54:	68f8      	ldr	r0, [r7, #12]
 801fc56:	f7ff fa62 	bl	801f11e <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
 801fc5a:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 801fc5e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801fc62:	6879      	ldr	r1, [r7, #4]
 801fc64:	6878      	ldr	r0, [r7, #4]
 801fc66:	f7ff fa5a 	bl	801f11e <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modAdd(t5, Y2, Y1, curve->p, num_words); /* t5 = y2 + y1 */
 801fc6a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801fc6e:	1d1a      	adds	r2, r3, #4
 801fc70:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 801fc74:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 801fc78:	9300      	str	r3, [sp, #0]
 801fc7a:	4613      	mov	r3, r2
 801fc7c:	68ba      	ldr	r2, [r7, #8]
 801fc7e:	6839      	ldr	r1, [r7, #0]
 801fc80:	f7ff f8b2 	bl	801ede8 <mg_uecc_vli_modAdd>
  mg_uecc_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
 801fc84:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801fc88:	1d1a      	adds	r2, r3, #4
 801fc8a:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 801fc8e:	9300      	str	r3, [sp, #0]
 801fc90:	4613      	mov	r3, r2
 801fc92:	68ba      	ldr	r2, [r7, #8]
 801fc94:	6839      	ldr	r1, [r7, #0]
 801fc96:	6838      	ldr	r0, [r7, #0]
 801fc98:	f7ff f8cd 	bl	801ee36 <mg_uecc_vli_modSub>

  mg_uecc_vli_modSub(t6, X2, X1, curve->p, num_words); /* t6 = C - B */
 801fc9c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801fca0:	1d1a      	adds	r2, r3, #4
 801fca2:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 801fca6:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 801fcaa:	9300      	str	r3, [sp, #0]
 801fcac:	4613      	mov	r3, r2
 801fcae:	68fa      	ldr	r2, [r7, #12]
 801fcb0:	6879      	ldr	r1, [r7, #4]
 801fcb2:	f7ff f8c0 	bl	801ee36 <mg_uecc_vli_modSub>
  mg_uecc_vli_modMult_fast(Y1, Y1, t6, curve); /* t2 = y1 * (C - B) = E */
 801fcb6:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 801fcba:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801fcbe:	68b9      	ldr	r1, [r7, #8]
 801fcc0:	68b8      	ldr	r0, [r7, #8]
 801fcc2:	f7ff fa2c 	bl	801f11e <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modAdd(t6, X1, X2, curve->p, num_words); /* t6 = B + C */
 801fcc6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801fcca:	1d1a      	adds	r2, r3, #4
 801fccc:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 801fcd0:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 801fcd4:	9300      	str	r3, [sp, #0]
 801fcd6:	4613      	mov	r3, r2
 801fcd8:	687a      	ldr	r2, [r7, #4]
 801fcda:	68f9      	ldr	r1, [r7, #12]
 801fcdc:	f7ff f884 	bl	801ede8 <mg_uecc_vli_modAdd>
  mg_uecc_vli_modSquare_fast(X2, Y2, curve); /* t3 = (y2 - y1)^2 = D */
 801fce0:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 801fce4:	6839      	ldr	r1, [r7, #0]
 801fce6:	6878      	ldr	r0, [r7, #4]
 801fce8:	f7ff fa35 	bl	801f156 <mg_uecc_vli_modSquare_fast>
  mg_uecc_vli_modSub(X2, X2, t6, curve->p,
 801fcec:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801fcf0:	1d19      	adds	r1, r3, #4
 801fcf2:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 801fcf6:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 801fcfa:	9300      	str	r3, [sp, #0]
 801fcfc:	460b      	mov	r3, r1
 801fcfe:	6879      	ldr	r1, [r7, #4]
 801fd00:	6878      	ldr	r0, [r7, #4]
 801fd02:	f7ff f898 	bl	801ee36 <mg_uecc_vli_modSub>
                     num_words); /* t3 = D - (B + C) = x3 */

  mg_uecc_vli_modSub(t7, X1, X2, curve->p, num_words); /* t7 = B - x3 */
 801fd06:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801fd0a:	1d1a      	adds	r2, r3, #4
 801fd0c:	f107 0014 	add.w	r0, r7, #20
 801fd10:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 801fd14:	9300      	str	r3, [sp, #0]
 801fd16:	4613      	mov	r3, r2
 801fd18:	687a      	ldr	r2, [r7, #4]
 801fd1a:	68f9      	ldr	r1, [r7, #12]
 801fd1c:	f7ff f88b 	bl	801ee36 <mg_uecc_vli_modSub>
  mg_uecc_vli_modMult_fast(Y2, Y2, t7, curve); /* t4 = (y2 - y1)*(B - x3) */
 801fd20:	f107 0214 	add.w	r2, r7, #20
 801fd24:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801fd28:	6839      	ldr	r1, [r7, #0]
 801fd2a:	6838      	ldr	r0, [r7, #0]
 801fd2c:	f7ff f9f7 	bl	801f11e <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modSub(Y2, Y2, Y1, curve->p,
 801fd30:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801fd34:	1d1a      	adds	r2, r3, #4
 801fd36:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 801fd3a:	9300      	str	r3, [sp, #0]
 801fd3c:	4613      	mov	r3, r2
 801fd3e:	68ba      	ldr	r2, [r7, #8]
 801fd40:	6839      	ldr	r1, [r7, #0]
 801fd42:	6838      	ldr	r0, [r7, #0]
 801fd44:	f7ff f877 	bl	801ee36 <mg_uecc_vli_modSub>
                     num_words); /* t4 = (y2 - y1)*(B - x3) - E = y3 */

  mg_uecc_vli_modSquare_fast(t7, t5, curve); /* t7 = (y2 + y1)^2 = F */
 801fd48:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 801fd4c:	f107 0314 	add.w	r3, r7, #20
 801fd50:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 801fd54:	4618      	mov	r0, r3
 801fd56:	f7ff f9fe 	bl	801f156 <mg_uecc_vli_modSquare_fast>
  mg_uecc_vli_modSub(t7, t7, t6, curve->p,
 801fd5a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801fd5e:	1d1c      	adds	r4, r3, #4
 801fd60:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 801fd64:	f107 0114 	add.w	r1, r7, #20
 801fd68:	f107 0014 	add.w	r0, r7, #20
 801fd6c:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 801fd70:	9300      	str	r3, [sp, #0]
 801fd72:	4623      	mov	r3, r4
 801fd74:	f7ff f85f 	bl	801ee36 <mg_uecc_vli_modSub>
                     num_words); /* t7 = F - (B + C) = x3' */
  mg_uecc_vli_modSub(t6, t7, X1, curve->p, num_words); /* t6 = x3' - B */
 801fd78:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801fd7c:	1d1a      	adds	r2, r3, #4
 801fd7e:	f107 0114 	add.w	r1, r7, #20
 801fd82:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 801fd86:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 801fd8a:	9300      	str	r3, [sp, #0]
 801fd8c:	4613      	mov	r3, r2
 801fd8e:	68fa      	ldr	r2, [r7, #12]
 801fd90:	f7ff f851 	bl	801ee36 <mg_uecc_vli_modSub>
  mg_uecc_vli_modMult_fast(t6, t6, t5, curve); /* t6 = (y2+y1)*(x3' - B) */
 801fd94:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 801fd98:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 801fd9c:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 801fda0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801fda4:	f7ff f9bb 	bl	801f11e <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modSub(Y1, t6, Y1, curve->p,
 801fda8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801fdac:	1d1a      	adds	r2, r3, #4
 801fdae:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 801fdb2:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 801fdb6:	9300      	str	r3, [sp, #0]
 801fdb8:	4613      	mov	r3, r2
 801fdba:	68ba      	ldr	r2, [r7, #8]
 801fdbc:	68b8      	ldr	r0, [r7, #8]
 801fdbe:	f7ff f83a 	bl	801ee36 <mg_uecc_vli_modSub>
                     num_words); /* t2 = (y2+y1)*(x3' - B) - E = y3' */

  mg_uecc_vli_set(X1, t7, num_words);
 801fdc2:	f997 2077 	ldrsb.w	r2, [r7, #119]	@ 0x77
 801fdc6:	f107 0314 	add.w	r3, r7, #20
 801fdca:	4619      	mov	r1, r3
 801fdcc:	68f8      	ldr	r0, [r7, #12]
 801fdce:	f7fe fd7d 	bl	801e8cc <mg_uecc_vli_set>
}
 801fdd2:	bf00      	nop
 801fdd4:	377c      	adds	r7, #124	@ 0x7c
 801fdd6:	46bd      	mov	sp, r7
 801fdd8:	bd90      	pop	{r4, r7, pc}

0801fdda <EccPoint_mult>:

/* result may overlap point. */
static void EccPoint_mult(mg_uecc_word_t *result, const mg_uecc_word_t *point,
                          const mg_uecc_word_t *scalar,
                          const mg_uecc_word_t *initial_Z, bitcount_t num_bits,
                          MG_UECC_Curve curve) {
 801fdda:	b590      	push	{r4, r7, lr}
 801fddc:	b0b1      	sub	sp, #196	@ 0xc4
 801fdde:	af02      	add	r7, sp, #8
 801fde0:	60f8      	str	r0, [r7, #12]
 801fde2:	60b9      	str	r1, [r7, #8]
 801fde4:	607a      	str	r2, [r7, #4]
 801fde6:	603b      	str	r3, [r7, #0]
  mg_uecc_word_t Rx[2][MG_UECC_MAX_WORDS];
  mg_uecc_word_t Ry[2][MG_UECC_MAX_WORDS];
  mg_uecc_word_t z[MG_UECC_MAX_WORDS];
  bitcount_t i;
  mg_uecc_word_t nb;
  wordcount_t num_words = curve->num_words;
 801fde8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801fdec:	781b      	ldrb	r3, [r3, #0]
 801fdee:	f887 30b5 	strb.w	r3, [r7, #181]	@ 0xb5

  mg_uecc_vli_set(Rx[1], point, num_words);
 801fdf2:	f997 20b5 	ldrsb.w	r2, [r7, #181]	@ 0xb5
 801fdf6:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 801fdfa:	3320      	adds	r3, #32
 801fdfc:	68b9      	ldr	r1, [r7, #8]
 801fdfe:	4618      	mov	r0, r3
 801fe00:	f7fe fd64 	bl	801e8cc <mg_uecc_vli_set>
  mg_uecc_vli_set(Ry[1], point + num_words, num_words);
 801fe04:	f997 30b5 	ldrsb.w	r3, [r7, #181]	@ 0xb5
 801fe08:	009b      	lsls	r3, r3, #2
 801fe0a:	68ba      	ldr	r2, [r7, #8]
 801fe0c:	18d1      	adds	r1, r2, r3
 801fe0e:	f997 20b5 	ldrsb.w	r2, [r7, #181]	@ 0xb5
 801fe12:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 801fe16:	3320      	adds	r3, #32
 801fe18:	4618      	mov	r0, r3
 801fe1a:	f7fe fd57 	bl	801e8cc <mg_uecc_vli_set>

  XYcZ_initial_double(Rx[1], Ry[1], Rx[0], Ry[0], initial_Z, curve);
 801fe1e:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 801fe22:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 801fe26:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 801fe2a:	f103 0120 	add.w	r1, r3, #32
 801fe2e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 801fe32:	f103 0020 	add.w	r0, r3, #32
 801fe36:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801fe3a:	9301      	str	r3, [sp, #4]
 801fe3c:	683b      	ldr	r3, [r7, #0]
 801fe3e:	9300      	str	r3, [sp, #0]
 801fe40:	4623      	mov	r3, r4
 801fe42:	f7ff fdf5 	bl	801fa30 <XYcZ_initial_double>

  for (i = num_bits - 2; i > 0; --i) {
 801fe46:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	@ 0xc8
 801fe4a:	3b02      	subs	r3, #2
 801fe4c:	b29b      	uxth	r3, r3
 801fe4e:	f8a7 30b6 	strh.w	r3, [r7, #182]	@ 0xb6
 801fe52:	e059      	b.n	801ff08 <EccPoint_mult+0x12e>
    nb = !mg_uecc_vli_testBit(scalar, i);
 801fe54:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	@ 0xb6
 801fe58:	4619      	mov	r1, r3
 801fe5a:	6878      	ldr	r0, [r7, #4]
 801fe5c:	f7fe fcbd 	bl	801e7da <mg_uecc_vli_testBit>
 801fe60:	4603      	mov	r3, r0
 801fe62:	2b00      	cmp	r3, #0
 801fe64:	bf0c      	ite	eq
 801fe66:	2301      	moveq	r3, #1
 801fe68:	2300      	movne	r3, #0
 801fe6a:	b2db      	uxtb	r3, r3
 801fe6c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
 801fe70:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801fe74:	f1c3 0301 	rsb	r3, r3, #1
 801fe78:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 801fe7c:	015b      	lsls	r3, r3, #5
 801fe7e:	18d0      	adds	r0, r2, r3
 801fe80:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801fe84:	f1c3 0301 	rsb	r3, r3, #1
 801fe88:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801fe8c:	015b      	lsls	r3, r3, #5
 801fe8e:	18d1      	adds	r1, r2, r3
 801fe90:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 801fe94:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801fe98:	015b      	lsls	r3, r3, #5
 801fe9a:	18d4      	adds	r4, r2, r3
 801fe9c:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801fea0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801fea4:	015b      	lsls	r3, r3, #5
 801fea6:	441a      	add	r2, r3
 801fea8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801feac:	9300      	str	r3, [sp, #0]
 801feae:	4613      	mov	r3, r2
 801feb0:	4622      	mov	r2, r4
 801feb2:	f7ff fea1 	bl	801fbf8 <XYcZ_addC>
    XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
 801feb6:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 801feba:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801febe:	015b      	lsls	r3, r3, #5
 801fec0:	18d0      	adds	r0, r2, r3
 801fec2:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801fec6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801feca:	015b      	lsls	r3, r3, #5
 801fecc:	18d1      	adds	r1, r2, r3
 801fece:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801fed2:	f1c3 0301 	rsb	r3, r3, #1
 801fed6:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 801feda:	015b      	lsls	r3, r3, #5
 801fedc:	18d4      	adds	r4, r2, r3
 801fede:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801fee2:	f1c3 0301 	rsb	r3, r3, #1
 801fee6:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801feea:	015b      	lsls	r3, r3, #5
 801feec:	441a      	add	r2, r3
 801feee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801fef2:	9300      	str	r3, [sp, #0]
 801fef4:	4613      	mov	r3, r2
 801fef6:	4622      	mov	r2, r4
 801fef8:	f7ff fde4 	bl	801fac4 <XYcZ_add>
  for (i = num_bits - 2; i > 0; --i) {
 801fefc:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	@ 0xb6
 801ff00:	3b01      	subs	r3, #1
 801ff02:	b29b      	uxth	r3, r3
 801ff04:	f8a7 30b6 	strh.w	r3, [r7, #182]	@ 0xb6
 801ff08:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	@ 0xb6
 801ff0c:	2b00      	cmp	r3, #0
 801ff0e:	dca1      	bgt.n	801fe54 <EccPoint_mult+0x7a>
  }

  nb = !mg_uecc_vli_testBit(scalar, 0);
 801ff10:	2100      	movs	r1, #0
 801ff12:	6878      	ldr	r0, [r7, #4]
 801ff14:	f7fe fc61 	bl	801e7da <mg_uecc_vli_testBit>
 801ff18:	4603      	mov	r3, r0
 801ff1a:	2b00      	cmp	r3, #0
 801ff1c:	bf0c      	ite	eq
 801ff1e:	2301      	moveq	r3, #1
 801ff20:	2300      	movne	r3, #0
 801ff22:	b2db      	uxtb	r3, r3
 801ff24:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
 801ff28:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801ff2c:	f1c3 0301 	rsb	r3, r3, #1
 801ff30:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 801ff34:	015b      	lsls	r3, r3, #5
 801ff36:	18d0      	adds	r0, r2, r3
 801ff38:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801ff3c:	f1c3 0301 	rsb	r3, r3, #1
 801ff40:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801ff44:	015b      	lsls	r3, r3, #5
 801ff46:	18d1      	adds	r1, r2, r3
 801ff48:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 801ff4c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801ff50:	015b      	lsls	r3, r3, #5
 801ff52:	18d4      	adds	r4, r2, r3
 801ff54:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801ff58:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801ff5c:	015b      	lsls	r3, r3, #5
 801ff5e:	441a      	add	r2, r3
 801ff60:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801ff64:	9300      	str	r3, [sp, #0]
 801ff66:	4613      	mov	r3, r2
 801ff68:	4622      	mov	r2, r4
 801ff6a:	f7ff fe45 	bl	801fbf8 <XYcZ_addC>

  /* Find final 1/Z value. */
  mg_uecc_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
 801ff6e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801ff72:	1d1c      	adds	r4, r3, #4
 801ff74:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 801ff78:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 801ff7c:	f103 0120 	add.w	r1, r3, #32
 801ff80:	f107 0010 	add.w	r0, r7, #16
 801ff84:	f997 30b5 	ldrsb.w	r3, [r7, #181]	@ 0xb5
 801ff88:	9300      	str	r3, [sp, #0]
 801ff8a:	4623      	mov	r3, r4
 801ff8c:	f7fe ff53 	bl	801ee36 <mg_uecc_vli_modSub>
  mg_uecc_vli_modMult_fast(z, z, Ry[1 - nb], curve);        /* Yb * (X1 - X0) */
 801ff90:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801ff94:	f1c3 0301 	rsb	r3, r3, #1
 801ff98:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801ff9c:	015b      	lsls	r3, r3, #5
 801ff9e:	441a      	add	r2, r3
 801ffa0:	f107 0110 	add.w	r1, r7, #16
 801ffa4:	f107 0010 	add.w	r0, r7, #16
 801ffa8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801ffac:	f7ff f8b7 	bl	801f11e <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modMult_fast(z, z, point, curve);  /* xP * Yb * (X1 - X0) */
 801ffb0:	f107 0110 	add.w	r1, r7, #16
 801ffb4:	f107 0010 	add.w	r0, r7, #16
 801ffb8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801ffbc:	68ba      	ldr	r2, [r7, #8]
 801ffbe:	f7ff f8ae 	bl	801f11e <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modInv(z, z, curve->p, num_words); /* 1 / (xP * Yb * (X1 - X0)) */
 801ffc2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801ffc6:	1d1a      	adds	r2, r3, #4
 801ffc8:	f997 30b5 	ldrsb.w	r3, [r7, #181]	@ 0xb5
 801ffcc:	f107 0110 	add.w	r1, r7, #16
 801ffd0:	f107 0010 	add.w	r0, r7, #16
 801ffd4:	f7ff f907 	bl	801f1e6 <mg_uecc_vli_modInv>
  /* yP / (xP * Yb * (X1 - X0)) */
  mg_uecc_vli_modMult_fast(z, z, point + num_words, curve);
 801ffd8:	f997 30b5 	ldrsb.w	r3, [r7, #181]	@ 0xb5
 801ffdc:	009b      	lsls	r3, r3, #2
 801ffde:	68ba      	ldr	r2, [r7, #8]
 801ffe0:	441a      	add	r2, r3
 801ffe2:	f107 0110 	add.w	r1, r7, #16
 801ffe6:	f107 0010 	add.w	r0, r7, #16
 801ffea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801ffee:	f7ff f896 	bl	801f11e <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modMult_fast(z, z, Rx[1 - nb],
 801fff2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801fff6:	f1c3 0301 	rsb	r3, r3, #1
 801fffa:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 801fffe:	015b      	lsls	r3, r3, #5
 8020000:	441a      	add	r2, r3
 8020002:	f107 0110 	add.w	r1, r7, #16
 8020006:	f107 0010 	add.w	r0, r7, #16
 802000a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 802000e:	f7ff f886 	bl	801f11e <mg_uecc_vli_modMult_fast>
                           curve); /* Xb * yP / (xP * Yb * (X1 - X0)) */
  /* End 1/Z calculation */

  XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
 8020012:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8020016:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 802001a:	015b      	lsls	r3, r3, #5
 802001c:	18d0      	adds	r0, r2, r3
 802001e:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8020022:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8020026:	015b      	lsls	r3, r3, #5
 8020028:	18d1      	adds	r1, r2, r3
 802002a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 802002e:	f1c3 0301 	rsb	r3, r3, #1
 8020032:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8020036:	015b      	lsls	r3, r3, #5
 8020038:	18d4      	adds	r4, r2, r3
 802003a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 802003e:	f1c3 0301 	rsb	r3, r3, #1
 8020042:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8020046:	015b      	lsls	r3, r3, #5
 8020048:	441a      	add	r2, r3
 802004a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 802004e:	9300      	str	r3, [sp, #0]
 8020050:	4613      	mov	r3, r2
 8020052:	4622      	mov	r2, r4
 8020054:	f7ff fd36 	bl	801fac4 <XYcZ_add>
  apply_z(Rx[0], Ry[0], z, curve);
 8020058:	f107 0210 	add.w	r2, r7, #16
 802005c:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8020060:	f107 0070 	add.w	r0, r7, #112	@ 0x70
 8020064:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8020068:	f7ff fcba 	bl	801f9e0 <apply_z>

  mg_uecc_vli_set(result, Rx[0], num_words);
 802006c:	f997 20b5 	ldrsb.w	r2, [r7, #181]	@ 0xb5
 8020070:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8020074:	4619      	mov	r1, r3
 8020076:	68f8      	ldr	r0, [r7, #12]
 8020078:	f7fe fc28 	bl	801e8cc <mg_uecc_vli_set>
  mg_uecc_vli_set(result + num_words, Ry[0], num_words);
 802007c:	f997 30b5 	ldrsb.w	r3, [r7, #181]	@ 0xb5
 8020080:	009b      	lsls	r3, r3, #2
 8020082:	68fa      	ldr	r2, [r7, #12]
 8020084:	4413      	add	r3, r2
 8020086:	f997 20b5 	ldrsb.w	r2, [r7, #181]	@ 0xb5
 802008a:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 802008e:	4618      	mov	r0, r3
 8020090:	f7fe fc1c 	bl	801e8cc <mg_uecc_vli_set>
}
 8020094:	bf00      	nop
 8020096:	37bc      	adds	r7, #188	@ 0xbc
 8020098:	46bd      	mov	sp, r7
 802009a:	bd90      	pop	{r4, r7, pc}

0802009c <regularize_k>:

static mg_uecc_word_t regularize_k(const mg_uecc_word_t *const k,
                                   mg_uecc_word_t *k0, mg_uecc_word_t *k1,
                                   MG_UECC_Curve curve) {
 802009c:	b580      	push	{r7, lr}
 802009e:	b086      	sub	sp, #24
 80200a0:	af00      	add	r7, sp, #0
 80200a2:	60f8      	str	r0, [r7, #12]
 80200a4:	60b9      	str	r1, [r7, #8]
 80200a6:	607a      	str	r2, [r7, #4]
 80200a8:	603b      	str	r3, [r7, #0]
  wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
 80200aa:	683b      	ldr	r3, [r7, #0]
 80200ac:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80200b0:	331f      	adds	r3, #31
 80200b2:	2b00      	cmp	r3, #0
 80200b4:	da00      	bge.n	80200b8 <regularize_k+0x1c>
 80200b6:	331f      	adds	r3, #31
 80200b8:	115b      	asrs	r3, r3, #5
 80200ba:	75fb      	strb	r3, [r7, #23]
  bitcount_t num_n_bits = curve->num_n_bits;
 80200bc:	683b      	ldr	r3, [r7, #0]
 80200be:	885b      	ldrh	r3, [r3, #2]
 80200c0:	82bb      	strh	r3, [r7, #20]
  mg_uecc_word_t carry =
      mg_uecc_vli_add(k0, k, curve->n, num_n_words) ||
 80200c2:	683b      	ldr	r3, [r7, #0]
 80200c4:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 80200c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80200cc:	68f9      	ldr	r1, [r7, #12]
 80200ce:	68b8      	ldr	r0, [r7, #8]
 80200d0:	f7fe fcec 	bl	801eaac <mg_uecc_vli_add>
 80200d4:	4603      	mov	r3, r0
 80200d6:	2b00      	cmp	r3, #0
 80200d8:	d10f      	bne.n	80200fa <regularize_k+0x5e>
      (num_n_bits < ((bitcount_t) num_n_words * MG_UECC_WORD_SIZE * 8) &&
 80200da:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80200de:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80200e2:	015b      	lsls	r3, r3, #5
      mg_uecc_vli_add(k0, k, curve->n, num_n_words) ||
 80200e4:	429a      	cmp	r2, r3
 80200e6:	da0a      	bge.n	80200fe <regularize_k+0x62>
       mg_uecc_vli_testBit(k0, num_n_bits));
 80200e8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80200ec:	4619      	mov	r1, r3
 80200ee:	68b8      	ldr	r0, [r7, #8]
 80200f0:	f7fe fb73 	bl	801e7da <mg_uecc_vli_testBit>
 80200f4:	4603      	mov	r3, r0
      (num_n_bits < ((bitcount_t) num_n_words * MG_UECC_WORD_SIZE * 8) &&
 80200f6:	2b00      	cmp	r3, #0
 80200f8:	d001      	beq.n	80200fe <regularize_k+0x62>
      mg_uecc_vli_add(k0, k, curve->n, num_n_words) ||
 80200fa:	2301      	movs	r3, #1
 80200fc:	e000      	b.n	8020100 <regularize_k+0x64>
 80200fe:	2300      	movs	r3, #0
  mg_uecc_word_t carry =
 8020100:	613b      	str	r3, [r7, #16]
  mg_uecc_vli_add(k1, k0, curve->n, num_n_words);
 8020102:	683b      	ldr	r3, [r7, #0]
 8020104:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 8020108:	f997 3017 	ldrsb.w	r3, [r7, #23]
 802010c:	68b9      	ldr	r1, [r7, #8]
 802010e:	6878      	ldr	r0, [r7, #4]
 8020110:	f7fe fccc 	bl	801eaac <mg_uecc_vli_add>
  return carry;
 8020114:	693b      	ldr	r3, [r7, #16]
}
 8020116:	4618      	mov	r0, r3
 8020118:	3718      	adds	r7, #24
 802011a:	46bd      	mov	sp, r7
 802011c:	bd80      	pop	{r7, pc}
	...

08020120 <mg_uecc_generate_random_int>:

/* Generates a random integer in the range 0 < random < top.
   Both random and top have num_words words. */
MG_UECC_VLI_API int mg_uecc_generate_random_int(mg_uecc_word_t *random,
                                                const mg_uecc_word_t *top,
                                                wordcount_t num_words) {
 8020120:	b580      	push	{r7, lr}
 8020122:	b088      	sub	sp, #32
 8020124:	af00      	add	r7, sp, #0
 8020126:	60f8      	str	r0, [r7, #12]
 8020128:	60b9      	str	r1, [r7, #8]
 802012a:	4613      	mov	r3, r2
 802012c:	71fb      	strb	r3, [r7, #7]
  mg_uecc_word_t mask = (mg_uecc_word_t) -1;
 802012e:	f04f 33ff 	mov.w	r3, #4294967295
 8020132:	61bb      	str	r3, [r7, #24]
  mg_uecc_word_t tries;
  bitcount_t num_bits = mg_uecc_vli_numBits(top, num_words);
 8020134:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8020138:	4619      	mov	r1, r3
 802013a:	68b8      	ldr	r0, [r7, #8]
 802013c:	f7fe fb8d 	bl	801e85a <mg_uecc_vli_numBits>
 8020140:	4603      	mov	r3, r0
 8020142:	82fb      	strh	r3, [r7, #22]

  if (!g_rng_function) {
 8020144:	4b2a      	ldr	r3, [pc, #168]	@ (80201f0 <mg_uecc_generate_random_int+0xd0>)
 8020146:	681b      	ldr	r3, [r3, #0]
 8020148:	2b00      	cmp	r3, #0
 802014a:	d101      	bne.n	8020150 <mg_uecc_generate_random_int+0x30>
    return 0;
 802014c:	2300      	movs	r3, #0
 802014e:	e04b      	b.n	80201e8 <mg_uecc_generate_random_int+0xc8>
  }

  for (tries = 0; tries < MG_UECC_RNG_MAX_TRIES; ++tries) {
 8020150:	2300      	movs	r3, #0
 8020152:	61fb      	str	r3, [r7, #28]
 8020154:	e044      	b.n	80201e0 <mg_uecc_generate_random_int+0xc0>
    if (!g_rng_function((uint8_t *) random,
 8020156:	4b26      	ldr	r3, [pc, #152]	@ (80201f0 <mg_uecc_generate_random_int+0xd0>)
 8020158:	681b      	ldr	r3, [r3, #0]
                        (unsigned int) (num_words * MG_UECC_WORD_SIZE))) {
 802015a:	f997 2007 	ldrsb.w	r2, [r7, #7]
 802015e:	0092      	lsls	r2, r2, #2
    if (!g_rng_function((uint8_t *) random,
 8020160:	4611      	mov	r1, r2
 8020162:	68f8      	ldr	r0, [r7, #12]
 8020164:	4798      	blx	r3
 8020166:	4603      	mov	r3, r0
 8020168:	2b00      	cmp	r3, #0
 802016a:	d101      	bne.n	8020170 <mg_uecc_generate_random_int+0x50>
      return 0;
 802016c:	2300      	movs	r3, #0
 802016e:	e03b      	b.n	80201e8 <mg_uecc_generate_random_int+0xc8>
    }
    random[num_words - 1] &=
 8020170:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8020174:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8020178:	4413      	add	r3, r2
 802017a:	009b      	lsls	r3, r3, #2
 802017c:	68fa      	ldr	r2, [r7, #12]
 802017e:	4413      	add	r3, r2
 8020180:	6819      	ldr	r1, [r3, #0]
        mask >> ((bitcount_t) (num_words * MG_UECC_WORD_SIZE * 8 - num_bits));
 8020182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8020186:	b29b      	uxth	r3, r3
 8020188:	015b      	lsls	r3, r3, #5
 802018a:	b29a      	uxth	r2, r3
 802018c:	8afb      	ldrh	r3, [r7, #22]
 802018e:	1ad3      	subs	r3, r2, r3
 8020190:	b29b      	uxth	r3, r3
 8020192:	b21b      	sxth	r3, r3
 8020194:	461a      	mov	r2, r3
 8020196:	69bb      	ldr	r3, [r7, #24]
 8020198:	fa23 f202 	lsr.w	r2, r3, r2
    random[num_words - 1] &=
 802019c:	f997 0007 	ldrsb.w	r0, [r7, #7]
 80201a0:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80201a4:	4403      	add	r3, r0
 80201a6:	009b      	lsls	r3, r3, #2
 80201a8:	68f8      	ldr	r0, [r7, #12]
 80201aa:	4403      	add	r3, r0
 80201ac:	400a      	ands	r2, r1
 80201ae:	601a      	str	r2, [r3, #0]
    if (!mg_uecc_vli_isZero(random, num_words) &&
 80201b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80201b4:	4619      	mov	r1, r3
 80201b6:	68f8      	ldr	r0, [r7, #12]
 80201b8:	f7fe fae5 	bl	801e786 <mg_uecc_vli_isZero>
 80201bc:	4603      	mov	r3, r0
 80201be:	2b00      	cmp	r3, #0
 80201c0:	d10b      	bne.n	80201da <mg_uecc_generate_random_int+0xba>
        mg_uecc_vli_cmp(top, random, num_words) == 1) {
 80201c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80201c6:	461a      	mov	r2, r3
 80201c8:	68f9      	ldr	r1, [r7, #12]
 80201ca:	68b8      	ldr	r0, [r7, #8]
 80201cc:	f7fe fc13 	bl	801e9f6 <mg_uecc_vli_cmp>
 80201d0:	4603      	mov	r3, r0
    if (!mg_uecc_vli_isZero(random, num_words) &&
 80201d2:	2b01      	cmp	r3, #1
 80201d4:	d101      	bne.n	80201da <mg_uecc_generate_random_int+0xba>
      return 1;
 80201d6:	2301      	movs	r3, #1
 80201d8:	e006      	b.n	80201e8 <mg_uecc_generate_random_int+0xc8>
  for (tries = 0; tries < MG_UECC_RNG_MAX_TRIES; ++tries) {
 80201da:	69fb      	ldr	r3, [r7, #28]
 80201dc:	3301      	adds	r3, #1
 80201de:	61fb      	str	r3, [r7, #28]
 80201e0:	69fb      	ldr	r3, [r7, #28]
 80201e2:	2b3f      	cmp	r3, #63	@ 0x3f
 80201e4:	d9b7      	bls.n	8020156 <mg_uecc_generate_random_int+0x36>
    }
  }
  return 0;
 80201e6:	2300      	movs	r3, #0
}
 80201e8:	4618      	mov	r0, r3
 80201ea:	3720      	adds	r7, #32
 80201ec:	46bd      	mov	sp, r7
 80201ee:	bd80      	pop	{r7, pc}
 80201f0:	240023a0 	.word	0x240023a0

080201f4 <mg_uecc_vli_nativeToBytes>:
}

#else

MG_UECC_VLI_API void mg_uecc_vli_nativeToBytes(uint8_t *bytes, int num_bytes,
                                               const mg_uecc_word_t *native) {
 80201f4:	b480      	push	{r7}
 80201f6:	b087      	sub	sp, #28
 80201f8:	af00      	add	r7, sp, #0
 80201fa:	60f8      	str	r0, [r7, #12]
 80201fc:	60b9      	str	r1, [r7, #8]
 80201fe:	607a      	str	r2, [r7, #4]
  int i;
  for (i = 0; i < num_bytes; ++i) {
 8020200:	2300      	movs	r3, #0
 8020202:	617b      	str	r3, [r7, #20]
 8020204:	e018      	b.n	8020238 <mg_uecc_vli_nativeToBytes+0x44>
    unsigned b = (unsigned) (num_bytes - 1 - i);
 8020206:	68bb      	ldr	r3, [r7, #8]
 8020208:	1e5a      	subs	r2, r3, #1
 802020a:	697b      	ldr	r3, [r7, #20]
 802020c:	1ad3      	subs	r3, r2, r3
 802020e:	613b      	str	r3, [r7, #16]
    bytes[i] = (uint8_t) (native[b / MG_UECC_WORD_SIZE] >>
 8020210:	693b      	ldr	r3, [r7, #16]
 8020212:	f023 0303 	bic.w	r3, r3, #3
 8020216:	687a      	ldr	r2, [r7, #4]
 8020218:	4413      	add	r3, r2
 802021a:	681a      	ldr	r2, [r3, #0]
                          (8 * (b % MG_UECC_WORD_SIZE)));
 802021c:	693b      	ldr	r3, [r7, #16]
 802021e:	f003 0303 	and.w	r3, r3, #3
 8020222:	00db      	lsls	r3, r3, #3
    bytes[i] = (uint8_t) (native[b / MG_UECC_WORD_SIZE] >>
 8020224:	fa22 f103 	lsr.w	r1, r2, r3
 8020228:	697b      	ldr	r3, [r7, #20]
 802022a:	68fa      	ldr	r2, [r7, #12]
 802022c:	4413      	add	r3, r2
 802022e:	b2ca      	uxtb	r2, r1
 8020230:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < num_bytes; ++i) {
 8020232:	697b      	ldr	r3, [r7, #20]
 8020234:	3301      	adds	r3, #1
 8020236:	617b      	str	r3, [r7, #20]
 8020238:	697a      	ldr	r2, [r7, #20]
 802023a:	68bb      	ldr	r3, [r7, #8]
 802023c:	429a      	cmp	r2, r3
 802023e:	dbe2      	blt.n	8020206 <mg_uecc_vli_nativeToBytes+0x12>
  }
}
 8020240:	bf00      	nop
 8020242:	bf00      	nop
 8020244:	371c      	adds	r7, #28
 8020246:	46bd      	mov	sp, r7
 8020248:	f85d 7b04 	ldr.w	r7, [sp], #4
 802024c:	4770      	bx	lr

0802024e <mg_uecc_vli_bytesToNative>:

MG_UECC_VLI_API void mg_uecc_vli_bytesToNative(mg_uecc_word_t *native,
                                               const uint8_t *bytes,
                                               int num_bytes) {
 802024e:	b580      	push	{r7, lr}
 8020250:	b086      	sub	sp, #24
 8020252:	af00      	add	r7, sp, #0
 8020254:	60f8      	str	r0, [r7, #12]
 8020256:	60b9      	str	r1, [r7, #8]
 8020258:	607a      	str	r2, [r7, #4]
  int i;
  mg_uecc_vli_clear(native,
                    (wordcount_t) ((num_bytes + (MG_UECC_WORD_SIZE - 1)) /
 802025a:	687b      	ldr	r3, [r7, #4]
 802025c:	3303      	adds	r3, #3
 802025e:	2b00      	cmp	r3, #0
 8020260:	da00      	bge.n	8020264 <mg_uecc_vli_bytesToNative+0x16>
 8020262:	3303      	adds	r3, #3
 8020264:	109b      	asrs	r3, r3, #2
  mg_uecc_vli_clear(native,
 8020266:	b25b      	sxtb	r3, r3
 8020268:	4619      	mov	r1, r3
 802026a:	68f8      	ldr	r0, [r7, #12]
 802026c:	f7fe fa6a 	bl	801e744 <mg_uecc_vli_clear>
                                   MG_UECC_WORD_SIZE));
  for (i = 0; i < num_bytes; ++i) {
 8020270:	2300      	movs	r3, #0
 8020272:	617b      	str	r3, [r7, #20]
 8020274:	e01e      	b.n	80202b4 <mg_uecc_vli_bytesToNative+0x66>
    unsigned b = (unsigned) (num_bytes - 1 - i);
 8020276:	687b      	ldr	r3, [r7, #4]
 8020278:	1e5a      	subs	r2, r3, #1
 802027a:	697b      	ldr	r3, [r7, #20]
 802027c:	1ad3      	subs	r3, r2, r3
 802027e:	613b      	str	r3, [r7, #16]
    native[b / MG_UECC_WORD_SIZE] |= (mg_uecc_word_t) bytes[i]
 8020280:	693b      	ldr	r3, [r7, #16]
 8020282:	f023 0303 	bic.w	r3, r3, #3
 8020286:	68fa      	ldr	r2, [r7, #12]
 8020288:	4413      	add	r3, r2
 802028a:	6819      	ldr	r1, [r3, #0]
 802028c:	697b      	ldr	r3, [r7, #20]
 802028e:	68ba      	ldr	r2, [r7, #8]
 8020290:	4413      	add	r3, r2
 8020292:	781b      	ldrb	r3, [r3, #0]
 8020294:	461a      	mov	r2, r3
                                     << (8 * (b % MG_UECC_WORD_SIZE));
 8020296:	693b      	ldr	r3, [r7, #16]
 8020298:	f003 0303 	and.w	r3, r3, #3
 802029c:	00db      	lsls	r3, r3, #3
 802029e:	409a      	lsls	r2, r3
    native[b / MG_UECC_WORD_SIZE] |= (mg_uecc_word_t) bytes[i]
 80202a0:	693b      	ldr	r3, [r7, #16]
 80202a2:	f023 0303 	bic.w	r3, r3, #3
 80202a6:	68f8      	ldr	r0, [r7, #12]
 80202a8:	4403      	add	r3, r0
 80202aa:	430a      	orrs	r2, r1
 80202ac:	601a      	str	r2, [r3, #0]
  for (i = 0; i < num_bytes; ++i) {
 80202ae:	697b      	ldr	r3, [r7, #20]
 80202b0:	3301      	adds	r3, #1
 80202b2:	617b      	str	r3, [r7, #20]
 80202b4:	697a      	ldr	r2, [r7, #20]
 80202b6:	687b      	ldr	r3, [r7, #4]
 80202b8:	429a      	cmp	r2, r3
 80202ba:	dbdc      	blt.n	8020276 <mg_uecc_vli_bytesToNative+0x28>
  }
}
 80202bc:	bf00      	nop
 80202be:	bf00      	nop
 80202c0:	3718      	adds	r7, #24
 80202c2:	46bd      	mov	sp, r7
 80202c4:	bd80      	pop	{r7, pc}

080202c6 <bits2int>:
}

/* -------- ECDSA code -------- */

static void bits2int(mg_uecc_word_t *native, const uint8_t *bits,
                     unsigned bits_size, MG_UECC_Curve curve) {
 80202c6:	b580      	push	{r7, lr}
 80202c8:	b08a      	sub	sp, #40	@ 0x28
 80202ca:	af00      	add	r7, sp, #0
 80202cc:	60f8      	str	r0, [r7, #12]
 80202ce:	60b9      	str	r1, [r7, #8]
 80202d0:	607a      	str	r2, [r7, #4]
 80202d2:	603b      	str	r3, [r7, #0]
  unsigned num_n_bytes = (unsigned) BITS_TO_BYTES(curve->num_n_bits);
 80202d4:	683b      	ldr	r3, [r7, #0]
 80202d6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80202da:	3307      	adds	r3, #7
 80202dc:	2b00      	cmp	r3, #0
 80202de:	da00      	bge.n	80202e2 <bits2int+0x1c>
 80202e0:	3307      	adds	r3, #7
 80202e2:	10db      	asrs	r3, r3, #3
 80202e4:	61fb      	str	r3, [r7, #28]
  unsigned num_n_words = (unsigned) BITS_TO_WORDS(curve->num_n_bits);
 80202e6:	683b      	ldr	r3, [r7, #0]
 80202e8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80202ec:	331f      	adds	r3, #31
 80202ee:	2b00      	cmp	r3, #0
 80202f0:	da00      	bge.n	80202f4 <bits2int+0x2e>
 80202f2:	331f      	adds	r3, #31
 80202f4:	115b      	asrs	r3, r3, #5
 80202f6:	b25b      	sxtb	r3, r3
 80202f8:	61bb      	str	r3, [r7, #24]
  int shift;
  mg_uecc_word_t carry;
  mg_uecc_word_t *ptr;

  if (bits_size > num_n_bytes) {
 80202fa:	687a      	ldr	r2, [r7, #4]
 80202fc:	69fb      	ldr	r3, [r7, #28]
 80202fe:	429a      	cmp	r2, r3
 8020300:	d901      	bls.n	8020306 <bits2int+0x40>
    bits_size = num_n_bytes;
 8020302:	69fb      	ldr	r3, [r7, #28]
 8020304:	607b      	str	r3, [r7, #4]
  }

  mg_uecc_vli_clear(native, (wordcount_t) num_n_words);
 8020306:	69bb      	ldr	r3, [r7, #24]
 8020308:	b25b      	sxtb	r3, r3
 802030a:	4619      	mov	r1, r3
 802030c:	68f8      	ldr	r0, [r7, #12]
 802030e:	f7fe fa19 	bl	801e744 <mg_uecc_vli_clear>
#if MG_UECC_VLI_NATIVE_LITTLE_ENDIAN
  bcopy((uint8_t *) native, bits, bits_size);
#else
  mg_uecc_vli_bytesToNative(native, bits, (int) bits_size);
 8020312:	687b      	ldr	r3, [r7, #4]
 8020314:	461a      	mov	r2, r3
 8020316:	68b9      	ldr	r1, [r7, #8]
 8020318:	68f8      	ldr	r0, [r7, #12]
 802031a:	f7ff ff98 	bl	802024e <mg_uecc_vli_bytesToNative>
#endif
  if (bits_size * 8 <= (unsigned) curve->num_n_bits) {
 802031e:	687b      	ldr	r3, [r7, #4]
 8020320:	00db      	lsls	r3, r3, #3
 8020322:	683a      	ldr	r2, [r7, #0]
 8020324:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8020328:	4293      	cmp	r3, r2
 802032a:	d93a      	bls.n	80203a2 <bits2int+0xdc>
    return;
  }
  shift = (int) bits_size * 8 - curve->num_n_bits;
 802032c:	687b      	ldr	r3, [r7, #4]
 802032e:	00db      	lsls	r3, r3, #3
 8020330:	683a      	ldr	r2, [r7, #0]
 8020332:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8020336:	1a9b      	subs	r3, r3, r2
 8020338:	617b      	str	r3, [r7, #20]
  carry = 0;
 802033a:	2300      	movs	r3, #0
 802033c:	627b      	str	r3, [r7, #36]	@ 0x24
  ptr = native + num_n_words;
 802033e:	69bb      	ldr	r3, [r7, #24]
 8020340:	009b      	lsls	r3, r3, #2
 8020342:	68fa      	ldr	r2, [r7, #12]
 8020344:	4413      	add	r3, r2
 8020346:	623b      	str	r3, [r7, #32]
  while (ptr-- > native) {
 8020348:	e010      	b.n	802036c <bits2int+0xa6>
    mg_uecc_word_t temp = *ptr;
 802034a:	6a3b      	ldr	r3, [r7, #32]
 802034c:	681b      	ldr	r3, [r3, #0]
 802034e:	613b      	str	r3, [r7, #16]
    *ptr = (temp >> shift) | carry;
 8020350:	693a      	ldr	r2, [r7, #16]
 8020352:	697b      	ldr	r3, [r7, #20]
 8020354:	40da      	lsrs	r2, r3
 8020356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020358:	431a      	orrs	r2, r3
 802035a:	6a3b      	ldr	r3, [r7, #32]
 802035c:	601a      	str	r2, [r3, #0]
    carry = temp << (MG_UECC_WORD_BITS - shift);
 802035e:	697b      	ldr	r3, [r7, #20]
 8020360:	f1c3 0320 	rsb	r3, r3, #32
 8020364:	693a      	ldr	r2, [r7, #16]
 8020366:	fa02 f303 	lsl.w	r3, r2, r3
 802036a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (ptr-- > native) {
 802036c:	6a3b      	ldr	r3, [r7, #32]
 802036e:	1f1a      	subs	r2, r3, #4
 8020370:	623a      	str	r2, [r7, #32]
 8020372:	68fa      	ldr	r2, [r7, #12]
 8020374:	429a      	cmp	r2, r3
 8020376:	d3e8      	bcc.n	802034a <bits2int+0x84>
  }

  /* Reduce mod curve_n */
  if (mg_uecc_vli_cmp_unsafe(curve->n, native, (wordcount_t) num_n_words) !=
 8020378:	683b      	ldr	r3, [r7, #0]
 802037a:	3324      	adds	r3, #36	@ 0x24
 802037c:	69ba      	ldr	r2, [r7, #24]
 802037e:	b252      	sxtb	r2, r2
 8020380:	68f9      	ldr	r1, [r7, #12]
 8020382:	4618      	mov	r0, r3
 8020384:	f7fe fac9 	bl	801e91a <mg_uecc_vli_cmp_unsafe>
 8020388:	4603      	mov	r3, r0
 802038a:	2b01      	cmp	r3, #1
 802038c:	d00a      	beq.n	80203a4 <bits2int+0xde>
      1) {
    mg_uecc_vli_sub(native, native, curve->n, (wordcount_t) num_n_words);
 802038e:	683b      	ldr	r3, [r7, #0]
 8020390:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 8020394:	69bb      	ldr	r3, [r7, #24]
 8020396:	b25b      	sxtb	r3, r3
 8020398:	68f9      	ldr	r1, [r7, #12]
 802039a:	68f8      	ldr	r0, [r7, #12]
 802039c:	f7fe fbd0 	bl	801eb40 <mg_uecc_vli_sub>
 80203a0:	e000      	b.n	80203a4 <bits2int+0xde>
    return;
 80203a2:	bf00      	nop
  }
}
 80203a4:	3728      	adds	r7, #40	@ 0x28
 80203a6:	46bd      	mov	sp, r7
 80203a8:	bd80      	pop	{r7, pc}
	...

080203ac <mg_uecc_sign_with_k_internal>:

static int mg_uecc_sign_with_k_internal(const uint8_t *private_key,
                                        const uint8_t *message_hash,
                                        unsigned hash_size, mg_uecc_word_t *k,
                                        uint8_t *signature,
                                        MG_UECC_Curve curve) {
 80203ac:	b590      	push	{r4, r7, lr}
 80203ae:	b0ad      	sub	sp, #180	@ 0xb4
 80203b0:	af02      	add	r7, sp, #8
 80203b2:	60f8      	str	r0, [r7, #12]
 80203b4:	60b9      	str	r1, [r7, #8]
 80203b6:	607a      	str	r2, [r7, #4]
 80203b8:	603b      	str	r3, [r7, #0]
  mg_uecc_word_t tmp[MG_UECC_MAX_WORDS];
  mg_uecc_word_t s[MG_UECC_MAX_WORDS];
  mg_uecc_word_t *k2[2] = {tmp, s};
 80203ba:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80203be:	657b      	str	r3, [r7, #84]	@ 0x54
 80203c0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80203c4:	65bb      	str	r3, [r7, #88]	@ 0x58
  mg_uecc_word_t *initial_Z = 0;
 80203c6:	2300      	movs	r3, #0
 80203c8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  mg_uecc_word_t *p = (mg_uecc_word_t *) signature;
#else
  mg_uecc_word_t p[MG_UECC_MAX_WORDS * 2];
#endif
  mg_uecc_word_t carry;
  wordcount_t num_words = curve->num_words;
 80203cc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80203d0:	781b      	ldrb	r3, [r3, #0]
 80203d2:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
  wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
 80203d6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80203da:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80203de:	331f      	adds	r3, #31
 80203e0:	2b00      	cmp	r3, #0
 80203e2:	da00      	bge.n	80203e6 <mg_uecc_sign_with_k_internal+0x3a>
 80203e4:	331f      	adds	r3, #31
 80203e6:	115b      	asrs	r3, r3, #5
 80203e8:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
  bitcount_t num_n_bits = curve->num_n_bits;
 80203ec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80203f0:	885b      	ldrh	r3, [r3, #2]
 80203f2:	f8a7 30a0 	strh.w	r3, [r7, #160]	@ 0xa0

  /* Make sure 0 < k < curve_n */
  if (mg_uecc_vli_isZero(k, num_words) ||
 80203f6:	f997 30a3 	ldrsb.w	r3, [r7, #163]	@ 0xa3
 80203fa:	4619      	mov	r1, r3
 80203fc:	6838      	ldr	r0, [r7, #0]
 80203fe:	f7fe f9c2 	bl	801e786 <mg_uecc_vli_isZero>
 8020402:	4603      	mov	r3, r0
 8020404:	2b00      	cmp	r3, #0
 8020406:	d10b      	bne.n	8020420 <mg_uecc_sign_with_k_internal+0x74>
      mg_uecc_vli_cmp(curve->n, k, num_n_words) != 1) {
 8020408:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 802040c:	3324      	adds	r3, #36	@ 0x24
 802040e:	f997 20a2 	ldrsb.w	r2, [r7, #162]	@ 0xa2
 8020412:	6839      	ldr	r1, [r7, #0]
 8020414:	4618      	mov	r0, r3
 8020416:	f7fe faee 	bl	801e9f6 <mg_uecc_vli_cmp>
 802041a:	4603      	mov	r3, r0
  if (mg_uecc_vli_isZero(k, num_words) ||
 802041c:	2b01      	cmp	r3, #1
 802041e:	d001      	beq.n	8020424 <mg_uecc_sign_with_k_internal+0x78>
    return 0;
 8020420:	2300      	movs	r3, #0
 8020422:	e128      	b.n	8020676 <mg_uecc_sign_with_k_internal+0x2ca>
  }

  carry = regularize_k(k, tmp, s, curve);
 8020424:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 8020428:	f107 017c 	add.w	r1, r7, #124	@ 0x7c
 802042c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8020430:	6838      	ldr	r0, [r7, #0]
 8020432:	f7ff fe33 	bl	802009c <regularize_k>
 8020436:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
  /* If an RNG function was specified, try to get a random initial Z value to
     improve protection against side-channel attacks. */
  if (g_rng_function) {
 802043a:	4b91      	ldr	r3, [pc, #580]	@ (8020680 <mg_uecc_sign_with_k_internal+0x2d4>)
 802043c:	681b      	ldr	r3, [r3, #0]
 802043e:	2b00      	cmp	r3, #0
 8020440:	d01c      	beq.n	802047c <mg_uecc_sign_with_k_internal+0xd0>
    if (!mg_uecc_generate_random_int(k2[carry], curve->p, num_words)) {
 8020442:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8020446:	009b      	lsls	r3, r3, #2
 8020448:	33a8      	adds	r3, #168	@ 0xa8
 802044a:	443b      	add	r3, r7
 802044c:	f853 0c54 	ldr.w	r0, [r3, #-84]
 8020450:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8020454:	3304      	adds	r3, #4
 8020456:	f997 20a3 	ldrsb.w	r2, [r7, #163]	@ 0xa3
 802045a:	4619      	mov	r1, r3
 802045c:	f7ff fe60 	bl	8020120 <mg_uecc_generate_random_int>
 8020460:	4603      	mov	r3, r0
 8020462:	2b00      	cmp	r3, #0
 8020464:	d101      	bne.n	802046a <mg_uecc_sign_with_k_internal+0xbe>
      return 0;
 8020466:	2300      	movs	r3, #0
 8020468:	e105      	b.n	8020676 <mg_uecc_sign_with_k_internal+0x2ca>
    }
    initial_Z = k2[carry];
 802046a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 802046e:	009b      	lsls	r3, r3, #2
 8020470:	33a8      	adds	r3, #168	@ 0xa8
 8020472:	443b      	add	r3, r7
 8020474:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8020478:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  }
  EccPoint_mult(p, curve->G, k2[!carry], initial_Z,
 802047c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8020480:	f103 0144 	add.w	r1, r3, #68	@ 0x44
 8020484:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8020488:	2b00      	cmp	r3, #0
 802048a:	bf0c      	ite	eq
 802048c:	2301      	moveq	r3, #1
 802048e:	2300      	movne	r3, #0
 8020490:	b2db      	uxtb	r3, r3
 8020492:	009b      	lsls	r3, r3, #2
 8020494:	33a8      	adds	r3, #168	@ 0xa8
 8020496:	443b      	add	r3, r7
 8020498:	f853 4c54 	ldr.w	r4, [r3, #-84]
                (bitcount_t) (num_n_bits + 1), curve);
 802049c:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	@ 0xa0
 80204a0:	3301      	adds	r3, #1
 80204a2:	b29b      	uxth	r3, r3
  EccPoint_mult(p, curve->G, k2[!carry], initial_Z,
 80204a4:	b21b      	sxth	r3, r3
 80204a6:	f107 0014 	add.w	r0, r7, #20
 80204aa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80204ae:	9201      	str	r2, [sp, #4]
 80204b0:	9300      	str	r3, [sp, #0]
 80204b2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80204b6:	4622      	mov	r2, r4
 80204b8:	f7ff fc8f 	bl	801fdda <EccPoint_mult>
  if (mg_uecc_vli_isZero(p, num_words)) {
 80204bc:	f997 20a3 	ldrsb.w	r2, [r7, #163]	@ 0xa3
 80204c0:	f107 0314 	add.w	r3, r7, #20
 80204c4:	4611      	mov	r1, r2
 80204c6:	4618      	mov	r0, r3
 80204c8:	f7fe f95d 	bl	801e786 <mg_uecc_vli_isZero>
 80204cc:	4603      	mov	r3, r0
 80204ce:	2b00      	cmp	r3, #0
 80204d0:	d001      	beq.n	80204d6 <mg_uecc_sign_with_k_internal+0x12a>
    return 0;
 80204d2:	2300      	movs	r3, #0
 80204d4:	e0cf      	b.n	8020676 <mg_uecc_sign_with_k_internal+0x2ca>
  }

  /* If an RNG function was specified, get a random number
     to prevent side channel analysis of k. */
  if (!g_rng_function) {
 80204d6:	4b6a      	ldr	r3, [pc, #424]	@ (8020680 <mg_uecc_sign_with_k_internal+0x2d4>)
 80204d8:	681b      	ldr	r3, [r3, #0]
 80204da:	2b00      	cmp	r3, #0
 80204dc:	d10a      	bne.n	80204f4 <mg_uecc_sign_with_k_internal+0x148>
    mg_uecc_vli_clear(tmp, num_n_words);
 80204de:	f997 20a2 	ldrsb.w	r2, [r7, #162]	@ 0xa2
 80204e2:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80204e6:	4611      	mov	r1, r2
 80204e8:	4618      	mov	r0, r3
 80204ea:	f7fe f92b 	bl	801e744 <mg_uecc_vli_clear>
    tmp[0] = 1;
 80204ee:	2301      	movs	r3, #1
 80204f0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80204f2:	e00f      	b.n	8020514 <mg_uecc_sign_with_k_internal+0x168>
  } else if (!mg_uecc_generate_random_int(tmp, curve->n, num_n_words)) {
 80204f4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80204f8:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 80204fc:	f997 20a2 	ldrsb.w	r2, [r7, #162]	@ 0xa2
 8020500:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8020504:	4618      	mov	r0, r3
 8020506:	f7ff fe0b 	bl	8020120 <mg_uecc_generate_random_int>
 802050a:	4603      	mov	r3, r0
 802050c:	2b00      	cmp	r3, #0
 802050e:	d101      	bne.n	8020514 <mg_uecc_sign_with_k_internal+0x168>
    return 0;
 8020510:	2300      	movs	r3, #0
 8020512:	e0b0      	b.n	8020676 <mg_uecc_sign_with_k_internal+0x2ca>
  }

  /* Prevent side channel analysis of mg_uecc_vli_modInv() to determine
     bits of k / the private key by premultiplying by a random number */
  mg_uecc_vli_modMult(k, k, tmp, curve->n, num_n_words); /* k' = rand * k */
 8020514:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8020518:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 802051c:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 8020520:	f997 30a2 	ldrsb.w	r3, [r7, #162]	@ 0xa2
 8020524:	9300      	str	r3, [sp, #0]
 8020526:	460b      	mov	r3, r1
 8020528:	6839      	ldr	r1, [r7, #0]
 802052a:	6838      	ldr	r0, [r7, #0]
 802052c:	f7fe fddc 	bl	801f0e8 <mg_uecc_vli_modMult>
  mg_uecc_vli_modInv(k, k, curve->n, num_n_words);       /* k = 1 / k' */
 8020530:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8020534:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 8020538:	f997 30a2 	ldrsb.w	r3, [r7, #162]	@ 0xa2
 802053c:	6839      	ldr	r1, [r7, #0]
 802053e:	6838      	ldr	r0, [r7, #0]
 8020540:	f7fe fe51 	bl	801f1e6 <mg_uecc_vli_modInv>
  mg_uecc_vli_modMult(k, k, tmp, curve->n, num_n_words); /* k = 1 / k */
 8020544:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8020548:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 802054c:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 8020550:	f997 30a2 	ldrsb.w	r3, [r7, #162]	@ 0xa2
 8020554:	9300      	str	r3, [sp, #0]
 8020556:	460b      	mov	r3, r1
 8020558:	6839      	ldr	r1, [r7, #0]
 802055a:	6838      	ldr	r0, [r7, #0]
 802055c:	f7fe fdc4 	bl	801f0e8 <mg_uecc_vli_modMult>

#if MG_UECC_VLI_NATIVE_LITTLE_ENDIAN == 0
  mg_uecc_vli_nativeToBytes(signature, curve->num_bytes, p); /* store r */
 8020560:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8020564:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8020568:	4619      	mov	r1, r3
 802056a:	f107 0314 	add.w	r3, r7, #20
 802056e:	461a      	mov	r2, r3
 8020570:	f8d7 00b8 	ldr.w	r0, [r7, #184]	@ 0xb8
 8020574:	f7ff fe3e 	bl	80201f4 <mg_uecc_vli_nativeToBytes>

#if MG_UECC_VLI_NATIVE_LITTLE_ENDIAN
  bcopy((uint8_t *) tmp, private_key, BITS_TO_BYTES(curve->num_n_bits));
#else
  mg_uecc_vli_bytesToNative(tmp, private_key,
                            BITS_TO_BYTES(curve->num_n_bits)); /* tmp = d */
 8020578:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 802057c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8020580:	3307      	adds	r3, #7
  mg_uecc_vli_bytesToNative(tmp, private_key,
 8020582:	2b00      	cmp	r3, #0
 8020584:	da00      	bge.n	8020588 <mg_uecc_sign_with_k_internal+0x1dc>
 8020586:	3307      	adds	r3, #7
 8020588:	10db      	asrs	r3, r3, #3
 802058a:	461a      	mov	r2, r3
 802058c:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8020590:	68f9      	ldr	r1, [r7, #12]
 8020592:	4618      	mov	r0, r3
 8020594:	f7ff fe5b 	bl	802024e <mg_uecc_vli_bytesToNative>
#endif

  s[num_n_words - 1] = 0;
 8020598:	f997 30a2 	ldrsb.w	r3, [r7, #162]	@ 0xa2
 802059c:	3b01      	subs	r3, #1
 802059e:	009b      	lsls	r3, r3, #2
 80205a0:	33a8      	adds	r3, #168	@ 0xa8
 80205a2:	443b      	add	r3, r7
 80205a4:	2200      	movs	r2, #0
 80205a6:	f843 2c4c 	str.w	r2, [r3, #-76]
  mg_uecc_vli_set(s, p, num_words);
 80205aa:	f997 20a3 	ldrsb.w	r2, [r7, #163]	@ 0xa3
 80205ae:	f107 0114 	add.w	r1, r7, #20
 80205b2:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80205b6:	4618      	mov	r0, r3
 80205b8:	f7fe f988 	bl	801e8cc <mg_uecc_vli_set>
  mg_uecc_vli_modMult(s, tmp, s, curve->n, num_n_words); /* s = r*d */
 80205bc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80205c0:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 80205c4:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 80205c8:	f107 017c 	add.w	r1, r7, #124	@ 0x7c
 80205cc:	f107 005c 	add.w	r0, r7, #92	@ 0x5c
 80205d0:	f997 30a2 	ldrsb.w	r3, [r7, #162]	@ 0xa2
 80205d4:	9300      	str	r3, [sp, #0]
 80205d6:	4623      	mov	r3, r4
 80205d8:	f7fe fd86 	bl	801f0e8 <mg_uecc_vli_modMult>

  bits2int(tmp, message_hash, hash_size, curve);
 80205dc:	f107 007c 	add.w	r0, r7, #124	@ 0x7c
 80205e0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80205e4:	687a      	ldr	r2, [r7, #4]
 80205e6:	68b9      	ldr	r1, [r7, #8]
 80205e8:	f7ff fe6d 	bl	80202c6 <bits2int>
  mg_uecc_vli_modAdd(s, tmp, s, curve->n, num_n_words); /* s = e + r*d */
 80205ec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80205f0:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 80205f4:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 80205f8:	f107 017c 	add.w	r1, r7, #124	@ 0x7c
 80205fc:	f107 005c 	add.w	r0, r7, #92	@ 0x5c
 8020600:	f997 30a2 	ldrsb.w	r3, [r7, #162]	@ 0xa2
 8020604:	9300      	str	r3, [sp, #0]
 8020606:	4623      	mov	r3, r4
 8020608:	f7fe fbee 	bl	801ede8 <mg_uecc_vli_modAdd>
  mg_uecc_vli_modMult(s, s, k, curve->n, num_n_words);  /* s = (e + r*d) / k */
 802060c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8020610:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 8020614:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 8020618:	f107 005c 	add.w	r0, r7, #92	@ 0x5c
 802061c:	f997 30a2 	ldrsb.w	r3, [r7, #162]	@ 0xa2
 8020620:	9300      	str	r3, [sp, #0]
 8020622:	4613      	mov	r3, r2
 8020624:	683a      	ldr	r2, [r7, #0]
 8020626:	f7fe fd5f 	bl	801f0e8 <mg_uecc_vli_modMult>
  if (mg_uecc_vli_numBits(s, num_n_words) > (bitcount_t) curve->num_bytes * 8) {
 802062a:	f997 20a2 	ldrsb.w	r2, [r7, #162]	@ 0xa2
 802062e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8020632:	4611      	mov	r1, r2
 8020634:	4618      	mov	r0, r3
 8020636:	f7fe f910 	bl	801e85a <mg_uecc_vli_numBits>
 802063a:	4603      	mov	r3, r0
 802063c:	461a      	mov	r2, r3
 802063e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8020642:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8020646:	00db      	lsls	r3, r3, #3
 8020648:	429a      	cmp	r2, r3
 802064a:	dd01      	ble.n	8020650 <mg_uecc_sign_with_k_internal+0x2a4>
    return 0;
 802064c:	2300      	movs	r3, #0
 802064e:	e012      	b.n	8020676 <mg_uecc_sign_with_k_internal+0x2ca>
  }
#if MG_UECC_VLI_NATIVE_LITTLE_ENDIAN
  bcopy((uint8_t *) signature + curve->num_bytes, (uint8_t *) s,
        curve->num_bytes);
#else
  mg_uecc_vli_nativeToBytes(signature + curve->num_bytes, curve->num_bytes, s);
 8020650:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8020654:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8020658:	461a      	mov	r2, r3
 802065a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 802065e:	1898      	adds	r0, r3, r2
 8020660:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8020664:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8020668:	4619      	mov	r1, r3
 802066a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 802066e:	461a      	mov	r2, r3
 8020670:	f7ff fdc0 	bl	80201f4 <mg_uecc_vli_nativeToBytes>
#endif
  return 1;
 8020674:	2301      	movs	r3, #1
}
 8020676:	4618      	mov	r0, r3
 8020678:	37ac      	adds	r7, #172	@ 0xac
 802067a:	46bd      	mov	sp, r7
 802067c:	bd90      	pop	{r4, r7, pc}
 802067e:	bf00      	nop
 8020680:	240023a0 	.word	0x240023a0

08020684 <HMAC_init>:
}

/* Compute an HMAC using K as a key (as in RFC 6979). Note that K is always
   the same size as the hash result size. */
static void HMAC_init(const MG_UECC_HashContext *hash_context,
                      const uint8_t *K) {
 8020684:	b580      	push	{r7, lr}
 8020686:	b084      	sub	sp, #16
 8020688:	af00      	add	r7, sp, #0
 802068a:	6078      	str	r0, [r7, #4]
 802068c:	6039      	str	r1, [r7, #0]
  uint8_t *pad = hash_context->tmp + 2 * hash_context->result_size;
 802068e:	687b      	ldr	r3, [r7, #4]
 8020690:	695a      	ldr	r2, [r3, #20]
 8020692:	687b      	ldr	r3, [r7, #4]
 8020694:	691b      	ldr	r3, [r3, #16]
 8020696:	005b      	lsls	r3, r3, #1
 8020698:	4413      	add	r3, r2
 802069a:	60bb      	str	r3, [r7, #8]
  unsigned i;
  for (i = 0; i < hash_context->result_size; ++i) pad[i] = K[i] ^ 0x36;
 802069c:	2300      	movs	r3, #0
 802069e:	60fb      	str	r3, [r7, #12]
 80206a0:	e00d      	b.n	80206be <HMAC_init+0x3a>
 80206a2:	683a      	ldr	r2, [r7, #0]
 80206a4:	68fb      	ldr	r3, [r7, #12]
 80206a6:	4413      	add	r3, r2
 80206a8:	781a      	ldrb	r2, [r3, #0]
 80206aa:	68b9      	ldr	r1, [r7, #8]
 80206ac:	68fb      	ldr	r3, [r7, #12]
 80206ae:	440b      	add	r3, r1
 80206b0:	f082 0236 	eor.w	r2, r2, #54	@ 0x36
 80206b4:	b2d2      	uxtb	r2, r2
 80206b6:	701a      	strb	r2, [r3, #0]
 80206b8:	68fb      	ldr	r3, [r7, #12]
 80206ba:	3301      	adds	r3, #1
 80206bc:	60fb      	str	r3, [r7, #12]
 80206be:	687b      	ldr	r3, [r7, #4]
 80206c0:	691b      	ldr	r3, [r3, #16]
 80206c2:	68fa      	ldr	r2, [r7, #12]
 80206c4:	429a      	cmp	r2, r3
 80206c6:	d3ec      	bcc.n	80206a2 <HMAC_init+0x1e>
  for (; i < hash_context->block_size; ++i) pad[i] = 0x36;
 80206c8:	e007      	b.n	80206da <HMAC_init+0x56>
 80206ca:	68ba      	ldr	r2, [r7, #8]
 80206cc:	68fb      	ldr	r3, [r7, #12]
 80206ce:	4413      	add	r3, r2
 80206d0:	2236      	movs	r2, #54	@ 0x36
 80206d2:	701a      	strb	r2, [r3, #0]
 80206d4:	68fb      	ldr	r3, [r7, #12]
 80206d6:	3301      	adds	r3, #1
 80206d8:	60fb      	str	r3, [r7, #12]
 80206da:	687b      	ldr	r3, [r7, #4]
 80206dc:	68db      	ldr	r3, [r3, #12]
 80206de:	68fa      	ldr	r2, [r7, #12]
 80206e0:	429a      	cmp	r2, r3
 80206e2:	d3f2      	bcc.n	80206ca <HMAC_init+0x46>

  hash_context->init_hash(hash_context);
 80206e4:	687b      	ldr	r3, [r7, #4]
 80206e6:	681b      	ldr	r3, [r3, #0]
 80206e8:	6878      	ldr	r0, [r7, #4]
 80206ea:	4798      	blx	r3
  hash_context->update_hash(hash_context, pad, hash_context->block_size);
 80206ec:	687b      	ldr	r3, [r7, #4]
 80206ee:	685b      	ldr	r3, [r3, #4]
 80206f0:	687a      	ldr	r2, [r7, #4]
 80206f2:	68d2      	ldr	r2, [r2, #12]
 80206f4:	68b9      	ldr	r1, [r7, #8]
 80206f6:	6878      	ldr	r0, [r7, #4]
 80206f8:	4798      	blx	r3
}
 80206fa:	bf00      	nop
 80206fc:	3710      	adds	r7, #16
 80206fe:	46bd      	mov	sp, r7
 8020700:	bd80      	pop	{r7, pc}

08020702 <HMAC_update>:

static void HMAC_update(const MG_UECC_HashContext *hash_context,
                        const uint8_t *message, unsigned message_size) {
 8020702:	b580      	push	{r7, lr}
 8020704:	b084      	sub	sp, #16
 8020706:	af00      	add	r7, sp, #0
 8020708:	60f8      	str	r0, [r7, #12]
 802070a:	60b9      	str	r1, [r7, #8]
 802070c:	607a      	str	r2, [r7, #4]
  hash_context->update_hash(hash_context, message, message_size);
 802070e:	68fb      	ldr	r3, [r7, #12]
 8020710:	685b      	ldr	r3, [r3, #4]
 8020712:	687a      	ldr	r2, [r7, #4]
 8020714:	68b9      	ldr	r1, [r7, #8]
 8020716:	68f8      	ldr	r0, [r7, #12]
 8020718:	4798      	blx	r3
}
 802071a:	bf00      	nop
 802071c:	3710      	adds	r7, #16
 802071e:	46bd      	mov	sp, r7
 8020720:	bd80      	pop	{r7, pc}

08020722 <HMAC_finish>:

static void HMAC_finish(const MG_UECC_HashContext *hash_context,
                        const uint8_t *K, uint8_t *result) {
 8020722:	b580      	push	{r7, lr}
 8020724:	b086      	sub	sp, #24
 8020726:	af00      	add	r7, sp, #0
 8020728:	60f8      	str	r0, [r7, #12]
 802072a:	60b9      	str	r1, [r7, #8]
 802072c:	607a      	str	r2, [r7, #4]
  uint8_t *pad = hash_context->tmp + 2 * hash_context->result_size;
 802072e:	68fb      	ldr	r3, [r7, #12]
 8020730:	695a      	ldr	r2, [r3, #20]
 8020732:	68fb      	ldr	r3, [r7, #12]
 8020734:	691b      	ldr	r3, [r3, #16]
 8020736:	005b      	lsls	r3, r3, #1
 8020738:	4413      	add	r3, r2
 802073a:	613b      	str	r3, [r7, #16]
  unsigned i;
  for (i = 0; i < hash_context->result_size; ++i) pad[i] = K[i] ^ 0x5c;
 802073c:	2300      	movs	r3, #0
 802073e:	617b      	str	r3, [r7, #20]
 8020740:	e00d      	b.n	802075e <HMAC_finish+0x3c>
 8020742:	68ba      	ldr	r2, [r7, #8]
 8020744:	697b      	ldr	r3, [r7, #20]
 8020746:	4413      	add	r3, r2
 8020748:	781a      	ldrb	r2, [r3, #0]
 802074a:	6939      	ldr	r1, [r7, #16]
 802074c:	697b      	ldr	r3, [r7, #20]
 802074e:	440b      	add	r3, r1
 8020750:	f082 025c 	eor.w	r2, r2, #92	@ 0x5c
 8020754:	b2d2      	uxtb	r2, r2
 8020756:	701a      	strb	r2, [r3, #0]
 8020758:	697b      	ldr	r3, [r7, #20]
 802075a:	3301      	adds	r3, #1
 802075c:	617b      	str	r3, [r7, #20]
 802075e:	68fb      	ldr	r3, [r7, #12]
 8020760:	691b      	ldr	r3, [r3, #16]
 8020762:	697a      	ldr	r2, [r7, #20]
 8020764:	429a      	cmp	r2, r3
 8020766:	d3ec      	bcc.n	8020742 <HMAC_finish+0x20>
  for (; i < hash_context->block_size; ++i) pad[i] = 0x5c;
 8020768:	e007      	b.n	802077a <HMAC_finish+0x58>
 802076a:	693a      	ldr	r2, [r7, #16]
 802076c:	697b      	ldr	r3, [r7, #20]
 802076e:	4413      	add	r3, r2
 8020770:	225c      	movs	r2, #92	@ 0x5c
 8020772:	701a      	strb	r2, [r3, #0]
 8020774:	697b      	ldr	r3, [r7, #20]
 8020776:	3301      	adds	r3, #1
 8020778:	617b      	str	r3, [r7, #20]
 802077a:	68fb      	ldr	r3, [r7, #12]
 802077c:	68db      	ldr	r3, [r3, #12]
 802077e:	697a      	ldr	r2, [r7, #20]
 8020780:	429a      	cmp	r2, r3
 8020782:	d3f2      	bcc.n	802076a <HMAC_finish+0x48>

  hash_context->finish_hash(hash_context, result);
 8020784:	68fb      	ldr	r3, [r7, #12]
 8020786:	689b      	ldr	r3, [r3, #8]
 8020788:	6879      	ldr	r1, [r7, #4]
 802078a:	68f8      	ldr	r0, [r7, #12]
 802078c:	4798      	blx	r3

  hash_context->init_hash(hash_context);
 802078e:	68fb      	ldr	r3, [r7, #12]
 8020790:	681b      	ldr	r3, [r3, #0]
 8020792:	68f8      	ldr	r0, [r7, #12]
 8020794:	4798      	blx	r3
  hash_context->update_hash(hash_context, pad, hash_context->block_size);
 8020796:	68fb      	ldr	r3, [r7, #12]
 8020798:	685b      	ldr	r3, [r3, #4]
 802079a:	68fa      	ldr	r2, [r7, #12]
 802079c:	68d2      	ldr	r2, [r2, #12]
 802079e:	6939      	ldr	r1, [r7, #16]
 80207a0:	68f8      	ldr	r0, [r7, #12]
 80207a2:	4798      	blx	r3
  hash_context->update_hash(hash_context, result, hash_context->result_size);
 80207a4:	68fb      	ldr	r3, [r7, #12]
 80207a6:	685b      	ldr	r3, [r3, #4]
 80207a8:	68fa      	ldr	r2, [r7, #12]
 80207aa:	6912      	ldr	r2, [r2, #16]
 80207ac:	6879      	ldr	r1, [r7, #4]
 80207ae:	68f8      	ldr	r0, [r7, #12]
 80207b0:	4798      	blx	r3
  hash_context->finish_hash(hash_context, result);
 80207b2:	68fb      	ldr	r3, [r7, #12]
 80207b4:	689b      	ldr	r3, [r3, #8]
 80207b6:	6879      	ldr	r1, [r7, #4]
 80207b8:	68f8      	ldr	r0, [r7, #12]
 80207ba:	4798      	blx	r3
}
 80207bc:	bf00      	nop
 80207be:	3718      	adds	r7, #24
 80207c0:	46bd      	mov	sp, r7
 80207c2:	bd80      	pop	{r7, pc}

080207c4 <update_V>:

/* V = HMAC_K(V) */
static void update_V(const MG_UECC_HashContext *hash_context, uint8_t *K,
                     uint8_t *V) {
 80207c4:	b580      	push	{r7, lr}
 80207c6:	b084      	sub	sp, #16
 80207c8:	af00      	add	r7, sp, #0
 80207ca:	60f8      	str	r0, [r7, #12]
 80207cc:	60b9      	str	r1, [r7, #8]
 80207ce:	607a      	str	r2, [r7, #4]
  HMAC_init(hash_context, K);
 80207d0:	68b9      	ldr	r1, [r7, #8]
 80207d2:	68f8      	ldr	r0, [r7, #12]
 80207d4:	f7ff ff56 	bl	8020684 <HMAC_init>
  HMAC_update(hash_context, V, hash_context->result_size);
 80207d8:	68fb      	ldr	r3, [r7, #12]
 80207da:	691b      	ldr	r3, [r3, #16]
 80207dc:	461a      	mov	r2, r3
 80207de:	6879      	ldr	r1, [r7, #4]
 80207e0:	68f8      	ldr	r0, [r7, #12]
 80207e2:	f7ff ff8e 	bl	8020702 <HMAC_update>
  HMAC_finish(hash_context, K, V);
 80207e6:	687a      	ldr	r2, [r7, #4]
 80207e8:	68b9      	ldr	r1, [r7, #8]
 80207ea:	68f8      	ldr	r0, [r7, #12]
 80207ec:	f7ff ff99 	bl	8020722 <HMAC_finish>
}
 80207f0:	bf00      	nop
 80207f2:	3710      	adds	r7, #16
 80207f4:	46bd      	mov	sp, r7
 80207f6:	bd80      	pop	{r7, pc}

080207f8 <mg_uecc_sign_deterministic>:
   Layout of hash_context->tmp: <K> | <V> | (1 byte overlapped 0x00 or 0x01) /
   <HMAC pad> */
int mg_uecc_sign_deterministic(const uint8_t *private_key,
                               const uint8_t *message_hash, unsigned hash_size,
                               const MG_UECC_HashContext *hash_context,
                               uint8_t *signature, MG_UECC_Curve curve) {
 80207f8:	b580      	push	{r7, lr}
 80207fa:	b096      	sub	sp, #88	@ 0x58
 80207fc:	af02      	add	r7, sp, #8
 80207fe:	60f8      	str	r0, [r7, #12]
 8020800:	60b9      	str	r1, [r7, #8]
 8020802:	607a      	str	r2, [r7, #4]
 8020804:	603b      	str	r3, [r7, #0]
  uint8_t *K = hash_context->tmp;
 8020806:	683b      	ldr	r3, [r7, #0]
 8020808:	695b      	ldr	r3, [r3, #20]
 802080a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint8_t *V = K + hash_context->result_size;
 802080c:	683b      	ldr	r3, [r7, #0]
 802080e:	691b      	ldr	r3, [r3, #16]
 8020810:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8020812:	4413      	add	r3, r2
 8020814:	63fb      	str	r3, [r7, #60]	@ 0x3c
  wordcount_t num_bytes = curve->num_bytes;
 8020816:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8020818:	785b      	ldrb	r3, [r3, #1]
 802081a:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
 802081e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8020820:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8020824:	331f      	adds	r3, #31
 8020826:	2b00      	cmp	r3, #0
 8020828:	da00      	bge.n	802082c <mg_uecc_sign_deterministic+0x34>
 802082a:	331f      	adds	r3, #31
 802082c:	115b      	asrs	r3, r3, #5
 802082e:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  bitcount_t num_n_bits = curve->num_n_bits;
 8020832:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8020834:	885b      	ldrh	r3, [r3, #2]
 8020836:	873b      	strh	r3, [r7, #56]	@ 0x38
  mg_uecc_word_t tries;
  unsigned i;
  for (i = 0; i < hash_context->result_size; ++i) {
 8020838:	2300      	movs	r3, #0
 802083a:	64bb      	str	r3, [r7, #72]	@ 0x48
 802083c:	e00c      	b.n	8020858 <mg_uecc_sign_deterministic+0x60>
    V[i] = 0x01;
 802083e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8020840:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8020842:	4413      	add	r3, r2
 8020844:	2201      	movs	r2, #1
 8020846:	701a      	strb	r2, [r3, #0]
    K[i] = 0;
 8020848:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 802084a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802084c:	4413      	add	r3, r2
 802084e:	2200      	movs	r2, #0
 8020850:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < hash_context->result_size; ++i) {
 8020852:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8020854:	3301      	adds	r3, #1
 8020856:	64bb      	str	r3, [r7, #72]	@ 0x48
 8020858:	683b      	ldr	r3, [r7, #0]
 802085a:	691b      	ldr	r3, [r3, #16]
 802085c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 802085e:	429a      	cmp	r2, r3
 8020860:	d3ed      	bcc.n	802083e <mg_uecc_sign_deterministic+0x46>
  }

  /* K = HMAC_K(V || 0x00 || int2octets(x) || h(m)) */
  HMAC_init(hash_context, K);
 8020862:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8020864:	6838      	ldr	r0, [r7, #0]
 8020866:	f7ff ff0d 	bl	8020684 <HMAC_init>
  V[hash_context->result_size] = 0x00;
 802086a:	683b      	ldr	r3, [r7, #0]
 802086c:	691b      	ldr	r3, [r3, #16]
 802086e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8020870:	4413      	add	r3, r2
 8020872:	2200      	movs	r2, #0
 8020874:	701a      	strb	r2, [r3, #0]
  HMAC_update(hash_context, V, hash_context->result_size + 1);
 8020876:	683b      	ldr	r3, [r7, #0]
 8020878:	691b      	ldr	r3, [r3, #16]
 802087a:	3301      	adds	r3, #1
 802087c:	461a      	mov	r2, r3
 802087e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8020880:	6838      	ldr	r0, [r7, #0]
 8020882:	f7ff ff3e 	bl	8020702 <HMAC_update>
  HMAC_update(hash_context, private_key, (unsigned int) num_bytes);
 8020886:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 802088a:	461a      	mov	r2, r3
 802088c:	68f9      	ldr	r1, [r7, #12]
 802088e:	6838      	ldr	r0, [r7, #0]
 8020890:	f7ff ff37 	bl	8020702 <HMAC_update>
  HMAC_update(hash_context, message_hash, hash_size);
 8020894:	687a      	ldr	r2, [r7, #4]
 8020896:	68b9      	ldr	r1, [r7, #8]
 8020898:	6838      	ldr	r0, [r7, #0]
 802089a:	f7ff ff32 	bl	8020702 <HMAC_update>
  HMAC_finish(hash_context, K, K);
 802089e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80208a0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80208a2:	6838      	ldr	r0, [r7, #0]
 80208a4:	f7ff ff3d 	bl	8020722 <HMAC_finish>

  update_V(hash_context, K, V);
 80208a8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80208aa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80208ac:	6838      	ldr	r0, [r7, #0]
 80208ae:	f7ff ff89 	bl	80207c4 <update_V>

  /* K = HMAC_K(V || 0x01 || int2octets(x) || h(m)) */
  HMAC_init(hash_context, K);
 80208b2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80208b4:	6838      	ldr	r0, [r7, #0]
 80208b6:	f7ff fee5 	bl	8020684 <HMAC_init>
  V[hash_context->result_size] = 0x01;
 80208ba:	683b      	ldr	r3, [r7, #0]
 80208bc:	691b      	ldr	r3, [r3, #16]
 80208be:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80208c0:	4413      	add	r3, r2
 80208c2:	2201      	movs	r2, #1
 80208c4:	701a      	strb	r2, [r3, #0]
  HMAC_update(hash_context, V, hash_context->result_size + 1);
 80208c6:	683b      	ldr	r3, [r7, #0]
 80208c8:	691b      	ldr	r3, [r3, #16]
 80208ca:	3301      	adds	r3, #1
 80208cc:	461a      	mov	r2, r3
 80208ce:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80208d0:	6838      	ldr	r0, [r7, #0]
 80208d2:	f7ff ff16 	bl	8020702 <HMAC_update>
  HMAC_update(hash_context, private_key, (unsigned int) num_bytes);
 80208d6:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 80208da:	461a      	mov	r2, r3
 80208dc:	68f9      	ldr	r1, [r7, #12]
 80208de:	6838      	ldr	r0, [r7, #0]
 80208e0:	f7ff ff0f 	bl	8020702 <HMAC_update>
  HMAC_update(hash_context, message_hash, hash_size);
 80208e4:	687a      	ldr	r2, [r7, #4]
 80208e6:	68b9      	ldr	r1, [r7, #8]
 80208e8:	6838      	ldr	r0, [r7, #0]
 80208ea:	f7ff ff0a 	bl	8020702 <HMAC_update>
  HMAC_finish(hash_context, K, K);
 80208ee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80208f0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80208f2:	6838      	ldr	r0, [r7, #0]
 80208f4:	f7ff ff15 	bl	8020722 <HMAC_finish>

  update_V(hash_context, K, V);
 80208f8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80208fa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80208fc:	6838      	ldr	r0, [r7, #0]
 80208fe:	f7ff ff61 	bl	80207c4 <update_V>

  for (tries = 0; tries < MG_UECC_RNG_MAX_TRIES; ++tries) {
 8020902:	2300      	movs	r3, #0
 8020904:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8020906:	e084      	b.n	8020a12 <mg_uecc_sign_deterministic+0x21a>
    mg_uecc_word_t T[MG_UECC_MAX_WORDS];
    uint8_t *T_ptr = (uint8_t *) T;
 8020908:	f107 0310 	add.w	r3, r7, #16
 802090c:	637b      	str	r3, [r7, #52]	@ 0x34
    wordcount_t T_bytes = 0;
 802090e:	2300      	movs	r3, #0
 8020910:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    for (;;) {
      update_V(hash_context, K, V);
 8020914:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8020916:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8020918:	6838      	ldr	r0, [r7, #0]
 802091a:	f7ff ff53 	bl	80207c4 <update_V>
      for (i = 0; i < hash_context->result_size; ++i) {
 802091e:	2300      	movs	r3, #0
 8020920:	64bb      	str	r3, [r7, #72]	@ 0x48
 8020922:	e017      	b.n	8020954 <mg_uecc_sign_deterministic+0x15c>
        T_ptr[T_bytes++] = V[i];
 8020924:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8020926:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8020928:	441a      	add	r2, r3
 802092a:	f997 1047 	ldrsb.w	r1, [r7, #71]	@ 0x47
 802092e:	b2cb      	uxtb	r3, r1
 8020930:	3301      	adds	r3, #1
 8020932:	b2db      	uxtb	r3, r3
 8020934:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8020938:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802093a:	440b      	add	r3, r1
 802093c:	7812      	ldrb	r2, [r2, #0]
 802093e:	701a      	strb	r2, [r3, #0]
        if (T_bytes >= num_n_words * MG_UECC_WORD_SIZE) {
 8020940:	f997 2047 	ldrsb.w	r2, [r7, #71]	@ 0x47
 8020944:	f997 303a 	ldrsb.w	r3, [r7, #58]	@ 0x3a
 8020948:	009b      	lsls	r3, r3, #2
 802094a:	429a      	cmp	r2, r3
 802094c:	da08      	bge.n	8020960 <mg_uecc_sign_deterministic+0x168>
      for (i = 0; i < hash_context->result_size; ++i) {
 802094e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8020950:	3301      	adds	r3, #1
 8020952:	64bb      	str	r3, [r7, #72]	@ 0x48
 8020954:	683b      	ldr	r3, [r7, #0]
 8020956:	691b      	ldr	r3, [r3, #16]
 8020958:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 802095a:	429a      	cmp	r2, r3
 802095c:	d3e2      	bcc.n	8020924 <mg_uecc_sign_deterministic+0x12c>
      update_V(hash_context, K, V);
 802095e:	e7d9      	b.n	8020914 <mg_uecc_sign_deterministic+0x11c>
          goto filled;
 8020960:	bf00      	nop
        }
      }
    }
  filled:
    if ((bitcount_t) num_n_words * MG_UECC_WORD_SIZE * 8 > num_n_bits) {
 8020962:	f997 303a 	ldrsb.w	r3, [r7, #58]	@ 0x3a
 8020966:	015a      	lsls	r2, r3, #5
 8020968:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 802096c:	429a      	cmp	r2, r3
 802096e:	dd20      	ble.n	80209b2 <mg_uecc_sign_deterministic+0x1ba>
      mg_uecc_word_t mask = (mg_uecc_word_t) -1;
 8020970:	f04f 33ff 	mov.w	r3, #4294967295
 8020974:	633b      	str	r3, [r7, #48]	@ 0x30
      T[num_n_words - 1] &=
 8020976:	f997 303a 	ldrsb.w	r3, [r7, #58]	@ 0x3a
 802097a:	3b01      	subs	r3, #1
 802097c:	009b      	lsls	r3, r3, #2
 802097e:	3350      	adds	r3, #80	@ 0x50
 8020980:	443b      	add	r3, r7
 8020982:	f853 1c40 	ldr.w	r1, [r3, #-64]
          mask >>
          ((bitcount_t) (num_n_words * MG_UECC_WORD_SIZE * 8 - num_n_bits));
 8020986:	f997 303a 	ldrsb.w	r3, [r7, #58]	@ 0x3a
 802098a:	b29b      	uxth	r3, r3
 802098c:	015b      	lsls	r3, r3, #5
 802098e:	b29a      	uxth	r2, r3
 8020990:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8020992:	1ad3      	subs	r3, r2, r3
 8020994:	b29b      	uxth	r3, r3
 8020996:	b21b      	sxth	r3, r3
 8020998:	461a      	mov	r2, r3
          mask >>
 802099a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802099c:	fa23 f202 	lsr.w	r2, r3, r2
      T[num_n_words - 1] &=
 80209a0:	f997 303a 	ldrsb.w	r3, [r7, #58]	@ 0x3a
 80209a4:	3b01      	subs	r3, #1
 80209a6:	400a      	ands	r2, r1
 80209a8:	009b      	lsls	r3, r3, #2
 80209aa:	3350      	adds	r3, #80	@ 0x50
 80209ac:	443b      	add	r3, r7
 80209ae:	f843 2c40 	str.w	r2, [r3, #-64]
    }

    if (mg_uecc_sign_with_k_internal(private_key, message_hash, hash_size, T,
 80209b2:	f107 0210 	add.w	r2, r7, #16
 80209b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80209b8:	9301      	str	r3, [sp, #4]
 80209ba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80209bc:	9300      	str	r3, [sp, #0]
 80209be:	4613      	mov	r3, r2
 80209c0:	687a      	ldr	r2, [r7, #4]
 80209c2:	68b9      	ldr	r1, [r7, #8]
 80209c4:	68f8      	ldr	r0, [r7, #12]
 80209c6:	f7ff fcf1 	bl	80203ac <mg_uecc_sign_with_k_internal>
 80209ca:	4603      	mov	r3, r0
 80209cc:	2b00      	cmp	r3, #0
 80209ce:	d001      	beq.n	80209d4 <mg_uecc_sign_deterministic+0x1dc>
                                     signature, curve)) {
      return 1;
 80209d0:	2301      	movs	r3, #1
 80209d2:	e023      	b.n	8020a1c <mg_uecc_sign_deterministic+0x224>
    }

    /* K = HMAC_K(V || 0x00) */
    HMAC_init(hash_context, K);
 80209d4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80209d6:	6838      	ldr	r0, [r7, #0]
 80209d8:	f7ff fe54 	bl	8020684 <HMAC_init>
    V[hash_context->result_size] = 0x00;
 80209dc:	683b      	ldr	r3, [r7, #0]
 80209de:	691b      	ldr	r3, [r3, #16]
 80209e0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80209e2:	4413      	add	r3, r2
 80209e4:	2200      	movs	r2, #0
 80209e6:	701a      	strb	r2, [r3, #0]
    HMAC_update(hash_context, V, hash_context->result_size + 1);
 80209e8:	683b      	ldr	r3, [r7, #0]
 80209ea:	691b      	ldr	r3, [r3, #16]
 80209ec:	3301      	adds	r3, #1
 80209ee:	461a      	mov	r2, r3
 80209f0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80209f2:	6838      	ldr	r0, [r7, #0]
 80209f4:	f7ff fe85 	bl	8020702 <HMAC_update>
    HMAC_finish(hash_context, K, K);
 80209f8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80209fa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80209fc:	6838      	ldr	r0, [r7, #0]
 80209fe:	f7ff fe90 	bl	8020722 <HMAC_finish>

    update_V(hash_context, K, V);
 8020a02:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8020a04:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8020a06:	6838      	ldr	r0, [r7, #0]
 8020a08:	f7ff fedc 	bl	80207c4 <update_V>
  for (tries = 0; tries < MG_UECC_RNG_MAX_TRIES; ++tries) {
 8020a0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8020a0e:	3301      	adds	r3, #1
 8020a10:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8020a12:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8020a14:	2b3f      	cmp	r3, #63	@ 0x3f
 8020a16:	f67f af77 	bls.w	8020908 <mg_uecc_sign_deterministic+0x110>
  }
  return 0;
 8020a1a:	2300      	movs	r3, #0
}
 8020a1c:	4618      	mov	r0, r3
 8020a1e:	3750      	adds	r7, #80	@ 0x50
 8020a20:	46bd      	mov	sp, r7
 8020a22:	bd80      	pop	{r7, pc}

08020a24 <smax>:

static bitcount_t smax(bitcount_t a, bitcount_t b) {
 8020a24:	b480      	push	{r7}
 8020a26:	b083      	sub	sp, #12
 8020a28:	af00      	add	r7, sp, #0
 8020a2a:	4603      	mov	r3, r0
 8020a2c:	460a      	mov	r2, r1
 8020a2e:	80fb      	strh	r3, [r7, #6]
 8020a30:	4613      	mov	r3, r2
 8020a32:	80bb      	strh	r3, [r7, #4]
  return (a > b ? a : b);
 8020a34:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8020a38:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8020a3c:	4293      	cmp	r3, r2
 8020a3e:	bfb8      	it	lt
 8020a40:	4613      	movlt	r3, r2
 8020a42:	b21b      	sxth	r3, r3
}
 8020a44:	4618      	mov	r0, r3
 8020a46:	370c      	adds	r7, #12
 8020a48:	46bd      	mov	sp, r7
 8020a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020a4e:	4770      	bx	lr

08020a50 <mg_uecc_verify>:

int mg_uecc_verify(const uint8_t *public_key, const uint8_t *message_hash,
                   unsigned hash_size, const uint8_t *signature,
                   MG_UECC_Curve curve) {
 8020a50:	b590      	push	{r4, r7, lr}
 8020a52:	b0ff      	sub	sp, #508	@ 0x1fc
 8020a54:	af02      	add	r7, sp, #8
 8020a56:	f507 74f8 	add.w	r4, r7, #496	@ 0x1f0
 8020a5a:	f5a4 74f2 	sub.w	r4, r4, #484	@ 0x1e4
 8020a5e:	6020      	str	r0, [r4, #0]
 8020a60:	f507 70f8 	add.w	r0, r7, #496	@ 0x1f0
 8020a64:	f5a0 70f4 	sub.w	r0, r0, #488	@ 0x1e8
 8020a68:	6001      	str	r1, [r0, #0]
 8020a6a:	f507 71f8 	add.w	r1, r7, #496	@ 0x1f0
 8020a6e:	f5a1 71f6 	sub.w	r1, r1, #492	@ 0x1ec
 8020a72:	600a      	str	r2, [r1, #0]
 8020a74:	f507 72f8 	add.w	r2, r7, #496	@ 0x1f0
 8020a78:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8020a7c:	6013      	str	r3, [r2, #0]
  mg_uecc_word_t *_public = (mg_uecc_word_t *) public_key;
#else
  mg_uecc_word_t _public[MG_UECC_MAX_WORDS * 2];
#endif
  mg_uecc_word_t r[MG_UECC_MAX_WORDS], s[MG_UECC_MAX_WORDS];
  wordcount_t num_words = curve->num_words;
 8020a7e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8020a82:	781b      	ldrb	r3, [r3, #0]
 8020a84:	f887 31ed 	strb.w	r3, [r7, #493]	@ 0x1ed
  wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
 8020a88:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8020a8c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8020a90:	331f      	adds	r3, #31
 8020a92:	2b00      	cmp	r3, #0
 8020a94:	da00      	bge.n	8020a98 <mg_uecc_verify+0x48>
 8020a96:	331f      	adds	r3, #31
 8020a98:	115b      	asrs	r3, r3, #5
 8020a9a:	f887 31ec 	strb.w	r3, [r7, #492]	@ 0x1ec

  rx[num_n_words - 1] = 0;
 8020a9e:	f997 31ec 	ldrsb.w	r3, [r7, #492]	@ 0x1ec
 8020aa2:	3b01      	subs	r3, #1
 8020aa4:	009b      	lsls	r3, r3, #2
 8020aa6:	f503 73f8 	add.w	r3, r3, #496	@ 0x1f0
 8020aaa:	443b      	add	r3, r7
 8020aac:	2200      	movs	r2, #0
 8020aae:	f843 2cd0 	str.w	r2, [r3, #-208]
  r[num_n_words - 1] = 0;
 8020ab2:	f997 31ec 	ldrsb.w	r3, [r7, #492]	@ 0x1ec
 8020ab6:	1e5a      	subs	r2, r3, #1
 8020ab8:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8020abc:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8020ac0:	2100      	movs	r1, #0
 8020ac2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  s[num_n_words - 1] = 0;
 8020ac6:	f997 31ec 	ldrsb.w	r3, [r7, #492]	@ 0x1ec
 8020aca:	1e5a      	subs	r2, r3, #1
 8020acc:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8020ad0:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8020ad4:	2100      	movs	r1, #0
 8020ad6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if MG_UECC_VLI_NATIVE_LITTLE_ENDIAN
  bcopy((uint8_t *) r, signature, curve->num_bytes);
  bcopy((uint8_t *) s, signature + curve->num_bytes, curve->num_bytes);
#else
  mg_uecc_vli_bytesToNative(_public, public_key, curve->num_bytes);
 8020ada:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8020ade:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8020ae2:	461a      	mov	r2, r3
 8020ae4:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8020ae8:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8020aec:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8020af0:	6819      	ldr	r1, [r3, #0]
 8020af2:	f7ff fbac 	bl	802024e <mg_uecc_vli_bytesToNative>
  mg_uecc_vli_bytesToNative(_public + num_words, public_key + curve->num_bytes,
 8020af6:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 8020afa:	009b      	lsls	r3, r3, #2
 8020afc:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8020b00:	18d0      	adds	r0, r2, r3
 8020b02:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8020b06:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8020b0a:	461a      	mov	r2, r3
 8020b0c:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8020b10:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8020b14:	681b      	ldr	r3, [r3, #0]
 8020b16:	1899      	adds	r1, r3, r2
                            curve->num_bytes);
 8020b18:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8020b1c:	f993 3001 	ldrsb.w	r3, [r3, #1]
  mg_uecc_vli_bytesToNative(_public + num_words, public_key + curve->num_bytes,
 8020b20:	461a      	mov	r2, r3
 8020b22:	f7ff fb94 	bl	802024e <mg_uecc_vli_bytesToNative>
  mg_uecc_vli_bytesToNative(r, signature, curve->num_bytes);
 8020b26:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8020b2a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8020b2e:	461a      	mov	r2, r3
 8020b30:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8020b34:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8020b38:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8020b3c:	6819      	ldr	r1, [r3, #0]
 8020b3e:	f7ff fb86 	bl	802024e <mg_uecc_vli_bytesToNative>
  mg_uecc_vli_bytesToNative(s, signature + curve->num_bytes, curve->num_bytes);
 8020b42:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8020b46:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8020b4a:	461a      	mov	r2, r3
 8020b4c:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8020b50:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8020b54:	681b      	ldr	r3, [r3, #0]
 8020b56:	1899      	adds	r1, r3, r2
 8020b58:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8020b5c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8020b60:	461a      	mov	r2, r3
 8020b62:	f107 0310 	add.w	r3, r7, #16
 8020b66:	4618      	mov	r0, r3
 8020b68:	f7ff fb71 	bl	802024e <mg_uecc_vli_bytesToNative>
#endif

  /* r, s must not be 0. */
  if (mg_uecc_vli_isZero(r, num_words) || mg_uecc_vli_isZero(s, num_words)) {
 8020b6c:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 8020b70:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8020b74:	4611      	mov	r1, r2
 8020b76:	4618      	mov	r0, r3
 8020b78:	f7fd fe05 	bl	801e786 <mg_uecc_vli_isZero>
 8020b7c:	4603      	mov	r3, r0
 8020b7e:	2b00      	cmp	r3, #0
 8020b80:	d10a      	bne.n	8020b98 <mg_uecc_verify+0x148>
 8020b82:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 8020b86:	f107 0310 	add.w	r3, r7, #16
 8020b8a:	4611      	mov	r1, r2
 8020b8c:	4618      	mov	r0, r3
 8020b8e:	f7fd fdfa 	bl	801e786 <mg_uecc_vli_isZero>
 8020b92:	4603      	mov	r3, r0
 8020b94:	2b00      	cmp	r3, #0
 8020b96:	d001      	beq.n	8020b9c <mg_uecc_verify+0x14c>
    return 0;
 8020b98:	2300      	movs	r3, #0
 8020b9a:	e220      	b.n	8020fde <mg_uecc_verify+0x58e>
  }

  /* r, s must be < n. */
  if (mg_uecc_vli_cmp_unsafe(curve->n, r, num_n_words) != 1 ||
 8020b9c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8020ba0:	3324      	adds	r3, #36	@ 0x24
 8020ba2:	f997 21ec 	ldrsb.w	r2, [r7, #492]	@ 0x1ec
 8020ba6:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8020baa:	4618      	mov	r0, r3
 8020bac:	f7fd feb5 	bl	801e91a <mg_uecc_vli_cmp_unsafe>
 8020bb0:	4603      	mov	r3, r0
 8020bb2:	2b01      	cmp	r3, #1
 8020bb4:	d10c      	bne.n	8020bd0 <mg_uecc_verify+0x180>
      mg_uecc_vli_cmp_unsafe(curve->n, s, num_n_words) != 1) {
 8020bb6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8020bba:	3324      	adds	r3, #36	@ 0x24
 8020bbc:	f997 21ec 	ldrsb.w	r2, [r7, #492]	@ 0x1ec
 8020bc0:	f107 0110 	add.w	r1, r7, #16
 8020bc4:	4618      	mov	r0, r3
 8020bc6:	f7fd fea8 	bl	801e91a <mg_uecc_vli_cmp_unsafe>
 8020bca:	4603      	mov	r3, r0
  if (mg_uecc_vli_cmp_unsafe(curve->n, r, num_n_words) != 1 ||
 8020bcc:	2b01      	cmp	r3, #1
 8020bce:	d001      	beq.n	8020bd4 <mg_uecc_verify+0x184>
    return 0;
 8020bd0:	2300      	movs	r3, #0
 8020bd2:	e204      	b.n	8020fde <mg_uecc_verify+0x58e>
  }

  /* Calculate u1 and u2. */
  mg_uecc_vli_modInv(z, s, curve->n, num_n_words); /* z = 1/s */
 8020bd4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8020bd8:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 8020bdc:	f997 31ec 	ldrsb.w	r3, [r7, #492]	@ 0x1ec
 8020be0:	f107 0110 	add.w	r1, r7, #16
 8020be4:	f507 70c0 	add.w	r0, r7, #384	@ 0x180
 8020be8:	f7fe fafd 	bl	801f1e6 <mg_uecc_vli_modInv>
  u1[num_n_words - 1] = 0;
 8020bec:	f997 31ec 	ldrsb.w	r3, [r7, #492]	@ 0x1ec
 8020bf0:	3b01      	subs	r3, #1
 8020bf2:	009b      	lsls	r3, r3, #2
 8020bf4:	f503 73f8 	add.w	r3, r3, #496	@ 0x1f0
 8020bf8:	443b      	add	r3, r7
 8020bfa:	2200      	movs	r2, #0
 8020bfc:	f843 2c30 	str.w	r2, [r3, #-48]
  bits2int(u1, message_hash, hash_size, curve);
 8020c00:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8020c04:	f5a3 72f6 	sub.w	r2, r3, #492	@ 0x1ec
 8020c08:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8020c0c:	f5a3 71f4 	sub.w	r1, r3, #488	@ 0x1e8
 8020c10:	f507 70e0 	add.w	r0, r7, #448	@ 0x1c0
 8020c14:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8020c18:	6812      	ldr	r2, [r2, #0]
 8020c1a:	6809      	ldr	r1, [r1, #0]
 8020c1c:	f7ff fb53 	bl	80202c6 <bits2int>
  mg_uecc_vli_modMult(u1, u1, z, curve->n, num_n_words); /* u1 = e/s */
 8020c20:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8020c24:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 8020c28:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 8020c2c:	f507 71e0 	add.w	r1, r7, #448	@ 0x1c0
 8020c30:	f507 70e0 	add.w	r0, r7, #448	@ 0x1c0
 8020c34:	f997 31ec 	ldrsb.w	r3, [r7, #492]	@ 0x1ec
 8020c38:	9300      	str	r3, [sp, #0]
 8020c3a:	4623      	mov	r3, r4
 8020c3c:	f7fe fa54 	bl	801f0e8 <mg_uecc_vli_modMult>
  mg_uecc_vli_modMult(u2, r, z, curve->n, num_n_words);  /* u2 = r/s */
 8020c40:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8020c44:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 8020c48:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 8020c4c:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8020c50:	f507 70d0 	add.w	r0, r7, #416	@ 0x1a0
 8020c54:	f997 31ec 	ldrsb.w	r3, [r7, #492]	@ 0x1ec
 8020c58:	9300      	str	r3, [sp, #0]
 8020c5a:	4623      	mov	r3, r4
 8020c5c:	f7fe fa44 	bl	801f0e8 <mg_uecc_vli_modMult>

  /* Calculate sum = G + Q. */
  mg_uecc_vli_set(sum, _public, num_words);
 8020c60:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 8020c64:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8020c68:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8020c6c:	4618      	mov	r0, r3
 8020c6e:	f7fd fe2d 	bl	801e8cc <mg_uecc_vli_set>
  mg_uecc_vli_set(sum + num_words, _public + num_words, num_words);
 8020c72:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 8020c76:	009b      	lsls	r3, r3, #2
 8020c78:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8020c7c:	18d0      	adds	r0, r2, r3
 8020c7e:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 8020c82:	009b      	lsls	r3, r3, #2
 8020c84:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8020c88:	4413      	add	r3, r2
 8020c8a:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 8020c8e:	4619      	mov	r1, r3
 8020c90:	f7fd fe1c 	bl	801e8cc <mg_uecc_vli_set>
  mg_uecc_vli_set(tx, curve->G, num_words);
 8020c94:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8020c98:	f103 0144 	add.w	r1, r3, #68	@ 0x44
 8020c9c:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 8020ca0:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8020ca4:	4618      	mov	r0, r3
 8020ca6:	f7fd fe11 	bl	801e8cc <mg_uecc_vli_set>
  mg_uecc_vli_set(ty, curve->G + num_words, num_words);
 8020caa:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8020cae:	f103 0244 	add.w	r2, r3, #68	@ 0x44
 8020cb2:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 8020cb6:	009b      	lsls	r3, r3, #2
 8020cb8:	18d1      	adds	r1, r2, r3
 8020cba:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 8020cbe:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8020cc2:	4618      	mov	r0, r3
 8020cc4:	f7fd fe02 	bl	801e8cc <mg_uecc_vli_set>
  mg_uecc_vli_modSub(z, sum, tx, curve->p, num_words); /* z = x2 - x1 */
 8020cc8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8020ccc:	1d1c      	adds	r4, r3, #4
 8020cce:	f107 02e0 	add.w	r2, r7, #224	@ 0xe0
 8020cd2:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 8020cd6:	f507 70c0 	add.w	r0, r7, #384	@ 0x180
 8020cda:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 8020cde:	9300      	str	r3, [sp, #0]
 8020ce0:	4623      	mov	r3, r4
 8020ce2:	f7fe f8a8 	bl	801ee36 <mg_uecc_vli_modSub>
  XYcZ_add(tx, ty, sum, sum + num_words, curve);
 8020ce6:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 8020cea:	009b      	lsls	r3, r3, #2
 8020cec:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8020cf0:	18d4      	adds	r4, r2, r3
 8020cf2:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8020cf6:	f107 01c0 	add.w	r1, r7, #192	@ 0xc0
 8020cfa:	f107 00e0 	add.w	r0, r7, #224	@ 0xe0
 8020cfe:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8020d02:	9300      	str	r3, [sp, #0]
 8020d04:	4623      	mov	r3, r4
 8020d06:	f7fe fedd 	bl	801fac4 <XYcZ_add>
  mg_uecc_vli_modInv(z, z, curve->p, num_words); /* z = 1/z */
 8020d0a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8020d0e:	1d1a      	adds	r2, r3, #4
 8020d10:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 8020d14:	f507 71c0 	add.w	r1, r7, #384	@ 0x180
 8020d18:	f507 70c0 	add.w	r0, r7, #384	@ 0x180
 8020d1c:	f7fe fa63 	bl	801f1e6 <mg_uecc_vli_modInv>
  apply_z(sum, sum + num_words, z, curve);
 8020d20:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 8020d24:	009b      	lsls	r3, r3, #2
 8020d26:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8020d2a:	18d1      	adds	r1, r2, r3
 8020d2c:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 8020d30:	f507 70a0 	add.w	r0, r7, #320	@ 0x140
 8020d34:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8020d38:	f7fe fe52 	bl	801f9e0 <apply_z>

  /* Use Shamir's trick to calculate u1*G + u2*Q */
  points[0] = 0;
 8020d3c:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8020d40:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8020d44:	2200      	movs	r2, #0
 8020d46:	601a      	str	r2, [r3, #0]
  points[1] = curve->G;
 8020d48:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8020d4c:	f103 0244 	add.w	r2, r3, #68	@ 0x44
 8020d50:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8020d54:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8020d58:	605a      	str	r2, [r3, #4]
  points[2] = _public;
 8020d5a:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8020d5e:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8020d62:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8020d66:	609a      	str	r2, [r3, #8]
  points[3] = sum;
 8020d68:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8020d6c:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8020d70:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8020d74:	60da      	str	r2, [r3, #12]
  num_bits = smax(mg_uecc_vli_numBits(u1, num_n_words),
 8020d76:	f997 21ec 	ldrsb.w	r2, [r7, #492]	@ 0x1ec
 8020d7a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8020d7e:	4611      	mov	r1, r2
 8020d80:	4618      	mov	r0, r3
 8020d82:	f7fd fd6a 	bl	801e85a <mg_uecc_vli_numBits>
 8020d86:	4603      	mov	r3, r0
 8020d88:	461c      	mov	r4, r3
 8020d8a:	f997 21ec 	ldrsb.w	r2, [r7, #492]	@ 0x1ec
 8020d8e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8020d92:	4611      	mov	r1, r2
 8020d94:	4618      	mov	r0, r3
 8020d96:	f7fd fd60 	bl	801e85a <mg_uecc_vli_numBits>
 8020d9a:	4603      	mov	r3, r0
 8020d9c:	4619      	mov	r1, r3
 8020d9e:	4620      	mov	r0, r4
 8020da0:	f7ff fe40 	bl	8020a24 <smax>
 8020da4:	4603      	mov	r3, r0
 8020da6:	f8a7 31ea 	strh.w	r3, [r7, #490]	@ 0x1ea
                  mg_uecc_vli_numBits(u2, num_n_words));
  point =
      points[(!!mg_uecc_vli_testBit(u1, (bitcount_t) (num_bits - 1))) |
 8020daa:	f8b7 31ea 	ldrh.w	r3, [r7, #490]	@ 0x1ea
 8020dae:	3b01      	subs	r3, #1
 8020db0:	b29b      	uxth	r3, r3
 8020db2:	b21a      	sxth	r2, r3
 8020db4:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8020db8:	4611      	mov	r1, r2
 8020dba:	4618      	mov	r0, r3
 8020dbc:	f7fd fd0d 	bl	801e7da <mg_uecc_vli_testBit>
 8020dc0:	4603      	mov	r3, r0
 8020dc2:	2b00      	cmp	r3, #0
 8020dc4:	bf14      	ite	ne
 8020dc6:	2301      	movne	r3, #1
 8020dc8:	2300      	moveq	r3, #0
 8020dca:	b2db      	uxtb	r3, r3
 8020dcc:	461c      	mov	r4, r3
             ((!!mg_uecc_vli_testBit(u2, (bitcount_t) (num_bits - 1))) << 1)];
 8020dce:	f8b7 31ea 	ldrh.w	r3, [r7, #490]	@ 0x1ea
 8020dd2:	3b01      	subs	r3, #1
 8020dd4:	b29b      	uxth	r3, r3
 8020dd6:	b21a      	sxth	r2, r3
 8020dd8:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8020ddc:	4611      	mov	r1, r2
 8020dde:	4618      	mov	r0, r3
 8020de0:	f7fd fcfb 	bl	801e7da <mg_uecc_vli_testBit>
 8020de4:	4603      	mov	r3, r0
 8020de6:	2b00      	cmp	r3, #0
 8020de8:	d001      	beq.n	8020dee <mg_uecc_verify+0x39e>
 8020dea:	2302      	movs	r3, #2
 8020dec:	e000      	b.n	8020df0 <mg_uecc_verify+0x3a0>
 8020dee:	2300      	movs	r3, #0
      points[(!!mg_uecc_vli_testBit(u1, (bitcount_t) (num_bits - 1))) |
 8020df0:	ea43 0204 	orr.w	r2, r3, r4
  point =
 8020df4:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8020df8:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8020dfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8020e00:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
  mg_uecc_vli_set(rx, point, num_words);
 8020e04:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 8020e08:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8020e0c:	f8d7 11e4 	ldr.w	r1, [r7, #484]	@ 0x1e4
 8020e10:	4618      	mov	r0, r3
 8020e12:	f7fd fd5b 	bl	801e8cc <mg_uecc_vli_set>
  mg_uecc_vli_set(ry, point + num_words, num_words);
 8020e16:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 8020e1a:	009b      	lsls	r3, r3, #2
 8020e1c:	f8d7 21e4 	ldr.w	r2, [r7, #484]	@ 0x1e4
 8020e20:	18d1      	adds	r1, r2, r3
 8020e22:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 8020e26:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8020e2a:	4618      	mov	r0, r3
 8020e2c:	f7fd fd4e 	bl	801e8cc <mg_uecc_vli_set>
  mg_uecc_vli_clear(z, num_words);
 8020e30:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 8020e34:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8020e38:	4611      	mov	r1, r2
 8020e3a:	4618      	mov	r0, r3
 8020e3c:	f7fd fc82 	bl	801e744 <mg_uecc_vli_clear>
  z[0] = 1;
 8020e40:	2301      	movs	r3, #1
 8020e42:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180

  for (i = num_bits - 2; i >= 0; --i) {
 8020e46:	f8b7 31ea 	ldrh.w	r3, [r7, #490]	@ 0x1ea
 8020e4a:	3b02      	subs	r3, #2
 8020e4c:	b29b      	uxth	r3, r3
 8020e4e:	f8a7 31ee 	strh.w	r3, [r7, #494]	@ 0x1ee
 8020e52:	e087      	b.n	8020f64 <mg_uecc_verify+0x514>
    mg_uecc_word_t index;
    curve->double_jacobian(rx, ry, z, curve);
 8020e54:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8020e58:	f8d3 40a4 	ldr.w	r4, [r3, #164]	@ 0xa4
 8020e5c:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 8020e60:	f507 7180 	add.w	r1, r7, #256	@ 0x100
 8020e64:	f507 7090 	add.w	r0, r7, #288	@ 0x120
 8020e68:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8020e6c:	47a0      	blx	r4

    index = (!!mg_uecc_vli_testBit(u1, i)) |
 8020e6e:	f9b7 21ee 	ldrsh.w	r2, [r7, #494]	@ 0x1ee
 8020e72:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8020e76:	4611      	mov	r1, r2
 8020e78:	4618      	mov	r0, r3
 8020e7a:	f7fd fcae 	bl	801e7da <mg_uecc_vli_testBit>
 8020e7e:	4603      	mov	r3, r0
 8020e80:	2b00      	cmp	r3, #0
 8020e82:	bf14      	ite	ne
 8020e84:	2301      	movne	r3, #1
 8020e86:	2300      	moveq	r3, #0
 8020e88:	b2db      	uxtb	r3, r3
 8020e8a:	461c      	mov	r4, r3
            (mg_uecc_word_t) ((!!mg_uecc_vli_testBit(u2, i)) << 1);
 8020e8c:	f9b7 21ee 	ldrsh.w	r2, [r7, #494]	@ 0x1ee
 8020e90:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8020e94:	4611      	mov	r1, r2
 8020e96:	4618      	mov	r0, r3
 8020e98:	f7fd fc9f 	bl	801e7da <mg_uecc_vli_testBit>
 8020e9c:	4603      	mov	r3, r0
 8020e9e:	2b00      	cmp	r3, #0
 8020ea0:	d001      	beq.n	8020ea6 <mg_uecc_verify+0x456>
 8020ea2:	2302      	movs	r3, #2
 8020ea4:	e000      	b.n	8020ea8 <mg_uecc_verify+0x458>
 8020ea6:	2300      	movs	r3, #0
    index = (!!mg_uecc_vli_testBit(u1, i)) |
 8020ea8:	4323      	orrs	r3, r4
 8020eaa:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
    point = points[index];
 8020eae:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8020eb2:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8020eb6:	f8d7 21e0 	ldr.w	r2, [r7, #480]	@ 0x1e0
 8020eba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8020ebe:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
    if (point) {
 8020ec2:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8020ec6:	2b00      	cmp	r3, #0
 8020ec8:	d046      	beq.n	8020f58 <mg_uecc_verify+0x508>
      mg_uecc_vli_set(tx, point, num_words);
 8020eca:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 8020ece:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8020ed2:	f8d7 11e4 	ldr.w	r1, [r7, #484]	@ 0x1e4
 8020ed6:	4618      	mov	r0, r3
 8020ed8:	f7fd fcf8 	bl	801e8cc <mg_uecc_vli_set>
      mg_uecc_vli_set(ty, point + num_words, num_words);
 8020edc:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 8020ee0:	009b      	lsls	r3, r3, #2
 8020ee2:	f8d7 21e4 	ldr.w	r2, [r7, #484]	@ 0x1e4
 8020ee6:	18d1      	adds	r1, r2, r3
 8020ee8:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 8020eec:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8020ef0:	4618      	mov	r0, r3
 8020ef2:	f7fd fceb 	bl	801e8cc <mg_uecc_vli_set>
      apply_z(tx, ty, z, curve);
 8020ef6:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 8020efa:	f107 01c0 	add.w	r1, r7, #192	@ 0xc0
 8020efe:	f107 00e0 	add.w	r0, r7, #224	@ 0xe0
 8020f02:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8020f06:	f7fe fd6b 	bl	801f9e0 <apply_z>
      mg_uecc_vli_modSub(tz, rx, tx, curve->p, num_words); /* Z = x2 - x1 */
 8020f0a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8020f0e:	1d1c      	adds	r4, r3, #4
 8020f10:	f107 02e0 	add.w	r2, r7, #224	@ 0xe0
 8020f14:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 8020f18:	f107 00a0 	add.w	r0, r7, #160	@ 0xa0
 8020f1c:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 8020f20:	9300      	str	r3, [sp, #0]
 8020f22:	4623      	mov	r3, r4
 8020f24:	f7fd ff87 	bl	801ee36 <mg_uecc_vli_modSub>
      XYcZ_add(tx, ty, rx, ry, curve);
 8020f28:	f507 7480 	add.w	r4, r7, #256	@ 0x100
 8020f2c:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8020f30:	f107 01c0 	add.w	r1, r7, #192	@ 0xc0
 8020f34:	f107 00e0 	add.w	r0, r7, #224	@ 0xe0
 8020f38:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8020f3c:	9300      	str	r3, [sp, #0]
 8020f3e:	4623      	mov	r3, r4
 8020f40:	f7fe fdc0 	bl	801fac4 <XYcZ_add>
      mg_uecc_vli_modMult_fast(z, z, tz, curve);
 8020f44:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 8020f48:	f507 71c0 	add.w	r1, r7, #384	@ 0x180
 8020f4c:	f507 70c0 	add.w	r0, r7, #384	@ 0x180
 8020f50:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8020f54:	f7fe f8e3 	bl	801f11e <mg_uecc_vli_modMult_fast>
  for (i = num_bits - 2; i >= 0; --i) {
 8020f58:	f8b7 31ee 	ldrh.w	r3, [r7, #494]	@ 0x1ee
 8020f5c:	3b01      	subs	r3, #1
 8020f5e:	b29b      	uxth	r3, r3
 8020f60:	f8a7 31ee 	strh.w	r3, [r7, #494]	@ 0x1ee
 8020f64:	f9b7 31ee 	ldrsh.w	r3, [r7, #494]	@ 0x1ee
 8020f68:	2b00      	cmp	r3, #0
 8020f6a:	f6bf af73 	bge.w	8020e54 <mg_uecc_verify+0x404>
    }
  }

  mg_uecc_vli_modInv(z, z, curve->p, num_words); /* Z = 1/Z */
 8020f6e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8020f72:	1d1a      	adds	r2, r3, #4
 8020f74:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 8020f78:	f507 71c0 	add.w	r1, r7, #384	@ 0x180
 8020f7c:	f507 70c0 	add.w	r0, r7, #384	@ 0x180
 8020f80:	f7fe f931 	bl	801f1e6 <mg_uecc_vli_modInv>
  apply_z(rx, ry, z, curve);
 8020f84:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 8020f88:	f507 7180 	add.w	r1, r7, #256	@ 0x100
 8020f8c:	f507 7090 	add.w	r0, r7, #288	@ 0x120
 8020f90:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8020f94:	f7fe fd24 	bl	801f9e0 <apply_z>

  /* v = x1 (mod n) */
  if (mg_uecc_vli_cmp_unsafe(curve->n, rx, num_n_words) != 1) {
 8020f98:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8020f9c:	3324      	adds	r3, #36	@ 0x24
 8020f9e:	f997 21ec 	ldrsb.w	r2, [r7, #492]	@ 0x1ec
 8020fa2:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 8020fa6:	4618      	mov	r0, r3
 8020fa8:	f7fd fcb7 	bl	801e91a <mg_uecc_vli_cmp_unsafe>
 8020fac:	4603      	mov	r3, r0
 8020fae:	2b01      	cmp	r3, #1
 8020fb0:	d00b      	beq.n	8020fca <mg_uecc_verify+0x57a>
    mg_uecc_vli_sub(rx, rx, curve->n, num_n_words);
 8020fb2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8020fb6:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 8020fba:	f997 31ec 	ldrsb.w	r3, [r7, #492]	@ 0x1ec
 8020fbe:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 8020fc2:	f507 7090 	add.w	r0, r7, #288	@ 0x120
 8020fc6:	f7fd fdbb 	bl	801eb40 <mg_uecc_vli_sub>
  }

  /* Accept only if v == r. */
  return (int) (mg_uecc_vli_equal(rx, r, num_words));
 8020fca:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 8020fce:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8020fd2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8020fd6:	4618      	mov	r0, r3
 8020fd8:	f7fd fcdb 	bl	801e992 <mg_uecc_vli_equal>
 8020fdc:	4603      	mov	r3, r0
}
 8020fde:	4618      	mov	r0, r3
 8020fe0:	f507 77fa 	add.w	r7, r7, #500	@ 0x1f4
 8020fe4:	46bd      	mov	sp, r7
 8020fe6:	bd90      	pop	{r4, r7, pc}

08020fe8 <umaal>:
typedef int64_t sdlimb_t;

#define NLIMBS (256 / X25519_WBITS)
typedef limb_t mg_fe[NLIMBS];

static limb_t umaal(limb_t *carry, limb_t acc, limb_t mand, limb_t mier) {
 8020fe8:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8020fec:	b08f      	sub	sp, #60	@ 0x3c
 8020fee:	af00      	add	r7, sp, #0
 8020ff0:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8020ff2:	62b9      	str	r1, [r7, #40]	@ 0x28
 8020ff4:	627a      	str	r2, [r7, #36]	@ 0x24
 8020ff6:	623b      	str	r3, [r7, #32]
  dlimb_t tmp = (dlimb_t) mand * mier + acc + *carry;
 8020ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020ffa:	2200      	movs	r2, #0
 8020ffc:	469a      	mov	sl, r3
 8020ffe:	4693      	mov	fp, r2
 8021000:	6a3b      	ldr	r3, [r7, #32]
 8021002:	2200      	movs	r2, #0
 8021004:	61bb      	str	r3, [r7, #24]
 8021006:	61fa      	str	r2, [r7, #28]
 8021008:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 802100c:	4603      	mov	r3, r0
 802100e:	fb03 f20b 	mul.w	r2, r3, fp
 8021012:	460b      	mov	r3, r1
 8021014:	fb0a f303 	mul.w	r3, sl, r3
 8021018:	4413      	add	r3, r2
 802101a:	4602      	mov	r2, r0
 802101c:	fbaa 4502 	umull	r4, r5, sl, r2
 8021020:	442b      	add	r3, r5
 8021022:	461d      	mov	r5, r3
 8021024:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021026:	2200      	movs	r2, #0
 8021028:	613b      	str	r3, [r7, #16]
 802102a:	617a      	str	r2, [r7, #20]
 802102c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8021030:	460b      	mov	r3, r1
 8021032:	eb14 0803 	adds.w	r8, r4, r3
 8021036:	4613      	mov	r3, r2
 8021038:	eb45 0903 	adc.w	r9, r5, r3
 802103c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802103e:	681b      	ldr	r3, [r3, #0]
 8021040:	2200      	movs	r2, #0
 8021042:	60bb      	str	r3, [r7, #8]
 8021044:	60fa      	str	r2, [r7, #12]
 8021046:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 802104a:	460b      	mov	r3, r1
 802104c:	eb18 0303 	adds.w	r3, r8, r3
 8021050:	603b      	str	r3, [r7, #0]
 8021052:	4613      	mov	r3, r2
 8021054:	eb49 0303 	adc.w	r3, r9, r3
 8021058:	607b      	str	r3, [r7, #4]
 802105a:	e9d7 3400 	ldrd	r3, r4, [r7]
 802105e:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30
  *carry = (limb_t) (tmp >> X25519_WBITS);
 8021062:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8021066:	f04f 0200 	mov.w	r2, #0
 802106a:	f04f 0300 	mov.w	r3, #0
 802106e:	000a      	movs	r2, r1
 8021070:	2300      	movs	r3, #0
 8021072:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8021074:	601a      	str	r2, [r3, #0]
  return (limb_t) tmp;
 8021076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8021078:	4618      	mov	r0, r3
 802107a:	373c      	adds	r7, #60	@ 0x3c
 802107c:	46bd      	mov	sp, r7
 802107e:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8021082:	4770      	bx	lr

08021084 <adc>:

// These functions are implemented in terms of umaal on ARM
static limb_t adc(limb_t *carry, limb_t acc, limb_t mand) {
 8021084:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8021088:	b08b      	sub	sp, #44	@ 0x2c
 802108a:	af00      	add	r7, sp, #0
 802108c:	61f8      	str	r0, [r7, #28]
 802108e:	61b9      	str	r1, [r7, #24]
 8021090:	617a      	str	r2, [r7, #20]
  dlimb_t total = (dlimb_t) *carry + acc + mand;
 8021092:	69fb      	ldr	r3, [r7, #28]
 8021094:	681b      	ldr	r3, [r3, #0]
 8021096:	2200      	movs	r2, #0
 8021098:	60bb      	str	r3, [r7, #8]
 802109a:	60fa      	str	r2, [r7, #12]
 802109c:	69bb      	ldr	r3, [r7, #24]
 802109e:	2200      	movs	r2, #0
 80210a0:	469a      	mov	sl, r3
 80210a2:	4693      	mov	fp, r2
 80210a4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80210a8:	460b      	mov	r3, r1
 80210aa:	eb13 040a 	adds.w	r4, r3, sl
 80210ae:	4613      	mov	r3, r2
 80210b0:	eb43 050b 	adc.w	r5, r3, fp
 80210b4:	697b      	ldr	r3, [r7, #20]
 80210b6:	2200      	movs	r2, #0
 80210b8:	4698      	mov	r8, r3
 80210ba:	4691      	mov	r9, r2
 80210bc:	eb14 0308 	adds.w	r3, r4, r8
 80210c0:	603b      	str	r3, [r7, #0]
 80210c2:	eb45 0309 	adc.w	r3, r5, r9
 80210c6:	607b      	str	r3, [r7, #4]
 80210c8:	e9d7 3400 	ldrd	r3, r4, [r7]
 80210cc:	e9c7 3408 	strd	r3, r4, [r7, #32]
  *carry = (limb_t) (total >> X25519_WBITS);
 80210d0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80210d4:	f04f 0200 	mov.w	r2, #0
 80210d8:	f04f 0300 	mov.w	r3, #0
 80210dc:	000a      	movs	r2, r1
 80210de:	2300      	movs	r3, #0
 80210e0:	69fb      	ldr	r3, [r7, #28]
 80210e2:	601a      	str	r2, [r3, #0]
  return (limb_t) total;
 80210e4:	6a3b      	ldr	r3, [r7, #32]
}
 80210e6:	4618      	mov	r0, r3
 80210e8:	372c      	adds	r7, #44	@ 0x2c
 80210ea:	46bd      	mov	sp, r7
 80210ec:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80210f0:	4770      	bx	lr

080210f2 <adc0>:

static limb_t adc0(limb_t *carry, limb_t acc) {
 80210f2:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 80210f6:	b085      	sub	sp, #20
 80210f8:	af00      	add	r7, sp, #0
 80210fa:	6078      	str	r0, [r7, #4]
 80210fc:	6039      	str	r1, [r7, #0]
  dlimb_t total = (dlimb_t) *carry + acc;
 80210fe:	6879      	ldr	r1, [r7, #4]
 8021100:	6809      	ldr	r1, [r1, #0]
 8021102:	2000      	movs	r0, #0
 8021104:	460c      	mov	r4, r1
 8021106:	4605      	mov	r5, r0
 8021108:	6839      	ldr	r1, [r7, #0]
 802110a:	2000      	movs	r0, #0
 802110c:	460a      	mov	r2, r1
 802110e:	4603      	mov	r3, r0
 8021110:	eb14 0802 	adds.w	r8, r4, r2
 8021114:	eb45 0903 	adc.w	r9, r5, r3
 8021118:	e9c7 8902 	strd	r8, r9, [r7, #8]
  *carry = (limb_t) (total >> X25519_WBITS);
 802111c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8021120:	f04f 0200 	mov.w	r2, #0
 8021124:	f04f 0300 	mov.w	r3, #0
 8021128:	000a      	movs	r2, r1
 802112a:	2300      	movs	r3, #0
 802112c:	687b      	ldr	r3, [r7, #4]
 802112e:	601a      	str	r2, [r3, #0]
  return (limb_t) total;
 8021130:	68bb      	ldr	r3, [r7, #8]
}
 8021132:	4618      	mov	r0, r3
 8021134:	3714      	adds	r7, #20
 8021136:	46bd      	mov	sp, r7
 8021138:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 802113c:	4770      	bx	lr

0802113e <propagate>:

// - Precondition: carry is small.
// - Invariant: result of propagate is < 2^255 + 1 word
// - In particular, always less than 2p.
// - Also, output x >= min(x,19)
static void propagate(mg_fe x, limb_t over) {
 802113e:	b590      	push	{r4, r7, lr}
 8021140:	b085      	sub	sp, #20
 8021142:	af00      	add	r7, sp, #0
 8021144:	6078      	str	r0, [r7, #4]
 8021146:	6039      	str	r1, [r7, #0]
  unsigned i;
  limb_t carry;
  over = x[NLIMBS - 1] >> (X25519_WBITS - 1) | over << 1;
 8021148:	687b      	ldr	r3, [r7, #4]
 802114a:	331c      	adds	r3, #28
 802114c:	681b      	ldr	r3, [r3, #0]
 802114e:	0fda      	lsrs	r2, r3, #31
 8021150:	683b      	ldr	r3, [r7, #0]
 8021152:	005b      	lsls	r3, r3, #1
 8021154:	4313      	orrs	r3, r2
 8021156:	603b      	str	r3, [r7, #0]
  x[NLIMBS - 1] &= ~((limb_t) 1 << (X25519_WBITS - 1));
 8021158:	687b      	ldr	r3, [r7, #4]
 802115a:	331c      	adds	r3, #28
 802115c:	681a      	ldr	r2, [r3, #0]
 802115e:	687b      	ldr	r3, [r7, #4]
 8021160:	331c      	adds	r3, #28
 8021162:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8021166:	601a      	str	r2, [r3, #0]

  carry = over * 19;
 8021168:	683a      	ldr	r2, [r7, #0]
 802116a:	4613      	mov	r3, r2
 802116c:	00db      	lsls	r3, r3, #3
 802116e:	4413      	add	r3, r2
 8021170:	005b      	lsls	r3, r3, #1
 8021172:	4413      	add	r3, r2
 8021174:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < NLIMBS; i++) {
 8021176:	2300      	movs	r3, #0
 8021178:	60fb      	str	r3, [r7, #12]
 802117a:	e012      	b.n	80211a2 <propagate+0x64>
    x[i] = adc0(&carry, x[i]);
 802117c:	68fb      	ldr	r3, [r7, #12]
 802117e:	009b      	lsls	r3, r3, #2
 8021180:	687a      	ldr	r2, [r7, #4]
 8021182:	4413      	add	r3, r2
 8021184:	6819      	ldr	r1, [r3, #0]
 8021186:	68fb      	ldr	r3, [r7, #12]
 8021188:	009b      	lsls	r3, r3, #2
 802118a:	687a      	ldr	r2, [r7, #4]
 802118c:	18d4      	adds	r4, r2, r3
 802118e:	f107 0308 	add.w	r3, r7, #8
 8021192:	4618      	mov	r0, r3
 8021194:	f7ff ffad 	bl	80210f2 <adc0>
 8021198:	4603      	mov	r3, r0
 802119a:	6023      	str	r3, [r4, #0]
  for (i = 0; i < NLIMBS; i++) {
 802119c:	68fb      	ldr	r3, [r7, #12]
 802119e:	3301      	adds	r3, #1
 80211a0:	60fb      	str	r3, [r7, #12]
 80211a2:	68fb      	ldr	r3, [r7, #12]
 80211a4:	2b07      	cmp	r3, #7
 80211a6:	d9e9      	bls.n	802117c <propagate+0x3e>
  }
}
 80211a8:	bf00      	nop
 80211aa:	bf00      	nop
 80211ac:	3714      	adds	r7, #20
 80211ae:	46bd      	mov	sp, r7
 80211b0:	bd90      	pop	{r4, r7, pc}

080211b2 <add>:

static void add(mg_fe out, const mg_fe a, const mg_fe b) {
 80211b2:	b590      	push	{r4, r7, lr}
 80211b4:	b087      	sub	sp, #28
 80211b6:	af00      	add	r7, sp, #0
 80211b8:	60f8      	str	r0, [r7, #12]
 80211ba:	60b9      	str	r1, [r7, #8]
 80211bc:	607a      	str	r2, [r7, #4]
  unsigned i;
  limb_t carry = 0;
 80211be:	2300      	movs	r3, #0
 80211c0:	613b      	str	r3, [r7, #16]
  for (i = 0; i < NLIMBS; i++) {
 80211c2:	2300      	movs	r3, #0
 80211c4:	617b      	str	r3, [r7, #20]
 80211c6:	e018      	b.n	80211fa <add+0x48>
    out[i] = adc(&carry, a[i], b[i]);
 80211c8:	697b      	ldr	r3, [r7, #20]
 80211ca:	009b      	lsls	r3, r3, #2
 80211cc:	68ba      	ldr	r2, [r7, #8]
 80211ce:	4413      	add	r3, r2
 80211d0:	6819      	ldr	r1, [r3, #0]
 80211d2:	697b      	ldr	r3, [r7, #20]
 80211d4:	009b      	lsls	r3, r3, #2
 80211d6:	687a      	ldr	r2, [r7, #4]
 80211d8:	4413      	add	r3, r2
 80211da:	6818      	ldr	r0, [r3, #0]
 80211dc:	697b      	ldr	r3, [r7, #20]
 80211de:	009b      	lsls	r3, r3, #2
 80211e0:	68fa      	ldr	r2, [r7, #12]
 80211e2:	18d4      	adds	r4, r2, r3
 80211e4:	f107 0310 	add.w	r3, r7, #16
 80211e8:	4602      	mov	r2, r0
 80211ea:	4618      	mov	r0, r3
 80211ec:	f7ff ff4a 	bl	8021084 <adc>
 80211f0:	4603      	mov	r3, r0
 80211f2:	6023      	str	r3, [r4, #0]
  for (i = 0; i < NLIMBS; i++) {
 80211f4:	697b      	ldr	r3, [r7, #20]
 80211f6:	3301      	adds	r3, #1
 80211f8:	617b      	str	r3, [r7, #20]
 80211fa:	697b      	ldr	r3, [r7, #20]
 80211fc:	2b07      	cmp	r3, #7
 80211fe:	d9e3      	bls.n	80211c8 <add+0x16>
  }
  propagate(out, carry);
 8021200:	693b      	ldr	r3, [r7, #16]
 8021202:	4619      	mov	r1, r3
 8021204:	68f8      	ldr	r0, [r7, #12]
 8021206:	f7ff ff9a 	bl	802113e <propagate>
}
 802120a:	bf00      	nop
 802120c:	371c      	adds	r7, #28
 802120e:	46bd      	mov	sp, r7
 8021210:	bd90      	pop	{r4, r7, pc}

08021212 <sub>:

static void sub(mg_fe out, const mg_fe a, const mg_fe b) {
 8021212:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8021216:	b08a      	sub	sp, #40	@ 0x28
 8021218:	af00      	add	r7, sp, #0
 802121a:	6178      	str	r0, [r7, #20]
 802121c:	6139      	str	r1, [r7, #16]
 802121e:	60fa      	str	r2, [r7, #12]
  unsigned i;
  sdlimb_t carry = -38;
 8021220:	f06f 0225 	mvn.w	r2, #37	@ 0x25
 8021224:	f04f 33ff 	mov.w	r3, #4294967295
 8021228:	e9c7 2306 	strd	r2, r3, [r7, #24]
  for (i = 0; i < NLIMBS; i++) {
 802122c:	2300      	movs	r3, #0
 802122e:	627b      	str	r3, [r7, #36]	@ 0x24
 8021230:	e032      	b.n	8021298 <sub+0x86>
    carry = carry + a[i] - b[i];
 8021232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021234:	009b      	lsls	r3, r3, #2
 8021236:	693a      	ldr	r2, [r7, #16]
 8021238:	4413      	add	r3, r2
 802123a:	681b      	ldr	r3, [r3, #0]
 802123c:	2200      	movs	r2, #0
 802123e:	4698      	mov	r8, r3
 8021240:	4691      	mov	r9, r2
 8021242:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8021246:	eb18 0402 	adds.w	r4, r8, r2
 802124a:	eb49 0503 	adc.w	r5, r9, r3
 802124e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021250:	009b      	lsls	r3, r3, #2
 8021252:	68fa      	ldr	r2, [r7, #12]
 8021254:	4413      	add	r3, r2
 8021256:	681b      	ldr	r3, [r3, #0]
 8021258:	2200      	movs	r2, #0
 802125a:	469a      	mov	sl, r3
 802125c:	4693      	mov	fp, r2
 802125e:	ebb4 030a 	subs.w	r3, r4, sl
 8021262:	603b      	str	r3, [r7, #0]
 8021264:	eb65 030b 	sbc.w	r3, r5, fp
 8021268:	607b      	str	r3, [r7, #4]
 802126a:	e9d7 2300 	ldrd	r2, r3, [r7]
 802126e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    out[i] = (limb_t) carry;
 8021272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021274:	009b      	lsls	r3, r3, #2
 8021276:	697a      	ldr	r2, [r7, #20]
 8021278:	4413      	add	r3, r2
 802127a:	69ba      	ldr	r2, [r7, #24]
 802127c:	601a      	str	r2, [r3, #0]
    carry >>= X25519_WBITS;
 802127e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8021282:	f04f 0200 	mov.w	r2, #0
 8021286:	f04f 0300 	mov.w	r3, #0
 802128a:	000a      	movs	r2, r1
 802128c:	17cb      	asrs	r3, r1, #31
 802128e:	e9c7 2306 	strd	r2, r3, [r7, #24]
  for (i = 0; i < NLIMBS; i++) {
 8021292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021294:	3301      	adds	r3, #1
 8021296:	627b      	str	r3, [r7, #36]	@ 0x24
 8021298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802129a:	2b07      	cmp	r3, #7
 802129c:	d9c9      	bls.n	8021232 <sub+0x20>
  }
  propagate(out, (limb_t) (1 + carry));
 802129e:	69bb      	ldr	r3, [r7, #24]
 80212a0:	3301      	adds	r3, #1
 80212a2:	4619      	mov	r1, r3
 80212a4:	6978      	ldr	r0, [r7, #20]
 80212a6:	f7ff ff4a 	bl	802113e <propagate>
}
 80212aa:	bf00      	nop
 80212ac:	3728      	adds	r7, #40	@ 0x28
 80212ae:	46bd      	mov	sp, r7
 80212b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080212b4 <mul>:

// `b` can contain less than 8 limbs, thus we use `limb_t *` instead of `mg_fe`
// to avoid build warnings
static void mul(mg_fe out, const mg_fe a, const limb_t *b, unsigned nb) {
 80212b4:	b5b0      	push	{r4, r5, r7, lr}
 80212b6:	b09a      	sub	sp, #104	@ 0x68
 80212b8:	af00      	add	r7, sp, #0
 80212ba:	60f8      	str	r0, [r7, #12]
 80212bc:	60b9      	str	r1, [r7, #8]
 80212be:	607a      	str	r2, [r7, #4]
 80212c0:	603b      	str	r3, [r7, #0]
  limb_t accum[2 * NLIMBS] = {0};
 80212c2:	f107 031c 	add.w	r3, r7, #28
 80212c6:	2240      	movs	r2, #64	@ 0x40
 80212c8:	2100      	movs	r1, #0
 80212ca:	4618      	mov	r0, r3
 80212cc:	f006 f9fc 	bl	80276c8 <memset>
  unsigned i, j;

  limb_t carry2;
  for (i = 0; i < nb; i++) {
 80212d0:	2300      	movs	r3, #0
 80212d2:	667b      	str	r3, [r7, #100]	@ 0x64
 80212d4:	e03a      	b.n	802134c <mul+0x98>
    limb_t mand = b[i];
 80212d6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80212d8:	009b      	lsls	r3, r3, #2
 80212da:	687a      	ldr	r2, [r7, #4]
 80212dc:	4413      	add	r3, r2
 80212de:	681b      	ldr	r3, [r3, #0]
 80212e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    carry2 = 0;
 80212e2:	2300      	movs	r3, #0
 80212e4:	61bb      	str	r3, [r7, #24]
    for (j = 0; j < NLIMBS; j++) {
 80212e6:	2300      	movs	r3, #0
 80212e8:	663b      	str	r3, [r7, #96]	@ 0x60
 80212ea:	e020      	b.n	802132e <mul+0x7a>
      limb_t tmp;                        // "a" may be misaligned
      memcpy(&tmp, &a[j], sizeof(tmp));  // So make an aligned copy
 80212ec:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80212ee:	009b      	lsls	r3, r3, #2
 80212f0:	68ba      	ldr	r2, [r7, #8]
 80212f2:	4413      	add	r3, r2
 80212f4:	681b      	ldr	r3, [r3, #0]
 80212f6:	617b      	str	r3, [r7, #20]
      accum[i + j] = umaal(&carry2, accum[i + j], mand, tmp);
 80212f8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80212fa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80212fc:	4413      	add	r3, r2
 80212fe:	009b      	lsls	r3, r3, #2
 8021300:	3368      	adds	r3, #104	@ 0x68
 8021302:	443b      	add	r3, r7
 8021304:	f853 1c4c 	ldr.w	r1, [r3, #-76]
 8021308:	697d      	ldr	r5, [r7, #20]
 802130a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 802130c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 802130e:	18d4      	adds	r4, r2, r3
 8021310:	f107 0018 	add.w	r0, r7, #24
 8021314:	462b      	mov	r3, r5
 8021316:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8021318:	f7ff fe66 	bl	8020fe8 <umaal>
 802131c:	4602      	mov	r2, r0
 802131e:	00a3      	lsls	r3, r4, #2
 8021320:	3368      	adds	r3, #104	@ 0x68
 8021322:	443b      	add	r3, r7
 8021324:	f843 2c4c 	str.w	r2, [r3, #-76]
    for (j = 0; j < NLIMBS; j++) {
 8021328:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 802132a:	3301      	adds	r3, #1
 802132c:	663b      	str	r3, [r7, #96]	@ 0x60
 802132e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8021330:	2b07      	cmp	r3, #7
 8021332:	d9db      	bls.n	80212ec <mul+0x38>
    }
    accum[i + j] = carry2;
 8021334:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8021336:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8021338:	4413      	add	r3, r2
 802133a:	69ba      	ldr	r2, [r7, #24]
 802133c:	009b      	lsls	r3, r3, #2
 802133e:	3368      	adds	r3, #104	@ 0x68
 8021340:	443b      	add	r3, r7
 8021342:	f843 2c4c 	str.w	r2, [r3, #-76]
  for (i = 0; i < nb; i++) {
 8021346:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8021348:	3301      	adds	r3, #1
 802134a:	667b      	str	r3, [r7, #100]	@ 0x64
 802134c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 802134e:	683b      	ldr	r3, [r7, #0]
 8021350:	429a      	cmp	r2, r3
 8021352:	d3c0      	bcc.n	80212d6 <mul+0x22>
  }

  carry2 = 0;
 8021354:	2300      	movs	r3, #0
 8021356:	61bb      	str	r3, [r7, #24]
  for (j = 0; j < NLIMBS; j++) {
 8021358:	2300      	movs	r3, #0
 802135a:	663b      	str	r3, [r7, #96]	@ 0x60
 802135c:	e01b      	b.n	8021396 <mul+0xe2>
    out[j] = umaal(&carry2, accum[j], 38, accum[j + NLIMBS]);
 802135e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8021360:	009b      	lsls	r3, r3, #2
 8021362:	3368      	adds	r3, #104	@ 0x68
 8021364:	443b      	add	r3, r7
 8021366:	f853 1c4c 	ldr.w	r1, [r3, #-76]
 802136a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 802136c:	3308      	adds	r3, #8
 802136e:	009b      	lsls	r3, r3, #2
 8021370:	3368      	adds	r3, #104	@ 0x68
 8021372:	443b      	add	r3, r7
 8021374:	f853 5c4c 	ldr.w	r5, [r3, #-76]
 8021378:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 802137a:	009b      	lsls	r3, r3, #2
 802137c:	68fa      	ldr	r2, [r7, #12]
 802137e:	18d4      	adds	r4, r2, r3
 8021380:	f107 0018 	add.w	r0, r7, #24
 8021384:	462b      	mov	r3, r5
 8021386:	2226      	movs	r2, #38	@ 0x26
 8021388:	f7ff fe2e 	bl	8020fe8 <umaal>
 802138c:	4603      	mov	r3, r0
 802138e:	6023      	str	r3, [r4, #0]
  for (j = 0; j < NLIMBS; j++) {
 8021390:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8021392:	3301      	adds	r3, #1
 8021394:	663b      	str	r3, [r7, #96]	@ 0x60
 8021396:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8021398:	2b07      	cmp	r3, #7
 802139a:	d9e0      	bls.n	802135e <mul+0xaa>
  }
  propagate(out, carry2);
 802139c:	69bb      	ldr	r3, [r7, #24]
 802139e:	4619      	mov	r1, r3
 80213a0:	68f8      	ldr	r0, [r7, #12]
 80213a2:	f7ff fecc 	bl	802113e <propagate>
}
 80213a6:	bf00      	nop
 80213a8:	3768      	adds	r7, #104	@ 0x68
 80213aa:	46bd      	mov	sp, r7
 80213ac:	bdb0      	pop	{r4, r5, r7, pc}

080213ae <sqr>:

static void sqr(mg_fe out, const mg_fe a) {
 80213ae:	b580      	push	{r7, lr}
 80213b0:	b082      	sub	sp, #8
 80213b2:	af00      	add	r7, sp, #0
 80213b4:	6078      	str	r0, [r7, #4]
 80213b6:	6039      	str	r1, [r7, #0]
  mul(out, a, a, NLIMBS);
 80213b8:	2308      	movs	r3, #8
 80213ba:	683a      	ldr	r2, [r7, #0]
 80213bc:	6839      	ldr	r1, [r7, #0]
 80213be:	6878      	ldr	r0, [r7, #4]
 80213c0:	f7ff ff78 	bl	80212b4 <mul>
}
 80213c4:	bf00      	nop
 80213c6:	3708      	adds	r7, #8
 80213c8:	46bd      	mov	sp, r7
 80213ca:	bd80      	pop	{r7, pc}

080213cc <mul1>:
static void mul1(mg_fe out, const mg_fe a) {
 80213cc:	b580      	push	{r7, lr}
 80213ce:	b082      	sub	sp, #8
 80213d0:	af00      	add	r7, sp, #0
 80213d2:	6078      	str	r0, [r7, #4]
 80213d4:	6039      	str	r1, [r7, #0]
  mul(out, a, out, NLIMBS);
 80213d6:	2308      	movs	r3, #8
 80213d8:	687a      	ldr	r2, [r7, #4]
 80213da:	6839      	ldr	r1, [r7, #0]
 80213dc:	6878      	ldr	r0, [r7, #4]
 80213de:	f7ff ff69 	bl	80212b4 <mul>
}
 80213e2:	bf00      	nop
 80213e4:	3708      	adds	r7, #8
 80213e6:	46bd      	mov	sp, r7
 80213e8:	bd80      	pop	{r7, pc}

080213ea <sqr1>:
static void sqr1(mg_fe a) {
 80213ea:	b580      	push	{r7, lr}
 80213ec:	b082      	sub	sp, #8
 80213ee:	af00      	add	r7, sp, #0
 80213f0:	6078      	str	r0, [r7, #4]
  mul1(a, a);
 80213f2:	6879      	ldr	r1, [r7, #4]
 80213f4:	6878      	ldr	r0, [r7, #4]
 80213f6:	f7ff ffe9 	bl	80213cc <mul1>
}
 80213fa:	bf00      	nop
 80213fc:	3708      	adds	r7, #8
 80213fe:	46bd      	mov	sp, r7
 8021400:	bd80      	pop	{r7, pc}

08021402 <condswap>:

static void condswap(limb_t a[2 * NLIMBS], limb_t b[2 * NLIMBS],
                     limb_t doswap) {
 8021402:	b480      	push	{r7}
 8021404:	b087      	sub	sp, #28
 8021406:	af00      	add	r7, sp, #0
 8021408:	60f8      	str	r0, [r7, #12]
 802140a:	60b9      	str	r1, [r7, #8]
 802140c:	607a      	str	r2, [r7, #4]
  unsigned i;
  for (i = 0; i < 2 * NLIMBS; i++) {
 802140e:	2300      	movs	r3, #0
 8021410:	617b      	str	r3, [r7, #20]
 8021412:	e028      	b.n	8021466 <condswap+0x64>
    limb_t xor_ab = (a[i] ^ b[i]) & doswap;
 8021414:	697b      	ldr	r3, [r7, #20]
 8021416:	009b      	lsls	r3, r3, #2
 8021418:	68fa      	ldr	r2, [r7, #12]
 802141a:	4413      	add	r3, r2
 802141c:	681a      	ldr	r2, [r3, #0]
 802141e:	697b      	ldr	r3, [r7, #20]
 8021420:	009b      	lsls	r3, r3, #2
 8021422:	68b9      	ldr	r1, [r7, #8]
 8021424:	440b      	add	r3, r1
 8021426:	681b      	ldr	r3, [r3, #0]
 8021428:	4053      	eors	r3, r2
 802142a:	687a      	ldr	r2, [r7, #4]
 802142c:	4013      	ands	r3, r2
 802142e:	613b      	str	r3, [r7, #16]
    a[i] ^= xor_ab;
 8021430:	697b      	ldr	r3, [r7, #20]
 8021432:	009b      	lsls	r3, r3, #2
 8021434:	68fa      	ldr	r2, [r7, #12]
 8021436:	4413      	add	r3, r2
 8021438:	6819      	ldr	r1, [r3, #0]
 802143a:	697b      	ldr	r3, [r7, #20]
 802143c:	009b      	lsls	r3, r3, #2
 802143e:	68fa      	ldr	r2, [r7, #12]
 8021440:	4413      	add	r3, r2
 8021442:	693a      	ldr	r2, [r7, #16]
 8021444:	404a      	eors	r2, r1
 8021446:	601a      	str	r2, [r3, #0]
    b[i] ^= xor_ab;
 8021448:	697b      	ldr	r3, [r7, #20]
 802144a:	009b      	lsls	r3, r3, #2
 802144c:	68ba      	ldr	r2, [r7, #8]
 802144e:	4413      	add	r3, r2
 8021450:	6819      	ldr	r1, [r3, #0]
 8021452:	697b      	ldr	r3, [r7, #20]
 8021454:	009b      	lsls	r3, r3, #2
 8021456:	68ba      	ldr	r2, [r7, #8]
 8021458:	4413      	add	r3, r2
 802145a:	693a      	ldr	r2, [r7, #16]
 802145c:	404a      	eors	r2, r1
 802145e:	601a      	str	r2, [r3, #0]
  for (i = 0; i < 2 * NLIMBS; i++) {
 8021460:	697b      	ldr	r3, [r7, #20]
 8021462:	3301      	adds	r3, #1
 8021464:	617b      	str	r3, [r7, #20]
 8021466:	697b      	ldr	r3, [r7, #20]
 8021468:	2b0f      	cmp	r3, #15
 802146a:	d9d3      	bls.n	8021414 <condswap+0x12>
  }
}
 802146c:	bf00      	nop
 802146e:	bf00      	nop
 8021470:	371c      	adds	r7, #28
 8021472:	46bd      	mov	sp, r7
 8021474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021478:	4770      	bx	lr

0802147a <canon>:

// Canonicalize a field element x, reducing it to the least residue which is
// congruent to it mod 2^255-19
// - Precondition: x < 2^255 + 1 word
static limb_t canon(mg_fe x) {
 802147a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802147e:	b08b      	sub	sp, #44	@ 0x2c
 8021480:	af00      	add	r7, sp, #0
 8021482:	60f8      	str	r0, [r7, #12]
  // First, add 19.
  unsigned i;
  limb_t carry0 = 19;
 8021484:	2313      	movs	r3, #19
 8021486:	617b      	str	r3, [r7, #20]
  limb_t res;
  sdlimb_t carry;
  for (i = 0; i < NLIMBS; i++) {
 8021488:	2300      	movs	r3, #0
 802148a:	627b      	str	r3, [r7, #36]	@ 0x24
 802148c:	e012      	b.n	80214b4 <canon+0x3a>
    x[i] = adc0(&carry0, x[i]);
 802148e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021490:	009b      	lsls	r3, r3, #2
 8021492:	68fa      	ldr	r2, [r7, #12]
 8021494:	4413      	add	r3, r2
 8021496:	6819      	ldr	r1, [r3, #0]
 8021498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802149a:	009b      	lsls	r3, r3, #2
 802149c:	68fa      	ldr	r2, [r7, #12]
 802149e:	18d6      	adds	r6, r2, r3
 80214a0:	f107 0314 	add.w	r3, r7, #20
 80214a4:	4618      	mov	r0, r3
 80214a6:	f7ff fe24 	bl	80210f2 <adc0>
 80214aa:	4603      	mov	r3, r0
 80214ac:	6033      	str	r3, [r6, #0]
  for (i = 0; i < NLIMBS; i++) {
 80214ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80214b0:	3301      	adds	r3, #1
 80214b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80214b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80214b6:	2b07      	cmp	r3, #7
 80214b8:	d9e9      	bls.n	802148e <canon+0x14>
  }
  propagate(x, carry0);
 80214ba:	697b      	ldr	r3, [r7, #20]
 80214bc:	4619      	mov	r1, r3
 80214be:	68f8      	ldr	r0, [r7, #12]
 80214c0:	f7ff fe3d 	bl	802113e <propagate>
  // propagate does anything it adds 19.
  // - We know that the high bit must be clear, because either the input was ~
  // 2^255 + one word + 19 (in which case it propagates to at most 2 words) or
  // it was < 2^255. So now, if we subtract 19, we will get back to something in
  // [0,2^255-19).
  carry = -19;
 80214c4:	f06f 0212 	mvn.w	r2, #18
 80214c8:	f04f 33ff 	mov.w	r3, #4294967295
 80214cc:	e9c7 2306 	strd	r2, r3, [r7, #24]
  res = 0;
 80214d0:	2300      	movs	r3, #0
 80214d2:	623b      	str	r3, [r7, #32]
  for (i = 0; i < NLIMBS; i++) {
 80214d4:	2300      	movs	r3, #0
 80214d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80214d8:	e02a      	b.n	8021530 <canon+0xb6>
    carry += x[i];
 80214da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80214dc:	009b      	lsls	r3, r3, #2
 80214de:	68fa      	ldr	r2, [r7, #12]
 80214e0:	4413      	add	r3, r2
 80214e2:	681b      	ldr	r3, [r3, #0]
 80214e4:	2200      	movs	r2, #0
 80214e6:	4698      	mov	r8, r3
 80214e8:	4691      	mov	r9, r2
 80214ea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80214ee:	eb12 0108 	adds.w	r1, r2, r8
 80214f2:	6039      	str	r1, [r7, #0]
 80214f4:	eb43 0309 	adc.w	r3, r3, r9
 80214f8:	607b      	str	r3, [r7, #4]
 80214fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80214fe:	e9c7 2306 	strd	r2, r3, [r7, #24]
    res |= x[i] = (limb_t) carry;
 8021502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021504:	009b      	lsls	r3, r3, #2
 8021506:	68fa      	ldr	r2, [r7, #12]
 8021508:	4413      	add	r3, r2
 802150a:	69ba      	ldr	r2, [r7, #24]
 802150c:	601a      	str	r2, [r3, #0]
 802150e:	681b      	ldr	r3, [r3, #0]
 8021510:	6a3a      	ldr	r2, [r7, #32]
 8021512:	4313      	orrs	r3, r2
 8021514:	623b      	str	r3, [r7, #32]
    carry >>= X25519_WBITS;
 8021516:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 802151a:	f04f 0200 	mov.w	r2, #0
 802151e:	f04f 0300 	mov.w	r3, #0
 8021522:	000a      	movs	r2, r1
 8021524:	17cb      	asrs	r3, r1, #31
 8021526:	e9c7 2306 	strd	r2, r3, [r7, #24]
  for (i = 0; i < NLIMBS; i++) {
 802152a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802152c:	3301      	adds	r3, #1
 802152e:	627b      	str	r3, [r7, #36]	@ 0x24
 8021530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021532:	2b07      	cmp	r3, #7
 8021534:	d9d1      	bls.n	80214da <canon+0x60>
  }
  return (limb_t) (((dlimb_t) res - 1) >> X25519_WBITS);
 8021536:	6a3b      	ldr	r3, [r7, #32]
 8021538:	2200      	movs	r2, #0
 802153a:	461c      	mov	r4, r3
 802153c:	4615      	mov	r5, r2
 802153e:	f114 3aff 	adds.w	sl, r4, #4294967295
 8021542:	f145 3bff 	adc.w	fp, r5, #4294967295
 8021546:	f04f 0200 	mov.w	r2, #0
 802154a:	f04f 0300 	mov.w	r3, #0
 802154e:	465a      	mov	r2, fp
 8021550:	2300      	movs	r3, #0
 8021552:	4613      	mov	r3, r2
}
 8021554:	4618      	mov	r0, r3
 8021556:	372c      	adds	r7, #44	@ 0x2c
 8021558:	46bd      	mov	sp, r7
 802155a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08021560 <ladder_part1>:

static const limb_t a24[1] = {121665};

static void ladder_part1(mg_fe xs[5]) {
 8021560:	b580      	push	{r7, lr}
 8021562:	b088      	sub	sp, #32
 8021564:	af00      	add	r7, sp, #0
 8021566:	6078      	str	r0, [r7, #4]
  limb_t *x2 = xs[0], *z2 = xs[1], *x3 = xs[2], *z3 = xs[3], *t1 = xs[4];
 8021568:	687b      	ldr	r3, [r7, #4]
 802156a:	61fb      	str	r3, [r7, #28]
 802156c:	687b      	ldr	r3, [r7, #4]
 802156e:	3320      	adds	r3, #32
 8021570:	61bb      	str	r3, [r7, #24]
 8021572:	687b      	ldr	r3, [r7, #4]
 8021574:	3340      	adds	r3, #64	@ 0x40
 8021576:	617b      	str	r3, [r7, #20]
 8021578:	687b      	ldr	r3, [r7, #4]
 802157a:	3360      	adds	r3, #96	@ 0x60
 802157c:	613b      	str	r3, [r7, #16]
 802157e:	687b      	ldr	r3, [r7, #4]
 8021580:	3380      	adds	r3, #128	@ 0x80
 8021582:	60fb      	str	r3, [r7, #12]
  add(t1, x2, z2);                                 // t1 = A
 8021584:	69ba      	ldr	r2, [r7, #24]
 8021586:	69f9      	ldr	r1, [r7, #28]
 8021588:	68f8      	ldr	r0, [r7, #12]
 802158a:	f7ff fe12 	bl	80211b2 <add>
  sub(z2, x2, z2);                                 // z2 = B
 802158e:	69ba      	ldr	r2, [r7, #24]
 8021590:	69f9      	ldr	r1, [r7, #28]
 8021592:	69b8      	ldr	r0, [r7, #24]
 8021594:	f7ff fe3d 	bl	8021212 <sub>
  add(x2, x3, z3);                                 // x2 = C
 8021598:	693a      	ldr	r2, [r7, #16]
 802159a:	6979      	ldr	r1, [r7, #20]
 802159c:	69f8      	ldr	r0, [r7, #28]
 802159e:	f7ff fe08 	bl	80211b2 <add>
  sub(z3, x3, z3);                                 // z3 = D
 80215a2:	693a      	ldr	r2, [r7, #16]
 80215a4:	6979      	ldr	r1, [r7, #20]
 80215a6:	6938      	ldr	r0, [r7, #16]
 80215a8:	f7ff fe33 	bl	8021212 <sub>
  mul1(z3, t1);                                    // z3 = DA
 80215ac:	68f9      	ldr	r1, [r7, #12]
 80215ae:	6938      	ldr	r0, [r7, #16]
 80215b0:	f7ff ff0c 	bl	80213cc <mul1>
  mul1(x2, z2);                                    // x3 = BC
 80215b4:	69b9      	ldr	r1, [r7, #24]
 80215b6:	69f8      	ldr	r0, [r7, #28]
 80215b8:	f7ff ff08 	bl	80213cc <mul1>
  add(x3, z3, x2);                                 // x3 = DA+CB
 80215bc:	69fa      	ldr	r2, [r7, #28]
 80215be:	6939      	ldr	r1, [r7, #16]
 80215c0:	6978      	ldr	r0, [r7, #20]
 80215c2:	f7ff fdf6 	bl	80211b2 <add>
  sub(z3, z3, x2);                                 // z3 = DA-CB
 80215c6:	69fa      	ldr	r2, [r7, #28]
 80215c8:	6939      	ldr	r1, [r7, #16]
 80215ca:	6938      	ldr	r0, [r7, #16]
 80215cc:	f7ff fe21 	bl	8021212 <sub>
  sqr1(t1);                                        // t1 = AA
 80215d0:	68f8      	ldr	r0, [r7, #12]
 80215d2:	f7ff ff0a 	bl	80213ea <sqr1>
  sqr1(z2);                                        // z2 = BB
 80215d6:	69b8      	ldr	r0, [r7, #24]
 80215d8:	f7ff ff07 	bl	80213ea <sqr1>
  sub(x2, t1, z2);                                 // x2 = E = AA-BB
 80215dc:	69ba      	ldr	r2, [r7, #24]
 80215de:	68f9      	ldr	r1, [r7, #12]
 80215e0:	69f8      	ldr	r0, [r7, #28]
 80215e2:	f7ff fe16 	bl	8021212 <sub>
  mul(z2, x2, a24, sizeof(a24) / sizeof(a24[0]));  // z2 = E*a24
 80215e6:	2301      	movs	r3, #1
 80215e8:	4a06      	ldr	r2, [pc, #24]	@ (8021604 <ladder_part1+0xa4>)
 80215ea:	69f9      	ldr	r1, [r7, #28]
 80215ec:	69b8      	ldr	r0, [r7, #24]
 80215ee:	f7ff fe61 	bl	80212b4 <mul>
  add(z2, z2, t1);                                 // z2 = E*a24 + AA
 80215f2:	68fa      	ldr	r2, [r7, #12]
 80215f4:	69b9      	ldr	r1, [r7, #24]
 80215f6:	69b8      	ldr	r0, [r7, #24]
 80215f8:	f7ff fddb 	bl	80211b2 <add>
}
 80215fc:	bf00      	nop
 80215fe:	3720      	adds	r7, #32
 8021600:	46bd      	mov	sp, r7
 8021602:	bd80      	pop	{r7, pc}
 8021604:	0802d7d4 	.word	0x0802d7d4

08021608 <ladder_part2>:

static void ladder_part2(mg_fe xs[5], const mg_fe x1) {
 8021608:	b580      	push	{r7, lr}
 802160a:	b088      	sub	sp, #32
 802160c:	af00      	add	r7, sp, #0
 802160e:	6078      	str	r0, [r7, #4]
 8021610:	6039      	str	r1, [r7, #0]
  limb_t *x2 = xs[0], *z2 = xs[1], *x3 = xs[2], *z3 = xs[3], *t1 = xs[4];
 8021612:	687b      	ldr	r3, [r7, #4]
 8021614:	61fb      	str	r3, [r7, #28]
 8021616:	687b      	ldr	r3, [r7, #4]
 8021618:	3320      	adds	r3, #32
 802161a:	61bb      	str	r3, [r7, #24]
 802161c:	687b      	ldr	r3, [r7, #4]
 802161e:	3340      	adds	r3, #64	@ 0x40
 8021620:	617b      	str	r3, [r7, #20]
 8021622:	687b      	ldr	r3, [r7, #4]
 8021624:	3360      	adds	r3, #96	@ 0x60
 8021626:	613b      	str	r3, [r7, #16]
 8021628:	687b      	ldr	r3, [r7, #4]
 802162a:	3380      	adds	r3, #128	@ 0x80
 802162c:	60fb      	str	r3, [r7, #12]
  sqr1(z3);         // z3 = (DA-CB)^2
 802162e:	6938      	ldr	r0, [r7, #16]
 8021630:	f7ff fedb 	bl	80213ea <sqr1>
  mul1(z3, x1);     // z3 = x1 * (DA-CB)^2
 8021634:	6839      	ldr	r1, [r7, #0]
 8021636:	6938      	ldr	r0, [r7, #16]
 8021638:	f7ff fec8 	bl	80213cc <mul1>
  sqr1(x3);         // x3 = (DA+CB)^2
 802163c:	6978      	ldr	r0, [r7, #20]
 802163e:	f7ff fed4 	bl	80213ea <sqr1>
  mul1(z2, x2);     // z2 = AA*(E*a24+AA)
 8021642:	69f9      	ldr	r1, [r7, #28]
 8021644:	69b8      	ldr	r0, [r7, #24]
 8021646:	f7ff fec1 	bl	80213cc <mul1>
  sub(x2, t1, x2);  // x2 = BB again
 802164a:	69fa      	ldr	r2, [r7, #28]
 802164c:	68f9      	ldr	r1, [r7, #12]
 802164e:	69f8      	ldr	r0, [r7, #28]
 8021650:	f7ff fddf 	bl	8021212 <sub>
  mul1(x2, t1);     // x2 = AA*BB
 8021654:	68f9      	ldr	r1, [r7, #12]
 8021656:	69f8      	ldr	r0, [r7, #28]
 8021658:	f7ff feb8 	bl	80213cc <mul1>
}
 802165c:	bf00      	nop
 802165e:	3720      	adds	r7, #32
 8021660:	46bd      	mov	sp, r7
 8021662:	bd80      	pop	{r7, pc}

08021664 <x25519_core>:

static void x25519_core(mg_fe xs[5], const uint8_t scalar[X25519_BYTES],
                        const uint8_t *x1, int clamp) {
 8021664:	b580      	push	{r7, lr}
 8021666:	b094      	sub	sp, #80	@ 0x50
 8021668:	af00      	add	r7, sp, #0
 802166a:	60f8      	str	r0, [r7, #12]
 802166c:	60b9      	str	r1, [r7, #8]
 802166e:	607a      	str	r2, [r7, #4]
 8021670:	603b      	str	r3, [r7, #0]
  int i;
  mg_fe x1_limbs;
  limb_t swap = 0;
 8021672:	2300      	movs	r3, #0
 8021674:	64bb      	str	r3, [r7, #72]	@ 0x48
  limb_t *x2 = xs[0], *x3 = xs[2], *z3 = xs[3];
 8021676:	68fb      	ldr	r3, [r7, #12]
 8021678:	643b      	str	r3, [r7, #64]	@ 0x40
 802167a:	68fb      	ldr	r3, [r7, #12]
 802167c:	3340      	adds	r3, #64	@ 0x40
 802167e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8021680:	68fb      	ldr	r3, [r7, #12]
 8021682:	3360      	adds	r3, #96	@ 0x60
 8021684:	63bb      	str	r3, [r7, #56]	@ 0x38
  memset(xs, 0, 4 * sizeof(mg_fe));
 8021686:	2280      	movs	r2, #128	@ 0x80
 8021688:	2100      	movs	r1, #0
 802168a:	68f8      	ldr	r0, [r7, #12]
 802168c:	f006 f81c 	bl	80276c8 <memset>
  x2[0] = z3[0] = 1;
 8021690:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021692:	2201      	movs	r2, #1
 8021694:	601a      	str	r2, [r3, #0]
 8021696:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021698:	681a      	ldr	r2, [r3, #0]
 802169a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 802169c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < NLIMBS; i++) {
 802169e:	2300      	movs	r3, #0
 80216a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80216a2:	e031      	b.n	8021708 <x25519_core+0xa4>
    x3[i] = x1_limbs[i] =
        MG_U32(x1[i * 4 + 3], x1[i * 4 + 2], x1[i * 4 + 1], x1[i * 4]);
 80216a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80216a6:	009b      	lsls	r3, r3, #2
 80216a8:	3303      	adds	r3, #3
 80216aa:	687a      	ldr	r2, [r7, #4]
 80216ac:	4413      	add	r3, r2
 80216ae:	781b      	ldrb	r3, [r3, #0]
 80216b0:	061a      	lsls	r2, r3, #24
 80216b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80216b4:	009b      	lsls	r3, r3, #2
 80216b6:	3302      	adds	r3, #2
 80216b8:	6879      	ldr	r1, [r7, #4]
 80216ba:	440b      	add	r3, r1
 80216bc:	781b      	ldrb	r3, [r3, #0]
 80216be:	041b      	lsls	r3, r3, #16
 80216c0:	431a      	orrs	r2, r3
 80216c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80216c4:	009b      	lsls	r3, r3, #2
 80216c6:	3301      	adds	r3, #1
 80216c8:	6879      	ldr	r1, [r7, #4]
 80216ca:	440b      	add	r3, r1
 80216cc:	781b      	ldrb	r3, [r3, #0]
 80216ce:	021b      	lsls	r3, r3, #8
 80216d0:	4313      	orrs	r3, r2
 80216d2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80216d4:	0092      	lsls	r2, r2, #2
 80216d6:	4611      	mov	r1, r2
 80216d8:	687a      	ldr	r2, [r7, #4]
 80216da:	440a      	add	r2, r1
 80216dc:	7812      	ldrb	r2, [r2, #0]
 80216de:	431a      	orrs	r2, r3
    x3[i] = x1_limbs[i] =
 80216e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80216e2:	009b      	lsls	r3, r3, #2
 80216e4:	3350      	adds	r3, #80	@ 0x50
 80216e6:	443b      	add	r3, r7
 80216e8:	f843 2c3c 	str.w	r2, [r3, #-60]
 80216ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80216ee:	009b      	lsls	r3, r3, #2
 80216f0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80216f2:	441a      	add	r2, r3
 80216f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80216f6:	009b      	lsls	r3, r3, #2
 80216f8:	3350      	adds	r3, #80	@ 0x50
 80216fa:	443b      	add	r3, r7
 80216fc:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8021700:	6013      	str	r3, [r2, #0]
  for (i = 0; i < NLIMBS; i++) {
 8021702:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8021704:	3301      	adds	r3, #1
 8021706:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8021708:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802170a:	2b07      	cmp	r3, #7
 802170c:	ddca      	ble.n	80216a4 <x25519_core+0x40>
  }

  for (i = 255; i >= 0; i--) {
 802170e:	23ff      	movs	r3, #255	@ 0xff
 8021710:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8021712:	e049      	b.n	80217a8 <x25519_core+0x144>
    uint8_t bytei = scalar[i / 8];
 8021714:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8021716:	2b00      	cmp	r3, #0
 8021718:	da00      	bge.n	802171c <x25519_core+0xb8>
 802171a:	3307      	adds	r3, #7
 802171c:	10db      	asrs	r3, r3, #3
 802171e:	461a      	mov	r2, r3
 8021720:	68bb      	ldr	r3, [r7, #8]
 8021722:	4413      	add	r3, r2
 8021724:	781b      	ldrb	r3, [r3, #0]
 8021726:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    limb_t doswap;
    if (clamp) {
 802172a:	683b      	ldr	r3, [r7, #0]
 802172c:	2b00      	cmp	r3, #0
 802172e:	d01a      	beq.n	8021766 <x25519_core+0x102>
      if (i / 8 == 0) {
 8021730:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8021732:	3307      	adds	r3, #7
 8021734:	2b0e      	cmp	r3, #14
 8021736:	d806      	bhi.n	8021746 <x25519_core+0xe2>
        bytei &= (uint8_t) ~7U;
 8021738:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 802173c:	f023 0307 	bic.w	r3, r3, #7
 8021740:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8021744:	e00f      	b.n	8021766 <x25519_core+0x102>
      } else if (i / 8 == X25519_BYTES - 1) {
 8021746:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8021748:	3bf8      	subs	r3, #248	@ 0xf8
 802174a:	2b07      	cmp	r3, #7
 802174c:	d80b      	bhi.n	8021766 <x25519_core+0x102>
        bytei &= 0x7F;
 802174e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8021752:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8021756:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        bytei |= 0x40;
 802175a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 802175e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8021762:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
    doswap = 0 - (limb_t) ((bytei >> (i % 8)) & 1);
 8021766:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 802176a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802176c:	f003 0307 	and.w	r3, r3, #7
 8021770:	fa42 f303 	asr.w	r3, r2, r3
 8021774:	f003 0301 	and.w	r3, r3, #1
 8021778:	425b      	negs	r3, r3
 802177a:	637b      	str	r3, [r7, #52]	@ 0x34
    condswap(x2, x3, swap ^ doswap);
 802177c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 802177e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8021780:	4053      	eors	r3, r2
 8021782:	461a      	mov	r2, r3
 8021784:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8021786:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8021788:	f7ff fe3b 	bl	8021402 <condswap>
    swap = doswap;
 802178c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802178e:	64bb      	str	r3, [r7, #72]	@ 0x48

    ladder_part1(xs);
 8021790:	68f8      	ldr	r0, [r7, #12]
 8021792:	f7ff fee5 	bl	8021560 <ladder_part1>
    ladder_part2(xs, (const limb_t *) x1_limbs);
 8021796:	f107 0314 	add.w	r3, r7, #20
 802179a:	4619      	mov	r1, r3
 802179c:	68f8      	ldr	r0, [r7, #12]
 802179e:	f7ff ff33 	bl	8021608 <ladder_part2>
  for (i = 255; i >= 0; i--) {
 80217a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80217a4:	3b01      	subs	r3, #1
 80217a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80217a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80217aa:	2b00      	cmp	r3, #0
 80217ac:	dab2      	bge.n	8021714 <x25519_core+0xb0>
  }
  condswap(x2, x3, swap);
 80217ae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80217b0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80217b2:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80217b4:	f7ff fe25 	bl	8021402 <condswap>
}
 80217b8:	bf00      	nop
 80217ba:	3750      	adds	r7, #80	@ 0x50
 80217bc:	46bd      	mov	sp, r7
 80217be:	bd80      	pop	{r7, pc}

080217c0 <mg_tls_x25519>:

int mg_tls_x25519(uint8_t out[X25519_BYTES], const uint8_t scalar[X25519_BYTES],
                  const uint8_t x1[X25519_BYTES], int clamp) {
 80217c0:	b580      	push	{r7, lr}
 80217c2:	b0be      	sub	sp, #248	@ 0xf8
 80217c4:	af00      	add	r7, sp, #0
 80217c6:	60f8      	str	r0, [r7, #12]
 80217c8:	60b9      	str	r1, [r7, #8]
 80217ca:	607a      	str	r2, [r7, #4]
 80217cc:	603b      	str	r3, [r7, #0]
  static const struct {
    uint8_t a, c, n;
  } steps[13] = {{2, 1, 1},  {2, 1, 1},  {4, 2, 3},  {2, 4, 6},  {3, 1, 1},
                 {3, 2, 12}, {4, 3, 25}, {2, 3, 25}, {2, 4, 50}, {3, 2, 125},
                 {3, 1, 2},  {3, 1, 2},  {3, 1, 1}};
  x25519_core(xs, scalar, x1, clamp);
 80217ce:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 80217d2:	683b      	ldr	r3, [r7, #0]
 80217d4:	687a      	ldr	r2, [r7, #4]
 80217d6:	68b9      	ldr	r1, [r7, #8]
 80217d8:	f7ff ff44 	bl	8021664 <x25519_core>

  // Precomputed inversion chain
  x2 = xs[0];
 80217dc:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80217e0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  z2 = xs[1];
 80217e4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80217e8:	3320      	adds	r3, #32
 80217ea:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  z3 = xs[3];
 80217ee:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80217f2:	3360      	adds	r3, #96	@ 0x60
 80217f4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  prev = z2;
 80217f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80217fc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
  for (i = 0; i < 13; i++) {
 8021800:	2300      	movs	r3, #0
 8021802:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8021806:	e043      	b.n	8021890 <mg_tls_x25519+0xd0>
    int j;
    limb_t *a = xs[steps[i].a];
 8021808:	4952      	ldr	r1, [pc, #328]	@ (8021954 <mg_tls_x25519+0x194>)
 802180a:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 802180e:	4613      	mov	r3, r2
 8021810:	005b      	lsls	r3, r3, #1
 8021812:	4413      	add	r3, r2
 8021814:	440b      	add	r3, r1
 8021816:	781b      	ldrb	r3, [r3, #0]
 8021818:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 802181c:	015b      	lsls	r3, r3, #5
 802181e:	4413      	add	r3, r2
 8021820:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    for (j = steps[i].n; j > 0; j--) {
 8021824:	494b      	ldr	r1, [pc, #300]	@ (8021954 <mg_tls_x25519+0x194>)
 8021826:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 802182a:	4613      	mov	r3, r2
 802182c:	005b      	lsls	r3, r3, #1
 802182e:	4413      	add	r3, r2
 8021830:	440b      	add	r3, r1
 8021832:	3302      	adds	r3, #2
 8021834:	781b      	ldrb	r3, [r3, #0]
 8021836:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 802183a:	e00e      	b.n	802185a <mg_tls_x25519+0x9a>
      sqr(a, prev);
 802183c:	f8d7 10ec 	ldr.w	r1, [r7, #236]	@ 0xec
 8021840:	f8d7 00d4 	ldr.w	r0, [r7, #212]	@ 0xd4
 8021844:	f7ff fdb3 	bl	80213ae <sqr>
      prev = a;
 8021848:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 802184c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    for (j = steps[i].n; j > 0; j--) {
 8021850:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8021854:	3b01      	subs	r3, #1
 8021856:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 802185a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 802185e:	2b00      	cmp	r3, #0
 8021860:	dcec      	bgt.n	802183c <mg_tls_x25519+0x7c>
    }
    mul1(a, xs[steps[i].c]);
 8021862:	493c      	ldr	r1, [pc, #240]	@ (8021954 <mg_tls_x25519+0x194>)
 8021864:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8021868:	4613      	mov	r3, r2
 802186a:	005b      	lsls	r3, r3, #1
 802186c:	4413      	add	r3, r2
 802186e:	440b      	add	r3, r1
 8021870:	3301      	adds	r3, #1
 8021872:	781b      	ldrb	r3, [r3, #0]
 8021874:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8021878:	015b      	lsls	r3, r3, #5
 802187a:	4413      	add	r3, r2
 802187c:	4619      	mov	r1, r3
 802187e:	f8d7 00d4 	ldr.w	r0, [r7, #212]	@ 0xd4
 8021882:	f7ff fda3 	bl	80213cc <mul1>
  for (i = 0; i < 13; i++) {
 8021886:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 802188a:	3301      	adds	r3, #1
 802188c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8021890:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8021894:	2b0c      	cmp	r3, #12
 8021896:	ddb7      	ble.n	8021808 <mg_tls_x25519+0x48>
  }

  // Here prev = z3
  // x2 /= z2
  mul(out_limbs, x2, z3, NLIMBS);
 8021898:	f107 0014 	add.w	r0, r7, #20
 802189c:	2308      	movs	r3, #8
 802189e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80218a2:	f8d7 10e4 	ldr.w	r1, [r7, #228]	@ 0xe4
 80218a6:	f7ff fd05 	bl	80212b4 <mul>
  ret = (int) canon(out_limbs);
 80218aa:	f107 0314 	add.w	r3, r7, #20
 80218ae:	4618      	mov	r0, r3
 80218b0:	f7ff fde3 	bl	802147a <canon>
 80218b4:	4603      	mov	r3, r0
 80218b6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  if (!clamp) ret = 0;
 80218ba:	683b      	ldr	r3, [r7, #0]
 80218bc:	2b00      	cmp	r3, #0
 80218be:	d102      	bne.n	80218c6 <mg_tls_x25519+0x106>
 80218c0:	2300      	movs	r3, #0
 80218c2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  for (i = 0; i < NLIMBS; i++) {
 80218c6:	2300      	movs	r3, #0
 80218c8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80218cc:	e038      	b.n	8021940 <mg_tls_x25519+0x180>
    uint32_t n = out_limbs[i];
 80218ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80218d2:	009b      	lsls	r3, r3, #2
 80218d4:	33f8      	adds	r3, #248	@ 0xf8
 80218d6:	443b      	add	r3, r7
 80218d8:	f853 3ce4 	ldr.w	r3, [r3, #-228]
 80218dc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    out[i * 4] = (uint8_t) (n & 0xff);
 80218e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80218e4:	009b      	lsls	r3, r3, #2
 80218e6:	461a      	mov	r2, r3
 80218e8:	68fb      	ldr	r3, [r7, #12]
 80218ea:	4413      	add	r3, r2
 80218ec:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 80218f0:	b2d2      	uxtb	r2, r2
 80218f2:	701a      	strb	r2, [r3, #0]
    out[i * 4 + 1] = (uint8_t) ((n >> 8) & 0xff);
 80218f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80218f8:	0a19      	lsrs	r1, r3, #8
 80218fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80218fe:	009b      	lsls	r3, r3, #2
 8021900:	3301      	adds	r3, #1
 8021902:	68fa      	ldr	r2, [r7, #12]
 8021904:	4413      	add	r3, r2
 8021906:	b2ca      	uxtb	r2, r1
 8021908:	701a      	strb	r2, [r3, #0]
    out[i * 4 + 2] = (uint8_t) ((n >> 16) & 0xff);
 802190a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 802190e:	0c19      	lsrs	r1, r3, #16
 8021910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8021914:	009b      	lsls	r3, r3, #2
 8021916:	3302      	adds	r3, #2
 8021918:	68fa      	ldr	r2, [r7, #12]
 802191a:	4413      	add	r3, r2
 802191c:	b2ca      	uxtb	r2, r1
 802191e:	701a      	strb	r2, [r3, #0]
    out[i * 4 + 3] = (uint8_t) ((n >> 24) & 0xff);
 8021920:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8021924:	0e19      	lsrs	r1, r3, #24
 8021926:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 802192a:	009b      	lsls	r3, r3, #2
 802192c:	3303      	adds	r3, #3
 802192e:	68fa      	ldr	r2, [r7, #12]
 8021930:	4413      	add	r3, r2
 8021932:	b2ca      	uxtb	r2, r1
 8021934:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < NLIMBS; i++) {
 8021936:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 802193a:	3301      	adds	r3, #1
 802193c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8021940:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8021944:	2b07      	cmp	r3, #7
 8021946:	ddc2      	ble.n	80218ce <mg_tls_x25519+0x10e>
  }
  return ret;
 8021948:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
}
 802194c:	4618      	mov	r0, r3
 802194e:	37f8      	adds	r7, #248	@ 0xf8
 8021950:	46bd      	mov	sp, r7
 8021952:	bd80      	pop	{r7, pc}
 8021954:	0802db48 	.word	0x0802db48

08021958 <mg_url_is_ssl>:

struct url {
  size_t key, user, pass, host, port, uri, end;
};

int mg_url_is_ssl(const char *url) {
 8021958:	b580      	push	{r7, lr}
 802195a:	b082      	sub	sp, #8
 802195c:	af00      	add	r7, sp, #0
 802195e:	6078      	str	r0, [r7, #4]
  return strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0 ||
 8021960:	2204      	movs	r2, #4
 8021962:	491b      	ldr	r1, [pc, #108]	@ (80219d0 <mg_url_is_ssl+0x78>)
 8021964:	6878      	ldr	r0, [r7, #4]
 8021966:	f005 fec4 	bl	80276f2 <strncmp>
 802196a:	4603      	mov	r3, r0
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
         strncmp(url, "tls:", 4) == 0 || strncmp(url, "tcps:", 5) == 0;
 802196c:	2b00      	cmp	r3, #0
 802196e:	d027      	beq.n	80219c0 <mg_url_is_ssl+0x68>
  return strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0 ||
 8021970:	2206      	movs	r2, #6
 8021972:	4918      	ldr	r1, [pc, #96]	@ (80219d4 <mg_url_is_ssl+0x7c>)
 8021974:	6878      	ldr	r0, [r7, #4]
 8021976:	f005 febc 	bl	80276f2 <strncmp>
 802197a:	4603      	mov	r3, r0
 802197c:	2b00      	cmp	r3, #0
 802197e:	d01f      	beq.n	80219c0 <mg_url_is_ssl+0x68>
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
 8021980:	2206      	movs	r2, #6
 8021982:	4915      	ldr	r1, [pc, #84]	@ (80219d8 <mg_url_is_ssl+0x80>)
 8021984:	6878      	ldr	r0, [r7, #4]
 8021986:	f005 feb4 	bl	80276f2 <strncmp>
 802198a:	4603      	mov	r3, r0
  return strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0 ||
 802198c:	2b00      	cmp	r3, #0
 802198e:	d017      	beq.n	80219c0 <mg_url_is_ssl+0x68>
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
 8021990:	2204      	movs	r2, #4
 8021992:	4912      	ldr	r1, [pc, #72]	@ (80219dc <mg_url_is_ssl+0x84>)
 8021994:	6878      	ldr	r0, [r7, #4]
 8021996:	f005 feac 	bl	80276f2 <strncmp>
 802199a:	4603      	mov	r3, r0
 802199c:	2b00      	cmp	r3, #0
 802199e:	d00f      	beq.n	80219c0 <mg_url_is_ssl+0x68>
         strncmp(url, "tls:", 4) == 0 || strncmp(url, "tcps:", 5) == 0;
 80219a0:	2204      	movs	r2, #4
 80219a2:	490f      	ldr	r1, [pc, #60]	@ (80219e0 <mg_url_is_ssl+0x88>)
 80219a4:	6878      	ldr	r0, [r7, #4]
 80219a6:	f005 fea4 	bl	80276f2 <strncmp>
 80219aa:	4603      	mov	r3, r0
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
 80219ac:	2b00      	cmp	r3, #0
 80219ae:	d007      	beq.n	80219c0 <mg_url_is_ssl+0x68>
         strncmp(url, "tls:", 4) == 0 || strncmp(url, "tcps:", 5) == 0;
 80219b0:	2205      	movs	r2, #5
 80219b2:	490c      	ldr	r1, [pc, #48]	@ (80219e4 <mg_url_is_ssl+0x8c>)
 80219b4:	6878      	ldr	r0, [r7, #4]
 80219b6:	f005 fe9c 	bl	80276f2 <strncmp>
 80219ba:	4603      	mov	r3, r0
 80219bc:	2b00      	cmp	r3, #0
 80219be:	d101      	bne.n	80219c4 <mg_url_is_ssl+0x6c>
 80219c0:	2301      	movs	r3, #1
 80219c2:	e000      	b.n	80219c6 <mg_url_is_ssl+0x6e>
 80219c4:	2300      	movs	r3, #0
}
 80219c6:	4618      	mov	r0, r3
 80219c8:	3708      	adds	r7, #8
 80219ca:	46bd      	mov	sp, r7
 80219cc:	bd80      	pop	{r7, pc}
 80219ce:	bf00      	nop
 80219d0:	0802c3a4 	.word	0x0802c3a4
 80219d4:	0802c3ac 	.word	0x0802c3ac
 80219d8:	0802c3b4 	.word	0x0802c3b4
 80219dc:	0802c3bc 	.word	0x0802c3bc
 80219e0:	0802c3c4 	.word	0x0802c3c4
 80219e4:	0802c3cc 	.word	0x0802c3cc

080219e8 <urlparse>:

static struct url urlparse(const char *url) {
 80219e8:	b5b0      	push	{r4, r5, r7, lr}
 80219ea:	b08a      	sub	sp, #40	@ 0x28
 80219ec:	af00      	add	r7, sp, #0
 80219ee:	6078      	str	r0, [r7, #4]
 80219f0:	6039      	str	r1, [r7, #0]
  size_t i;
  struct url u;
  memset(&u, 0, sizeof(u));
 80219f2:	f107 0308 	add.w	r3, r7, #8
 80219f6:	221c      	movs	r2, #28
 80219f8:	2100      	movs	r1, #0
 80219fa:	4618      	mov	r0, r3
 80219fc:	f005 fe64 	bl	80276c8 <memset>
  for (i = 0; url[i] != '\0'; i++) {
 8021a00:	2300      	movs	r3, #0
 8021a02:	627b      	str	r3, [r7, #36]	@ 0x24
 8021a04:	e05b      	b.n	8021abe <urlparse+0xd6>
    if (url[i] == '/' && i > 0 && u.host == 0 && url[i - 1] == '/') {
 8021a06:	683a      	ldr	r2, [r7, #0]
 8021a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021a0a:	4413      	add	r3, r2
 8021a0c:	781b      	ldrb	r3, [r3, #0]
 8021a0e:	2b2f      	cmp	r3, #47	@ 0x2f
 8021a10:	d112      	bne.n	8021a38 <urlparse+0x50>
 8021a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021a14:	2b00      	cmp	r3, #0
 8021a16:	d00f      	beq.n	8021a38 <urlparse+0x50>
 8021a18:	697b      	ldr	r3, [r7, #20]
 8021a1a:	2b00      	cmp	r3, #0
 8021a1c:	d10c      	bne.n	8021a38 <urlparse+0x50>
 8021a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021a20:	3b01      	subs	r3, #1
 8021a22:	683a      	ldr	r2, [r7, #0]
 8021a24:	4413      	add	r3, r2
 8021a26:	781b      	ldrb	r3, [r3, #0]
 8021a28:	2b2f      	cmp	r3, #47	@ 0x2f
 8021a2a:	d105      	bne.n	8021a38 <urlparse+0x50>
      u.host = i + 1;
 8021a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021a2e:	3301      	adds	r3, #1
 8021a30:	617b      	str	r3, [r7, #20]
      u.port = 0;
 8021a32:	2300      	movs	r3, #0
 8021a34:	61bb      	str	r3, [r7, #24]
 8021a36:	e03f      	b.n	8021ab8 <urlparse+0xd0>
    } else if (url[i] == ']') {
 8021a38:	683a      	ldr	r2, [r7, #0]
 8021a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021a3c:	4413      	add	r3, r2
 8021a3e:	781b      	ldrb	r3, [r3, #0]
 8021a40:	2b5d      	cmp	r3, #93	@ 0x5d
 8021a42:	d102      	bne.n	8021a4a <urlparse+0x62>
      u.port = 0;  // IPv6 URLs, like http://[::1]/bar
 8021a44:	2300      	movs	r3, #0
 8021a46:	61bb      	str	r3, [r7, #24]
 8021a48:	e036      	b.n	8021ab8 <urlparse+0xd0>
    } else if (url[i] == ':' && u.port == 0 && u.uri == 0) {
 8021a4a:	683a      	ldr	r2, [r7, #0]
 8021a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021a4e:	4413      	add	r3, r2
 8021a50:	781b      	ldrb	r3, [r3, #0]
 8021a52:	2b3a      	cmp	r3, #58	@ 0x3a
 8021a54:	d109      	bne.n	8021a6a <urlparse+0x82>
 8021a56:	69bb      	ldr	r3, [r7, #24]
 8021a58:	2b00      	cmp	r3, #0
 8021a5a:	d106      	bne.n	8021a6a <urlparse+0x82>
 8021a5c:	69fb      	ldr	r3, [r7, #28]
 8021a5e:	2b00      	cmp	r3, #0
 8021a60:	d103      	bne.n	8021a6a <urlparse+0x82>
      u.port = i + 1;
 8021a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021a64:	3301      	adds	r3, #1
 8021a66:	61bb      	str	r3, [r7, #24]
 8021a68:	e026      	b.n	8021ab8 <urlparse+0xd0>
    } else if (url[i] == '@' && u.user == 0 && u.pass == 0 && u.uri == 0) {
 8021a6a:	683a      	ldr	r2, [r7, #0]
 8021a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021a6e:	4413      	add	r3, r2
 8021a70:	781b      	ldrb	r3, [r3, #0]
 8021a72:	2b40      	cmp	r3, #64	@ 0x40
 8021a74:	d112      	bne.n	8021a9c <urlparse+0xb4>
 8021a76:	68fb      	ldr	r3, [r7, #12]
 8021a78:	2b00      	cmp	r3, #0
 8021a7a:	d10f      	bne.n	8021a9c <urlparse+0xb4>
 8021a7c:	693b      	ldr	r3, [r7, #16]
 8021a7e:	2b00      	cmp	r3, #0
 8021a80:	d10c      	bne.n	8021a9c <urlparse+0xb4>
 8021a82:	69fb      	ldr	r3, [r7, #28]
 8021a84:	2b00      	cmp	r3, #0
 8021a86:	d109      	bne.n	8021a9c <urlparse+0xb4>
      u.user = u.host;
 8021a88:	697b      	ldr	r3, [r7, #20]
 8021a8a:	60fb      	str	r3, [r7, #12]
      u.pass = u.port;
 8021a8c:	69bb      	ldr	r3, [r7, #24]
 8021a8e:	613b      	str	r3, [r7, #16]
      u.host = i + 1;
 8021a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021a92:	3301      	adds	r3, #1
 8021a94:	617b      	str	r3, [r7, #20]
      u.port = 0;
 8021a96:	2300      	movs	r3, #0
 8021a98:	61bb      	str	r3, [r7, #24]
 8021a9a:	e00d      	b.n	8021ab8 <urlparse+0xd0>
    } else if (url[i] == '/' && u.host && u.uri == 0) {
 8021a9c:	683a      	ldr	r2, [r7, #0]
 8021a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021aa0:	4413      	add	r3, r2
 8021aa2:	781b      	ldrb	r3, [r3, #0]
 8021aa4:	2b2f      	cmp	r3, #47	@ 0x2f
 8021aa6:	d107      	bne.n	8021ab8 <urlparse+0xd0>
 8021aa8:	697b      	ldr	r3, [r7, #20]
 8021aaa:	2b00      	cmp	r3, #0
 8021aac:	d004      	beq.n	8021ab8 <urlparse+0xd0>
 8021aae:	69fb      	ldr	r3, [r7, #28]
 8021ab0:	2b00      	cmp	r3, #0
 8021ab2:	d101      	bne.n	8021ab8 <urlparse+0xd0>
      u.uri = i;
 8021ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021ab6:	61fb      	str	r3, [r7, #28]
  for (i = 0; url[i] != '\0'; i++) {
 8021ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021aba:	3301      	adds	r3, #1
 8021abc:	627b      	str	r3, [r7, #36]	@ 0x24
 8021abe:	683a      	ldr	r2, [r7, #0]
 8021ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021ac2:	4413      	add	r3, r2
 8021ac4:	781b      	ldrb	r3, [r3, #0]
 8021ac6:	2b00      	cmp	r3, #0
 8021ac8:	d19d      	bne.n	8021a06 <urlparse+0x1e>
    }
  }
  u.end = i;
 8021aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021acc:	623b      	str	r3, [r7, #32]
#if 0
  printf("[%s] %d %d %d %d %d\n", url, u.user, u.pass, u.host, u.port, u.uri);
#endif
  return u;
 8021ace:	687b      	ldr	r3, [r7, #4]
 8021ad0:	461d      	mov	r5, r3
 8021ad2:	f107 0408 	add.w	r4, r7, #8
 8021ad6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8021ad8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8021ada:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8021ade:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8021ae2:	6878      	ldr	r0, [r7, #4]
 8021ae4:	3728      	adds	r7, #40	@ 0x28
 8021ae6:	46bd      	mov	sp, r7
 8021ae8:	bdb0      	pop	{r4, r5, r7, pc}

08021aea <mg_url_host>:

struct mg_str mg_url_host(const char *url) {
 8021aea:	b580      	push	{r7, lr}
 8021aec:	b08c      	sub	sp, #48	@ 0x30
 8021aee:	af00      	add	r7, sp, #0
 8021af0:	6078      	str	r0, [r7, #4]
 8021af2:	6039      	str	r1, [r7, #0]
  struct url u = urlparse(url);
 8021af4:	f107 0310 	add.w	r3, r7, #16
 8021af8:	6839      	ldr	r1, [r7, #0]
 8021afa:	4618      	mov	r0, r3
 8021afc:	f7ff ff74 	bl	80219e8 <urlparse>
  size_t n = u.port  ? u.port - u.host - 1
 8021b00:	6a3b      	ldr	r3, [r7, #32]
             : u.uri ? u.uri - u.host
 8021b02:	2b00      	cmp	r3, #0
 8021b04:	d004      	beq.n	8021b10 <mg_url_host+0x26>
  size_t n = u.port  ? u.port - u.host - 1
 8021b06:	6a3a      	ldr	r2, [r7, #32]
 8021b08:	69fb      	ldr	r3, [r7, #28]
 8021b0a:	1ad3      	subs	r3, r2, r3
             : u.uri ? u.uri - u.host
 8021b0c:	3b01      	subs	r3, #1
 8021b0e:	e009      	b.n	8021b24 <mg_url_host+0x3a>
 8021b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
                     : u.end - u.host;
 8021b12:	2b00      	cmp	r3, #0
 8021b14:	d003      	beq.n	8021b1e <mg_url_host+0x34>
             : u.uri ? u.uri - u.host
 8021b16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8021b18:	69fb      	ldr	r3, [r7, #28]
                     : u.end - u.host;
 8021b1a:	1ad3      	subs	r3, r2, r3
 8021b1c:	e002      	b.n	8021b24 <mg_url_host+0x3a>
 8021b1e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8021b20:	69fb      	ldr	r3, [r7, #28]
 8021b22:	1ad3      	subs	r3, r2, r3
  size_t n = u.port  ? u.port - u.host - 1
 8021b24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  struct mg_str s = mg_str_n(url + u.host, n);
 8021b26:	69fb      	ldr	r3, [r7, #28]
 8021b28:	683a      	ldr	r2, [r7, #0]
 8021b2a:	18d1      	adds	r1, r2, r3
 8021b2c:	f107 0308 	add.w	r3, r7, #8
 8021b30:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8021b32:	4618      	mov	r0, r3
 8021b34:	f7f4 fed3 	bl	80168de <mg_str_n>
  return s;
 8021b38:	687b      	ldr	r3, [r7, #4]
 8021b3a:	461a      	mov	r2, r3
 8021b3c:	f107 0308 	add.w	r3, r7, #8
 8021b40:	e893 0003 	ldmia.w	r3, {r0, r1}
 8021b44:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8021b48:	6878      	ldr	r0, [r7, #4]
 8021b4a:	3730      	adds	r7, #48	@ 0x30
 8021b4c:	46bd      	mov	sp, r7
 8021b4e:	bd80      	pop	{r7, pc}

08021b50 <mg_url_port>:
const char *mg_url_uri(const char *url) {
  struct url u = urlparse(url);
  return u.uri ? url + u.uri : "/";
}

unsigned short mg_url_port(const char *url) {
 8021b50:	b580      	push	{r7, lr}
 8021b52:	b08a      	sub	sp, #40	@ 0x28
 8021b54:	af00      	add	r7, sp, #0
 8021b56:	6078      	str	r0, [r7, #4]
  struct url u = urlparse(url);
 8021b58:	f107 0308 	add.w	r3, r7, #8
 8021b5c:	6879      	ldr	r1, [r7, #4]
 8021b5e:	4618      	mov	r0, r3
 8021b60:	f7ff ff42 	bl	80219e8 <urlparse>
  unsigned short port = 0;
 8021b64:	2300      	movs	r3, #0
 8021b66:	84fb      	strh	r3, [r7, #38]	@ 0x26
  if (strncmp(url, "http:", 5) == 0 || strncmp(url, "ws:", 3) == 0) port = 80;
 8021b68:	2205      	movs	r2, #5
 8021b6a:	4925      	ldr	r1, [pc, #148]	@ (8021c00 <mg_url_port+0xb0>)
 8021b6c:	6878      	ldr	r0, [r7, #4]
 8021b6e:	f005 fdc0 	bl	80276f2 <strncmp>
 8021b72:	4603      	mov	r3, r0
 8021b74:	2b00      	cmp	r3, #0
 8021b76:	d007      	beq.n	8021b88 <mg_url_port+0x38>
 8021b78:	2203      	movs	r2, #3
 8021b7a:	4922      	ldr	r1, [pc, #136]	@ (8021c04 <mg_url_port+0xb4>)
 8021b7c:	6878      	ldr	r0, [r7, #4]
 8021b7e:	f005 fdb8 	bl	80276f2 <strncmp>
 8021b82:	4603      	mov	r3, r0
 8021b84:	2b00      	cmp	r3, #0
 8021b86:	d101      	bne.n	8021b8c <mg_url_port+0x3c>
 8021b88:	2350      	movs	r3, #80	@ 0x50
 8021b8a:	84fb      	strh	r3, [r7, #38]	@ 0x26
  if (strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0)
 8021b8c:	2204      	movs	r2, #4
 8021b8e:	491e      	ldr	r1, [pc, #120]	@ (8021c08 <mg_url_port+0xb8>)
 8021b90:	6878      	ldr	r0, [r7, #4]
 8021b92:	f005 fdae 	bl	80276f2 <strncmp>
 8021b96:	4603      	mov	r3, r0
 8021b98:	2b00      	cmp	r3, #0
 8021b9a:	d007      	beq.n	8021bac <mg_url_port+0x5c>
 8021b9c:	2206      	movs	r2, #6
 8021b9e:	491b      	ldr	r1, [pc, #108]	@ (8021c0c <mg_url_port+0xbc>)
 8021ba0:	6878      	ldr	r0, [r7, #4]
 8021ba2:	f005 fda6 	bl	80276f2 <strncmp>
 8021ba6:	4603      	mov	r3, r0
 8021ba8:	2b00      	cmp	r3, #0
 8021baa:	d102      	bne.n	8021bb2 <mg_url_port+0x62>
    port = 443;
 8021bac:	f240 13bb 	movw	r3, #443	@ 0x1bb
 8021bb0:	84fb      	strh	r3, [r7, #38]	@ 0x26
  if (strncmp(url, "mqtt:", 5) == 0) port = 1883;
 8021bb2:	2205      	movs	r2, #5
 8021bb4:	4916      	ldr	r1, [pc, #88]	@ (8021c10 <mg_url_port+0xc0>)
 8021bb6:	6878      	ldr	r0, [r7, #4]
 8021bb8:	f005 fd9b 	bl	80276f2 <strncmp>
 8021bbc:	4603      	mov	r3, r0
 8021bbe:	2b00      	cmp	r3, #0
 8021bc0:	d102      	bne.n	8021bc8 <mg_url_port+0x78>
 8021bc2:	f240 735b 	movw	r3, #1883	@ 0x75b
 8021bc6:	84fb      	strh	r3, [r7, #38]	@ 0x26
  if (strncmp(url, "mqtts:", 6) == 0) port = 8883;
 8021bc8:	2206      	movs	r2, #6
 8021bca:	4912      	ldr	r1, [pc, #72]	@ (8021c14 <mg_url_port+0xc4>)
 8021bcc:	6878      	ldr	r0, [r7, #4]
 8021bce:	f005 fd90 	bl	80276f2 <strncmp>
 8021bd2:	4603      	mov	r3, r0
 8021bd4:	2b00      	cmp	r3, #0
 8021bd6:	d102      	bne.n	8021bde <mg_url_port+0x8e>
 8021bd8:	f242 23b3 	movw	r3, #8883	@ 0x22b3
 8021bdc:	84fb      	strh	r3, [r7, #38]	@ 0x26
  if (u.port) port = (unsigned short) atoi(url + u.port);
 8021bde:	69bb      	ldr	r3, [r7, #24]
 8021be0:	2b00      	cmp	r3, #0
 8021be2:	d007      	beq.n	8021bf4 <mg_url_port+0xa4>
 8021be4:	69bb      	ldr	r3, [r7, #24]
 8021be6:	687a      	ldr	r2, [r7, #4]
 8021be8:	4413      	add	r3, r2
 8021bea:	4618      	mov	r0, r3
 8021bec:	f003 feb9 	bl	8025962 <atoi>
 8021bf0:	4603      	mov	r3, r0
 8021bf2:	84fb      	strh	r3, [r7, #38]	@ 0x26
  return port;
 8021bf4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
}
 8021bf6:	4618      	mov	r0, r3
 8021bf8:	3728      	adds	r7, #40	@ 0x28
 8021bfa:	46bd      	mov	sp, r7
 8021bfc:	bd80      	pop	{r7, pc}
 8021bfe:	bf00      	nop
 8021c00:	0802c3d4 	.word	0x0802c3d4
 8021c04:	0802c3dc 	.word	0x0802c3dc
 8021c08:	0802c3a4 	.word	0x0802c3a4
 8021c0c:	0802c3ac 	.word	0x0802c3ac
 8021c10:	0802c3e0 	.word	0x0802c3e0
 8021c14:	0802c3b4 	.word	0x0802c3b4

08021c18 <mg_bzero>:



// Not using memset for zeroing memory, cause it can be dropped by compiler
// See https://github.com/cesanta/mongoose/pull/1265
void mg_bzero(volatile unsigned char *buf, size_t len) {
 8021c18:	b480      	push	{r7}
 8021c1a:	b083      	sub	sp, #12
 8021c1c:	af00      	add	r7, sp, #0
 8021c1e:	6078      	str	r0, [r7, #4]
 8021c20:	6039      	str	r1, [r7, #0]
  if (buf != NULL) {
 8021c22:	687b      	ldr	r3, [r7, #4]
 8021c24:	2b00      	cmp	r3, #0
 8021c26:	d00a      	beq.n	8021c3e <mg_bzero+0x26>
    while (len--) *buf++ = 0;
 8021c28:	e004      	b.n	8021c34 <mg_bzero+0x1c>
 8021c2a:	687b      	ldr	r3, [r7, #4]
 8021c2c:	1c5a      	adds	r2, r3, #1
 8021c2e:	607a      	str	r2, [r7, #4]
 8021c30:	2200      	movs	r2, #0
 8021c32:	701a      	strb	r2, [r3, #0]
 8021c34:	683b      	ldr	r3, [r7, #0]
 8021c36:	1e5a      	subs	r2, r3, #1
 8021c38:	603a      	str	r2, [r7, #0]
 8021c3a:	2b00      	cmp	r3, #0
 8021c3c:	d1f5      	bne.n	8021c2a <mg_bzero+0x12>
  }
}
 8021c3e:	bf00      	nop
 8021c40:	370c      	adds	r7, #12
 8021c42:	46bd      	mov	sp, r7
 8021c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021c48:	4770      	bx	lr
	...

08021c4c <mg_random_str>:
  }
  return success;
}
#endif

char *mg_random_str(char *buf, size_t len) {
 8021c4c:	b580      	push	{r7, lr}
 8021c4e:	b084      	sub	sp, #16
 8021c50:	af00      	add	r7, sp, #0
 8021c52:	6078      	str	r0, [r7, #4]
 8021c54:	6039      	str	r1, [r7, #0]
  size_t i;
  mg_random(buf, len);
 8021c56:	6839      	ldr	r1, [r7, #0]
 8021c58:	6878      	ldr	r0, [r7, #4]
 8021c5a:	f7de ff4b 	bl	8000af4 <mg_random>
  for (i = 0; i < len; i++) {
 8021c5e:	2300      	movs	r3, #0
 8021c60:	60fb      	str	r3, [r7, #12]
 8021c62:	e02d      	b.n	8021cc0 <mg_random_str+0x74>
    uint8_t c = ((uint8_t *) buf)[i] % 62U;
 8021c64:	687a      	ldr	r2, [r7, #4]
 8021c66:	68fb      	ldr	r3, [r7, #12]
 8021c68:	4413      	add	r3, r2
 8021c6a:	781a      	ldrb	r2, [r3, #0]
 8021c6c:	0853      	lsrs	r3, r2, #1
 8021c6e:	4919      	ldr	r1, [pc, #100]	@ (8021cd4 <mg_random_str+0x88>)
 8021c70:	fba1 1303 	umull	r1, r3, r1, r3
 8021c74:	0919      	lsrs	r1, r3, #4
 8021c76:	460b      	mov	r3, r1
 8021c78:	015b      	lsls	r3, r3, #5
 8021c7a:	1a5b      	subs	r3, r3, r1
 8021c7c:	005b      	lsls	r3, r3, #1
 8021c7e:	1ad3      	subs	r3, r2, r3
 8021c80:	72fb      	strb	r3, [r7, #11]
    buf[i] = i == len - 1 ? (char) '\0'            // 0-terminate last byte
 8021c82:	683b      	ldr	r3, [r7, #0]
 8021c84:	3b01      	subs	r3, #1
 8021c86:	68fa      	ldr	r2, [r7, #12]
 8021c88:	429a      	cmp	r2, r3
 8021c8a:	d011      	beq.n	8021cb0 <mg_random_str+0x64>
 8021c8c:	7afb      	ldrb	r3, [r7, #11]
 8021c8e:	2b19      	cmp	r3, #25
 8021c90:	d803      	bhi.n	8021c9a <mg_random_str+0x4e>
 8021c92:	7afb      	ldrb	r3, [r7, #11]
 8021c94:	3361      	adds	r3, #97	@ 0x61
 8021c96:	b2db      	uxtb	r3, r3
 8021c98:	e00b      	b.n	8021cb2 <mg_random_str+0x66>
 8021c9a:	7afb      	ldrb	r3, [r7, #11]
 8021c9c:	2b33      	cmp	r3, #51	@ 0x33
 8021c9e:	d803      	bhi.n	8021ca8 <mg_random_str+0x5c>
 8021ca0:	7afb      	ldrb	r3, [r7, #11]
 8021ca2:	3327      	adds	r3, #39	@ 0x27
 8021ca4:	b2db      	uxtb	r3, r3
 8021ca6:	e004      	b.n	8021cb2 <mg_random_str+0x66>
 8021ca8:	7afb      	ldrb	r3, [r7, #11]
 8021caa:	3b04      	subs	r3, #4
 8021cac:	b2db      	uxtb	r3, r3
 8021cae:	e000      	b.n	8021cb2 <mg_random_str+0x66>
 8021cb0:	2300      	movs	r3, #0
 8021cb2:	6879      	ldr	r1, [r7, #4]
 8021cb4:	68fa      	ldr	r2, [r7, #12]
 8021cb6:	440a      	add	r2, r1
 8021cb8:	7013      	strb	r3, [r2, #0]
  for (i = 0; i < len; i++) {
 8021cba:	68fb      	ldr	r3, [r7, #12]
 8021cbc:	3301      	adds	r3, #1
 8021cbe:	60fb      	str	r3, [r7, #12]
 8021cc0:	68fa      	ldr	r2, [r7, #12]
 8021cc2:	683b      	ldr	r3, [r7, #0]
 8021cc4:	429a      	cmp	r2, r3
 8021cc6:	d3cd      	bcc.n	8021c64 <mg_random_str+0x18>
             : c < 26     ? (char) ('a' + c)       // lowercase
             : c < 52     ? (char) ('A' + c - 26)  // uppercase
                          : (char) ('0' + c - 52);     // numeric
  }
  return buf;
 8021cc8:	687b      	ldr	r3, [r7, #4]
}
 8021cca:	4618      	mov	r0, r3
 8021ccc:	3710      	adds	r7, #16
 8021cce:	46bd      	mov	sp, r7
 8021cd0:	bd80      	pop	{r7, pc}
 8021cd2:	bf00      	nop
 8021cd4:	84210843 	.word	0x84210843

08021cd8 <mg_crc32>:

uint32_t mg_crc32(uint32_t crc, const char *buf, size_t len) {
 8021cd8:	b480      	push	{r7}
 8021cda:	b087      	sub	sp, #28
 8021cdc:	af00      	add	r7, sp, #0
 8021cde:	60f8      	str	r0, [r7, #12]
 8021ce0:	60b9      	str	r1, [r7, #8]
 8021ce2:	607a      	str	r2, [r7, #4]
  static const uint32_t crclut[16] = {
      // table for polynomial 0xEDB88320 (reflected)
      0x00000000, 0x1DB71064, 0x3B6E20C8, 0x26D930AC, 0x76DC4190, 0x6B6B51F4,
      0x4DB26158, 0x5005713C, 0xEDB88320, 0xF00F9344, 0xD6D6A3E8, 0xCB61B38C,
      0x9B64C2B0, 0x86D3D2D4, 0xA00AE278, 0xBDBDF21C};
  crc = ~crc;
 8021ce4:	68fb      	ldr	r3, [r7, #12]
 8021ce6:	43db      	mvns	r3, r3
 8021ce8:	60fb      	str	r3, [r7, #12]
  while (len--) {
 8021cea:	e01f      	b.n	8021d2c <mg_crc32+0x54>
    uint8_t b = *(uint8_t *) buf++;
 8021cec:	68bb      	ldr	r3, [r7, #8]
 8021cee:	1c5a      	adds	r2, r3, #1
 8021cf0:	60ba      	str	r2, [r7, #8]
 8021cf2:	781b      	ldrb	r3, [r3, #0]
 8021cf4:	75fb      	strb	r3, [r7, #23]
    crc = crclut[(crc ^ b) & 0x0F] ^ (crc >> 4);
 8021cf6:	7dfa      	ldrb	r2, [r7, #23]
 8021cf8:	68fb      	ldr	r3, [r7, #12]
 8021cfa:	4053      	eors	r3, r2
 8021cfc:	f003 030f 	and.w	r3, r3, #15
 8021d00:	4a11      	ldr	r2, [pc, #68]	@ (8021d48 <mg_crc32+0x70>)
 8021d02:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8021d06:	68fb      	ldr	r3, [r7, #12]
 8021d08:	091b      	lsrs	r3, r3, #4
 8021d0a:	4053      	eors	r3, r2
 8021d0c:	60fb      	str	r3, [r7, #12]
    crc = crclut[(crc ^ (b >> 4)) & 0x0F] ^ (crc >> 4);
 8021d0e:	7dfb      	ldrb	r3, [r7, #23]
 8021d10:	091b      	lsrs	r3, r3, #4
 8021d12:	b2db      	uxtb	r3, r3
 8021d14:	461a      	mov	r2, r3
 8021d16:	68fb      	ldr	r3, [r7, #12]
 8021d18:	4053      	eors	r3, r2
 8021d1a:	f003 030f 	and.w	r3, r3, #15
 8021d1e:	4a0a      	ldr	r2, [pc, #40]	@ (8021d48 <mg_crc32+0x70>)
 8021d20:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8021d24:	68fb      	ldr	r3, [r7, #12]
 8021d26:	091b      	lsrs	r3, r3, #4
 8021d28:	4053      	eors	r3, r2
 8021d2a:	60fb      	str	r3, [r7, #12]
  while (len--) {
 8021d2c:	687b      	ldr	r3, [r7, #4]
 8021d2e:	1e5a      	subs	r2, r3, #1
 8021d30:	607a      	str	r2, [r7, #4]
 8021d32:	2b00      	cmp	r3, #0
 8021d34:	d1da      	bne.n	8021cec <mg_crc32+0x14>
  }
  return ~crc;
 8021d36:	68fb      	ldr	r3, [r7, #12]
 8021d38:	43db      	mvns	r3, r3
}
 8021d3a:	4618      	mov	r0, r3
 8021d3c:	371c      	adds	r7, #28
 8021d3e:	46bd      	mov	sp, r7
 8021d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021d44:	4770      	bx	lr
 8021d46:	bf00      	nop
 8021d48:	0802db70 	.word	0x0802db70

08021d4c <mg_path_is_sane>:
    }
  }
  return allowed == '+';
}

bool mg_path_is_sane(const struct mg_str path) {
 8021d4c:	b480      	push	{r7}
 8021d4e:	b085      	sub	sp, #20
 8021d50:	af00      	add	r7, sp, #0
 8021d52:	463b      	mov	r3, r7
 8021d54:	e883 0003 	stmia.w	r3, {r0, r1}
  const char *s = path.buf;
 8021d58:	683b      	ldr	r3, [r7, #0]
 8021d5a:	60fb      	str	r3, [r7, #12]
  size_t n = path.len;
 8021d5c:	687b      	ldr	r3, [r7, #4]
 8021d5e:	60bb      	str	r3, [r7, #8]
  if (path.buf[0] == '~') return false;  // Starts with ~
 8021d60:	683b      	ldr	r3, [r7, #0]
 8021d62:	781b      	ldrb	r3, [r3, #0]
 8021d64:	2b7e      	cmp	r3, #126	@ 0x7e
 8021d66:	d101      	bne.n	8021d6c <mg_path_is_sane+0x20>
 8021d68:	2300      	movs	r3, #0
 8021d6a:	e02f      	b.n	8021dcc <mg_path_is_sane+0x80>
  if (path.buf[0] == '.' && path.buf[1] == '.') return false;  // Starts with ..
 8021d6c:	683b      	ldr	r3, [r7, #0]
 8021d6e:	781b      	ldrb	r3, [r3, #0]
 8021d70:	2b2e      	cmp	r3, #46	@ 0x2e
 8021d72:	d123      	bne.n	8021dbc <mg_path_is_sane+0x70>
 8021d74:	683b      	ldr	r3, [r7, #0]
 8021d76:	3301      	adds	r3, #1
 8021d78:	781b      	ldrb	r3, [r3, #0]
 8021d7a:	2b2e      	cmp	r3, #46	@ 0x2e
 8021d7c:	d11e      	bne.n	8021dbc <mg_path_is_sane+0x70>
 8021d7e:	2300      	movs	r3, #0
 8021d80:	e024      	b.n	8021dcc <mg_path_is_sane+0x80>
  for (; s[0] != '\0' && n > 0; s++, n--) {
    if ((s[0] == '/' || s[0] == '\\') && n >= 2) {   // Subdir?
 8021d82:	68fb      	ldr	r3, [r7, #12]
 8021d84:	781b      	ldrb	r3, [r3, #0]
 8021d86:	2b2f      	cmp	r3, #47	@ 0x2f
 8021d88:	d003      	beq.n	8021d92 <mg_path_is_sane+0x46>
 8021d8a:	68fb      	ldr	r3, [r7, #12]
 8021d8c:	781b      	ldrb	r3, [r3, #0]
 8021d8e:	2b5c      	cmp	r3, #92	@ 0x5c
 8021d90:	d10e      	bne.n	8021db0 <mg_path_is_sane+0x64>
 8021d92:	68bb      	ldr	r3, [r7, #8]
 8021d94:	2b01      	cmp	r3, #1
 8021d96:	d90b      	bls.n	8021db0 <mg_path_is_sane+0x64>
      if (s[1] == '.' && s[2] == '.') return false;  // Starts with ..
 8021d98:	68fb      	ldr	r3, [r7, #12]
 8021d9a:	3301      	adds	r3, #1
 8021d9c:	781b      	ldrb	r3, [r3, #0]
 8021d9e:	2b2e      	cmp	r3, #46	@ 0x2e
 8021da0:	d106      	bne.n	8021db0 <mg_path_is_sane+0x64>
 8021da2:	68fb      	ldr	r3, [r7, #12]
 8021da4:	3302      	adds	r3, #2
 8021da6:	781b      	ldrb	r3, [r3, #0]
 8021da8:	2b2e      	cmp	r3, #46	@ 0x2e
 8021daa:	d101      	bne.n	8021db0 <mg_path_is_sane+0x64>
 8021dac:	2300      	movs	r3, #0
 8021dae:	e00d      	b.n	8021dcc <mg_path_is_sane+0x80>
  for (; s[0] != '\0' && n > 0; s++, n--) {
 8021db0:	68fb      	ldr	r3, [r7, #12]
 8021db2:	3301      	adds	r3, #1
 8021db4:	60fb      	str	r3, [r7, #12]
 8021db6:	68bb      	ldr	r3, [r7, #8]
 8021db8:	3b01      	subs	r3, #1
 8021dba:	60bb      	str	r3, [r7, #8]
 8021dbc:	68fb      	ldr	r3, [r7, #12]
 8021dbe:	781b      	ldrb	r3, [r3, #0]
 8021dc0:	2b00      	cmp	r3, #0
 8021dc2:	d002      	beq.n	8021dca <mg_path_is_sane+0x7e>
 8021dc4:	68bb      	ldr	r3, [r7, #8]
 8021dc6:	2b00      	cmp	r3, #0
 8021dc8:	d1db      	bne.n	8021d82 <mg_path_is_sane+0x36>
    }
  }
  return true;
 8021dca:	2301      	movs	r3, #1
}
 8021dcc:	4618      	mov	r0, r3
 8021dce:	3714      	adds	r7, #20
 8021dd0:	46bd      	mov	sp, r7
 8021dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021dd6:	4770      	bx	lr

08021dd8 <mg_ntohs>:
#endif
}
#endif

// network format equates big endian order
uint16_t mg_ntohs(uint16_t net) {
 8021dd8:	b480      	push	{r7}
 8021dda:	b083      	sub	sp, #12
 8021ddc:	af00      	add	r7, sp, #0
 8021dde:	4603      	mov	r3, r0
 8021de0:	80fb      	strh	r3, [r7, #6]
  return MG_LOAD_BE16(&net);
 8021de2:	1dbb      	adds	r3, r7, #6
 8021de4:	781b      	ldrb	r3, [r3, #0]
 8021de6:	b21b      	sxth	r3, r3
 8021de8:	021b      	lsls	r3, r3, #8
 8021dea:	b21a      	sxth	r2, r3
 8021dec:	1dbb      	adds	r3, r7, #6
 8021dee:	3301      	adds	r3, #1
 8021df0:	781b      	ldrb	r3, [r3, #0]
 8021df2:	b21b      	sxth	r3, r3
 8021df4:	4313      	orrs	r3, r2
 8021df6:	b21b      	sxth	r3, r3
 8021df8:	b29b      	uxth	r3, r3
}
 8021dfa:	4618      	mov	r0, r3
 8021dfc:	370c      	adds	r7, #12
 8021dfe:	46bd      	mov	sp, r7
 8021e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021e04:	4770      	bx	lr

08021e06 <mg_ntohl>:

uint32_t mg_ntohl(uint32_t net) {
 8021e06:	b480      	push	{r7}
 8021e08:	b083      	sub	sp, #12
 8021e0a:	af00      	add	r7, sp, #0
 8021e0c:	6078      	str	r0, [r7, #4]
  return MG_LOAD_BE32(&net);
 8021e0e:	1d3b      	adds	r3, r7, #4
 8021e10:	781b      	ldrb	r3, [r3, #0]
 8021e12:	061a      	lsls	r2, r3, #24
 8021e14:	1d3b      	adds	r3, r7, #4
 8021e16:	3301      	adds	r3, #1
 8021e18:	781b      	ldrb	r3, [r3, #0]
 8021e1a:	041b      	lsls	r3, r3, #16
 8021e1c:	431a      	orrs	r2, r3
 8021e1e:	1d3b      	adds	r3, r7, #4
 8021e20:	3302      	adds	r3, #2
 8021e22:	781b      	ldrb	r3, [r3, #0]
 8021e24:	021b      	lsls	r3, r3, #8
 8021e26:	431a      	orrs	r2, r3
 8021e28:	1d3b      	adds	r3, r7, #4
 8021e2a:	3303      	adds	r3, #3
 8021e2c:	781b      	ldrb	r3, [r3, #0]
 8021e2e:	4313      	orrs	r3, r2
}
 8021e30:	4618      	mov	r0, r3
 8021e32:	370c      	adds	r7, #12
 8021e34:	46bd      	mov	sp, r7
 8021e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021e3a:	4770      	bx	lr

08021e3c <ws_handshake>:
  return len;
}

static void ws_handshake(struct mg_connection *c, const struct mg_str *wskey,
                         const struct mg_str *wsproto, const char *fmt,
                         va_list *ap) {
 8021e3c:	b580      	push	{r7, lr}
 8021e3e:	b0aa      	sub	sp, #168	@ 0xa8
 8021e40:	af00      	add	r7, sp, #0
 8021e42:	60f8      	str	r0, [r7, #12]
 8021e44:	60b9      	str	r1, [r7, #8]
 8021e46:	607a      	str	r2, [r7, #4]
 8021e48:	603b      	str	r3, [r7, #0]
  const char *magic = "258EAFA5-E914-47DA-95CA-C5AB0DC85B11";
 8021e4a:	4b29      	ldr	r3, [pc, #164]	@ (8021ef0 <ws_handshake+0xb4>)
 8021e4c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  unsigned char sha[20], b64_sha[30];

  mg_sha1_ctx sha_ctx;
  mg_sha1_init(&sha_ctx);
 8021e50:	f107 0314 	add.w	r3, r7, #20
 8021e54:	4618      	mov	r0, r3
 8021e56:	f7f2 ff57 	bl	8014d08 <mg_sha1_init>
  mg_sha1_update(&sha_ctx, (unsigned char *) wskey->buf, wskey->len);
 8021e5a:	68bb      	ldr	r3, [r7, #8]
 8021e5c:	6819      	ldr	r1, [r3, #0]
 8021e5e:	68bb      	ldr	r3, [r7, #8]
 8021e60:	685a      	ldr	r2, [r3, #4]
 8021e62:	f107 0314 	add.w	r3, r7, #20
 8021e66:	4618      	mov	r0, r3
 8021e68:	f7f2 ff78 	bl	8014d5c <mg_sha1_update>
  mg_sha1_update(&sha_ctx, (unsigned char *) magic, 36);
 8021e6c:	f107 0314 	add.w	r3, r7, #20
 8021e70:	2224      	movs	r2, #36	@ 0x24
 8021e72:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8021e76:	4618      	mov	r0, r3
 8021e78:	f7f2 ff70 	bl	8014d5c <mg_sha1_update>
  mg_sha1_final(sha, &sha_ctx);
 8021e7c:	f107 0214 	add.w	r2, r7, #20
 8021e80:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8021e84:	4611      	mov	r1, r2
 8021e86:	4618      	mov	r0, r3
 8021e88:	f7f2 ffce 	bl	8014e28 <mg_sha1_final>
  mg_base64_encode(sha, sizeof(sha), (char *) b64_sha, sizeof(b64_sha));
 8021e8c:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8021e90:	f107 0090 	add.w	r0, r7, #144	@ 0x90
 8021e94:	231e      	movs	r3, #30
 8021e96:	2114      	movs	r1, #20
 8021e98:	f7e5 ff9e 	bl	8007dd8 <mg_base64_encode>
  mg_xprintf(mg_pfn_iobuf, &c->send,
 8021e9c:	68fb      	ldr	r3, [r7, #12]
 8021e9e:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 8021ea2:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8021ea6:	4a13      	ldr	r2, [pc, #76]	@ (8021ef4 <ws_handshake+0xb8>)
 8021ea8:	4813      	ldr	r0, [pc, #76]	@ (8021ef8 <ws_handshake+0xbc>)
 8021eaa:	f7e7 fcfa 	bl	80098a2 <mg_xprintf>
             "HTTP/1.1 101 Switching Protocols\r\n"
             "Upgrade: websocket\r\n"
             "Connection: Upgrade\r\n"
             "Sec-WebSocket-Accept: %s\r\n",
             b64_sha);
  if (fmt != NULL) mg_vxprintf(mg_pfn_iobuf, &c->send, fmt, ap);
 8021eae:	683b      	ldr	r3, [r7, #0]
 8021eb0:	2b00      	cmp	r3, #0
 8021eb2:	d008      	beq.n	8021ec6 <ws_handshake+0x8a>
 8021eb4:	68fb      	ldr	r3, [r7, #12]
 8021eb6:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 8021eba:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8021ebe:	683a      	ldr	r2, [r7, #0]
 8021ec0:	480d      	ldr	r0, [pc, #52]	@ (8021ef8 <ws_handshake+0xbc>)
 8021ec2:	f7e7 fd09 	bl	80098d8 <mg_vxprintf>
  if (wsproto != NULL) {
 8021ec6:	687b      	ldr	r3, [r7, #4]
 8021ec8:	2b00      	cmp	r3, #0
 8021eca:	d008      	beq.n	8021ede <ws_handshake+0xa2>
    mg_printf(c, "Sec-WebSocket-Protocol: %.*s\r\n", (int) wsproto->len,
 8021ecc:	687b      	ldr	r3, [r7, #4]
 8021ece:	685b      	ldr	r3, [r3, #4]
 8021ed0:	461a      	mov	r2, r3
              wsproto->buf);
 8021ed2:	687b      	ldr	r3, [r7, #4]
 8021ed4:	681b      	ldr	r3, [r3, #0]
    mg_printf(c, "Sec-WebSocket-Protocol: %.*s\r\n", (int) wsproto->len,
 8021ed6:	4909      	ldr	r1, [pc, #36]	@ (8021efc <ws_handshake+0xc0>)
 8021ed8:	68f8      	ldr	r0, [r7, #12]
 8021eda:	f7ec fe3f 	bl	800eb5c <mg_printf>
  }
  mg_send(c, "\r\n", 2);
 8021ede:	2202      	movs	r2, #2
 8021ee0:	4907      	ldr	r1, [pc, #28]	@ (8021f00 <ws_handshake+0xc4>)
 8021ee2:	68f8      	ldr	r0, [r7, #12]
 8021ee4:	f7f0 ff76 	bl	8012dd4 <mg_send>
}
 8021ee8:	bf00      	nop
 8021eea:	37a8      	adds	r7, #168	@ 0xa8
 8021eec:	46bd      	mov	sp, r7
 8021eee:	bd80      	pop	{r7, pc}
 8021ef0:	0802c424 	.word	0x0802c424
 8021ef4:	0802c44c 	.word	0x0802c44c
 8021ef8:	080130ad 	.word	0x080130ad
 8021efc:	0802c4b4 	.word	0x0802c4b4
 8021f00:	08029f84 	.word	0x08029f84

08021f04 <be32>:

static uint32_t be32(const uint8_t *p) {
 8021f04:	b480      	push	{r7}
 8021f06:	b083      	sub	sp, #12
 8021f08:	af00      	add	r7, sp, #0
 8021f0a:	6078      	str	r0, [r7, #4]
  return (((uint32_t) p[3]) << 0) | (((uint32_t) p[2]) << 8) |
 8021f0c:	687b      	ldr	r3, [r7, #4]
 8021f0e:	3303      	adds	r3, #3
 8021f10:	781b      	ldrb	r3, [r3, #0]
 8021f12:	461a      	mov	r2, r3
 8021f14:	687b      	ldr	r3, [r7, #4]
 8021f16:	3302      	adds	r3, #2
 8021f18:	781b      	ldrb	r3, [r3, #0]
 8021f1a:	021b      	lsls	r3, r3, #8
 8021f1c:	431a      	orrs	r2, r3
         (((uint32_t) p[1]) << 16) | (((uint32_t) p[0]) << 24);
 8021f1e:	687b      	ldr	r3, [r7, #4]
 8021f20:	3301      	adds	r3, #1
 8021f22:	781b      	ldrb	r3, [r3, #0]
 8021f24:	041b      	lsls	r3, r3, #16
  return (((uint32_t) p[3]) << 0) | (((uint32_t) p[2]) << 8) |
 8021f26:	431a      	orrs	r2, r3
         (((uint32_t) p[1]) << 16) | (((uint32_t) p[0]) << 24);
 8021f28:	687b      	ldr	r3, [r7, #4]
 8021f2a:	781b      	ldrb	r3, [r3, #0]
 8021f2c:	061b      	lsls	r3, r3, #24
 8021f2e:	4313      	orrs	r3, r2
}
 8021f30:	4618      	mov	r0, r3
 8021f32:	370c      	adds	r7, #12
 8021f34:	46bd      	mov	sp, r7
 8021f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021f3a:	4770      	bx	lr

08021f3c <ws_process>:

static size_t ws_process(uint8_t *buf, size_t len, struct ws_msg *msg) {
 8021f3c:	b5b0      	push	{r4, r5, r7, lr}
 8021f3e:	b08a      	sub	sp, #40	@ 0x28
 8021f40:	af00      	add	r7, sp, #0
 8021f42:	60f8      	str	r0, [r7, #12]
 8021f44:	60b9      	str	r1, [r7, #8]
 8021f46:	607a      	str	r2, [r7, #4]
  size_t i, n = 0, mask_len = 0;
 8021f48:	2300      	movs	r3, #0
 8021f4a:	61fb      	str	r3, [r7, #28]
 8021f4c:	2300      	movs	r3, #0
 8021f4e:	623b      	str	r3, [r7, #32]
  memset(msg, 0, sizeof(*msg));
 8021f50:	220c      	movs	r2, #12
 8021f52:	2100      	movs	r1, #0
 8021f54:	6878      	ldr	r0, [r7, #4]
 8021f56:	f005 fbb7 	bl	80276c8 <memset>
  if (len >= 2) {
 8021f5a:	68bb      	ldr	r3, [r7, #8]
 8021f5c:	2b01      	cmp	r3, #1
 8021f5e:	d953      	bls.n	8022008 <ws_process+0xcc>
    n = buf[1] & 0x7f;                // Frame length
 8021f60:	68fb      	ldr	r3, [r7, #12]
 8021f62:	3301      	adds	r3, #1
 8021f64:	781b      	ldrb	r3, [r3, #0]
 8021f66:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8021f6a:	61fb      	str	r3, [r7, #28]
    mask_len = buf[1] & 128 ? 4 : 0;  // last bit is a mask bit
 8021f6c:	68fb      	ldr	r3, [r7, #12]
 8021f6e:	3301      	adds	r3, #1
 8021f70:	781b      	ldrb	r3, [r3, #0]
 8021f72:	b25b      	sxtb	r3, r3
 8021f74:	115b      	asrs	r3, r3, #5
 8021f76:	b25b      	sxtb	r3, r3
 8021f78:	f003 0304 	and.w	r3, r3, #4
 8021f7c:	623b      	str	r3, [r7, #32]
    msg->flags = buf[0];
 8021f7e:	68fb      	ldr	r3, [r7, #12]
 8021f80:	781a      	ldrb	r2, [r3, #0]
 8021f82:	687b      	ldr	r3, [r7, #4]
 8021f84:	701a      	strb	r2, [r3, #0]
    if (n < 126 && len >= mask_len) {
 8021f86:	69fb      	ldr	r3, [r7, #28]
 8021f88:	2b7d      	cmp	r3, #125	@ 0x7d
 8021f8a:	d80b      	bhi.n	8021fa4 <ws_process+0x68>
 8021f8c:	68ba      	ldr	r2, [r7, #8]
 8021f8e:	6a3b      	ldr	r3, [r7, #32]
 8021f90:	429a      	cmp	r2, r3
 8021f92:	d307      	bcc.n	8021fa4 <ws_process+0x68>
      msg->data_len = n;
 8021f94:	687b      	ldr	r3, [r7, #4]
 8021f96:	69fa      	ldr	r2, [r7, #28]
 8021f98:	609a      	str	r2, [r3, #8]
      msg->header_len = 2 + mask_len;
 8021f9a:	6a3b      	ldr	r3, [r7, #32]
 8021f9c:	1c9a      	adds	r2, r3, #2
 8021f9e:	687b      	ldr	r3, [r7, #4]
 8021fa0:	605a      	str	r2, [r3, #4]
 8021fa2:	e031      	b.n	8022008 <ws_process+0xcc>
    } else if (n == 126 && len >= 4 + mask_len) {
 8021fa4:	69fb      	ldr	r3, [r7, #28]
 8021fa6:	2b7e      	cmp	r3, #126	@ 0x7e
 8021fa8:	d113      	bne.n	8021fd2 <ws_process+0x96>
 8021faa:	6a3b      	ldr	r3, [r7, #32]
 8021fac:	3304      	adds	r3, #4
 8021fae:	68ba      	ldr	r2, [r7, #8]
 8021fb0:	429a      	cmp	r2, r3
 8021fb2:	d30e      	bcc.n	8021fd2 <ws_process+0x96>
      msg->header_len = 4 + mask_len;
 8021fb4:	6a3b      	ldr	r3, [r7, #32]
 8021fb6:	1d1a      	adds	r2, r3, #4
 8021fb8:	687b      	ldr	r3, [r7, #4]
 8021fba:	605a      	str	r2, [r3, #4]
      msg->data_len = (((size_t) buf[2]) << 8) | buf[3];
 8021fbc:	68fb      	ldr	r3, [r7, #12]
 8021fbe:	3302      	adds	r3, #2
 8021fc0:	781b      	ldrb	r3, [r3, #0]
 8021fc2:	021b      	lsls	r3, r3, #8
 8021fc4:	68fa      	ldr	r2, [r7, #12]
 8021fc6:	3203      	adds	r2, #3
 8021fc8:	7812      	ldrb	r2, [r2, #0]
 8021fca:	431a      	orrs	r2, r3
 8021fcc:	687b      	ldr	r3, [r7, #4]
 8021fce:	609a      	str	r2, [r3, #8]
 8021fd0:	e01a      	b.n	8022008 <ws_process+0xcc>
    } else if (len >= 10 + mask_len) {
 8021fd2:	6a3b      	ldr	r3, [r7, #32]
 8021fd4:	330a      	adds	r3, #10
 8021fd6:	68ba      	ldr	r2, [r7, #8]
 8021fd8:	429a      	cmp	r2, r3
 8021fda:	d315      	bcc.n	8022008 <ws_process+0xcc>
      msg->header_len = 10 + mask_len;
 8021fdc:	6a3b      	ldr	r3, [r7, #32]
 8021fde:	f103 020a 	add.w	r2, r3, #10
 8021fe2:	687b      	ldr	r3, [r7, #4]
 8021fe4:	605a      	str	r2, [r3, #4]
      msg->data_len =
          (size_t) (((uint64_t) be32(buf + 2) << 32) + be32(buf + 6));
 8021fe6:	68fb      	ldr	r3, [r7, #12]
 8021fe8:	3302      	adds	r3, #2
 8021fea:	4618      	mov	r0, r3
 8021fec:	f7ff ff8a 	bl	8021f04 <be32>
 8021ff0:	4603      	mov	r3, r0
 8021ff2:	2200      	movs	r2, #0
 8021ff4:	461c      	mov	r4, r3
 8021ff6:	4615      	mov	r5, r2
 8021ff8:	68fb      	ldr	r3, [r7, #12]
 8021ffa:	3306      	adds	r3, #6
 8021ffc:	4618      	mov	r0, r3
 8021ffe:	f7ff ff81 	bl	8021f04 <be32>
 8022002:	4602      	mov	r2, r0
      msg->data_len =
 8022004:	687b      	ldr	r3, [r7, #4]
 8022006:	609a      	str	r2, [r3, #8]
    }
  }
  // Sanity check, and integer overflow protection for the boundary check below
  // data_len should not be larger than 1 Gb
  if (msg->data_len > 1024 * 1024 * 1024) return 0;
 8022008:	687b      	ldr	r3, [r7, #4]
 802200a:	689b      	ldr	r3, [r3, #8]
 802200c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8022010:	d901      	bls.n	8022016 <ws_process+0xda>
 8022012:	2300      	movs	r3, #0
 8022014:	e036      	b.n	8022084 <ws_process+0x148>
  if (msg->header_len + msg->data_len > len) return 0;
 8022016:	687b      	ldr	r3, [r7, #4]
 8022018:	685a      	ldr	r2, [r3, #4]
 802201a:	687b      	ldr	r3, [r7, #4]
 802201c:	689b      	ldr	r3, [r3, #8]
 802201e:	4413      	add	r3, r2
 8022020:	68ba      	ldr	r2, [r7, #8]
 8022022:	429a      	cmp	r2, r3
 8022024:	d201      	bcs.n	802202a <ws_process+0xee>
 8022026:	2300      	movs	r3, #0
 8022028:	e02c      	b.n	8022084 <ws_process+0x148>
  if (mask_len > 0) {
 802202a:	6a3b      	ldr	r3, [r7, #32]
 802202c:	2b00      	cmp	r3, #0
 802202e:	d024      	beq.n	802207a <ws_process+0x13e>
    uint8_t *p = buf + msg->header_len, *m = p - mask_len;
 8022030:	687b      	ldr	r3, [r7, #4]
 8022032:	685b      	ldr	r3, [r3, #4]
 8022034:	68fa      	ldr	r2, [r7, #12]
 8022036:	4413      	add	r3, r2
 8022038:	61bb      	str	r3, [r7, #24]
 802203a:	6a3b      	ldr	r3, [r7, #32]
 802203c:	425b      	negs	r3, r3
 802203e:	69ba      	ldr	r2, [r7, #24]
 8022040:	4413      	add	r3, r2
 8022042:	617b      	str	r3, [r7, #20]
    for (i = 0; i < msg->data_len; i++) p[i] ^= m[i & 3];
 8022044:	2300      	movs	r3, #0
 8022046:	627b      	str	r3, [r7, #36]	@ 0x24
 8022048:	e012      	b.n	8022070 <ws_process+0x134>
 802204a:	69ba      	ldr	r2, [r7, #24]
 802204c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802204e:	4413      	add	r3, r2
 8022050:	7819      	ldrb	r1, [r3, #0]
 8022052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022054:	f003 0303 	and.w	r3, r3, #3
 8022058:	697a      	ldr	r2, [r7, #20]
 802205a:	4413      	add	r3, r2
 802205c:	781a      	ldrb	r2, [r3, #0]
 802205e:	69b8      	ldr	r0, [r7, #24]
 8022060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022062:	4403      	add	r3, r0
 8022064:	404a      	eors	r2, r1
 8022066:	b2d2      	uxtb	r2, r2
 8022068:	701a      	strb	r2, [r3, #0]
 802206a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802206c:	3301      	adds	r3, #1
 802206e:	627b      	str	r3, [r7, #36]	@ 0x24
 8022070:	687b      	ldr	r3, [r7, #4]
 8022072:	689b      	ldr	r3, [r3, #8]
 8022074:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8022076:	429a      	cmp	r2, r3
 8022078:	d3e7      	bcc.n	802204a <ws_process+0x10e>
  }
  return msg->header_len + msg->data_len;
 802207a:	687b      	ldr	r3, [r7, #4]
 802207c:	685a      	ldr	r2, [r3, #4]
 802207e:	687b      	ldr	r3, [r7, #4]
 8022080:	689b      	ldr	r3, [r3, #8]
 8022082:	4413      	add	r3, r2
}
 8022084:	4618      	mov	r0, r3
 8022086:	3728      	adds	r7, #40	@ 0x28
 8022088:	46bd      	mov	sp, r7
 802208a:	bdb0      	pop	{r4, r5, r7, pc}

0802208c <mkhdr>:

static size_t mkhdr(size_t len, int op, bool is_client, uint8_t *buf) {
 802208c:	b5b0      	push	{r4, r5, r7, lr}
 802208e:	b088      	sub	sp, #32
 8022090:	af00      	add	r7, sp, #0
 8022092:	60f8      	str	r0, [r7, #12]
 8022094:	60b9      	str	r1, [r7, #8]
 8022096:	603b      	str	r3, [r7, #0]
 8022098:	4613      	mov	r3, r2
 802209a:	71fb      	strb	r3, [r7, #7]
  size_t n = 0;
 802209c:	2300      	movs	r3, #0
 802209e:	61fb      	str	r3, [r7, #28]
  buf[0] = (uint8_t) (op | 128);
 80220a0:	68bb      	ldr	r3, [r7, #8]
 80220a2:	b25b      	sxtb	r3, r3
 80220a4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80220a8:	b25b      	sxtb	r3, r3
 80220aa:	b2da      	uxtb	r2, r3
 80220ac:	683b      	ldr	r3, [r7, #0]
 80220ae:	701a      	strb	r2, [r3, #0]
  if (len < 126) {
 80220b0:	68fb      	ldr	r3, [r7, #12]
 80220b2:	2b7d      	cmp	r3, #125	@ 0x7d
 80220b4:	d807      	bhi.n	80220c6 <mkhdr+0x3a>
    buf[1] = (unsigned char) len;
 80220b6:	683b      	ldr	r3, [r7, #0]
 80220b8:	3301      	adds	r3, #1
 80220ba:	68fa      	ldr	r2, [r7, #12]
 80220bc:	b2d2      	uxtb	r2, r2
 80220be:	701a      	strb	r2, [r3, #0]
    n = 2;
 80220c0:	2302      	movs	r3, #2
 80220c2:	61fb      	str	r3, [r7, #28]
 80220c4:	e038      	b.n	8022138 <mkhdr+0xac>
  } else if (len < 65536) {
 80220c6:	68fb      	ldr	r3, [r7, #12]
 80220c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80220cc:	d211      	bcs.n	80220f2 <mkhdr+0x66>
    uint16_t tmp = mg_htons((uint16_t) len);
 80220ce:	68fb      	ldr	r3, [r7, #12]
 80220d0:	b29b      	uxth	r3, r3
 80220d2:	4618      	mov	r0, r3
 80220d4:	f7ff fe80 	bl	8021dd8 <mg_ntohs>
 80220d8:	4603      	mov	r3, r0
 80220da:	837b      	strh	r3, [r7, #26]
    buf[1] = 126;
 80220dc:	683b      	ldr	r3, [r7, #0]
 80220de:	3301      	adds	r3, #1
 80220e0:	227e      	movs	r2, #126	@ 0x7e
 80220e2:	701a      	strb	r2, [r3, #0]
    memcpy(&buf[2], &tmp, sizeof(tmp));
 80220e4:	683b      	ldr	r3, [r7, #0]
 80220e6:	3302      	adds	r3, #2
 80220e8:	8b7a      	ldrh	r2, [r7, #26]
 80220ea:	801a      	strh	r2, [r3, #0]
    n = 4;
 80220ec:	2304      	movs	r3, #4
 80220ee:	61fb      	str	r3, [r7, #28]
 80220f0:	e022      	b.n	8022138 <mkhdr+0xac>
  } else {
    uint32_t tmp;
    buf[1] = 127;
 80220f2:	683b      	ldr	r3, [r7, #0]
 80220f4:	3301      	adds	r3, #1
 80220f6:	227f      	movs	r2, #127	@ 0x7f
 80220f8:	701a      	strb	r2, [r3, #0]
    tmp = mg_htonl((uint32_t) (((uint64_t) len) >> 32));
 80220fa:	68fb      	ldr	r3, [r7, #12]
 80220fc:	2200      	movs	r2, #0
 80220fe:	461c      	mov	r4, r3
 8022100:	4615      	mov	r5, r2
 8022102:	f04f 0200 	mov.w	r2, #0
 8022106:	f04f 0300 	mov.w	r3, #0
 802210a:	002a      	movs	r2, r5
 802210c:	2300      	movs	r3, #0
 802210e:	4613      	mov	r3, r2
 8022110:	4618      	mov	r0, r3
 8022112:	f7ff fe78 	bl	8021e06 <mg_ntohl>
 8022116:	4603      	mov	r3, r0
 8022118:	617b      	str	r3, [r7, #20]
    memcpy(&buf[2], &tmp, sizeof(tmp));
 802211a:	683b      	ldr	r3, [r7, #0]
 802211c:	3302      	adds	r3, #2
 802211e:	697a      	ldr	r2, [r7, #20]
 8022120:	601a      	str	r2, [r3, #0]
    tmp = mg_htonl((uint32_t) (len & 0xffffffffU));
 8022122:	68f8      	ldr	r0, [r7, #12]
 8022124:	f7ff fe6f 	bl	8021e06 <mg_ntohl>
 8022128:	4603      	mov	r3, r0
 802212a:	617b      	str	r3, [r7, #20]
    memcpy(&buf[6], &tmp, sizeof(tmp));
 802212c:	683b      	ldr	r3, [r7, #0]
 802212e:	3306      	adds	r3, #6
 8022130:	697a      	ldr	r2, [r7, #20]
 8022132:	601a      	str	r2, [r3, #0]
    n = 10;
 8022134:	230a      	movs	r3, #10
 8022136:	61fb      	str	r3, [r7, #28]
  }
  if (is_client) {
 8022138:	79fb      	ldrb	r3, [r7, #7]
 802213a:	2b00      	cmp	r3, #0
 802213c:	d012      	beq.n	8022164 <mkhdr+0xd8>
    buf[1] |= 1 << 7;  // Set masking flag
 802213e:	683b      	ldr	r3, [r7, #0]
 8022140:	3301      	adds	r3, #1
 8022142:	781a      	ldrb	r2, [r3, #0]
 8022144:	683b      	ldr	r3, [r7, #0]
 8022146:	3301      	adds	r3, #1
 8022148:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 802214c:	b2d2      	uxtb	r2, r2
 802214e:	701a      	strb	r2, [r3, #0]
    mg_random(&buf[n], 4);
 8022150:	683a      	ldr	r2, [r7, #0]
 8022152:	69fb      	ldr	r3, [r7, #28]
 8022154:	4413      	add	r3, r2
 8022156:	2104      	movs	r1, #4
 8022158:	4618      	mov	r0, r3
 802215a:	f7de fccb 	bl	8000af4 <mg_random>
    n += 4;
 802215e:	69fb      	ldr	r3, [r7, #28]
 8022160:	3304      	adds	r3, #4
 8022162:	61fb      	str	r3, [r7, #28]
  }
  return n;
 8022164:	69fb      	ldr	r3, [r7, #28]
}
 8022166:	4618      	mov	r0, r3
 8022168:	3720      	adds	r7, #32
 802216a:	46bd      	mov	sp, r7
 802216c:	bdb0      	pop	{r4, r5, r7, pc}

0802216e <mg_ws_mask>:

static void mg_ws_mask(struct mg_connection *c, size_t len) {
 802216e:	b480      	push	{r7}
 8022170:	b087      	sub	sp, #28
 8022172:	af00      	add	r7, sp, #0
 8022174:	6078      	str	r0, [r7, #4]
 8022176:	6039      	str	r1, [r7, #0]
  if (c->is_client && c->send.buf != NULL) {
 8022178:	687b      	ldr	r3, [r7, #4]
 802217a:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 802217e:	f003 0302 	and.w	r3, r3, #2
 8022182:	b2db      	uxtb	r3, r3
 8022184:	2b00      	cmp	r3, #0
 8022186:	d028      	beq.n	80221da <mg_ws_mask+0x6c>
 8022188:	687b      	ldr	r3, [r7, #4]
 802218a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 802218c:	2b00      	cmp	r3, #0
 802218e:	d024      	beq.n	80221da <mg_ws_mask+0x6c>
    size_t i;
    uint8_t *p = c->send.buf + c->send.len - len, *mask = p - 4;
 8022190:	687b      	ldr	r3, [r7, #4]
 8022192:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8022194:	687b      	ldr	r3, [r7, #4]
 8022196:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8022198:	683b      	ldr	r3, [r7, #0]
 802219a:	1acb      	subs	r3, r1, r3
 802219c:	4413      	add	r3, r2
 802219e:	613b      	str	r3, [r7, #16]
 80221a0:	693b      	ldr	r3, [r7, #16]
 80221a2:	3b04      	subs	r3, #4
 80221a4:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < len; i++) p[i] ^= mask[i & 3];
 80221a6:	2300      	movs	r3, #0
 80221a8:	617b      	str	r3, [r7, #20]
 80221aa:	e012      	b.n	80221d2 <mg_ws_mask+0x64>
 80221ac:	693a      	ldr	r2, [r7, #16]
 80221ae:	697b      	ldr	r3, [r7, #20]
 80221b0:	4413      	add	r3, r2
 80221b2:	7819      	ldrb	r1, [r3, #0]
 80221b4:	697b      	ldr	r3, [r7, #20]
 80221b6:	f003 0303 	and.w	r3, r3, #3
 80221ba:	68fa      	ldr	r2, [r7, #12]
 80221bc:	4413      	add	r3, r2
 80221be:	781a      	ldrb	r2, [r3, #0]
 80221c0:	6938      	ldr	r0, [r7, #16]
 80221c2:	697b      	ldr	r3, [r7, #20]
 80221c4:	4403      	add	r3, r0
 80221c6:	404a      	eors	r2, r1
 80221c8:	b2d2      	uxtb	r2, r2
 80221ca:	701a      	strb	r2, [r3, #0]
 80221cc:	697b      	ldr	r3, [r7, #20]
 80221ce:	3301      	adds	r3, #1
 80221d0:	617b      	str	r3, [r7, #20]
 80221d2:	697a      	ldr	r2, [r7, #20]
 80221d4:	683b      	ldr	r3, [r7, #0]
 80221d6:	429a      	cmp	r2, r3
 80221d8:	d3e8      	bcc.n	80221ac <mg_ws_mask+0x3e>
  }
}
 80221da:	bf00      	nop
 80221dc:	371c      	adds	r7, #28
 80221de:	46bd      	mov	sp, r7
 80221e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80221e4:	4770      	bx	lr
	...

080221e8 <mg_ws_send>:

size_t mg_ws_send(struct mg_connection *c, const void *buf, size_t len,
                  int op) {
 80221e8:	b580      	push	{r7, lr}
 80221ea:	b08a      	sub	sp, #40	@ 0x28
 80221ec:	af00      	add	r7, sp, #0
 80221ee:	60f8      	str	r0, [r7, #12]
 80221f0:	60b9      	str	r1, [r7, #8]
 80221f2:	607a      	str	r2, [r7, #4]
 80221f4:	603b      	str	r3, [r7, #0]
  uint8_t header[14];
  size_t header_len = mkhdr(len, op, c->is_client, header);
 80221f6:	68fb      	ldr	r3, [r7, #12]
 80221f8:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80221fc:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8022200:	b2db      	uxtb	r3, r3
 8022202:	2b00      	cmp	r3, #0
 8022204:	bf14      	ite	ne
 8022206:	2301      	movne	r3, #1
 8022208:	2300      	moveq	r3, #0
 802220a:	b2da      	uxtb	r2, r3
 802220c:	f107 0314 	add.w	r3, r7, #20
 8022210:	6839      	ldr	r1, [r7, #0]
 8022212:	6878      	ldr	r0, [r7, #4]
 8022214:	f7ff ff3a 	bl	802208c <mkhdr>
 8022218:	6278      	str	r0, [r7, #36]	@ 0x24
  if (!mg_send(c, header, header_len)) return 0;
 802221a:	f107 0314 	add.w	r3, r7, #20
 802221e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8022220:	4619      	mov	r1, r3
 8022222:	68f8      	ldr	r0, [r7, #12]
 8022224:	f7f0 fdd6 	bl	8012dd4 <mg_send>
 8022228:	4603      	mov	r3, r0
 802222a:	f083 0301 	eor.w	r3, r3, #1
 802222e:	b2db      	uxtb	r3, r3
 8022230:	2b00      	cmp	r3, #0
 8022232:	d001      	beq.n	8022238 <mg_ws_send+0x50>
 8022234:	2300      	movs	r3, #0
 8022236:	e024      	b.n	8022282 <mg_ws_send+0x9a>
  if (!mg_send(c, buf, len)) return header_len;
 8022238:	687a      	ldr	r2, [r7, #4]
 802223a:	68b9      	ldr	r1, [r7, #8]
 802223c:	68f8      	ldr	r0, [r7, #12]
 802223e:	f7f0 fdc9 	bl	8012dd4 <mg_send>
 8022242:	4603      	mov	r3, r0
 8022244:	f083 0301 	eor.w	r3, r3, #1
 8022248:	b2db      	uxtb	r3, r3
 802224a:	2b00      	cmp	r3, #0
 802224c:	d001      	beq.n	8022252 <mg_ws_send+0x6a>
 802224e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022250:	e017      	b.n	8022282 <mg_ws_send+0x9a>
  MG_VERBOSE(("WS out: %d [%.*s]", (int) len, (int) len, buf));
 8022252:	4b0e      	ldr	r3, [pc, #56]	@ (802228c <mg_ws_send+0xa4>)
 8022254:	681b      	ldr	r3, [r3, #0]
 8022256:	2b03      	cmp	r3, #3
 8022258:	dd0c      	ble.n	8022274 <mg_ws_send+0x8c>
 802225a:	4b0d      	ldr	r3, [pc, #52]	@ (8022290 <mg_ws_send+0xa8>)
 802225c:	f644 6268 	movw	r2, #20072	@ 0x4e68
 8022260:	490c      	ldr	r1, [pc, #48]	@ (8022294 <mg_ws_send+0xac>)
 8022262:	2004      	movs	r0, #4
 8022264:	f7ec fb1e 	bl	800e8a4 <mg_log_prefix>
 8022268:	6879      	ldr	r1, [r7, #4]
 802226a:	687a      	ldr	r2, [r7, #4]
 802226c:	68bb      	ldr	r3, [r7, #8]
 802226e:	480a      	ldr	r0, [pc, #40]	@ (8022298 <mg_ws_send+0xb0>)
 8022270:	f7ec fb68 	bl	800e944 <mg_log>
  mg_ws_mask(c, len);
 8022274:	6879      	ldr	r1, [r7, #4]
 8022276:	68f8      	ldr	r0, [r7, #12]
 8022278:	f7ff ff79 	bl	802216e <mg_ws_mask>
  return header_len + len;
 802227c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 802227e:	687b      	ldr	r3, [r7, #4]
 8022280:	4413      	add	r3, r2
}
 8022282:	4618      	mov	r0, r3
 8022284:	3728      	adds	r7, #40	@ 0x28
 8022286:	46bd      	mov	sp, r7
 8022288:	bd80      	pop	{r7, pc}
 802228a:	bf00      	nop
 802228c:	24000258 	.word	0x24000258
 8022290:	0802dbb0 	.word	0x0802dbb0
 8022294:	08029c3c 	.word	0x08029c3c
 8022298:	0802c4d4 	.word	0x0802c4d4

0802229c <mg_ws_client_handshake>:

static bool mg_ws_client_handshake(struct mg_connection *c) {
 802229c:	b580      	push	{r7, lr}
 802229e:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 80222a2:	af00      	add	r7, sp, #0
 80222a4:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80222a8:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 80222ac:	6018      	str	r0, [r3, #0]
  int n = mg_http_get_request_len(c->recv.buf, c->recv.len);
 80222ae:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80222b2:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 80222b6:	681b      	ldr	r3, [r3, #0]
 80222b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80222ba:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80222be:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 80222c2:	681b      	ldr	r3, [r3, #0]
 80222c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80222c6:	4619      	mov	r1, r3
 80222c8:	4610      	mov	r0, r2
 80222ca:	f7e8 fb2f 	bl	800a92c <mg_http_get_request_len>
 80222ce:	f8c7 0224 	str.w	r0, [r7, #548]	@ 0x224
  if (n < 0) {
 80222d2:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 80222d6:	2b00      	cmp	r3, #0
 80222d8:	da08      	bge.n	80222ec <mg_ws_client_handshake+0x50>
    mg_error(c, "not http");  // Some just, not an HTTP request
 80222da:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80222de:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 80222e2:	4936      	ldr	r1, [pc, #216]	@ (80223bc <mg_ws_client_handshake+0x120>)
 80222e4:	6818      	ldr	r0, [r3, #0]
 80222e6:	f7e6 fc65 	bl	8008bb4 <mg_error>
 80222ea:	e060      	b.n	80223ae <mg_ws_client_handshake+0x112>
  } else if (n > 0) {
 80222ec:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 80222f0:	2b00      	cmp	r3, #0
 80222f2:	dd5a      	ble.n	80223aa <mg_ws_client_handshake+0x10e>
    if (n < 15 || memcmp(c->recv.buf + 9, "101", 3) != 0) {
 80222f4:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 80222f8:	2b0e      	cmp	r3, #14
 80222fa:	dd0e      	ble.n	802231a <mg_ws_client_handshake+0x7e>
 80222fc:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8022300:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8022304:	681b      	ldr	r3, [r3, #0]
 8022306:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8022308:	3309      	adds	r3, #9
 802230a:	2203      	movs	r2, #3
 802230c:	492c      	ldr	r1, [pc, #176]	@ (80223c0 <mg_ws_client_handshake+0x124>)
 802230e:	4618      	mov	r0, r3
 8022310:	f005 f9b0 	bl	8027674 <memcmp>
 8022314:	4603      	mov	r3, r0
 8022316:	2b00      	cmp	r3, #0
 8022318:	d008      	beq.n	802232c <mg_ws_client_handshake+0x90>
      mg_error(c, "ws handshake error");
 802231a:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 802231e:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8022322:	4928      	ldr	r1, [pc, #160]	@ (80223c4 <mg_ws_client_handshake+0x128>)
 8022324:	6818      	ldr	r0, [r3, #0]
 8022326:	f7e6 fc45 	bl	8008bb4 <mg_error>
 802232a:	e031      	b.n	8022390 <mg_ws_client_handshake+0xf4>
    } else {
      struct mg_http_message hm;
      if (mg_http_parse((char *) c->recv.buf, c->recv.len, &hm)) {
 802232c:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8022330:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8022334:	681b      	ldr	r3, [r3, #0]
 8022336:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8022338:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 802233c:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8022340:	681b      	ldr	r3, [r3, #0]
 8022342:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8022344:	f107 020c 	add.w	r2, r7, #12
 8022348:	4619      	mov	r1, r3
 802234a:	f7e8 fcf9 	bl	800ad40 <mg_http_parse>
 802234e:	4603      	mov	r3, r0
 8022350:	2b00      	cmp	r3, #0
 8022352:	d015      	beq.n	8022380 <mg_ws_client_handshake+0xe4>
        c->is_websocket = 1;
 8022354:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8022358:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 802235c:	681a      	ldr	r2, [r3, #0]
 802235e:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8022362:	f043 0302 	orr.w	r3, r3, #2
 8022366:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
        mg_call(c, MG_EV_WS_OPEN, &hm);
 802236a:	f107 020c 	add.w	r2, r7, #12
 802236e:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8022372:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8022376:	210c      	movs	r1, #12
 8022378:	6818      	ldr	r0, [r3, #0]
 802237a:	f7e6 fbfb 	bl	8008b74 <mg_call>
 802237e:	e007      	b.n	8022390 <mg_ws_client_handshake+0xf4>
      } else {
        mg_error(c, "ws handshake error");
 8022380:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8022384:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8022388:	490e      	ldr	r1, [pc, #56]	@ (80223c4 <mg_ws_client_handshake+0x128>)
 802238a:	6818      	ldr	r0, [r3, #0]
 802238c:	f7e6 fc12 	bl	8008bb4 <mg_error>
      }
    }
    mg_iobuf_del(&c->recv, 0, (size_t) n);
 8022390:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8022394:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8022398:	681b      	ldr	r3, [r3, #0]
 802239a:	3338      	adds	r3, #56	@ 0x38
 802239c:	f8d7 2224 	ldr.w	r2, [r7, #548]	@ 0x224
 80223a0:	2100      	movs	r1, #0
 80223a2:	4618      	mov	r0, r3
 80223a4:	f7eb fa66 	bl	800d874 <mg_iobuf_del>
 80223a8:	e001      	b.n	80223ae <mg_ws_client_handshake+0x112>
  } else {
    return true;  // Request is not yet received, quit event handler
 80223aa:	2301      	movs	r3, #1
 80223ac:	e000      	b.n	80223b0 <mg_ws_client_handshake+0x114>
  }
  return false;  // Continue event handler
 80223ae:	2300      	movs	r3, #0
}
 80223b0:	4618      	mov	r0, r3
 80223b2:	f507 770a 	add.w	r7, r7, #552	@ 0x228
 80223b6:	46bd      	mov	sp, r7
 80223b8:	bd80      	pop	{r7, pc}
 80223ba:	bf00      	nop
 80223bc:	0802c4e8 	.word	0x0802c4e8
 80223c0:	0802c4f4 	.word	0x0802c4f4
 80223c4:	0802c4f8 	.word	0x0802c4f8

080223c8 <mg_ws_cb>:

static void mg_ws_cb(struct mg_connection *c, int ev, void *ev_data) {
 80223c8:	b580      	push	{r7, lr}
 80223ca:	b090      	sub	sp, #64	@ 0x40
 80223cc:	af00      	add	r7, sp, #0
 80223ce:	6178      	str	r0, [r7, #20]
 80223d0:	6139      	str	r1, [r7, #16]
 80223d2:	60fa      	str	r2, [r7, #12]
  struct ws_msg msg;
  size_t ofs = (size_t) c->pfn_data;
 80223d4:	697b      	ldr	r3, [r7, #20]
 80223d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80223da:	63fb      	str	r3, [r7, #60]	@ 0x3c

  // assert(ofs < c->recv.len);
  if (ev == MG_EV_READ) {
 80223dc:	693b      	ldr	r3, [r7, #16]
 80223de:	2b07      	cmp	r3, #7
 80223e0:	f040 813c 	bne.w	802265c <mg_ws_cb+0x294>
    if (c->is_client && !c->is_websocket && mg_ws_client_handshake(c)) return;
 80223e4:	697b      	ldr	r3, [r7, #20]
 80223e6:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80223ea:	f003 0302 	and.w	r3, r3, #2
 80223ee:	b2db      	uxtb	r3, r3
 80223f0:	2b00      	cmp	r3, #0
 80223f2:	f000 8120 	beq.w	8022636 <mg_ws_cb+0x26e>
 80223f6:	697b      	ldr	r3, [r7, #20]
 80223f8:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 80223fc:	f003 0302 	and.w	r3, r3, #2
 8022400:	b2db      	uxtb	r3, r3
 8022402:	2b00      	cmp	r3, #0
 8022404:	f040 8117 	bne.w	8022636 <mg_ws_cb+0x26e>
 8022408:	6978      	ldr	r0, [r7, #20]
 802240a:	f7ff ff47 	bl	802229c <mg_ws_client_handshake>
 802240e:	4603      	mov	r3, r0
 8022410:	2b00      	cmp	r3, #0
 8022412:	f040 8122 	bne.w	802265a <mg_ws_cb+0x292>

    while (ws_process(c->recv.buf + ofs, c->recv.len - ofs, &msg) > 0) {
 8022416:	e10e      	b.n	8022636 <mg_ws_cb+0x26e>
      char *s = (char *) c->recv.buf + ofs + msg.header_len;
 8022418:	697b      	ldr	r3, [r7, #20]
 802241a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 802241c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 802241e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8022420:	440b      	add	r3, r1
 8022422:	4413      	add	r3, r2
 8022424:	637b      	str	r3, [r7, #52]	@ 0x34
      struct mg_ws_message m = {{s, msg.data_len}, msg.flags};
 8022426:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8022428:	61bb      	str	r3, [r7, #24]
 802242a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802242c:	61fb      	str	r3, [r7, #28]
 802242e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8022432:	f887 3020 	strb.w	r3, [r7, #32]
      size_t len = msg.header_len + msg.data_len;
 8022436:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8022438:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802243a:	4413      	add	r3, r2
 802243c:	63bb      	str	r3, [r7, #56]	@ 0x38
      uint8_t final = msg.flags & 128, op = msg.flags & 15;
 802243e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8022442:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8022446:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 802244a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 802244e:	f003 030f 	and.w	r3, r3, #15
 8022452:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
      // MG_VERBOSE ("fin %d op %d len %d [%.*s]", final, op,
      //                       (int) m.data.len, (int) m.data.len, m.data.buf));
      switch (op) {
 8022456:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 802245a:	2b0a      	cmp	r3, #10
 802245c:	d877      	bhi.n	802254e <mg_ws_cb+0x186>
 802245e:	a201      	add	r2, pc, #4	@ (adr r2, 8022464 <mg_ws_cb+0x9c>)
 8022460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8022464:	08022491 	.word	0x08022491
 8022468:	080224eb 	.word	0x080224eb
 802246c:	080224eb 	.word	0x080224eb
 8022470:	0802254f 	.word	0x0802254f
 8022474:	0802254f 	.word	0x0802254f
 8022478:	0802254f 	.word	0x0802254f
 802247c:	0802254f 	.word	0x0802254f
 8022480:	0802254f 	.word	0x0802254f
 8022484:	08022503 	.word	0x08022503
 8022488:	080224a1 	.word	0x080224a1
 802248c:	080224db 	.word	0x080224db
        case WEBSOCKET_OP_CONTINUE:
          mg_call(c, MG_EV_WS_CTL, &m);
 8022490:	f107 0318 	add.w	r3, r7, #24
 8022494:	461a      	mov	r2, r3
 8022496:	210e      	movs	r1, #14
 8022498:	6978      	ldr	r0, [r7, #20]
 802249a:	f7e6 fb6b 	bl	8008b74 <mg_call>
          break;
 802249e:	e05f      	b.n	8022560 <mg_ws_cb+0x198>
        case WEBSOCKET_OP_PING:
          MG_DEBUG(("%s", "WS PONG"));
 80224a0:	4b70      	ldr	r3, [pc, #448]	@ (8022664 <mg_ws_cb+0x29c>)
 80224a2:	681b      	ldr	r3, [r3, #0]
 80224a4:	2b02      	cmp	r3, #2
 80224a6:	dd0a      	ble.n	80224be <mg_ws_cb+0xf6>
 80224a8:	4b6f      	ldr	r3, [pc, #444]	@ (8022668 <mg_ws_cb+0x2a0>)
 80224aa:	f644 6298 	movw	r2, #20120	@ 0x4e98
 80224ae:	496f      	ldr	r1, [pc, #444]	@ (802266c <mg_ws_cb+0x2a4>)
 80224b0:	2003      	movs	r0, #3
 80224b2:	f7ec f9f7 	bl	800e8a4 <mg_log_prefix>
 80224b6:	496e      	ldr	r1, [pc, #440]	@ (8022670 <mg_ws_cb+0x2a8>)
 80224b8:	486e      	ldr	r0, [pc, #440]	@ (8022674 <mg_ws_cb+0x2ac>)
 80224ba:	f7ec fa43 	bl	800e944 <mg_log>
          mg_ws_send(c, s, msg.data_len, WEBSOCKET_OP_PONG);
 80224be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80224c0:	230a      	movs	r3, #10
 80224c2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80224c4:	6978      	ldr	r0, [r7, #20]
 80224c6:	f7ff fe8f 	bl	80221e8 <mg_ws_send>
          mg_call(c, MG_EV_WS_CTL, &m);
 80224ca:	f107 0318 	add.w	r3, r7, #24
 80224ce:	461a      	mov	r2, r3
 80224d0:	210e      	movs	r1, #14
 80224d2:	6978      	ldr	r0, [r7, #20]
 80224d4:	f7e6 fb4e 	bl	8008b74 <mg_call>
          break;
 80224d8:	e042      	b.n	8022560 <mg_ws_cb+0x198>
        case WEBSOCKET_OP_PONG:
          mg_call(c, MG_EV_WS_CTL, &m);
 80224da:	f107 0318 	add.w	r3, r7, #24
 80224de:	461a      	mov	r2, r3
 80224e0:	210e      	movs	r1, #14
 80224e2:	6978      	ldr	r0, [r7, #20]
 80224e4:	f7e6 fb46 	bl	8008b74 <mg_call>
          break;
 80224e8:	e03a      	b.n	8022560 <mg_ws_cb+0x198>
        case WEBSOCKET_OP_TEXT:
        case WEBSOCKET_OP_BINARY:
          if (final) mg_call(c, MG_EV_WS_MSG, &m);
 80224ea:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80224ee:	2b00      	cmp	r3, #0
 80224f0:	d035      	beq.n	802255e <mg_ws_cb+0x196>
 80224f2:	f107 0318 	add.w	r3, r7, #24
 80224f6:	461a      	mov	r2, r3
 80224f8:	210d      	movs	r1, #13
 80224fa:	6978      	ldr	r0, [r7, #20]
 80224fc:	f7e6 fb3a 	bl	8008b74 <mg_call>
          break;
 8022500:	e02d      	b.n	802255e <mg_ws_cb+0x196>
        case WEBSOCKET_OP_CLOSE:
          MG_DEBUG(("%lu WS CLOSE", c->id));
 8022502:	4b58      	ldr	r3, [pc, #352]	@ (8022664 <mg_ws_cb+0x29c>)
 8022504:	681b      	ldr	r3, [r3, #0]
 8022506:	2b02      	cmp	r3, #2
 8022508:	dd0c      	ble.n	8022524 <mg_ws_cb+0x15c>
 802250a:	4b57      	ldr	r3, [pc, #348]	@ (8022668 <mg_ws_cb+0x2a0>)
 802250c:	f644 62a4 	movw	r2, #20132	@ 0x4ea4
 8022510:	4956      	ldr	r1, [pc, #344]	@ (802266c <mg_ws_cb+0x2a4>)
 8022512:	2003      	movs	r0, #3
 8022514:	f7ec f9c6 	bl	800e8a4 <mg_log_prefix>
 8022518:	697b      	ldr	r3, [r7, #20]
 802251a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802251c:	4619      	mov	r1, r3
 802251e:	4856      	ldr	r0, [pc, #344]	@ (8022678 <mg_ws_cb+0x2b0>)
 8022520:	f7ec fa10 	bl	800e944 <mg_log>
          mg_call(c, MG_EV_WS_CTL, &m);
 8022524:	f107 0318 	add.w	r3, r7, #24
 8022528:	461a      	mov	r2, r3
 802252a:	210e      	movs	r1, #14
 802252c:	6978      	ldr	r0, [r7, #20]
 802252e:	f7e6 fb21 	bl	8008b74 <mg_call>
          // Echo the payload of the received CLOSE message back to the sender
          mg_ws_send(c, m.data.buf, m.data.len, WEBSOCKET_OP_CLOSE);
 8022532:	69b9      	ldr	r1, [r7, #24]
 8022534:	69fa      	ldr	r2, [r7, #28]
 8022536:	2308      	movs	r3, #8
 8022538:	6978      	ldr	r0, [r7, #20]
 802253a:	f7ff fe55 	bl	80221e8 <mg_ws_send>
          c->is_draining = 1;
 802253e:	697a      	ldr	r2, [r7, #20]
 8022540:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8022544:	f043 0310 	orr.w	r3, r3, #16
 8022548:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
          break;
 802254c:	e008      	b.n	8022560 <mg_ws_cb+0x198>
        default:
          // Per RFC6455, close conn when an unknown op is recvd
          mg_error(c, "unknown WS op %d", op);
 802254e:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8022552:	461a      	mov	r2, r3
 8022554:	4949      	ldr	r1, [pc, #292]	@ (802267c <mg_ws_cb+0x2b4>)
 8022556:	6978      	ldr	r0, [r7, #20]
 8022558:	f7e6 fb2c 	bl	8008bb4 <mg_error>
          break;
 802255c:	e000      	b.n	8022560 <mg_ws_cb+0x198>
          break;
 802255e:	bf00      	nop
      }

      // Handle fragmented frames: strip header, keep in c->recv
      if (final == 0 || op == 0) {
 8022560:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8022564:	2b00      	cmp	r3, #0
 8022566:	d003      	beq.n	8022570 <mg_ws_cb+0x1a8>
 8022568:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 802256c:	2b00      	cmp	r3, #0
 802256e:	d11f      	bne.n	80225b0 <mg_ws_cb+0x1e8>
        if (op) ofs++, len--, msg.header_len--;       // First frame
 8022570:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8022574:	2b00      	cmp	r3, #0
 8022576:	d008      	beq.n	802258a <mg_ws_cb+0x1c2>
 8022578:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 802257a:	3301      	adds	r3, #1
 802257c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 802257e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8022580:	3b01      	subs	r3, #1
 8022582:	63bb      	str	r3, [r7, #56]	@ 0x38
 8022584:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8022586:	3b01      	subs	r3, #1
 8022588:	62bb      	str	r3, [r7, #40]	@ 0x28
        mg_iobuf_del(&c->recv, ofs, msg.header_len);  // Strip header
 802258a:	697b      	ldr	r3, [r7, #20]
 802258c:	3338      	adds	r3, #56	@ 0x38
 802258e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8022590:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8022592:	4618      	mov	r0, r3
 8022594:	f7eb f96e 	bl	800d874 <mg_iobuf_del>
        len -= msg.header_len;
 8022598:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802259a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 802259c:	1ad3      	subs	r3, r2, r3
 802259e:	63bb      	str	r3, [r7, #56]	@ 0x38
        ofs += len;
 80225a0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80225a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80225a4:	4413      	add	r3, r2
 80225a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        c->pfn_data = (void *) ofs;
 80225a8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80225aa:	697b      	ldr	r3, [r7, #20]
 80225ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        // MG_INFO(("FRAG %d [%.*s]", (int) ofs, (int) ofs, c->recv.buf));
      }
      // Remove non-fragmented frame
      if (final && op) mg_iobuf_del(&c->recv, ofs, len);
 80225b0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80225b4:	2b00      	cmp	r3, #0
 80225b6:	d00a      	beq.n	80225ce <mg_ws_cb+0x206>
 80225b8:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80225bc:	2b00      	cmp	r3, #0
 80225be:	d006      	beq.n	80225ce <mg_ws_cb+0x206>
 80225c0:	697b      	ldr	r3, [r7, #20]
 80225c2:	3338      	adds	r3, #56	@ 0x38
 80225c4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80225c6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80225c8:	4618      	mov	r0, r3
 80225ca:	f7eb f953 	bl	800d874 <mg_iobuf_del>
      // Last chunk of the fragmented frame
      if (final && !op && (ofs > 0)) {
 80225ce:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80225d2:	2b00      	cmp	r3, #0
 80225d4:	d02f      	beq.n	8022636 <mg_ws_cb+0x26e>
 80225d6:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80225da:	2b00      	cmp	r3, #0
 80225dc:	d12b      	bne.n	8022636 <mg_ws_cb+0x26e>
 80225de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80225e0:	2b00      	cmp	r3, #0
 80225e2:	d028      	beq.n	8022636 <mg_ws_cb+0x26e>
        m.flags = c->recv.buf[0];
 80225e4:	697b      	ldr	r3, [r7, #20]
 80225e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80225e8:	781b      	ldrb	r3, [r3, #0]
 80225ea:	f887 3020 	strb.w	r3, [r7, #32]
        m.data = mg_str_n((char *) &c->recv.buf[1], (size_t) (ofs - 1));
 80225ee:	697b      	ldr	r3, [r7, #20]
 80225f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80225f2:	1c59      	adds	r1, r3, #1
 80225f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80225f6:	1e5a      	subs	r2, r3, #1
 80225f8:	463b      	mov	r3, r7
 80225fa:	4618      	mov	r0, r3
 80225fc:	f7f4 f96f 	bl	80168de <mg_str_n>
 8022600:	f107 0318 	add.w	r3, r7, #24
 8022604:	463a      	mov	r2, r7
 8022606:	e892 0003 	ldmia.w	r2, {r0, r1}
 802260a:	e883 0003 	stmia.w	r3, {r0, r1}
        mg_call(c, MG_EV_WS_MSG, &m);
 802260e:	f107 0318 	add.w	r3, r7, #24
 8022612:	461a      	mov	r2, r3
 8022614:	210d      	movs	r1, #13
 8022616:	6978      	ldr	r0, [r7, #20]
 8022618:	f7e6 faac 	bl	8008b74 <mg_call>
        mg_iobuf_del(&c->recv, 0, ofs);
 802261c:	697b      	ldr	r3, [r7, #20]
 802261e:	3338      	adds	r3, #56	@ 0x38
 8022620:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8022622:	2100      	movs	r1, #0
 8022624:	4618      	mov	r0, r3
 8022626:	f7eb f925 	bl	800d874 <mg_iobuf_del>
        ofs = 0;
 802262a:	2300      	movs	r3, #0
 802262c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        c->pfn_data = NULL;
 802262e:	697b      	ldr	r3, [r7, #20]
 8022630:	2200      	movs	r2, #0
 8022632:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    while (ws_process(c->recv.buf + ofs, c->recv.len - ofs, &msg) > 0) {
 8022636:	697b      	ldr	r3, [r7, #20]
 8022638:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 802263a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 802263c:	18d0      	adds	r0, r2, r3
 802263e:	697b      	ldr	r3, [r7, #20]
 8022640:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8022642:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8022644:	1ad3      	subs	r3, r2, r3
 8022646:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 802264a:	4619      	mov	r1, r3
 802264c:	f7ff fc76 	bl	8021f3c <ws_process>
 8022650:	4603      	mov	r3, r0
 8022652:	2b00      	cmp	r3, #0
 8022654:	f47f aee0 	bne.w	8022418 <mg_ws_cb+0x50>
 8022658:	e000      	b.n	802265c <mg_ws_cb+0x294>
    if (c->is_client && !c->is_websocket && mg_ws_client_handshake(c)) return;
 802265a:	bf00      	nop
      }
    }
  }
  (void) ev_data;
}
 802265c:	3740      	adds	r7, #64	@ 0x40
 802265e:	46bd      	mov	sp, r7
 8022660:	bd80      	pop	{r7, pc}
 8022662:	bf00      	nop
 8022664:	24000258 	.word	0x24000258
 8022668:	0802dbbc 	.word	0x0802dbbc
 802266c:	08029c3c 	.word	0x08029c3c
 8022670:	0802c50c 	.word	0x0802c50c
 8022674:	08029f08 	.word	0x08029f08
 8022678:	0802c514 	.word	0x0802c514
 802267c:	0802c524 	.word	0x0802c524

08022680 <mg_ws_upgrade>:
  }
  return c;
}

void mg_ws_upgrade(struct mg_connection *c, struct mg_http_message *hm,
                   const char *fmt, ...) {
 8022680:	b40c      	push	{r2, r3}
 8022682:	b580      	push	{r7, lr}
 8022684:	b088      	sub	sp, #32
 8022686:	af02      	add	r7, sp, #8
 8022688:	6078      	str	r0, [r7, #4]
 802268a:	6039      	str	r1, [r7, #0]
  struct mg_str *wskey = mg_http_get_header(hm, "Sec-WebSocket-Key");
 802268c:	4924      	ldr	r1, [pc, #144]	@ (8022720 <mg_ws_upgrade+0xa0>)
 802268e:	6838      	ldr	r0, [r7, #0]
 8022690:	f7e8 f99a 	bl	800a9c8 <mg_http_get_header>
 8022694:	6178      	str	r0, [r7, #20]
  c->pfn = mg_ws_cb;
 8022696:	687b      	ldr	r3, [r7, #4]
 8022698:	4a22      	ldr	r2, [pc, #136]	@ (8022724 <mg_ws_upgrade+0xa4>)
 802269a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  c->pfn_data = NULL;
 802269e:	687b      	ldr	r3, [r7, #4]
 80226a0:	2200      	movs	r2, #0
 80226a2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  if (wskey == NULL) {
 80226a6:	697b      	ldr	r3, [r7, #20]
 80226a8:	2b00      	cmp	r3, #0
 80226aa:	d10e      	bne.n	80226ca <mg_ws_upgrade+0x4a>
    mg_http_reply(c, 426, "", "WS upgrade expected\n");
 80226ac:	4b1e      	ldr	r3, [pc, #120]	@ (8022728 <mg_ws_upgrade+0xa8>)
 80226ae:	4a1f      	ldr	r2, [pc, #124]	@ (802272c <mg_ws_upgrade+0xac>)
 80226b0:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 80226b4:	6878      	ldr	r0, [r7, #4]
 80226b6:	f7e9 f9fd 	bl	800bab4 <mg_http_reply>
    c->is_draining = 1;
 80226ba:	687a      	ldr	r2, [r7, #4]
 80226bc:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 80226c0:	f043 0310 	orr.w	r3, r3, #16
 80226c4:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
    va_end(ap);
    c->is_websocket = 1;
    c->is_resp = 0;
    mg_call(c, MG_EV_WS_OPEN, hm);
  }
}
 80226c8:	e023      	b.n	8022712 <mg_ws_upgrade+0x92>
    struct mg_str *wsproto = mg_http_get_header(hm, "Sec-WebSocket-Protocol");
 80226ca:	4919      	ldr	r1, [pc, #100]	@ (8022730 <mg_ws_upgrade+0xb0>)
 80226cc:	6838      	ldr	r0, [r7, #0]
 80226ce:	f7e8 f97b 	bl	800a9c8 <mg_http_get_header>
 80226d2:	6138      	str	r0, [r7, #16]
    va_start(ap, fmt);
 80226d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80226d8:	60fb      	str	r3, [r7, #12]
    ws_handshake(c, wskey, wsproto, fmt, &ap);
 80226da:	f107 030c 	add.w	r3, r7, #12
 80226de:	9300      	str	r3, [sp, #0]
 80226e0:	6a3b      	ldr	r3, [r7, #32]
 80226e2:	693a      	ldr	r2, [r7, #16]
 80226e4:	6979      	ldr	r1, [r7, #20]
 80226e6:	6878      	ldr	r0, [r7, #4]
 80226e8:	f7ff fba8 	bl	8021e3c <ws_handshake>
    c->is_websocket = 1;
 80226ec:	687a      	ldr	r2, [r7, #4]
 80226ee:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 80226f2:	f043 0302 	orr.w	r3, r3, #2
 80226f6:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
    c->is_resp = 0;
 80226fa:	687a      	ldr	r2, [r7, #4]
 80226fc:	f892 30ae 	ldrb.w	r3, [r2, #174]	@ 0xae
 8022700:	f023 0301 	bic.w	r3, r3, #1
 8022704:	f882 30ae 	strb.w	r3, [r2, #174]	@ 0xae
    mg_call(c, MG_EV_WS_OPEN, hm);
 8022708:	683a      	ldr	r2, [r7, #0]
 802270a:	210c      	movs	r1, #12
 802270c:	6878      	ldr	r0, [r7, #4]
 802270e:	f7e6 fa31 	bl	8008b74 <mg_call>
}
 8022712:	bf00      	nop
 8022714:	3718      	adds	r7, #24
 8022716:	46bd      	mov	sp, r7
 8022718:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 802271c:	b002      	add	sp, #8
 802271e:	4770      	bx	lr
 8022720:	0802c5b4 	.word	0x0802c5b4
 8022724:	080223c9 	.word	0x080223c9
 8022728:	0802c5c8 	.word	0x0802c5c8
 802272c:	0802a47c 	.word	0x0802a47c
 8022730:	0802c5e0 	.word	0x0802c5e0

08022734 <mg_phy_id_to_str>:
  MG_PHY_RTL8201_REG_RMSR = 16,  // in page 7
  MG_PHY_RTL8201_REG_PAGESEL = 31,
  MG_PHY_ICS189432_REG_POLL = 17
};

static const char *mg_phy_id_to_str(uint16_t id1, uint16_t id2) {
 8022734:	b480      	push	{r7}
 8022736:	b083      	sub	sp, #12
 8022738:	af00      	add	r7, sp, #0
 802273a:	4603      	mov	r3, r0
 802273c:	460a      	mov	r2, r1
 802273e:	80fb      	strh	r3, [r7, #6]
 8022740:	4613      	mov	r3, r2
 8022742:	80bb      	strh	r3, [r7, #4]
  switch (id1) {
 8022744:	88fb      	ldrh	r3, [r7, #6]
 8022746:	2b22      	cmp	r3, #34	@ 0x22
 8022748:	dc40      	bgt.n	80227cc <mg_phy_id_to_str+0x98>
 802274a:	2b07      	cmp	r3, #7
 802274c:	db63      	blt.n	8022816 <mg_phy_id_to_str+0xe2>
 802274e:	3b07      	subs	r3, #7
 8022750:	2b1b      	cmp	r3, #27
 8022752:	d860      	bhi.n	8022816 <mg_phy_id_to_str+0xe2>
 8022754:	a201      	add	r2, pc, #4	@ (adr r2, 802275c <mg_phy_id_to_str+0x28>)
 8022756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802275a:	bf00      	nop
 802275c:	0802280b 	.word	0x0802280b
 8022760:	08022817 	.word	0x08022817
 8022764:	08022817 	.word	0x08022817
 8022768:	08022817 	.word	0x08022817
 802276c:	08022817 	.word	0x08022817
 8022770:	08022817 	.word	0x08022817
 8022774:	08022817 	.word	0x08022817
 8022778:	08022817 	.word	0x08022817
 802277c:	08022817 	.word	0x08022817
 8022780:	08022817 	.word	0x08022817
 8022784:	08022817 	.word	0x08022817
 8022788:	08022817 	.word	0x08022817
 802278c:	08022817 	.word	0x08022817
 8022790:	08022817 	.word	0x08022817
 8022794:	08022813 	.word	0x08022813
 8022798:	08022817 	.word	0x08022817
 802279c:	08022817 	.word	0x08022817
 80227a0:	08022817 	.word	0x08022817
 80227a4:	08022817 	.word	0x08022817
 80227a8:	08022817 	.word	0x08022817
 80227ac:	08022817 	.word	0x08022817
 80227b0:	0802280f 	.word	0x0802280f
 80227b4:	08022817 	.word	0x08022817
 80227b8:	08022817 	.word	0x08022817
 80227bc:	08022817 	.word	0x08022817
 80227c0:	08022817 	.word	0x08022817
 80227c4:	08022817 	.word	0x08022817
 80227c8:	08022807 	.word	0x08022807
 80227cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80227d0:	d121      	bne.n	8022816 <mg_phy_id_to_str+0xe2>
    case MG_PHY_DP83x:
      switch (id2) {
 80227d2:	88bb      	ldrh	r3, [r7, #4]
 80227d4:	f24a 2231 	movw	r2, #41521	@ 0xa231
 80227d8:	4293      	cmp	r3, r2
 80227da:	d00c      	beq.n	80227f6 <mg_phy_id_to_str+0xc2>
 80227dc:	f24a 2231 	movw	r2, #41521	@ 0xa231
 80227e0:	4293      	cmp	r3, r2
 80227e2:	dc0e      	bgt.n	8022802 <mg_phy_id_to_str+0xce>
 80227e4:	f645 42a2 	movw	r2, #23714	@ 0x5ca2
 80227e8:	4293      	cmp	r3, r2
 80227ea:	d006      	beq.n	80227fa <mg_phy_id_to_str+0xc6>
 80227ec:	f24a 1240 	movw	r2, #41280	@ 0xa140
 80227f0:	4293      	cmp	r3, r2
 80227f2:	d004      	beq.n	80227fe <mg_phy_id_to_str+0xca>
 80227f4:	e005      	b.n	8022802 <mg_phy_id_to_str+0xce>
        case MG_PHY_DP83867:
          return "DP83867";
 80227f6:	4b0b      	ldr	r3, [pc, #44]	@ (8022824 <mg_phy_id_to_str+0xf0>)
 80227f8:	e00e      	b.n	8022818 <mg_phy_id_to_str+0xe4>
        case MG_PHY_DP83848:
          return "DP83848";
 80227fa:	4b0b      	ldr	r3, [pc, #44]	@ (8022828 <mg_phy_id_to_str+0xf4>)
 80227fc:	e00c      	b.n	8022818 <mg_phy_id_to_str+0xe4>
        case MG_PHY_DP83825:
          return "DP83825";
 80227fe:	4b0b      	ldr	r3, [pc, #44]	@ (802282c <mg_phy_id_to_str+0xf8>)
 8022800:	e00a      	b.n	8022818 <mg_phy_id_to_str+0xe4>
        default:
          return "DP83x";
 8022802:	4b0b      	ldr	r3, [pc, #44]	@ (8022830 <mg_phy_id_to_str+0xfc>)
 8022804:	e008      	b.n	8022818 <mg_phy_id_to_str+0xe4>
      }
    case MG_PHY_KSZ8x:
      return "KSZ8x";
 8022806:	4b0b      	ldr	r3, [pc, #44]	@ (8022834 <mg_phy_id_to_str+0x100>)
 8022808:	e006      	b.n	8022818 <mg_phy_id_to_str+0xe4>
    case MG_PHY_LAN87x:
      return "LAN87x";
 802280a:	4b0b      	ldr	r3, [pc, #44]	@ (8022838 <mg_phy_id_to_str+0x104>)
 802280c:	e004      	b.n	8022818 <mg_phy_id_to_str+0xe4>
    case MG_PHY_RTL8201:
      return "RTL8201";
 802280e:	4b0b      	ldr	r3, [pc, #44]	@ (802283c <mg_phy_id_to_str+0x108>)
 8022810:	e002      	b.n	8022818 <mg_phy_id_to_str+0xe4>
    case MG_PHY_ICS1894x:
      return "ICS1894x";
 8022812:	4b0b      	ldr	r3, [pc, #44]	@ (8022840 <mg_phy_id_to_str+0x10c>)
 8022814:	e000      	b.n	8022818 <mg_phy_id_to_str+0xe4>
    default:
      return "unknown";
 8022816:	4b0b      	ldr	r3, [pc, #44]	@ (8022844 <mg_phy_id_to_str+0x110>)
  }
  (void) id2;
}
 8022818:	4618      	mov	r0, r3
 802281a:	370c      	adds	r7, #12
 802281c:	46bd      	mov	sp, r7
 802281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022822:	4770      	bx	lr
 8022824:	0802c5f8 	.word	0x0802c5f8
 8022828:	0802c600 	.word	0x0802c600
 802282c:	0802c608 	.word	0x0802c608
 8022830:	0802c610 	.word	0x0802c610
 8022834:	0802c618 	.word	0x0802c618
 8022838:	0802c620 	.word	0x0802c620
 802283c:	0802c628 	.word	0x0802c628
 8022840:	0802c630 	.word	0x0802c630
 8022844:	0802c63c 	.word	0x0802c63c

08022848 <mg_phy_init>:

void mg_phy_init(struct mg_phy *phy, uint8_t phy_addr, uint8_t config) {
 8022848:	b5b0      	push	{r4, r5, r7, lr}
 802284a:	b084      	sub	sp, #16
 802284c:	af00      	add	r7, sp, #0
 802284e:	6078      	str	r0, [r7, #4]
 8022850:	460b      	mov	r3, r1
 8022852:	70fb      	strb	r3, [r7, #3]
 8022854:	4613      	mov	r3, r2
 8022856:	70bb      	strb	r3, [r7, #2]
  uint16_t id1, id2;
  phy->write_reg(phy_addr, MG_PHY_REG_BCR, MG_BIT(15));  // Reset PHY
 8022858:	687b      	ldr	r3, [r7, #4]
 802285a:	685b      	ldr	r3, [r3, #4]
 802285c:	78f8      	ldrb	r0, [r7, #3]
 802285e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8022862:	2100      	movs	r1, #0
 8022864:	4798      	blx	r3
  while (phy->read_reg(phy_addr, MG_PHY_REG_BCR) & MG_BIT(15)) (void) 0;
 8022866:	bf00      	nop
 8022868:	687b      	ldr	r3, [r7, #4]
 802286a:	681b      	ldr	r3, [r3, #0]
 802286c:	78fa      	ldrb	r2, [r7, #3]
 802286e:	2100      	movs	r1, #0
 8022870:	4610      	mov	r0, r2
 8022872:	4798      	blx	r3
 8022874:	4603      	mov	r3, r0
 8022876:	b21b      	sxth	r3, r3
 8022878:	2b00      	cmp	r3, #0
 802287a:	dbf5      	blt.n	8022868 <mg_phy_init+0x20>
  // MG_PHY_REG_BCR[12]: Autonegotiation is default unless hw says otherwise

  id1 = phy->read_reg(phy_addr, MG_PHY_REG_ID1);
 802287c:	687b      	ldr	r3, [r7, #4]
 802287e:	681b      	ldr	r3, [r3, #0]
 8022880:	78fa      	ldrb	r2, [r7, #3]
 8022882:	2102      	movs	r1, #2
 8022884:	4610      	mov	r0, r2
 8022886:	4798      	blx	r3
 8022888:	4603      	mov	r3, r0
 802288a:	81fb      	strh	r3, [r7, #14]
  id2 = phy->read_reg(phy_addr, MG_PHY_REG_ID2);
 802288c:	687b      	ldr	r3, [r7, #4]
 802288e:	681b      	ldr	r3, [r3, #0]
 8022890:	78fa      	ldrb	r2, [r7, #3]
 8022892:	2103      	movs	r1, #3
 8022894:	4610      	mov	r0, r2
 8022896:	4798      	blx	r3
 8022898:	4603      	mov	r3, r0
 802289a:	81bb      	strh	r3, [r7, #12]
  MG_INFO(("PHY ID: %#04x %#04x (%s)", id1, id2, mg_phy_id_to_str(id1, id2)));
 802289c:	4b42      	ldr	r3, [pc, #264]	@ (80229a8 <mg_phy_init+0x160>)
 802289e:	681b      	ldr	r3, [r3, #0]
 80228a0:	2b01      	cmp	r3, #1
 80228a2:	dd14      	ble.n	80228ce <mg_phy_init+0x86>
 80228a4:	4b41      	ldr	r3, [pc, #260]	@ (80229ac <mg_phy_init+0x164>)
 80228a6:	f245 6224 	movw	r2, #22052	@ 0x5624
 80228aa:	4941      	ldr	r1, [pc, #260]	@ (80229b0 <mg_phy_init+0x168>)
 80228ac:	2002      	movs	r0, #2
 80228ae:	f7eb fff9 	bl	800e8a4 <mg_log_prefix>
 80228b2:	89fc      	ldrh	r4, [r7, #14]
 80228b4:	89bd      	ldrh	r5, [r7, #12]
 80228b6:	89ba      	ldrh	r2, [r7, #12]
 80228b8:	89fb      	ldrh	r3, [r7, #14]
 80228ba:	4611      	mov	r1, r2
 80228bc:	4618      	mov	r0, r3
 80228be:	f7ff ff39 	bl	8022734 <mg_phy_id_to_str>
 80228c2:	4603      	mov	r3, r0
 80228c4:	462a      	mov	r2, r5
 80228c6:	4621      	mov	r1, r4
 80228c8:	483a      	ldr	r0, [pc, #232]	@ (80229b4 <mg_phy_init+0x16c>)
 80228ca:	f7ec f83b 	bl	800e944 <mg_log>

  if (id1 == MG_PHY_DP83x && id2 == MG_PHY_DP83867) {
 80228ce:	89fb      	ldrh	r3, [r7, #14]
 80228d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80228d4:	d11f      	bne.n	8022916 <mg_phy_init+0xce>
 80228d6:	89bb      	ldrh	r3, [r7, #12]
 80228d8:	f24a 2231 	movw	r2, #41521	@ 0xa231
 80228dc:	4293      	cmp	r3, r2
 80228de:	d11a      	bne.n	8022916 <mg_phy_init+0xce>
    phy->write_reg(phy_addr, 0x0d, 0x1f);  // write 0x10d to IO_MUX_CFG (0x0170)
 80228e0:	687b      	ldr	r3, [r7, #4]
 80228e2:	685b      	ldr	r3, [r3, #4]
 80228e4:	78f8      	ldrb	r0, [r7, #3]
 80228e6:	221f      	movs	r2, #31
 80228e8:	210d      	movs	r1, #13
 80228ea:	4798      	blx	r3
    phy->write_reg(phy_addr, 0x0e, 0x170);
 80228ec:	687b      	ldr	r3, [r7, #4]
 80228ee:	685b      	ldr	r3, [r3, #4]
 80228f0:	78f8      	ldrb	r0, [r7, #3]
 80228f2:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 80228f6:	210e      	movs	r1, #14
 80228f8:	4798      	blx	r3
    phy->write_reg(phy_addr, 0x0d, 0x401f);
 80228fa:	687b      	ldr	r3, [r7, #4]
 80228fc:	685b      	ldr	r3, [r3, #4]
 80228fe:	78f8      	ldrb	r0, [r7, #3]
 8022900:	f244 021f 	movw	r2, #16415	@ 0x401f
 8022904:	210d      	movs	r1, #13
 8022906:	4798      	blx	r3
    phy->write_reg(phy_addr, 0x0e, 0x10d);
 8022908:	687b      	ldr	r3, [r7, #4]
 802290a:	685b      	ldr	r3, [r3, #4]
 802290c:	78f8      	ldrb	r0, [r7, #3]
 802290e:	f240 120d 	movw	r2, #269	@ 0x10d
 8022912:	210e      	movs	r1, #14
 8022914:	4798      	blx	r3
  }

  if (config & MG_PHY_CLOCKS_MAC) {
 8022916:	78bb      	ldrb	r3, [r7, #2]
 8022918:	f003 0302 	and.w	r3, r3, #2
 802291c:	2b00      	cmp	r3, #0
 802291e:	d12e      	bne.n	802297e <mg_phy_init+0x136>
    // Use PHY crystal oscillator (preserve defaults)
    // nothing to do
  } else {  // MAC clocks PHY, PHY has no xtal
    // Enable 50 MHz external ref clock at XI (preserve defaults)
    if (id1 == MG_PHY_DP83x && id2 != MG_PHY_DP83867 && id2 != MG_PHY_DP83848) {
 8022920:	89fb      	ldrh	r3, [r7, #14]
 8022922:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8022926:	d110      	bne.n	802294a <mg_phy_init+0x102>
 8022928:	89bb      	ldrh	r3, [r7, #12]
 802292a:	f24a 2231 	movw	r2, #41521	@ 0xa231
 802292e:	4293      	cmp	r3, r2
 8022930:	d00b      	beq.n	802294a <mg_phy_init+0x102>
 8022932:	89bb      	ldrh	r3, [r7, #12]
 8022934:	f645 42a2 	movw	r2, #23714	@ 0x5ca2
 8022938:	4293      	cmp	r3, r2
 802293a:	d006      	beq.n	802294a <mg_phy_init+0x102>
      phy->write_reg(phy_addr, MG_PHY_DP83x_REG_RCSR, MG_BIT(7) | MG_BIT(0));
 802293c:	687b      	ldr	r3, [r7, #4]
 802293e:	685b      	ldr	r3, [r3, #4]
 8022940:	78f8      	ldrb	r0, [r7, #3]
 8022942:	2281      	movs	r2, #129	@ 0x81
 8022944:	2117      	movs	r1, #23
 8022946:	4798      	blx	r3
 8022948:	e019      	b.n	802297e <mg_phy_init+0x136>
    } else if (id1 == MG_PHY_KSZ8x) {
 802294a:	89fb      	ldrh	r3, [r7, #14]
 802294c:	2b22      	cmp	r3, #34	@ 0x22
 802294e:	d116      	bne.n	802297e <mg_phy_init+0x136>
      // Disable isolation (override hw, it doesn't make sense at this point)
      phy->write_reg(  // #2848, some NXP boards set ISO, even though
 8022950:	687b      	ldr	r3, [r7, #4]
 8022952:	685c      	ldr	r4, [r3, #4]
          phy_addr, MG_PHY_REG_BCR,  // docs say they don't
          phy->read_reg(phy_addr, MG_PHY_REG_BCR) & (uint16_t) ~MG_BIT(10));
 8022954:	687b      	ldr	r3, [r7, #4]
 8022956:	681b      	ldr	r3, [r3, #0]
 8022958:	78fa      	ldrb	r2, [r7, #3]
 802295a:	2100      	movs	r1, #0
 802295c:	4610      	mov	r0, r2
 802295e:	4798      	blx	r3
 8022960:	4603      	mov	r3, r0
      phy->write_reg(  // #2848, some NXP boards set ISO, even though
 8022962:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8022966:	b29a      	uxth	r2, r3
 8022968:	78fb      	ldrb	r3, [r7, #3]
 802296a:	2100      	movs	r1, #0
 802296c:	4618      	mov	r0, r3
 802296e:	47a0      	blx	r4
      phy->write_reg(phy_addr, MG_PHY_KSZ8x_REG_PC2R,  // now do clock stuff
 8022970:	687b      	ldr	r3, [r7, #4]
 8022972:	685b      	ldr	r3, [r3, #4]
 8022974:	78f8      	ldrb	r0, [r7, #3]
 8022976:	f248 1280 	movw	r2, #33152	@ 0x8180
 802297a:	211f      	movs	r1, #31
 802297c:	4798      	blx	r3
      phy->write_reg(phy_addr, MG_PHY_RTL8201_REG_PAGESEL, 0);  // Select page 0
#endif
    }
  }

  if (config & MG_PHY_LEDS_ACTIVE_HIGH && id1 == MG_PHY_DP83x) {
 802297e:	78bb      	ldrb	r3, [r7, #2]
 8022980:	f003 0301 	and.w	r3, r3, #1
 8022984:	2b00      	cmp	r3, #0
 8022986:	d00a      	beq.n	802299e <mg_phy_init+0x156>
 8022988:	89fb      	ldrh	r3, [r7, #14]
 802298a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 802298e:	d106      	bne.n	802299e <mg_phy_init+0x156>
    phy->write_reg(phy_addr, MG_PHY_DP83x_REG_LEDCR,
 8022990:	687b      	ldr	r3, [r7, #4]
 8022992:	685b      	ldr	r3, [r3, #4]
 8022994:	78f8      	ldrb	r0, [r7, #3]
 8022996:	f44f 7220 	mov.w	r2, #640	@ 0x280
 802299a:	2118      	movs	r1, #24
 802299c:	4798      	blx	r3
                   MG_BIT(9) | MG_BIT(7));  // LED status, active high
  }  // Other PHYs do not support this feature
}
 802299e:	bf00      	nop
 80229a0:	3710      	adds	r7, #16
 80229a2:	46bd      	mov	sp, r7
 80229a4:	bdb0      	pop	{r4, r5, r7, pc}
 80229a6:	bf00      	nop
 80229a8:	24000258 	.word	0x24000258
 80229ac:	0802dbc8 	.word	0x0802dbc8
 80229b0:	08029c3c 	.word	0x08029c3c
 80229b4:	0802c644 	.word	0x0802c644

080229b8 <mg_phy_up>:

bool mg_phy_up(struct mg_phy *phy, uint8_t phy_addr, bool *full_duplex,
               uint8_t *speed) {
 80229b8:	b580      	push	{r7, lr}
 80229ba:	b08a      	sub	sp, #40	@ 0x28
 80229bc:	af00      	add	r7, sp, #0
 80229be:	60f8      	str	r0, [r7, #12]
 80229c0:	607a      	str	r2, [r7, #4]
 80229c2:	603b      	str	r3, [r7, #0]
 80229c4:	460b      	mov	r3, r1
 80229c6:	72fb      	strb	r3, [r7, #11]
  bool up = false;
 80229c8:	2300      	movs	r3, #0
 80229ca:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  uint16_t bsr = phy->read_reg(phy_addr, MG_PHY_REG_BSR);
 80229ce:	68fb      	ldr	r3, [r7, #12]
 80229d0:	681b      	ldr	r3, [r3, #0]
 80229d2:	7afa      	ldrb	r2, [r7, #11]
 80229d4:	2101      	movs	r1, #1
 80229d6:	4610      	mov	r0, r2
 80229d8:	4798      	blx	r3
 80229da:	4603      	mov	r3, r0
 80229dc:	84fb      	strh	r3, [r7, #38]	@ 0x26
  if ((bsr & MG_BIT(5)) && !(bsr & MG_BIT(2)))  // some PHYs latch down events
 80229de:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80229e0:	f003 0320 	and.w	r3, r3, #32
 80229e4:	2b00      	cmp	r3, #0
 80229e6:	d00c      	beq.n	8022a02 <mg_phy_up+0x4a>
 80229e8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80229ea:	f003 0304 	and.w	r3, r3, #4
 80229ee:	2b00      	cmp	r3, #0
 80229f0:	d107      	bne.n	8022a02 <mg_phy_up+0x4a>
    bsr = phy->read_reg(phy_addr, MG_PHY_REG_BSR);  // read again
 80229f2:	68fb      	ldr	r3, [r7, #12]
 80229f4:	681b      	ldr	r3, [r3, #0]
 80229f6:	7afa      	ldrb	r2, [r7, #11]
 80229f8:	2101      	movs	r1, #1
 80229fa:	4610      	mov	r0, r2
 80229fc:	4798      	blx	r3
 80229fe:	4603      	mov	r3, r0
 8022a00:	84fb      	strh	r3, [r7, #38]	@ 0x26
  up = bsr & MG_BIT(2);
 8022a02:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8022a04:	f003 0304 	and.w	r3, r3, #4
 8022a08:	2b00      	cmp	r3, #0
 8022a0a:	bf14      	ite	ne
 8022a0c:	2301      	movne	r3, #1
 8022a0e:	2300      	moveq	r3, #0
 8022a10:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  if (up && full_duplex != NULL && speed != NULL) {
 8022a14:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8022a18:	2b00      	cmp	r3, #0
 8022a1a:	f000 80dc 	beq.w	8022bd6 <mg_phy_up+0x21e>
 8022a1e:	687b      	ldr	r3, [r7, #4]
 8022a20:	2b00      	cmp	r3, #0
 8022a22:	f000 80d8 	beq.w	8022bd6 <mg_phy_up+0x21e>
 8022a26:	683b      	ldr	r3, [r7, #0]
 8022a28:	2b00      	cmp	r3, #0
 8022a2a:	f000 80d4 	beq.w	8022bd6 <mg_phy_up+0x21e>
    uint16_t id1 = phy->read_reg(phy_addr, MG_PHY_REG_ID1);
 8022a2e:	68fb      	ldr	r3, [r7, #12]
 8022a30:	681b      	ldr	r3, [r3, #0]
 8022a32:	7afa      	ldrb	r2, [r7, #11]
 8022a34:	2102      	movs	r1, #2
 8022a36:	4610      	mov	r0, r2
 8022a38:	4798      	blx	r3
 8022a3a:	4603      	mov	r3, r0
 8022a3c:	847b      	strh	r3, [r7, #34]	@ 0x22
    if (id1 == MG_PHY_DP83x) {
 8022a3e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8022a40:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8022a44:	d14b      	bne.n	8022ade <mg_phy_up+0x126>
      uint16_t id2 = phy->read_reg(phy_addr, MG_PHY_REG_ID2);
 8022a46:	68fb      	ldr	r3, [r7, #12]
 8022a48:	681b      	ldr	r3, [r3, #0]
 8022a4a:	7afa      	ldrb	r2, [r7, #11]
 8022a4c:	2103      	movs	r1, #3
 8022a4e:	4610      	mov	r0, r2
 8022a50:	4798      	blx	r3
 8022a52:	4603      	mov	r3, r0
 8022a54:	833b      	strh	r3, [r7, #24]
      if (id2 == MG_PHY_DP83867) {
 8022a56:	8b3b      	ldrh	r3, [r7, #24]
 8022a58:	f24a 2231 	movw	r2, #41521	@ 0xa231
 8022a5c:	4293      	cmp	r3, r2
 8022a5e:	d120      	bne.n	8022aa2 <mg_phy_up+0xea>
        uint16_t physts = phy->read_reg(phy_addr, MG_PHY_DP83867_REG_PHYSTS);
 8022a60:	68fb      	ldr	r3, [r7, #12]
 8022a62:	681b      	ldr	r3, [r3, #0]
 8022a64:	7afa      	ldrb	r2, [r7, #11]
 8022a66:	2111      	movs	r1, #17
 8022a68:	4610      	mov	r0, r2
 8022a6a:	4798      	blx	r3
 8022a6c:	4603      	mov	r3, r0
 8022a6e:	82bb      	strh	r3, [r7, #20]
        *full_duplex = physts & MG_BIT(13);
 8022a70:	8abb      	ldrh	r3, [r7, #20]
 8022a72:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8022a76:	2b00      	cmp	r3, #0
 8022a78:	bf14      	ite	ne
 8022a7a:	2301      	movne	r3, #1
 8022a7c:	2300      	moveq	r3, #0
 8022a7e:	b2da      	uxtb	r2, r3
 8022a80:	687b      	ldr	r3, [r7, #4]
 8022a82:	701a      	strb	r2, [r3, #0]
        *speed = (physts & MG_BIT(15))   ? MG_PHY_SPEED_1000M
 8022a84:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8022a88:	2b00      	cmp	r3, #0
 8022a8a:	db06      	blt.n	8022a9a <mg_phy_up+0xe2>
                 : (physts & MG_BIT(14)) ? MG_PHY_SPEED_100M
                                         : MG_PHY_SPEED_10M;
 8022a8c:	8abb      	ldrh	r3, [r7, #20]
 8022a8e:	0b9b      	lsrs	r3, r3, #14
 8022a90:	b2db      	uxtb	r3, r3
        *speed = (physts & MG_BIT(15))   ? MG_PHY_SPEED_1000M
 8022a92:	f003 0301 	and.w	r3, r3, #1
 8022a96:	b2da      	uxtb	r2, r3
 8022a98:	e000      	b.n	8022a9c <mg_phy_up+0xe4>
 8022a9a:	2202      	movs	r2, #2
 8022a9c:	683b      	ldr	r3, [r7, #0]
 8022a9e:	701a      	strb	r2, [r3, #0]
 8022aa0:	e099      	b.n	8022bd6 <mg_phy_up+0x21e>
      } else {
        uint16_t physts = phy->read_reg(phy_addr, MG_PHY_DP83x_REG_PHYSTS);
 8022aa2:	68fb      	ldr	r3, [r7, #12]
 8022aa4:	681b      	ldr	r3, [r3, #0]
 8022aa6:	7afa      	ldrb	r2, [r7, #11]
 8022aa8:	2110      	movs	r1, #16
 8022aaa:	4610      	mov	r0, r2
 8022aac:	4798      	blx	r3
 8022aae:	4603      	mov	r3, r0
 8022ab0:	82fb      	strh	r3, [r7, #22]
        *full_duplex = physts & MG_BIT(2);
 8022ab2:	8afb      	ldrh	r3, [r7, #22]
 8022ab4:	f003 0304 	and.w	r3, r3, #4
 8022ab8:	2b00      	cmp	r3, #0
 8022aba:	bf14      	ite	ne
 8022abc:	2301      	movne	r3, #1
 8022abe:	2300      	moveq	r3, #0
 8022ac0:	b2da      	uxtb	r2, r3
 8022ac2:	687b      	ldr	r3, [r7, #4]
 8022ac4:	701a      	strb	r2, [r3, #0]
        *speed = (physts & MG_BIT(1)) ? MG_PHY_SPEED_10M : MG_PHY_SPEED_100M;
 8022ac6:	8afb      	ldrh	r3, [r7, #22]
 8022ac8:	f003 0302 	and.w	r3, r3, #2
 8022acc:	2b00      	cmp	r3, #0
 8022ace:	bf0c      	ite	eq
 8022ad0:	2301      	moveq	r3, #1
 8022ad2:	2300      	movne	r3, #0
 8022ad4:	b2db      	uxtb	r3, r3
 8022ad6:	461a      	mov	r2, r3
 8022ad8:	683b      	ldr	r3, [r7, #0]
 8022ada:	701a      	strb	r2, [r3, #0]
 8022adc:	e07b      	b.n	8022bd6 <mg_phy_up+0x21e>
      }
    } else if (id1 == MG_PHY_KSZ8x) {
 8022ade:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8022ae0:	2b22      	cmp	r3, #34	@ 0x22
 8022ae2:	d11d      	bne.n	8022b20 <mg_phy_up+0x168>
      uint16_t pc1r = phy->read_reg(phy_addr, MG_PHY_KSZ8x_REG_PC1R);
 8022ae4:	68fb      	ldr	r3, [r7, #12]
 8022ae6:	681b      	ldr	r3, [r3, #0]
 8022ae8:	7afa      	ldrb	r2, [r7, #11]
 8022aea:	211e      	movs	r1, #30
 8022aec:	4610      	mov	r0, r2
 8022aee:	4798      	blx	r3
 8022af0:	4603      	mov	r3, r0
 8022af2:	837b      	strh	r3, [r7, #26]
      *full_duplex = pc1r & MG_BIT(2);
 8022af4:	8b7b      	ldrh	r3, [r7, #26]
 8022af6:	f003 0304 	and.w	r3, r3, #4
 8022afa:	2b00      	cmp	r3, #0
 8022afc:	bf14      	ite	ne
 8022afe:	2301      	movne	r3, #1
 8022b00:	2300      	moveq	r3, #0
 8022b02:	b2da      	uxtb	r2, r3
 8022b04:	687b      	ldr	r3, [r7, #4]
 8022b06:	701a      	strb	r2, [r3, #0]
      *speed = (pc1r & 3) == 1 ? MG_PHY_SPEED_10M : MG_PHY_SPEED_100M;
 8022b08:	8b7b      	ldrh	r3, [r7, #26]
 8022b0a:	f003 0303 	and.w	r3, r3, #3
 8022b0e:	2b01      	cmp	r3, #1
 8022b10:	bf14      	ite	ne
 8022b12:	2301      	movne	r3, #1
 8022b14:	2300      	moveq	r3, #0
 8022b16:	b2db      	uxtb	r3, r3
 8022b18:	461a      	mov	r2, r3
 8022b1a:	683b      	ldr	r3, [r7, #0]
 8022b1c:	701a      	strb	r2, [r3, #0]
 8022b1e:	e05a      	b.n	8022bd6 <mg_phy_up+0x21e>
    } else if (id1 == MG_PHY_LAN87x) {
 8022b20:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8022b22:	2b07      	cmp	r3, #7
 8022b24:	d11a      	bne.n	8022b5c <mg_phy_up+0x1a4>
      uint16_t scsr = phy->read_reg(phy_addr, MG_PHY_LAN87x_REG_SCSR);
 8022b26:	68fb      	ldr	r3, [r7, #12]
 8022b28:	681b      	ldr	r3, [r3, #0]
 8022b2a:	7afa      	ldrb	r2, [r7, #11]
 8022b2c:	211f      	movs	r1, #31
 8022b2e:	4610      	mov	r0, r2
 8022b30:	4798      	blx	r3
 8022b32:	4603      	mov	r3, r0
 8022b34:	83bb      	strh	r3, [r7, #28]
      *full_duplex = scsr & MG_BIT(4);
 8022b36:	8bbb      	ldrh	r3, [r7, #28]
 8022b38:	f003 0310 	and.w	r3, r3, #16
 8022b3c:	2b00      	cmp	r3, #0
 8022b3e:	bf14      	ite	ne
 8022b40:	2301      	movne	r3, #1
 8022b42:	2300      	moveq	r3, #0
 8022b44:	b2da      	uxtb	r2, r3
 8022b46:	687b      	ldr	r3, [r7, #4]
 8022b48:	701a      	strb	r2, [r3, #0]
      *speed = (scsr & MG_BIT(3)) ? MG_PHY_SPEED_100M : MG_PHY_SPEED_10M;
 8022b4a:	8bbb      	ldrh	r3, [r7, #28]
 8022b4c:	08db      	lsrs	r3, r3, #3
 8022b4e:	b2db      	uxtb	r3, r3
 8022b50:	f003 0301 	and.w	r3, r3, #1
 8022b54:	b2da      	uxtb	r2, r3
 8022b56:	683b      	ldr	r3, [r7, #0]
 8022b58:	701a      	strb	r2, [r3, #0]
 8022b5a:	e03c      	b.n	8022bd6 <mg_phy_up+0x21e>
    } else if (id1 == MG_PHY_RTL8201) {
 8022b5c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8022b5e:	2b1c      	cmp	r3, #28
 8022b60:	d11a      	bne.n	8022b98 <mg_phy_up+0x1e0>
      uint16_t bcr = phy->read_reg(phy_addr, MG_PHY_REG_BCR);
 8022b62:	68fb      	ldr	r3, [r7, #12]
 8022b64:	681b      	ldr	r3, [r3, #0]
 8022b66:	7afa      	ldrb	r2, [r7, #11]
 8022b68:	2100      	movs	r1, #0
 8022b6a:	4610      	mov	r0, r2
 8022b6c:	4798      	blx	r3
 8022b6e:	4603      	mov	r3, r0
 8022b70:	83fb      	strh	r3, [r7, #30]
      *full_duplex = bcr & MG_BIT(8);
 8022b72:	8bfb      	ldrh	r3, [r7, #30]
 8022b74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8022b78:	2b00      	cmp	r3, #0
 8022b7a:	bf14      	ite	ne
 8022b7c:	2301      	movne	r3, #1
 8022b7e:	2300      	moveq	r3, #0
 8022b80:	b2da      	uxtb	r2, r3
 8022b82:	687b      	ldr	r3, [r7, #4]
 8022b84:	701a      	strb	r2, [r3, #0]
      *speed = (bcr & MG_BIT(13)) ? MG_PHY_SPEED_100M : MG_PHY_SPEED_10M;
 8022b86:	8bfb      	ldrh	r3, [r7, #30]
 8022b88:	0b5b      	lsrs	r3, r3, #13
 8022b8a:	b2db      	uxtb	r3, r3
 8022b8c:	f003 0301 	and.w	r3, r3, #1
 8022b90:	b2da      	uxtb	r2, r3
 8022b92:	683b      	ldr	r3, [r7, #0]
 8022b94:	701a      	strb	r2, [r3, #0]
 8022b96:	e01e      	b.n	8022bd6 <mg_phy_up+0x21e>
    } else if (id1 == MG_PHY_ICS1894x) {
 8022b98:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8022b9a:	2b15      	cmp	r3, #21
 8022b9c:	d11b      	bne.n	8022bd6 <mg_phy_up+0x21e>
      uint16_t poll_reg = phy->read_reg(phy_addr, MG_PHY_ICS189432_REG_POLL);
 8022b9e:	68fb      	ldr	r3, [r7, #12]
 8022ba0:	681b      	ldr	r3, [r3, #0]
 8022ba2:	7afa      	ldrb	r2, [r7, #11]
 8022ba4:	2111      	movs	r1, #17
 8022ba6:	4610      	mov	r0, r2
 8022ba8:	4798      	blx	r3
 8022baa:	4603      	mov	r3, r0
 8022bac:	843b      	strh	r3, [r7, #32]
      *full_duplex = poll_reg & MG_BIT(14);
 8022bae:	8c3b      	ldrh	r3, [r7, #32]
 8022bb0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8022bb4:	2b00      	cmp	r3, #0
 8022bb6:	bf14      	ite	ne
 8022bb8:	2301      	movne	r3, #1
 8022bba:	2300      	moveq	r3, #0
 8022bbc:	b2da      	uxtb	r2, r3
 8022bbe:	687b      	ldr	r3, [r7, #4]
 8022bc0:	701a      	strb	r2, [r3, #0]
      *speed = (poll_reg & MG_BIT(15)) ? MG_PHY_SPEED_100M : MG_PHY_SPEED_10M;
 8022bc2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8022bc6:	13db      	asrs	r3, r3, #15
 8022bc8:	b21b      	sxth	r3, r3
 8022bca:	b2db      	uxtb	r3, r3
 8022bcc:	f003 0301 	and.w	r3, r3, #1
 8022bd0:	b2da      	uxtb	r2, r3
 8022bd2:	683b      	ldr	r3, [r7, #0]
 8022bd4:	701a      	strb	r2, [r3, #0]
    }
  }
  return up;
 8022bd6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
}
 8022bda:	4618      	mov	r0, r3
 8022bdc:	3728      	adds	r7, #40	@ 0x28
 8022bde:	46bd      	mov	sp, r7
 8022be0:	bd80      	pop	{r7, pc}
	...

08022be4 <eth_read_phy>:
static volatile uint32_t s_txdesc[ETH_DESC_CNT][ETH_DS];  // TX descriptors
static uint8_t s_rxbuf[ETH_DESC_CNT][ETH_PKT_SIZE];       // RX ethernet buffers
static uint8_t s_txbuf[ETH_DESC_CNT][ETH_PKT_SIZE];       // TX ethernet buffers
static struct mg_tcpip_if *s_ifp;                         // MIP interface

static uint16_t eth_read_phy(uint8_t addr, uint8_t reg) {
 8022be4:	b480      	push	{r7}
 8022be6:	b083      	sub	sp, #12
 8022be8:	af00      	add	r7, sp, #0
 8022bea:	4603      	mov	r3, r0
 8022bec:	460a      	mov	r2, r1
 8022bee:	71fb      	strb	r3, [r7, #7]
 8022bf0:	4613      	mov	r3, r2
 8022bf2:	71bb      	strb	r3, [r7, #6]
  ETH->MACMDIOAR &= (0xF << 8);
 8022bf4:	4b17      	ldr	r3, [pc, #92]	@ (8022c54 <eth_read_phy+0x70>)
 8022bf6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8022bfa:	4a16      	ldr	r2, [pc, #88]	@ (8022c54 <eth_read_phy+0x70>)
 8022bfc:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8022c00:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
  ETH->MACMDIOAR |= ((uint32_t) addr << 21) | ((uint32_t) reg << 16) | 3 << 2;
 8022c04:	4b13      	ldr	r3, [pc, #76]	@ (8022c54 <eth_read_phy+0x70>)
 8022c06:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8022c0a:	79fb      	ldrb	r3, [r7, #7]
 8022c0c:	0559      	lsls	r1, r3, #21
 8022c0e:	79bb      	ldrb	r3, [r7, #6]
 8022c10:	041b      	lsls	r3, r3, #16
 8022c12:	430b      	orrs	r3, r1
 8022c14:	4313      	orrs	r3, r2
 8022c16:	4a0f      	ldr	r2, [pc, #60]	@ (8022c54 <eth_read_phy+0x70>)
 8022c18:	f043 030c 	orr.w	r3, r3, #12
 8022c1c:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
  ETH->MACMDIOAR |= MG_BIT(0);
 8022c20:	4b0c      	ldr	r3, [pc, #48]	@ (8022c54 <eth_read_phy+0x70>)
 8022c22:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8022c26:	4a0b      	ldr	r2, [pc, #44]	@ (8022c54 <eth_read_phy+0x70>)
 8022c28:	f043 0301 	orr.w	r3, r3, #1
 8022c2c:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
  while (ETH->MACMDIOAR & MG_BIT(0)) (void) 0;
 8022c30:	bf00      	nop
 8022c32:	4b08      	ldr	r3, [pc, #32]	@ (8022c54 <eth_read_phy+0x70>)
 8022c34:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8022c38:	f003 0301 	and.w	r3, r3, #1
 8022c3c:	2b00      	cmp	r3, #0
 8022c3e:	d1f8      	bne.n	8022c32 <eth_read_phy+0x4e>
  return (uint16_t) ETH->MACMDIODR;
 8022c40:	4b04      	ldr	r3, [pc, #16]	@ (8022c54 <eth_read_phy+0x70>)
 8022c42:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8022c46:	b29b      	uxth	r3, r3
}
 8022c48:	4618      	mov	r0, r3
 8022c4a:	370c      	adds	r7, #12
 8022c4c:	46bd      	mov	sp, r7
 8022c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022c52:	4770      	bx	lr
 8022c54:	40028000 	.word	0x40028000

08022c58 <eth_write_phy>:

static void eth_write_phy(uint8_t addr, uint8_t reg, uint16_t val) {
 8022c58:	b480      	push	{r7}
 8022c5a:	b083      	sub	sp, #12
 8022c5c:	af00      	add	r7, sp, #0
 8022c5e:	4603      	mov	r3, r0
 8022c60:	71fb      	strb	r3, [r7, #7]
 8022c62:	460b      	mov	r3, r1
 8022c64:	71bb      	strb	r3, [r7, #6]
 8022c66:	4613      	mov	r3, r2
 8022c68:	80bb      	strh	r3, [r7, #4]
  ETH->MACMDIODR = val;
 8022c6a:	4a18      	ldr	r2, [pc, #96]	@ (8022ccc <eth_write_phy+0x74>)
 8022c6c:	88bb      	ldrh	r3, [r7, #4]
 8022c6e:	f8c2 3204 	str.w	r3, [r2, #516]	@ 0x204
  ETH->MACMDIOAR &= (0xF << 8);
 8022c72:	4b16      	ldr	r3, [pc, #88]	@ (8022ccc <eth_write_phy+0x74>)
 8022c74:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8022c78:	4a14      	ldr	r2, [pc, #80]	@ (8022ccc <eth_write_phy+0x74>)
 8022c7a:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8022c7e:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
  ETH->MACMDIOAR |= ((uint32_t) addr << 21) | ((uint32_t) reg << 16) | 1 << 2;
 8022c82:	4b12      	ldr	r3, [pc, #72]	@ (8022ccc <eth_write_phy+0x74>)
 8022c84:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8022c88:	79fb      	ldrb	r3, [r7, #7]
 8022c8a:	0559      	lsls	r1, r3, #21
 8022c8c:	79bb      	ldrb	r3, [r7, #6]
 8022c8e:	041b      	lsls	r3, r3, #16
 8022c90:	430b      	orrs	r3, r1
 8022c92:	4313      	orrs	r3, r2
 8022c94:	4a0d      	ldr	r2, [pc, #52]	@ (8022ccc <eth_write_phy+0x74>)
 8022c96:	f043 0304 	orr.w	r3, r3, #4
 8022c9a:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
  ETH->MACMDIOAR |= MG_BIT(0);
 8022c9e:	4b0b      	ldr	r3, [pc, #44]	@ (8022ccc <eth_write_phy+0x74>)
 8022ca0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8022ca4:	4a09      	ldr	r2, [pc, #36]	@ (8022ccc <eth_write_phy+0x74>)
 8022ca6:	f043 0301 	orr.w	r3, r3, #1
 8022caa:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
  while (ETH->MACMDIOAR & MG_BIT(0)) (void) 0;
 8022cae:	bf00      	nop
 8022cb0:	4b06      	ldr	r3, [pc, #24]	@ (8022ccc <eth_write_phy+0x74>)
 8022cb2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8022cb6:	f003 0301 	and.w	r3, r3, #1
 8022cba:	2b00      	cmp	r3, #0
 8022cbc:	d1f8      	bne.n	8022cb0 <eth_write_phy+0x58>
}
 8022cbe:	bf00      	nop
 8022cc0:	bf00      	nop
 8022cc2:	370c      	adds	r7, #12
 8022cc4:	46bd      	mov	sp, r7
 8022cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022cca:	4770      	bx	lr
 8022ccc:	40028000 	.word	0x40028000

08022cd0 <mg_tcpip_driver_stm32h_init>:

static bool mg_tcpip_driver_stm32h_init(struct mg_tcpip_if *ifp) {
 8022cd0:	b580      	push	{r7, lr}
 8022cd2:	b08a      	sub	sp, #40	@ 0x28
 8022cd4:	af00      	add	r7, sp, #0
 8022cd6:	6078      	str	r0, [r7, #4]
  struct mg_tcpip_driver_stm32h_data *d =
 8022cd8:	687b      	ldr	r3, [r7, #4]
 8022cda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8022cdc:	61bb      	str	r3, [r7, #24]
      (struct mg_tcpip_driver_stm32h_data *) ifp->driver_data;
  s_ifp = ifp;
 8022cde:	4a90      	ldr	r2, [pc, #576]	@ (8022f20 <mg_tcpip_driver_stm32h_init+0x250>)
 8022ce0:	687b      	ldr	r3, [r7, #4]
 8022ce2:	6013      	str	r3, [r2, #0]
  uint8_t phy_addr = d == NULL ? 0 : d->phy_addr;
 8022ce4:	69bb      	ldr	r3, [r7, #24]
 8022ce6:	2b00      	cmp	r3, #0
 8022ce8:	d002      	beq.n	8022cf0 <mg_tcpip_driver_stm32h_init+0x20>
 8022cea:	69bb      	ldr	r3, [r7, #24]
 8022cec:	791b      	ldrb	r3, [r3, #4]
 8022cee:	e000      	b.n	8022cf2 <mg_tcpip_driver_stm32h_init+0x22>
 8022cf0:	2300      	movs	r3, #0
 8022cf2:	75fb      	strb	r3, [r7, #23]
  uint8_t phy_conf = d == NULL ? MG_PHY_CLOCKS_MAC : d->phy_conf;
 8022cf4:	69bb      	ldr	r3, [r7, #24]
 8022cf6:	2b00      	cmp	r3, #0
 8022cf8:	d002      	beq.n	8022d00 <mg_tcpip_driver_stm32h_init+0x30>
 8022cfa:	69bb      	ldr	r3, [r7, #24]
 8022cfc:	795b      	ldrb	r3, [r3, #5]
 8022cfe:	e000      	b.n	8022d02 <mg_tcpip_driver_stm32h_init+0x32>
 8022d00:	2302      	movs	r3, #2
 8022d02:	75bb      	strb	r3, [r7, #22]

  // Init RX descriptors
  for (int i = 0; i < ETH_DESC_CNT; i++) {
 8022d04:	2300      	movs	r3, #0
 8022d06:	627b      	str	r3, [r7, #36]	@ 0x24
 8022d08:	e017      	b.n	8022d3a <mg_tcpip_driver_stm32h_init+0x6a>
    s_rxdesc[i][0] = (uint32_t) (uintptr_t) s_rxbuf[i];  // Point to data buffer
 8022d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022d0c:	f240 6204 	movw	r2, #1540	@ 0x604
 8022d10:	fb02 f303 	mul.w	r3, r2, r3
 8022d14:	4a83      	ldr	r2, [pc, #524]	@ (8022f24 <mg_tcpip_driver_stm32h_init+0x254>)
 8022d16:	4413      	add	r3, r2
 8022d18:	4619      	mov	r1, r3
 8022d1a:	4a83      	ldr	r2, [pc, #524]	@ (8022f28 <mg_tcpip_driver_stm32h_init+0x258>)
 8022d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022d1e:	011b      	lsls	r3, r3, #4
 8022d20:	4413      	add	r3, r2
 8022d22:	6019      	str	r1, [r3, #0]
    s_rxdesc[i][3] = MG_BIT(31) | MG_BIT(30) | MG_BIT(24);  // OWN, IOC, BUF1V
 8022d24:	4a80      	ldr	r2, [pc, #512]	@ (8022f28 <mg_tcpip_driver_stm32h_init+0x258>)
 8022d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022d28:	011b      	lsls	r3, r3, #4
 8022d2a:	4413      	add	r3, r2
 8022d2c:	330c      	adds	r3, #12
 8022d2e:	f04f 4241 	mov.w	r2, #3238002688	@ 0xc1000000
 8022d32:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < ETH_DESC_CNT; i++) {
 8022d34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022d36:	3301      	adds	r3, #1
 8022d38:	627b      	str	r3, [r7, #36]	@ 0x24
 8022d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022d3c:	2b03      	cmp	r3, #3
 8022d3e:	dde4      	ble.n	8022d0a <mg_tcpip_driver_stm32h_init+0x3a>
  }

  // Init TX descriptors
  for (int i = 0; i < ETH_DESC_CNT; i++) {
 8022d40:	2300      	movs	r3, #0
 8022d42:	623b      	str	r3, [r7, #32]
 8022d44:	e00f      	b.n	8022d66 <mg_tcpip_driver_stm32h_init+0x96>
    s_txdesc[i][0] = (uint32_t) (uintptr_t) s_txbuf[i];  // Buf pointer
 8022d46:	6a3b      	ldr	r3, [r7, #32]
 8022d48:	f240 6204 	movw	r2, #1540	@ 0x604
 8022d4c:	fb02 f303 	mul.w	r3, r2, r3
 8022d50:	4a76      	ldr	r2, [pc, #472]	@ (8022f2c <mg_tcpip_driver_stm32h_init+0x25c>)
 8022d52:	4413      	add	r3, r2
 8022d54:	4619      	mov	r1, r3
 8022d56:	4a76      	ldr	r2, [pc, #472]	@ (8022f30 <mg_tcpip_driver_stm32h_init+0x260>)
 8022d58:	6a3b      	ldr	r3, [r7, #32]
 8022d5a:	011b      	lsls	r3, r3, #4
 8022d5c:	4413      	add	r3, r2
 8022d5e:	6019      	str	r1, [r3, #0]
  for (int i = 0; i < ETH_DESC_CNT; i++) {
 8022d60:	6a3b      	ldr	r3, [r7, #32]
 8022d62:	3301      	adds	r3, #1
 8022d64:	623b      	str	r3, [r7, #32]
 8022d66:	6a3b      	ldr	r3, [r7, #32]
 8022d68:	2b03      	cmp	r3, #3
 8022d6a:	ddec      	ble.n	8022d46 <mg_tcpip_driver_stm32h_init+0x76>
  }

  ETH->DMAMR |= MG_BIT(0);  // Software reset
 8022d6c:	4b71      	ldr	r3, [pc, #452]	@ (8022f34 <mg_tcpip_driver_stm32h_init+0x264>)
 8022d6e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8022d72:	681b      	ldr	r3, [r3, #0]
 8022d74:	4a6f      	ldr	r2, [pc, #444]	@ (8022f34 <mg_tcpip_driver_stm32h_init+0x264>)
 8022d76:	f043 0301 	orr.w	r3, r3, #1
 8022d7a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8022d7e:	6013      	str	r3, [r2, #0]
  for (int i = 0; i < 4; i++)
 8022d80:	2300      	movs	r3, #0
 8022d82:	61fb      	str	r3, [r7, #28]
 8022d84:	e002      	b.n	8022d8c <mg_tcpip_driver_stm32h_init+0xbc>
 8022d86:	69fb      	ldr	r3, [r7, #28]
 8022d88:	3301      	adds	r3, #1
 8022d8a:	61fb      	str	r3, [r7, #28]
 8022d8c:	69fb      	ldr	r3, [r7, #28]
 8022d8e:	2b03      	cmp	r3, #3
 8022d90:	ddf9      	ble.n	8022d86 <mg_tcpip_driver_stm32h_init+0xb6>
    (void) 0;  // wait at least 4 clocks before reading
  while ((ETH->DMAMR & MG_BIT(0)) != 0) (void) 0;  // Wait until done
 8022d92:	bf00      	nop
 8022d94:	4b67      	ldr	r3, [pc, #412]	@ (8022f34 <mg_tcpip_driver_stm32h_init+0x264>)
 8022d96:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8022d9a:	681b      	ldr	r3, [r3, #0]
 8022d9c:	f003 0301 	and.w	r3, r3, #1
 8022da0:	2b00      	cmp	r3, #0
 8022da2:	d1f7      	bne.n	8022d94 <mg_tcpip_driver_stm32h_init+0xc4>

  // Set MDC clock divider. Get user value, else, assume max freq
  int cr = (d == NULL || d->mdc_cr < 0) ? 7 : d->mdc_cr;
 8022da4:	69bb      	ldr	r3, [r7, #24]
 8022da6:	2b00      	cmp	r3, #0
 8022da8:	d006      	beq.n	8022db8 <mg_tcpip_driver_stm32h_init+0xe8>
 8022daa:	69bb      	ldr	r3, [r7, #24]
 8022dac:	681b      	ldr	r3, [r3, #0]
 8022dae:	2b00      	cmp	r3, #0
 8022db0:	db02      	blt.n	8022db8 <mg_tcpip_driver_stm32h_init+0xe8>
 8022db2:	69bb      	ldr	r3, [r7, #24]
 8022db4:	681b      	ldr	r3, [r3, #0]
 8022db6:	e000      	b.n	8022dba <mg_tcpip_driver_stm32h_init+0xea>
 8022db8:	2307      	movs	r3, #7
 8022dba:	613b      	str	r3, [r7, #16]
  ETH->MACMDIOAR = ((uint32_t) cr & 0xF) << 8;
 8022dbc:	693b      	ldr	r3, [r7, #16]
 8022dbe:	021b      	lsls	r3, r3, #8
 8022dc0:	4a5c      	ldr	r2, [pc, #368]	@ (8022f34 <mg_tcpip_driver_stm32h_init+0x264>)
 8022dc2:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8022dc6:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200

  // NOTE(scaprile): We do not use timing facilities so the DMA engine does not
  // re-write buffer address
  ETH->DMAMR = 0 << 16;        // use interrupt mode 0 (58.8.1) (reset value)
 8022dca:	4b5a      	ldr	r3, [pc, #360]	@ (8022f34 <mg_tcpip_driver_stm32h_init+0x264>)
 8022dcc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8022dd0:	461a      	mov	r2, r3
 8022dd2:	2300      	movs	r3, #0
 8022dd4:	6013      	str	r3, [r2, #0]
  ETH->DMASBMR |= MG_BIT(12);  // AAL NOTE(scaprile): is this actually needed
 8022dd6:	4b57      	ldr	r3, [pc, #348]	@ (8022f34 <mg_tcpip_driver_stm32h_init+0x264>)
 8022dd8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8022ddc:	685b      	ldr	r3, [r3, #4]
 8022dde:	4a55      	ldr	r2, [pc, #340]	@ (8022f34 <mg_tcpip_driver_stm32h_init+0x264>)
 8022de0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8022de4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8022de8:	6053      	str	r3, [r2, #4]
  ETH->MACIER = 0;  // Do not enable additional irq sources (reset value)
 8022dea:	4b52      	ldr	r3, [pc, #328]	@ (8022f34 <mg_tcpip_driver_stm32h_init+0x264>)
 8022dec:	2200      	movs	r2, #0
 8022dee:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  ETH->MACTFCR = MG_BIT(7);  // Disable zero-quanta pause
 8022df2:	4b50      	ldr	r3, [pc, #320]	@ (8022f34 <mg_tcpip_driver_stm32h_init+0x264>)
 8022df4:	2280      	movs	r2, #128	@ 0x80
 8022df6:	671a      	str	r2, [r3, #112]	@ 0x70
#if !MG_ENABLE_DRIVER_MCXN
  ETH->MACPFR = MG_BIT(10);  // Perfect filtering
 8022df8:	4b4e      	ldr	r3, [pc, #312]	@ (8022f34 <mg_tcpip_driver_stm32h_init+0x264>)
 8022dfa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8022dfe:	609a      	str	r2, [r3, #8]
#endif
  struct mg_phy phy = {eth_read_phy, eth_write_phy};
 8022e00:	4a4d      	ldr	r2, [pc, #308]	@ (8022f38 <mg_tcpip_driver_stm32h_init+0x268>)
 8022e02:	f107 0308 	add.w	r3, r7, #8
 8022e06:	e892 0003 	ldmia.w	r2, {r0, r1}
 8022e0a:	e883 0003 	stmia.w	r3, {r0, r1}
  mg_phy_init(&phy, phy_addr, phy_conf);
 8022e0e:	7dba      	ldrb	r2, [r7, #22]
 8022e10:	7df9      	ldrb	r1, [r7, #23]
 8022e12:	f107 0308 	add.w	r3, r7, #8
 8022e16:	4618      	mov	r0, r3
 8022e18:	f7ff fd16 	bl	8022848 <mg_phy_init>
  ETH->DMACRDLAR =
 8022e1c:	4a45      	ldr	r2, [pc, #276]	@ (8022f34 <mg_tcpip_driver_stm32h_init+0x264>)
      (uint32_t) (uintptr_t) s_rxdesc;  // RX descriptors start address
 8022e1e:	4b42      	ldr	r3, [pc, #264]	@ (8022f28 <mg_tcpip_driver_stm32h_init+0x258>)
  ETH->DMACRDLAR =
 8022e20:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8022e24:	f8c2 311c 	str.w	r3, [r2, #284]	@ 0x11c
  ETH->DMACRDRLR = ETH_DESC_CNT - 1;    // ring length
 8022e28:	4b42      	ldr	r3, [pc, #264]	@ (8022f34 <mg_tcpip_driver_stm32h_init+0x264>)
 8022e2a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8022e2e:	461a      	mov	r2, r3
 8022e30:	2303      	movs	r3, #3
 8022e32:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130
  ETH->DMACRDTPR =
 8022e36:	4a3f      	ldr	r2, [pc, #252]	@ (8022f34 <mg_tcpip_driver_stm32h_init+0x264>)
      (uint32_t) (uintptr_t) &s_rxdesc[ETH_DESC_CNT -
 8022e38:	4b40      	ldr	r3, [pc, #256]	@ (8022f3c <mg_tcpip_driver_stm32h_init+0x26c>)
  ETH->DMACRDTPR =
 8022e3a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8022e3e:	f8c2 3128 	str.w	r3, [r2, #296]	@ 0x128
                                       1];  // last valid descriptor address
  ETH->DMACTDLAR =
 8022e42:	4a3c      	ldr	r2, [pc, #240]	@ (8022f34 <mg_tcpip_driver_stm32h_init+0x264>)
      (uint32_t) (uintptr_t) s_txdesc;  // TX descriptors start address
 8022e44:	4b3a      	ldr	r3, [pc, #232]	@ (8022f30 <mg_tcpip_driver_stm32h_init+0x260>)
  ETH->DMACTDLAR =
 8022e46:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8022e4a:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114
  ETH->DMACTDRLR = ETH_DESC_CNT - 1;    // ring length
 8022e4e:	4b39      	ldr	r3, [pc, #228]	@ (8022f34 <mg_tcpip_driver_stm32h_init+0x264>)
 8022e50:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8022e54:	461a      	mov	r2, r3
 8022e56:	2303      	movs	r3, #3
 8022e58:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c
  ETH->DMACTDTPR =
 8022e5c:	4a35      	ldr	r2, [pc, #212]	@ (8022f34 <mg_tcpip_driver_stm32h_init+0x264>)
      (uint32_t) (uintptr_t) s_txdesc;  // first available descriptor address
 8022e5e:	4b34      	ldr	r3, [pc, #208]	@ (8022f30 <mg_tcpip_driver_stm32h_init+0x260>)
  ETH->DMACTDTPR =
 8022e60:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8022e64:	f8c2 3120 	str.w	r3, [r2, #288]	@ 0x120
  ETH->DMACCR = 0;  // DSL = 0 (contiguous descriptor table) (reset value)
 8022e68:	4b32      	ldr	r3, [pc, #200]	@ (8022f34 <mg_tcpip_driver_stm32h_init+0x264>)
 8022e6a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8022e6e:	461a      	mov	r2, r3
 8022e70:	2300      	movs	r3, #0
 8022e72:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100
#if !MG_ENABLE_DRIVER_STM32H
  MG_SET_BITS(ETH->DMACTCR, 0x3F << 16, MG_BIT(16));
  MG_SET_BITS(ETH->DMACRCR, 0x3F << 16, MG_BIT(16));
#endif
  ETH->DMACIER = MG_BIT(6) | MG_BIT(15);  // RIE, NIE
 8022e76:	4b2f      	ldr	r3, [pc, #188]	@ (8022f34 <mg_tcpip_driver_stm32h_init+0x264>)
 8022e78:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8022e7c:	461a      	mov	r2, r3
 8022e7e:	f248 0340 	movw	r3, #32832	@ 0x8040
 8022e82:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
  ETH->MACCR = MG_BIT(0) | MG_BIT(1) | MG_BIT(13) | MG_BIT(14) |
 8022e86:	4b2b      	ldr	r3, [pc, #172]	@ (8022f34 <mg_tcpip_driver_stm32h_init+0x264>)
 8022e88:	f24e 0203 	movw	r2, #57347	@ 0xe003
 8022e8c:	601a      	str	r2, [r3, #0]
               MG_BIT(15);  // RE, TE, Duplex, Fast, Reserved
#if MG_ENABLE_DRIVER_STM32H
  ETH->MTLTQOMR |= MG_BIT(1);  // TSF
 8022e8e:	4b29      	ldr	r3, [pc, #164]	@ (8022f34 <mg_tcpip_driver_stm32h_init+0x264>)
 8022e90:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8022e94:	4a27      	ldr	r2, [pc, #156]	@ (8022f34 <mg_tcpip_driver_stm32h_init+0x264>)
 8022e96:	f043 0302 	orr.w	r3, r3, #2
 8022e9a:	f8c2 3d00 	str.w	r3, [r2, #3328]	@ 0xd00
  ETH->MTLRQOMR |= MG_BIT(5);  // RSF
 8022e9e:	4b25      	ldr	r3, [pc, #148]	@ (8022f34 <mg_tcpip_driver_stm32h_init+0x264>)
 8022ea0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8022ea4:	4a23      	ldr	r2, [pc, #140]	@ (8022f34 <mg_tcpip_driver_stm32h_init+0x264>)
 8022ea6:	f043 0320 	orr.w	r3, r3, #32
 8022eaa:	f8c2 3d30 	str.w	r3, [r2, #3376]	@ 0xd30
#else
  ETH->MTLTQOMR |= (7 << 16) | MG_BIT(3) | MG_BIT(1);  // 2KB Q0, TSF
  ETH->MTLRQOMR |= (7 << 20) | MG_BIT(5);              // 2KB Q, RSF
  MG_SET_BITS(ETH->RESERVED6[3], 3, 2);  // Enable RxQ0 (MAC_RXQ_CTRL0)
#endif
  ETH->DMACTCR |= MG_BIT(0);  // ST
 8022eae:	4b21      	ldr	r3, [pc, #132]	@ (8022f34 <mg_tcpip_driver_stm32h_init+0x264>)
 8022eb0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8022eb4:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8022eb8:	4a1e      	ldr	r2, [pc, #120]	@ (8022f34 <mg_tcpip_driver_stm32h_init+0x264>)
 8022eba:	f043 0301 	orr.w	r3, r3, #1
 8022ebe:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8022ec2:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
  ETH->DMACRCR |= MG_BIT(0);  // SR
 8022ec6:	4b1b      	ldr	r3, [pc, #108]	@ (8022f34 <mg_tcpip_driver_stm32h_init+0x264>)
 8022ec8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8022ecc:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8022ed0:	4a18      	ldr	r2, [pc, #96]	@ (8022f34 <mg_tcpip_driver_stm32h_init+0x264>)
 8022ed2:	f043 0301 	orr.w	r3, r3, #1
 8022ed6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8022eda:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

  // MAC address filtering
  ETH->MACA0HR = ((uint32_t) ifp->mac[5] << 8U) | ifp->mac[4];
 8022ede:	687b      	ldr	r3, [r7, #4]
 8022ee0:	795b      	ldrb	r3, [r3, #5]
 8022ee2:	021b      	lsls	r3, r3, #8
 8022ee4:	687a      	ldr	r2, [r7, #4]
 8022ee6:	7912      	ldrb	r2, [r2, #4]
 8022ee8:	4611      	mov	r1, r2
 8022eea:	4a12      	ldr	r2, [pc, #72]	@ (8022f34 <mg_tcpip_driver_stm32h_init+0x264>)
 8022eec:	430b      	orrs	r3, r1
 8022eee:	f8c2 3300 	str.w	r3, [r2, #768]	@ 0x300
  ETH->MACA0LR = (uint32_t) (ifp->mac[3] << 24) |
 8022ef2:	687b      	ldr	r3, [r7, #4]
 8022ef4:	78db      	ldrb	r3, [r3, #3]
 8022ef6:	061a      	lsls	r2, r3, #24
                 ((uint32_t) ifp->mac[2] << 16) |
 8022ef8:	687b      	ldr	r3, [r7, #4]
 8022efa:	789b      	ldrb	r3, [r3, #2]
 8022efc:	041b      	lsls	r3, r3, #16
  ETH->MACA0LR = (uint32_t) (ifp->mac[3] << 24) |
 8022efe:	431a      	orrs	r2, r3
                 ((uint32_t) ifp->mac[1] << 8) | ifp->mac[0];
 8022f00:	687b      	ldr	r3, [r7, #4]
 8022f02:	785b      	ldrb	r3, [r3, #1]
 8022f04:	021b      	lsls	r3, r3, #8
                 ((uint32_t) ifp->mac[2] << 16) |
 8022f06:	4313      	orrs	r3, r2
                 ((uint32_t) ifp->mac[1] << 8) | ifp->mac[0];
 8022f08:	687a      	ldr	r2, [r7, #4]
 8022f0a:	7812      	ldrb	r2, [r2, #0]
 8022f0c:	4611      	mov	r1, r2
  ETH->MACA0LR = (uint32_t) (ifp->mac[3] << 24) |
 8022f0e:	4a09      	ldr	r2, [pc, #36]	@ (8022f34 <mg_tcpip_driver_stm32h_init+0x264>)
                 ((uint32_t) ifp->mac[1] << 8) | ifp->mac[0];
 8022f10:	430b      	orrs	r3, r1
  ETH->MACA0LR = (uint32_t) (ifp->mac[3] << 24) |
 8022f12:	f8c2 3304 	str.w	r3, [r2, #772]	@ 0x304
  return true;
 8022f16:	2301      	movs	r3, #1
}
 8022f18:	4618      	mov	r0, r3
 8022f1a:	3728      	adds	r7, #40	@ 0x28
 8022f1c:	46bd      	mov	sp, r7
 8022f1e:	bd80      	pop	{r7, pc}
 8022f20:	24005444 	.word	0x24005444
 8022f24:	24002424 	.word	0x24002424
 8022f28:	240023a4 	.word	0x240023a4
 8022f2c:	24003c34 	.word	0x24003c34
 8022f30:	240023e4 	.word	0x240023e4
 8022f34:	40028000 	.word	0x40028000
 8022f38:	0802c660 	.word	0x0802c660
 8022f3c:	240023d4 	.word	0x240023d4

08022f40 <mg_tcpip_driver_stm32h_tx>:

static uint32_t s_txno;
static size_t mg_tcpip_driver_stm32h_tx(const void *buf, size_t len,
                                        struct mg_tcpip_if *ifp) {
 8022f40:	b580      	push	{r7, lr}
 8022f42:	b088      	sub	sp, #32
 8022f44:	af02      	add	r7, sp, #8
 8022f46:	60f8      	str	r0, [r7, #12]
 8022f48:	60b9      	str	r1, [r7, #8]
 8022f4a:	607a      	str	r2, [r7, #4]
  if (len > sizeof(s_txbuf[s_txno])) {
 8022f4c:	68bb      	ldr	r3, [r7, #8]
 8022f4e:	f240 6204 	movw	r2, #1540	@ 0x604
 8022f52:	4293      	cmp	r3, r2
 8022f54:	d912      	bls.n	8022f7c <mg_tcpip_driver_stm32h_tx+0x3c>
    MG_ERROR(("Frame too big, %ld", (long) len));
 8022f56:	4b5e      	ldr	r3, [pc, #376]	@ (80230d0 <mg_tcpip_driver_stm32h_tx+0x190>)
 8022f58:	681b      	ldr	r3, [r3, #0]
 8022f5a:	2b00      	cmp	r3, #0
 8022f5c:	dd0b      	ble.n	8022f76 <mg_tcpip_driver_stm32h_tx+0x36>
 8022f5e:	4b5d      	ldr	r3, [pc, #372]	@ (80230d4 <mg_tcpip_driver_stm32h_tx+0x194>)
 8022f60:	f645 526f 	movw	r2, #23919	@ 0x5d6f
 8022f64:	495c      	ldr	r1, [pc, #368]	@ (80230d8 <mg_tcpip_driver_stm32h_tx+0x198>)
 8022f66:	2001      	movs	r0, #1
 8022f68:	f7eb fc9c 	bl	800e8a4 <mg_log_prefix>
 8022f6c:	68bb      	ldr	r3, [r7, #8]
 8022f6e:	4619      	mov	r1, r3
 8022f70:	485a      	ldr	r0, [pc, #360]	@ (80230dc <mg_tcpip_driver_stm32h_tx+0x19c>)
 8022f72:	f7eb fce7 	bl	800e944 <mg_log>
    len = 0;  // Frame is too big
 8022f76:	2300      	movs	r3, #0
 8022f78:	60bb      	str	r3, [r7, #8]
 8022f7a:	e08d      	b.n	8023098 <mg_tcpip_driver_stm32h_tx+0x158>
  } else if ((s_txdesc[s_txno][3] & MG_BIT(31))) {
 8022f7c:	4b58      	ldr	r3, [pc, #352]	@ (80230e0 <mg_tcpip_driver_stm32h_tx+0x1a0>)
 8022f7e:	681b      	ldr	r3, [r3, #0]
 8022f80:	4a58      	ldr	r2, [pc, #352]	@ (80230e4 <mg_tcpip_driver_stm32h_tx+0x1a4>)
 8022f82:	011b      	lsls	r3, r3, #4
 8022f84:	4413      	add	r3, r2
 8022f86:	330c      	adds	r3, #12
 8022f88:	681b      	ldr	r3, [r3, #0]
 8022f8a:	2b00      	cmp	r3, #0
 8022f8c:	da4a      	bge.n	8023024 <mg_tcpip_driver_stm32h_tx+0xe4>
    ifp->nerr++;
 8022f8e:	687b      	ldr	r3, [r7, #4]
 8022f90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8022f94:	1c5a      	adds	r2, r3, #1
 8022f96:	687b      	ldr	r3, [r7, #4]
 8022f98:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    MG_ERROR(("No free descriptors: %u %08X %08X %08X", s_txno,
 8022f9c:	4b4c      	ldr	r3, [pc, #304]	@ (80230d0 <mg_tcpip_driver_stm32h_tx+0x190>)
 8022f9e:	681b      	ldr	r3, [r3, #0]
 8022fa0:	2b00      	cmp	r3, #0
 8022fa2:	dd1e      	ble.n	8022fe2 <mg_tcpip_driver_stm32h_tx+0xa2>
 8022fa4:	4b4b      	ldr	r3, [pc, #300]	@ (80230d4 <mg_tcpip_driver_stm32h_tx+0x194>)
 8022fa6:	f645 5273 	movw	r2, #23923	@ 0x5d73
 8022faa:	494b      	ldr	r1, [pc, #300]	@ (80230d8 <mg_tcpip_driver_stm32h_tx+0x198>)
 8022fac:	2001      	movs	r0, #1
 8022fae:	f7eb fc79 	bl	800e8a4 <mg_log_prefix>
 8022fb2:	4b4b      	ldr	r3, [pc, #300]	@ (80230e0 <mg_tcpip_driver_stm32h_tx+0x1a0>)
 8022fb4:	6819      	ldr	r1, [r3, #0]
 8022fb6:	4b4a      	ldr	r3, [pc, #296]	@ (80230e0 <mg_tcpip_driver_stm32h_tx+0x1a0>)
 8022fb8:	681b      	ldr	r3, [r3, #0]
 8022fba:	4a4a      	ldr	r2, [pc, #296]	@ (80230e4 <mg_tcpip_driver_stm32h_tx+0x1a4>)
 8022fbc:	011b      	lsls	r3, r3, #4
 8022fbe:	4413      	add	r3, r2
 8022fc0:	330c      	adds	r3, #12
 8022fc2:	681a      	ldr	r2, [r3, #0]
 8022fc4:	4b48      	ldr	r3, [pc, #288]	@ (80230e8 <mg_tcpip_driver_stm32h_tx+0x1a8>)
 8022fc6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8022fca:	f8d3 0160 	ldr.w	r0, [r3, #352]	@ 0x160
 8022fce:	4b46      	ldr	r3, [pc, #280]	@ (80230e8 <mg_tcpip_driver_stm32h_tx+0x1a8>)
 8022fd0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8022fd4:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8022fd8:	9300      	str	r3, [sp, #0]
 8022fda:	4603      	mov	r3, r0
 8022fdc:	4843      	ldr	r0, [pc, #268]	@ (80230ec <mg_tcpip_driver_stm32h_tx+0x1ac>)
 8022fde:	f7eb fcb1 	bl	800e944 <mg_log>
              s_txdesc[s_txno][3], ETH->DMACSR, ETH->DMACTCR));
    for (int i = 0; i < ETH_DESC_CNT; i++) MG_ERROR(("%08X", s_txdesc[i][3]));
 8022fe2:	2300      	movs	r3, #0
 8022fe4:	617b      	str	r3, [r7, #20]
 8022fe6:	e017      	b.n	8023018 <mg_tcpip_driver_stm32h_tx+0xd8>
 8022fe8:	4b39      	ldr	r3, [pc, #228]	@ (80230d0 <mg_tcpip_driver_stm32h_tx+0x190>)
 8022fea:	681b      	ldr	r3, [r3, #0]
 8022fec:	2b00      	cmp	r3, #0
 8022fee:	dd10      	ble.n	8023012 <mg_tcpip_driver_stm32h_tx+0xd2>
 8022ff0:	4b38      	ldr	r3, [pc, #224]	@ (80230d4 <mg_tcpip_driver_stm32h_tx+0x194>)
 8022ff2:	f645 5275 	movw	r2, #23925	@ 0x5d75
 8022ff6:	4938      	ldr	r1, [pc, #224]	@ (80230d8 <mg_tcpip_driver_stm32h_tx+0x198>)
 8022ff8:	2001      	movs	r0, #1
 8022ffa:	f7eb fc53 	bl	800e8a4 <mg_log_prefix>
 8022ffe:	4a39      	ldr	r2, [pc, #228]	@ (80230e4 <mg_tcpip_driver_stm32h_tx+0x1a4>)
 8023000:	697b      	ldr	r3, [r7, #20]
 8023002:	011b      	lsls	r3, r3, #4
 8023004:	4413      	add	r3, r2
 8023006:	330c      	adds	r3, #12
 8023008:	681b      	ldr	r3, [r3, #0]
 802300a:	4619      	mov	r1, r3
 802300c:	4838      	ldr	r0, [pc, #224]	@ (80230f0 <mg_tcpip_driver_stm32h_tx+0x1b0>)
 802300e:	f7eb fc99 	bl	800e944 <mg_log>
 8023012:	697b      	ldr	r3, [r7, #20]
 8023014:	3301      	adds	r3, #1
 8023016:	617b      	str	r3, [r7, #20]
 8023018:	697b      	ldr	r3, [r7, #20]
 802301a:	2b03      	cmp	r3, #3
 802301c:	dde4      	ble.n	8022fe8 <mg_tcpip_driver_stm32h_tx+0xa8>
    len = 0;  // All descriptors are busy, fail
 802301e:	2300      	movs	r3, #0
 8023020:	60bb      	str	r3, [r7, #8]
 8023022:	e039      	b.n	8023098 <mg_tcpip_driver_stm32h_tx+0x158>
  } else {
    memcpy(s_txbuf[s_txno], buf, len);              // Copy data
 8023024:	4b2e      	ldr	r3, [pc, #184]	@ (80230e0 <mg_tcpip_driver_stm32h_tx+0x1a0>)
 8023026:	681b      	ldr	r3, [r3, #0]
 8023028:	f240 6204 	movw	r2, #1540	@ 0x604
 802302c:	fb02 f303 	mul.w	r3, r2, r3
 8023030:	4a30      	ldr	r2, [pc, #192]	@ (80230f4 <mg_tcpip_driver_stm32h_tx+0x1b4>)
 8023032:	4413      	add	r3, r2
 8023034:	68ba      	ldr	r2, [r7, #8]
 8023036:	68f9      	ldr	r1, [r7, #12]
 8023038:	4618      	mov	r0, r3
 802303a:	f004 fc7e 	bl	802793a <memcpy>
    s_txdesc[s_txno][2] = (uint32_t) len;           // Set data len
 802303e:	4b28      	ldr	r3, [pc, #160]	@ (80230e0 <mg_tcpip_driver_stm32h_tx+0x1a0>)
 8023040:	681b      	ldr	r3, [r3, #0]
 8023042:	4a28      	ldr	r2, [pc, #160]	@ (80230e4 <mg_tcpip_driver_stm32h_tx+0x1a4>)
 8023044:	011b      	lsls	r3, r3, #4
 8023046:	4413      	add	r3, r2
 8023048:	3308      	adds	r3, #8
 802304a:	68ba      	ldr	r2, [r7, #8]
 802304c:	601a      	str	r2, [r3, #0]
    s_txdesc[s_txno][3] = MG_BIT(28) | MG_BIT(29);  // FD, LD
 802304e:	4b24      	ldr	r3, [pc, #144]	@ (80230e0 <mg_tcpip_driver_stm32h_tx+0x1a0>)
 8023050:	681b      	ldr	r3, [r3, #0]
 8023052:	4a24      	ldr	r2, [pc, #144]	@ (80230e4 <mg_tcpip_driver_stm32h_tx+0x1a4>)
 8023054:	011b      	lsls	r3, r3, #4
 8023056:	4413      	add	r3, r2
 8023058:	330c      	adds	r3, #12
 802305a:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 802305e:	601a      	str	r2, [r3, #0]
    s_txdesc[s_txno][3] |= MG_BIT(31);  // Set OWN bit - let DMA take over
 8023060:	4b1f      	ldr	r3, [pc, #124]	@ (80230e0 <mg_tcpip_driver_stm32h_tx+0x1a0>)
 8023062:	681b      	ldr	r3, [r3, #0]
 8023064:	4a1f      	ldr	r2, [pc, #124]	@ (80230e4 <mg_tcpip_driver_stm32h_tx+0x1a4>)
 8023066:	011b      	lsls	r3, r3, #4
 8023068:	4413      	add	r3, r2
 802306a:	330c      	adds	r3, #12
 802306c:	681a      	ldr	r2, [r3, #0]
 802306e:	4b1c      	ldr	r3, [pc, #112]	@ (80230e0 <mg_tcpip_driver_stm32h_tx+0x1a0>)
 8023070:	681b      	ldr	r3, [r3, #0]
 8023072:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8023076:	491b      	ldr	r1, [pc, #108]	@ (80230e4 <mg_tcpip_driver_stm32h_tx+0x1a4>)
 8023078:	011b      	lsls	r3, r3, #4
 802307a:	440b      	add	r3, r1
 802307c:	330c      	adds	r3, #12
 802307e:	601a      	str	r2, [r3, #0]
    if (++s_txno >= ETH_DESC_CNT) s_txno = 0;
 8023080:	4b17      	ldr	r3, [pc, #92]	@ (80230e0 <mg_tcpip_driver_stm32h_tx+0x1a0>)
 8023082:	681b      	ldr	r3, [r3, #0]
 8023084:	3301      	adds	r3, #1
 8023086:	4a16      	ldr	r2, [pc, #88]	@ (80230e0 <mg_tcpip_driver_stm32h_tx+0x1a0>)
 8023088:	6013      	str	r3, [r2, #0]
 802308a:	4b15      	ldr	r3, [pc, #84]	@ (80230e0 <mg_tcpip_driver_stm32h_tx+0x1a0>)
 802308c:	681b      	ldr	r3, [r3, #0]
 802308e:	2b03      	cmp	r3, #3
 8023090:	d902      	bls.n	8023098 <mg_tcpip_driver_stm32h_tx+0x158>
 8023092:	4b13      	ldr	r3, [pc, #76]	@ (80230e0 <mg_tcpip_driver_stm32h_tx+0x1a0>)
 8023094:	2200      	movs	r2, #0
 8023096:	601a      	str	r2, [r3, #0]
  }
  ETH->DMACSR |= MG_BIT(2) | MG_BIT(1);  // Clear any prior TBU, TPS
 8023098:	4b13      	ldr	r3, [pc, #76]	@ (80230e8 <mg_tcpip_driver_stm32h_tx+0x1a8>)
 802309a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 802309e:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 80230a2:	4a11      	ldr	r2, [pc, #68]	@ (80230e8 <mg_tcpip_driver_stm32h_tx+0x1a8>)
 80230a4:	f043 0306 	orr.w	r3, r3, #6
 80230a8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80230ac:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
  ETH->DMACTDTPR = (uint32_t) (uintptr_t) &s_txdesc[s_txno];  // and resume
 80230b0:	4b0b      	ldr	r3, [pc, #44]	@ (80230e0 <mg_tcpip_driver_stm32h_tx+0x1a0>)
 80230b2:	681b      	ldr	r3, [r3, #0]
 80230b4:	011b      	lsls	r3, r3, #4
 80230b6:	4a0b      	ldr	r2, [pc, #44]	@ (80230e4 <mg_tcpip_driver_stm32h_tx+0x1a4>)
 80230b8:	441a      	add	r2, r3
 80230ba:	4b0b      	ldr	r3, [pc, #44]	@ (80230e8 <mg_tcpip_driver_stm32h_tx+0x1a8>)
 80230bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80230c0:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
  return len;
 80230c4:	68bb      	ldr	r3, [r7, #8]
  (void) ifp;
}
 80230c6:	4618      	mov	r0, r3
 80230c8:	3718      	adds	r7, #24
 80230ca:	46bd      	mov	sp, r7
 80230cc:	bd80      	pop	{r7, pc}
 80230ce:	bf00      	nop
 80230d0:	24000258 	.word	0x24000258
 80230d4:	0802dbd4 	.word	0x0802dbd4
 80230d8:	08029c3c 	.word	0x08029c3c
 80230dc:	0802c668 	.word	0x0802c668
 80230e0:	24005448 	.word	0x24005448
 80230e4:	240023e4 	.word	0x240023e4
 80230e8:	40028000 	.word	0x40028000
 80230ec:	0802c67c 	.word	0x0802c67c
 80230f0:	0802c6a4 	.word	0x0802c6a4
 80230f4:	24003c34 	.word	0x24003c34

080230f8 <mg_tcpip_driver_stm32h_update_hash_table>:

static void mg_tcpip_driver_stm32h_update_hash_table(struct mg_tcpip_if *ifp) {
 80230f8:	b480      	push	{r7}
 80230fa:	b083      	sub	sp, #12
 80230fc:	af00      	add	r7, sp, #0
 80230fe:	6078      	str	r0, [r7, #4]
#if MG_ENABLE_DRIVER_MCXN
  ETH->MACPFR = MG_BIT(4);  // Pass Multicast (pass all multicast frames)
#else
  // TODO(): read database, rebuild hash table
  // add mDNS / DNS-SD multicast address
  ETH->MACA1LR = (uint32_t) mcast_addr[3] << 24 |
 8023100:	4b14      	ldr	r3, [pc, #80]	@ (8023154 <mg_tcpip_driver_stm32h_update_hash_table+0x5c>)
 8023102:	78db      	ldrb	r3, [r3, #3]
 8023104:	061a      	lsls	r2, r3, #24
                 (uint32_t) mcast_addr[2] << 16 |
 8023106:	4b13      	ldr	r3, [pc, #76]	@ (8023154 <mg_tcpip_driver_stm32h_update_hash_table+0x5c>)
 8023108:	789b      	ldrb	r3, [r3, #2]
 802310a:	041b      	lsls	r3, r3, #16
  ETH->MACA1LR = (uint32_t) mcast_addr[3] << 24 |
 802310c:	431a      	orrs	r2, r3
                 (uint32_t) mcast_addr[1] << 8 | (uint32_t) mcast_addr[0];
 802310e:	4b11      	ldr	r3, [pc, #68]	@ (8023154 <mg_tcpip_driver_stm32h_update_hash_table+0x5c>)
 8023110:	785b      	ldrb	r3, [r3, #1]
 8023112:	021b      	lsls	r3, r3, #8
                 (uint32_t) mcast_addr[2] << 16 |
 8023114:	4313      	orrs	r3, r2
                 (uint32_t) mcast_addr[1] << 8 | (uint32_t) mcast_addr[0];
 8023116:	4a0f      	ldr	r2, [pc, #60]	@ (8023154 <mg_tcpip_driver_stm32h_update_hash_table+0x5c>)
 8023118:	7812      	ldrb	r2, [r2, #0]
 802311a:	4611      	mov	r1, r2
  ETH->MACA1LR = (uint32_t) mcast_addr[3] << 24 |
 802311c:	4a0e      	ldr	r2, [pc, #56]	@ (8023158 <mg_tcpip_driver_stm32h_update_hash_table+0x60>)
                 (uint32_t) mcast_addr[1] << 8 | (uint32_t) mcast_addr[0];
 802311e:	430b      	orrs	r3, r1
  ETH->MACA1LR = (uint32_t) mcast_addr[3] << 24 |
 8023120:	f8c2 330c 	str.w	r3, [r2, #780]	@ 0x30c
  ETH->MACA1HR = (uint32_t) mcast_addr[5] << 8 | (uint32_t) mcast_addr[4];
 8023124:	4b0b      	ldr	r3, [pc, #44]	@ (8023154 <mg_tcpip_driver_stm32h_update_hash_table+0x5c>)
 8023126:	795b      	ldrb	r3, [r3, #5]
 8023128:	021b      	lsls	r3, r3, #8
 802312a:	4a0a      	ldr	r2, [pc, #40]	@ (8023154 <mg_tcpip_driver_stm32h_update_hash_table+0x5c>)
 802312c:	7912      	ldrb	r2, [r2, #4]
 802312e:	4611      	mov	r1, r2
 8023130:	4a09      	ldr	r2, [pc, #36]	@ (8023158 <mg_tcpip_driver_stm32h_update_hash_table+0x60>)
 8023132:	430b      	orrs	r3, r1
 8023134:	f8c2 3308 	str.w	r3, [r2, #776]	@ 0x308
  ETH->MACA1HR |= MG_BIT(31);  // AE
 8023138:	4b07      	ldr	r3, [pc, #28]	@ (8023158 <mg_tcpip_driver_stm32h_update_hash_table+0x60>)
 802313a:	f8d3 3308 	ldr.w	r3, [r3, #776]	@ 0x308
 802313e:	4a06      	ldr	r2, [pc, #24]	@ (8023158 <mg_tcpip_driver_stm32h_update_hash_table+0x60>)
 8023140:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8023144:	f8c2 3308 	str.w	r3, [r2, #776]	@ 0x308
#endif
(void) ifp;
}
 8023148:	bf00      	nop
 802314a:	370c      	adds	r7, #12
 802314c:	46bd      	mov	sp, r7
 802314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023152:	4770      	bx	lr
 8023154:	24000260 	.word	0x24000260
 8023158:	40028000 	.word	0x40028000

0802315c <mg_tcpip_driver_stm32h_poll>:

static bool mg_tcpip_driver_stm32h_poll(struct mg_tcpip_if *ifp, bool s1) {
 802315c:	b580      	push	{r7, lr}
 802315e:	b088      	sub	sp, #32
 8023160:	af00      	add	r7, sp, #0
 8023162:	6078      	str	r0, [r7, #4]
 8023164:	460b      	mov	r3, r1
 8023166:	70fb      	strb	r3, [r7, #3]
  if (ifp->update_mac_hash_table) {
 8023168:	687b      	ldr	r3, [r7, #4]
 802316a:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 802316e:	2b00      	cmp	r3, #0
 8023170:	d006      	beq.n	8023180 <mg_tcpip_driver_stm32h_poll+0x24>
    mg_tcpip_driver_stm32h_update_hash_table(ifp);
 8023172:	6878      	ldr	r0, [r7, #4]
 8023174:	f7ff ffc0 	bl	80230f8 <mg_tcpip_driver_stm32h_update_hash_table>
    ifp->update_mac_hash_table = false;
 8023178:	687b      	ldr	r3, [r7, #4]
 802317a:	2200      	movs	r2, #0
 802317c:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
  }
  if (!s1) return false;
 8023180:	78fb      	ldrb	r3, [r7, #3]
 8023182:	f083 0301 	eor.w	r3, r3, #1
 8023186:	b2db      	uxtb	r3, r3
 8023188:	2b00      	cmp	r3, #0
 802318a:	d001      	beq.n	8023190 <mg_tcpip_driver_stm32h_poll+0x34>
 802318c:	2300      	movs	r3, #0
 802318e:	e063      	b.n	8023258 <mg_tcpip_driver_stm32h_poll+0xfc>
  struct mg_tcpip_driver_stm32h_data *d =
 8023190:	687b      	ldr	r3, [r7, #4]
 8023192:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8023194:	61bb      	str	r3, [r7, #24]
      (struct mg_tcpip_driver_stm32h_data *) ifp->driver_data;
  uint8_t phy_addr = d == NULL ? 0 : d->phy_addr;
 8023196:	69bb      	ldr	r3, [r7, #24]
 8023198:	2b00      	cmp	r3, #0
 802319a:	d002      	beq.n	80231a2 <mg_tcpip_driver_stm32h_poll+0x46>
 802319c:	69bb      	ldr	r3, [r7, #24]
 802319e:	791b      	ldrb	r3, [r3, #4]
 80231a0:	e000      	b.n	80231a4 <mg_tcpip_driver_stm32h_poll+0x48>
 80231a2:	2300      	movs	r3, #0
 80231a4:	75fb      	strb	r3, [r7, #23]
  uint8_t speed = MG_PHY_SPEED_10M;
 80231a6:	2300      	movs	r3, #0
 80231a8:	757b      	strb	r3, [r7, #21]
  bool up = false, full_duplex = false;
 80231aa:	2300      	movs	r3, #0
 80231ac:	75bb      	strb	r3, [r7, #22]
 80231ae:	2300      	movs	r3, #0
 80231b0:	753b      	strb	r3, [r7, #20]
  struct mg_phy phy = {eth_read_phy, eth_write_phy};
 80231b2:	4a2b      	ldr	r2, [pc, #172]	@ (8023260 <mg_tcpip_driver_stm32h_poll+0x104>)
 80231b4:	f107 030c 	add.w	r3, r7, #12
 80231b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80231bc:	e883 0003 	stmia.w	r3, {r0, r1}
  up = mg_phy_up(&phy, phy_addr, &full_duplex, &speed);
 80231c0:	f107 0315 	add.w	r3, r7, #21
 80231c4:	f107 0214 	add.w	r2, r7, #20
 80231c8:	7df9      	ldrb	r1, [r7, #23]
 80231ca:	f107 000c 	add.w	r0, r7, #12
 80231ce:	f7ff fbf3 	bl	80229b8 <mg_phy_up>
 80231d2:	4603      	mov	r3, r0
 80231d4:	75bb      	strb	r3, [r7, #22]
  if ((ifp->state == MG_TCPIP_STATE_DOWN) && up) {  // link state just went up
 80231d6:	687b      	ldr	r3, [r7, #4]
 80231d8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80231dc:	2b00      	cmp	r3, #0
 80231de:	d13a      	bne.n	8023256 <mg_tcpip_driver_stm32h_poll+0xfa>
 80231e0:	7dbb      	ldrb	r3, [r7, #22]
 80231e2:	2b00      	cmp	r3, #0
 80231e4:	d037      	beq.n	8023256 <mg_tcpip_driver_stm32h_poll+0xfa>
    // tmp = reg with flags set to the most likely situation: 100M full-duplex
    // if(link is slow or half) set flags otherwise
    // reg = tmp
    uint32_t maccr = ETH->MACCR | MG_BIT(14) | MG_BIT(13);  // 100M, Full-duplex
 80231e6:	4b1f      	ldr	r3, [pc, #124]	@ (8023264 <mg_tcpip_driver_stm32h_poll+0x108>)
 80231e8:	681b      	ldr	r3, [r3, #0]
 80231ea:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 80231ee:	61fb      	str	r3, [r7, #28]
    if (speed == MG_PHY_SPEED_10M) maccr &= ~MG_BIT(14);    // 10M
 80231f0:	7d7b      	ldrb	r3, [r7, #21]
 80231f2:	2b00      	cmp	r3, #0
 80231f4:	d103      	bne.n	80231fe <mg_tcpip_driver_stm32h_poll+0xa2>
 80231f6:	69fb      	ldr	r3, [r7, #28]
 80231f8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80231fc:	61fb      	str	r3, [r7, #28]
    if (full_duplex == false) maccr &= ~MG_BIT(13);         // Half-duplex
 80231fe:	7d3b      	ldrb	r3, [r7, #20]
 8023200:	f083 0301 	eor.w	r3, r3, #1
 8023204:	b2db      	uxtb	r3, r3
 8023206:	2b00      	cmp	r3, #0
 8023208:	d003      	beq.n	8023212 <mg_tcpip_driver_stm32h_poll+0xb6>
 802320a:	69fb      	ldr	r3, [r7, #28]
 802320c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8023210:	61fb      	str	r3, [r7, #28]
    ETH->MACCR = maccr;  // IRQ handler does not fiddle with this register
 8023212:	4a14      	ldr	r2, [pc, #80]	@ (8023264 <mg_tcpip_driver_stm32h_poll+0x108>)
 8023214:	69fb      	ldr	r3, [r7, #28]
 8023216:	6013      	str	r3, [r2, #0]
    MG_DEBUG(("Link is %uM %s-duplex", maccr & MG_BIT(14) ? 100 : 10,
 8023218:	4b13      	ldr	r3, [pc, #76]	@ (8023268 <mg_tcpip_driver_stm32h_poll+0x10c>)
 802321a:	681b      	ldr	r3, [r3, #0]
 802321c:	2b02      	cmp	r3, #2
 802321e:	dd1a      	ble.n	8023256 <mg_tcpip_driver_stm32h_poll+0xfa>
 8023220:	4b12      	ldr	r3, [pc, #72]	@ (802326c <mg_tcpip_driver_stm32h_poll+0x110>)
 8023222:	f645 52a8 	movw	r2, #23976	@ 0x5da8
 8023226:	4912      	ldr	r1, [pc, #72]	@ (8023270 <mg_tcpip_driver_stm32h_poll+0x114>)
 8023228:	2003      	movs	r0, #3
 802322a:	f7eb fb3b 	bl	800e8a4 <mg_log_prefix>
 802322e:	69fb      	ldr	r3, [r7, #28]
 8023230:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8023234:	2b00      	cmp	r3, #0
 8023236:	d001      	beq.n	802323c <mg_tcpip_driver_stm32h_poll+0xe0>
 8023238:	2164      	movs	r1, #100	@ 0x64
 802323a:	e000      	b.n	802323e <mg_tcpip_driver_stm32h_poll+0xe2>
 802323c:	210a      	movs	r1, #10
 802323e:	69fb      	ldr	r3, [r7, #28]
 8023240:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8023244:	2b00      	cmp	r3, #0
 8023246:	d001      	beq.n	802324c <mg_tcpip_driver_stm32h_poll+0xf0>
 8023248:	4b0a      	ldr	r3, [pc, #40]	@ (8023274 <mg_tcpip_driver_stm32h_poll+0x118>)
 802324a:	e000      	b.n	802324e <mg_tcpip_driver_stm32h_poll+0xf2>
 802324c:	4b0a      	ldr	r3, [pc, #40]	@ (8023278 <mg_tcpip_driver_stm32h_poll+0x11c>)
 802324e:	461a      	mov	r2, r3
 8023250:	480a      	ldr	r0, [pc, #40]	@ (802327c <mg_tcpip_driver_stm32h_poll+0x120>)
 8023252:	f7eb fb77 	bl	800e944 <mg_log>
              maccr & MG_BIT(13) ? "full" : "half"));
  }
  return up;
 8023256:	7dbb      	ldrb	r3, [r7, #22]
}
 8023258:	4618      	mov	r0, r3
 802325a:	3720      	adds	r7, #32
 802325c:	46bd      	mov	sp, r7
 802325e:	bd80      	pop	{r7, pc}
 8023260:	0802c660 	.word	0x0802c660
 8023264:	40028000 	.word	0x40028000
 8023268:	24000258 	.word	0x24000258
 802326c:	0802dbf0 	.word	0x0802dbf0
 8023270:	08029c3c 	.word	0x08029c3c
 8023274:	0802c6ac 	.word	0x0802c6ac
 8023278:	0802c6b4 	.word	0x0802c6b4
 802327c:	0802c6bc 	.word	0x0802c6bc

08023280 <ETH_IRQHandler>:
#if MG_ENABLE_DRIVER_MCXN
void ETHERNET_IRQHandler(void);
void ETHERNET_IRQHandler(void) {
#else
void ETH_IRQHandler(void);
void ETH_IRQHandler(void) {
 8023280:	b580      	push	{r7, lr}
 8023282:	b082      	sub	sp, #8
 8023284:	af00      	add	r7, sp, #0
#endif
  if (ETH->DMACSR & MG_BIT(6)) {           // Frame received, loop
 8023286:	4b40      	ldr	r3, [pc, #256]	@ (8023388 <ETH_IRQHandler+0x108>)
 8023288:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 802328c:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8023290:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8023294:	2b00      	cmp	r3, #0
 8023296:	d065      	beq.n	8023364 <ETH_IRQHandler+0xe4>
    ETH->DMACSR = MG_BIT(15) | MG_BIT(6);  // Clear flag
 8023298:	4b3b      	ldr	r3, [pc, #236]	@ (8023388 <ETH_IRQHandler+0x108>)
 802329a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 802329e:	461a      	mov	r2, r3
 80232a0:	f248 0340 	movw	r3, #32832	@ 0x8040
 80232a4:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
    for (uint32_t i = 0; i < 10; i++) {  // read as they arrive but not forever
 80232a8:	2300      	movs	r3, #0
 80232aa:	607b      	str	r3, [r7, #4]
 80232ac:	e055      	b.n	802335a <ETH_IRQHandler+0xda>
      if (s_rxdesc[s_rxno][3] & MG_BIT(31)) break;  // exit when done
 80232ae:	4b37      	ldr	r3, [pc, #220]	@ (802338c <ETH_IRQHandler+0x10c>)
 80232b0:	681b      	ldr	r3, [r3, #0]
 80232b2:	4a37      	ldr	r2, [pc, #220]	@ (8023390 <ETH_IRQHandler+0x110>)
 80232b4:	011b      	lsls	r3, r3, #4
 80232b6:	4413      	add	r3, r2
 80232b8:	330c      	adds	r3, #12
 80232ba:	681b      	ldr	r3, [r3, #0]
 80232bc:	2b00      	cmp	r3, #0
 80232be:	db50      	blt.n	8023362 <ETH_IRQHandler+0xe2>
      if (((s_rxdesc[s_rxno][3] & (MG_BIT(28) | MG_BIT(29))) ==
 80232c0:	4b32      	ldr	r3, [pc, #200]	@ (802338c <ETH_IRQHandler+0x10c>)
 80232c2:	681b      	ldr	r3, [r3, #0]
 80232c4:	4a32      	ldr	r2, [pc, #200]	@ (8023390 <ETH_IRQHandler+0x110>)
 80232c6:	011b      	lsls	r3, r3, #4
 80232c8:	4413      	add	r3, r2
 80232ca:	330c      	adds	r3, #12
 80232cc:	681b      	ldr	r3, [r3, #0]
 80232ce:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80232d2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80232d6:	d128      	bne.n	802332a <ETH_IRQHandler+0xaa>
           (MG_BIT(28) | MG_BIT(29))) &&
          !(s_rxdesc[s_rxno][3] & MG_BIT(15))) {  // skip partial/errored frames
 80232d8:	4b2c      	ldr	r3, [pc, #176]	@ (802338c <ETH_IRQHandler+0x10c>)
 80232da:	681b      	ldr	r3, [r3, #0]
 80232dc:	4a2c      	ldr	r2, [pc, #176]	@ (8023390 <ETH_IRQHandler+0x110>)
 80232de:	011b      	lsls	r3, r3, #4
 80232e0:	4413      	add	r3, r2
 80232e2:	330c      	adds	r3, #12
 80232e4:	681b      	ldr	r3, [r3, #0]
 80232e6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
           (MG_BIT(28) | MG_BIT(29))) &&
 80232ea:	2b00      	cmp	r3, #0
 80232ec:	d11d      	bne.n	802332a <ETH_IRQHandler+0xaa>
        uint32_t len = s_rxdesc[s_rxno][3] & (MG_BIT(15) - 1);
 80232ee:	4b27      	ldr	r3, [pc, #156]	@ (802338c <ETH_IRQHandler+0x10c>)
 80232f0:	681b      	ldr	r3, [r3, #0]
 80232f2:	4a27      	ldr	r2, [pc, #156]	@ (8023390 <ETH_IRQHandler+0x110>)
 80232f4:	011b      	lsls	r3, r3, #4
 80232f6:	4413      	add	r3, r2
 80232f8:	330c      	adds	r3, #12
 80232fa:	681b      	ldr	r3, [r3, #0]
 80232fc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8023300:	603b      	str	r3, [r7, #0]
        // MG_DEBUG(("%lx %lu %lx %08lx", s_rxno, len, s_rxdesc[s_rxno][3],
        // ETH->DMACSR));
        mg_tcpip_qwrite(s_rxbuf[s_rxno], len > 4 ? len - 4 : len, s_ifp);
 8023302:	4b22      	ldr	r3, [pc, #136]	@ (802338c <ETH_IRQHandler+0x10c>)
 8023304:	681b      	ldr	r3, [r3, #0]
 8023306:	f240 6204 	movw	r2, #1540	@ 0x604
 802330a:	fb02 f303 	mul.w	r3, r2, r3
 802330e:	4a21      	ldr	r2, [pc, #132]	@ (8023394 <ETH_IRQHandler+0x114>)
 8023310:	1898      	adds	r0, r3, r2
 8023312:	683b      	ldr	r3, [r7, #0]
 8023314:	2b04      	cmp	r3, #4
 8023316:	d902      	bls.n	802331e <ETH_IRQHandler+0x9e>
 8023318:	683b      	ldr	r3, [r7, #0]
 802331a:	3b04      	subs	r3, #4
 802331c:	e000      	b.n	8023320 <ETH_IRQHandler+0xa0>
 802331e:	683b      	ldr	r3, [r7, #0]
 8023320:	4a1d      	ldr	r2, [pc, #116]	@ (8023398 <ETH_IRQHandler+0x118>)
 8023322:	6812      	ldr	r2, [r2, #0]
 8023324:	4619      	mov	r1, r3
 8023326:	f7ef f87b 	bl	8012420 <mg_tcpip_qwrite>
      }
      s_rxdesc[s_rxno][3] =
 802332a:	4b18      	ldr	r3, [pc, #96]	@ (802338c <ETH_IRQHandler+0x10c>)
 802332c:	681b      	ldr	r3, [r3, #0]
 802332e:	4a18      	ldr	r2, [pc, #96]	@ (8023390 <ETH_IRQHandler+0x110>)
 8023330:	011b      	lsls	r3, r3, #4
 8023332:	4413      	add	r3, r2
 8023334:	330c      	adds	r3, #12
 8023336:	f04f 4241 	mov.w	r2, #3238002688	@ 0xc1000000
 802333a:	601a      	str	r2, [r3, #0]
          MG_BIT(31) | MG_BIT(30) | MG_BIT(24);  // OWN, IOC, BUF1V
      if (++s_rxno >= ETH_DESC_CNT) s_rxno = 0;
 802333c:	4b13      	ldr	r3, [pc, #76]	@ (802338c <ETH_IRQHandler+0x10c>)
 802333e:	681b      	ldr	r3, [r3, #0]
 8023340:	3301      	adds	r3, #1
 8023342:	4a12      	ldr	r2, [pc, #72]	@ (802338c <ETH_IRQHandler+0x10c>)
 8023344:	6013      	str	r3, [r2, #0]
 8023346:	4b11      	ldr	r3, [pc, #68]	@ (802338c <ETH_IRQHandler+0x10c>)
 8023348:	681b      	ldr	r3, [r3, #0]
 802334a:	2b03      	cmp	r3, #3
 802334c:	d902      	bls.n	8023354 <ETH_IRQHandler+0xd4>
 802334e:	4b0f      	ldr	r3, [pc, #60]	@ (802338c <ETH_IRQHandler+0x10c>)
 8023350:	2200      	movs	r2, #0
 8023352:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < 10; i++) {  // read as they arrive but not forever
 8023354:	687b      	ldr	r3, [r7, #4]
 8023356:	3301      	adds	r3, #1
 8023358:	607b      	str	r3, [r7, #4]
 802335a:	687b      	ldr	r3, [r7, #4]
 802335c:	2b09      	cmp	r3, #9
 802335e:	d9a6      	bls.n	80232ae <ETH_IRQHandler+0x2e>
 8023360:	e000      	b.n	8023364 <ETH_IRQHandler+0xe4>
      if (s_rxdesc[s_rxno][3] & MG_BIT(31)) break;  // exit when done
 8023362:	bf00      	nop
    }
  }
  ETH->DMACSR =
 8023364:	4b08      	ldr	r3, [pc, #32]	@ (8023388 <ETH_IRQHandler+0x108>)
 8023366:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 802336a:	461a      	mov	r2, r3
 802336c:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8023370:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
      MG_BIT(7) | MG_BIT(8);  // Clear possible RBU RPS while processing
  ETH->DMACRDTPR =
 8023374:	4a04      	ldr	r2, [pc, #16]	@ (8023388 <ETH_IRQHandler+0x108>)
      (uint32_t) (uintptr_t) &s_rxdesc[ETH_DESC_CNT - 1];  // and resume RX
 8023376:	4b09      	ldr	r3, [pc, #36]	@ (802339c <ETH_IRQHandler+0x11c>)
  ETH->DMACRDTPR =
 8023378:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 802337c:	f8c2 3128 	str.w	r3, [r2, #296]	@ 0x128
}
 8023380:	bf00      	nop
 8023382:	3708      	adds	r7, #8
 8023384:	46bd      	mov	sp, r7
 8023386:	bd80      	pop	{r7, pc}
 8023388:	40028000 	.word	0x40028000
 802338c:	2400544c 	.word	0x2400544c
 8023390:	240023a4 	.word	0x240023a4
 8023394:	24002424 	.word	0x24002424
 8023398:	24005444 	.word	0x24005444
 802339c:	240023d4 	.word	0x240023d4

080233a0 <scmp>:
} packed_files[] = {
  {"/web_root/index.html.gz", v1, sizeof(v1), 1749138029},
  {NULL, NULL, 0, 0}
};

static int scmp(const char *a, const char *b) {
 80233a0:	b480      	push	{r7}
 80233a2:	b083      	sub	sp, #12
 80233a4:	af00      	add	r7, sp, #0
 80233a6:	6078      	str	r0, [r7, #4]
 80233a8:	6039      	str	r1, [r7, #0]
  while (*a && (*a == *b)) a++, b++;
 80233aa:	e005      	b.n	80233b8 <scmp+0x18>
 80233ac:	687b      	ldr	r3, [r7, #4]
 80233ae:	3301      	adds	r3, #1
 80233b0:	607b      	str	r3, [r7, #4]
 80233b2:	683b      	ldr	r3, [r7, #0]
 80233b4:	3301      	adds	r3, #1
 80233b6:	603b      	str	r3, [r7, #0]
 80233b8:	687b      	ldr	r3, [r7, #4]
 80233ba:	781b      	ldrb	r3, [r3, #0]
 80233bc:	2b00      	cmp	r3, #0
 80233be:	d005      	beq.n	80233cc <scmp+0x2c>
 80233c0:	687b      	ldr	r3, [r7, #4]
 80233c2:	781a      	ldrb	r2, [r3, #0]
 80233c4:	683b      	ldr	r3, [r7, #0]
 80233c6:	781b      	ldrb	r3, [r3, #0]
 80233c8:	429a      	cmp	r2, r3
 80233ca:	d0ef      	beq.n	80233ac <scmp+0xc>
  return *(const unsigned char *) a - *(const unsigned char *) b;
 80233cc:	687b      	ldr	r3, [r7, #4]
 80233ce:	781b      	ldrb	r3, [r3, #0]
 80233d0:	461a      	mov	r2, r3
 80233d2:	683b      	ldr	r3, [r7, #0]
 80233d4:	781b      	ldrb	r3, [r3, #0]
 80233d6:	1ad3      	subs	r3, r2, r3
}
 80233d8:	4618      	mov	r0, r3
 80233da:	370c      	adds	r7, #12
 80233dc:	46bd      	mov	sp, r7
 80233de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80233e2:	4770      	bx	lr

080233e4 <mg_unlist>:
const char *mg_unlist(size_t no) {
 80233e4:	b480      	push	{r7}
 80233e6:	b083      	sub	sp, #12
 80233e8:	af00      	add	r7, sp, #0
 80233ea:	6078      	str	r0, [r7, #4]
  return packed_files[no].name;
 80233ec:	4906      	ldr	r1, [pc, #24]	@ (8023408 <mg_unlist+0x24>)
 80233ee:	687a      	ldr	r2, [r7, #4]
 80233f0:	4613      	mov	r3, r2
 80233f2:	005b      	lsls	r3, r3, #1
 80233f4:	4413      	add	r3, r2
 80233f6:	00db      	lsls	r3, r3, #3
 80233f8:	440b      	add	r3, r1
 80233fa:	681b      	ldr	r3, [r3, #0]
}
 80233fc:	4618      	mov	r0, r3
 80233fe:	370c      	adds	r7, #12
 8023400:	46bd      	mov	sp, r7
 8023402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023406:	4770      	bx	lr
 8023408:	0803acf8 	.word	0x0803acf8

0802340c <mg_unpack>:
const char *mg_unpack(const char *name, size_t *size, time_t *mtime) {
 802340c:	b580      	push	{r7, lr}
 802340e:	b086      	sub	sp, #24
 8023410:	af00      	add	r7, sp, #0
 8023412:	60f8      	str	r0, [r7, #12]
 8023414:	60b9      	str	r1, [r7, #8]
 8023416:	607a      	str	r2, [r7, #4]
  const struct packed_file *p;
  for (p = packed_files; p->name != NULL; p++) {
 8023418:	4b16      	ldr	r3, [pc, #88]	@ (8023474 <mg_unpack+0x68>)
 802341a:	617b      	str	r3, [r7, #20]
 802341c:	e020      	b.n	8023460 <mg_unpack+0x54>
    if (scmp(p->name, name) != 0) continue;
 802341e:	697b      	ldr	r3, [r7, #20]
 8023420:	681b      	ldr	r3, [r3, #0]
 8023422:	68f9      	ldr	r1, [r7, #12]
 8023424:	4618      	mov	r0, r3
 8023426:	f7ff ffbb 	bl	80233a0 <scmp>
 802342a:	4603      	mov	r3, r0
 802342c:	2b00      	cmp	r3, #0
 802342e:	d113      	bne.n	8023458 <mg_unpack+0x4c>
    if (size != NULL) *size = p->size - 1;
 8023430:	68bb      	ldr	r3, [r7, #8]
 8023432:	2b00      	cmp	r3, #0
 8023434:	d004      	beq.n	8023440 <mg_unpack+0x34>
 8023436:	697b      	ldr	r3, [r7, #20]
 8023438:	689b      	ldr	r3, [r3, #8]
 802343a:	1e5a      	subs	r2, r3, #1
 802343c:	68bb      	ldr	r3, [r7, #8]
 802343e:	601a      	str	r2, [r3, #0]
    if (mtime != NULL) *mtime = p->mtime;
 8023440:	687b      	ldr	r3, [r7, #4]
 8023442:	2b00      	cmp	r3, #0
 8023444:	d005      	beq.n	8023452 <mg_unpack+0x46>
 8023446:	697b      	ldr	r3, [r7, #20]
 8023448:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 802344c:	6879      	ldr	r1, [r7, #4]
 802344e:	e9c1 2300 	strd	r2, r3, [r1]
    return (const char *) p->data;
 8023452:	697b      	ldr	r3, [r7, #20]
 8023454:	685b      	ldr	r3, [r3, #4]
 8023456:	e008      	b.n	802346a <mg_unpack+0x5e>
    if (scmp(p->name, name) != 0) continue;
 8023458:	bf00      	nop
  for (p = packed_files; p->name != NULL; p++) {
 802345a:	697b      	ldr	r3, [r7, #20]
 802345c:	3318      	adds	r3, #24
 802345e:	617b      	str	r3, [r7, #20]
 8023460:	697b      	ldr	r3, [r7, #20]
 8023462:	681b      	ldr	r3, [r3, #0]
 8023464:	2b00      	cmp	r3, #0
 8023466:	d1da      	bne.n	802341e <mg_unpack+0x12>
  }
  return NULL;
 8023468:	2300      	movs	r3, #0
}
 802346a:	4618      	mov	r0, r3
 802346c:	3718      	adds	r7, #24
 802346e:	46bd      	mov	sp, r7
 8023470:	bd80      	pop	{r7, pc}
 8023472:	bf00      	nop
 8023474:	0803acf8 	.word	0x0803acf8

08023478 <glue_modbus_read_reg>:

// Read/write registers via Modbus API
// Return true if the register is read/written successfully, false otherwise
// The address is a 16-bit unsigned integer, the value is also a 16-bit unsigned integer
// The address is in the range [s_modbus_base, s_modbus_base + count), where count is the number of registers
bool glue_modbus_read_reg(uint16_t address, uint16_t *value) {
 8023478:	b580      	push	{r7, lr}
 802347a:	b084      	sub	sp, #16
 802347c:	af00      	add	r7, sp, #0
 802347e:	4603      	mov	r3, r0
 8023480:	6039      	str	r1, [r7, #0]
 8023482:	80fb      	strh	r3, [r7, #6]
  bool success = false;
 8023484:	2300      	movs	r3, #0
 8023486:	73fb      	strb	r3, [r7, #15]
  size_t count = sizeof(s_modbus_regs) / sizeof(s_modbus_regs[0]);
 8023488:	23e1      	movs	r3, #225	@ 0xe1
 802348a:	60bb      	str	r3, [r7, #8]
  if (address >= s_modbus_base && address < s_modbus_base + count) {
 802348c:	4b19      	ldr	r3, [pc, #100]	@ (80234f4 <glue_modbus_read_reg+0x7c>)
 802348e:	881b      	ldrh	r3, [r3, #0]
 8023490:	88fa      	ldrh	r2, [r7, #6]
 8023492:	429a      	cmp	r2, r3
 8023494:	d312      	bcc.n	80234bc <glue_modbus_read_reg+0x44>
 8023496:	88fa      	ldrh	r2, [r7, #6]
 8023498:	4b16      	ldr	r3, [pc, #88]	@ (80234f4 <glue_modbus_read_reg+0x7c>)
 802349a:	881b      	ldrh	r3, [r3, #0]
 802349c:	4619      	mov	r1, r3
 802349e:	68bb      	ldr	r3, [r7, #8]
 80234a0:	440b      	add	r3, r1
 80234a2:	429a      	cmp	r2, r3
 80234a4:	d20a      	bcs.n	80234bc <glue_modbus_read_reg+0x44>
    *value = s_modbus_regs[address - s_modbus_base];
 80234a6:	88fb      	ldrh	r3, [r7, #6]
 80234a8:	4a12      	ldr	r2, [pc, #72]	@ (80234f4 <glue_modbus_read_reg+0x7c>)
 80234aa:	8812      	ldrh	r2, [r2, #0]
 80234ac:	1a9b      	subs	r3, r3, r2
 80234ae:	4a12      	ldr	r2, [pc, #72]	@ (80234f8 <glue_modbus_read_reg+0x80>)
 80234b0:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80234b4:	683b      	ldr	r3, [r7, #0]
 80234b6:	801a      	strh	r2, [r3, #0]
    success = true;
 80234b8:	2301      	movs	r3, #1
 80234ba:	73fb      	strb	r3, [r7, #15]
  }
  MG_INFO(("%s: %hu = %hu", success ? "Read OK" : "Read FAIL", address, *value));
 80234bc:	4b0f      	ldr	r3, [pc, #60]	@ (80234fc <glue_modbus_read_reg+0x84>)
 80234be:	681b      	ldr	r3, [r3, #0]
 80234c0:	2b01      	cmp	r3, #1
 80234c2:	dd11      	ble.n	80234e8 <glue_modbus_read_reg+0x70>
 80234c4:	4b0e      	ldr	r3, [pc, #56]	@ (8023500 <glue_modbus_read_reg+0x88>)
 80234c6:	221a      	movs	r2, #26
 80234c8:	490e      	ldr	r1, [pc, #56]	@ (8023504 <glue_modbus_read_reg+0x8c>)
 80234ca:	2002      	movs	r0, #2
 80234cc:	f7eb f9ea 	bl	800e8a4 <mg_log_prefix>
 80234d0:	7bfb      	ldrb	r3, [r7, #15]
 80234d2:	2b00      	cmp	r3, #0
 80234d4:	d001      	beq.n	80234da <glue_modbus_read_reg+0x62>
 80234d6:	490c      	ldr	r1, [pc, #48]	@ (8023508 <glue_modbus_read_reg+0x90>)
 80234d8:	e000      	b.n	80234dc <glue_modbus_read_reg+0x64>
 80234da:	490c      	ldr	r1, [pc, #48]	@ (802350c <glue_modbus_read_reg+0x94>)
 80234dc:	88fa      	ldrh	r2, [r7, #6]
 80234de:	683b      	ldr	r3, [r7, #0]
 80234e0:	881b      	ldrh	r3, [r3, #0]
 80234e2:	480b      	ldr	r0, [pc, #44]	@ (8023510 <glue_modbus_read_reg+0x98>)
 80234e4:	f7eb fa2e 	bl	800e944 <mg_log>
  return success;
 80234e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80234ea:	4618      	mov	r0, r3
 80234ec:	3710      	adds	r7, #16
 80234ee:	46bd      	mov	sp, r7
 80234f0:	bd80      	pop	{r7, pc}
 80234f2:	bf00      	nop
 80234f4:	240002b0 	.word	0x240002b0
 80234f8:	240054e4 	.word	0x240054e4
 80234fc:	24000258 	.word	0x24000258
 8023500:	0803ad28 	.word	0x0803ad28
 8023504:	0802c6ec 	.word	0x0802c6ec
 8023508:	0802c708 	.word	0x0802c708
 802350c:	0802c710 	.word	0x0802c710
 8023510:	0802c71c 	.word	0x0802c71c

08023514 <glue_modbus_write_reg>:

void ws_voltage(struct mg_connection *c) {
  mg_ws_printf(c, WEBSOCKET_OP_TEXT, "{%m: %u}", MG_ESC("voltage"), glue_get_local_reg(1010));
}

bool glue_modbus_write_reg(uint16_t address, uint16_t value) {
 8023514:	b580      	push	{r7, lr}
 8023516:	b084      	sub	sp, #16
 8023518:	af00      	add	r7, sp, #0
 802351a:	4603      	mov	r3, r0
 802351c:	460a      	mov	r2, r1
 802351e:	80fb      	strh	r3, [r7, #6]
 8023520:	4613      	mov	r3, r2
 8023522:	80bb      	strh	r3, [r7, #4]
  bool success = false;
 8023524:	2300      	movs	r3, #0
 8023526:	73fb      	strb	r3, [r7, #15]
  size_t count = sizeof(s_modbus_regs) / sizeof(s_modbus_regs[0]);
 8023528:	23e1      	movs	r3, #225	@ 0xe1
 802352a:	60bb      	str	r3, [r7, #8]
  if (address >= s_modbus_base && address < s_modbus_base + count) {
 802352c:	4b18      	ldr	r3, [pc, #96]	@ (8023590 <glue_modbus_write_reg+0x7c>)
 802352e:	881b      	ldrh	r3, [r3, #0]
 8023530:	88fa      	ldrh	r2, [r7, #6]
 8023532:	429a      	cmp	r2, r3
 8023534:	d311      	bcc.n	802355a <glue_modbus_write_reg+0x46>
 8023536:	88fa      	ldrh	r2, [r7, #6]
 8023538:	4b15      	ldr	r3, [pc, #84]	@ (8023590 <glue_modbus_write_reg+0x7c>)
 802353a:	881b      	ldrh	r3, [r3, #0]
 802353c:	4619      	mov	r1, r3
 802353e:	68bb      	ldr	r3, [r7, #8]
 8023540:	440b      	add	r3, r1
 8023542:	429a      	cmp	r2, r3
 8023544:	d209      	bcs.n	802355a <glue_modbus_write_reg+0x46>
    s_modbus_regs[address - s_modbus_base] = value;
 8023546:	88fb      	ldrh	r3, [r7, #6]
 8023548:	4a11      	ldr	r2, [pc, #68]	@ (8023590 <glue_modbus_write_reg+0x7c>)
 802354a:	8812      	ldrh	r2, [r2, #0]
 802354c:	1a9b      	subs	r3, r3, r2
 802354e:	4911      	ldr	r1, [pc, #68]	@ (8023594 <glue_modbus_write_reg+0x80>)
 8023550:	88ba      	ldrh	r2, [r7, #4]
 8023552:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    success = true;
 8023556:	2301      	movs	r3, #1
 8023558:	73fb      	strb	r3, [r7, #15]
  }
  MG_INFO(("%s: %hu = %hu", success ? "Write OK" : "Write FAIL", address, value));
 802355a:	4b0f      	ldr	r3, [pc, #60]	@ (8023598 <glue_modbus_write_reg+0x84>)
 802355c:	681b      	ldr	r3, [r3, #0]
 802355e:	2b01      	cmp	r3, #1
 8023560:	dd10      	ble.n	8023584 <glue_modbus_write_reg+0x70>
 8023562:	4b0e      	ldr	r3, [pc, #56]	@ (802359c <glue_modbus_write_reg+0x88>)
 8023564:	2229      	movs	r2, #41	@ 0x29
 8023566:	490e      	ldr	r1, [pc, #56]	@ (80235a0 <glue_modbus_write_reg+0x8c>)
 8023568:	2002      	movs	r0, #2
 802356a:	f7eb f99b 	bl	800e8a4 <mg_log_prefix>
 802356e:	7bfb      	ldrb	r3, [r7, #15]
 8023570:	2b00      	cmp	r3, #0
 8023572:	d001      	beq.n	8023578 <glue_modbus_write_reg+0x64>
 8023574:	490b      	ldr	r1, [pc, #44]	@ (80235a4 <glue_modbus_write_reg+0x90>)
 8023576:	e000      	b.n	802357a <glue_modbus_write_reg+0x66>
 8023578:	490b      	ldr	r1, [pc, #44]	@ (80235a8 <glue_modbus_write_reg+0x94>)
 802357a:	88fa      	ldrh	r2, [r7, #6]
 802357c:	88bb      	ldrh	r3, [r7, #4]
 802357e:	480b      	ldr	r0, [pc, #44]	@ (80235ac <glue_modbus_write_reg+0x98>)
 8023580:	f7eb f9e0 	bl	800e944 <mg_log>
  return success;
 8023584:	7bfb      	ldrb	r3, [r7, #15]

}
 8023586:	4618      	mov	r0, r3
 8023588:	3710      	adds	r7, #16
 802358a:	46bd      	mov	sp, r7
 802358c:	bd80      	pop	{r7, pc}
 802358e:	bf00      	nop
 8023590:	240002b0 	.word	0x240002b0
 8023594:	240054e4 	.word	0x240054e4
 8023598:	24000258 	.word	0x24000258
 802359c:	0803ad40 	.word	0x0803ad40
 80235a0:	0802c6ec 	.word	0x0802c6ec
 80235a4:	0802c740 	.word	0x0802c740
 80235a8:	0802c74c 	.word	0x0802c74c
 80235ac:	0802c71c 	.word	0x0802c71c

080235b0 <glue_get_local_reg>:

uint16_t glue_get_local_reg(uint16_t address) {
 80235b0:	b480      	push	{r7}
 80235b2:	b085      	sub	sp, #20
 80235b4:	af00      	add	r7, sp, #0
 80235b6:	4603      	mov	r3, r0
 80235b8:	80fb      	strh	r3, [r7, #6]
  size_t count = sizeof(s_modbus_regs) / sizeof(s_modbus_regs[0]);
 80235ba:	23e1      	movs	r3, #225	@ 0xe1
 80235bc:	60fb      	str	r3, [r7, #12]
  if (address >= s_modbus_base && address < s_modbus_base + count) {
 80235be:	4b0e      	ldr	r3, [pc, #56]	@ (80235f8 <glue_get_local_reg+0x48>)
 80235c0:	881b      	ldrh	r3, [r3, #0]
 80235c2:	88fa      	ldrh	r2, [r7, #6]
 80235c4:	429a      	cmp	r2, r3
 80235c6:	d30f      	bcc.n	80235e8 <glue_get_local_reg+0x38>
 80235c8:	88fa      	ldrh	r2, [r7, #6]
 80235ca:	4b0b      	ldr	r3, [pc, #44]	@ (80235f8 <glue_get_local_reg+0x48>)
 80235cc:	881b      	ldrh	r3, [r3, #0]
 80235ce:	4619      	mov	r1, r3
 80235d0:	68fb      	ldr	r3, [r7, #12]
 80235d2:	440b      	add	r3, r1
 80235d4:	429a      	cmp	r2, r3
 80235d6:	d207      	bcs.n	80235e8 <glue_get_local_reg+0x38>
    return s_modbus_regs[address - s_modbus_base];
 80235d8:	88fb      	ldrh	r3, [r7, #6]
 80235da:	4a07      	ldr	r2, [pc, #28]	@ (80235f8 <glue_get_local_reg+0x48>)
 80235dc:	8812      	ldrh	r2, [r2, #0]
 80235de:	1a9b      	subs	r3, r3, r2
 80235e0:	4a06      	ldr	r2, [pc, #24]	@ (80235fc <glue_get_local_reg+0x4c>)
 80235e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80235e6:	e000      	b.n	80235ea <glue_get_local_reg+0x3a>
  }
  return 0;
 80235e8:	2300      	movs	r3, #0
}
 80235ea:	4618      	mov	r0, r3
 80235ec:	3714      	adds	r7, #20
 80235ee:	46bd      	mov	sp, r7
 80235f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80235f4:	4770      	bx	lr
 80235f6:	bf00      	nop
 80235f8:	240002b0 	.word	0x240002b0
 80235fc:	240054e4 	.word	0x240054e4

08023600 <glue_authenticate>:
  return true;
}
// Authenticate user/password. Return access level for the authenticated user:
//   0 - authentication error
//   1,2,3... - authentication success. Higher levels are more privileged than lower
int glue_authenticate(const char *user, const char *pass) {
 8023600:	b580      	push	{r7, lr}
 8023602:	b084      	sub	sp, #16
 8023604:	af00      	add	r7, sp, #0
 8023606:	6078      	str	r0, [r7, #4]
 8023608:	6039      	str	r1, [r7, #0]
  int level = 0; // Authentication failure
 802360a:	2300      	movs	r3, #0
 802360c:	60fb      	str	r3, [r7, #12]
  if (strcmp(user, "admin") == 0 && strcmp(pass, "admin") == 0) {
 802360e:	4913      	ldr	r1, [pc, #76]	@ (802365c <glue_authenticate+0x5c>)
 8023610:	6878      	ldr	r0, [r7, #4]
 8023612:	f7dc fe7d 	bl	8000310 <strcmp>
 8023616:	4603      	mov	r3, r0
 8023618:	2b00      	cmp	r3, #0
 802361a:	d109      	bne.n	8023630 <glue_authenticate+0x30>
 802361c:	490f      	ldr	r1, [pc, #60]	@ (802365c <glue_authenticate+0x5c>)
 802361e:	6838      	ldr	r0, [r7, #0]
 8023620:	f7dc fe76 	bl	8000310 <strcmp>
 8023624:	4603      	mov	r3, r0
 8023626:	2b00      	cmp	r3, #0
 8023628:	d102      	bne.n	8023630 <glue_authenticate+0x30>
    level = 7;  // Administrator
 802362a:	2307      	movs	r3, #7
 802362c:	60fb      	str	r3, [r7, #12]
 802362e:	e00f      	b.n	8023650 <glue_authenticate+0x50>
  } else if (strcmp(user, "user") == 0 && strcmp(pass, "user") == 0) {
 8023630:	490b      	ldr	r1, [pc, #44]	@ (8023660 <glue_authenticate+0x60>)
 8023632:	6878      	ldr	r0, [r7, #4]
 8023634:	f7dc fe6c 	bl	8000310 <strcmp>
 8023638:	4603      	mov	r3, r0
 802363a:	2b00      	cmp	r3, #0
 802363c:	d108      	bne.n	8023650 <glue_authenticate+0x50>
 802363e:	4908      	ldr	r1, [pc, #32]	@ (8023660 <glue_authenticate+0x60>)
 8023640:	6838      	ldr	r0, [r7, #0]
 8023642:	f7dc fe65 	bl	8000310 <strcmp>
 8023646:	4603      	mov	r3, r0
 8023648:	2b00      	cmp	r3, #0
 802364a:	d101      	bne.n	8023650 <glue_authenticate+0x50>
    level = 3;  // Ordinary dude
 802364c:	2303      	movs	r3, #3
 802364e:	60fb      	str	r3, [r7, #12]
  }
  return level;
 8023650:	68fb      	ldr	r3, [r7, #12]
}
 8023652:	4618      	mov	r0, r3
 8023654:	3710      	adds	r7, #16
 8023656:	46bd      	mov	sp, r7
 8023658:	bd80      	pop	{r7, pc}
 802365a:	bf00      	nop
 802365c:	0802c758 	.word	0x0802c758
 8023660:	0802c760 	.word	0x0802c760

08023664 <glue_check_reboot>:

static uint64_t s_action_timeout_reboot;  // Time when reboot ends
bool glue_check_reboot(void) {
 8023664:	b580      	push	{r7, lr}
 8023666:	af00      	add	r7, sp, #0
  return s_action_timeout_reboot > mg_now(); // Return true if reboot is in progress
 8023668:	f7f3 f8f6 	bl	8016858 <mg_now>
 802366c:	4b05      	ldr	r3, [pc, #20]	@ (8023684 <glue_check_reboot+0x20>)
 802366e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023672:	4290      	cmp	r0, r2
 8023674:	eb71 0303 	sbcs.w	r3, r1, r3
 8023678:	bf34      	ite	cc
 802367a:	2301      	movcc	r3, #1
 802367c:	2300      	movcs	r3, #0
 802367e:	b2db      	uxtb	r3, r3
}
 8023680:	4618      	mov	r0, r3
 8023682:	bd80      	pop	{r7, pc}
 8023684:	240056a8 	.word	0x240056a8

08023688 <glue_start_reboot>:
void glue_start_reboot(struct mg_str params) {
 8023688:	b5b0      	push	{r4, r5, r7, lr}
 802368a:	b082      	sub	sp, #8
 802368c:	af00      	add	r7, sp, #0
 802368e:	463b      	mov	r3, r7
 8023690:	e883 0003 	stmia.w	r3, {r0, r1}
  MG_DEBUG(("Passed parameters: [%.*s]", params.len, params.buf));
 8023694:	4b0f      	ldr	r3, [pc, #60]	@ (80236d4 <glue_start_reboot+0x4c>)
 8023696:	681b      	ldr	r3, [r3, #0]
 8023698:	2b02      	cmp	r3, #2
 802369a:	dd0b      	ble.n	80236b4 <glue_start_reboot+0x2c>
 802369c:	4b0e      	ldr	r3, [pc, #56]	@ (80236d8 <glue_start_reboot+0x50>)
 802369e:	224e      	movs	r2, #78	@ 0x4e
 80236a0:	490e      	ldr	r1, [pc, #56]	@ (80236dc <glue_start_reboot+0x54>)
 80236a2:	2003      	movs	r0, #3
 80236a4:	f7eb f8fe 	bl	800e8a4 <mg_log_prefix>
 80236a8:	687b      	ldr	r3, [r7, #4]
 80236aa:	683a      	ldr	r2, [r7, #0]
 80236ac:	4619      	mov	r1, r3
 80236ae:	480c      	ldr	r0, [pc, #48]	@ (80236e0 <glue_start_reboot+0x58>)
 80236b0:	f7eb f948 	bl	800e944 <mg_log>
  s_action_timeout_reboot = mg_now() + 1000; // Start reboot, finish after 1 second
 80236b4:	f7f3 f8d0 	bl	8016858 <mg_now>
 80236b8:	4602      	mov	r2, r0
 80236ba:	460b      	mov	r3, r1
 80236bc:	f512 747a 	adds.w	r4, r2, #1000	@ 0x3e8
 80236c0:	f143 0500 	adc.w	r5, r3, #0
 80236c4:	4b07      	ldr	r3, [pc, #28]	@ (80236e4 <glue_start_reboot+0x5c>)
 80236c6:	e9c3 4500 	strd	r4, r5, [r3]
}
 80236ca:	bf00      	nop
 80236cc:	3708      	adds	r7, #8
 80236ce:	46bd      	mov	sp, r7
 80236d0:	bdb0      	pop	{r4, r5, r7, pc}
 80236d2:	bf00      	nop
 80236d4:	24000258 	.word	0x24000258
 80236d8:	0803ad58 	.word	0x0803ad58
 80236dc:	0802c6ec 	.word	0x0802c6ec
 80236e0:	0802c768 	.word	0x0802c768
 80236e4:	240056a8 	.word	0x240056a8

080236e8 <glue_check_reformat>:

static uint64_t s_action_timeout_reformat;  // Time when reformat ends
bool glue_check_reformat(void) {
 80236e8:	b580      	push	{r7, lr}
 80236ea:	af00      	add	r7, sp, #0
  return s_action_timeout_reformat > mg_now(); // Return true if reformat is in progress
 80236ec:	f7f3 f8b4 	bl	8016858 <mg_now>
 80236f0:	4b05      	ldr	r3, [pc, #20]	@ (8023708 <glue_check_reformat+0x20>)
 80236f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80236f6:	4290      	cmp	r0, r2
 80236f8:	eb71 0303 	sbcs.w	r3, r1, r3
 80236fc:	bf34      	ite	cc
 80236fe:	2301      	movcc	r3, #1
 8023700:	2300      	movcs	r3, #0
 8023702:	b2db      	uxtb	r3, r3
}
 8023704:	4618      	mov	r0, r3
 8023706:	bd80      	pop	{r7, pc}
 8023708:	240056b0 	.word	0x240056b0

0802370c <glue_start_reformat>:
void glue_start_reformat(struct mg_str params) {
 802370c:	b5b0      	push	{r4, r5, r7, lr}
 802370e:	b082      	sub	sp, #8
 8023710:	af00      	add	r7, sp, #0
 8023712:	463b      	mov	r3, r7
 8023714:	e883 0003 	stmia.w	r3, {r0, r1}
  MG_DEBUG(("Passed parameters: [%.*s]", params.len, params.buf));
 8023718:	4b0f      	ldr	r3, [pc, #60]	@ (8023758 <glue_start_reformat+0x4c>)
 802371a:	681b      	ldr	r3, [r3, #0]
 802371c:	2b02      	cmp	r3, #2
 802371e:	dd0b      	ble.n	8023738 <glue_start_reformat+0x2c>
 8023720:	4b0e      	ldr	r3, [pc, #56]	@ (802375c <glue_start_reformat+0x50>)
 8023722:	2257      	movs	r2, #87	@ 0x57
 8023724:	490e      	ldr	r1, [pc, #56]	@ (8023760 <glue_start_reformat+0x54>)
 8023726:	2003      	movs	r0, #3
 8023728:	f7eb f8bc 	bl	800e8a4 <mg_log_prefix>
 802372c:	687b      	ldr	r3, [r7, #4]
 802372e:	683a      	ldr	r2, [r7, #0]
 8023730:	4619      	mov	r1, r3
 8023732:	480c      	ldr	r0, [pc, #48]	@ (8023764 <glue_start_reformat+0x58>)
 8023734:	f7eb f906 	bl	800e944 <mg_log>
  s_action_timeout_reformat = mg_now() + 1000; // Start reformat, finish after 1 second
 8023738:	f7f3 f88e 	bl	8016858 <mg_now>
 802373c:	4602      	mov	r2, r0
 802373e:	460b      	mov	r3, r1
 8023740:	f512 747a 	adds.w	r4, r2, #1000	@ 0x3e8
 8023744:	f143 0500 	adc.w	r5, r3, #0
 8023748:	4b07      	ldr	r3, [pc, #28]	@ (8023768 <glue_start_reformat+0x5c>)
 802374a:	e9c3 4500 	strd	r4, r5, [r3]
}
 802374e:	bf00      	nop
 8023750:	3708      	adds	r7, #8
 8023752:	46bd      	mov	sp, r7
 8023754:	bdb0      	pop	{r4, r5, r7, pc}
 8023756:	bf00      	nop
 8023758:	24000258 	.word	0x24000258
 802375c:	0803ad6c 	.word	0x0803ad6c
 8023760:	0802c6ec 	.word	0x0802c6ec
 8023764:	0802c768 	.word	0x0802c768
 8023768:	240056b0 	.word	0x240056b0

0802376c <glue_ota_begin_firmware_update>:

void *glue_ota_begin_firmware_update(char *file_name, size_t total_size) {
 802376c:	b580      	push	{r7, lr}
 802376e:	b084      	sub	sp, #16
 8023770:	af00      	add	r7, sp, #0
 8023772:	6078      	str	r0, [r7, #4]
 8023774:	6039      	str	r1, [r7, #0]
  bool ok = mg_ota_begin(total_size);
 8023776:	6838      	ldr	r0, [r7, #0]
 8023778:	f7ef fbb8 	bl	8012eec <mg_ota_begin>
 802377c:	4603      	mov	r3, r0
 802377e:	73fb      	strb	r3, [r7, #15]
  MG_DEBUG(("%s size %lu, ok: %d", file_name, total_size, ok));
 8023780:	4b0c      	ldr	r3, [pc, #48]	@ (80237b4 <glue_ota_begin_firmware_update+0x48>)
 8023782:	681b      	ldr	r3, [r3, #0]
 8023784:	2b02      	cmp	r3, #2
 8023786:	dd0b      	ble.n	80237a0 <glue_ota_begin_firmware_update+0x34>
 8023788:	4b0b      	ldr	r3, [pc, #44]	@ (80237b8 <glue_ota_begin_firmware_update+0x4c>)
 802378a:	225d      	movs	r2, #93	@ 0x5d
 802378c:	490b      	ldr	r1, [pc, #44]	@ (80237bc <glue_ota_begin_firmware_update+0x50>)
 802378e:	2003      	movs	r0, #3
 8023790:	f7eb f888 	bl	800e8a4 <mg_log_prefix>
 8023794:	7bfb      	ldrb	r3, [r7, #15]
 8023796:	683a      	ldr	r2, [r7, #0]
 8023798:	6879      	ldr	r1, [r7, #4]
 802379a:	4809      	ldr	r0, [pc, #36]	@ (80237c0 <glue_ota_begin_firmware_update+0x54>)
 802379c:	f7eb f8d2 	bl	800e944 <mg_log>
  return ok ? (void *) 1 : NULL;
 80237a0:	7bfb      	ldrb	r3, [r7, #15]
 80237a2:	2b00      	cmp	r3, #0
 80237a4:	d001      	beq.n	80237aa <glue_ota_begin_firmware_update+0x3e>
 80237a6:	2301      	movs	r3, #1
 80237a8:	e000      	b.n	80237ac <glue_ota_begin_firmware_update+0x40>
 80237aa:	2300      	movs	r3, #0
}
 80237ac:	4618      	mov	r0, r3
 80237ae:	3710      	adds	r7, #16
 80237b0:	46bd      	mov	sp, r7
 80237b2:	bd80      	pop	{r7, pc}
 80237b4:	24000258 	.word	0x24000258
 80237b8:	0803ad80 	.word	0x0803ad80
 80237bc:	0802c6ec 	.word	0x0802c6ec
 80237c0:	0802c784 	.word	0x0802c784

080237c4 <glue_ota_end_firmware_update>:
bool glue_ota_end_firmware_update(void *context) {
 80237c4:	b580      	push	{r7, lr}
 80237c6:	b086      	sub	sp, #24
 80237c8:	af04      	add	r7, sp, #16
 80237ca:	6078      	str	r0, [r7, #4]
  mg_timer_add(&g_mgr, 500, 0, (void (*)(void *)) (void *) mg_ota_end, context);
 80237cc:	687b      	ldr	r3, [r7, #4]
 80237ce:	9302      	str	r3, [sp, #8]
 80237d0:	4b07      	ldr	r3, [pc, #28]	@ (80237f0 <glue_ota_end_firmware_update+0x2c>)
 80237d2:	9301      	str	r3, [sp, #4]
 80237d4:	2300      	movs	r3, #0
 80237d6:	9300      	str	r3, [sp, #0]
 80237d8:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80237dc:	f04f 0300 	mov.w	r3, #0
 80237e0:	4804      	ldr	r0, [pc, #16]	@ (80237f4 <glue_ota_end_firmware_update+0x30>)
 80237e2:	f7eb fe21 	bl	800f428 <mg_timer_add>
  return true;
 80237e6:	2301      	movs	r3, #1
}
 80237e8:	4618      	mov	r0, r3
 80237ea:	3708      	adds	r7, #8
 80237ec:	46bd      	mov	sp, r7
 80237ee:	bd80      	pop	{r7, pc}
 80237f0:	08012f3d 	.word	0x08012f3d
 80237f4:	240056b8 	.word	0x240056b8

080237f8 <glue_ota_write_firmware_update>:
bool glue_ota_write_firmware_update(void *context, void *buf, size_t len) {
 80237f8:	b580      	push	{r7, lr}
 80237fa:	b084      	sub	sp, #16
 80237fc:	af00      	add	r7, sp, #0
 80237fe:	60f8      	str	r0, [r7, #12]
 8023800:	60b9      	str	r1, [r7, #8]
 8023802:	607a      	str	r2, [r7, #4]
  MG_DEBUG(("ctx: %p %p/%lu", context, buf, len));
 8023804:	4b0c      	ldr	r3, [pc, #48]	@ (8023838 <glue_ota_write_firmware_update+0x40>)
 8023806:	681b      	ldr	r3, [r3, #0]
 8023808:	2b02      	cmp	r3, #2
 802380a:	dd0b      	ble.n	8023824 <glue_ota_write_firmware_update+0x2c>
 802380c:	4b0b      	ldr	r3, [pc, #44]	@ (802383c <glue_ota_write_firmware_update+0x44>)
 802380e:	2265      	movs	r2, #101	@ 0x65
 8023810:	490b      	ldr	r1, [pc, #44]	@ (8023840 <glue_ota_write_firmware_update+0x48>)
 8023812:	2003      	movs	r0, #3
 8023814:	f7eb f846 	bl	800e8a4 <mg_log_prefix>
 8023818:	687b      	ldr	r3, [r7, #4]
 802381a:	68ba      	ldr	r2, [r7, #8]
 802381c:	68f9      	ldr	r1, [r7, #12]
 802381e:	4809      	ldr	r0, [pc, #36]	@ (8023844 <glue_ota_write_firmware_update+0x4c>)
 8023820:	f7eb f890 	bl	800e944 <mg_log>
  return mg_ota_write(buf, len);
 8023824:	6879      	ldr	r1, [r7, #4]
 8023826:	68b8      	ldr	r0, [r7, #8]
 8023828:	f7ef fb76 	bl	8012f18 <mg_ota_write>
 802382c:	4603      	mov	r3, r0
}
 802382e:	4618      	mov	r0, r3
 8023830:	3710      	adds	r7, #16
 8023832:	46bd      	mov	sp, r7
 8023834:	bd80      	pop	{r7, pc}
 8023836:	bf00      	nop
 8023838:	24000258 	.word	0x24000258
 802383c:	0803ada0 	.word	0x0803ada0
 8023840:	0802c6ec 	.word	0x0802c6ec
 8023844:	0802c798 	.word	0x0802c798

08023848 <glue_upload_open_file_upload>:

void *glue_upload_open_file_upload(char *file_name, size_t total_size) {
 8023848:	b580      	push	{r7, lr}
 802384a:	b0a4      	sub	sp, #144	@ 0x90
 802384c:	af00      	add	r7, sp, #0
 802384e:	6078      	str	r0, [r7, #4]
 8023850:	6039      	str	r1, [r7, #0]
  char path[128], *p = NULL;
 8023852:	2300      	movs	r3, #0
 8023854:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  FILE *fp = NULL;
 8023858:	2300      	movs	r3, #0
 802385a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  if ((p = strrchr(file_name, '/')) == NULL) p = file_name;
 802385e:	212f      	movs	r1, #47	@ 0x2f
 8023860:	6878      	ldr	r0, [r7, #4]
 8023862:	f003 ff6b 	bl	802773c <strrchr>
 8023866:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
 802386a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 802386e:	2b00      	cmp	r3, #0
 8023870:	d102      	bne.n	8023878 <glue_upload_open_file_upload+0x30>
 8023872:	687b      	ldr	r3, [r7, #4]
 8023874:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  mg_snprintf(path, sizeof(path), "/tmp/%s", p);
 8023878:	f107 0008 	add.w	r0, r7, #8
 802387c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8023880:	4a0d      	ldr	r2, [pc, #52]	@ (80238b8 <glue_upload_open_file_upload+0x70>)
 8023882:	2180      	movs	r1, #128	@ 0x80
 8023884:	f7ef fc4a 	bl	801311c <mg_snprintf>
#if MG_ENABLE_POSIX_FS
  fp = fopen(path, "w+b");
#endif
  MG_DEBUG(("opening [%s] size %lu, fp %p", path, total_size, fp));
 8023888:	4b0c      	ldr	r3, [pc, #48]	@ (80238bc <glue_upload_open_file_upload+0x74>)
 802388a:	681b      	ldr	r3, [r3, #0]
 802388c:	2b02      	cmp	r3, #2
 802388e:	dd0d      	ble.n	80238ac <glue_upload_open_file_upload+0x64>
 8023890:	4b0b      	ldr	r3, [pc, #44]	@ (80238c0 <glue_upload_open_file_upload+0x78>)
 8023892:	2271      	movs	r2, #113	@ 0x71
 8023894:	490b      	ldr	r1, [pc, #44]	@ (80238c4 <glue_upload_open_file_upload+0x7c>)
 8023896:	2003      	movs	r0, #3
 8023898:	f7eb f804 	bl	800e8a4 <mg_log_prefix>
 802389c:	f107 0108 	add.w	r1, r7, #8
 80238a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80238a4:	683a      	ldr	r2, [r7, #0]
 80238a6:	4808      	ldr	r0, [pc, #32]	@ (80238c8 <glue_upload_open_file_upload+0x80>)
 80238a8:	f7eb f84c 	bl	800e944 <mg_log>
  return fp;
 80238ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
}
 80238b0:	4618      	mov	r0, r3
 80238b2:	3790      	adds	r7, #144	@ 0x90
 80238b4:	46bd      	mov	sp, r7
 80238b6:	bd80      	pop	{r7, pc}
 80238b8:	0802c7a8 	.word	0x0802c7a8
 80238bc:	24000258 	.word	0x24000258
 80238c0:	0803adc0 	.word	0x0803adc0
 80238c4:	0802c6ec 	.word	0x0802c6ec
 80238c8:	0802c7b0 	.word	0x0802c7b0

080238cc <glue_upload_close_file_upload>:
bool glue_upload_close_file_upload(void *fp) {
 80238cc:	b580      	push	{r7, lr}
 80238ce:	b082      	sub	sp, #8
 80238d0:	af00      	add	r7, sp, #0
 80238d2:	6078      	str	r0, [r7, #4]
  MG_DEBUG(("closing %p", fp));
 80238d4:	4b09      	ldr	r3, [pc, #36]	@ (80238fc <glue_upload_close_file_upload+0x30>)
 80238d6:	681b      	ldr	r3, [r3, #0]
 80238d8:	2b02      	cmp	r3, #2
 80238da:	dd09      	ble.n	80238f0 <glue_upload_close_file_upload+0x24>
 80238dc:	4b08      	ldr	r3, [pc, #32]	@ (8023900 <glue_upload_close_file_upload+0x34>)
 80238de:	2275      	movs	r2, #117	@ 0x75
 80238e0:	4908      	ldr	r1, [pc, #32]	@ (8023904 <glue_upload_close_file_upload+0x38>)
 80238e2:	2003      	movs	r0, #3
 80238e4:	f7ea ffde 	bl	800e8a4 <mg_log_prefix>
 80238e8:	6879      	ldr	r1, [r7, #4]
 80238ea:	4807      	ldr	r0, [pc, #28]	@ (8023908 <glue_upload_close_file_upload+0x3c>)
 80238ec:	f7eb f82a 	bl	800e944 <mg_log>
#if MG_ENABLE_POSIX_FS
  return fclose((FILE *) fp) == 0;
#else
  return false;
 80238f0:	2300      	movs	r3, #0
#endif
}
 80238f2:	4618      	mov	r0, r3
 80238f4:	3708      	adds	r7, #8
 80238f6:	46bd      	mov	sp, r7
 80238f8:	bd80      	pop	{r7, pc}
 80238fa:	bf00      	nop
 80238fc:	24000258 	.word	0x24000258
 8023900:	0803ade0 	.word	0x0803ade0
 8023904:	0802c6ec 	.word	0x0802c6ec
 8023908:	0802c7d0 	.word	0x0802c7d0

0802390c <glue_upload_write_file_upload>:
bool glue_upload_write_file_upload(void *fp, void *buf, size_t len) {
 802390c:	b580      	push	{r7, lr}
 802390e:	b084      	sub	sp, #16
 8023910:	af00      	add	r7, sp, #0
 8023912:	60f8      	str	r0, [r7, #12]
 8023914:	60b9      	str	r1, [r7, #8]
 8023916:	607a      	str	r2, [r7, #4]
  MG_DEBUG(("writing fp %p %p %lu bytes", fp, buf, len));
 8023918:	4b0a      	ldr	r3, [pc, #40]	@ (8023944 <glue_upload_write_file_upload+0x38>)
 802391a:	681b      	ldr	r3, [r3, #0]
 802391c:	2b02      	cmp	r3, #2
 802391e:	dd0b      	ble.n	8023938 <glue_upload_write_file_upload+0x2c>
 8023920:	4b09      	ldr	r3, [pc, #36]	@ (8023948 <glue_upload_write_file_upload+0x3c>)
 8023922:	227d      	movs	r2, #125	@ 0x7d
 8023924:	4909      	ldr	r1, [pc, #36]	@ (802394c <glue_upload_write_file_upload+0x40>)
 8023926:	2003      	movs	r0, #3
 8023928:	f7ea ffbc 	bl	800e8a4 <mg_log_prefix>
 802392c:	687b      	ldr	r3, [r7, #4]
 802392e:	68ba      	ldr	r2, [r7, #8]
 8023930:	68f9      	ldr	r1, [r7, #12]
 8023932:	4807      	ldr	r0, [pc, #28]	@ (8023950 <glue_upload_write_file_upload+0x44>)
 8023934:	f7eb f806 	bl	800e944 <mg_log>
#if MG_ENABLE_POSIX_FS
  return fwrite(buf, 1, len, (FILE *) fp) == len;
#else
  return false;
 8023938:	2300      	movs	r3, #0
#endif
}
 802393a:	4618      	mov	r0, r3
 802393c:	3710      	adds	r7, #16
 802393e:	46bd      	mov	sp, r7
 8023940:	bd80      	pop	{r7, pc}
 8023942:	bf00      	nop
 8023944:	24000258 	.word	0x24000258
 8023948:	0803ae00 	.word	0x0803ae00
 802394c:	0802c6ec 	.word	0x0802c6ec
 8023950:	0802c7dc 	.word	0x0802c7dc

08023954 <glue_reply_graph_data>:

void glue_reply_graph_data(struct mg_connection *c, struct mg_http_message *hm) {
 8023954:	b580      	push	{r7, lr}
 8023956:	b086      	sub	sp, #24
 8023958:	af02      	add	r7, sp, #8
 802395a:	6078      	str	r0, [r7, #4]
 802395c:	6039      	str	r1, [r7, #0]
  const char *headers = "Cache-Control: no-cache\r\n" "Content-Type: application/json\r\n";
 802395e:	4b08      	ldr	r3, [pc, #32]	@ (8023980 <glue_reply_graph_data+0x2c>)
 8023960:	60fb      	str	r3, [r7, #12]
  const char *value = "[[1724576787,20.3],[1724576847,27.2],[1724576907,29.7],[1724576967,27.9],[1724577027,25.1],[1724577087,23.8],[1724577147,22.5],[1724577207,22.2],[1724577267,23.3],[1724577327,23.9]]";
 8023962:	4b08      	ldr	r3, [pc, #32]	@ (8023984 <glue_reply_graph_data+0x30>)
 8023964:	60bb      	str	r3, [r7, #8]
  (void) hm;
  mg_http_reply(c, 200, headers, "%s\n", value);
 8023966:	68bb      	ldr	r3, [r7, #8]
 8023968:	9300      	str	r3, [sp, #0]
 802396a:	4b07      	ldr	r3, [pc, #28]	@ (8023988 <glue_reply_graph_data+0x34>)
 802396c:	68fa      	ldr	r2, [r7, #12]
 802396e:	21c8      	movs	r1, #200	@ 0xc8
 8023970:	6878      	ldr	r0, [r7, #4]
 8023972:	f7e8 f89f 	bl	800bab4 <mg_http_reply>
}
 8023976:	bf00      	nop
 8023978:	3710      	adds	r7, #16
 802397a:	46bd      	mov	sp, r7
 802397c:	bd80      	pop	{r7, pc}
 802397e:	bf00      	nop
 8023980:	0802c7f8 	.word	0x0802c7f8
 8023984:	0802c834 	.word	0x0802c834
 8023988:	0802c8ec 	.word	0x0802c8ec

0802398c <glue_get_state>:
static struct state s_state = {42, 27, 67, 10, "1.0.0", true, false, 83};
void glue_get_state(struct state *data) {
 802398c:	b5b0      	push	{r4, r5, r7, lr}
 802398e:	b082      	sub	sp, #8
 8023990:	af00      	add	r7, sp, #0
 8023992:	6078      	str	r0, [r7, #4]
  *data = s_state;  // Sync with your device
 8023994:	687b      	ldr	r3, [r7, #4]
 8023996:	4a17      	ldr	r2, [pc, #92]	@ (80239f4 <glue_get_state+0x68>)
 8023998:	461c      	mov	r4, r3
 802399a:	4615      	mov	r5, r2
 802399c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 802399e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80239a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80239a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80239a4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80239a8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  data->speed = glue_get_local_reg(1005);
 80239ac:	f240 30ed 	movw	r0, #1005	@ 0x3ed
 80239b0:	f7ff fdfe 	bl	80235b0 <glue_get_local_reg>
 80239b4:	4603      	mov	r3, r0
 80239b6:	461a      	mov	r2, r3
 80239b8:	687b      	ldr	r3, [r7, #4]
 80239ba:	601a      	str	r2, [r3, #0]
  data->temperature = glue_get_local_reg(1006);
 80239bc:	f240 30ee 	movw	r0, #1006	@ 0x3ee
 80239c0:	f7ff fdf6 	bl	80235b0 <glue_get_local_reg>
 80239c4:	4603      	mov	r3, r0
 80239c6:	461a      	mov	r2, r3
 80239c8:	687b      	ldr	r3, [r7, #4]
 80239ca:	605a      	str	r2, [r3, #4]
  data->humidity = glue_get_local_reg(1007);
 80239cc:	f240 30ef 	movw	r0, #1007	@ 0x3ef
 80239d0:	f7ff fdee 	bl	80235b0 <glue_get_local_reg>
 80239d4:	4603      	mov	r3, r0
 80239d6:	461a      	mov	r2, r3
 80239d8:	687b      	ldr	r3, [r7, #4]
 80239da:	609a      	str	r2, [r3, #8]
  data->level= glue_get_local_reg(1008);
 80239dc:	f44f 707c 	mov.w	r0, #1008	@ 0x3f0
 80239e0:	f7ff fde6 	bl	80235b0 <glue_get_local_reg>
 80239e4:	4603      	mov	r3, r0
 80239e6:	461a      	mov	r2, r3
 80239e8:	687b      	ldr	r3, [r7, #4]
 80239ea:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80239ec:	bf00      	nop
 80239ee:	3708      	adds	r7, #8
 80239f0:	46bd      	mov	sp, r7
 80239f2:	bdb0      	pop	{r4, r5, r7, pc}
 80239f4:	240002b4 	.word	0x240002b4

080239f8 <glue_get_leds>:

static struct leds s_leds = {false, true, false};
void glue_get_leds(struct leds *data) {
 80239f8:	b580      	push	{r7, lr}
 80239fa:	b082      	sub	sp, #8
 80239fc:	af00      	add	r7, sp, #0
 80239fe:	6078      	str	r0, [r7, #4]
  *data = s_leds;  // Sync with your device
 8023a00:	687b      	ldr	r3, [r7, #4]
 8023a02:	4a17      	ldr	r2, [pc, #92]	@ (8023a60 <glue_get_leds+0x68>)
 8023a04:	8811      	ldrh	r1, [r2, #0]
 8023a06:	7892      	ldrb	r2, [r2, #2]
 8023a08:	8019      	strh	r1, [r3, #0]
 8023a0a:	709a      	strb	r2, [r3, #2]
  data->led1 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0);
 8023a0c:	2101      	movs	r1, #1
 8023a0e:	4815      	ldr	r0, [pc, #84]	@ (8023a64 <glue_get_leds+0x6c>)
 8023a10:	f7df fa78 	bl	8002f04 <HAL_GPIO_ReadPin>
 8023a14:	4603      	mov	r3, r0
 8023a16:	2b00      	cmp	r3, #0
 8023a18:	bf14      	ite	ne
 8023a1a:	2301      	movne	r3, #1
 8023a1c:	2300      	moveq	r3, #0
 8023a1e:	b2da      	uxtb	r2, r3
 8023a20:	687b      	ldr	r3, [r7, #4]
 8023a22:	701a      	strb	r2, [r3, #0]
  data->led2 = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_1);
 8023a24:	2102      	movs	r1, #2
 8023a26:	4810      	ldr	r0, [pc, #64]	@ (8023a68 <glue_get_leds+0x70>)
 8023a28:	f7df fa6c 	bl	8002f04 <HAL_GPIO_ReadPin>
 8023a2c:	4603      	mov	r3, r0
 8023a2e:	2b00      	cmp	r3, #0
 8023a30:	bf14      	ite	ne
 8023a32:	2301      	movne	r3, #1
 8023a34:	2300      	moveq	r3, #0
 8023a36:	b2da      	uxtb	r2, r3
 8023a38:	687b      	ldr	r3, [r7, #4]
 8023a3a:	705a      	strb	r2, [r3, #1]
  data->led3 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);
 8023a3c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8023a40:	4808      	ldr	r0, [pc, #32]	@ (8023a64 <glue_get_leds+0x6c>)
 8023a42:	f7df fa5f 	bl	8002f04 <HAL_GPIO_ReadPin>
 8023a46:	4603      	mov	r3, r0
 8023a48:	2b00      	cmp	r3, #0
 8023a4a:	bf14      	ite	ne
 8023a4c:	2301      	movne	r3, #1
 8023a4e:	2300      	moveq	r3, #0
 8023a50:	b2da      	uxtb	r2, r3
 8023a52:	687b      	ldr	r3, [r7, #4]
 8023a54:	709a      	strb	r2, [r3, #2]
}
 8023a56:	bf00      	nop
 8023a58:	3708      	adds	r7, #8
 8023a5a:	46bd      	mov	sp, r7
 8023a5c:	bd80      	pop	{r7, pc}
 8023a5e:	bf00      	nop
 8023a60:	240002e0 	.word	0x240002e0
 8023a64:	58020400 	.word	0x58020400
 8023a68:	58021000 	.word	0x58021000

08023a6c <glue_set_leds>:
void glue_set_leds(struct leds *data) {
 8023a6c:	b580      	push	{r7, lr}
 8023a6e:	b082      	sub	sp, #8
 8023a70:	af00      	add	r7, sp, #0
 8023a72:	6078      	str	r0, [r7, #4]
  s_leds = *data; // Sync with your device
 8023a74:	4b0f      	ldr	r3, [pc, #60]	@ (8023ab4 <glue_set_leds+0x48>)
 8023a76:	687a      	ldr	r2, [r7, #4]
 8023a78:	8811      	ldrh	r1, [r2, #0]
 8023a7a:	7892      	ldrb	r2, [r2, #2]
 8023a7c:	8019      	strh	r1, [r3, #0]
 8023a7e:	709a      	strb	r2, [r3, #2]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, data->led1 ? GPIO_PIN_SET : GPIO_PIN_RESET);  // LD1
 8023a80:	687b      	ldr	r3, [r7, #4]
 8023a82:	781b      	ldrb	r3, [r3, #0]
 8023a84:	461a      	mov	r2, r3
 8023a86:	2101      	movs	r1, #1
 8023a88:	480b      	ldr	r0, [pc, #44]	@ (8023ab8 <glue_set_leds+0x4c>)
 8023a8a:	f7df fa53 	bl	8002f34 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, data->led2 ? GPIO_PIN_SET : GPIO_PIN_RESET);  // LD2
 8023a8e:	687b      	ldr	r3, [r7, #4]
 8023a90:	785b      	ldrb	r3, [r3, #1]
 8023a92:	461a      	mov	r2, r3
 8023a94:	2102      	movs	r1, #2
 8023a96:	4809      	ldr	r0, [pc, #36]	@ (8023abc <glue_set_leds+0x50>)
 8023a98:	f7df fa4c 	bl	8002f34 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, data->led3 ? GPIO_PIN_SET : GPIO_PIN_RESET); // LD3
 8023a9c:	687b      	ldr	r3, [r7, #4]
 8023a9e:	789b      	ldrb	r3, [r3, #2]
 8023aa0:	461a      	mov	r2, r3
 8023aa2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8023aa6:	4804      	ldr	r0, [pc, #16]	@ (8023ab8 <glue_set_leds+0x4c>)
 8023aa8:	f7df fa44 	bl	8002f34 <HAL_GPIO_WritePin>
}
 8023aac:	bf00      	nop
 8023aae:	3708      	adds	r7, #8
 8023ab0:	46bd      	mov	sp, r7
 8023ab2:	bd80      	pop	{r7, pc}
 8023ab4:	240002e0 	.word	0x240002e0
 8023ab8:	58020400 	.word	0x58020400
 8023abc:	58021000 	.word	0x58021000

08023ac0 <glue_get_network_settings>:

static struct network_settings s_network_settings = {"192.168.0.42", "192.168.0.1", "255.255.255.0", true};
void glue_get_network_settings(struct network_settings *data) {
 8023ac0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023ac2:	b083      	sub	sp, #12
 8023ac4:	af00      	add	r7, sp, #0
 8023ac6:	6078      	str	r0, [r7, #4]
  *data = s_network_settings;  // Sync with your device
 8023ac8:	687b      	ldr	r3, [r7, #4]
 8023aca:	4a0e      	ldr	r2, [pc, #56]	@ (8023b04 <glue_get_network_settings+0x44>)
 8023acc:	4614      	mov	r4, r2
 8023ace:	469c      	mov	ip, r3
 8023ad0:	f104 0e30 	add.w	lr, r4, #48	@ 0x30
 8023ad4:	4665      	mov	r5, ip
 8023ad6:	4626      	mov	r6, r4
 8023ad8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8023ada:	6028      	str	r0, [r5, #0]
 8023adc:	6069      	str	r1, [r5, #4]
 8023ade:	60aa      	str	r2, [r5, #8]
 8023ae0:	60eb      	str	r3, [r5, #12]
 8023ae2:	3410      	adds	r4, #16
 8023ae4:	f10c 0c10 	add.w	ip, ip, #16
 8023ae8:	4574      	cmp	r4, lr
 8023aea:	d1f3      	bne.n	8023ad4 <glue_get_network_settings+0x14>
 8023aec:	4665      	mov	r5, ip
 8023aee:	4623      	mov	r3, r4
 8023af0:	cb07      	ldmia	r3!, {r0, r1, r2}
 8023af2:	6028      	str	r0, [r5, #0]
 8023af4:	6069      	str	r1, [r5, #4]
 8023af6:	60aa      	str	r2, [r5, #8]
 8023af8:	781b      	ldrb	r3, [r3, #0]
 8023afa:	732b      	strb	r3, [r5, #12]
}
 8023afc:	bf00      	nop
 8023afe:	370c      	adds	r7, #12
 8023b00:	46bd      	mov	sp, r7
 8023b02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023b04:	240002e4 	.word	0x240002e4

08023b08 <glue_set_network_settings>:
void glue_set_network_settings(struct network_settings *data) {
 8023b08:	b4f0      	push	{r4, r5, r6, r7}
 8023b0a:	b082      	sub	sp, #8
 8023b0c:	af00      	add	r7, sp, #0
 8023b0e:	6078      	str	r0, [r7, #4]
  s_network_settings = *data; // Sync with your device
 8023b10:	4a0e      	ldr	r2, [pc, #56]	@ (8023b4c <glue_set_network_settings+0x44>)
 8023b12:	687b      	ldr	r3, [r7, #4]
 8023b14:	461c      	mov	r4, r3
 8023b16:	4616      	mov	r6, r2
 8023b18:	f104 0c30 	add.w	ip, r4, #48	@ 0x30
 8023b1c:	4635      	mov	r5, r6
 8023b1e:	4623      	mov	r3, r4
 8023b20:	6818      	ldr	r0, [r3, #0]
 8023b22:	6859      	ldr	r1, [r3, #4]
 8023b24:	689a      	ldr	r2, [r3, #8]
 8023b26:	68db      	ldr	r3, [r3, #12]
 8023b28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8023b2a:	3410      	adds	r4, #16
 8023b2c:	3610      	adds	r6, #16
 8023b2e:	4564      	cmp	r4, ip
 8023b30:	d1f4      	bne.n	8023b1c <glue_set_network_settings+0x14>
 8023b32:	4633      	mov	r3, r6
 8023b34:	6820      	ldr	r0, [r4, #0]
 8023b36:	6861      	ldr	r1, [r4, #4]
 8023b38:	68a2      	ldr	r2, [r4, #8]
 8023b3a:	c307      	stmia	r3!, {r0, r1, r2}
 8023b3c:	7b22      	ldrb	r2, [r4, #12]
 8023b3e:	701a      	strb	r2, [r3, #0]
}
 8023b40:	bf00      	nop
 8023b42:	3708      	adds	r7, #8
 8023b44:	46bd      	mov	sp, r7
 8023b46:	bcf0      	pop	{r4, r5, r6, r7}
 8023b48:	4770      	bx	lr
 8023b4a:	bf00      	nop
 8023b4c:	240002e4 	.word	0x240002e4

08023b50 <glue_get_settings>:

static struct settings s_settings = {"edit & save me", "info", 123.12345, 17, true};
void glue_get_settings(struct settings *data) {
 8023b50:	b580      	push	{r7, lr}
 8023b52:	b082      	sub	sp, #8
 8023b54:	af00      	add	r7, sp, #0
 8023b56:	6078      	str	r0, [r7, #4]
  *data = s_settings;  // Sync with your device
 8023b58:	687b      	ldr	r3, [r7, #4]
 8023b5a:	4a05      	ldr	r2, [pc, #20]	@ (8023b70 <glue_get_settings+0x20>)
 8023b5c:	4618      	mov	r0, r3
 8023b5e:	4611      	mov	r1, r2
 8023b60:	2348      	movs	r3, #72	@ 0x48
 8023b62:	461a      	mov	r2, r3
 8023b64:	f003 fee9 	bl	802793a <memcpy>
}
 8023b68:	bf00      	nop
 8023b6a:	3708      	adds	r7, #8
 8023b6c:	46bd      	mov	sp, r7
 8023b6e:	bd80      	pop	{r7, pc}
 8023b70:	24000328 	.word	0x24000328

08023b74 <glue_set_settings>:
void glue_set_settings(struct settings *data) {
 8023b74:	b580      	push	{r7, lr}
 8023b76:	b082      	sub	sp, #8
 8023b78:	af00      	add	r7, sp, #0
 8023b7a:	6078      	str	r0, [r7, #4]
  s_settings = *data; // Sync with your device
 8023b7c:	4a05      	ldr	r2, [pc, #20]	@ (8023b94 <glue_set_settings+0x20>)
 8023b7e:	687b      	ldr	r3, [r7, #4]
 8023b80:	4610      	mov	r0, r2
 8023b82:	4619      	mov	r1, r3
 8023b84:	2348      	movs	r3, #72	@ 0x48
 8023b86:	461a      	mov	r2, r3
 8023b88:	f003 fed7 	bl	802793a <memcpy>
}
 8023b8c:	bf00      	nop
 8023b8e:	3708      	adds	r7, #8
 8023b90:	46bd      	mov	sp, r7
 8023b92:	bd80      	pop	{r7, pc}
 8023b94:	24000328 	.word	0x24000328

08023b98 <glue_get_security>:

static struct security s_security = {"admin", "user"};
void glue_get_security(struct security *data) {
 8023b98:	b580      	push	{r7, lr}
 8023b9a:	b082      	sub	sp, #8
 8023b9c:	af00      	add	r7, sp, #0
 8023b9e:	6078      	str	r0, [r7, #4]
  *data = s_security;  // Sync with your device
 8023ba0:	687b      	ldr	r3, [r7, #4]
 8023ba2:	4a05      	ldr	r2, [pc, #20]	@ (8023bb8 <glue_get_security+0x20>)
 8023ba4:	4618      	mov	r0, r3
 8023ba6:	4611      	mov	r1, r2
 8023ba8:	2350      	movs	r3, #80	@ 0x50
 8023baa:	461a      	mov	r2, r3
 8023bac:	f003 fec5 	bl	802793a <memcpy>
}
 8023bb0:	bf00      	nop
 8023bb2:	3708      	adds	r7, #8
 8023bb4:	46bd      	mov	sp, r7
 8023bb6:	bd80      	pop	{r7, pc}
 8023bb8:	24000370 	.word	0x24000370

08023bbc <glue_set_security>:
void glue_set_security(struct security *data) {
 8023bbc:	b580      	push	{r7, lr}
 8023bbe:	b082      	sub	sp, #8
 8023bc0:	af00      	add	r7, sp, #0
 8023bc2:	6078      	str	r0, [r7, #4]
  s_security = *data; // Sync with your device
 8023bc4:	4a05      	ldr	r2, [pc, #20]	@ (8023bdc <glue_set_security+0x20>)
 8023bc6:	687b      	ldr	r3, [r7, #4]
 8023bc8:	4610      	mov	r0, r2
 8023bca:	4619      	mov	r1, r3
 8023bcc:	2350      	movs	r3, #80	@ 0x50
 8023bce:	461a      	mov	r2, r3
 8023bd0:	f003 feb3 	bl	802793a <memcpy>
}
 8023bd4:	bf00      	nop
 8023bd6:	3708      	adds	r7, #8
 8023bd8:	46bd      	mov	sp, r7
 8023bda:	bd80      	pop	{r7, pc}
 8023bdc:	24000370 	.word	0x24000370

08023be0 <glue_reply_loglevels>:

void glue_reply_loglevels(struct mg_connection *c, struct mg_http_message *hm) {
 8023be0:	b580      	push	{r7, lr}
 8023be2:	b086      	sub	sp, #24
 8023be4:	af02      	add	r7, sp, #8
 8023be6:	6078      	str	r0, [r7, #4]
 8023be8:	6039      	str	r1, [r7, #0]
  const char *headers = "Cache-Control: no-cache\r\n" "Content-Type: application/json\r\n";
 8023bea:	4b08      	ldr	r3, [pc, #32]	@ (8023c0c <glue_reply_loglevels+0x2c>)
 8023bec:	60fb      	str	r3, [r7, #12]
  const char *value = "[\"disabled\",\"error\",\"info\",\"debug\",\"verbose\"]";
 8023bee:	4b08      	ldr	r3, [pc, #32]	@ (8023c10 <glue_reply_loglevels+0x30>)
 8023bf0:	60bb      	str	r3, [r7, #8]
  (void) hm;
  mg_http_reply(c, 200, headers, "%s\n", value);
 8023bf2:	68bb      	ldr	r3, [r7, #8]
 8023bf4:	9300      	str	r3, [sp, #0]
 8023bf6:	4b07      	ldr	r3, [pc, #28]	@ (8023c14 <glue_reply_loglevels+0x34>)
 8023bf8:	68fa      	ldr	r2, [r7, #12]
 8023bfa:	21c8      	movs	r1, #200	@ 0xc8
 8023bfc:	6878      	ldr	r0, [r7, #4]
 8023bfe:	f7e7 ff59 	bl	800bab4 <mg_http_reply>
}
 8023c02:	bf00      	nop
 8023c04:	3710      	adds	r7, #16
 8023c06:	46bd      	mov	sp, r7
 8023c08:	bd80      	pop	{r7, pc}
 8023c0a:	bf00      	nop
 8023c0c:	0802c7f8 	.word	0x0802c7f8
 8023c10:	0802c8f0 	.word	0x0802c8f0
 8023c14:	0802c8ec 	.word	0x0802c8ec

08023c18 <glue_reply_events>:
void glue_reply_events(struct mg_connection *c, struct mg_http_message *hm) {
 8023c18:	b580      	push	{r7, lr}
 8023c1a:	b086      	sub	sp, #24
 8023c1c:	af02      	add	r7, sp, #8
 8023c1e:	6078      	str	r0, [r7, #4]
 8023c20:	6039      	str	r1, [r7, #0]
  const char *headers = "Cache-Control: no-cache\r\n" "Content-Type: application/json\r\n";
 8023c22:	4b08      	ldr	r3, [pc, #32]	@ (8023c44 <glue_reply_events+0x2c>)
 8023c24:	60fb      	str	r3, [r7, #12]
  const char *value = "[{\"priority\":1,\"timestamp\":1738653279,\"active\":false,\"message\":\"event 1\"},{\"priority\":2,\"timestamp\":1738653390,\"active\":true,\"message\":\"event 2\"}]";
 8023c26:	4b08      	ldr	r3, [pc, #32]	@ (8023c48 <glue_reply_events+0x30>)
 8023c28:	60bb      	str	r3, [r7, #8]
  (void) hm;
  mg_http_reply(c, 200, headers, "%s\n", value);
 8023c2a:	68bb      	ldr	r3, [r7, #8]
 8023c2c:	9300      	str	r3, [sp, #0]
 8023c2e:	4b07      	ldr	r3, [pc, #28]	@ (8023c4c <glue_reply_events+0x34>)
 8023c30:	68fa      	ldr	r2, [r7, #12]
 8023c32:	21c8      	movs	r1, #200	@ 0xc8
 8023c34:	6878      	ldr	r0, [r7, #4]
 8023c36:	f7e7 ff3d 	bl	800bab4 <mg_http_reply>
}
 8023c3a:	bf00      	nop
 8023c3c:	3710      	adds	r7, #16
 8023c3e:	46bd      	mov	sp, r7
 8023c40:	bd80      	pop	{r7, pc}
 8023c42:	bf00      	nop
 8023c44:	0802c7f8 	.word	0x0802c7f8
 8023c48:	0802c920 	.word	0x0802c920
 8023c4c:	0802c8ec 	.word	0x0802c8ec

08023c50 <get_api_handler>:
  (struct apihandler *) &s_apihandler_security,
  (struct apihandler *) &s_apihandler_loglevels,
  (struct apihandler *) &s_apihandler_events
};

static struct apihandler *get_api_handler(struct mg_str name) {
 8023c50:	b580      	push	{r7, lr}
 8023c52:	b086      	sub	sp, #24
 8023c54:	af00      	add	r7, sp, #0
 8023c56:	463b      	mov	r3, r7
 8023c58:	e883 0003 	stmia.w	r3, {r0, r1}
  size_t num_handlers = sizeof(s_apihandlers) / sizeof(s_apihandlers[0]);
 8023c5c:	230c      	movs	r3, #12
 8023c5e:	613b      	str	r3, [r7, #16]
  size_t i;
  if (name.len == 0) return NULL;
 8023c60:	687b      	ldr	r3, [r7, #4]
 8023c62:	2b00      	cmp	r3, #0
 8023c64:	d101      	bne.n	8023c6a <get_api_handler+0x1a>
 8023c66:	2300      	movs	r3, #0
 8023c68:	e039      	b.n	8023cde <get_api_handler+0x8e>
  if (num_handlers == 0) return NULL;
 8023c6a:	693b      	ldr	r3, [r7, #16]
 8023c6c:	2b00      	cmp	r3, #0
 8023c6e:	d101      	bne.n	8023c74 <get_api_handler+0x24>
 8023c70:	2300      	movs	r3, #0
 8023c72:	e034      	b.n	8023cde <get_api_handler+0x8e>
  for (i = 0; i < num_handlers; i++) {
 8023c74:	2300      	movs	r3, #0
 8023c76:	617b      	str	r3, [r7, #20]
 8023c78:	e02c      	b.n	8023cd4 <get_api_handler+0x84>
    struct apihandler *h = s_apihandlers[i];
 8023c7a:	4a1b      	ldr	r2, [pc, #108]	@ (8023ce8 <get_api_handler+0x98>)
 8023c7c:	697b      	ldr	r3, [r7, #20]
 8023c7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8023c82:	60fb      	str	r3, [r7, #12]
    size_t n = strlen(h->name);
 8023c84:	68fb      	ldr	r3, [r7, #12]
 8023c86:	681b      	ldr	r3, [r3, #0]
 8023c88:	4618      	mov	r0, r3
 8023c8a:	f7dc fba1 	bl	80003d0 <strlen>
 8023c8e:	60b8      	str	r0, [r7, #8]
    if (n > name.len) continue;
 8023c90:	687b      	ldr	r3, [r7, #4]
 8023c92:	68ba      	ldr	r2, [r7, #8]
 8023c94:	429a      	cmp	r2, r3
 8023c96:	d815      	bhi.n	8023cc4 <get_api_handler+0x74>
    if (strncmp(name.buf, h->name, n) != 0) continue;
 8023c98:	6838      	ldr	r0, [r7, #0]
 8023c9a:	68fb      	ldr	r3, [r7, #12]
 8023c9c:	681b      	ldr	r3, [r3, #0]
 8023c9e:	68ba      	ldr	r2, [r7, #8]
 8023ca0:	4619      	mov	r1, r3
 8023ca2:	f003 fd26 	bl	80276f2 <strncmp>
 8023ca6:	4603      	mov	r3, r0
 8023ca8:	2b00      	cmp	r3, #0
 8023caa:	d10d      	bne.n	8023cc8 <get_api_handler+0x78>
    if (name.len > n && name.buf[n] != '/') continue;
 8023cac:	687b      	ldr	r3, [r7, #4]
 8023cae:	68ba      	ldr	r2, [r7, #8]
 8023cb0:	429a      	cmp	r2, r3
 8023cb2:	d205      	bcs.n	8023cc0 <get_api_handler+0x70>
 8023cb4:	683a      	ldr	r2, [r7, #0]
 8023cb6:	68bb      	ldr	r3, [r7, #8]
 8023cb8:	4413      	add	r3, r2
 8023cba:	781b      	ldrb	r3, [r3, #0]
 8023cbc:	2b2f      	cmp	r3, #47	@ 0x2f
 8023cbe:	d105      	bne.n	8023ccc <get_api_handler+0x7c>
    return h;
 8023cc0:	68fb      	ldr	r3, [r7, #12]
 8023cc2:	e00c      	b.n	8023cde <get_api_handler+0x8e>
    if (n > name.len) continue;
 8023cc4:	bf00      	nop
 8023cc6:	e002      	b.n	8023cce <get_api_handler+0x7e>
    if (strncmp(name.buf, h->name, n) != 0) continue;
 8023cc8:	bf00      	nop
 8023cca:	e000      	b.n	8023cce <get_api_handler+0x7e>
    if (name.len > n && name.buf[n] != '/') continue;
 8023ccc:	bf00      	nop
  for (i = 0; i < num_handlers; i++) {
 8023cce:	697b      	ldr	r3, [r7, #20]
 8023cd0:	3301      	adds	r3, #1
 8023cd2:	617b      	str	r3, [r7, #20]
 8023cd4:	697a      	ldr	r2, [r7, #20]
 8023cd6:	693b      	ldr	r3, [r7, #16]
 8023cd8:	429a      	cmp	r2, r3
 8023cda:	d3ce      	bcc.n	8023c7a <get_api_handler+0x2a>
  }
  return NULL;
 8023cdc:	2300      	movs	r3, #0
}
 8023cde:	4618      	mov	r0, r3
 8023ce0:	3718      	adds	r7, #24
 8023ce2:	46bd      	mov	sp, r7
 8023ce4:	bd80      	pop	{r7, pc}
 8023ce6:	bf00      	nop
 8023ce8:	240007ec 	.word	0x240007ec

08023cec <find_handler>:

static struct apihandler *find_handler(struct mg_http_message *hm) {
 8023cec:	b580      	push	{r7, lr}
 8023cee:	b084      	sub	sp, #16
 8023cf0:	af00      	add	r7, sp, #0
 8023cf2:	6078      	str	r0, [r7, #4]
  if (hm->uri.len < 6 || strncmp(hm->uri.buf, "/api/", 5) != 0) return NULL;
 8023cf4:	687b      	ldr	r3, [r7, #4]
 8023cf6:	68db      	ldr	r3, [r3, #12]
 8023cf8:	2b05      	cmp	r3, #5
 8023cfa:	d909      	bls.n	8023d10 <find_handler+0x24>
 8023cfc:	687b      	ldr	r3, [r7, #4]
 8023cfe:	689b      	ldr	r3, [r3, #8]
 8023d00:	2205      	movs	r2, #5
 8023d02:	490f      	ldr	r1, [pc, #60]	@ (8023d40 <find_handler+0x54>)
 8023d04:	4618      	mov	r0, r3
 8023d06:	f003 fcf4 	bl	80276f2 <strncmp>
 8023d0a:	4603      	mov	r3, r0
 8023d0c:	2b00      	cmp	r3, #0
 8023d0e:	d001      	beq.n	8023d14 <find_handler+0x28>
 8023d10:	2300      	movs	r3, #0
 8023d12:	e011      	b.n	8023d38 <find_handler+0x4c>
  return get_api_handler(mg_str_n(hm->uri.buf + 5, hm->uri.len - 5));
 8023d14:	687b      	ldr	r3, [r7, #4]
 8023d16:	689b      	ldr	r3, [r3, #8]
 8023d18:	1d59      	adds	r1, r3, #5
 8023d1a:	687b      	ldr	r3, [r7, #4]
 8023d1c:	68db      	ldr	r3, [r3, #12]
 8023d1e:	1f5a      	subs	r2, r3, #5
 8023d20:	f107 0308 	add.w	r3, r7, #8
 8023d24:	4618      	mov	r0, r3
 8023d26:	f7f2 fdda 	bl	80168de <mg_str_n>
 8023d2a:	f107 0308 	add.w	r3, r7, #8
 8023d2e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8023d32:	f7ff ff8d 	bl	8023c50 <get_api_handler>
 8023d36:	4603      	mov	r3, r0
}
 8023d38:	4618      	mov	r0, r3
 8023d3a:	3710      	adds	r7, #16
 8023d3c:	46bd      	mov	sp, r7
 8023d3e:	bd80      	pop	{r7, pc}
 8023d40:	0802cb68 	.word	0x0802cb68

08023d44 <mg_json_get_str2>:

void mg_json_get_str2(struct mg_str json, const char *path, char *buf,
                      size_t len) {
 8023d44:	b590      	push	{r4, r7, lr}
 8023d46:	b089      	sub	sp, #36	@ 0x24
 8023d48:	af00      	add	r7, sp, #0
 8023d4a:	f107 0408 	add.w	r4, r7, #8
 8023d4e:	e884 0003 	stmia.w	r4, {r0, r1}
 8023d52:	607a      	str	r2, [r7, #4]
 8023d54:	603b      	str	r3, [r7, #0]
  struct mg_str s = mg_json_get_tok(json, path);
 8023d56:	f107 0010 	add.w	r0, r7, #16
 8023d5a:	687b      	ldr	r3, [r7, #4]
 8023d5c:	f107 0208 	add.w	r2, r7, #8
 8023d60:	ca06      	ldmia	r2, {r1, r2}
 8023d62:	f7ea fc3b 	bl	800e5dc <mg_json_get_tok>
  if (s.len > 1 && s.buf[0] == '"') {
 8023d66:	697b      	ldr	r3, [r7, #20]
 8023d68:	2b01      	cmp	r3, #1
 8023d6a:	d913      	bls.n	8023d94 <mg_json_get_str2+0x50>
 8023d6c:	693b      	ldr	r3, [r7, #16]
 8023d6e:	781b      	ldrb	r3, [r3, #0]
 8023d70:	2b22      	cmp	r3, #34	@ 0x22
 8023d72:	d10f      	bne.n	8023d94 <mg_json_get_str2+0x50>
    mg_json_unescape(mg_str_n(s.buf + 1, s.len - 2), buf, len);
 8023d74:	693b      	ldr	r3, [r7, #16]
 8023d76:	1c59      	adds	r1, r3, #1
 8023d78:	697b      	ldr	r3, [r7, #20]
 8023d7a:	1e9a      	subs	r2, r3, #2
 8023d7c:	f107 0318 	add.w	r3, r7, #24
 8023d80:	4618      	mov	r0, r3
 8023d82:	f7f2 fdac 	bl	80168de <mg_str_n>
 8023d86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8023d88:	683a      	ldr	r2, [r7, #0]
 8023d8a:	f107 0118 	add.w	r1, r7, #24
 8023d8e:	c903      	ldmia	r1, {r0, r1}
 8023d90:	f7ea fcca 	bl	800e728 <mg_json_unescape>
  }
}
 8023d94:	bf00      	nop
 8023d96:	3724      	adds	r7, #36	@ 0x24
 8023d98:	46bd      	mov	sp, r7
 8023d9a:	bd90      	pop	{r4, r7, pc}

08023d9c <authenticate>:
void mongoose_set_auth_handler(int (*fn)(const char *, const char *)) {
  s_auth = fn;
}

// Parse HTTP requests, return authenticated user or NULL
static struct user *authenticate(struct mg_http_message *hm) {
 8023d9c:	b580      	push	{r7, lr}
 8023d9e:	b0ba      	sub	sp, #232	@ 0xe8
 8023da0:	af02      	add	r7, sp, #8
 8023da2:	6078      	str	r0, [r7, #4]
  char user[100], pass[100];
  struct user *u, *result = NULL;
 8023da4:	2300      	movs	r3, #0
 8023da6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  mg_http_creds(hm, user, sizeof(user), pass, sizeof(pass));
 8023daa:	f107 030c 	add.w	r3, r7, #12
 8023dae:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 8023db2:	2264      	movs	r2, #100	@ 0x64
 8023db4:	9200      	str	r2, [sp, #0]
 8023db6:	2264      	movs	r2, #100	@ 0x64
 8023db8:	6878      	ldr	r0, [r7, #4]
 8023dba:	f7e8 fdf1 	bl	800c9a0 <mg_http_creds>

  if (user[0] != '\0' && pass[0] != '\0') {
 8023dbe:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 8023dc2:	2b00      	cmp	r3, #0
 8023dc4:	d06f      	beq.n	8023ea6 <authenticate+0x10a>
 8023dc6:	7b3b      	ldrb	r3, [r7, #12]
 8023dc8:	2b00      	cmp	r3, #0
 8023dca:	d06c      	beq.n	8023ea6 <authenticate+0x10a>
    // Both user and password is set, auth by user/password via glue API
    int level = s_auth(user, pass);
 8023dcc:	4b5b      	ldr	r3, [pc, #364]	@ (8023f3c <authenticate+0x1a0>)
 8023dce:	681b      	ldr	r3, [r3, #0]
 8023dd0:	f107 010c 	add.w	r1, r7, #12
 8023dd4:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8023dd8:	4610      	mov	r0, r2
 8023dda:	4798      	blx	r3
 8023ddc:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
    MG_DEBUG(("user %s, level: %d", user, level));
 8023de0:	4b57      	ldr	r3, [pc, #348]	@ (8023f40 <authenticate+0x1a4>)
 8023de2:	681b      	ldr	r3, [r3, #0]
 8023de4:	2b02      	cmp	r3, #2
 8023de6:	dd0e      	ble.n	8023e06 <authenticate+0x6a>
 8023de8:	4b56      	ldr	r3, [pc, #344]	@ (8023f44 <authenticate+0x1a8>)
 8023dea:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8023dee:	4956      	ldr	r1, [pc, #344]	@ (8023f48 <authenticate+0x1ac>)
 8023df0:	2003      	movs	r0, #3
 8023df2:	f7ea fd57 	bl	800e8a4 <mg_log_prefix>
 8023df6:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8023dfa:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8023dfe:	4619      	mov	r1, r3
 8023e00:	4852      	ldr	r0, [pc, #328]	@ (8023f4c <authenticate+0x1b0>)
 8023e02:	f7ea fd9f 	bl	800e944 <mg_log>
    if (level > 0) {  // Proceed only if the firmware authenticated us
 8023e06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8023e0a:	2b00      	cmp	r3, #0
 8023e0c:	dd75      	ble.n	8023efa <authenticate+0x15e>
      // uint64_t uid = hash(3, mg_str(user), mg_str(":"), mg_str(pass));
      for (u = s_users; u != NULL && result == NULL; u = u->next) {
 8023e0e:	4b50      	ldr	r3, [pc, #320]	@ (8023f50 <authenticate+0x1b4>)
 8023e10:	681b      	ldr	r3, [r3, #0]
 8023e12:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8023e16:	e014      	b.n	8023e42 <authenticate+0xa6>
        if (strcmp(user, u->name) == 0) result = u;
 8023e18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8023e1c:	1d1a      	adds	r2, r3, #4
 8023e1e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8023e22:	4611      	mov	r1, r2
 8023e24:	4618      	mov	r0, r3
 8023e26:	f7dc fa73 	bl	8000310 <strcmp>
 8023e2a:	4603      	mov	r3, r0
 8023e2c:	2b00      	cmp	r3, #0
 8023e2e:	d103      	bne.n	8023e38 <authenticate+0x9c>
 8023e30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8023e34:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      for (u = s_users; u != NULL && result == NULL; u = u->next) {
 8023e38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8023e3c:	681b      	ldr	r3, [r3, #0]
 8023e3e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8023e42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8023e46:	2b00      	cmp	r3, #0
 8023e48:	d003      	beq.n	8023e52 <authenticate+0xb6>
 8023e4a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8023e4e:	2b00      	cmp	r3, #0
 8023e50:	d0e2      	beq.n	8023e18 <authenticate+0x7c>
      }
      // Not yet authenticated, add to the list
      if (result == NULL) {
 8023e52:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8023e56:	2b00      	cmp	r3, #0
 8023e58:	d14f      	bne.n	8023efa <authenticate+0x15e>
        result = (struct user *) calloc(1, sizeof(*result));
 8023e5a:	2140      	movs	r1, #64	@ 0x40
 8023e5c:	2001      	movs	r0, #1
 8023e5e:	f001 fd85 	bl	802596c <calloc>
 8023e62:	4603      	mov	r3, r0
 8023e64:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
        mg_snprintf(result->name, sizeof(result->name), "%s", user);
 8023e68:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8023e6c:	1d18      	adds	r0, r3, #4
 8023e6e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8023e72:	4a38      	ldr	r2, [pc, #224]	@ (8023f54 <authenticate+0x1b8>)
 8023e74:	2120      	movs	r1, #32
 8023e76:	f7ef f951 	bl	801311c <mg_snprintf>
        mg_random_str(result->token, sizeof(result->token) - 1);
 8023e7a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8023e7e:	3324      	adds	r3, #36	@ 0x24
 8023e80:	2114      	movs	r1, #20
 8023e82:	4618      	mov	r0, r3
 8023e84:	f7fd fee2 	bl	8021c4c <mg_random_str>
        result->level = level, result->next = s_users, s_users = result;
 8023e88:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8023e8c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8023e90:	63da      	str	r2, [r3, #60]	@ 0x3c
 8023e92:	4b2f      	ldr	r3, [pc, #188]	@ (8023f50 <authenticate+0x1b4>)
 8023e94:	681a      	ldr	r2, [r3, #0]
 8023e96:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8023e9a:	601a      	str	r2, [r3, #0]
 8023e9c:	4a2c      	ldr	r2, [pc, #176]	@ (8023f50 <authenticate+0x1b4>)
 8023e9e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8023ea2:	6013      	str	r3, [r2, #0]
  if (user[0] != '\0' && pass[0] != '\0') {
 8023ea4:	e029      	b.n	8023efa <authenticate+0x15e>
      }
    }
  } else if (user[0] == '\0' && pass[0] != '\0') {
 8023ea6:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 8023eaa:	2b00      	cmp	r3, #0
 8023eac:	d126      	bne.n	8023efc <authenticate+0x160>
 8023eae:	7b3b      	ldrb	r3, [r7, #12]
 8023eb0:	2b00      	cmp	r3, #0
 8023eb2:	d023      	beq.n	8023efc <authenticate+0x160>
    for (u = s_users; u != NULL && result == NULL; u = u->next) {
 8023eb4:	4b26      	ldr	r3, [pc, #152]	@ (8023f50 <authenticate+0x1b4>)
 8023eb6:	681b      	ldr	r3, [r3, #0]
 8023eb8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8023ebc:	e014      	b.n	8023ee8 <authenticate+0x14c>
      if (strcmp(u->token, pass) == 0) result = u;
 8023ebe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8023ec2:	3324      	adds	r3, #36	@ 0x24
 8023ec4:	f107 020c 	add.w	r2, r7, #12
 8023ec8:	4611      	mov	r1, r2
 8023eca:	4618      	mov	r0, r3
 8023ecc:	f7dc fa20 	bl	8000310 <strcmp>
 8023ed0:	4603      	mov	r3, r0
 8023ed2:	2b00      	cmp	r3, #0
 8023ed4:	d103      	bne.n	8023ede <authenticate+0x142>
 8023ed6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8023eda:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    for (u = s_users; u != NULL && result == NULL; u = u->next) {
 8023ede:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8023ee2:	681b      	ldr	r3, [r3, #0]
 8023ee4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8023ee8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8023eec:	2b00      	cmp	r3, #0
 8023eee:	d005      	beq.n	8023efc <authenticate+0x160>
 8023ef0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8023ef4:	2b00      	cmp	r3, #0
 8023ef6:	d0e2      	beq.n	8023ebe <authenticate+0x122>
 8023ef8:	e000      	b.n	8023efc <authenticate+0x160>
  if (user[0] != '\0' && pass[0] != '\0') {
 8023efa:	bf00      	nop
    }
  }
  MG_VERBOSE(("[%s/%s] -> %s", user, pass, result ? "OK" : "FAIL"));
 8023efc:	4b10      	ldr	r3, [pc, #64]	@ (8023f40 <authenticate+0x1a4>)
 8023efe:	681b      	ldr	r3, [r3, #0]
 8023f00:	2b03      	cmp	r3, #3
 8023f02:	dd14      	ble.n	8023f2e <authenticate+0x192>
 8023f04:	4b0f      	ldr	r3, [pc, #60]	@ (8023f44 <authenticate+0x1a8>)
 8023f06:	f240 122b 	movw	r2, #299	@ 0x12b
 8023f0a:	490f      	ldr	r1, [pc, #60]	@ (8023f48 <authenticate+0x1ac>)
 8023f0c:	2004      	movs	r0, #4
 8023f0e:	f7ea fcc9 	bl	800e8a4 <mg_log_prefix>
 8023f12:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8023f16:	2b00      	cmp	r3, #0
 8023f18:	d001      	beq.n	8023f1e <authenticate+0x182>
 8023f1a:	4b0f      	ldr	r3, [pc, #60]	@ (8023f58 <authenticate+0x1bc>)
 8023f1c:	e000      	b.n	8023f20 <authenticate+0x184>
 8023f1e:	4b0f      	ldr	r3, [pc, #60]	@ (8023f5c <authenticate+0x1c0>)
 8023f20:	f107 020c 	add.w	r2, r7, #12
 8023f24:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 8023f28:	480d      	ldr	r0, [pc, #52]	@ (8023f60 <authenticate+0x1c4>)
 8023f2a:	f7ea fd0b 	bl	800e944 <mg_log>
  return result;
 8023f2e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
}
 8023f32:	4618      	mov	r0, r3
 8023f34:	37e0      	adds	r7, #224	@ 0xe0
 8023f36:	46bd      	mov	sp, r7
 8023f38:	bd80      	pop	{r7, pc}
 8023f3a:	bf00      	nop
 8023f3c:	2400081c 	.word	0x2400081c
 8023f40:	24000258 	.word	0x24000258
 8023f44:	0803ae20 	.word	0x0803ae20
 8023f48:	0802cb70 	.word	0x0802cb70
 8023f4c:	0802cbd4 	.word	0x0802cbd4
 8023f50:	24005700 	.word	0x24005700
 8023f54:	0802cbe8 	.word	0x0802cbe8
 8023f58:	0802cbec 	.word	0x0802cbec
 8023f5c:	0802cbf0 	.word	0x0802cbf0
 8023f60:	0802cbf8 	.word	0x0802cbf8

08023f64 <handle_login>:

static void handle_login(struct mg_connection *c, struct user *u) {
 8023f64:	b580      	push	{r7, lr}
 8023f66:	b0cc      	sub	sp, #304	@ 0x130
 8023f68:	af0a      	add	r7, sp, #40	@ 0x28
 8023f6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8023f6e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8023f72:	6018      	str	r0, [r3, #0]
 8023f74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8023f78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8023f7c:	6019      	str	r1, [r3, #0]
  char cookie[256];
  mg_snprintf(cookie, sizeof(cookie),
              "Set-Cookie: access_token=%s; Path=/; "
              "%sHttpOnly; SameSite=Lax; Max-Age=%d\r\n",
              u->token, c->is_tls ? "Secure; " : "", 3600 * 24);
 8023f7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8023f82:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8023f86:	681b      	ldr	r3, [r3, #0]
 8023f88:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 8023f8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8023f90:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8023f94:	681b      	ldr	r3, [r3, #0]
 8023f96:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8023f9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8023f9e:	b2db      	uxtb	r3, r3
  mg_snprintf(cookie, sizeof(cookie),
 8023fa0:	2b00      	cmp	r3, #0
 8023fa2:	d001      	beq.n	8023fa8 <handle_login+0x44>
 8023fa4:	4b1e      	ldr	r3, [pc, #120]	@ (8024020 <handle_login+0xbc>)
 8023fa6:	e000      	b.n	8023faa <handle_login+0x46>
 8023fa8:	4b1e      	ldr	r3, [pc, #120]	@ (8024024 <handle_login+0xc0>)
 8023faa:	f107 0008 	add.w	r0, r7, #8
 8023fae:	491e      	ldr	r1, [pc, #120]	@ (8024028 <handle_login+0xc4>)
 8023fb0:	9101      	str	r1, [sp, #4]
 8023fb2:	9300      	str	r3, [sp, #0]
 8023fb4:	4613      	mov	r3, r2
 8023fb6:	4a1d      	ldr	r2, [pc, #116]	@ (802402c <handle_login+0xc8>)
 8023fb8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8023fbc:	f7ef f8ae 	bl	801311c <mg_snprintf>
  mg_http_reply(c, 200, cookie, "{%m:%m,%m:%d}\n",  //
                MG_ESC("user"), MG_ESC(u->name),    //
 8023fc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8023fc4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8023fc8:	681b      	ldr	r3, [r3, #0]
 8023fca:	3304      	adds	r3, #4
  mg_http_reply(c, 200, cookie, "{%m:%m,%m:%d}\n",  //
 8023fcc:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 8023fd0:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 8023fd4:	6812      	ldr	r2, [r2, #0]
 8023fd6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8023fd8:	f107 0108 	add.w	r1, r7, #8
 8023fdc:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8023fe0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8023fe4:	9209      	str	r2, [sp, #36]	@ 0x24
 8023fe6:	4a12      	ldr	r2, [pc, #72]	@ (8024030 <handle_login+0xcc>)
 8023fe8:	9208      	str	r2, [sp, #32]
 8023fea:	2200      	movs	r2, #0
 8023fec:	9207      	str	r2, [sp, #28]
 8023fee:	4a11      	ldr	r2, [pc, #68]	@ (8024034 <handle_login+0xd0>)
 8023ff0:	9206      	str	r2, [sp, #24]
 8023ff2:	9305      	str	r3, [sp, #20]
 8023ff4:	2300      	movs	r3, #0
 8023ff6:	9304      	str	r3, [sp, #16]
 8023ff8:	4b0e      	ldr	r3, [pc, #56]	@ (8024034 <handle_login+0xd0>)
 8023ffa:	9303      	str	r3, [sp, #12]
 8023ffc:	4b0e      	ldr	r3, [pc, #56]	@ (8024038 <handle_login+0xd4>)
 8023ffe:	9302      	str	r3, [sp, #8]
 8024000:	2300      	movs	r3, #0
 8024002:	9301      	str	r3, [sp, #4]
 8024004:	4b0b      	ldr	r3, [pc, #44]	@ (8024034 <handle_login+0xd0>)
 8024006:	9300      	str	r3, [sp, #0]
 8024008:	4b0c      	ldr	r3, [pc, #48]	@ (802403c <handle_login+0xd8>)
 802400a:	460a      	mov	r2, r1
 802400c:	21c8      	movs	r1, #200	@ 0xc8
 802400e:	6800      	ldr	r0, [r0, #0]
 8024010:	f7e7 fd50 	bl	800bab4 <mg_http_reply>
                MG_ESC("level"), u->level);
}
 8024014:	bf00      	nop
 8024016:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 802401a:	46bd      	mov	sp, r7
 802401c:	bd80      	pop	{r7, pc}
 802401e:	bf00      	nop
 8024020:	0802cc08 	.word	0x0802cc08
 8024024:	0802cc14 	.word	0x0802cc14
 8024028:	00015180 	.word	0x00015180
 802402c:	0802cc18 	.word	0x0802cc18
 8024030:	0802ca08 	.word	0x0802ca08
 8024034:	080135a9 	.word	0x080135a9
 8024038:	0802cc74 	.word	0x0802cc74
 802403c:	0802cc64 	.word	0x0802cc64

08024040 <handle_logout>:

static void handle_logout(struct mg_connection *c) {
 8024040:	b580      	push	{r7, lr}
 8024042:	b0c2      	sub	sp, #264	@ 0x108
 8024044:	af00      	add	r7, sp, #0
 8024046:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 802404a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 802404e:	6018      	str	r0, [r3, #0]
  char cookie[256];
  mg_snprintf(cookie, sizeof(cookie),
              "Set-Cookie: access_token=; Path=/; "
              "Expires=Thu, 01 Jan 1970 00:00:00 UTC; "
              "%sHttpOnly; Max-Age=0; \r\n",
              c->is_tls ? "Secure; " : "");
 8024050:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8024054:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8024058:	681b      	ldr	r3, [r3, #0]
 802405a:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 802405e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8024062:	b2db      	uxtb	r3, r3
  mg_snprintf(cookie, sizeof(cookie),
 8024064:	2b00      	cmp	r3, #0
 8024066:	d001      	beq.n	802406c <handle_logout+0x2c>
 8024068:	4b0d      	ldr	r3, [pc, #52]	@ (80240a0 <handle_logout+0x60>)
 802406a:	e000      	b.n	802406e <handle_logout+0x2e>
 802406c:	4b0d      	ldr	r3, [pc, #52]	@ (80240a4 <handle_logout+0x64>)
 802406e:	f107 0008 	add.w	r0, r7, #8
 8024072:	4a0d      	ldr	r2, [pc, #52]	@ (80240a8 <handle_logout+0x68>)
 8024074:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8024078:	f7ef f850 	bl	801311c <mg_snprintf>
  mg_http_reply(c, 401, cookie, "Unauthorized\n");
 802407c:	f107 0208 	add.w	r2, r7, #8
 8024080:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8024084:	f5a3 7082 	sub.w	r0, r3, #260	@ 0x104
 8024088:	4b08      	ldr	r3, [pc, #32]	@ (80240ac <handle_logout+0x6c>)
 802408a:	f240 1191 	movw	r1, #401	@ 0x191
 802408e:	6800      	ldr	r0, [r0, #0]
 8024090:	f7e7 fd10 	bl	800bab4 <mg_http_reply>
}
 8024094:	bf00      	nop
 8024096:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 802409a:	46bd      	mov	sp, r7
 802409c:	bd80      	pop	{r7, pc}
 802409e:	bf00      	nop
 80240a0:	0802cc08 	.word	0x0802cc08
 80240a4:	0802cc14 	.word	0x0802cc14
 80240a8:	0802cc7c 	.word	0x0802cc7c
 80240ac:	0802cce0 	.word	0x0802cce0

080240b0 <close_uploaded_file>:
struct action_state {
  char marker;       // Tells that we're an action connection
  bool (*fn)(void);  // Action status function
};

static void close_uploaded_file(struct upload_state *us) {
 80240b0:	b580      	push	{r7, lr}
 80240b2:	b082      	sub	sp, #8
 80240b4:	af00      	add	r7, sp, #0
 80240b6:	6078      	str	r0, [r7, #4]
  us->marker = 0;
 80240b8:	687b      	ldr	r3, [r7, #4]
 80240ba:	2200      	movs	r2, #0
 80240bc:	701a      	strb	r2, [r3, #0]
  if (us->fn_close != NULL && us->fp != NULL) {
 80240be:	687b      	ldr	r3, [r7, #4]
 80240c0:	691b      	ldr	r3, [r3, #16]
 80240c2:	2b00      	cmp	r3, #0
 80240c4:	d00c      	beq.n	80240e0 <close_uploaded_file+0x30>
 80240c6:	687b      	ldr	r3, [r7, #4]
 80240c8:	68db      	ldr	r3, [r3, #12]
 80240ca:	2b00      	cmp	r3, #0
 80240cc:	d008      	beq.n	80240e0 <close_uploaded_file+0x30>
    us->fn_close(us->fp);
 80240ce:	687b      	ldr	r3, [r7, #4]
 80240d0:	691b      	ldr	r3, [r3, #16]
 80240d2:	687a      	ldr	r2, [r7, #4]
 80240d4:	68d2      	ldr	r2, [r2, #12]
 80240d6:	4610      	mov	r0, r2
 80240d8:	4798      	blx	r3
    us->fp = NULL;
 80240da:	687b      	ldr	r3, [r7, #4]
 80240dc:	2200      	movs	r2, #0
 80240de:	60da      	str	r2, [r3, #12]
  }
  memset(us, 0, sizeof(*us));
 80240e0:	2218      	movs	r2, #24
 80240e2:	2100      	movs	r1, #0
 80240e4:	6878      	ldr	r0, [r7, #4]
 80240e6:	f003 faef 	bl	80276c8 <memset>
}
 80240ea:	bf00      	nop
 80240ec:	3708      	adds	r7, #8
 80240ee:	46bd      	mov	sp, r7
 80240f0:	bd80      	pop	{r7, pc}
	...

080240f4 <file_closer>:

static bool file_closer(void *p) {
 80240f4:	b580      	push	{r7, lr}
 80240f6:	b082      	sub	sp, #8
 80240f8:	af00      	add	r7, sp, #0
 80240fa:	6078      	str	r0, [r7, #4]
  mg_fs_close((struct mg_fd *) p);
 80240fc:	6878      	ldr	r0, [r7, #4]
 80240fe:	f7e5 ffb7 	bl	800a070 <mg_fs_close>
  MG_INFO(("AAAAAAAAA %p", p));
 8024102:	4b0a      	ldr	r3, [pc, #40]	@ (802412c <file_closer+0x38>)
 8024104:	681b      	ldr	r3, [r3, #0]
 8024106:	2b01      	cmp	r3, #1
 8024108:	dd0a      	ble.n	8024120 <file_closer+0x2c>
 802410a:	4b09      	ldr	r3, [pc, #36]	@ (8024130 <file_closer+0x3c>)
 802410c:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8024110:	4908      	ldr	r1, [pc, #32]	@ (8024134 <file_closer+0x40>)
 8024112:	2002      	movs	r0, #2
 8024114:	f7ea fbc6 	bl	800e8a4 <mg_log_prefix>
 8024118:	6879      	ldr	r1, [r7, #4]
 802411a:	4807      	ldr	r0, [pc, #28]	@ (8024138 <file_closer+0x44>)
 802411c:	f7ea fc12 	bl	800e944 <mg_log>
  return true;
 8024120:	2301      	movs	r3, #1
}
 8024122:	4618      	mov	r0, r3
 8024124:	3708      	adds	r7, #8
 8024126:	46bd      	mov	sp, r7
 8024128:	bd80      	pop	{r7, pc}
 802412a:	bf00      	nop
 802412c:	24000258 	.word	0x24000258
 8024130:	0803ae30 	.word	0x0803ae30
 8024134:	0802cb70 	.word	0x0802cb70
 8024138:	0802ccf0 	.word	0x0802ccf0

0802413c <file_writer>:

static bool file_writer(void *p, void *buf, size_t len) {
 802413c:	b580      	push	{r7, lr}
 802413e:	b086      	sub	sp, #24
 8024140:	af00      	add	r7, sp, #0
 8024142:	60f8      	str	r0, [r7, #12]
 8024144:	60b9      	str	r1, [r7, #8]
 8024146:	607a      	str	r2, [r7, #4]
  struct mg_fd *fd = (struct mg_fd *) p;
 8024148:	68fb      	ldr	r3, [r7, #12]
 802414a:	617b      	str	r3, [r7, #20]
  size_t written = fd->fs->wr(fd->fd, buf, len);
 802414c:	697b      	ldr	r3, [r7, #20]
 802414e:	685b      	ldr	r3, [r3, #4]
 8024150:	695b      	ldr	r3, [r3, #20]
 8024152:	697a      	ldr	r2, [r7, #20]
 8024154:	6810      	ldr	r0, [r2, #0]
 8024156:	687a      	ldr	r2, [r7, #4]
 8024158:	68b9      	ldr	r1, [r7, #8]
 802415a:	4798      	blx	r3
 802415c:	6138      	str	r0, [r7, #16]
  MG_INFO(("AAAAAAAAA %lu", written));
 802415e:	4b0d      	ldr	r3, [pc, #52]	@ (8024194 <file_writer+0x58>)
 8024160:	681b      	ldr	r3, [r3, #0]
 8024162:	2b01      	cmp	r3, #1
 8024164:	dd0a      	ble.n	802417c <file_writer+0x40>
 8024166:	4b0c      	ldr	r3, [pc, #48]	@ (8024198 <file_writer+0x5c>)
 8024168:	f240 1265 	movw	r2, #357	@ 0x165
 802416c:	490b      	ldr	r1, [pc, #44]	@ (802419c <file_writer+0x60>)
 802416e:	2002      	movs	r0, #2
 8024170:	f7ea fb98 	bl	800e8a4 <mg_log_prefix>
 8024174:	6939      	ldr	r1, [r7, #16]
 8024176:	480a      	ldr	r0, [pc, #40]	@ (80241a0 <file_writer+0x64>)
 8024178:	f7ea fbe4 	bl	800e944 <mg_log>
  return written == len;
 802417c:	693a      	ldr	r2, [r7, #16]
 802417e:	687b      	ldr	r3, [r7, #4]
 8024180:	429a      	cmp	r2, r3
 8024182:	bf0c      	ite	eq
 8024184:	2301      	moveq	r3, #1
 8024186:	2300      	movne	r3, #0
 8024188:	b2db      	uxtb	r3, r3
}
 802418a:	4618      	mov	r0, r3
 802418c:	3718      	adds	r7, #24
 802418e:	46bd      	mov	sp, r7
 8024190:	bd80      	pop	{r7, pc}
 8024192:	bf00      	nop
 8024194:	24000258 	.word	0x24000258
 8024198:	0803ae3c 	.word	0x0803ae3c
 802419c:	0802cb70 	.word	0x0802cb70
 80241a0:	0802cd00 	.word	0x0802cd00

080241a4 <upload_handler>:

static void upload_handler(struct mg_connection *c, int ev, void *ev_data) {
 80241a4:	b590      	push	{r4, r7, lr}
 80241a6:	b08d      	sub	sp, #52	@ 0x34
 80241a8:	af04      	add	r7, sp, #16
 80241aa:	60f8      	str	r0, [r7, #12]
 80241ac:	60b9      	str	r1, [r7, #8]
 80241ae:	607a      	str	r2, [r7, #4]
  struct upload_state *us = (struct upload_state *) c->data;
 80241b0:	68fb      	ldr	r3, [r7, #12]
 80241b2:	3388      	adds	r3, #136	@ 0x88
 80241b4:	61fb      	str	r3, [r7, #28]
        c, "FAILURE: sizeof(c->data) == %lu, need %lu. Set -DMG_DATA_SIZE=XXX",
        sizeof(c->data), sizeof(*us));
    return;
  }
  // Catch uploaded file data for both MG_EV_READ and MG_EV_HTTP_HDRS
  if (us->marker == 'U' && ev == MG_EV_READ && us->expected > 0 &&
 80241b6:	69fb      	ldr	r3, [r7, #28]
 80241b8:	781b      	ldrb	r3, [r3, #0]
 80241ba:	2b55      	cmp	r3, #85	@ 0x55
 80241bc:	f040 80ae 	bne.w	802431c <upload_handler+0x178>
 80241c0:	68bb      	ldr	r3, [r7, #8]
 80241c2:	2b07      	cmp	r3, #7
 80241c4:	f040 80aa 	bne.w	802431c <upload_handler+0x178>
 80241c8:	69fb      	ldr	r3, [r7, #28]
 80241ca:	685b      	ldr	r3, [r3, #4]
 80241cc:	2b00      	cmp	r3, #0
 80241ce:	f000 80a5 	beq.w	802431c <upload_handler+0x178>
      c->recv.len > 0) {
 80241d2:	68fb      	ldr	r3, [r7, #12]
 80241d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
  if (us->marker == 'U' && ev == MG_EV_READ && us->expected > 0 &&
 80241d6:	2b00      	cmp	r3, #0
 80241d8:	f000 80a0 	beq.w	802431c <upload_handler+0x178>
    size_t alignment = 512;  // Maximum flash write granularity (iMXRT, Pico)
 80241dc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80241e0:	61bb      	str	r3, [r7, #24]
    size_t aligned = (us->received + c->recv.len < us->expected)
 80241e2:	69fb      	ldr	r3, [r7, #28]
 80241e4:	689a      	ldr	r2, [r3, #8]
 80241e6:	68fb      	ldr	r3, [r7, #12]
 80241e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80241ea:	441a      	add	r2, r3
 80241ec:	69fb      	ldr	r3, [r7, #28]
 80241ee:	685b      	ldr	r3, [r3, #4]
                         ? aligned = MG_ROUND_DOWN(c->recv.len, alignment)
                         : c->recv.len;  // Last write can be unaligned
 80241f0:	429a      	cmp	r2, r3
 80241f2:	d210      	bcs.n	8024216 <upload_handler+0x72>
                         ? aligned = MG_ROUND_DOWN(c->recv.len, alignment)
 80241f4:	69bb      	ldr	r3, [r7, #24]
 80241f6:	2b00      	cmp	r3, #0
 80241f8:	d102      	bne.n	8024200 <upload_handler+0x5c>
 80241fa:	68fb      	ldr	r3, [r7, #12]
 80241fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80241fe:	e007      	b.n	8024210 <upload_handler+0x6c>
 8024200:	68fb      	ldr	r3, [r7, #12]
 8024202:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8024204:	69bb      	ldr	r3, [r7, #24]
 8024206:	fbb2 f3f3 	udiv	r3, r2, r3
 802420a:	69ba      	ldr	r2, [r7, #24]
 802420c:	fb02 f303 	mul.w	r3, r2, r3
 8024210:	617b      	str	r3, [r7, #20]
                         : c->recv.len;  // Last write can be unaligned
 8024212:	697b      	ldr	r3, [r7, #20]
 8024214:	e001      	b.n	802421a <upload_handler+0x76>
 8024216:	68fb      	ldr	r3, [r7, #12]
 8024218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
    size_t aligned = (us->received + c->recv.len < us->expected)
 802421a:	617b      	str	r3, [r7, #20]
    bool ok = aligned > 0 ? us->fn_write(us->fp, c->recv.buf, aligned) : true;
 802421c:	697b      	ldr	r3, [r7, #20]
 802421e:	2b00      	cmp	r3, #0
 8024220:	d00a      	beq.n	8024238 <upload_handler+0x94>
 8024222:	69fb      	ldr	r3, [r7, #28]
 8024224:	695b      	ldr	r3, [r3, #20]
 8024226:	69fa      	ldr	r2, [r7, #28]
 8024228:	68d0      	ldr	r0, [r2, #12]
 802422a:	68fa      	ldr	r2, [r7, #12]
 802422c:	6b91      	ldr	r1, [r2, #56]	@ 0x38
 802422e:	697a      	ldr	r2, [r7, #20]
 8024230:	4798      	blx	r3
 8024232:	4603      	mov	r3, r0
 8024234:	2b00      	cmp	r3, #0
 8024236:	d001      	beq.n	802423c <upload_handler+0x98>
 8024238:	2301      	movs	r3, #1
 802423a:	e000      	b.n	802423e <upload_handler+0x9a>
 802423c:	2300      	movs	r3, #0
 802423e:	74fb      	strb	r3, [r7, #19]
    us->received += aligned;
 8024240:	69fb      	ldr	r3, [r7, #28]
 8024242:	689a      	ldr	r2, [r3, #8]
 8024244:	697b      	ldr	r3, [r7, #20]
 8024246:	441a      	add	r2, r3
 8024248:	69fb      	ldr	r3, [r7, #28]
 802424a:	609a      	str	r2, [r3, #8]
    MG_DEBUG(("%lu chunk: %lu/%lu, %lu/%lu, ok: %d", c->id, aligned,
 802424c:	4b3a      	ldr	r3, [pc, #232]	@ (8024338 <upload_handler+0x194>)
 802424e:	681b      	ldr	r3, [r3, #0]
 8024250:	2b02      	cmp	r3, #2
 8024252:	dd18      	ble.n	8024286 <upload_handler+0xe2>
 8024254:	4b39      	ldr	r3, [pc, #228]	@ (802433c <upload_handler+0x198>)
 8024256:	f44f 72bd 	mov.w	r2, #378	@ 0x17a
 802425a:	4939      	ldr	r1, [pc, #228]	@ (8024340 <upload_handler+0x19c>)
 802425c:	2003      	movs	r0, #3
 802425e:	f7ea fb21 	bl	800e8a4 <mg_log_prefix>
 8024262:	68fb      	ldr	r3, [r7, #12]
 8024264:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8024266:	68fb      	ldr	r3, [r7, #12]
 8024268:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 802426a:	69fb      	ldr	r3, [r7, #28]
 802426c:	689b      	ldr	r3, [r3, #8]
 802426e:	69fa      	ldr	r2, [r7, #28]
 8024270:	6852      	ldr	r2, [r2, #4]
 8024272:	7cf9      	ldrb	r1, [r7, #19]
 8024274:	9102      	str	r1, [sp, #8]
 8024276:	9201      	str	r2, [sp, #4]
 8024278:	9300      	str	r3, [sp, #0]
 802427a:	4623      	mov	r3, r4
 802427c:	697a      	ldr	r2, [r7, #20]
 802427e:	4601      	mov	r1, r0
 8024280:	4830      	ldr	r0, [pc, #192]	@ (8024344 <upload_handler+0x1a0>)
 8024282:	f7ea fb5f 	bl	800e944 <mg_log>
              c->recv.len, us->received, us->expected, ok));
    mg_iobuf_del(&c->recv, 0, aligned);  // Delete received data
 8024286:	68fb      	ldr	r3, [r7, #12]
 8024288:	3338      	adds	r3, #56	@ 0x38
 802428a:	697a      	ldr	r2, [r7, #20]
 802428c:	2100      	movs	r1, #0
 802428e:	4618      	mov	r0, r3
 8024290:	f7e9 faf0 	bl	800d874 <mg_iobuf_del>
    if (ok == false) {
 8024294:	7cfb      	ldrb	r3, [r7, #19]
 8024296:	f083 0301 	eor.w	r3, r3, #1
 802429a:	b2db      	uxtb	r3, r3
 802429c:	2b00      	cmp	r3, #0
 802429e:	d011      	beq.n	80242c4 <upload_handler+0x120>
      mg_http_reply(c, 400, "", "Upload error\n");
 80242a0:	4b29      	ldr	r3, [pc, #164]	@ (8024348 <upload_handler+0x1a4>)
 80242a2:	4a2a      	ldr	r2, [pc, #168]	@ (802434c <upload_handler+0x1a8>)
 80242a4:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80242a8:	68f8      	ldr	r0, [r7, #12]
 80242aa:	f7e7 fc03 	bl	800bab4 <mg_http_reply>
      close_uploaded_file(us);
 80242ae:	69f8      	ldr	r0, [r7, #28]
 80242b0:	f7ff fefe 	bl	80240b0 <close_uploaded_file>
      c->is_draining = 1;  // Close connection when response it sent
 80242b4:	68fa      	ldr	r2, [r7, #12]
 80242b6:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 80242ba:	f043 0310 	orr.w	r3, r3, #16
 80242be:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
 80242c2:	e02b      	b.n	802431c <upload_handler+0x178>
    } else if (us->received >= us->expected) {
 80242c4:	69fb      	ldr	r3, [r7, #28]
 80242c6:	689a      	ldr	r2, [r3, #8]
 80242c8:	69fb      	ldr	r3, [r7, #28]
 80242ca:	685b      	ldr	r3, [r3, #4]
 80242cc:	429a      	cmp	r2, r3
 80242ce:	d325      	bcc.n	802431c <upload_handler+0x178>
      // Uploaded everything. Send response back
      MG_INFO(("%lu done, %lu bytes", c->id, us->received));
 80242d0:	4b19      	ldr	r3, [pc, #100]	@ (8024338 <upload_handler+0x194>)
 80242d2:	681b      	ldr	r3, [r3, #0]
 80242d4:	2b01      	cmp	r3, #1
 80242d6:	dd0e      	ble.n	80242f6 <upload_handler+0x152>
 80242d8:	4b18      	ldr	r3, [pc, #96]	@ (802433c <upload_handler+0x198>)
 80242da:	f240 1283 	movw	r2, #387	@ 0x183
 80242de:	4918      	ldr	r1, [pc, #96]	@ (8024340 <upload_handler+0x19c>)
 80242e0:	2002      	movs	r0, #2
 80242e2:	f7ea fadf 	bl	800e8a4 <mg_log_prefix>
 80242e6:	68fb      	ldr	r3, [r7, #12]
 80242e8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80242ea:	69fb      	ldr	r3, [r7, #28]
 80242ec:	689b      	ldr	r3, [r3, #8]
 80242ee:	461a      	mov	r2, r3
 80242f0:	4817      	ldr	r0, [pc, #92]	@ (8024350 <upload_handler+0x1ac>)
 80242f2:	f7ea fb27 	bl	800e944 <mg_log>
      mg_http_reply(c, 200, NULL, "%lu ok\n", us->received);
 80242f6:	69fb      	ldr	r3, [r7, #28]
 80242f8:	689b      	ldr	r3, [r3, #8]
 80242fa:	9300      	str	r3, [sp, #0]
 80242fc:	4b15      	ldr	r3, [pc, #84]	@ (8024354 <upload_handler+0x1b0>)
 80242fe:	2200      	movs	r2, #0
 8024300:	21c8      	movs	r1, #200	@ 0xc8
 8024302:	68f8      	ldr	r0, [r7, #12]
 8024304:	f7e7 fbd6 	bl	800bab4 <mg_http_reply>
      close_uploaded_file(us);
 8024308:	69f8      	ldr	r0, [r7, #28]
 802430a:	f7ff fed1 	bl	80240b0 <close_uploaded_file>
      c->is_draining = 1;  // Close connection when response it sent
 802430e:	68fa      	ldr	r2, [r7, #12]
 8024310:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8024314:	f043 0310 	orr.w	r3, r3, #16
 8024318:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
    }
  }

  // Close uploading file descriptor
  if (us->marker == 'U' && ev == MG_EV_CLOSE) close_uploaded_file(us);
 802431c:	69fb      	ldr	r3, [r7, #28]
 802431e:	781b      	ldrb	r3, [r3, #0]
 8024320:	2b55      	cmp	r3, #85	@ 0x55
 8024322:	d105      	bne.n	8024330 <upload_handler+0x18c>
 8024324:	68bb      	ldr	r3, [r7, #8]
 8024326:	2b09      	cmp	r3, #9
 8024328:	d102      	bne.n	8024330 <upload_handler+0x18c>
 802432a:	69f8      	ldr	r0, [r7, #28]
 802432c:	f7ff fec0 	bl	80240b0 <close_uploaded_file>
  (void) ev_data;
}
 8024330:	3724      	adds	r7, #36	@ 0x24
 8024332:	46bd      	mov	sp, r7
 8024334:	bd90      	pop	{r4, r7, pc}
 8024336:	bf00      	nop
 8024338:	24000258 	.word	0x24000258
 802433c:	0803ae48 	.word	0x0803ae48
 8024340:	0802cb70 	.word	0x0802cb70
 8024344:	0802cd10 	.word	0x0802cd10
 8024348:	0802cd34 	.word	0x0802cd34
 802434c:	0802cc14 	.word	0x0802cc14
 8024350:	0802cd44 	.word	0x0802cd44
 8024354:	0802cd58 	.word	0x0802cd58

08024358 <get_file_name_from_uri>:

static void get_file_name_from_uri(struct mg_str uri, char *buf, size_t len) {
 8024358:	b590      	push	{r4, r7, lr}
 802435a:	b08f      	sub	sp, #60	@ 0x3c
 802435c:	af02      	add	r7, sp, #8
 802435e:	f107 0408 	add.w	r4, r7, #8
 8024362:	e884 0003 	stmia.w	r4, {r0, r1}
 8024366:	607a      	str	r2, [r7, #4]
 8024368:	603b      	str	r3, [r7, #0]
  struct mg_str parts[3];
  memset(parts, 0, sizeof(parts));           // Init match parts
 802436a:	f107 0310 	add.w	r3, r7, #16
 802436e:	2218      	movs	r2, #24
 8024370:	2100      	movs	r1, #0
 8024372:	4618      	mov	r0, r3
 8024374:	f003 f9a8 	bl	80276c8 <memset>
  mg_match(uri, mg_str("/api/*/#"), parts);  // Fetch file name
 8024378:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 802437c:	490d      	ldr	r1, [pc, #52]	@ (80243b4 <get_file_name_from_uri+0x5c>)
 802437e:	4618      	mov	r0, r3
 8024380:	f7f2 fa90 	bl	80168a4 <mg_str_s>
 8024384:	f107 0310 	add.w	r3, r7, #16
 8024388:	9300      	str	r3, [sp, #0]
 802438a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 802438e:	cb0c      	ldmia	r3, {r2, r3}
 8024390:	f107 0108 	add.w	r1, r7, #8
 8024394:	c903      	ldmia	r1, {r0, r1}
 8024396:	f7f2 fb8f 	bl	8016ab8 <mg_match>
  mg_url_decode(parts[1].buf, parts[1].len, buf, len, 0);
 802439a:	69b8      	ldr	r0, [r7, #24]
 802439c:	69f9      	ldr	r1, [r7, #28]
 802439e:	2300      	movs	r3, #0
 80243a0:	9300      	str	r3, [sp, #0]
 80243a2:	683b      	ldr	r3, [r7, #0]
 80243a4:	687a      	ldr	r2, [r7, #4]
 80243a6:	f7e6 fa1c 	bl	800a7e2 <mg_url_decode>
}
 80243aa:	bf00      	nop
 80243ac:	3734      	adds	r7, #52	@ 0x34
 80243ae:	46bd      	mov	sp, r7
 80243b0:	bd90      	pop	{r4, r7, pc}
 80243b2:	bf00      	nop
 80243b4:	0802cd60 	.word	0x0802cd60

080243b8 <prep_upload>:

static void prep_upload(struct mg_connection *c, struct mg_http_message *hm,
                        void *(*fn_open)(char *, size_t),
                        bool (*fn_close)(void *),
                        bool (*fn_write)(void *, void *, size_t)) {
 80243b8:	b580      	push	{r7, lr}
 80243ba:	b09e      	sub	sp, #120	@ 0x78
 80243bc:	af00      	add	r7, sp, #0
 80243be:	60f8      	str	r0, [r7, #12]
 80243c0:	60b9      	str	r1, [r7, #8]
 80243c2:	607a      	str	r2, [r7, #4]
 80243c4:	603b      	str	r3, [r7, #0]
  struct upload_state *us = (struct upload_state *) c->data;
 80243c6:	68fb      	ldr	r3, [r7, #12]
 80243c8:	3388      	adds	r3, #136	@ 0x88
 80243ca:	677b      	str	r3, [r7, #116]	@ 0x74
  char path[MG_PATH_MAX];
  memset(us, 0, sizeof(*us));  // Cleanup upload state
 80243cc:	2218      	movs	r2, #24
 80243ce:	2100      	movs	r1, #0
 80243d0:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 80243d2:	f003 f979 	bl	80276c8 <memset>
  get_file_name_from_uri(hm->uri, path, sizeof(path));
 80243d6:	f107 0210 	add.w	r2, r7, #16
 80243da:	68b9      	ldr	r1, [r7, #8]
 80243dc:	2364      	movs	r3, #100	@ 0x64
 80243de:	3108      	adds	r1, #8
 80243e0:	c903      	ldmia	r1, {r0, r1}
 80243e2:	f7ff ffb9 	bl	8024358 <get_file_name_from_uri>
  us->fp = fn_open(path, hm->body.len);
 80243e6:	68bb      	ldr	r3, [r7, #8]
 80243e8:	f8d3 1204 	ldr.w	r1, [r3, #516]	@ 0x204
 80243ec:	f107 0210 	add.w	r2, r7, #16
 80243f0:	687b      	ldr	r3, [r7, #4]
 80243f2:	4610      	mov	r0, r2
 80243f4:	4798      	blx	r3
 80243f6:	4602      	mov	r2, r0
 80243f8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80243fa:	60da      	str	r2, [r3, #12]
  MG_DEBUG(("file: [%s] size: %lu fp: %p", path, hm->body.len, us->fp));
 80243fc:	4b29      	ldr	r3, [pc, #164]	@ (80244a4 <prep_upload+0xec>)
 80243fe:	681b      	ldr	r3, [r3, #0]
 8024400:	2b02      	cmp	r3, #2
 8024402:	dd10      	ble.n	8024426 <prep_upload+0x6e>
 8024404:	4b28      	ldr	r3, [pc, #160]	@ (80244a8 <prep_upload+0xf0>)
 8024406:	f240 129f 	movw	r2, #415	@ 0x19f
 802440a:	4928      	ldr	r1, [pc, #160]	@ (80244ac <prep_upload+0xf4>)
 802440c:	2003      	movs	r0, #3
 802440e:	f7ea fa49 	bl	800e8a4 <mg_log_prefix>
 8024412:	68bb      	ldr	r3, [r7, #8]
 8024414:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8024418:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 802441a:	68db      	ldr	r3, [r3, #12]
 802441c:	f107 0110 	add.w	r1, r7, #16
 8024420:	4823      	ldr	r0, [pc, #140]	@ (80244b0 <prep_upload+0xf8>)
 8024422:	f7ea fa8f 	bl	800e944 <mg_log>
  us->marker = 'U';  // Mark us as an upload connection
 8024426:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8024428:	2255      	movs	r2, #85	@ 0x55
 802442a:	701a      	strb	r2, [r3, #0]
  if (us->fp == NULL) {
 802442c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 802442e:	68db      	ldr	r3, [r3, #12]
 8024430:	2b00      	cmp	r3, #0
 8024432:	d10e      	bne.n	8024452 <prep_upload+0x9a>
    mg_http_reply(c, 400, JSON_HEADERS, "File open error\n");
 8024434:	4b1f      	ldr	r3, [pc, #124]	@ (80244b4 <prep_upload+0xfc>)
 8024436:	4a20      	ldr	r2, [pc, #128]	@ (80244b8 <prep_upload+0x100>)
 8024438:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 802443c:	68f8      	ldr	r0, [r7, #12]
 802443e:	f7e7 fb39 	bl	800bab4 <mg_http_reply>
    c->is_draining = 1;
 8024442:	68fa      	ldr	r2, [r7, #12]
 8024444:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8024448:	f043 0310 	orr.w	r3, r3, #16
 802444c:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
    mg_iobuf_del(&c->recv, 0, hm->head.len);  // Delete HTTP headers
    c->fn = upload_handler;                   // Change event handler function
    c->pfn = NULL;                            // Detach HTTP handler
    mg_call(c, MG_EV_READ, &c->recv.len);     // Write initial data
  }
}
 8024450:	e023      	b.n	802449a <prep_upload+0xe2>
    us->expected = hm->body.len;              // Store number of bytes we expect
 8024452:	68bb      	ldr	r3, [r7, #8]
 8024454:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8024458:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 802445a:	605a      	str	r2, [r3, #4]
    us->fn_close = fn_close;                  // Store closing function
 802445c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 802445e:	683a      	ldr	r2, [r7, #0]
 8024460:	611a      	str	r2, [r3, #16]
    us->fn_write = fn_write;                  // Store writing function
 8024462:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8024464:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8024468:	615a      	str	r2, [r3, #20]
    mg_iobuf_del(&c->recv, 0, hm->head.len);  // Delete HTTP headers
 802446a:	68fb      	ldr	r3, [r7, #12]
 802446c:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8024470:	68bb      	ldr	r3, [r7, #8]
 8024472:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8024476:	461a      	mov	r2, r3
 8024478:	2100      	movs	r1, #0
 802447a:	f7e9 f9fb 	bl	800d874 <mg_iobuf_del>
    c->fn = upload_handler;                   // Change event handler function
 802447e:	68fb      	ldr	r3, [r7, #12]
 8024480:	4a0e      	ldr	r2, [pc, #56]	@ (80244bc <prep_upload+0x104>)
 8024482:	679a      	str	r2, [r3, #120]	@ 0x78
    c->pfn = NULL;                            // Detach HTTP handler
 8024484:	68fb      	ldr	r3, [r7, #12]
 8024486:	2200      	movs	r2, #0
 8024488:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    mg_call(c, MG_EV_READ, &c->recv.len);     // Write initial data
 802448c:	68fb      	ldr	r3, [r7, #12]
 802448e:	3340      	adds	r3, #64	@ 0x40
 8024490:	461a      	mov	r2, r3
 8024492:	2107      	movs	r1, #7
 8024494:	68f8      	ldr	r0, [r7, #12]
 8024496:	f7e4 fb6d 	bl	8008b74 <mg_call>
}
 802449a:	bf00      	nop
 802449c:	3778      	adds	r7, #120	@ 0x78
 802449e:	46bd      	mov	sp, r7
 80244a0:	bd80      	pop	{r7, pc}
 80244a2:	bf00      	nop
 80244a4:	24000258 	.word	0x24000258
 80244a8:	0803ae58 	.word	0x0803ae58
 80244ac:	0802cb70 	.word	0x0802cb70
 80244b0:	0802cd6c 	.word	0x0802cd6c
 80244b4:	0802cd88 	.word	0x0802cd88
 80244b8:	0802cd9c 	.word	0x0802cd9c
 80244bc:	080241a5 	.word	0x080241a5

080244c0 <handle_uploads>:

static void handle_uploads(struct mg_connection *c, int ev, void *ev_data) {
 80244c0:	b580      	push	{r7, lr}
 80244c2:	b08e      	sub	sp, #56	@ 0x38
 80244c4:	af02      	add	r7, sp, #8
 80244c6:	60f8      	str	r0, [r7, #12]
 80244c8:	60b9      	str	r1, [r7, #8]
 80244ca:	607a      	str	r2, [r7, #4]
  struct upload_state *us = (struct upload_state *) c->data;
 80244cc:	68fb      	ldr	r3, [r7, #12]
 80244ce:	3388      	adds	r3, #136	@ 0x88
 80244d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  struct mg_http_message *hm = (struct mg_http_message *) ev_data;
 80244d2:	687b      	ldr	r3, [r7, #4]
 80244d4:	62bb      	str	r3, [r7, #40]	@ 0x28

  // Catch /upload requests early, without buffering whole body
  // When we receive MG_EV_HTTP_HDRS event, that means we've received all
  // HTTP headers but not necessarily full HTTP body
  if (ev == MG_EV_HTTP_HDRS && us->marker == 0 &&
 80244d6:	68bb      	ldr	r3, [r7, #8]
 80244d8:	2b0a      	cmp	r3, #10
 80244da:	d153      	bne.n	8024584 <handle_uploads+0xc4>
 80244dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80244de:	781b      	ldrb	r3, [r3, #0]
 80244e0:	2b00      	cmp	r3, #0
 80244e2:	d14f      	bne.n	8024584 <handle_uploads+0xc4>
      mg_strcmp(hm->method, mg_str("POST")) == 0) {
 80244e4:	f107 0314 	add.w	r3, r7, #20
 80244e8:	4928      	ldr	r1, [pc, #160]	@ (802458c <handle_uploads+0xcc>)
 80244ea:	4618      	mov	r0, r3
 80244ec:	f7f2 f9da 	bl	80168a4 <mg_str_s>
 80244f0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80244f2:	f107 0314 	add.w	r3, r7, #20
 80244f6:	cb0c      	ldmia	r3, {r2, r3}
 80244f8:	c903      	ldmia	r1, {r0, r1}
 80244fa:	f7f2 fa54 	bl	80169a6 <mg_strcmp>
 80244fe:	4603      	mov	r3, r0
  if (ev == MG_EV_HTTP_HDRS && us->marker == 0 &&
 8024500:	2b00      	cmp	r3, #0
 8024502:	d13f      	bne.n	8024584 <handle_uploads+0xc4>
    struct apihandler *h = find_handler(hm);
 8024504:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8024506:	f7ff fbf1 	bl	8023cec <find_handler>
 802450a:	6278      	str	r0, [r7, #36]	@ 0x24
    if (h != NULL &&
 802450c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802450e:	2b00      	cmp	r3, #0
 8024510:	d021      	beq.n	8024556 <handle_uploads+0x96>
        (strcmp(h->type, "upload") == 0 || strcmp(h->type, "ota") == 0)) {
 8024512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8024514:	685b      	ldr	r3, [r3, #4]
 8024516:	491e      	ldr	r1, [pc, #120]	@ (8024590 <handle_uploads+0xd0>)
 8024518:	4618      	mov	r0, r3
 802451a:	f7db fef9 	bl	8000310 <strcmp>
 802451e:	4603      	mov	r3, r0
    if (h != NULL &&
 8024520:	2b00      	cmp	r3, #0
 8024522:	d008      	beq.n	8024536 <handle_uploads+0x76>
        (strcmp(h->type, "upload") == 0 || strcmp(h->type, "ota") == 0)) {
 8024524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8024526:	685b      	ldr	r3, [r3, #4]
 8024528:	491a      	ldr	r1, [pc, #104]	@ (8024594 <handle_uploads+0xd4>)
 802452a:	4618      	mov	r0, r3
 802452c:	f7db fef0 	bl	8000310 <strcmp>
 8024530:	4603      	mov	r3, r0
 8024532:	2b00      	cmp	r3, #0
 8024534:	d10f      	bne.n	8024556 <handle_uploads+0x96>
      struct apihandler_upload *hu = (struct apihandler_upload *) h;
 8024536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8024538:	623b      	str	r3, [r7, #32]
      prep_upload(c, hm, hu->opener, hu->closer, hu->writer);
 802453a:	6a3b      	ldr	r3, [r7, #32]
 802453c:	699a      	ldr	r2, [r3, #24]
 802453e:	6a3b      	ldr	r3, [r7, #32]
 8024540:	69d9      	ldr	r1, [r3, #28]
 8024542:	6a3b      	ldr	r3, [r7, #32]
 8024544:	6a1b      	ldr	r3, [r3, #32]
 8024546:	9300      	str	r3, [sp, #0]
 8024548:	460b      	mov	r3, r1
 802454a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 802454c:	68f8      	ldr	r0, [r7, #12]
 802454e:	f7ff ff33 	bl	80243b8 <prep_upload>
        (strcmp(h->type, "upload") == 0 || strcmp(h->type, "ota") == 0)) {
 8024552:	bf00      	nop
    } else if (h != NULL && strcmp(h->type, "file") == 0) {
      struct apihandler_file *hf = (struct apihandler_file *) h;
      prep_upload(c, hm, hf->opener, file_closer, file_writer);
    }
  }
}
 8024554:	e016      	b.n	8024584 <handle_uploads+0xc4>
    } else if (h != NULL && strcmp(h->type, "file") == 0) {
 8024556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8024558:	2b00      	cmp	r3, #0
 802455a:	d013      	beq.n	8024584 <handle_uploads+0xc4>
 802455c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802455e:	685b      	ldr	r3, [r3, #4]
 8024560:	490d      	ldr	r1, [pc, #52]	@ (8024598 <handle_uploads+0xd8>)
 8024562:	4618      	mov	r0, r3
 8024564:	f7db fed4 	bl	8000310 <strcmp>
 8024568:	4603      	mov	r3, r0
 802456a:	2b00      	cmp	r3, #0
 802456c:	d10a      	bne.n	8024584 <handle_uploads+0xc4>
      struct apihandler_file *hf = (struct apihandler_file *) h;
 802456e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8024570:	61fb      	str	r3, [r7, #28]
      prep_upload(c, hm, hf->opener, file_closer, file_writer);
 8024572:	69fb      	ldr	r3, [r7, #28]
 8024574:	699a      	ldr	r2, [r3, #24]
 8024576:	4b09      	ldr	r3, [pc, #36]	@ (802459c <handle_uploads+0xdc>)
 8024578:	9300      	str	r3, [sp, #0]
 802457a:	4b09      	ldr	r3, [pc, #36]	@ (80245a0 <handle_uploads+0xe0>)
 802457c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 802457e:	68f8      	ldr	r0, [r7, #12]
 8024580:	f7ff ff1a 	bl	80243b8 <prep_upload>
}
 8024584:	bf00      	nop
 8024586:	3730      	adds	r7, #48	@ 0x30
 8024588:	46bd      	mov	sp, r7
 802458a:	bd80      	pop	{r7, pc}
 802458c:	0802cdd8 	.word	0x0802cdd8
 8024590:	0802caf4 	.word	0x0802caf4
 8024594:	0802cae4 	.word	0x0802cae4
 8024598:	0802cba4 	.word	0x0802cba4
 802459c:	0802413d 	.word	0x0802413d
 80245a0:	080240f5 	.word	0x080240f5

080245a4 <handle_action>:

static void handle_action(struct mg_connection *c, struct mg_http_message *hm,
                          bool (*check_fn)(void),
                          void (*start_fn)(struct mg_str)) {
 80245a4:	b580      	push	{r7, lr}
 80245a6:	b088      	sub	sp, #32
 80245a8:	af02      	add	r7, sp, #8
 80245aa:	60f8      	str	r0, [r7, #12]
 80245ac:	60b9      	str	r1, [r7, #8]
 80245ae:	607a      	str	r2, [r7, #4]
 80245b0:	603b      	str	r3, [r7, #0]
  if (hm->body.len > 0) {
 80245b2:	68bb      	ldr	r3, [r7, #8]
 80245b4:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80245b8:	2b00      	cmp	r3, #0
 80245ba:	d01c      	beq.n	80245f6 <handle_action+0x52>
    start_fn(hm->body);
 80245bc:	68ba      	ldr	r2, [r7, #8]
 80245be:	683b      	ldr	r3, [r7, #0]
 80245c0:	f502 7200 	add.w	r2, r2, #512	@ 0x200
 80245c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80245c8:	4798      	blx	r3
    if (check_fn()) {
 80245ca:	687b      	ldr	r3, [r7, #4]
 80245cc:	4798      	blx	r3
 80245ce:	4603      	mov	r3, r0
 80245d0:	2b00      	cmp	r3, #0
 80245d2:	d009      	beq.n	80245e8 <handle_action+0x44>
      struct action_state *as = (struct action_state *) c->data;
 80245d4:	68fb      	ldr	r3, [r7, #12]
 80245d6:	3388      	adds	r3, #136	@ 0x88
 80245d8:	617b      	str	r3, [r7, #20]
      as->marker = 'A';
 80245da:	697b      	ldr	r3, [r7, #20]
 80245dc:	2241      	movs	r2, #65	@ 0x41
 80245de:	701a      	strb	r2, [r3, #0]
      as->fn = check_fn;
 80245e0:	697b      	ldr	r3, [r7, #20]
 80245e2:	687a      	ldr	r2, [r7, #4]
 80245e4:	605a      	str	r2, [r3, #4]
      mg_http_reply(c, 200, JSON_HEADERS, "false");
    }
  } else {
    mg_http_reply(c, 200, JSON_HEADERS, "%s", check_fn() ? "true" : "false");
  }
}
 80245e6:	e015      	b.n	8024614 <handle_action+0x70>
      mg_http_reply(c, 200, JSON_HEADERS, "false");
 80245e8:	4b0c      	ldr	r3, [pc, #48]	@ (802461c <handle_action+0x78>)
 80245ea:	4a0d      	ldr	r2, [pc, #52]	@ (8024620 <handle_action+0x7c>)
 80245ec:	21c8      	movs	r1, #200	@ 0xc8
 80245ee:	68f8      	ldr	r0, [r7, #12]
 80245f0:	f7e7 fa60 	bl	800bab4 <mg_http_reply>
}
 80245f4:	e00e      	b.n	8024614 <handle_action+0x70>
    mg_http_reply(c, 200, JSON_HEADERS, "%s", check_fn() ? "true" : "false");
 80245f6:	687b      	ldr	r3, [r7, #4]
 80245f8:	4798      	blx	r3
 80245fa:	4603      	mov	r3, r0
 80245fc:	2b00      	cmp	r3, #0
 80245fe:	d001      	beq.n	8024604 <handle_action+0x60>
 8024600:	4b08      	ldr	r3, [pc, #32]	@ (8024624 <handle_action+0x80>)
 8024602:	e000      	b.n	8024606 <handle_action+0x62>
 8024604:	4b05      	ldr	r3, [pc, #20]	@ (802461c <handle_action+0x78>)
 8024606:	9300      	str	r3, [sp, #0]
 8024608:	4b07      	ldr	r3, [pc, #28]	@ (8024628 <handle_action+0x84>)
 802460a:	4a05      	ldr	r2, [pc, #20]	@ (8024620 <handle_action+0x7c>)
 802460c:	21c8      	movs	r1, #200	@ 0xc8
 802460e:	68f8      	ldr	r0, [r7, #12]
 8024610:	f7e7 fa50 	bl	800bab4 <mg_http_reply>
}
 8024614:	bf00      	nop
 8024616:	3718      	adds	r7, #24
 8024618:	46bd      	mov	sp, r7
 802461a:	bd80      	pop	{r7, pc}
 802461c:	0802cde0 	.word	0x0802cde0
 8024620:	0802cd9c 	.word	0x0802cd9c
 8024624:	0802cde8 	.word	0x0802cde8
 8024628:	0802cbe8 	.word	0x0802cbe8

0802462c <print_struct>:

size_t print_struct(void (*out)(char, void *), void *ptr, va_list *ap) {
 802462c:	b580      	push	{r7, lr}
 802462e:	b08e      	sub	sp, #56	@ 0x38
 8024630:	af04      	add	r7, sp, #16
 8024632:	60f8      	str	r0, [r7, #12]
 8024634:	60b9      	str	r1, [r7, #8]
 8024636:	607a      	str	r2, [r7, #4]
  const struct attribute *a = va_arg(*ap, struct attribute *);
 8024638:	687b      	ldr	r3, [r7, #4]
 802463a:	681b      	ldr	r3, [r3, #0]
 802463c:	1d19      	adds	r1, r3, #4
 802463e:	687a      	ldr	r2, [r7, #4]
 8024640:	6011      	str	r1, [r2, #0]
 8024642:	681b      	ldr	r3, [r3, #0]
 8024644:	61bb      	str	r3, [r7, #24]
  char *data = va_arg(*ap, char *);
 8024646:	687b      	ldr	r3, [r7, #4]
 8024648:	681b      	ldr	r3, [r3, #0]
 802464a:	1d19      	adds	r1, r3, #4
 802464c:	687a      	ldr	r2, [r7, #4]
 802464e:	6011      	str	r1, [r2, #0]
 8024650:	681b      	ldr	r3, [r3, #0]
 8024652:	617b      	str	r3, [r7, #20]
  size_t i, len = 0;
 8024654:	2300      	movs	r3, #0
 8024656:	623b      	str	r3, [r7, #32]
  for (i = 0; a[i].name != NULL; i++) {
 8024658:	2300      	movs	r3, #0
 802465a:	627b      	str	r3, [r7, #36]	@ 0x24
 802465c:	e0bf      	b.n	80247de <print_struct+0x1b2>
    char *attrptr = data + a[i].offset;
 802465e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8024660:	4613      	mov	r3, r2
 8024662:	005b      	lsls	r3, r3, #1
 8024664:	4413      	add	r3, r2
 8024666:	00db      	lsls	r3, r3, #3
 8024668:	461a      	mov	r2, r3
 802466a:	69bb      	ldr	r3, [r7, #24]
 802466c:	4413      	add	r3, r2
 802466e:	68db      	ldr	r3, [r3, #12]
 8024670:	697a      	ldr	r2, [r7, #20]
 8024672:	4413      	add	r3, r2
 8024674:	613b      	str	r3, [r7, #16]
    len += mg_xprintf(out, ptr, "%s%m:", i == 0 ? "" : ",", MG_ESC(a[i].name));
 8024676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8024678:	2b00      	cmp	r3, #0
 802467a:	d101      	bne.n	8024680 <print_struct+0x54>
 802467c:	4960      	ldr	r1, [pc, #384]	@ (8024800 <print_struct+0x1d4>)
 802467e:	e000      	b.n	8024682 <print_struct+0x56>
 8024680:	4960      	ldr	r1, [pc, #384]	@ (8024804 <print_struct+0x1d8>)
 8024682:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8024684:	4613      	mov	r3, r2
 8024686:	005b      	lsls	r3, r3, #1
 8024688:	4413      	add	r3, r2
 802468a:	00db      	lsls	r3, r3, #3
 802468c:	461a      	mov	r2, r3
 802468e:	69bb      	ldr	r3, [r7, #24]
 8024690:	4413      	add	r3, r2
 8024692:	681b      	ldr	r3, [r3, #0]
 8024694:	9302      	str	r3, [sp, #8]
 8024696:	2300      	movs	r3, #0
 8024698:	9301      	str	r3, [sp, #4]
 802469a:	4b5b      	ldr	r3, [pc, #364]	@ (8024808 <print_struct+0x1dc>)
 802469c:	9300      	str	r3, [sp, #0]
 802469e:	460b      	mov	r3, r1
 80246a0:	4a5a      	ldr	r2, [pc, #360]	@ (802480c <print_struct+0x1e0>)
 80246a2:	68b9      	ldr	r1, [r7, #8]
 80246a4:	68f8      	ldr	r0, [r7, #12]
 80246a6:	f7e5 f8fc 	bl	80098a2 <mg_xprintf>
 80246aa:	4602      	mov	r2, r0
 80246ac:	6a3b      	ldr	r3, [r7, #32]
 80246ae:	4413      	add	r3, r2
 80246b0:	623b      	str	r3, [r7, #32]
    if (strcmp(a[i].type, "int") == 0) {
 80246b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80246b4:	4613      	mov	r3, r2
 80246b6:	005b      	lsls	r3, r3, #1
 80246b8:	4413      	add	r3, r2
 80246ba:	00db      	lsls	r3, r3, #3
 80246bc:	461a      	mov	r2, r3
 80246be:	69bb      	ldr	r3, [r7, #24]
 80246c0:	4413      	add	r3, r2
 80246c2:	685b      	ldr	r3, [r3, #4]
 80246c4:	4952      	ldr	r1, [pc, #328]	@ (8024810 <print_struct+0x1e4>)
 80246c6:	4618      	mov	r0, r3
 80246c8:	f7db fe22 	bl	8000310 <strcmp>
 80246cc:	4603      	mov	r3, r0
 80246ce:	2b00      	cmp	r3, #0
 80246d0:	d10b      	bne.n	80246ea <print_struct+0xbe>
      len += mg_xprintf(out, ptr, "%d", *(int *) attrptr);
 80246d2:	693b      	ldr	r3, [r7, #16]
 80246d4:	681b      	ldr	r3, [r3, #0]
 80246d6:	4a4f      	ldr	r2, [pc, #316]	@ (8024814 <print_struct+0x1e8>)
 80246d8:	68b9      	ldr	r1, [r7, #8]
 80246da:	68f8      	ldr	r0, [r7, #12]
 80246dc:	f7e5 f8e1 	bl	80098a2 <mg_xprintf>
 80246e0:	4602      	mov	r2, r0
 80246e2:	6a3b      	ldr	r3, [r7, #32]
 80246e4:	4413      	add	r3, r2
 80246e6:	623b      	str	r3, [r7, #32]
 80246e8:	e076      	b.n	80247d8 <print_struct+0x1ac>
    } else if (strcmp(a[i].type, "double") == 0) {
 80246ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80246ec:	4613      	mov	r3, r2
 80246ee:	005b      	lsls	r3, r3, #1
 80246f0:	4413      	add	r3, r2
 80246f2:	00db      	lsls	r3, r3, #3
 80246f4:	461a      	mov	r2, r3
 80246f6:	69bb      	ldr	r3, [r7, #24]
 80246f8:	4413      	add	r3, r2
 80246fa:	685b      	ldr	r3, [r3, #4]
 80246fc:	4946      	ldr	r1, [pc, #280]	@ (8024818 <print_struct+0x1ec>)
 80246fe:	4618      	mov	r0, r3
 8024700:	f7db fe06 	bl	8000310 <strcmp>
 8024704:	4603      	mov	r3, r0
 8024706:	2b00      	cmp	r3, #0
 8024708:	d11d      	bne.n	8024746 <print_struct+0x11a>
      const char *fmt = a[i].format;
 802470a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 802470c:	4613      	mov	r3, r2
 802470e:	005b      	lsls	r3, r3, #1
 8024710:	4413      	add	r3, r2
 8024712:	00db      	lsls	r3, r3, #3
 8024714:	461a      	mov	r2, r3
 8024716:	69bb      	ldr	r3, [r7, #24]
 8024718:	4413      	add	r3, r2
 802471a:	689b      	ldr	r3, [r3, #8]
 802471c:	61fb      	str	r3, [r7, #28]
      if (fmt == NULL) fmt = "%g";
 802471e:	69fb      	ldr	r3, [r7, #28]
 8024720:	2b00      	cmp	r3, #0
 8024722:	d101      	bne.n	8024728 <print_struct+0xfc>
 8024724:	4b3d      	ldr	r3, [pc, #244]	@ (802481c <print_struct+0x1f0>)
 8024726:	61fb      	str	r3, [r7, #28]
      len += mg_xprintf(out, ptr, fmt, *(double *) attrptr);
 8024728:	693b      	ldr	r3, [r7, #16]
 802472a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802472e:	e9cd 2300 	strd	r2, r3, [sp]
 8024732:	69fa      	ldr	r2, [r7, #28]
 8024734:	68b9      	ldr	r1, [r7, #8]
 8024736:	68f8      	ldr	r0, [r7, #12]
 8024738:	f7e5 f8b3 	bl	80098a2 <mg_xprintf>
 802473c:	4602      	mov	r2, r0
 802473e:	6a3b      	ldr	r3, [r7, #32]
 8024740:	4413      	add	r3, r2
 8024742:	623b      	str	r3, [r7, #32]
 8024744:	e048      	b.n	80247d8 <print_struct+0x1ac>
    } else if (strcmp(a[i].type, "bool") == 0) {
 8024746:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8024748:	4613      	mov	r3, r2
 802474a:	005b      	lsls	r3, r3, #1
 802474c:	4413      	add	r3, r2
 802474e:	00db      	lsls	r3, r3, #3
 8024750:	461a      	mov	r2, r3
 8024752:	69bb      	ldr	r3, [r7, #24]
 8024754:	4413      	add	r3, r2
 8024756:	685b      	ldr	r3, [r3, #4]
 8024758:	4931      	ldr	r1, [pc, #196]	@ (8024820 <print_struct+0x1f4>)
 802475a:	4618      	mov	r0, r3
 802475c:	f7db fdd8 	bl	8000310 <strcmp>
 8024760:	4603      	mov	r3, r0
 8024762:	2b00      	cmp	r3, #0
 8024764:	d110      	bne.n	8024788 <print_struct+0x15c>
      len += mg_xprintf(out, ptr, "%s", *(bool *) attrptr ? "true" : "false");
 8024766:	693b      	ldr	r3, [r7, #16]
 8024768:	781b      	ldrb	r3, [r3, #0]
 802476a:	2b00      	cmp	r3, #0
 802476c:	d001      	beq.n	8024772 <print_struct+0x146>
 802476e:	4b2d      	ldr	r3, [pc, #180]	@ (8024824 <print_struct+0x1f8>)
 8024770:	e000      	b.n	8024774 <print_struct+0x148>
 8024772:	4b2d      	ldr	r3, [pc, #180]	@ (8024828 <print_struct+0x1fc>)
 8024774:	4a2d      	ldr	r2, [pc, #180]	@ (802482c <print_struct+0x200>)
 8024776:	68b9      	ldr	r1, [r7, #8]
 8024778:	68f8      	ldr	r0, [r7, #12]
 802477a:	f7e5 f892 	bl	80098a2 <mg_xprintf>
 802477e:	4602      	mov	r2, r0
 8024780:	6a3b      	ldr	r3, [r7, #32]
 8024782:	4413      	add	r3, r2
 8024784:	623b      	str	r3, [r7, #32]
 8024786:	e027      	b.n	80247d8 <print_struct+0x1ac>
    } else if (strcmp(a[i].type, "string") == 0) {
 8024788:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 802478a:	4613      	mov	r3, r2
 802478c:	005b      	lsls	r3, r3, #1
 802478e:	4413      	add	r3, r2
 8024790:	00db      	lsls	r3, r3, #3
 8024792:	461a      	mov	r2, r3
 8024794:	69bb      	ldr	r3, [r7, #24]
 8024796:	4413      	add	r3, r2
 8024798:	685b      	ldr	r3, [r3, #4]
 802479a:	4925      	ldr	r1, [pc, #148]	@ (8024830 <print_struct+0x204>)
 802479c:	4618      	mov	r0, r3
 802479e:	f7db fdb7 	bl	8000310 <strcmp>
 80247a2:	4603      	mov	r3, r0
 80247a4:	2b00      	cmp	r3, #0
 80247a6:	d10e      	bne.n	80247c6 <print_struct+0x19a>
      len += mg_xprintf(out, ptr, "%m", MG_ESC(attrptr));
 80247a8:	693b      	ldr	r3, [r7, #16]
 80247aa:	9301      	str	r3, [sp, #4]
 80247ac:	2300      	movs	r3, #0
 80247ae:	9300      	str	r3, [sp, #0]
 80247b0:	4b15      	ldr	r3, [pc, #84]	@ (8024808 <print_struct+0x1dc>)
 80247b2:	4a20      	ldr	r2, [pc, #128]	@ (8024834 <print_struct+0x208>)
 80247b4:	68b9      	ldr	r1, [r7, #8]
 80247b6:	68f8      	ldr	r0, [r7, #12]
 80247b8:	f7e5 f873 	bl	80098a2 <mg_xprintf>
 80247bc:	4602      	mov	r2, r0
 80247be:	6a3b      	ldr	r3, [r7, #32]
 80247c0:	4413      	add	r3, r2
 80247c2:	623b      	str	r3, [r7, #32]
 80247c4:	e008      	b.n	80247d8 <print_struct+0x1ac>
    } else {
      len += mg_xprintf(out, ptr, "null");
 80247c6:	4a1c      	ldr	r2, [pc, #112]	@ (8024838 <print_struct+0x20c>)
 80247c8:	68b9      	ldr	r1, [r7, #8]
 80247ca:	68f8      	ldr	r0, [r7, #12]
 80247cc:	f7e5 f869 	bl	80098a2 <mg_xprintf>
 80247d0:	4602      	mov	r2, r0
 80247d2:	6a3b      	ldr	r3, [r7, #32]
 80247d4:	4413      	add	r3, r2
 80247d6:	623b      	str	r3, [r7, #32]
  for (i = 0; a[i].name != NULL; i++) {
 80247d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80247da:	3301      	adds	r3, #1
 80247dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80247de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80247e0:	4613      	mov	r3, r2
 80247e2:	005b      	lsls	r3, r3, #1
 80247e4:	4413      	add	r3, r2
 80247e6:	00db      	lsls	r3, r3, #3
 80247e8:	461a      	mov	r2, r3
 80247ea:	69bb      	ldr	r3, [r7, #24]
 80247ec:	4413      	add	r3, r2
 80247ee:	681b      	ldr	r3, [r3, #0]
 80247f0:	2b00      	cmp	r3, #0
 80247f2:	f47f af34 	bne.w	802465e <print_struct+0x32>
    }
  }
  return len;
 80247f6:	6a3b      	ldr	r3, [r7, #32]
}
 80247f8:	4618      	mov	r0, r3
 80247fa:	3728      	adds	r7, #40	@ 0x28
 80247fc:	46bd      	mov	sp, r7
 80247fe:	bd80      	pop	{r7, pc}
 8024800:	0802cc14 	.word	0x0802cc14
 8024804:	0802cdf0 	.word	0x0802cdf0
 8024808:	080135a9 	.word	0x080135a9
 802480c:	0802cdf4 	.word	0x0802cdf4
 8024810:	0802c9bc 	.word	0x0802c9bc
 8024814:	0802cdfc 	.word	0x0802cdfc
 8024818:	0802ca74 	.word	0x0802ca74
 802481c:	0802ce00 	.word	0x0802ce00
 8024820:	0802c9f8 	.word	0x0802c9f8
 8024824:	0802cde8 	.word	0x0802cde8
 8024828:	0802cde0 	.word	0x0802cde0
 802482c:	0802cbe8 	.word	0x0802cbe8
 8024830:	0802c9e8 	.word	0x0802c9e8
 8024834:	0802ce04 	.word	0x0802ce04
 8024838:	0802ce08 	.word	0x0802ce08

0802483c <handle_object>:

static void handle_object(struct mg_connection *c, struct mg_http_message *hm,
                          struct apihandler_data *h) {
 802483c:	b580      	push	{r7, lr}
 802483e:	b0a8      	sub	sp, #160	@ 0xa0
 8024840:	af04      	add	r7, sp, #16
 8024842:	60f8      	str	r0, [r7, #12]
 8024844:	60b9      	str	r1, [r7, #8]
 8024846:	607a      	str	r2, [r7, #4]
  void *data = calloc(1, h->data_size);
 8024848:	687b      	ldr	r3, [r7, #4]
 802484a:	69db      	ldr	r3, [r3, #28]
 802484c:	4619      	mov	r1, r3
 802484e:	2001      	movs	r0, #1
 8024850:	f001 f88c 	bl	802596c <calloc>
 8024854:	4603      	mov	r3, r0
 8024856:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  h->getter(data);
 802485a:	687b      	ldr	r3, [r7, #4]
 802485c:	6a1b      	ldr	r3, [r3, #32]
 802485e:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8024862:	4798      	blx	r3
  if (hm->body.len > 0 && h->data_size > 0) {
 8024864:	68bb      	ldr	r3, [r7, #8]
 8024866:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 802486a:	2b00      	cmp	r3, #0
 802486c:	f000 80da 	beq.w	8024a24 <handle_object+0x1e8>
 8024870:	687b      	ldr	r3, [r7, #4]
 8024872:	69db      	ldr	r3, [r3, #28]
 8024874:	2b00      	cmp	r3, #0
 8024876:	f000 80d5 	beq.w	8024a24 <handle_object+0x1e8>
    char *tmp = calloc(1, h->data_size);
 802487a:	687b      	ldr	r3, [r7, #4]
 802487c:	69db      	ldr	r3, [r3, #28]
 802487e:	4619      	mov	r1, r3
 8024880:	2001      	movs	r0, #1
 8024882:	f001 f873 	bl	802596c <calloc>
 8024886:	4603      	mov	r3, r0
 8024888:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    size_t i;
    memcpy(tmp, data, h->data_size);
 802488c:	687b      	ldr	r3, [r7, #4]
 802488e:	69db      	ldr	r3, [r3, #28]
 8024890:	461a      	mov	r2, r3
 8024892:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 8024896:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 802489a:	f003 f84e 	bl	802793a <memcpy>
    for (i = 0; h->attributes[i].name != NULL; i++) {
 802489e:	2300      	movs	r3, #0
 80248a0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80248a4:	e08e      	b.n	80249c4 <handle_object+0x188>
      const struct attribute *a = &h->attributes[i];
 80248a6:	687b      	ldr	r3, [r7, #4]
 80248a8:	6999      	ldr	r1, [r3, #24]
 80248aa:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80248ae:	4613      	mov	r3, r2
 80248b0:	005b      	lsls	r3, r3, #1
 80248b2:	4413      	add	r3, r2
 80248b4:	00db      	lsls	r3, r3, #3
 80248b6:	440b      	add	r3, r1
 80248b8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
      char jpath[100];
      mg_snprintf(jpath, sizeof(jpath), "$.%s", a->name);
 80248bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80248c0:	681b      	ldr	r3, [r3, #0]
 80248c2:	f107 0010 	add.w	r0, r7, #16
 80248c6:	4a62      	ldr	r2, [pc, #392]	@ (8024a50 <handle_object+0x214>)
 80248c8:	2164      	movs	r1, #100	@ 0x64
 80248ca:	f7ee fc27 	bl	801311c <mg_snprintf>
      if (strcmp(a->type, "int") == 0) {
 80248ce:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80248d2:	685b      	ldr	r3, [r3, #4]
 80248d4:	495f      	ldr	r1, [pc, #380]	@ (8024a54 <handle_object+0x218>)
 80248d6:	4618      	mov	r0, r3
 80248d8:	f7db fd1a 	bl	8000310 <strcmp>
 80248dc:	4603      	mov	r3, r0
 80248de:	2b00      	cmp	r3, #0
 80248e0:	d11c      	bne.n	802491c <handle_object+0xe0>
        double d;
        if (mg_json_get_num(hm->body, jpath, &d)) {
 80248e2:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80248e6:	f107 0210 	add.w	r2, r7, #16
 80248ea:	68b9      	ldr	r1, [r7, #8]
 80248ec:	f501 7100 	add.w	r1, r1, #512	@ 0x200
 80248f0:	c903      	ldmia	r1, {r0, r1}
 80248f2:	f7e9 fe98 	bl	800e626 <mg_json_get_num>
 80248f6:	4603      	mov	r3, r0
 80248f8:	2b00      	cmp	r3, #0
 80248fa:	d05e      	beq.n	80249ba <handle_object+0x17e>
          int v = (int) d;
 80248fc:	ed97 7b1e 	vldr	d7, [r7, #120]	@ 0x78
 8024900:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8024904:	ee17 3a90 	vmov	r3, s15
 8024908:	677b      	str	r3, [r7, #116]	@ 0x74
          memcpy(tmp + a->offset, &v, sizeof(v));
 802490a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 802490e:	68db      	ldr	r3, [r3, #12]
 8024910:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8024914:	4413      	add	r3, r2
 8024916:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8024918:	601a      	str	r2, [r3, #0]
 802491a:	e04e      	b.n	80249ba <handle_object+0x17e>
        }
      } else if (strcmp(a->type, "bool") == 0) {
 802491c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8024920:	685b      	ldr	r3, [r3, #4]
 8024922:	494d      	ldr	r1, [pc, #308]	@ (8024a58 <handle_object+0x21c>)
 8024924:	4618      	mov	r0, r3
 8024926:	f7db fcf3 	bl	8000310 <strcmp>
 802492a:	4603      	mov	r3, r0
 802492c:	2b00      	cmp	r3, #0
 802492e:	d10e      	bne.n	802494e <handle_object+0x112>
        mg_json_get_bool(hm->body, jpath, (bool *) (tmp + a->offset));
 8024930:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8024934:	68db      	ldr	r3, [r3, #12]
 8024936:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 802493a:	4413      	add	r3, r2
 802493c:	f107 0210 	add.w	r2, r7, #16
 8024940:	68b9      	ldr	r1, [r7, #8]
 8024942:	f501 7100 	add.w	r1, r1, #512	@ 0x200
 8024946:	c903      	ldmia	r1, {r0, r1}
 8024948:	f7e9 feb2 	bl	800e6b0 <mg_json_get_bool>
 802494c:	e035      	b.n	80249ba <handle_object+0x17e>
      } else if (strcmp(a->type, "double") == 0) {
 802494e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8024952:	685b      	ldr	r3, [r3, #4]
 8024954:	4941      	ldr	r1, [pc, #260]	@ (8024a5c <handle_object+0x220>)
 8024956:	4618      	mov	r0, r3
 8024958:	f7db fcda 	bl	8000310 <strcmp>
 802495c:	4603      	mov	r3, r0
 802495e:	2b00      	cmp	r3, #0
 8024960:	d10e      	bne.n	8024980 <handle_object+0x144>
        mg_json_get_num(hm->body, jpath, (double *) (tmp + a->offset));
 8024962:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8024966:	68db      	ldr	r3, [r3, #12]
 8024968:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 802496c:	4413      	add	r3, r2
 802496e:	f107 0210 	add.w	r2, r7, #16
 8024972:	68b9      	ldr	r1, [r7, #8]
 8024974:	f501 7100 	add.w	r1, r1, #512	@ 0x200
 8024978:	c903      	ldmia	r1, {r0, r1}
 802497a:	f7e9 fe54 	bl	800e626 <mg_json_get_num>
 802497e:	e01c      	b.n	80249ba <handle_object+0x17e>
      } else if (strcmp(a->type, "string") == 0) {
 8024980:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8024984:	685b      	ldr	r3, [r3, #4]
 8024986:	4936      	ldr	r1, [pc, #216]	@ (8024a60 <handle_object+0x224>)
 8024988:	4618      	mov	r0, r3
 802498a:	f7db fcc1 	bl	8000310 <strcmp>
 802498e:	4603      	mov	r3, r0
 8024990:	2b00      	cmp	r3, #0
 8024992:	d112      	bne.n	80249ba <handle_object+0x17e>
        mg_json_get_str2(hm->body, jpath, tmp + a->offset, a->size);
 8024994:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8024998:	68db      	ldr	r3, [r3, #12]
 802499a:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 802499e:	18d0      	adds	r0, r2, r3
 80249a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80249a4:	691b      	ldr	r3, [r3, #16]
 80249a6:	f107 0210 	add.w	r2, r7, #16
 80249aa:	68b9      	ldr	r1, [r7, #8]
 80249ac:	9300      	str	r3, [sp, #0]
 80249ae:	4603      	mov	r3, r0
 80249b0:	f501 7100 	add.w	r1, r1, #512	@ 0x200
 80249b4:	c903      	ldmia	r1, {r0, r1}
 80249b6:	f7ff f9c5 	bl	8023d44 <mg_json_get_str2>
    for (i = 0; h->attributes[i].name != NULL; i++) {
 80249ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80249be:	3301      	adds	r3, #1
 80249c0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80249c4:	687b      	ldr	r3, [r7, #4]
 80249c6:	6999      	ldr	r1, [r3, #24]
 80249c8:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80249cc:	4613      	mov	r3, r2
 80249ce:	005b      	lsls	r3, r3, #1
 80249d0:	4413      	add	r3, r2
 80249d2:	00db      	lsls	r3, r3, #3
 80249d4:	440b      	add	r3, r1
 80249d6:	681b      	ldr	r3, [r3, #0]
 80249d8:	2b00      	cmp	r3, #0
 80249da:	f47f af64 	bne.w	80248a6 <handle_object+0x6a>
      }
    }
    // If structure changes, increment version
    if (memcmp(data, tmp, h->data_size) != 0) s_device_change_version++;
 80249de:	687b      	ldr	r3, [r7, #4]
 80249e0:	69db      	ldr	r3, [r3, #28]
 80249e2:	461a      	mov	r2, r3
 80249e4:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 80249e8:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 80249ec:	f002 fe42 	bl	8027674 <memcmp>
 80249f0:	4603      	mov	r3, r0
 80249f2:	2b00      	cmp	r3, #0
 80249f4:	d004      	beq.n	8024a00 <handle_object+0x1c4>
 80249f6:	4b1b      	ldr	r3, [pc, #108]	@ (8024a64 <handle_object+0x228>)
 80249f8:	681b      	ldr	r3, [r3, #0]
 80249fa:	3301      	adds	r3, #1
 80249fc:	4a19      	ldr	r2, [pc, #100]	@ (8024a64 <handle_object+0x228>)
 80249fe:	6013      	str	r3, [r2, #0]
    if (h->setter != NULL) h->setter(tmp);  // Can be NULL if readonly
 8024a00:	687b      	ldr	r3, [r7, #4]
 8024a02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8024a04:	2b00      	cmp	r3, #0
 8024a06:	d004      	beq.n	8024a12 <handle_object+0x1d6>
 8024a08:	687b      	ldr	r3, [r7, #4]
 8024a0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8024a0c:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8024a10:	4798      	blx	r3
    free(tmp);
 8024a12:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8024a16:	f000 ffcd 	bl	80259b4 <free>
    h->getter(data);  // Re-sync again after setting
 8024a1a:	687b      	ldr	r3, [r7, #4]
 8024a1c:	6a1b      	ldr	r3, [r3, #32]
 8024a1e:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8024a22:	4798      	blx	r3
  }
  mg_http_reply(c, 200, JSON_HEADERS, "{%M}\n", print_struct, h->attributes,
 8024a24:	687b      	ldr	r3, [r7, #4]
 8024a26:	699b      	ldr	r3, [r3, #24]
 8024a28:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8024a2c:	9202      	str	r2, [sp, #8]
 8024a2e:	9301      	str	r3, [sp, #4]
 8024a30:	4b0d      	ldr	r3, [pc, #52]	@ (8024a68 <handle_object+0x22c>)
 8024a32:	9300      	str	r3, [sp, #0]
 8024a34:	4b0d      	ldr	r3, [pc, #52]	@ (8024a6c <handle_object+0x230>)
 8024a36:	4a0e      	ldr	r2, [pc, #56]	@ (8024a70 <handle_object+0x234>)
 8024a38:	21c8      	movs	r1, #200	@ 0xc8
 8024a3a:	68f8      	ldr	r0, [r7, #12]
 8024a3c:	f7e7 f83a 	bl	800bab4 <mg_http_reply>
                data);
  free(data);
 8024a40:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8024a44:	f000 ffb6 	bl	80259b4 <free>
}
 8024a48:	bf00      	nop
 8024a4a:	3790      	adds	r7, #144	@ 0x90
 8024a4c:	46bd      	mov	sp, r7
 8024a4e:	bd80      	pop	{r7, pc}
 8024a50:	0802ce10 	.word	0x0802ce10
 8024a54:	0802c9bc 	.word	0x0802c9bc
 8024a58:	0802c9f8 	.word	0x0802c9f8
 8024a5c:	0802ca74 	.word	0x0802ca74
 8024a60:	0802c9e8 	.word	0x0802c9e8
 8024a64:	240056fc 	.word	0x240056fc
 8024a68:	0802462d 	.word	0x0802462d
 8024a6c:	0802ce18 	.word	0x0802ce18
 8024a70:	0802cd9c 	.word	0x0802cd9c

08024a74 <print_array>:

static size_t print_array(void (*out)(char, void *), void *ptr, va_list *ap) {
 8024a74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024a78:	b093      	sub	sp, #76	@ 0x4c
 8024a7a:	af02      	add	r7, sp, #8
 8024a7c:	6178      	str	r0, [r7, #20]
 8024a7e:	6139      	str	r1, [r7, #16]
 8024a80:	60fa      	str	r2, [r7, #12]
  struct apihandler_array *ha = va_arg(*ap, struct apihandler_array *);
 8024a82:	68fb      	ldr	r3, [r7, #12]
 8024a84:	681b      	ldr	r3, [r3, #0]
 8024a86:	1d19      	adds	r1, r3, #4
 8024a88:	68fa      	ldr	r2, [r7, #12]
 8024a8a:	6011      	str	r1, [r2, #0]
 8024a8c:	681b      	ldr	r3, [r3, #0]
 8024a8e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint64_t size = *va_arg(*ap, uint64_t *);
 8024a90:	68fb      	ldr	r3, [r7, #12]
 8024a92:	681b      	ldr	r3, [r3, #0]
 8024a94:	1d19      	adds	r1, r3, #4
 8024a96:	68fa      	ldr	r2, [r7, #12]
 8024a98:	6011      	str	r1, [r2, #0]
 8024a9a:	681b      	ldr	r3, [r3, #0]
 8024a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024aa0:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
  uint64_t start = *va_arg(*ap, uint64_t *);
 8024aa4:	68fb      	ldr	r3, [r7, #12]
 8024aa6:	681b      	ldr	r3, [r3, #0]
 8024aa8:	1d19      	adds	r1, r3, #4
 8024aaa:	68fa      	ldr	r2, [r7, #12]
 8024aac:	6011      	str	r1, [r2, #0]
 8024aae:	681b      	ldr	r3, [r3, #0]
 8024ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024ab4:	e9c7 2308 	strd	r2, r3, [r7, #32]
  size_t i, max = 20, len = 0;
 8024ab8:	2314      	movs	r3, #20
 8024aba:	61fb      	str	r3, [r7, #28]
 8024abc:	2300      	movs	r3, #0
 8024abe:	63bb      	str	r3, [r7, #56]	@ 0x38
  void *data = calloc(1, ha->data_size);
 8024ac0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8024ac2:	69db      	ldr	r3, [r3, #28]
 8024ac4:	4619      	mov	r1, r3
 8024ac6:	2001      	movs	r0, #1
 8024ac8:	f000 ff50 	bl	802596c <calloc>
 8024acc:	4603      	mov	r3, r0
 8024ace:	61bb      	str	r3, [r7, #24]
  for (i = 0; i < max && start + i < size; i++) {
 8024ad0:	2300      	movs	r3, #0
 8024ad2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8024ad4:	e02f      	b.n	8024b36 <print_array+0xc2>
    ha->getter(start + i, data);
 8024ad6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8024ad8:	6a1e      	ldr	r6, [r3, #32]
 8024ada:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8024adc:	2200      	movs	r2, #0
 8024ade:	469a      	mov	sl, r3
 8024ae0:	4693      	mov	fp, r2
 8024ae2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8024ae6:	eb1a 0102 	adds.w	r1, sl, r2
 8024aea:	6039      	str	r1, [r7, #0]
 8024aec:	eb4b 0303 	adc.w	r3, fp, r3
 8024af0:	607b      	str	r3, [r7, #4]
 8024af2:	69ba      	ldr	r2, [r7, #24]
 8024af4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8024af8:	47b0      	blx	r6
    if (i > 0) len += mg_xprintf(out, ptr, ",");
 8024afa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8024afc:	2b00      	cmp	r3, #0
 8024afe:	d008      	beq.n	8024b12 <print_array+0x9e>
 8024b00:	4a1b      	ldr	r2, [pc, #108]	@ (8024b70 <print_array+0xfc>)
 8024b02:	6939      	ldr	r1, [r7, #16]
 8024b04:	6978      	ldr	r0, [r7, #20]
 8024b06:	f7e4 fecc 	bl	80098a2 <mg_xprintf>
 8024b0a:	4602      	mov	r2, r0
 8024b0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8024b0e:	4413      	add	r3, r2
 8024b10:	63bb      	str	r3, [r7, #56]	@ 0x38
    len += mg_xprintf(out, ptr, "{%M}", print_struct, ha->attributes, data);
 8024b12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8024b14:	699b      	ldr	r3, [r3, #24]
 8024b16:	69ba      	ldr	r2, [r7, #24]
 8024b18:	9201      	str	r2, [sp, #4]
 8024b1a:	9300      	str	r3, [sp, #0]
 8024b1c:	4b15      	ldr	r3, [pc, #84]	@ (8024b74 <print_array+0x100>)
 8024b1e:	4a16      	ldr	r2, [pc, #88]	@ (8024b78 <print_array+0x104>)
 8024b20:	6939      	ldr	r1, [r7, #16]
 8024b22:	6978      	ldr	r0, [r7, #20]
 8024b24:	f7e4 febd 	bl	80098a2 <mg_xprintf>
 8024b28:	4602      	mov	r2, r0
 8024b2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8024b2c:	4413      	add	r3, r2
 8024b2e:	63bb      	str	r3, [r7, #56]	@ 0x38
  for (i = 0; i < max && start + i < size; i++) {
 8024b30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8024b32:	3301      	adds	r3, #1
 8024b34:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8024b36:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8024b38:	69fb      	ldr	r3, [r7, #28]
 8024b3a:	429a      	cmp	r2, r3
 8024b3c:	d20f      	bcs.n	8024b5e <print_array+0xea>
 8024b3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8024b40:	2200      	movs	r2, #0
 8024b42:	4698      	mov	r8, r3
 8024b44:	4691      	mov	r9, r2
 8024b46:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8024b4a:	eb18 0402 	adds.w	r4, r8, r2
 8024b4e:	eb49 0503 	adc.w	r5, r9, r3
 8024b52:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8024b56:	4294      	cmp	r4, r2
 8024b58:	eb75 0303 	sbcs.w	r3, r5, r3
 8024b5c:	d3bb      	bcc.n	8024ad6 <print_array+0x62>
  }
  free(data);
 8024b5e:	69b8      	ldr	r0, [r7, #24]
 8024b60:	f000 ff28 	bl	80259b4 <free>
  return len;
 8024b64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8024b66:	4618      	mov	r0, r3
 8024b68:	3744      	adds	r7, #68	@ 0x44
 8024b6a:	46bd      	mov	sp, r7
 8024b6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024b70:	0802cdf0 	.word	0x0802cdf0
 8024b74:	0802462d 	.word	0x0802462d
 8024b78:	0802ce20 	.word	0x0802ce20

08024b7c <handle_array>:

static void handle_array(struct mg_connection *c, struct mg_http_message *hm,
                         struct apihandler_array *h) {
 8024b7c:	b590      	push	{r4, r7, lr}
 8024b7e:	b0a9      	sub	sp, #164	@ 0xa4
 8024b80:	af14      	add	r7, sp, #80	@ 0x50
 8024b82:	60f8      	str	r0, [r7, #12]
 8024b84:	60b9      	str	r1, [r7, #8]
 8024b86:	607a      	str	r2, [r7, #4]
  char buf[40] = "";
 8024b88:	f107 0320 	add.w	r3, r7, #32
 8024b8c:	2228      	movs	r2, #40	@ 0x28
 8024b8e:	2100      	movs	r1, #0
 8024b90:	4618      	mov	r0, r3
 8024b92:	f002 fd99 	bl	80276c8 <memset>
  uint64_t size = h->sizer();
 8024b96:	687b      	ldr	r3, [r7, #4]
 8024b98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8024b9a:	4798      	blx	r3
 8024b9c:	4602      	mov	r2, r0
 8024b9e:	460b      	mov	r3, r1
 8024ba0:	e9c7 2306 	strd	r2, r3, [r7, #24]
  uint64_t start = 0;
 8024ba4:	f04f 0200 	mov.w	r2, #0
 8024ba8:	f04f 0300 	mov.w	r3, #0
 8024bac:	e9c7 2304 	strd	r2, r3, [r7, #16]
  mg_http_get_var(&hm->query, "start", buf, sizeof(buf));
 8024bb0:	68bb      	ldr	r3, [r7, #8]
 8024bb2:	f103 0010 	add.w	r0, r3, #16
 8024bb6:	f107 0220 	add.w	r2, r7, #32
 8024bba:	2328      	movs	r3, #40	@ 0x28
 8024bbc:	4927      	ldr	r1, [pc, #156]	@ (8024c5c <handle_array+0xe0>)
 8024bbe:	f7e5 fd9b 	bl	800a6f8 <mg_http_get_var>
  if (!mg_str_to_num(mg_str(buf), 10, &start, sizeof(start))) start = 0;
 8024bc2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8024bc6:	f107 0220 	add.w	r2, r7, #32
 8024bca:	4611      	mov	r1, r2
 8024bcc:	4618      	mov	r0, r3
 8024bce:	f7f1 fe69 	bl	80168a4 <mg_str_s>
 8024bd2:	f107 0310 	add.w	r3, r7, #16
 8024bd6:	2208      	movs	r2, #8
 8024bd8:	9200      	str	r2, [sp, #0]
 8024bda:	220a      	movs	r2, #10
 8024bdc:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8024be0:	c903      	ldmia	r1, {r0, r1}
 8024be2:	f7f2 f8ba 	bl	8016d5a <mg_str_to_num>
 8024be6:	4603      	mov	r3, r0
 8024be8:	f083 0301 	eor.w	r3, r3, #1
 8024bec:	b2db      	uxtb	r3, r3
 8024bee:	2b00      	cmp	r3, #0
 8024bf0:	d005      	beq.n	8024bfe <handle_array+0x82>
 8024bf2:	f04f 0200 	mov.w	r2, #0
 8024bf6:	f04f 0300 	mov.w	r3, #0
 8024bfa:	e9c7 2304 	strd	r2, r3, [r7, #16]
  mg_http_reply(c, 200, JSON_HEADERS, "{%m:%llu, %m:%llu, %m:[%M]}\n",
 8024bfe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8024c02:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8024c06:	f107 0410 	add.w	r4, r7, #16
 8024c0a:	9412      	str	r4, [sp, #72]	@ 0x48
 8024c0c:	f107 0418 	add.w	r4, r7, #24
 8024c10:	9411      	str	r4, [sp, #68]	@ 0x44
 8024c12:	687c      	ldr	r4, [r7, #4]
 8024c14:	9410      	str	r4, [sp, #64]	@ 0x40
 8024c16:	4c12      	ldr	r4, [pc, #72]	@ (8024c60 <handle_array+0xe4>)
 8024c18:	940f      	str	r4, [sp, #60]	@ 0x3c
 8024c1a:	4c12      	ldr	r4, [pc, #72]	@ (8024c64 <handle_array+0xe8>)
 8024c1c:	940e      	str	r4, [sp, #56]	@ 0x38
 8024c1e:	2400      	movs	r4, #0
 8024c20:	940d      	str	r4, [sp, #52]	@ 0x34
 8024c22:	4c11      	ldr	r4, [pc, #68]	@ (8024c68 <handle_array+0xec>)
 8024c24:	940c      	str	r4, [sp, #48]	@ 0x30
 8024c26:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8024c2a:	490c      	ldr	r1, [pc, #48]	@ (8024c5c <handle_array+0xe0>)
 8024c2c:	9108      	str	r1, [sp, #32]
 8024c2e:	2100      	movs	r1, #0
 8024c30:	9107      	str	r1, [sp, #28]
 8024c32:	490d      	ldr	r1, [pc, #52]	@ (8024c68 <handle_array+0xec>)
 8024c34:	9106      	str	r1, [sp, #24]
 8024c36:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8024c3a:	4b0c      	ldr	r3, [pc, #48]	@ (8024c6c <handle_array+0xf0>)
 8024c3c:	9302      	str	r3, [sp, #8]
 8024c3e:	2300      	movs	r3, #0
 8024c40:	9301      	str	r3, [sp, #4]
 8024c42:	4b09      	ldr	r3, [pc, #36]	@ (8024c68 <handle_array+0xec>)
 8024c44:	9300      	str	r3, [sp, #0]
 8024c46:	4b0a      	ldr	r3, [pc, #40]	@ (8024c70 <handle_array+0xf4>)
 8024c48:	4a0a      	ldr	r2, [pc, #40]	@ (8024c74 <handle_array+0xf8>)
 8024c4a:	21c8      	movs	r1, #200	@ 0xc8
 8024c4c:	68f8      	ldr	r0, [r7, #12]
 8024c4e:	f7e6 ff31 	bl	800bab4 <mg_http_reply>
                MG_ESC("size"), size, MG_ESC("start"), start, MG_ESC("data"),
                print_array, h, &size, &start);
}
 8024c52:	bf00      	nop
 8024c54:	3754      	adds	r7, #84	@ 0x54
 8024c56:	46bd      	mov	sp, r7
 8024c58:	bd90      	pop	{r4, r7, pc}
 8024c5a:	bf00      	nop
 8024c5c:	0802ce28 	.word	0x0802ce28
 8024c60:	08024a75 	.word	0x08024a75
 8024c64:	0802cb18 	.word	0x0802cb18
 8024c68:	080135a9 	.word	0x080135a9
 8024c6c:	0802ce50 	.word	0x0802ce50
 8024c70:	0802ce30 	.word	0x0802ce30
 8024c74:	0802cd9c 	.word	0x0802cd9c

08024c78 <handle_file>:
  }
  return len;
}

static void handle_file(struct mg_connection *c, struct mg_http_message *hm,
                        struct apihandler_file *hf) {
 8024c78:	b580      	push	{r7, lr}
 8024c7a:	b09e      	sub	sp, #120	@ 0x78
 8024c7c:	af00      	add	r7, sp, #0
 8024c7e:	60f8      	str	r0, [r7, #12]
 8024c80:	60b9      	str	r1, [r7, #8]
 8024c82:	607a      	str	r2, [r7, #4]
  char path[MG_PATH_MAX];
  get_file_name_from_uri(hm->uri, path, sizeof(path));
 8024c84:	f107 0214 	add.w	r2, r7, #20
 8024c88:	68b9      	ldr	r1, [r7, #8]
 8024c8a:	2364      	movs	r3, #100	@ 0x64
 8024c8c:	3108      	adds	r1, #8
 8024c8e:	c903      	ldmia	r1, {r0, r1}
 8024c90:	f7ff fb62 	bl	8024358 <get_file_name_from_uri>
  hf->server(c, hm, path);
 8024c94:	687b      	ldr	r3, [r7, #4]
 8024c96:	69db      	ldr	r3, [r3, #28]
 8024c98:	f107 0214 	add.w	r2, r7, #20
 8024c9c:	68b9      	ldr	r1, [r7, #8]
 8024c9e:	68f8      	ldr	r0, [r7, #12]
 8024ca0:	4798      	blx	r3
}
 8024ca2:	bf00      	nop
 8024ca4:	3778      	adds	r7, #120	@ 0x78
 8024ca6:	46bd      	mov	sp, r7
 8024ca8:	bd80      	pop	{r7, pc}
	...

08024cac <handle_api_call>:

static void handle_api_call(struct mg_connection *c, struct mg_http_message *hm,
                            struct apihandler *h) {
 8024cac:	b580      	push	{r7, lr}
 8024cae:	b088      	sub	sp, #32
 8024cb0:	af02      	add	r7, sp, #8
 8024cb2:	60f8      	str	r0, [r7, #12]
 8024cb4:	60b9      	str	r1, [r7, #8]
 8024cb6:	607a      	str	r2, [r7, #4]
  if (strcmp(h->type, "object") == 0 || strcmp(h->type, "data") == 0) {
 8024cb8:	687b      	ldr	r3, [r7, #4]
 8024cba:	685b      	ldr	r3, [r3, #4]
 8024cbc:	4932      	ldr	r1, [pc, #200]	@ (8024d88 <handle_api_call+0xdc>)
 8024cbe:	4618      	mov	r0, r3
 8024cc0:	f7db fb26 	bl	8000310 <strcmp>
 8024cc4:	4603      	mov	r3, r0
 8024cc6:	2b00      	cmp	r3, #0
 8024cc8:	d008      	beq.n	8024cdc <handle_api_call+0x30>
 8024cca:	687b      	ldr	r3, [r7, #4]
 8024ccc:	685b      	ldr	r3, [r3, #4]
 8024cce:	492f      	ldr	r1, [pc, #188]	@ (8024d8c <handle_api_call+0xe0>)
 8024cd0:	4618      	mov	r0, r3
 8024cd2:	f7db fb1d 	bl	8000310 <strcmp>
 8024cd6:	4603      	mov	r3, r0
 8024cd8:	2b00      	cmp	r3, #0
 8024cda:	d105      	bne.n	8024ce8 <handle_api_call+0x3c>
    handle_object(c, hm, (struct apihandler_data *) h);
 8024cdc:	687a      	ldr	r2, [r7, #4]
 8024cde:	68b9      	ldr	r1, [r7, #8]
 8024ce0:	68f8      	ldr	r0, [r7, #12]
 8024ce2:	f7ff fdab 	bl	802483c <handle_object>
  } else if (strcmp(h->type, "custom") == 0) {
    ((struct apihandler_custom *) h)->reply(c, hm);
  } else {
    mg_http_reply(c, 500, JSON_HEADERS, "API type %s unknown\n", h->type);
  }
}
 8024ce6:	e04a      	b.n	8024d7e <handle_api_call+0xd2>
  } else if (strcmp(h->type, "array") == 0) {
 8024ce8:	687b      	ldr	r3, [r7, #4]
 8024cea:	685b      	ldr	r3, [r3, #4]
 8024cec:	4928      	ldr	r1, [pc, #160]	@ (8024d90 <handle_api_call+0xe4>)
 8024cee:	4618      	mov	r0, r3
 8024cf0:	f7db fb0e 	bl	8000310 <strcmp>
 8024cf4:	4603      	mov	r3, r0
 8024cf6:	2b00      	cmp	r3, #0
 8024cf8:	d105      	bne.n	8024d06 <handle_api_call+0x5a>
    handle_array(c, hm, (struct apihandler_array *) h);
 8024cfa:	687a      	ldr	r2, [r7, #4]
 8024cfc:	68b9      	ldr	r1, [r7, #8]
 8024cfe:	68f8      	ldr	r0, [r7, #12]
 8024d00:	f7ff ff3c 	bl	8024b7c <handle_array>
}
 8024d04:	e03b      	b.n	8024d7e <handle_api_call+0xd2>
  } else if (strcmp(h->type, "action") == 0) {
 8024d06:	687b      	ldr	r3, [r7, #4]
 8024d08:	685b      	ldr	r3, [r3, #4]
 8024d0a:	4922      	ldr	r1, [pc, #136]	@ (8024d94 <handle_api_call+0xe8>)
 8024d0c:	4618      	mov	r0, r3
 8024d0e:	f7db faff 	bl	8000310 <strcmp>
 8024d12:	4603      	mov	r3, r0
 8024d14:	2b00      	cmp	r3, #0
 8024d16:	d10a      	bne.n	8024d2e <handle_api_call+0x82>
    struct apihandler_action *ha = (struct apihandler_action *) h;
 8024d18:	687b      	ldr	r3, [r7, #4]
 8024d1a:	617b      	str	r3, [r7, #20]
    handle_action(c, hm, ha->checker, ha->starter);
 8024d1c:	697b      	ldr	r3, [r7, #20]
 8024d1e:	699a      	ldr	r2, [r3, #24]
 8024d20:	697b      	ldr	r3, [r7, #20]
 8024d22:	69db      	ldr	r3, [r3, #28]
 8024d24:	68b9      	ldr	r1, [r7, #8]
 8024d26:	68f8      	ldr	r0, [r7, #12]
 8024d28:	f7ff fc3c 	bl	80245a4 <handle_action>
}
 8024d2c:	e027      	b.n	8024d7e <handle_api_call+0xd2>
  } else if (strcmp(h->type, "file") == 0) {
 8024d2e:	687b      	ldr	r3, [r7, #4]
 8024d30:	685b      	ldr	r3, [r3, #4]
 8024d32:	4919      	ldr	r1, [pc, #100]	@ (8024d98 <handle_api_call+0xec>)
 8024d34:	4618      	mov	r0, r3
 8024d36:	f7db faeb 	bl	8000310 <strcmp>
 8024d3a:	4603      	mov	r3, r0
 8024d3c:	2b00      	cmp	r3, #0
 8024d3e:	d105      	bne.n	8024d4c <handle_api_call+0xa0>
    handle_file(c, hm, (struct apihandler_file *) h);
 8024d40:	687a      	ldr	r2, [r7, #4]
 8024d42:	68b9      	ldr	r1, [r7, #8]
 8024d44:	68f8      	ldr	r0, [r7, #12]
 8024d46:	f7ff ff97 	bl	8024c78 <handle_file>
}
 8024d4a:	e018      	b.n	8024d7e <handle_api_call+0xd2>
  } else if (strcmp(h->type, "custom") == 0) {
 8024d4c:	687b      	ldr	r3, [r7, #4]
 8024d4e:	685b      	ldr	r3, [r3, #4]
 8024d50:	4912      	ldr	r1, [pc, #72]	@ (8024d9c <handle_api_call+0xf0>)
 8024d52:	4618      	mov	r0, r3
 8024d54:	f7db fadc 	bl	8000310 <strcmp>
 8024d58:	4603      	mov	r3, r0
 8024d5a:	2b00      	cmp	r3, #0
 8024d5c:	d105      	bne.n	8024d6a <handle_api_call+0xbe>
    ((struct apihandler_custom *) h)->reply(c, hm);
 8024d5e:	687b      	ldr	r3, [r7, #4]
 8024d60:	699b      	ldr	r3, [r3, #24]
 8024d62:	68b9      	ldr	r1, [r7, #8]
 8024d64:	68f8      	ldr	r0, [r7, #12]
 8024d66:	4798      	blx	r3
}
 8024d68:	e009      	b.n	8024d7e <handle_api_call+0xd2>
    mg_http_reply(c, 500, JSON_HEADERS, "API type %s unknown\n", h->type);
 8024d6a:	687b      	ldr	r3, [r7, #4]
 8024d6c:	685b      	ldr	r3, [r3, #4]
 8024d6e:	9300      	str	r3, [sp, #0]
 8024d70:	4b0b      	ldr	r3, [pc, #44]	@ (8024da0 <handle_api_call+0xf4>)
 8024d72:	4a0c      	ldr	r2, [pc, #48]	@ (8024da4 <handle_api_call+0xf8>)
 8024d74:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8024d78:	68f8      	ldr	r0, [r7, #12]
 8024d7a:	f7e6 fe9b 	bl	800bab4 <mg_http_reply>
}
 8024d7e:	bf00      	nop
 8024d80:	3718      	adds	r7, #24
 8024d82:	46bd      	mov	sp, r7
 8024d84:	bd80      	pop	{r7, pc}
 8024d86:	bf00      	nop
 8024d88:	0802ce64 	.word	0x0802ce64
 8024d8c:	0802cb18 	.word	0x0802cb18
 8024d90:	0802ce6c 	.word	0x0802ce6c
 8024d94:	0802cac0 	.word	0x0802cac0
 8024d98:	0802cba4 	.word	0x0802cba4
 8024d9c:	0802cb08 	.word	0x0802cb08
 8024da0:	0802ce74 	.word	0x0802ce74
 8024da4:	0802cd9c 	.word	0x0802cd9c

08024da8 <glue_update_state>:

void glue_update_state(void) {
 8024da8:	b480      	push	{r7}
 8024daa:	af00      	add	r7, sp, #0
  s_device_change_version++;
 8024dac:	4b04      	ldr	r3, [pc, #16]	@ (8024dc0 <glue_update_state+0x18>)
 8024dae:	681b      	ldr	r3, [r3, #0]
 8024db0:	3301      	adds	r3, #1
 8024db2:	4a03      	ldr	r2, [pc, #12]	@ (8024dc0 <glue_update_state+0x18>)
 8024db4:	6013      	str	r3, [r2, #0]
}
 8024db6:	bf00      	nop
 8024db8:	46bd      	mov	sp, r7
 8024dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024dbe:	4770      	bx	lr
 8024dc0:	240056fc 	.word	0x240056fc

08024dc4 <http_ev_handler>:

// Mongoose event handler function, gets called by the mg_mgr_poll()
static void http_ev_handler(struct mg_connection *c, int ev, void *ev_data) {
 8024dc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024dc6:	b0b5      	sub	sp, #212	@ 0xd4
 8024dc8:	af06      	add	r7, sp, #24
 8024dca:	61f8      	str	r0, [r7, #28]
 8024dcc:	61b9      	str	r1, [r7, #24]
 8024dce:	617a      	str	r2, [r7, #20]
  if (ev == MG_EV_HTTP_HDRS && c->data[0] == 0) {
 8024dd0:	69bb      	ldr	r3, [r7, #24]
 8024dd2:	2b0a      	cmp	r3, #10
 8024dd4:	d164      	bne.n	8024ea0 <http_ev_handler+0xdc>
 8024dd6:	69fb      	ldr	r3, [r7, #28]
 8024dd8:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8024ddc:	2b00      	cmp	r3, #0
 8024dde:	d15f      	bne.n	8024ea0 <http_ev_handler+0xdc>
#if WIZARD_ENABLE_HTTP_UI_LOGIN
    struct mg_http_message *hm = (struct mg_http_message *) ev_data;
 8024de0:	697b      	ldr	r3, [r7, #20]
 8024de2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (mg_match(hm->uri, mg_str("/api/#"), NULL) ||
 8024de6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8024dea:	49b4      	ldr	r1, [pc, #720]	@ (80250bc <http_ev_handler+0x2f8>)
 8024dec:	4618      	mov	r0, r3
 8024dee:	f7f1 fd59 	bl	80168a4 <mg_str_s>
 8024df2:	f8d7 10b4 	ldr.w	r1, [r7, #180]	@ 0xb4
 8024df6:	2300      	movs	r3, #0
 8024df8:	9300      	str	r3, [sp, #0]
 8024dfa:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8024dfe:	cb0c      	ldmia	r3, {r2, r3}
 8024e00:	3108      	adds	r1, #8
 8024e02:	c903      	ldmia	r1, {r0, r1}
 8024e04:	f7f1 fe58 	bl	8016ab8 <mg_match>
 8024e08:	4603      	mov	r3, r0
 8024e0a:	2b00      	cmp	r3, #0
 8024e0c:	d113      	bne.n	8024e36 <http_ev_handler+0x72>
        mg_match(hm->uri, mg_str("/websocket"), NULL)) {
 8024e0e:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8024e12:	49ab      	ldr	r1, [pc, #684]	@ (80250c0 <http_ev_handler+0x2fc>)
 8024e14:	4618      	mov	r0, r3
 8024e16:	f7f1 fd45 	bl	80168a4 <mg_str_s>
 8024e1a:	f8d7 10b4 	ldr.w	r1, [r7, #180]	@ 0xb4
 8024e1e:	2300      	movs	r3, #0
 8024e20:	9300      	str	r3, [sp, #0]
 8024e22:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8024e26:	cb0c      	ldmia	r3, {r2, r3}
 8024e28:	3108      	adds	r1, #8
 8024e2a:	c903      	ldmia	r1, {r0, r1}
 8024e2c:	f7f1 fe44 	bl	8016ab8 <mg_match>
 8024e30:	4603      	mov	r3, r0
    if (mg_match(hm->uri, mg_str("/api/#"), NULL) ||
 8024e32:	2b00      	cmp	r3, #0
 8024e34:	d034      	beq.n	8024ea0 <http_ev_handler+0xdc>
      struct apihandler *h = find_handler(hm);
 8024e36:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8024e3a:	f7fe ff57 	bl	8023cec <find_handler>
 8024e3e:	f8c7 00b0 	str.w	r0, [r7, #176]	@ 0xb0
      struct user *u = authenticate(hm);
 8024e42:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8024e46:	f7fe ffa9 	bl	8023d9c <authenticate>
 8024e4a:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
      if ((u == NULL ||
 8024e4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8024e52:	2b00      	cmp	r3, #0
 8024e54:	d019      	beq.n	8024e8a <http_ev_handler+0xc6>
 8024e56:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8024e5a:	2b00      	cmp	r3, #0
 8024e5c:	d020      	beq.n	8024ea0 <http_ev_handler+0xdc>
           (h != NULL && (u->level < h->read_level ||
 8024e5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8024e62:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8024e64:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8024e68:	68db      	ldr	r3, [r3, #12]
 8024e6a:	429a      	cmp	r2, r3
 8024e6c:	db0d      	blt.n	8024e8a <http_ev_handler+0xc6>
                          (hm->body.len > 0 && u->level < h->write_level))))) {
 8024e6e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8024e72:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
           (h != NULL && (u->level < h->read_level ||
 8024e76:	2b00      	cmp	r3, #0
 8024e78:	d012      	beq.n	8024ea0 <http_ev_handler+0xdc>
                          (hm->body.len > 0 && u->level < h->write_level))))) {
 8024e7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8024e7e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8024e80:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8024e84:	691b      	ldr	r3, [r3, #16]
 8024e86:	429a      	cmp	r2, r3
 8024e88:	da0a      	bge.n	8024ea0 <http_ev_handler+0xdc>
        mg_http_reply(c, 403, JSON_HEADERS, "Not Authorised\n");
 8024e8a:	4b8e      	ldr	r3, [pc, #568]	@ (80250c4 <http_ev_handler+0x300>)
 8024e8c:	4a8e      	ldr	r2, [pc, #568]	@ (80250c8 <http_ev_handler+0x304>)
 8024e8e:	f240 1193 	movw	r1, #403	@ 0x193
 8024e92:	69f8      	ldr	r0, [r7, #28]
 8024e94:	f7e6 fe0e 	bl	800bab4 <mg_http_reply>
        c->data[0] = 'Z';  // Mark this connection as handled
 8024e98:	69fb      	ldr	r3, [r7, #28]
 8024e9a:	225a      	movs	r2, #90	@ 0x5a
 8024e9c:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
    }
#endif
  }

  // We're checking c->is_websocket cause WS connection use c->data
  if (c->is_websocket == 0) handle_uploads(c, ev, ev_data);
 8024ea0:	69fb      	ldr	r3, [r7, #28]
 8024ea2:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8024ea6:	f003 0302 	and.w	r3, r3, #2
 8024eaa:	b2db      	uxtb	r3, r3
 8024eac:	2b00      	cmp	r3, #0
 8024eae:	d104      	bne.n	8024eba <http_ev_handler+0xf6>
 8024eb0:	697a      	ldr	r2, [r7, #20]
 8024eb2:	69b9      	ldr	r1, [r7, #24]
 8024eb4:	69f8      	ldr	r0, [r7, #28]
 8024eb6:	f7ff fb03 	bl	80244c0 <handle_uploads>
  if (ev == MG_EV_POLL && c->is_websocket == 0 && c->data[0] == 'A') {
 8024eba:	69bb      	ldr	r3, [r7, #24]
 8024ebc:	2b02      	cmp	r3, #2
 8024ebe:	d128      	bne.n	8024f12 <http_ev_handler+0x14e>
 8024ec0:	69fb      	ldr	r3, [r7, #28]
 8024ec2:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8024ec6:	f003 0302 	and.w	r3, r3, #2
 8024eca:	b2db      	uxtb	r3, r3
 8024ecc:	2b00      	cmp	r3, #0
 8024ece:	d120      	bne.n	8024f12 <http_ev_handler+0x14e>
 8024ed0:	69fb      	ldr	r3, [r7, #28]
 8024ed2:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8024ed6:	2b41      	cmp	r3, #65	@ 0x41
 8024ed8:	d11b      	bne.n	8024f12 <http_ev_handler+0x14e>
    // Check if action in progress is complete
    struct action_state *as = (struct action_state *) c->data;
 8024eda:	69fb      	ldr	r3, [r7, #28]
 8024edc:	3388      	adds	r3, #136	@ 0x88
 8024ede:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (as->fn() == false) {
 8024ee2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8024ee6:	685b      	ldr	r3, [r3, #4]
 8024ee8:	4798      	blx	r3
 8024eea:	4603      	mov	r3, r0
 8024eec:	f083 0301 	eor.w	r3, r3, #1
 8024ef0:	b2db      	uxtb	r3, r3
 8024ef2:	2b00      	cmp	r3, #0
 8024ef4:	f000 813b 	beq.w	802516e <http_ev_handler+0x3aa>
      mg_http_reply(c, 200, JSON_HEADERS, "true");
 8024ef8:	4b74      	ldr	r3, [pc, #464]	@ (80250cc <http_ev_handler+0x308>)
 8024efa:	4a73      	ldr	r2, [pc, #460]	@ (80250c8 <http_ev_handler+0x304>)
 8024efc:	21c8      	movs	r1, #200	@ 0xc8
 8024efe:	69f8      	ldr	r0, [r7, #28]
 8024f00:	f7e6 fdd8 	bl	800bab4 <mg_http_reply>
      memset(as, 0, sizeof(*as));
 8024f04:	2208      	movs	r2, #8
 8024f06:	2100      	movs	r1, #0
 8024f08:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 8024f0c:	f002 fbdc 	bl	80276c8 <memset>
  if (ev == MG_EV_POLL && c->is_websocket == 0 && c->data[0] == 'A') {
 8024f10:	e12d      	b.n	802516e <http_ev_handler+0x3aa>
    }
  } else if (ev == MG_EV_HTTP_MSG && c->is_websocket == 0 && c->data[0] == 0) {
 8024f12:	69bb      	ldr	r3, [r7, #24]
 8024f14:	2b0b      	cmp	r3, #11
 8024f16:	f040 80f3 	bne.w	8025100 <http_ev_handler+0x33c>
 8024f1a:	69fb      	ldr	r3, [r7, #28]
 8024f1c:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8024f20:	f003 0302 	and.w	r3, r3, #2
 8024f24:	b2db      	uxtb	r3, r3
 8024f26:	2b00      	cmp	r3, #0
 8024f28:	f040 80ea 	bne.w	8025100 <http_ev_handler+0x33c>
 8024f2c:	69fb      	ldr	r3, [r7, #28]
 8024f2e:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8024f32:	2b00      	cmp	r3, #0
 8024f34:	f040 80e4 	bne.w	8025100 <http_ev_handler+0x33c>
    struct mg_http_message *hm = (struct mg_http_message *) ev_data;
 8024f38:	697b      	ldr	r3, [r7, #20]
 8024f3a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
#if WIZARD_ENABLE_HTTP || WIZARD_ENABLE_HTTPS
    struct apihandler *h = find_handler(hm);
 8024f3e:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8024f42:	f7fe fed3 	bl	8023cec <find_handler>
 8024f46:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
#if WIZARD_ENABLE_HTTP_UI_LOGIN
    struct user *u = authenticate(hm);
 8024f4a:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8024f4e:	f7fe ff25 	bl	8023d9c <authenticate>
 8024f52:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
    if (mg_match(hm->uri, mg_str("/api/login"), NULL)) {
 8024f56:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8024f5a:	495d      	ldr	r1, [pc, #372]	@ (80250d0 <http_ev_handler+0x30c>)
 8024f5c:	4618      	mov	r0, r3
 8024f5e:	f7f1 fca1 	bl	80168a4 <mg_str_s>
 8024f62:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8024f66:	2300      	movs	r3, #0
 8024f68:	9300      	str	r3, [sp, #0]
 8024f6a:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8024f6e:	cb0c      	ldmia	r3, {r2, r3}
 8024f70:	3108      	adds	r1, #8
 8024f72:	c903      	ldmia	r1, {r0, r1}
 8024f74:	f7f1 fda0 	bl	8016ab8 <mg_match>
 8024f78:	4603      	mov	r3, r0
 8024f7a:	2b00      	cmp	r3, #0
 8024f7c:	d005      	beq.n	8024f8a <http_ev_handler+0x1c6>
      handle_login(c, u);
 8024f7e:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 8024f82:	69f8      	ldr	r0, [r7, #28]
 8024f84:	f7fe ffee 	bl	8023f64 <handle_login>
  } else if (ev == MG_EV_HTTP_MSG && c->is_websocket == 0 && c->data[0] == 0) {
 8024f88:	e0f3      	b.n	8025172 <http_ev_handler+0x3ae>
    } else if (mg_match(hm->uri, mg_str("/api/logout"), NULL)) {
 8024f8a:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8024f8e:	4951      	ldr	r1, [pc, #324]	@ (80250d4 <http_ev_handler+0x310>)
 8024f90:	4618      	mov	r0, r3
 8024f92:	f7f1 fc87 	bl	80168a4 <mg_str_s>
 8024f96:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8024f9a:	2300      	movs	r3, #0
 8024f9c:	9300      	str	r3, [sp, #0]
 8024f9e:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8024fa2:	cb0c      	ldmia	r3, {r2, r3}
 8024fa4:	3108      	adds	r1, #8
 8024fa6:	c903      	ldmia	r1, {r0, r1}
 8024fa8:	f7f1 fd86 	bl	8016ab8 <mg_match>
 8024fac:	4603      	mov	r3, r0
 8024fae:	2b00      	cmp	r3, #0
 8024fb0:	d003      	beq.n	8024fba <http_ev_handler+0x1f6>
      handle_logout(c);
 8024fb2:	69f8      	ldr	r0, [r7, #28]
 8024fb4:	f7ff f844 	bl	8024040 <handle_logout>
  } else if (ev == MG_EV_HTTP_MSG && c->is_websocket == 0 && c->data[0] == 0) {
 8024fb8:	e0db      	b.n	8025172 <http_ev_handler+0x3ae>
    } else
#endif
        if (mg_match(hm->uri, mg_str("/api/ok"), NULL)) {
 8024fba:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8024fbe:	4946      	ldr	r1, [pc, #280]	@ (80250d8 <http_ev_handler+0x314>)
 8024fc0:	4618      	mov	r0, r3
 8024fc2:	f7f1 fc6f 	bl	80168a4 <mg_str_s>
 8024fc6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8024fca:	2300      	movs	r3, #0
 8024fcc:	9300      	str	r3, [sp, #0]
 8024fce:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8024fd2:	cb0c      	ldmia	r3, {r2, r3}
 8024fd4:	3108      	adds	r1, #8
 8024fd6:	c903      	ldmia	r1, {r0, r1}
 8024fd8:	f7f1 fd6e 	bl	8016ab8 <mg_match>
 8024fdc:	4603      	mov	r3, r0
 8024fde:	2b00      	cmp	r3, #0
 8024fe0:	d006      	beq.n	8024ff0 <http_ev_handler+0x22c>
      mg_http_reply(c, 200, JSON_HEADERS, "true\n");
 8024fe2:	4b3e      	ldr	r3, [pc, #248]	@ (80250dc <http_ev_handler+0x318>)
 8024fe4:	4a38      	ldr	r2, [pc, #224]	@ (80250c8 <http_ev_handler+0x304>)
 8024fe6:	21c8      	movs	r1, #200	@ 0xc8
 8024fe8:	69f8      	ldr	r0, [r7, #28]
 8024fea:	f7e6 fd63 	bl	800bab4 <mg_http_reply>
  } else if (ev == MG_EV_HTTP_MSG && c->is_websocket == 0 && c->data[0] == 0) {
 8024fee:	e0c0      	b.n	8025172 <http_ev_handler+0x3ae>
    } else if (mg_match(hm->uri, mg_str("/websocket"), NULL)) {
 8024ff0:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8024ff4:	4932      	ldr	r1, [pc, #200]	@ (80250c0 <http_ev_handler+0x2fc>)
 8024ff6:	4618      	mov	r0, r3
 8024ff8:	f7f1 fc54 	bl	80168a4 <mg_str_s>
 8024ffc:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8025000:	2300      	movs	r3, #0
 8025002:	9300      	str	r3, [sp, #0]
 8025004:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8025008:	cb0c      	ldmia	r3, {r2, r3}
 802500a:	3108      	adds	r1, #8
 802500c:	c903      	ldmia	r1, {r0, r1}
 802500e:	f7f1 fd53 	bl	8016ab8 <mg_match>
 8025012:	4603      	mov	r3, r0
 8025014:	2b00      	cmp	r3, #0
 8025016:	d006      	beq.n	8025026 <http_ev_handler+0x262>
      mg_ws_upgrade(c, hm, NULL);
 8025018:	2200      	movs	r2, #0
 802501a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 802501e:	69f8      	ldr	r0, [r7, #28]
 8025020:	f7fd fb2e 	bl	8022680 <mg_ws_upgrade>
  } else if (ev == MG_EV_HTTP_MSG && c->is_websocket == 0 && c->data[0] == 0) {
 8025024:	e0a5      	b.n	8025172 <http_ev_handler+0x3ae>
    } else if (mg_match(hm->uri, mg_str("/api/heartbeat"), NULL)) {
 8025026:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 802502a:	492d      	ldr	r1, [pc, #180]	@ (80250e0 <http_ev_handler+0x31c>)
 802502c:	4618      	mov	r0, r3
 802502e:	f7f1 fc39 	bl	80168a4 <mg_str_s>
 8025032:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8025036:	2300      	movs	r3, #0
 8025038:	9300      	str	r3, [sp, #0]
 802503a:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 802503e:	cb0c      	ldmia	r3, {r2, r3}
 8025040:	3108      	adds	r1, #8
 8025042:	c903      	ldmia	r1, {r0, r1}
 8025044:	f7f1 fd38 	bl	8016ab8 <mg_match>
 8025048:	4603      	mov	r3, r0
 802504a:	2b00      	cmp	r3, #0
 802504c:	d00f      	beq.n	802506e <http_ev_handler+0x2aa>
      mg_http_reply(c, 200, JSON_HEADERS, "{%m:%lu}\n", MG_ESC("version"),
 802504e:	4b25      	ldr	r3, [pc, #148]	@ (80250e4 <http_ev_handler+0x320>)
 8025050:	681b      	ldr	r3, [r3, #0]
 8025052:	9303      	str	r3, [sp, #12]
 8025054:	4b24      	ldr	r3, [pc, #144]	@ (80250e8 <http_ev_handler+0x324>)
 8025056:	9302      	str	r3, [sp, #8]
 8025058:	2300      	movs	r3, #0
 802505a:	9301      	str	r3, [sp, #4]
 802505c:	4b23      	ldr	r3, [pc, #140]	@ (80250ec <http_ev_handler+0x328>)
 802505e:	9300      	str	r3, [sp, #0]
 8025060:	4b23      	ldr	r3, [pc, #140]	@ (80250f0 <http_ev_handler+0x32c>)
 8025062:	4a19      	ldr	r2, [pc, #100]	@ (80250c8 <http_ev_handler+0x304>)
 8025064:	21c8      	movs	r1, #200	@ 0xc8
 8025066:	69f8      	ldr	r0, [r7, #28]
 8025068:	f7e6 fd24 	bl	800bab4 <mg_http_reply>
  } else if (ev == MG_EV_HTTP_MSG && c->is_websocket == 0 && c->data[0] == 0) {
 802506c:	e081      	b.n	8025172 <http_ev_handler+0x3ae>
                    s_device_change_version);
    } else if (h != NULL) {
 802506e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8025072:	2b00      	cmp	r3, #0
 8025074:	d007      	beq.n	8025086 <http_ev_handler+0x2c2>
      handle_api_call(c, hm, h);
 8025076:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 802507a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 802507e:	69f8      	ldr	r0, [r7, #28]
 8025080:	f7ff fe14 	bl	8024cac <handle_api_call>
  } else if (ev == MG_EV_HTTP_MSG && c->is_websocket == 0 && c->data[0] == 0) {
 8025084:	e075      	b.n	8025172 <http_ev_handler+0x3ae>
    } else if (c->data[0] == 0)
 8025086:	69fb      	ldr	r3, [r7, #28]
 8025088:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 802508c:	2b00      	cmp	r3, #0
 802508e:	d170      	bne.n	8025172 <http_ev_handler+0x3ae>
#endif  // WIZARD_ENABLE_HTTP || WIZARD_ENABLE_HTTPS
    {
#if WIZARD_ENABLE_HTTP_UI
      struct mg_http_serve_opts opts;
      memset(&opts, 0, sizeof(opts));
 8025090:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8025094:	2218      	movs	r2, #24
 8025096:	2100      	movs	r1, #0
 8025098:	4618      	mov	r0, r3
 802509a:	f002 fb15 	bl	80276c8 <memset>
      opts.root_dir = "/web_root/";
 802509e:	4b15      	ldr	r3, [pc, #84]	@ (80250f4 <http_ev_handler+0x330>)
 80250a0:	64bb      	str	r3, [r7, #72]	@ 0x48
      opts.fs = &mg_fs_packed;
 80250a2:	4b15      	ldr	r3, [pc, #84]	@ (80250f8 <http_ev_handler+0x334>)
 80250a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
      opts.extra_headers = NO_CACHE_HEADERS;
 80250a6:	4b15      	ldr	r3, [pc, #84]	@ (80250fc <http_ev_handler+0x338>)
 80250a8:	653b      	str	r3, [r7, #80]	@ 0x50
      mg_http_serve_dir(c, hm, &opts);
 80250aa:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80250ae:	461a      	mov	r2, r3
 80250b0:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80250b4:	69f8      	ldr	r0, [r7, #28]
 80250b6:	f7e7 fc0f 	bl	800c8d8 <mg_http_serve_dir>
  } else if (ev == MG_EV_HTTP_MSG && c->is_websocket == 0 && c->data[0] == 0) {
 80250ba:	e05a      	b.n	8025172 <http_ev_handler+0x3ae>
 80250bc:	0802ce8c 	.word	0x0802ce8c
 80250c0:	0802ce94 	.word	0x0802ce94
 80250c4:	0802cea0 	.word	0x0802cea0
 80250c8:	0802cd9c 	.word	0x0802cd9c
 80250cc:	0802cde8 	.word	0x0802cde8
 80250d0:	0802ceb0 	.word	0x0802ceb0
 80250d4:	0802cebc 	.word	0x0802cebc
 80250d8:	0802cec8 	.word	0x0802cec8
 80250dc:	0802ced0 	.word	0x0802ced0
 80250e0:	0802ced8 	.word	0x0802ced8
 80250e4:	240056fc 	.word	0x240056fc
 80250e8:	0802c9e0 	.word	0x0802c9e0
 80250ec:	080135a9 	.word	0x080135a9
 80250f0:	0802cee8 	.word	0x0802cee8
 80250f4:	0802cef4 	.word	0x0802cef4
 80250f8:	24000010 	.word	0x24000010
 80250fc:	0802cf00 	.word	0x0802cf00
#else
      mg_http_reply(c, 200, "", ":)\n");
#endif  // WIZARD_ENABLE_HTTP_UI
    }
  } else if (ev == MG_EV_WS_MSG || ev == MG_EV_WS_CTL) {
 8025100:	69bb      	ldr	r3, [r7, #24]
 8025102:	2b0d      	cmp	r3, #13
 8025104:	d036      	beq.n	8025174 <http_ev_handler+0x3b0>
 8025106:	69bb      	ldr	r3, [r7, #24]
 8025108:	2b0e      	cmp	r3, #14
 802510a:	d033      	beq.n	8025174 <http_ev_handler+0x3b0>
    // Ignore received data
  } else if (ev == MG_EV_ACCEPT) {
 802510c:	69bb      	ldr	r3, [r7, #24]
 802510e:	2b05      	cmp	r3, #5
 8025110:	d130      	bne.n	8025174 <http_ev_handler+0x3b0>
    if (c->fn_data != NULL) {  // TLS listener
 8025112:	69fb      	ldr	r3, [r7, #28]
 8025114:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8025116:	2b00      	cmp	r3, #0
 8025118:	d02c      	beq.n	8025174 <http_ev_handler+0x3b0>
      struct mg_tls_opts opts;
      memset(&opts, 0, sizeof(opts));
 802511a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 802511e:	2224      	movs	r2, #36	@ 0x24
 8025120:	2100      	movs	r1, #0
 8025122:	4618      	mov	r0, r3
 8025124:	f002 fad0 	bl	80276c8 <memset>
      opts.cert = mg_str(TLS_CERT);
 8025128:	f107 0308 	add.w	r3, r7, #8
 802512c:	493a      	ldr	r1, [pc, #232]	@ (8025218 <http_ev_handler+0x454>)
 802512e:	4618      	mov	r0, r3
 8025130:	f7f1 fbb8 	bl	80168a4 <mg_str_s>
 8025134:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8025138:	f107 0208 	add.w	r2, r7, #8
 802513c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8025140:	e883 0003 	stmia.w	r3, {r0, r1}
      opts.key = mg_str(TLS_KEY);
 8025144:	f107 0308 	add.w	r3, r7, #8
 8025148:	4934      	ldr	r1, [pc, #208]	@ (802521c <http_ev_handler+0x458>)
 802514a:	4618      	mov	r0, r3
 802514c:	f7f1 fbaa 	bl	80168a4 <mg_str_s>
 8025150:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8025154:	f107 0208 	add.w	r2, r7, #8
 8025158:	e892 0003 	ldmia.w	r2, {r0, r1}
 802515c:	e883 0003 	stmia.w	r3, {r0, r1}
      mg_tls_init(c, &opts);
 8025160:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8025164:	4619      	mov	r1, r3
 8025166:	69f8      	ldr	r0, [r7, #28]
 8025168:	f7f5 ff3c 	bl	801afe4 <mg_tls_init>
 802516c:	e002      	b.n	8025174 <http_ev_handler+0x3b0>
  if (ev == MG_EV_POLL && c->is_websocket == 0 && c->data[0] == 'A') {
 802516e:	bf00      	nop
 8025170:	e000      	b.n	8025174 <http_ev_handler+0x3b0>
  } else if (ev == MG_EV_HTTP_MSG && c->is_websocket == 0 && c->data[0] == 0) {
 8025172:	bf00      	nop
    }
  }

  if (ev == MG_EV_HTTP_MSG) {
 8025174:	69bb      	ldr	r3, [r7, #24]
 8025176:	2b0b      	cmp	r3, #11
 8025178:	d149      	bne.n	802520e <http_ev_handler+0x44a>
    // Show this request
    struct mg_http_message *hm = (struct mg_http_message *) ev_data;
 802517a:	697b      	ldr	r3, [r7, #20]
 802517c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    MG_DEBUG(("%lu %.*s %.*s %lu -> %.*s %lu", c->id, hm->method.len,
 8025180:	4b27      	ldr	r3, [pc, #156]	@ (8025220 <http_ev_handler+0x45c>)
 8025182:	681b      	ldr	r3, [r3, #0]
 8025184:	2b02      	cmp	r3, #2
 8025186:	dd32      	ble.n	80251ee <http_ev_handler+0x42a>
 8025188:	4b26      	ldr	r3, [pc, #152]	@ (8025224 <http_ev_handler+0x460>)
 802518a:	f44f 7229 	mov.w	r2, #676	@ 0x2a4
 802518e:	4926      	ldr	r1, [pc, #152]	@ (8025228 <http_ev_handler+0x464>)
 8025190:	2003      	movs	r0, #3
 8025192:	f7e9 fb87 	bl	800e8a4 <mg_log_prefix>
 8025196:	69fb      	ldr	r3, [r7, #28]
 8025198:	6b5e      	ldr	r6, [r3, #52]	@ 0x34
 802519a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 802519e:	685b      	ldr	r3, [r3, #4]
 80251a0:	607b      	str	r3, [r7, #4]
 80251a2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80251a6:	681b      	ldr	r3, [r3, #0]
 80251a8:	603b      	str	r3, [r7, #0]
 80251aa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80251ae:	68db      	ldr	r3, [r3, #12]
 80251b0:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80251b4:	6892      	ldr	r2, [r2, #8]
 80251b6:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 80251ba:	f8d1 1204 	ldr.w	r1, [r1, #516]	@ 0x204
 80251be:	69f8      	ldr	r0, [r7, #28]
 80251c0:	6d00      	ldr	r0, [r0, #80]	@ 0x50
 80251c2:	280f      	cmp	r0, #15
 80251c4:	d901      	bls.n	80251ca <http_ev_handler+0x406>
 80251c6:	2003      	movs	r0, #3
 80251c8:	e000      	b.n	80251cc <http_ev_handler+0x408>
 80251ca:	2000      	movs	r0, #0
 80251cc:	69fc      	ldr	r4, [r7, #28]
 80251ce:	6ca4      	ldr	r4, [r4, #72]	@ 0x48
 80251d0:	3409      	adds	r4, #9
 80251d2:	69fd      	ldr	r5, [r7, #28]
 80251d4:	6d2d      	ldr	r5, [r5, #80]	@ 0x50
 80251d6:	9505      	str	r5, [sp, #20]
 80251d8:	9404      	str	r4, [sp, #16]
 80251da:	9003      	str	r0, [sp, #12]
 80251dc:	9102      	str	r1, [sp, #8]
 80251de:	9201      	str	r2, [sp, #4]
 80251e0:	9300      	str	r3, [sp, #0]
 80251e2:	683b      	ldr	r3, [r7, #0]
 80251e4:	687a      	ldr	r2, [r7, #4]
 80251e6:	4631      	mov	r1, r6
 80251e8:	4810      	ldr	r0, [pc, #64]	@ (802522c <http_ev_handler+0x468>)
 80251ea:	f7e9 fbab 	bl	800e944 <mg_log>
              hm->method.buf, hm->uri.len, hm->uri.buf, hm->body.len,
              c->send.len > 15 ? 3 : 0, &c->send.buf[9], c->send.len));
    if (c->data[0] == 'Z') {
 80251ee:	69fb      	ldr	r3, [r7, #28]
 80251f0:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 80251f4:	2b5a      	cmp	r3, #90	@ 0x5a
 80251f6:	d10a      	bne.n	802520e <http_ev_handler+0x44a>
      c->data[0] = 0;
 80251f8:	69fb      	ldr	r3, [r7, #28]
 80251fa:	2200      	movs	r2, #0
 80251fc:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
      c->is_resp = 0;
 8025200:	69fa      	ldr	r2, [r7, #28]
 8025202:	f892 30ae 	ldrb.w	r3, [r2, #174]	@ 0xae
 8025206:	f023 0301 	bic.w	r3, r3, #1
 802520a:	f882 30ae 	strb.w	r3, [r2, #174]	@ 0xae
    }
  }
}
 802520e:	bf00      	nop
 8025210:	37bc      	adds	r7, #188	@ 0xbc
 8025212:	46bd      	mov	sp, r7
 8025214:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025216:	bf00      	nop
 8025218:	0802cf1c 	.word	0x0802cf1c
 802521c:	0802d0f8 	.word	0x0802d0f8
 8025220:	24000258 	.word	0x24000258
 8025224:	0803ae64 	.word	0x0803ae64
 8025228:	0802cb70 	.word	0x0802cb70
 802522c:	0802d1dc 	.word	0x0802d1dc

08025230 <send_websocket_data>:
    s_ws_handlers[s_ws_handlers_count].fn = fn;
    s_ws_handlers_count++;
  }
};

static void send_websocket_data(void) {
 8025230:	b5b0      	push	{r4, r5, r7, lr}
 8025232:	b088      	sub	sp, #32
 8025234:	af02      	add	r7, sp, #8
  struct mg_connection *c;
  uint64_t now = mg_millis();
 8025236:	f7db fc8b 	bl	8000b50 <mg_millis>
 802523a:	e9c7 0102 	strd	r0, r1, [r7, #8]

  for (c = g_mgr.conns; c != NULL; c = c->next) {
 802523e:	4b2a      	ldr	r3, [pc, #168]	@ (80252e8 <send_websocket_data+0xb8>)
 8025240:	681b      	ldr	r3, [r3, #0]
 8025242:	617b      	str	r3, [r7, #20]
 8025244:	e048      	b.n	80252d8 <send_websocket_data+0xa8>
    uint64_t *timers = (uint64_t *) &c->data[0];
 8025246:	697b      	ldr	r3, [r7, #20]
 8025248:	3388      	adds	r3, #136	@ 0x88
 802524a:	607b      	str	r3, [r7, #4]
    size_t i;

    if (c->is_websocket == 0) continue;  // Not a websocket connection? Skip
 802524c:	697b      	ldr	r3, [r7, #20]
 802524e:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8025252:	f003 0302 	and.w	r3, r3, #2
 8025256:	b2db      	uxtb	r3, r3
 8025258:	2b00      	cmp	r3, #0
 802525a:	d037      	beq.n	80252cc <send_websocket_data+0x9c>
    if (c->send.len > 2048) continue;    // Too much data already? Skip
 802525c:	697b      	ldr	r3, [r7, #20]
 802525e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8025260:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8025264:	d834      	bhi.n	80252d0 <send_websocket_data+0xa0>

    for (i = 0; i < s_ws_handlers_count; i++) {
 8025266:	2300      	movs	r3, #0
 8025268:	613b      	str	r3, [r7, #16]
 802526a:	e029      	b.n	80252c0 <send_websocket_data+0x90>
      if (c->pfn_data == NULL ||
 802526c:	697b      	ldr	r3, [r7, #20]
 802526e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8025272:	2b00      	cmp	r3, #0
 8025274:	d016      	beq.n	80252a4 <send_websocket_data+0x74>
          mg_timer_expired(&timers[i], s_ws_handlers[i].timeout_ms, now)) {
 8025276:	693b      	ldr	r3, [r7, #16]
 8025278:	00db      	lsls	r3, r3, #3
 802527a:	687a      	ldr	r2, [r7, #4]
 802527c:	18d1      	adds	r1, r2, r3
 802527e:	4a1b      	ldr	r2, [pc, #108]	@ (80252ec <send_websocket_data+0xbc>)
 8025280:	693b      	ldr	r3, [r7, #16]
 8025282:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8025286:	2200      	movs	r2, #0
 8025288:	461c      	mov	r4, r3
 802528a:	4615      	mov	r5, r2
 802528c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8025290:	e9cd 2300 	strd	r2, r3, [sp]
 8025294:	4622      	mov	r2, r4
 8025296:	462b      	mov	r3, r5
 8025298:	4608      	mov	r0, r1
 802529a:	f7f1 ffdb 	bl	8017254 <mg_timer_expired>
 802529e:	4603      	mov	r3, r0
      if (c->pfn_data == NULL ||
 80252a0:	2b00      	cmp	r3, #0
 80252a2:	d00a      	beq.n	80252ba <send_websocket_data+0x8a>
        s_ws_handlers[i].fn(c);
 80252a4:	4a11      	ldr	r2, [pc, #68]	@ (80252ec <send_websocket_data+0xbc>)
 80252a6:	693b      	ldr	r3, [r7, #16]
 80252a8:	00db      	lsls	r3, r3, #3
 80252aa:	4413      	add	r3, r2
 80252ac:	685b      	ldr	r3, [r3, #4]
 80252ae:	6978      	ldr	r0, [r7, #20]
 80252b0:	4798      	blx	r3
        c->pfn_data = (void *) 1;
 80252b2:	697b      	ldr	r3, [r7, #20]
 80252b4:	2201      	movs	r2, #1
 80252b6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    for (i = 0; i < s_ws_handlers_count; i++) {
 80252ba:	693b      	ldr	r3, [r7, #16]
 80252bc:	3301      	adds	r3, #1
 80252be:	613b      	str	r3, [r7, #16]
 80252c0:	4b0b      	ldr	r3, [pc, #44]	@ (80252f0 <send_websocket_data+0xc0>)
 80252c2:	681b      	ldr	r3, [r3, #0]
 80252c4:	693a      	ldr	r2, [r7, #16]
 80252c6:	429a      	cmp	r2, r3
 80252c8:	d3d0      	bcc.n	802526c <send_websocket_data+0x3c>
 80252ca:	e002      	b.n	80252d2 <send_websocket_data+0xa2>
    if (c->is_websocket == 0) continue;  // Not a websocket connection? Skip
 80252cc:	bf00      	nop
 80252ce:	e000      	b.n	80252d2 <send_websocket_data+0xa2>
    if (c->send.len > 2048) continue;    // Too much data already? Skip
 80252d0:	bf00      	nop
  for (c = g_mgr.conns; c != NULL; c = c->next) {
 80252d2:	697b      	ldr	r3, [r7, #20]
 80252d4:	681b      	ldr	r3, [r3, #0]
 80252d6:	617b      	str	r3, [r7, #20]
 80252d8:	697b      	ldr	r3, [r7, #20]
 80252da:	2b00      	cmp	r3, #0
 80252dc:	d1b3      	bne.n	8025246 <send_websocket_data+0x16>
      }
    }
  }
}
 80252de:	bf00      	nop
 80252e0:	bf00      	nop
 80252e2:	3718      	adds	r7, #24
 80252e4:	46bd      	mov	sp, r7
 80252e6:	bdb0      	pop	{r4, r5, r7, pc}
 80252e8:	240056b8 	.word	0x240056b8
 80252ec:	24005704 	.word	0x24005704
 80252f0:	24005724 	.word	0x24005724

080252f4 <handle_modbus_pdu>:
#if WIZARD_ENABLE_MODBUS
static struct mongoose_modbus_handlers s_modbus_handlers = {
    glue_modbus_read_reg, glue_modbus_write_reg};

static void handle_modbus_pdu(struct mg_connection *c, uint8_t *buf,
                              size_t len) {
 80252f4:	b5b0      	push	{r4, r5, r7, lr}
 80252f6:	b0d0      	sub	sp, #320	@ 0x140
 80252f8:	af00      	add	r7, sp, #0
 80252fa:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80252fe:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8025302:	6018      	str	r0, [r3, #0]
 8025304:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8025308:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 802530c:	6019      	str	r1, [r3, #0]
 802530e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8025312:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8025316:	601a      	str	r2, [r3, #0]
  MG_DEBUG(("Received PDU %p len %lu, hexdump:", buf, len));
 8025318:	4bb8      	ldr	r3, [pc, #736]	@ (80255fc <handle_modbus_pdu+0x308>)
 802531a:	681b      	ldr	r3, [r3, #0]
 802531c:	2b02      	cmp	r3, #2
 802531e:	dd13      	ble.n	8025348 <handle_modbus_pdu+0x54>
 8025320:	4bb7      	ldr	r3, [pc, #732]	@ (8025600 <handle_modbus_pdu+0x30c>)
 8025322:	f240 3225 	movw	r2, #805	@ 0x325
 8025326:	49b7      	ldr	r1, [pc, #732]	@ (8025604 <handle_modbus_pdu+0x310>)
 8025328:	2003      	movs	r0, #3
 802532a:	f7e9 fabb 	bl	800e8a4 <mg_log_prefix>
 802532e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8025332:	f5a3 729e 	sub.w	r2, r3, #316	@ 0x13c
 8025336:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 802533a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 802533e:	6812      	ldr	r2, [r2, #0]
 8025340:	6819      	ldr	r1, [r3, #0]
 8025342:	48b1      	ldr	r0, [pc, #708]	@ (8025608 <handle_modbus_pdu+0x314>)
 8025344:	f7e9 fafe 	bl	800e944 <mg_log>
  mg_hexdump(buf, len);
 8025348:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 802534c:	f5a3 729e 	sub.w	r2, r3, #316	@ 0x13c
 8025350:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8025354:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8025358:	6811      	ldr	r1, [r2, #0]
 802535a:	6818      	ldr	r0, [r3, #0]
 802535c:	f7e9 fb28 	bl	800e9b0 <mg_hexdump>
  // size_t hdr_size = 8, max_data_size = sizeof(response) - hdr_size;
  if (len < 12) {
 8025360:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8025364:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8025368:	681b      	ldr	r3, [r3, #0]
 802536a:	2b0b      	cmp	r3, #11
 802536c:	d80f      	bhi.n	802538e <handle_modbus_pdu+0x9a>
    MG_ERROR(("PDU too small"));
 802536e:	4ba3      	ldr	r3, [pc, #652]	@ (80255fc <handle_modbus_pdu+0x308>)
 8025370:	681b      	ldr	r3, [r3, #0]
 8025372:	2b00      	cmp	r3, #0
 8025374:	f340 81f8 	ble.w	8025768 <handle_modbus_pdu+0x474>
 8025378:	4ba1      	ldr	r3, [pc, #644]	@ (8025600 <handle_modbus_pdu+0x30c>)
 802537a:	f240 3229 	movw	r2, #809	@ 0x329
 802537e:	49a1      	ldr	r1, [pc, #644]	@ (8025604 <handle_modbus_pdu+0x310>)
 8025380:	2001      	movs	r0, #1
 8025382:	f7e9 fa8f 	bl	800e8a4 <mg_log_prefix>
 8025386:	48a1      	ldr	r0, [pc, #644]	@ (802560c <handle_modbus_pdu+0x318>)
 8025388:	f7e9 fadc 	bl	800e944 <mg_log>
    *(uint16_t *) &response[4] = mg_htons((uint16_t) (response_len - 6));
    MG_DEBUG(("Sending PDU response %lu:", response_len));
    mg_hexdump(response, response_len);
    mg_send(c, response, response_len);
  }
}
 802538c:	e1ec      	b.n	8025768 <handle_modbus_pdu+0x474>
    uint8_t func = buf[7];  // Function
 802538e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8025392:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8025396:	681b      	ldr	r3, [r3, #0]
 8025398:	79db      	ldrb	r3, [r3, #7]
 802539a:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
    bool success = false;
 802539e:	2300      	movs	r3, #0
 80253a0:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
    size_t response_len = 0;
 80253a4:	2300      	movs	r3, #0
 80253a6:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    memcpy(response, buf, 8);
 80253aa:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80253ae:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80253b2:	f107 0014 	add.w	r0, r7, #20
 80253b6:	2208      	movs	r2, #8
 80253b8:	6819      	ldr	r1, [r3, #0]
 80253ba:	f002 fabe 	bl	802793a <memcpy>
    if (func == 6) {  // write single holding register
 80253be:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 80253c2:	2b06      	cmp	r3, #6
 80253c4:	d155      	bne.n	8025472 <handle_modbus_pdu+0x17e>
      uint16_t start = mg_ntohs(*(uint16_t *) &buf[8]);
 80253c6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80253ca:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80253ce:	681b      	ldr	r3, [r3, #0]
 80253d0:	3308      	adds	r3, #8
 80253d2:	881b      	ldrh	r3, [r3, #0]
 80253d4:	4618      	mov	r0, r3
 80253d6:	f7fc fcff 	bl	8021dd8 <mg_ntohs>
 80253da:	4603      	mov	r3, r0
 80253dc:	f8a7 311e 	strh.w	r3, [r7, #286]	@ 0x11e
      uint16_t value = mg_ntohs(*(uint16_t *) &buf[10]);
 80253e0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80253e4:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80253e8:	681b      	ldr	r3, [r3, #0]
 80253ea:	330a      	adds	r3, #10
 80253ec:	881b      	ldrh	r3, [r3, #0]
 80253ee:	4618      	mov	r0, r3
 80253f0:	f7fc fcf2 	bl	8021dd8 <mg_ntohs>
 80253f4:	4603      	mov	r3, r0
 80253f6:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c
      success = s_modbus_handlers.write_reg_fn(start, value);
 80253fa:	4b85      	ldr	r3, [pc, #532]	@ (8025610 <handle_modbus_pdu+0x31c>)
 80253fc:	685b      	ldr	r3, [r3, #4]
 80253fe:	f8b7 111c 	ldrh.w	r1, [r7, #284]	@ 0x11c
 8025402:	f8b7 211e 	ldrh.w	r2, [r7, #286]	@ 0x11e
 8025406:	4610      	mov	r0, r2
 8025408:	4798      	blx	r3
 802540a:	4603      	mov	r3, r0
 802540c:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
      *(uint16_t *) &response[8] = mg_htons(start);
 8025410:	f107 0314 	add.w	r3, r7, #20
 8025414:	f103 0408 	add.w	r4, r3, #8
 8025418:	f8b7 311e 	ldrh.w	r3, [r7, #286]	@ 0x11e
 802541c:	4618      	mov	r0, r3
 802541e:	f7fc fcdb 	bl	8021dd8 <mg_ntohs>
 8025422:	4603      	mov	r3, r0
 8025424:	8023      	strh	r3, [r4, #0]
      *(uint16_t *) &response[10] = mg_htons(value);
 8025426:	f107 0314 	add.w	r3, r7, #20
 802542a:	f103 040a 	add.w	r4, r3, #10
 802542e:	f8b7 311c 	ldrh.w	r3, [r7, #284]	@ 0x11c
 8025432:	4618      	mov	r0, r3
 8025434:	f7fc fcd0 	bl	8021dd8 <mg_ntohs>
 8025438:	4603      	mov	r3, r0
 802543a:	8023      	strh	r3, [r4, #0]
      response_len = 12;
 802543c:	230c      	movs	r3, #12
 802543e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
      MG_DEBUG(("Glue returned %s", success ? "success" : "failure"));
 8025442:	4b6e      	ldr	r3, [pc, #440]	@ (80255fc <handle_modbus_pdu+0x308>)
 8025444:	681b      	ldr	r3, [r3, #0]
 8025446:	2b02      	cmp	r3, #2
 8025448:	f340 8142 	ble.w	80256d0 <handle_modbus_pdu+0x3dc>
 802544c:	4b6c      	ldr	r3, [pc, #432]	@ (8025600 <handle_modbus_pdu+0x30c>)
 802544e:	f240 323b 	movw	r2, #827	@ 0x33b
 8025452:	496c      	ldr	r1, [pc, #432]	@ (8025604 <handle_modbus_pdu+0x310>)
 8025454:	2003      	movs	r0, #3
 8025456:	f7e9 fa25 	bl	800e8a4 <mg_log_prefix>
 802545a:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 802545e:	2b00      	cmp	r3, #0
 8025460:	d001      	beq.n	8025466 <handle_modbus_pdu+0x172>
 8025462:	4b6c      	ldr	r3, [pc, #432]	@ (8025614 <handle_modbus_pdu+0x320>)
 8025464:	e000      	b.n	8025468 <handle_modbus_pdu+0x174>
 8025466:	4b6c      	ldr	r3, [pc, #432]	@ (8025618 <handle_modbus_pdu+0x324>)
 8025468:	4619      	mov	r1, r3
 802546a:	486c      	ldr	r0, [pc, #432]	@ (802561c <handle_modbus_pdu+0x328>)
 802546c:	f7e9 fa6a 	bl	800e944 <mg_log>
 8025470:	e12e      	b.n	80256d0 <handle_modbus_pdu+0x3dc>
    } else if (func == 16) {  // Write multiple
 8025472:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 8025476:	2b10      	cmp	r3, #16
 8025478:	f040 808c 	bne.w	8025594 <handle_modbus_pdu+0x2a0>
      uint16_t start = mg_ntohs(*(uint16_t *) &buf[8]);
 802547c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8025480:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8025484:	681b      	ldr	r3, [r3, #0]
 8025486:	3308      	adds	r3, #8
 8025488:	881b      	ldrh	r3, [r3, #0]
 802548a:	4618      	mov	r0, r3
 802548c:	f7fc fca4 	bl	8021dd8 <mg_ntohs>
 8025490:	4603      	mov	r3, r0
 8025492:	f8a7 3126 	strh.w	r3, [r7, #294]	@ 0x126
      uint16_t num = mg_ntohs(*(uint16_t *) &buf[10]);
 8025496:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 802549a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 802549e:	681b      	ldr	r3, [r3, #0]
 80254a0:	330a      	adds	r3, #10
 80254a2:	881b      	ldrh	r3, [r3, #0]
 80254a4:	4618      	mov	r0, r3
 80254a6:	f7fc fc97 	bl	8021dd8 <mg_ntohs>
 80254aa:	4603      	mov	r3, r0
 80254ac:	f8a7 3124 	strh.w	r3, [r7, #292]	@ 0x124
      uint16_t i, *data = (uint16_t *) &buf[13];
 80254b0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80254b4:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80254b8:	681b      	ldr	r3, [r3, #0]
 80254ba:	330d      	adds	r3, #13
 80254bc:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
      if ((size_t) (num * 2 + 10) < sizeof(response)) {
 80254c0:	f8b7 3124 	ldrh.w	r3, [r7, #292]	@ 0x124
 80254c4:	3305      	adds	r3, #5
 80254c6:	005b      	lsls	r3, r3, #1
 80254c8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80254cc:	f080 8100 	bcs.w	80256d0 <handle_modbus_pdu+0x3dc>
        for (i = 0; i < num; i++) {
 80254d0:	2300      	movs	r3, #0
 80254d2:	f8a7 3136 	strh.w	r3, [r7, #310]	@ 0x136
 80254d6:	e024      	b.n	8025522 <handle_modbus_pdu+0x22e>
          success = s_modbus_handlers.write_reg_fn((uint16_t) (start + i),
 80254d8:	4b4d      	ldr	r3, [pc, #308]	@ (8025610 <handle_modbus_pdu+0x31c>)
 80254da:	685c      	ldr	r4, [r3, #4]
 80254dc:	f8b7 2126 	ldrh.w	r2, [r7, #294]	@ 0x126
 80254e0:	f8b7 3136 	ldrh.w	r3, [r7, #310]	@ 0x136
 80254e4:	4413      	add	r3, r2
 80254e6:	b29d      	uxth	r5, r3
                                                   mg_htons(data[i]));
 80254e8:	f8b7 3136 	ldrh.w	r3, [r7, #310]	@ 0x136
 80254ec:	005b      	lsls	r3, r3, #1
 80254ee:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 80254f2:	4413      	add	r3, r2
          success = s_modbus_handlers.write_reg_fn((uint16_t) (start + i),
 80254f4:	881b      	ldrh	r3, [r3, #0]
 80254f6:	4618      	mov	r0, r3
 80254f8:	f7fc fc6e 	bl	8021dd8 <mg_ntohs>
 80254fc:	4603      	mov	r3, r0
 80254fe:	4619      	mov	r1, r3
 8025500:	4628      	mov	r0, r5
 8025502:	47a0      	blx	r4
 8025504:	4603      	mov	r3, r0
 8025506:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
          if (success == false) break;
 802550a:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 802550e:	f083 0301 	eor.w	r3, r3, #1
 8025512:	b2db      	uxtb	r3, r3
 8025514:	2b00      	cmp	r3, #0
 8025516:	d10b      	bne.n	8025530 <handle_modbus_pdu+0x23c>
        for (i = 0; i < num; i++) {
 8025518:	f8b7 3136 	ldrh.w	r3, [r7, #310]	@ 0x136
 802551c:	3301      	adds	r3, #1
 802551e:	f8a7 3136 	strh.w	r3, [r7, #310]	@ 0x136
 8025522:	f8b7 2136 	ldrh.w	r2, [r7, #310]	@ 0x136
 8025526:	f8b7 3124 	ldrh.w	r3, [r7, #292]	@ 0x124
 802552a:	429a      	cmp	r2, r3
 802552c:	d3d4      	bcc.n	80254d8 <handle_modbus_pdu+0x1e4>
 802552e:	e000      	b.n	8025532 <handle_modbus_pdu+0x23e>
          if (success == false) break;
 8025530:	bf00      	nop
        *(uint16_t *) &response[8] = mg_htons(start);
 8025532:	f107 0314 	add.w	r3, r7, #20
 8025536:	f103 0408 	add.w	r4, r3, #8
 802553a:	f8b7 3126 	ldrh.w	r3, [r7, #294]	@ 0x126
 802553e:	4618      	mov	r0, r3
 8025540:	f7fc fc4a 	bl	8021dd8 <mg_ntohs>
 8025544:	4603      	mov	r3, r0
 8025546:	8023      	strh	r3, [r4, #0]
        *(uint16_t *) &response[10] = mg_htons(num);
 8025548:	f107 0314 	add.w	r3, r7, #20
 802554c:	f103 040a 	add.w	r4, r3, #10
 8025550:	f8b7 3124 	ldrh.w	r3, [r7, #292]	@ 0x124
 8025554:	4618      	mov	r0, r3
 8025556:	f7fc fc3f 	bl	8021dd8 <mg_ntohs>
 802555a:	4603      	mov	r3, r0
 802555c:	8023      	strh	r3, [r4, #0]
        response_len = 12;
 802555e:	230c      	movs	r3, #12
 8025560:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
        MG_DEBUG(("Glue returned %s", success ? "success" : "failure"));
 8025564:	4b25      	ldr	r3, [pc, #148]	@ (80255fc <handle_modbus_pdu+0x308>)
 8025566:	681b      	ldr	r3, [r3, #0]
 8025568:	2b02      	cmp	r3, #2
 802556a:	f340 80b1 	ble.w	80256d0 <handle_modbus_pdu+0x3dc>
 802556e:	4b24      	ldr	r3, [pc, #144]	@ (8025600 <handle_modbus_pdu+0x30c>)
 8025570:	f240 3249 	movw	r2, #841	@ 0x349
 8025574:	4923      	ldr	r1, [pc, #140]	@ (8025604 <handle_modbus_pdu+0x310>)
 8025576:	2003      	movs	r0, #3
 8025578:	f7e9 f994 	bl	800e8a4 <mg_log_prefix>
 802557c:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 8025580:	2b00      	cmp	r3, #0
 8025582:	d001      	beq.n	8025588 <handle_modbus_pdu+0x294>
 8025584:	4b23      	ldr	r3, [pc, #140]	@ (8025614 <handle_modbus_pdu+0x320>)
 8025586:	e000      	b.n	802558a <handle_modbus_pdu+0x296>
 8025588:	4b23      	ldr	r3, [pc, #140]	@ (8025618 <handle_modbus_pdu+0x324>)
 802558a:	4619      	mov	r1, r3
 802558c:	4823      	ldr	r0, [pc, #140]	@ (802561c <handle_modbus_pdu+0x328>)
 802558e:	f7e9 f9d9 	bl	800e944 <mg_log>
 8025592:	e09d      	b.n	80256d0 <handle_modbus_pdu+0x3dc>
    } else if (func == 3 || func == 4) {  // Read multiple
 8025594:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 8025598:	2b03      	cmp	r3, #3
 802559a:	d004      	beq.n	80255a6 <handle_modbus_pdu+0x2b2>
 802559c:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 80255a0:	2b04      	cmp	r3, #4
 80255a2:	f040 8095 	bne.w	80256d0 <handle_modbus_pdu+0x3dc>
      uint16_t start = mg_ntohs(*(uint16_t *) &buf[8]);
 80255a6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80255aa:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80255ae:	681b      	ldr	r3, [r3, #0]
 80255b0:	3308      	adds	r3, #8
 80255b2:	881b      	ldrh	r3, [r3, #0]
 80255b4:	4618      	mov	r0, r3
 80255b6:	f7fc fc0f 	bl	8021dd8 <mg_ntohs>
 80255ba:	4603      	mov	r3, r0
 80255bc:	f8a7 3130 	strh.w	r3, [r7, #304]	@ 0x130
      uint16_t num = mg_ntohs(*(uint16_t *) &buf[10]);
 80255c0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80255c4:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80255c8:	681b      	ldr	r3, [r3, #0]
 80255ca:	330a      	adds	r3, #10
 80255cc:	881b      	ldrh	r3, [r3, #0]
 80255ce:	4618      	mov	r0, r3
 80255d0:	f7fc fc02 	bl	8021dd8 <mg_ntohs>
 80255d4:	4603      	mov	r3, r0
 80255d6:	f8a7 312e 	strh.w	r3, [r7, #302]	@ 0x12e
      if ((size_t) (num * 2 + 9) < sizeof(response)) {
 80255da:	f8b7 312e 	ldrh.w	r3, [r7, #302]	@ 0x12e
 80255de:	005b      	lsls	r3, r3, #1
 80255e0:	3309      	adds	r3, #9
 80255e2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80255e6:	d273      	bcs.n	80256d0 <handle_modbus_pdu+0x3dc>
        uint16_t i, val, *data = (uint16_t *) &response[9];
 80255e8:	f107 0314 	add.w	r3, r7, #20
 80255ec:	3309      	adds	r3, #9
 80255ee:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
        for (i = 0; i < num; i++) {
 80255f2:	2300      	movs	r3, #0
 80255f4:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
 80255f8:	e03a      	b.n	8025670 <handle_modbus_pdu+0x37c>
 80255fa:	bf00      	nop
 80255fc:	24000258 	.word	0x24000258
 8025600:	0803ae74 	.word	0x0803ae74
 8025604:	0802cb70 	.word	0x0802cb70
 8025608:	0802d220 	.word	0x0802d220
 802560c:	0802d244 	.word	0x0802d244
 8025610:	24000820 	.word	0x24000820
 8025614:	0802d254 	.word	0x0802d254
 8025618:	0802d25c 	.word	0x0802d25c
 802561c:	0802d264 	.word	0x0802d264
          success = s_modbus_handlers.read_reg_fn((uint16_t) (start + i), &val);
 8025620:	4b54      	ldr	r3, [pc, #336]	@ (8025774 <handle_modbus_pdu+0x480>)
 8025622:	681b      	ldr	r3, [r3, #0]
 8025624:	f8b7 1130 	ldrh.w	r1, [r7, #304]	@ 0x130
 8025628:	f8b7 2134 	ldrh.w	r2, [r7, #308]	@ 0x134
 802562c:	440a      	add	r2, r1
 802562e:	b292      	uxth	r2, r2
 8025630:	f507 718d 	add.w	r1, r7, #282	@ 0x11a
 8025634:	4610      	mov	r0, r2
 8025636:	4798      	blx	r3
 8025638:	4603      	mov	r3, r0
 802563a:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
          if (success == false) break;
 802563e:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 8025642:	f083 0301 	eor.w	r3, r3, #1
 8025646:	b2db      	uxtb	r3, r3
 8025648:	2b00      	cmp	r3, #0
 802564a:	d118      	bne.n	802567e <handle_modbus_pdu+0x38a>
          data[i] = mg_htons(val);
 802564c:	f8b7 111a 	ldrh.w	r1, [r7, #282]	@ 0x11a
 8025650:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 8025654:	005b      	lsls	r3, r3, #1
 8025656:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 802565a:	18d4      	adds	r4, r2, r3
 802565c:	4608      	mov	r0, r1
 802565e:	f7fc fbbb 	bl	8021dd8 <mg_ntohs>
 8025662:	4603      	mov	r3, r0
 8025664:	8023      	strh	r3, [r4, #0]
        for (i = 0; i < num; i++) {
 8025666:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 802566a:	3301      	adds	r3, #1
 802566c:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
 8025670:	f8b7 2134 	ldrh.w	r2, [r7, #308]	@ 0x134
 8025674:	f8b7 312e 	ldrh.w	r3, [r7, #302]	@ 0x12e
 8025678:	429a      	cmp	r2, r3
 802567a:	d3d1      	bcc.n	8025620 <handle_modbus_pdu+0x32c>
 802567c:	e000      	b.n	8025680 <handle_modbus_pdu+0x38c>
          if (success == false) break;
 802567e:	bf00      	nop
        response[8] = (uint8_t) (num * 2);
 8025680:	f8b7 312e 	ldrh.w	r3, [r7, #302]	@ 0x12e
 8025684:	b2db      	uxtb	r3, r3
 8025686:	005b      	lsls	r3, r3, #1
 8025688:	b2da      	uxtb	r2, r3
 802568a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 802568e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8025692:	721a      	strb	r2, [r3, #8]
        response_len = 9 + response[8];
 8025694:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8025698:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 802569c:	7a1b      	ldrb	r3, [r3, #8]
 802569e:	3309      	adds	r3, #9
 80256a0:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
        MG_DEBUG(("Glue returned %s", success ? "success" : "failure"));
 80256a4:	4b34      	ldr	r3, [pc, #208]	@ (8025778 <handle_modbus_pdu+0x484>)
 80256a6:	681b      	ldr	r3, [r3, #0]
 80256a8:	2b02      	cmp	r3, #2
 80256aa:	dd11      	ble.n	80256d0 <handle_modbus_pdu+0x3dc>
 80256ac:	4b33      	ldr	r3, [pc, #204]	@ (802577c <handle_modbus_pdu+0x488>)
 80256ae:	f240 3257 	movw	r2, #855	@ 0x357
 80256b2:	4933      	ldr	r1, [pc, #204]	@ (8025780 <handle_modbus_pdu+0x48c>)
 80256b4:	2003      	movs	r0, #3
 80256b6:	f7e9 f8f5 	bl	800e8a4 <mg_log_prefix>
 80256ba:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 80256be:	2b00      	cmp	r3, #0
 80256c0:	d001      	beq.n	80256c6 <handle_modbus_pdu+0x3d2>
 80256c2:	4b30      	ldr	r3, [pc, #192]	@ (8025784 <handle_modbus_pdu+0x490>)
 80256c4:	e000      	b.n	80256c8 <handle_modbus_pdu+0x3d4>
 80256c6:	4b30      	ldr	r3, [pc, #192]	@ (8025788 <handle_modbus_pdu+0x494>)
 80256c8:	4619      	mov	r1, r3
 80256ca:	4830      	ldr	r0, [pc, #192]	@ (802578c <handle_modbus_pdu+0x498>)
 80256cc:	f7e9 f93a 	bl	800e944 <mg_log>
    if (success == false) {
 80256d0:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 80256d4:	f083 0301 	eor.w	r3, r3, #1
 80256d8:	b2db      	uxtb	r3, r3
 80256da:	2b00      	cmp	r3, #0
 80256dc:	d015      	beq.n	802570a <handle_modbus_pdu+0x416>
      response_len = 9;
 80256de:	2309      	movs	r3, #9
 80256e0:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
      response[7] |= 0x80;
 80256e4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80256e8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80256ec:	79db      	ldrb	r3, [r3, #7]
 80256ee:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80256f2:	b2da      	uxtb	r2, r3
 80256f4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80256f8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80256fc:	71da      	strb	r2, [r3, #7]
      response[8] = 4;  // Server Device Failure
 80256fe:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8025702:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8025706:	2204      	movs	r2, #4
 8025708:	721a      	strb	r2, [r3, #8]
    *(uint16_t *) &response[4] = mg_htons((uint16_t) (response_len - 6));
 802570a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 802570e:	b29b      	uxth	r3, r3
 8025710:	3b06      	subs	r3, #6
 8025712:	b29a      	uxth	r2, r3
 8025714:	f107 0314 	add.w	r3, r7, #20
 8025718:	1d1c      	adds	r4, r3, #4
 802571a:	4610      	mov	r0, r2
 802571c:	f7fc fb5c 	bl	8021dd8 <mg_ntohs>
 8025720:	4603      	mov	r3, r0
 8025722:	8023      	strh	r3, [r4, #0]
    MG_DEBUG(("Sending PDU response %lu:", response_len));
 8025724:	4b14      	ldr	r3, [pc, #80]	@ (8025778 <handle_modbus_pdu+0x484>)
 8025726:	681b      	ldr	r3, [r3, #0]
 8025728:	2b02      	cmp	r3, #2
 802572a:	dd0b      	ble.n	8025744 <handle_modbus_pdu+0x450>
 802572c:	4b13      	ldr	r3, [pc, #76]	@ (802577c <handle_modbus_pdu+0x488>)
 802572e:	f44f 7258 	mov.w	r2, #864	@ 0x360
 8025732:	4913      	ldr	r1, [pc, #76]	@ (8025780 <handle_modbus_pdu+0x48c>)
 8025734:	2003      	movs	r0, #3
 8025736:	f7e9 f8b5 	bl	800e8a4 <mg_log_prefix>
 802573a:	f8d7 1138 	ldr.w	r1, [r7, #312]	@ 0x138
 802573e:	4814      	ldr	r0, [pc, #80]	@ (8025790 <handle_modbus_pdu+0x49c>)
 8025740:	f7e9 f900 	bl	800e944 <mg_log>
    mg_hexdump(response, response_len);
 8025744:	f107 0314 	add.w	r3, r7, #20
 8025748:	f8d7 1138 	ldr.w	r1, [r7, #312]	@ 0x138
 802574c:	4618      	mov	r0, r3
 802574e:	f7e9 f92f 	bl	800e9b0 <mg_hexdump>
    mg_send(c, response, response_len);
 8025752:	f107 0114 	add.w	r1, r7, #20
 8025756:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 802575a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 802575e:	f8d7 2138 	ldr.w	r2, [r7, #312]	@ 0x138
 8025762:	6818      	ldr	r0, [r3, #0]
 8025764:	f7ed fb36 	bl	8012dd4 <mg_send>
}
 8025768:	bf00      	nop
 802576a:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 802576e:	46bd      	mov	sp, r7
 8025770:	bdb0      	pop	{r4, r5, r7, pc}
 8025772:	bf00      	nop
 8025774:	24000820 	.word	0x24000820
 8025778:	24000258 	.word	0x24000258
 802577c:	0803ae74 	.word	0x0803ae74
 8025780:	0802cb70 	.word	0x0802cb70
 8025784:	0802d254 	.word	0x0802d254
 8025788:	0802d25c 	.word	0x0802d25c
 802578c:	0802d264 	.word	0x0802d264
 8025790:	0802d278 	.word	0x0802d278

08025794 <modbus_ev_handler>:

static void modbus_ev_handler(struct mg_connection *c, int ev, void *ev_data) {
 8025794:	b580      	push	{r7, lr}
 8025796:	b086      	sub	sp, #24
 8025798:	af00      	add	r7, sp, #0
 802579a:	60f8      	str	r0, [r7, #12]
 802579c:	60b9      	str	r1, [r7, #8]
 802579e:	607a      	str	r2, [r7, #4]
  // if (ev == MG_EV_OPEN) c->is_hexdumping = 1;
  if (ev == MG_EV_READ) {
 80257a0:	68bb      	ldr	r3, [r7, #8]
 80257a2:	2b07      	cmp	r3, #7
 80257a4:	d13a      	bne.n	802581c <modbus_ev_handler+0x88>
    uint16_t len;
    if (c->recv.len < 7) return;  // Less than minimum length, buffer more
 80257a6:	68fb      	ldr	r3, [r7, #12]
 80257a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80257aa:	2b06      	cmp	r3, #6
 80257ac:	d933      	bls.n	8025816 <modbus_ev_handler+0x82>
    len = mg_ntohs(*(uint16_t *) &c->recv.buf[4]);  // PDU length
 80257ae:	68fb      	ldr	r3, [r7, #12]
 80257b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80257b2:	3304      	adds	r3, #4
 80257b4:	881b      	ldrh	r3, [r3, #0]
 80257b6:	4618      	mov	r0, r3
 80257b8:	f7fc fb0e 	bl	8021dd8 <mg_ntohs>
 80257bc:	4603      	mov	r3, r0
 80257be:	82fb      	strh	r3, [r7, #22]
    MG_INFO(("Got %lu, expecting %lu", c->recv.len, len + 6));
 80257c0:	4b18      	ldr	r3, [pc, #96]	@ (8025824 <modbus_ev_handler+0x90>)
 80257c2:	681b      	ldr	r3, [r3, #0]
 80257c4:	2b01      	cmp	r3, #1
 80257c6:	dd0e      	ble.n	80257e6 <modbus_ev_handler+0x52>
 80257c8:	4b17      	ldr	r3, [pc, #92]	@ (8025828 <modbus_ev_handler+0x94>)
 80257ca:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 80257ce:	4917      	ldr	r1, [pc, #92]	@ (802582c <modbus_ev_handler+0x98>)
 80257d0:	2002      	movs	r0, #2
 80257d2:	f7e9 f867 	bl	800e8a4 <mg_log_prefix>
 80257d6:	68fb      	ldr	r3, [r7, #12]
 80257d8:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80257da:	8afb      	ldrh	r3, [r7, #22]
 80257dc:	3306      	adds	r3, #6
 80257de:	461a      	mov	r2, r3
 80257e0:	4813      	ldr	r0, [pc, #76]	@ (8025830 <modbus_ev_handler+0x9c>)
 80257e2:	f7e9 f8af 	bl	800e944 <mg_log>
    if (c->recv.len < len + 6U) return;          // Partial frame, buffer more
 80257e6:	68fb      	ldr	r3, [r7, #12]
 80257e8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80257ea:	8afb      	ldrh	r3, [r7, #22]
 80257ec:	3306      	adds	r3, #6
 80257ee:	429a      	cmp	r2, r3
 80257f0:	d313      	bcc.n	802581a <modbus_ev_handler+0x86>
    handle_modbus_pdu(c, c->recv.buf, len + 6);  // Parse PDU and call user
 80257f2:	68fb      	ldr	r3, [r7, #12]
 80257f4:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80257f6:	8afb      	ldrh	r3, [r7, #22]
 80257f8:	3306      	adds	r3, #6
 80257fa:	461a      	mov	r2, r3
 80257fc:	68f8      	ldr	r0, [r7, #12]
 80257fe:	f7ff fd79 	bl	80252f4 <handle_modbus_pdu>
    mg_iobuf_del(&c->recv, 0, len + 6U);         // Delete received PDU
 8025802:	68fb      	ldr	r3, [r7, #12]
 8025804:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8025808:	8afb      	ldrh	r3, [r7, #22]
 802580a:	3306      	adds	r3, #6
 802580c:	461a      	mov	r2, r3
 802580e:	2100      	movs	r1, #0
 8025810:	f7e8 f830 	bl	800d874 <mg_iobuf_del>
 8025814:	e002      	b.n	802581c <modbus_ev_handler+0x88>
    if (c->recv.len < 7) return;  // Less than minimum length, buffer more
 8025816:	bf00      	nop
 8025818:	e000      	b.n	802581c <modbus_ev_handler+0x88>
    if (c->recv.len < len + 6U) return;          // Partial frame, buffer more
 802581a:	bf00      	nop
  }
  (void) ev_data;
}
 802581c:	3718      	adds	r7, #24
 802581e:	46bd      	mov	sp, r7
 8025820:	bd80      	pop	{r7, pc}
 8025822:	bf00      	nop
 8025824:	24000258 	.word	0x24000258
 8025828:	0803ae88 	.word	0x0803ae88
 802582c:	0802cb70 	.word	0x0802cb70
 8025830:	0802d294 	.word	0x0802d294

08025834 <mongoose_init>:
  }
  (void) ev_data;
}
#endif  // WIZARD_CAPTIVE_PORTAL

void mongoose_init(void) {
 8025834:	b580      	push	{r7, lr}
 8025836:	b09a      	sub	sp, #104	@ 0x68
 8025838:	af00      	add	r7, sp, #0
  mg_mgr_init(&g_mgr);      // Initialise event manager
 802583a:	4824      	ldr	r0, [pc, #144]	@ (80258cc <mongoose_init+0x98>)
 802583c:	f7e9 fe1a 	bl	800f474 <mg_mgr_init>
  mg_log_set(MG_LL_DEBUG);  // Set log level to debug
 8025840:	4b23      	ldr	r3, [pc, #140]	@ (80258d0 <mongoose_init+0x9c>)
 8025842:	2203      	movs	r2, #3
 8025844:	601a      	str	r2, [r3, #0]

#if WIZARD_ENABLE_HTTP
  MG_INFO(("Starting HTTP listener"));
 8025846:	4b22      	ldr	r3, [pc, #136]	@ (80258d0 <mongoose_init+0x9c>)
 8025848:	681b      	ldr	r3, [r3, #0]
 802584a:	2b01      	cmp	r3, #1
 802584c:	dd09      	ble.n	8025862 <mongoose_init+0x2e>
 802584e:	4b21      	ldr	r3, [pc, #132]	@ (80258d4 <mongoose_init+0xa0>)
 8025850:	f240 32ad 	movw	r2, #941	@ 0x3ad
 8025854:	4920      	ldr	r1, [pc, #128]	@ (80258d8 <mongoose_init+0xa4>)
 8025856:	2002      	movs	r0, #2
 8025858:	f7e9 f824 	bl	800e8a4 <mg_log_prefix>
 802585c:	481f      	ldr	r0, [pc, #124]	@ (80258dc <mongoose_init+0xa8>)
 802585e:	f7e9 f871 	bl	800e944 <mg_log>
  mg_http_listen(&g_mgr, HTTP_URL, http_ev_handler, NULL);
 8025862:	2300      	movs	r3, #0
 8025864:	4a1e      	ldr	r2, [pc, #120]	@ (80258e0 <mongoose_init+0xac>)
 8025866:	491f      	ldr	r1, [pc, #124]	@ (80258e4 <mongoose_init+0xb0>)
 8025868:	4818      	ldr	r0, [pc, #96]	@ (80258cc <mongoose_init+0x98>)
 802586a:	f7e7 feef 	bl	800d64c <mg_http_listen>
#endif

#if WIZARD_ENABLE_MODBUS
  {
    char url[100];
    mg_snprintf(url, sizeof(url), "tcp://0.0.0.0:%d", WIZARD_MODBUS_PORT);
 802586e:	1d38      	adds	r0, r7, #4
 8025870:	f44f 73fb 	mov.w	r3, #502	@ 0x1f6
 8025874:	4a1c      	ldr	r2, [pc, #112]	@ (80258e8 <mongoose_init+0xb4>)
 8025876:	2164      	movs	r1, #100	@ 0x64
 8025878:	f7ed fc50 	bl	801311c <mg_snprintf>
    MG_INFO(("Starting Modbus-TCP server on port %d", WIZARD_MODBUS_PORT));
 802587c:	4b14      	ldr	r3, [pc, #80]	@ (80258d0 <mongoose_init+0x9c>)
 802587e:	681b      	ldr	r3, [r3, #0]
 8025880:	2b01      	cmp	r3, #1
 8025882:	dd0b      	ble.n	802589c <mongoose_init+0x68>
 8025884:	4b13      	ldr	r3, [pc, #76]	@ (80258d4 <mongoose_init+0xa0>)
 8025886:	f240 32c7 	movw	r2, #967	@ 0x3c7
 802588a:	4913      	ldr	r1, [pc, #76]	@ (80258d8 <mongoose_init+0xa4>)
 802588c:	2002      	movs	r0, #2
 802588e:	f7e9 f809 	bl	800e8a4 <mg_log_prefix>
 8025892:	f44f 71fb 	mov.w	r1, #502	@ 0x1f6
 8025896:	4815      	ldr	r0, [pc, #84]	@ (80258ec <mongoose_init+0xb8>)
 8025898:	f7e9 f854 	bl	800e944 <mg_log>
    mg_listen(&g_mgr, url, modbus_ev_handler, NULL);
 802589c:	1d39      	adds	r1, r7, #4
 802589e:	2300      	movs	r3, #0
 80258a0:	4a13      	ldr	r2, [pc, #76]	@ (80258f0 <mongoose_init+0xbc>)
 80258a2:	480a      	ldr	r0, [pc, #40]	@ (80258cc <mongoose_init+0x98>)
 80258a4:	f7e9 fd1a 	bl	800f2dc <mg_listen>
  MG_INFO(("Starting MDNS (domain name: %s.local)", WIZARD_MDNS_NAME));
  mg_mdns_listen(&g_mgr, WIZARD_MDNS_NAME);
#endif

  glue_lock_init();
  MG_INFO(("Mongoose init complete"));
 80258a8:	4b09      	ldr	r3, [pc, #36]	@ (80258d0 <mongoose_init+0x9c>)
 80258aa:	681b      	ldr	r3, [r3, #0]
 80258ac:	2b01      	cmp	r3, #1
 80258ae:	dd09      	ble.n	80258c4 <mongoose_init+0x90>
 80258b0:	4b08      	ldr	r3, [pc, #32]	@ (80258d4 <mongoose_init+0xa0>)
 80258b2:	f240 32d7 	movw	r2, #983	@ 0x3d7
 80258b6:	4908      	ldr	r1, [pc, #32]	@ (80258d8 <mongoose_init+0xa4>)
 80258b8:	2002      	movs	r0, #2
 80258ba:	f7e8 fff3 	bl	800e8a4 <mg_log_prefix>
 80258be:	480d      	ldr	r0, [pc, #52]	@ (80258f4 <mongoose_init+0xc0>)
 80258c0:	f7e9 f840 	bl	800e944 <mg_log>
}
 80258c4:	bf00      	nop
 80258c6:	3768      	adds	r7, #104	@ 0x68
 80258c8:	46bd      	mov	sp, r7
 80258ca:	bd80      	pop	{r7, pc}
 80258cc:	240056b8 	.word	0x240056b8
 80258d0:	24000258 	.word	0x24000258
 80258d4:	0803ae9c 	.word	0x0803ae9c
 80258d8:	0802cb70 	.word	0x0802cb70
 80258dc:	0802d2ac 	.word	0x0802d2ac
 80258e0:	08024dc5 	.word	0x08024dc5
 80258e4:	0802d2c4 	.word	0x0802d2c4
 80258e8:	0802d2d8 	.word	0x0802d2d8
 80258ec:	0802d2ec 	.word	0x0802d2ec
 80258f0:	08025795 	.word	0x08025795
 80258f4:	0802d314 	.word	0x0802d314

080258f8 <mongoose_poll>:

void mongoose_poll(void) {
 80258f8:	b580      	push	{r7, lr}
 80258fa:	af00      	add	r7, sp, #0
  glue_lock();
  mg_mgr_poll(&g_mgr, 10);
 80258fc:	210a      	movs	r1, #10
 80258fe:	4803      	ldr	r0, [pc, #12]	@ (802590c <mongoose_poll+0x14>)
 8025900:	f7ed f936 	bl	8012b70 <mg_mgr_poll>
#if WIZARD_ENABLE_WEBSOCKET
  send_websocket_data();
 8025904:	f7ff fc94 	bl	8025230 <send_websocket_data>
#endif
  glue_unlock();
 8025908:	bf00      	nop
 802590a:	bd80      	pop	{r7, pc}
 802590c:	240056b8 	.word	0x240056b8

08025910 <abort>:
 8025910:	b508      	push	{r3, lr}
 8025912:	2006      	movs	r0, #6
 8025914:	f001 ff66 	bl	80277e4 <raise>
 8025918:	2001      	movs	r0, #1
 802591a:	f7dc fa08 	bl	8001d2e <_exit>
	...

08025920 <__assert_func>:
 8025920:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8025922:	4614      	mov	r4, r2
 8025924:	461a      	mov	r2, r3
 8025926:	4b09      	ldr	r3, [pc, #36]	@ (802594c <__assert_func+0x2c>)
 8025928:	681b      	ldr	r3, [r3, #0]
 802592a:	4605      	mov	r5, r0
 802592c:	68d8      	ldr	r0, [r3, #12]
 802592e:	b14c      	cbz	r4, 8025944 <__assert_func+0x24>
 8025930:	4b07      	ldr	r3, [pc, #28]	@ (8025950 <__assert_func+0x30>)
 8025932:	9100      	str	r1, [sp, #0]
 8025934:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8025938:	4906      	ldr	r1, [pc, #24]	@ (8025954 <__assert_func+0x34>)
 802593a:	462b      	mov	r3, r5
 802593c:	f001 fce6 	bl	802730c <fiprintf>
 8025940:	f7ff ffe6 	bl	8025910 <abort>
 8025944:	4b04      	ldr	r3, [pc, #16]	@ (8025958 <__assert_func+0x38>)
 8025946:	461c      	mov	r4, r3
 8025948:	e7f3      	b.n	8025932 <__assert_func+0x12>
 802594a:	bf00      	nop
 802594c:	240009a0 	.word	0x240009a0
 8025950:	0803aeaa 	.word	0x0803aeaa
 8025954:	0803aeb7 	.word	0x0803aeb7
 8025958:	0803aee5 	.word	0x0803aee5

0802595c <atof>:
 802595c:	2100      	movs	r1, #0
 802595e:	f000 bec1 	b.w	80266e4 <strtod>

08025962 <atoi>:
 8025962:	220a      	movs	r2, #10
 8025964:	2100      	movs	r1, #0
 8025966:	f000 bf43 	b.w	80267f0 <strtol>
	...

0802596c <calloc>:
 802596c:	4b02      	ldr	r3, [pc, #8]	@ (8025978 <calloc+0xc>)
 802596e:	460a      	mov	r2, r1
 8025970:	4601      	mov	r1, r0
 8025972:	6818      	ldr	r0, [r3, #0]
 8025974:	f000 b802 	b.w	802597c <_calloc_r>
 8025978:	240009a0 	.word	0x240009a0

0802597c <_calloc_r>:
 802597c:	b570      	push	{r4, r5, r6, lr}
 802597e:	fba1 5402 	umull	r5, r4, r1, r2
 8025982:	b934      	cbnz	r4, 8025992 <_calloc_r+0x16>
 8025984:	4629      	mov	r1, r5
 8025986:	f000 f83f 	bl	8025a08 <_malloc_r>
 802598a:	4606      	mov	r6, r0
 802598c:	b928      	cbnz	r0, 802599a <_calloc_r+0x1e>
 802598e:	4630      	mov	r0, r6
 8025990:	bd70      	pop	{r4, r5, r6, pc}
 8025992:	220c      	movs	r2, #12
 8025994:	6002      	str	r2, [r0, #0]
 8025996:	2600      	movs	r6, #0
 8025998:	e7f9      	b.n	802598e <_calloc_r+0x12>
 802599a:	462a      	mov	r2, r5
 802599c:	4621      	mov	r1, r4
 802599e:	f001 fe93 	bl	80276c8 <memset>
 80259a2:	e7f4      	b.n	802598e <_calloc_r+0x12>

080259a4 <malloc>:
 80259a4:	4b02      	ldr	r3, [pc, #8]	@ (80259b0 <malloc+0xc>)
 80259a6:	4601      	mov	r1, r0
 80259a8:	6818      	ldr	r0, [r3, #0]
 80259aa:	f000 b82d 	b.w	8025a08 <_malloc_r>
 80259ae:	bf00      	nop
 80259b0:	240009a0 	.word	0x240009a0

080259b4 <free>:
 80259b4:	4b02      	ldr	r3, [pc, #8]	@ (80259c0 <free+0xc>)
 80259b6:	4601      	mov	r1, r0
 80259b8:	6818      	ldr	r0, [r3, #0]
 80259ba:	f002 bdbb 	b.w	8028534 <_free_r>
 80259be:	bf00      	nop
 80259c0:	240009a0 	.word	0x240009a0

080259c4 <sbrk_aligned>:
 80259c4:	b570      	push	{r4, r5, r6, lr}
 80259c6:	4e0f      	ldr	r6, [pc, #60]	@ (8025a04 <sbrk_aligned+0x40>)
 80259c8:	460c      	mov	r4, r1
 80259ca:	6831      	ldr	r1, [r6, #0]
 80259cc:	4605      	mov	r5, r0
 80259ce:	b911      	cbnz	r1, 80259d6 <sbrk_aligned+0x12>
 80259d0:	f001 ff5c 	bl	802788c <_sbrk_r>
 80259d4:	6030      	str	r0, [r6, #0]
 80259d6:	4621      	mov	r1, r4
 80259d8:	4628      	mov	r0, r5
 80259da:	f001 ff57 	bl	802788c <_sbrk_r>
 80259de:	1c43      	adds	r3, r0, #1
 80259e0:	d103      	bne.n	80259ea <sbrk_aligned+0x26>
 80259e2:	f04f 34ff 	mov.w	r4, #4294967295
 80259e6:	4620      	mov	r0, r4
 80259e8:	bd70      	pop	{r4, r5, r6, pc}
 80259ea:	1cc4      	adds	r4, r0, #3
 80259ec:	f024 0403 	bic.w	r4, r4, #3
 80259f0:	42a0      	cmp	r0, r4
 80259f2:	d0f8      	beq.n	80259e6 <sbrk_aligned+0x22>
 80259f4:	1a21      	subs	r1, r4, r0
 80259f6:	4628      	mov	r0, r5
 80259f8:	f001 ff48 	bl	802788c <_sbrk_r>
 80259fc:	3001      	adds	r0, #1
 80259fe:	d1f2      	bne.n	80259e6 <sbrk_aligned+0x22>
 8025a00:	e7ef      	b.n	80259e2 <sbrk_aligned+0x1e>
 8025a02:	bf00      	nop
 8025a04:	24005728 	.word	0x24005728

08025a08 <_malloc_r>:
 8025a08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8025a0c:	1ccd      	adds	r5, r1, #3
 8025a0e:	f025 0503 	bic.w	r5, r5, #3
 8025a12:	3508      	adds	r5, #8
 8025a14:	2d0c      	cmp	r5, #12
 8025a16:	bf38      	it	cc
 8025a18:	250c      	movcc	r5, #12
 8025a1a:	2d00      	cmp	r5, #0
 8025a1c:	4606      	mov	r6, r0
 8025a1e:	db01      	blt.n	8025a24 <_malloc_r+0x1c>
 8025a20:	42a9      	cmp	r1, r5
 8025a22:	d904      	bls.n	8025a2e <_malloc_r+0x26>
 8025a24:	230c      	movs	r3, #12
 8025a26:	6033      	str	r3, [r6, #0]
 8025a28:	2000      	movs	r0, #0
 8025a2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8025a2e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8025b04 <_malloc_r+0xfc>
 8025a32:	f000 f869 	bl	8025b08 <__malloc_lock>
 8025a36:	f8d8 3000 	ldr.w	r3, [r8]
 8025a3a:	461c      	mov	r4, r3
 8025a3c:	bb44      	cbnz	r4, 8025a90 <_malloc_r+0x88>
 8025a3e:	4629      	mov	r1, r5
 8025a40:	4630      	mov	r0, r6
 8025a42:	f7ff ffbf 	bl	80259c4 <sbrk_aligned>
 8025a46:	1c43      	adds	r3, r0, #1
 8025a48:	4604      	mov	r4, r0
 8025a4a:	d158      	bne.n	8025afe <_malloc_r+0xf6>
 8025a4c:	f8d8 4000 	ldr.w	r4, [r8]
 8025a50:	4627      	mov	r7, r4
 8025a52:	2f00      	cmp	r7, #0
 8025a54:	d143      	bne.n	8025ade <_malloc_r+0xd6>
 8025a56:	2c00      	cmp	r4, #0
 8025a58:	d04b      	beq.n	8025af2 <_malloc_r+0xea>
 8025a5a:	6823      	ldr	r3, [r4, #0]
 8025a5c:	4639      	mov	r1, r7
 8025a5e:	4630      	mov	r0, r6
 8025a60:	eb04 0903 	add.w	r9, r4, r3
 8025a64:	f001 ff12 	bl	802788c <_sbrk_r>
 8025a68:	4581      	cmp	r9, r0
 8025a6a:	d142      	bne.n	8025af2 <_malloc_r+0xea>
 8025a6c:	6821      	ldr	r1, [r4, #0]
 8025a6e:	1a6d      	subs	r5, r5, r1
 8025a70:	4629      	mov	r1, r5
 8025a72:	4630      	mov	r0, r6
 8025a74:	f7ff ffa6 	bl	80259c4 <sbrk_aligned>
 8025a78:	3001      	adds	r0, #1
 8025a7a:	d03a      	beq.n	8025af2 <_malloc_r+0xea>
 8025a7c:	6823      	ldr	r3, [r4, #0]
 8025a7e:	442b      	add	r3, r5
 8025a80:	6023      	str	r3, [r4, #0]
 8025a82:	f8d8 3000 	ldr.w	r3, [r8]
 8025a86:	685a      	ldr	r2, [r3, #4]
 8025a88:	bb62      	cbnz	r2, 8025ae4 <_malloc_r+0xdc>
 8025a8a:	f8c8 7000 	str.w	r7, [r8]
 8025a8e:	e00f      	b.n	8025ab0 <_malloc_r+0xa8>
 8025a90:	6822      	ldr	r2, [r4, #0]
 8025a92:	1b52      	subs	r2, r2, r5
 8025a94:	d420      	bmi.n	8025ad8 <_malloc_r+0xd0>
 8025a96:	2a0b      	cmp	r2, #11
 8025a98:	d917      	bls.n	8025aca <_malloc_r+0xc2>
 8025a9a:	1961      	adds	r1, r4, r5
 8025a9c:	42a3      	cmp	r3, r4
 8025a9e:	6025      	str	r5, [r4, #0]
 8025aa0:	bf18      	it	ne
 8025aa2:	6059      	strne	r1, [r3, #4]
 8025aa4:	6863      	ldr	r3, [r4, #4]
 8025aa6:	bf08      	it	eq
 8025aa8:	f8c8 1000 	streq.w	r1, [r8]
 8025aac:	5162      	str	r2, [r4, r5]
 8025aae:	604b      	str	r3, [r1, #4]
 8025ab0:	4630      	mov	r0, r6
 8025ab2:	f000 f82f 	bl	8025b14 <__malloc_unlock>
 8025ab6:	f104 000b 	add.w	r0, r4, #11
 8025aba:	1d23      	adds	r3, r4, #4
 8025abc:	f020 0007 	bic.w	r0, r0, #7
 8025ac0:	1ac2      	subs	r2, r0, r3
 8025ac2:	bf1c      	itt	ne
 8025ac4:	1a1b      	subne	r3, r3, r0
 8025ac6:	50a3      	strne	r3, [r4, r2]
 8025ac8:	e7af      	b.n	8025a2a <_malloc_r+0x22>
 8025aca:	6862      	ldr	r2, [r4, #4]
 8025acc:	42a3      	cmp	r3, r4
 8025ace:	bf0c      	ite	eq
 8025ad0:	f8c8 2000 	streq.w	r2, [r8]
 8025ad4:	605a      	strne	r2, [r3, #4]
 8025ad6:	e7eb      	b.n	8025ab0 <_malloc_r+0xa8>
 8025ad8:	4623      	mov	r3, r4
 8025ada:	6864      	ldr	r4, [r4, #4]
 8025adc:	e7ae      	b.n	8025a3c <_malloc_r+0x34>
 8025ade:	463c      	mov	r4, r7
 8025ae0:	687f      	ldr	r7, [r7, #4]
 8025ae2:	e7b6      	b.n	8025a52 <_malloc_r+0x4a>
 8025ae4:	461a      	mov	r2, r3
 8025ae6:	685b      	ldr	r3, [r3, #4]
 8025ae8:	42a3      	cmp	r3, r4
 8025aea:	d1fb      	bne.n	8025ae4 <_malloc_r+0xdc>
 8025aec:	2300      	movs	r3, #0
 8025aee:	6053      	str	r3, [r2, #4]
 8025af0:	e7de      	b.n	8025ab0 <_malloc_r+0xa8>
 8025af2:	230c      	movs	r3, #12
 8025af4:	6033      	str	r3, [r6, #0]
 8025af6:	4630      	mov	r0, r6
 8025af8:	f000 f80c 	bl	8025b14 <__malloc_unlock>
 8025afc:	e794      	b.n	8025a28 <_malloc_r+0x20>
 8025afe:	6005      	str	r5, [r0, #0]
 8025b00:	e7d6      	b.n	8025ab0 <_malloc_r+0xa8>
 8025b02:	bf00      	nop
 8025b04:	2400572c 	.word	0x2400572c

08025b08 <__malloc_lock>:
 8025b08:	4801      	ldr	r0, [pc, #4]	@ (8025b10 <__malloc_lock+0x8>)
 8025b0a:	f001 bf0c 	b.w	8027926 <__retarget_lock_acquire_recursive>
 8025b0e:	bf00      	nop
 8025b10:	24005870 	.word	0x24005870

08025b14 <__malloc_unlock>:
 8025b14:	4801      	ldr	r0, [pc, #4]	@ (8025b1c <__malloc_unlock+0x8>)
 8025b16:	f001 bf07 	b.w	8027928 <__retarget_lock_release_recursive>
 8025b1a:	bf00      	nop
 8025b1c:	24005870 	.word	0x24005870

08025b20 <srand>:
 8025b20:	b538      	push	{r3, r4, r5, lr}
 8025b22:	4b10      	ldr	r3, [pc, #64]	@ (8025b64 <srand+0x44>)
 8025b24:	681d      	ldr	r5, [r3, #0]
 8025b26:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8025b28:	4604      	mov	r4, r0
 8025b2a:	b9b3      	cbnz	r3, 8025b5a <srand+0x3a>
 8025b2c:	2018      	movs	r0, #24
 8025b2e:	f7ff ff39 	bl	80259a4 <malloc>
 8025b32:	4602      	mov	r2, r0
 8025b34:	6328      	str	r0, [r5, #48]	@ 0x30
 8025b36:	b920      	cbnz	r0, 8025b42 <srand+0x22>
 8025b38:	4b0b      	ldr	r3, [pc, #44]	@ (8025b68 <srand+0x48>)
 8025b3a:	480c      	ldr	r0, [pc, #48]	@ (8025b6c <srand+0x4c>)
 8025b3c:	2146      	movs	r1, #70	@ 0x46
 8025b3e:	f7ff feef 	bl	8025920 <__assert_func>
 8025b42:	490b      	ldr	r1, [pc, #44]	@ (8025b70 <srand+0x50>)
 8025b44:	4b0b      	ldr	r3, [pc, #44]	@ (8025b74 <srand+0x54>)
 8025b46:	e9c0 1300 	strd	r1, r3, [r0]
 8025b4a:	4b0b      	ldr	r3, [pc, #44]	@ (8025b78 <srand+0x58>)
 8025b4c:	6083      	str	r3, [r0, #8]
 8025b4e:	230b      	movs	r3, #11
 8025b50:	8183      	strh	r3, [r0, #12]
 8025b52:	2100      	movs	r1, #0
 8025b54:	2001      	movs	r0, #1
 8025b56:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8025b5a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8025b5c:	2200      	movs	r2, #0
 8025b5e:	611c      	str	r4, [r3, #16]
 8025b60:	615a      	str	r2, [r3, #20]
 8025b62:	bd38      	pop	{r3, r4, r5, pc}
 8025b64:	240009a0 	.word	0x240009a0
 8025b68:	0803aee6 	.word	0x0803aee6
 8025b6c:	0803aefd 	.word	0x0803aefd
 8025b70:	abcd330e 	.word	0xabcd330e
 8025b74:	e66d1234 	.word	0xe66d1234
 8025b78:	0005deec 	.word	0x0005deec

08025b7c <sulp>:
 8025b7c:	b570      	push	{r4, r5, r6, lr}
 8025b7e:	4604      	mov	r4, r0
 8025b80:	460d      	mov	r5, r1
 8025b82:	4616      	mov	r6, r2
 8025b84:	ec45 4b10 	vmov	d0, r4, r5
 8025b88:	f003 fbd6 	bl	8029338 <__ulp>
 8025b8c:	b17e      	cbz	r6, 8025bae <sulp+0x32>
 8025b8e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8025b92:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8025b96:	2b00      	cmp	r3, #0
 8025b98:	dd09      	ble.n	8025bae <sulp+0x32>
 8025b9a:	051b      	lsls	r3, r3, #20
 8025b9c:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 8025ba0:	2000      	movs	r0, #0
 8025ba2:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 8025ba6:	ec41 0b17 	vmov	d7, r0, r1
 8025baa:	ee20 0b07 	vmul.f64	d0, d0, d7
 8025bae:	bd70      	pop	{r4, r5, r6, pc}

08025bb0 <_strtod_l>:
 8025bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025bb4:	ed2d 8b0a 	vpush	{d8-d12}
 8025bb8:	b097      	sub	sp, #92	@ 0x5c
 8025bba:	4688      	mov	r8, r1
 8025bbc:	920e      	str	r2, [sp, #56]	@ 0x38
 8025bbe:	2200      	movs	r2, #0
 8025bc0:	9212      	str	r2, [sp, #72]	@ 0x48
 8025bc2:	9005      	str	r0, [sp, #20]
 8025bc4:	f04f 0a00 	mov.w	sl, #0
 8025bc8:	f04f 0b00 	mov.w	fp, #0
 8025bcc:	460a      	mov	r2, r1
 8025bce:	9211      	str	r2, [sp, #68]	@ 0x44
 8025bd0:	7811      	ldrb	r1, [r2, #0]
 8025bd2:	292b      	cmp	r1, #43	@ 0x2b
 8025bd4:	d04c      	beq.n	8025c70 <_strtod_l+0xc0>
 8025bd6:	d839      	bhi.n	8025c4c <_strtod_l+0x9c>
 8025bd8:	290d      	cmp	r1, #13
 8025bda:	d833      	bhi.n	8025c44 <_strtod_l+0x94>
 8025bdc:	2908      	cmp	r1, #8
 8025bde:	d833      	bhi.n	8025c48 <_strtod_l+0x98>
 8025be0:	2900      	cmp	r1, #0
 8025be2:	d03c      	beq.n	8025c5e <_strtod_l+0xae>
 8025be4:	2200      	movs	r2, #0
 8025be6:	9208      	str	r2, [sp, #32]
 8025be8:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8025bea:	782a      	ldrb	r2, [r5, #0]
 8025bec:	2a30      	cmp	r2, #48	@ 0x30
 8025bee:	f040 80b7 	bne.w	8025d60 <_strtod_l+0x1b0>
 8025bf2:	786a      	ldrb	r2, [r5, #1]
 8025bf4:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8025bf8:	2a58      	cmp	r2, #88	@ 0x58
 8025bfa:	d170      	bne.n	8025cde <_strtod_l+0x12e>
 8025bfc:	9302      	str	r3, [sp, #8]
 8025bfe:	9b08      	ldr	r3, [sp, #32]
 8025c00:	9301      	str	r3, [sp, #4]
 8025c02:	ab12      	add	r3, sp, #72	@ 0x48
 8025c04:	9300      	str	r3, [sp, #0]
 8025c06:	4a90      	ldr	r2, [pc, #576]	@ (8025e48 <_strtod_l+0x298>)
 8025c08:	9805      	ldr	r0, [sp, #20]
 8025c0a:	ab13      	add	r3, sp, #76	@ 0x4c
 8025c0c:	a911      	add	r1, sp, #68	@ 0x44
 8025c0e:	f002 fd43 	bl	8028698 <__gethex>
 8025c12:	f010 060f 	ands.w	r6, r0, #15
 8025c16:	4604      	mov	r4, r0
 8025c18:	d005      	beq.n	8025c26 <_strtod_l+0x76>
 8025c1a:	2e06      	cmp	r6, #6
 8025c1c:	d12a      	bne.n	8025c74 <_strtod_l+0xc4>
 8025c1e:	3501      	adds	r5, #1
 8025c20:	2300      	movs	r3, #0
 8025c22:	9511      	str	r5, [sp, #68]	@ 0x44
 8025c24:	9308      	str	r3, [sp, #32]
 8025c26:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8025c28:	2b00      	cmp	r3, #0
 8025c2a:	f040 8537 	bne.w	802669c <_strtod_l+0xaec>
 8025c2e:	9b08      	ldr	r3, [sp, #32]
 8025c30:	ec4b ab10 	vmov	d0, sl, fp
 8025c34:	b1cb      	cbz	r3, 8025c6a <_strtod_l+0xba>
 8025c36:	eeb1 0b40 	vneg.f64	d0, d0
 8025c3a:	b017      	add	sp, #92	@ 0x5c
 8025c3c:	ecbd 8b0a 	vpop	{d8-d12}
 8025c40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025c44:	2920      	cmp	r1, #32
 8025c46:	d1cd      	bne.n	8025be4 <_strtod_l+0x34>
 8025c48:	3201      	adds	r2, #1
 8025c4a:	e7c0      	b.n	8025bce <_strtod_l+0x1e>
 8025c4c:	292d      	cmp	r1, #45	@ 0x2d
 8025c4e:	d1c9      	bne.n	8025be4 <_strtod_l+0x34>
 8025c50:	2101      	movs	r1, #1
 8025c52:	9108      	str	r1, [sp, #32]
 8025c54:	1c51      	adds	r1, r2, #1
 8025c56:	9111      	str	r1, [sp, #68]	@ 0x44
 8025c58:	7852      	ldrb	r2, [r2, #1]
 8025c5a:	2a00      	cmp	r2, #0
 8025c5c:	d1c4      	bne.n	8025be8 <_strtod_l+0x38>
 8025c5e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8025c60:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8025c64:	2b00      	cmp	r3, #0
 8025c66:	f040 8517 	bne.w	8026698 <_strtod_l+0xae8>
 8025c6a:	ec4b ab10 	vmov	d0, sl, fp
 8025c6e:	e7e4      	b.n	8025c3a <_strtod_l+0x8a>
 8025c70:	2100      	movs	r1, #0
 8025c72:	e7ee      	b.n	8025c52 <_strtod_l+0xa2>
 8025c74:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8025c76:	b13a      	cbz	r2, 8025c88 <_strtod_l+0xd8>
 8025c78:	2135      	movs	r1, #53	@ 0x35
 8025c7a:	a814      	add	r0, sp, #80	@ 0x50
 8025c7c:	f003 fc53 	bl	8029526 <__copybits>
 8025c80:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8025c82:	9805      	ldr	r0, [sp, #20]
 8025c84:	f003 f82c 	bl	8028ce0 <_Bfree>
 8025c88:	1e73      	subs	r3, r6, #1
 8025c8a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8025c8c:	2b04      	cmp	r3, #4
 8025c8e:	d806      	bhi.n	8025c9e <_strtod_l+0xee>
 8025c90:	e8df f003 	tbb	[pc, r3]
 8025c94:	201d0314 	.word	0x201d0314
 8025c98:	14          	.byte	0x14
 8025c99:	00          	.byte	0x00
 8025c9a:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 8025c9e:	05e3      	lsls	r3, r4, #23
 8025ca0:	bf48      	it	mi
 8025ca2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8025ca6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8025caa:	0d1b      	lsrs	r3, r3, #20
 8025cac:	051b      	lsls	r3, r3, #20
 8025cae:	2b00      	cmp	r3, #0
 8025cb0:	d1b9      	bne.n	8025c26 <_strtod_l+0x76>
 8025cb2:	f001 fe0d 	bl	80278d0 <__errno>
 8025cb6:	2322      	movs	r3, #34	@ 0x22
 8025cb8:	6003      	str	r3, [r0, #0]
 8025cba:	e7b4      	b.n	8025c26 <_strtod_l+0x76>
 8025cbc:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 8025cc0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8025cc4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8025cc8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8025ccc:	e7e7      	b.n	8025c9e <_strtod_l+0xee>
 8025cce:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8025e50 <_strtod_l+0x2a0>
 8025cd2:	e7e4      	b.n	8025c9e <_strtod_l+0xee>
 8025cd4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8025cd8:	f04f 3aff 	mov.w	sl, #4294967295
 8025cdc:	e7df      	b.n	8025c9e <_strtod_l+0xee>
 8025cde:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8025ce0:	1c5a      	adds	r2, r3, #1
 8025ce2:	9211      	str	r2, [sp, #68]	@ 0x44
 8025ce4:	785b      	ldrb	r3, [r3, #1]
 8025ce6:	2b30      	cmp	r3, #48	@ 0x30
 8025ce8:	d0f9      	beq.n	8025cde <_strtod_l+0x12e>
 8025cea:	2b00      	cmp	r3, #0
 8025cec:	d09b      	beq.n	8025c26 <_strtod_l+0x76>
 8025cee:	2301      	movs	r3, #1
 8025cf0:	9307      	str	r3, [sp, #28]
 8025cf2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8025cf4:	930a      	str	r3, [sp, #40]	@ 0x28
 8025cf6:	2300      	movs	r3, #0
 8025cf8:	9306      	str	r3, [sp, #24]
 8025cfa:	4699      	mov	r9, r3
 8025cfc:	461d      	mov	r5, r3
 8025cfe:	220a      	movs	r2, #10
 8025d00:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8025d02:	7804      	ldrb	r4, [r0, #0]
 8025d04:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 8025d08:	b2d9      	uxtb	r1, r3
 8025d0a:	2909      	cmp	r1, #9
 8025d0c:	d92a      	bls.n	8025d64 <_strtod_l+0x1b4>
 8025d0e:	494f      	ldr	r1, [pc, #316]	@ (8025e4c <_strtod_l+0x29c>)
 8025d10:	2201      	movs	r2, #1
 8025d12:	f001 fcee 	bl	80276f2 <strncmp>
 8025d16:	b398      	cbz	r0, 8025d80 <_strtod_l+0x1d0>
 8025d18:	2000      	movs	r0, #0
 8025d1a:	4622      	mov	r2, r4
 8025d1c:	462b      	mov	r3, r5
 8025d1e:	4607      	mov	r7, r0
 8025d20:	4601      	mov	r1, r0
 8025d22:	2a65      	cmp	r2, #101	@ 0x65
 8025d24:	d001      	beq.n	8025d2a <_strtod_l+0x17a>
 8025d26:	2a45      	cmp	r2, #69	@ 0x45
 8025d28:	d118      	bne.n	8025d5c <_strtod_l+0x1ac>
 8025d2a:	b91b      	cbnz	r3, 8025d34 <_strtod_l+0x184>
 8025d2c:	9b07      	ldr	r3, [sp, #28]
 8025d2e:	4303      	orrs	r3, r0
 8025d30:	d095      	beq.n	8025c5e <_strtod_l+0xae>
 8025d32:	2300      	movs	r3, #0
 8025d34:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 8025d38:	f108 0201 	add.w	r2, r8, #1
 8025d3c:	9211      	str	r2, [sp, #68]	@ 0x44
 8025d3e:	f898 2001 	ldrb.w	r2, [r8, #1]
 8025d42:	2a2b      	cmp	r2, #43	@ 0x2b
 8025d44:	d074      	beq.n	8025e30 <_strtod_l+0x280>
 8025d46:	2a2d      	cmp	r2, #45	@ 0x2d
 8025d48:	d07a      	beq.n	8025e40 <_strtod_l+0x290>
 8025d4a:	f04f 0e00 	mov.w	lr, #0
 8025d4e:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8025d52:	2c09      	cmp	r4, #9
 8025d54:	f240 8082 	bls.w	8025e5c <_strtod_l+0x2ac>
 8025d58:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8025d5c:	2400      	movs	r4, #0
 8025d5e:	e09d      	b.n	8025e9c <_strtod_l+0x2ec>
 8025d60:	2300      	movs	r3, #0
 8025d62:	e7c5      	b.n	8025cf0 <_strtod_l+0x140>
 8025d64:	2d08      	cmp	r5, #8
 8025d66:	bfc8      	it	gt
 8025d68:	9906      	ldrgt	r1, [sp, #24]
 8025d6a:	f100 0001 	add.w	r0, r0, #1
 8025d6e:	bfca      	itet	gt
 8025d70:	fb02 3301 	mlagt	r3, r2, r1, r3
 8025d74:	fb02 3909 	mlale	r9, r2, r9, r3
 8025d78:	9306      	strgt	r3, [sp, #24]
 8025d7a:	3501      	adds	r5, #1
 8025d7c:	9011      	str	r0, [sp, #68]	@ 0x44
 8025d7e:	e7bf      	b.n	8025d00 <_strtod_l+0x150>
 8025d80:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8025d82:	1c5a      	adds	r2, r3, #1
 8025d84:	9211      	str	r2, [sp, #68]	@ 0x44
 8025d86:	785a      	ldrb	r2, [r3, #1]
 8025d88:	b3bd      	cbz	r5, 8025dfa <_strtod_l+0x24a>
 8025d8a:	4607      	mov	r7, r0
 8025d8c:	462b      	mov	r3, r5
 8025d8e:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8025d92:	2909      	cmp	r1, #9
 8025d94:	d912      	bls.n	8025dbc <_strtod_l+0x20c>
 8025d96:	2101      	movs	r1, #1
 8025d98:	e7c3      	b.n	8025d22 <_strtod_l+0x172>
 8025d9a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8025d9c:	1c5a      	adds	r2, r3, #1
 8025d9e:	9211      	str	r2, [sp, #68]	@ 0x44
 8025da0:	785a      	ldrb	r2, [r3, #1]
 8025da2:	3001      	adds	r0, #1
 8025da4:	2a30      	cmp	r2, #48	@ 0x30
 8025da6:	d0f8      	beq.n	8025d9a <_strtod_l+0x1ea>
 8025da8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8025dac:	2b08      	cmp	r3, #8
 8025dae:	f200 847a 	bhi.w	80266a6 <_strtod_l+0xaf6>
 8025db2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8025db4:	930a      	str	r3, [sp, #40]	@ 0x28
 8025db6:	4607      	mov	r7, r0
 8025db8:	2000      	movs	r0, #0
 8025dba:	4603      	mov	r3, r0
 8025dbc:	3a30      	subs	r2, #48	@ 0x30
 8025dbe:	f100 0101 	add.w	r1, r0, #1
 8025dc2:	d014      	beq.n	8025dee <_strtod_l+0x23e>
 8025dc4:	440f      	add	r7, r1
 8025dc6:	469c      	mov	ip, r3
 8025dc8:	f04f 0e0a 	mov.w	lr, #10
 8025dcc:	f10c 0401 	add.w	r4, ip, #1
 8025dd0:	1ae6      	subs	r6, r4, r3
 8025dd2:	42b1      	cmp	r1, r6
 8025dd4:	dc13      	bgt.n	8025dfe <_strtod_l+0x24e>
 8025dd6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8025dda:	1819      	adds	r1, r3, r0
 8025ddc:	2908      	cmp	r1, #8
 8025dde:	f103 0301 	add.w	r3, r3, #1
 8025de2:	4403      	add	r3, r0
 8025de4:	dc19      	bgt.n	8025e1a <_strtod_l+0x26a>
 8025de6:	210a      	movs	r1, #10
 8025de8:	fb01 2909 	mla	r9, r1, r9, r2
 8025dec:	2100      	movs	r1, #0
 8025dee:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8025df0:	1c50      	adds	r0, r2, #1
 8025df2:	9011      	str	r0, [sp, #68]	@ 0x44
 8025df4:	7852      	ldrb	r2, [r2, #1]
 8025df6:	4608      	mov	r0, r1
 8025df8:	e7c9      	b.n	8025d8e <_strtod_l+0x1de>
 8025dfa:	4628      	mov	r0, r5
 8025dfc:	e7d2      	b.n	8025da4 <_strtod_l+0x1f4>
 8025dfe:	f1bc 0f08 	cmp.w	ip, #8
 8025e02:	dc03      	bgt.n	8025e0c <_strtod_l+0x25c>
 8025e04:	fb0e f909 	mul.w	r9, lr, r9
 8025e08:	46a4      	mov	ip, r4
 8025e0a:	e7df      	b.n	8025dcc <_strtod_l+0x21c>
 8025e0c:	2c10      	cmp	r4, #16
 8025e0e:	bfde      	ittt	le
 8025e10:	9e06      	ldrle	r6, [sp, #24]
 8025e12:	fb0e f606 	mulle.w	r6, lr, r6
 8025e16:	9606      	strle	r6, [sp, #24]
 8025e18:	e7f6      	b.n	8025e08 <_strtod_l+0x258>
 8025e1a:	290f      	cmp	r1, #15
 8025e1c:	bfdf      	itttt	le
 8025e1e:	9806      	ldrle	r0, [sp, #24]
 8025e20:	210a      	movle	r1, #10
 8025e22:	fb01 2200 	mlale	r2, r1, r0, r2
 8025e26:	9206      	strle	r2, [sp, #24]
 8025e28:	e7e0      	b.n	8025dec <_strtod_l+0x23c>
 8025e2a:	2700      	movs	r7, #0
 8025e2c:	2101      	movs	r1, #1
 8025e2e:	e77d      	b.n	8025d2c <_strtod_l+0x17c>
 8025e30:	f04f 0e00 	mov.w	lr, #0
 8025e34:	f108 0202 	add.w	r2, r8, #2
 8025e38:	9211      	str	r2, [sp, #68]	@ 0x44
 8025e3a:	f898 2002 	ldrb.w	r2, [r8, #2]
 8025e3e:	e786      	b.n	8025d4e <_strtod_l+0x19e>
 8025e40:	f04f 0e01 	mov.w	lr, #1
 8025e44:	e7f6      	b.n	8025e34 <_strtod_l+0x284>
 8025e46:	bf00      	nop
 8025e48:	0803b0e8 	.word	0x0803b0e8
 8025e4c:	0803af55 	.word	0x0803af55
 8025e50:	7ff00000 	.word	0x7ff00000
 8025e54:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8025e56:	1c54      	adds	r4, r2, #1
 8025e58:	9411      	str	r4, [sp, #68]	@ 0x44
 8025e5a:	7852      	ldrb	r2, [r2, #1]
 8025e5c:	2a30      	cmp	r2, #48	@ 0x30
 8025e5e:	d0f9      	beq.n	8025e54 <_strtod_l+0x2a4>
 8025e60:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 8025e64:	2c08      	cmp	r4, #8
 8025e66:	f63f af79 	bhi.w	8025d5c <_strtod_l+0x1ac>
 8025e6a:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 8025e6e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8025e70:	9209      	str	r2, [sp, #36]	@ 0x24
 8025e72:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8025e74:	1c54      	adds	r4, r2, #1
 8025e76:	9411      	str	r4, [sp, #68]	@ 0x44
 8025e78:	7852      	ldrb	r2, [r2, #1]
 8025e7a:	f1a2 0630 	sub.w	r6, r2, #48	@ 0x30
 8025e7e:	2e09      	cmp	r6, #9
 8025e80:	d937      	bls.n	8025ef2 <_strtod_l+0x342>
 8025e82:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8025e84:	1ba4      	subs	r4, r4, r6
 8025e86:	2c08      	cmp	r4, #8
 8025e88:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 8025e8c:	dc02      	bgt.n	8025e94 <_strtod_l+0x2e4>
 8025e8e:	4564      	cmp	r4, ip
 8025e90:	bfa8      	it	ge
 8025e92:	4664      	movge	r4, ip
 8025e94:	f1be 0f00 	cmp.w	lr, #0
 8025e98:	d000      	beq.n	8025e9c <_strtod_l+0x2ec>
 8025e9a:	4264      	negs	r4, r4
 8025e9c:	2b00      	cmp	r3, #0
 8025e9e:	d14d      	bne.n	8025f3c <_strtod_l+0x38c>
 8025ea0:	9b07      	ldr	r3, [sp, #28]
 8025ea2:	4318      	orrs	r0, r3
 8025ea4:	f47f aebf 	bne.w	8025c26 <_strtod_l+0x76>
 8025ea8:	2900      	cmp	r1, #0
 8025eaa:	f47f aed8 	bne.w	8025c5e <_strtod_l+0xae>
 8025eae:	2a69      	cmp	r2, #105	@ 0x69
 8025eb0:	d027      	beq.n	8025f02 <_strtod_l+0x352>
 8025eb2:	dc24      	bgt.n	8025efe <_strtod_l+0x34e>
 8025eb4:	2a49      	cmp	r2, #73	@ 0x49
 8025eb6:	d024      	beq.n	8025f02 <_strtod_l+0x352>
 8025eb8:	2a4e      	cmp	r2, #78	@ 0x4e
 8025eba:	f47f aed0 	bne.w	8025c5e <_strtod_l+0xae>
 8025ebe:	4997      	ldr	r1, [pc, #604]	@ (802611c <_strtod_l+0x56c>)
 8025ec0:	a811      	add	r0, sp, #68	@ 0x44
 8025ec2:	f002 fe0b 	bl	8028adc <__match>
 8025ec6:	2800      	cmp	r0, #0
 8025ec8:	f43f aec9 	beq.w	8025c5e <_strtod_l+0xae>
 8025ecc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8025ece:	781b      	ldrb	r3, [r3, #0]
 8025ed0:	2b28      	cmp	r3, #40	@ 0x28
 8025ed2:	d12d      	bne.n	8025f30 <_strtod_l+0x380>
 8025ed4:	4992      	ldr	r1, [pc, #584]	@ (8026120 <_strtod_l+0x570>)
 8025ed6:	aa14      	add	r2, sp, #80	@ 0x50
 8025ed8:	a811      	add	r0, sp, #68	@ 0x44
 8025eda:	f002 fe13 	bl	8028b04 <__hexnan>
 8025ede:	2805      	cmp	r0, #5
 8025ee0:	d126      	bne.n	8025f30 <_strtod_l+0x380>
 8025ee2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8025ee4:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 8025ee8:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8025eec:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8025ef0:	e699      	b.n	8025c26 <_strtod_l+0x76>
 8025ef2:	240a      	movs	r4, #10
 8025ef4:	fb04 2c0c 	mla	ip, r4, ip, r2
 8025ef8:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 8025efc:	e7b9      	b.n	8025e72 <_strtod_l+0x2c2>
 8025efe:	2a6e      	cmp	r2, #110	@ 0x6e
 8025f00:	e7db      	b.n	8025eba <_strtod_l+0x30a>
 8025f02:	4988      	ldr	r1, [pc, #544]	@ (8026124 <_strtod_l+0x574>)
 8025f04:	a811      	add	r0, sp, #68	@ 0x44
 8025f06:	f002 fde9 	bl	8028adc <__match>
 8025f0a:	2800      	cmp	r0, #0
 8025f0c:	f43f aea7 	beq.w	8025c5e <_strtod_l+0xae>
 8025f10:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8025f12:	4985      	ldr	r1, [pc, #532]	@ (8026128 <_strtod_l+0x578>)
 8025f14:	3b01      	subs	r3, #1
 8025f16:	a811      	add	r0, sp, #68	@ 0x44
 8025f18:	9311      	str	r3, [sp, #68]	@ 0x44
 8025f1a:	f002 fddf 	bl	8028adc <__match>
 8025f1e:	b910      	cbnz	r0, 8025f26 <_strtod_l+0x376>
 8025f20:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8025f22:	3301      	adds	r3, #1
 8025f24:	9311      	str	r3, [sp, #68]	@ 0x44
 8025f26:	f8df b214 	ldr.w	fp, [pc, #532]	@ 802613c <_strtod_l+0x58c>
 8025f2a:	f04f 0a00 	mov.w	sl, #0
 8025f2e:	e67a      	b.n	8025c26 <_strtod_l+0x76>
 8025f30:	487e      	ldr	r0, [pc, #504]	@ (802612c <_strtod_l+0x57c>)
 8025f32:	f001 fd11 	bl	8027958 <nan>
 8025f36:	ec5b ab10 	vmov	sl, fp, d0
 8025f3a:	e674      	b.n	8025c26 <_strtod_l+0x76>
 8025f3c:	ee07 9a90 	vmov	s15, r9
 8025f40:	1be2      	subs	r2, r4, r7
 8025f42:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8025f46:	2d00      	cmp	r5, #0
 8025f48:	bf08      	it	eq
 8025f4a:	461d      	moveq	r5, r3
 8025f4c:	2b10      	cmp	r3, #16
 8025f4e:	9209      	str	r2, [sp, #36]	@ 0x24
 8025f50:	461a      	mov	r2, r3
 8025f52:	bfa8      	it	ge
 8025f54:	2210      	movge	r2, #16
 8025f56:	2b09      	cmp	r3, #9
 8025f58:	ec5b ab17 	vmov	sl, fp, d7
 8025f5c:	dc15      	bgt.n	8025f8a <_strtod_l+0x3da>
 8025f5e:	1be1      	subs	r1, r4, r7
 8025f60:	2900      	cmp	r1, #0
 8025f62:	f43f ae60 	beq.w	8025c26 <_strtod_l+0x76>
 8025f66:	eba4 0107 	sub.w	r1, r4, r7
 8025f6a:	dd72      	ble.n	8026052 <_strtod_l+0x4a2>
 8025f6c:	2916      	cmp	r1, #22
 8025f6e:	dc59      	bgt.n	8026024 <_strtod_l+0x474>
 8025f70:	4b6f      	ldr	r3, [pc, #444]	@ (8026130 <_strtod_l+0x580>)
 8025f72:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8025f74:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8025f78:	ed93 7b00 	vldr	d7, [r3]
 8025f7c:	ec4b ab16 	vmov	d6, sl, fp
 8025f80:	ee27 7b06 	vmul.f64	d7, d7, d6
 8025f84:	ec5b ab17 	vmov	sl, fp, d7
 8025f88:	e64d      	b.n	8025c26 <_strtod_l+0x76>
 8025f8a:	4969      	ldr	r1, [pc, #420]	@ (8026130 <_strtod_l+0x580>)
 8025f8c:	eddd 6a06 	vldr	s13, [sp, #24]
 8025f90:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8025f94:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 8025f98:	2b0f      	cmp	r3, #15
 8025f9a:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8025f9e:	eea7 6b05 	vfma.f64	d6, d7, d5
 8025fa2:	ec5b ab16 	vmov	sl, fp, d6
 8025fa6:	ddda      	ble.n	8025f5e <_strtod_l+0x3ae>
 8025fa8:	1a9a      	subs	r2, r3, r2
 8025faa:	1be1      	subs	r1, r4, r7
 8025fac:	440a      	add	r2, r1
 8025fae:	2a00      	cmp	r2, #0
 8025fb0:	f340 8094 	ble.w	80260dc <_strtod_l+0x52c>
 8025fb4:	f012 000f 	ands.w	r0, r2, #15
 8025fb8:	d00a      	beq.n	8025fd0 <_strtod_l+0x420>
 8025fba:	495d      	ldr	r1, [pc, #372]	@ (8026130 <_strtod_l+0x580>)
 8025fbc:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8025fc0:	ed91 7b00 	vldr	d7, [r1]
 8025fc4:	ec4b ab16 	vmov	d6, sl, fp
 8025fc8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8025fcc:	ec5b ab17 	vmov	sl, fp, d7
 8025fd0:	f032 020f 	bics.w	r2, r2, #15
 8025fd4:	d073      	beq.n	80260be <_strtod_l+0x50e>
 8025fd6:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 8025fda:	dd47      	ble.n	802606c <_strtod_l+0x4bc>
 8025fdc:	2400      	movs	r4, #0
 8025fde:	4625      	mov	r5, r4
 8025fe0:	9407      	str	r4, [sp, #28]
 8025fe2:	4626      	mov	r6, r4
 8025fe4:	9a05      	ldr	r2, [sp, #20]
 8025fe6:	f8df b154 	ldr.w	fp, [pc, #340]	@ 802613c <_strtod_l+0x58c>
 8025fea:	2322      	movs	r3, #34	@ 0x22
 8025fec:	6013      	str	r3, [r2, #0]
 8025fee:	f04f 0a00 	mov.w	sl, #0
 8025ff2:	9b07      	ldr	r3, [sp, #28]
 8025ff4:	2b00      	cmp	r3, #0
 8025ff6:	f43f ae16 	beq.w	8025c26 <_strtod_l+0x76>
 8025ffa:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8025ffc:	9805      	ldr	r0, [sp, #20]
 8025ffe:	f002 fe6f 	bl	8028ce0 <_Bfree>
 8026002:	9805      	ldr	r0, [sp, #20]
 8026004:	4631      	mov	r1, r6
 8026006:	f002 fe6b 	bl	8028ce0 <_Bfree>
 802600a:	9805      	ldr	r0, [sp, #20]
 802600c:	4629      	mov	r1, r5
 802600e:	f002 fe67 	bl	8028ce0 <_Bfree>
 8026012:	9907      	ldr	r1, [sp, #28]
 8026014:	9805      	ldr	r0, [sp, #20]
 8026016:	f002 fe63 	bl	8028ce0 <_Bfree>
 802601a:	9805      	ldr	r0, [sp, #20]
 802601c:	4621      	mov	r1, r4
 802601e:	f002 fe5f 	bl	8028ce0 <_Bfree>
 8026022:	e600      	b.n	8025c26 <_strtod_l+0x76>
 8026024:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 8026028:	1be0      	subs	r0, r4, r7
 802602a:	4281      	cmp	r1, r0
 802602c:	dbbc      	blt.n	8025fa8 <_strtod_l+0x3f8>
 802602e:	4a40      	ldr	r2, [pc, #256]	@ (8026130 <_strtod_l+0x580>)
 8026030:	f1c3 030f 	rsb	r3, r3, #15
 8026034:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8026038:	ed91 7b00 	vldr	d7, [r1]
 802603c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802603e:	ec4b ab16 	vmov	d6, sl, fp
 8026042:	1acb      	subs	r3, r1, r3
 8026044:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8026048:	ee27 7b06 	vmul.f64	d7, d7, d6
 802604c:	ed92 6b00 	vldr	d6, [r2]
 8026050:	e796      	b.n	8025f80 <_strtod_l+0x3d0>
 8026052:	3116      	adds	r1, #22
 8026054:	dba8      	blt.n	8025fa8 <_strtod_l+0x3f8>
 8026056:	4b36      	ldr	r3, [pc, #216]	@ (8026130 <_strtod_l+0x580>)
 8026058:	1b3c      	subs	r4, r7, r4
 802605a:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 802605e:	ed94 7b00 	vldr	d7, [r4]
 8026062:	ec4b ab16 	vmov	d6, sl, fp
 8026066:	ee86 7b07 	vdiv.f64	d7, d6, d7
 802606a:	e78b      	b.n	8025f84 <_strtod_l+0x3d4>
 802606c:	2000      	movs	r0, #0
 802606e:	ec4b ab17 	vmov	d7, sl, fp
 8026072:	4e30      	ldr	r6, [pc, #192]	@ (8026134 <_strtod_l+0x584>)
 8026074:	1112      	asrs	r2, r2, #4
 8026076:	4601      	mov	r1, r0
 8026078:	2a01      	cmp	r2, #1
 802607a:	dc23      	bgt.n	80260c4 <_strtod_l+0x514>
 802607c:	b108      	cbz	r0, 8026082 <_strtod_l+0x4d2>
 802607e:	ec5b ab17 	vmov	sl, fp, d7
 8026082:	4a2c      	ldr	r2, [pc, #176]	@ (8026134 <_strtod_l+0x584>)
 8026084:	482c      	ldr	r0, [pc, #176]	@ (8026138 <_strtod_l+0x588>)
 8026086:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 802608a:	ed92 7b00 	vldr	d7, [r2]
 802608e:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8026092:	ec4b ab16 	vmov	d6, sl, fp
 8026096:	4a29      	ldr	r2, [pc, #164]	@ (802613c <_strtod_l+0x58c>)
 8026098:	ee27 7b06 	vmul.f64	d7, d7, d6
 802609c:	ee17 1a90 	vmov	r1, s15
 80260a0:	400a      	ands	r2, r1
 80260a2:	4282      	cmp	r2, r0
 80260a4:	ec5b ab17 	vmov	sl, fp, d7
 80260a8:	d898      	bhi.n	8025fdc <_strtod_l+0x42c>
 80260aa:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 80260ae:	4282      	cmp	r2, r0
 80260b0:	bf86      	itte	hi
 80260b2:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8026140 <_strtod_l+0x590>
 80260b6:	f04f 3aff 	movhi.w	sl, #4294967295
 80260ba:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 80260be:	2200      	movs	r2, #0
 80260c0:	9206      	str	r2, [sp, #24]
 80260c2:	e076      	b.n	80261b2 <_strtod_l+0x602>
 80260c4:	f012 0f01 	tst.w	r2, #1
 80260c8:	d004      	beq.n	80260d4 <_strtod_l+0x524>
 80260ca:	ed96 6b00 	vldr	d6, [r6]
 80260ce:	2001      	movs	r0, #1
 80260d0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80260d4:	3101      	adds	r1, #1
 80260d6:	1052      	asrs	r2, r2, #1
 80260d8:	3608      	adds	r6, #8
 80260da:	e7cd      	b.n	8026078 <_strtod_l+0x4c8>
 80260dc:	d0ef      	beq.n	80260be <_strtod_l+0x50e>
 80260de:	4252      	negs	r2, r2
 80260e0:	f012 000f 	ands.w	r0, r2, #15
 80260e4:	d00a      	beq.n	80260fc <_strtod_l+0x54c>
 80260e6:	4912      	ldr	r1, [pc, #72]	@ (8026130 <_strtod_l+0x580>)
 80260e8:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80260ec:	ed91 7b00 	vldr	d7, [r1]
 80260f0:	ec4b ab16 	vmov	d6, sl, fp
 80260f4:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80260f8:	ec5b ab17 	vmov	sl, fp, d7
 80260fc:	1112      	asrs	r2, r2, #4
 80260fe:	d0de      	beq.n	80260be <_strtod_l+0x50e>
 8026100:	2a1f      	cmp	r2, #31
 8026102:	dd1f      	ble.n	8026144 <_strtod_l+0x594>
 8026104:	2400      	movs	r4, #0
 8026106:	4625      	mov	r5, r4
 8026108:	9407      	str	r4, [sp, #28]
 802610a:	4626      	mov	r6, r4
 802610c:	9a05      	ldr	r2, [sp, #20]
 802610e:	2322      	movs	r3, #34	@ 0x22
 8026110:	f04f 0a00 	mov.w	sl, #0
 8026114:	f04f 0b00 	mov.w	fp, #0
 8026118:	6013      	str	r3, [r2, #0]
 802611a:	e76a      	b.n	8025ff2 <_strtod_l+0x442>
 802611c:	0803af64 	.word	0x0803af64
 8026120:	0803b0d4 	.word	0x0803b0d4
 8026124:	0803af5c 	.word	0x0803af5c
 8026128:	0803af96 	.word	0x0803af96
 802612c:	0803aee5 	.word	0x0803aee5
 8026130:	0803b260 	.word	0x0803b260
 8026134:	0803b238 	.word	0x0803b238
 8026138:	7ca00000 	.word	0x7ca00000
 802613c:	7ff00000 	.word	0x7ff00000
 8026140:	7fefffff 	.word	0x7fefffff
 8026144:	f012 0110 	ands.w	r1, r2, #16
 8026148:	bf18      	it	ne
 802614a:	216a      	movne	r1, #106	@ 0x6a
 802614c:	9106      	str	r1, [sp, #24]
 802614e:	ec4b ab17 	vmov	d7, sl, fp
 8026152:	49af      	ldr	r1, [pc, #700]	@ (8026410 <_strtod_l+0x860>)
 8026154:	2000      	movs	r0, #0
 8026156:	07d6      	lsls	r6, r2, #31
 8026158:	d504      	bpl.n	8026164 <_strtod_l+0x5b4>
 802615a:	ed91 6b00 	vldr	d6, [r1]
 802615e:	2001      	movs	r0, #1
 8026160:	ee27 7b06 	vmul.f64	d7, d7, d6
 8026164:	1052      	asrs	r2, r2, #1
 8026166:	f101 0108 	add.w	r1, r1, #8
 802616a:	d1f4      	bne.n	8026156 <_strtod_l+0x5a6>
 802616c:	b108      	cbz	r0, 8026172 <_strtod_l+0x5c2>
 802616e:	ec5b ab17 	vmov	sl, fp, d7
 8026172:	9a06      	ldr	r2, [sp, #24]
 8026174:	b1b2      	cbz	r2, 80261a4 <_strtod_l+0x5f4>
 8026176:	f3cb 510a 	ubfx	r1, fp, #20, #11
 802617a:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 802617e:	2a00      	cmp	r2, #0
 8026180:	4658      	mov	r0, fp
 8026182:	dd0f      	ble.n	80261a4 <_strtod_l+0x5f4>
 8026184:	2a1f      	cmp	r2, #31
 8026186:	dd55      	ble.n	8026234 <_strtod_l+0x684>
 8026188:	2a34      	cmp	r2, #52	@ 0x34
 802618a:	bfde      	ittt	le
 802618c:	f04f 32ff 	movle.w	r2, #4294967295
 8026190:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 8026194:	408a      	lslle	r2, r1
 8026196:	f04f 0a00 	mov.w	sl, #0
 802619a:	bfcc      	ite	gt
 802619c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80261a0:	ea02 0b00 	andle.w	fp, r2, r0
 80261a4:	ec4b ab17 	vmov	d7, sl, fp
 80261a8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80261ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80261b0:	d0a8      	beq.n	8026104 <_strtod_l+0x554>
 80261b2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80261b4:	9805      	ldr	r0, [sp, #20]
 80261b6:	f8cd 9000 	str.w	r9, [sp]
 80261ba:	462a      	mov	r2, r5
 80261bc:	f002 fdf8 	bl	8028db0 <__s2b>
 80261c0:	9007      	str	r0, [sp, #28]
 80261c2:	2800      	cmp	r0, #0
 80261c4:	f43f af0a 	beq.w	8025fdc <_strtod_l+0x42c>
 80261c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80261ca:	1b3f      	subs	r7, r7, r4
 80261cc:	2b00      	cmp	r3, #0
 80261ce:	bfb4      	ite	lt
 80261d0:	463b      	movlt	r3, r7
 80261d2:	2300      	movge	r3, #0
 80261d4:	930a      	str	r3, [sp, #40]	@ 0x28
 80261d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80261d8:	ed9f bb89 	vldr	d11, [pc, #548]	@ 8026400 <_strtod_l+0x850>
 80261dc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80261e0:	2400      	movs	r4, #0
 80261e2:	930d      	str	r3, [sp, #52]	@ 0x34
 80261e4:	4625      	mov	r5, r4
 80261e6:	9b07      	ldr	r3, [sp, #28]
 80261e8:	9805      	ldr	r0, [sp, #20]
 80261ea:	6859      	ldr	r1, [r3, #4]
 80261ec:	f002 fd38 	bl	8028c60 <_Balloc>
 80261f0:	4606      	mov	r6, r0
 80261f2:	2800      	cmp	r0, #0
 80261f4:	f43f aef6 	beq.w	8025fe4 <_strtod_l+0x434>
 80261f8:	9b07      	ldr	r3, [sp, #28]
 80261fa:	691a      	ldr	r2, [r3, #16]
 80261fc:	ec4b ab19 	vmov	d9, sl, fp
 8026200:	3202      	adds	r2, #2
 8026202:	f103 010c 	add.w	r1, r3, #12
 8026206:	0092      	lsls	r2, r2, #2
 8026208:	300c      	adds	r0, #12
 802620a:	f001 fb96 	bl	802793a <memcpy>
 802620e:	eeb0 0b49 	vmov.f64	d0, d9
 8026212:	9805      	ldr	r0, [sp, #20]
 8026214:	aa14      	add	r2, sp, #80	@ 0x50
 8026216:	a913      	add	r1, sp, #76	@ 0x4c
 8026218:	f003 f8fe 	bl	8029418 <__d2b>
 802621c:	9012      	str	r0, [sp, #72]	@ 0x48
 802621e:	2800      	cmp	r0, #0
 8026220:	f43f aee0 	beq.w	8025fe4 <_strtod_l+0x434>
 8026224:	9805      	ldr	r0, [sp, #20]
 8026226:	2101      	movs	r1, #1
 8026228:	f002 fe58 	bl	8028edc <__i2b>
 802622c:	4605      	mov	r5, r0
 802622e:	b940      	cbnz	r0, 8026242 <_strtod_l+0x692>
 8026230:	2500      	movs	r5, #0
 8026232:	e6d7      	b.n	8025fe4 <_strtod_l+0x434>
 8026234:	f04f 31ff 	mov.w	r1, #4294967295
 8026238:	fa01 f202 	lsl.w	r2, r1, r2
 802623c:	ea02 0a0a 	and.w	sl, r2, sl
 8026240:	e7b0      	b.n	80261a4 <_strtod_l+0x5f4>
 8026242:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 8026244:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8026246:	2f00      	cmp	r7, #0
 8026248:	bfab      	itete	ge
 802624a:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 802624c:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 802624e:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 8026252:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 8026256:	bfac      	ite	ge
 8026258:	eb07 0903 	addge.w	r9, r7, r3
 802625c:	eba3 0807 	sublt.w	r8, r3, r7
 8026260:	9b06      	ldr	r3, [sp, #24]
 8026262:	1aff      	subs	r7, r7, r3
 8026264:	4417      	add	r7, r2
 8026266:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 802626a:	4a6a      	ldr	r2, [pc, #424]	@ (8026414 <_strtod_l+0x864>)
 802626c:	3f01      	subs	r7, #1
 802626e:	4297      	cmp	r7, r2
 8026270:	da51      	bge.n	8026316 <_strtod_l+0x766>
 8026272:	1bd1      	subs	r1, r2, r7
 8026274:	291f      	cmp	r1, #31
 8026276:	eba3 0301 	sub.w	r3, r3, r1
 802627a:	f04f 0201 	mov.w	r2, #1
 802627e:	dc3e      	bgt.n	80262fe <_strtod_l+0x74e>
 8026280:	408a      	lsls	r2, r1
 8026282:	920c      	str	r2, [sp, #48]	@ 0x30
 8026284:	2200      	movs	r2, #0
 8026286:	920b      	str	r2, [sp, #44]	@ 0x2c
 8026288:	eb09 0703 	add.w	r7, r9, r3
 802628c:	4498      	add	r8, r3
 802628e:	9b06      	ldr	r3, [sp, #24]
 8026290:	45b9      	cmp	r9, r7
 8026292:	4498      	add	r8, r3
 8026294:	464b      	mov	r3, r9
 8026296:	bfa8      	it	ge
 8026298:	463b      	movge	r3, r7
 802629a:	4543      	cmp	r3, r8
 802629c:	bfa8      	it	ge
 802629e:	4643      	movge	r3, r8
 80262a0:	2b00      	cmp	r3, #0
 80262a2:	bfc2      	ittt	gt
 80262a4:	1aff      	subgt	r7, r7, r3
 80262a6:	eba8 0803 	subgt.w	r8, r8, r3
 80262aa:	eba9 0903 	subgt.w	r9, r9, r3
 80262ae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80262b0:	2b00      	cmp	r3, #0
 80262b2:	dd16      	ble.n	80262e2 <_strtod_l+0x732>
 80262b4:	4629      	mov	r1, r5
 80262b6:	9805      	ldr	r0, [sp, #20]
 80262b8:	461a      	mov	r2, r3
 80262ba:	f002 fec7 	bl	802904c <__pow5mult>
 80262be:	4605      	mov	r5, r0
 80262c0:	2800      	cmp	r0, #0
 80262c2:	d0b5      	beq.n	8026230 <_strtod_l+0x680>
 80262c4:	4601      	mov	r1, r0
 80262c6:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80262c8:	9805      	ldr	r0, [sp, #20]
 80262ca:	f002 fe1d 	bl	8028f08 <__multiply>
 80262ce:	900f      	str	r0, [sp, #60]	@ 0x3c
 80262d0:	2800      	cmp	r0, #0
 80262d2:	f43f ae87 	beq.w	8025fe4 <_strtod_l+0x434>
 80262d6:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80262d8:	9805      	ldr	r0, [sp, #20]
 80262da:	f002 fd01 	bl	8028ce0 <_Bfree>
 80262de:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80262e0:	9312      	str	r3, [sp, #72]	@ 0x48
 80262e2:	2f00      	cmp	r7, #0
 80262e4:	dc1b      	bgt.n	802631e <_strtod_l+0x76e>
 80262e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80262e8:	2b00      	cmp	r3, #0
 80262ea:	dd21      	ble.n	8026330 <_strtod_l+0x780>
 80262ec:	4631      	mov	r1, r6
 80262ee:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80262f0:	9805      	ldr	r0, [sp, #20]
 80262f2:	f002 feab 	bl	802904c <__pow5mult>
 80262f6:	4606      	mov	r6, r0
 80262f8:	b9d0      	cbnz	r0, 8026330 <_strtod_l+0x780>
 80262fa:	2600      	movs	r6, #0
 80262fc:	e672      	b.n	8025fe4 <_strtod_l+0x434>
 80262fe:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 8026302:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 8026306:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 802630a:	37e2      	adds	r7, #226	@ 0xe2
 802630c:	fa02 f107 	lsl.w	r1, r2, r7
 8026310:	910b      	str	r1, [sp, #44]	@ 0x2c
 8026312:	920c      	str	r2, [sp, #48]	@ 0x30
 8026314:	e7b8      	b.n	8026288 <_strtod_l+0x6d8>
 8026316:	2200      	movs	r2, #0
 8026318:	920b      	str	r2, [sp, #44]	@ 0x2c
 802631a:	2201      	movs	r2, #1
 802631c:	e7f9      	b.n	8026312 <_strtod_l+0x762>
 802631e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8026320:	9805      	ldr	r0, [sp, #20]
 8026322:	463a      	mov	r2, r7
 8026324:	f002 feec 	bl	8029100 <__lshift>
 8026328:	9012      	str	r0, [sp, #72]	@ 0x48
 802632a:	2800      	cmp	r0, #0
 802632c:	d1db      	bne.n	80262e6 <_strtod_l+0x736>
 802632e:	e659      	b.n	8025fe4 <_strtod_l+0x434>
 8026330:	f1b8 0f00 	cmp.w	r8, #0
 8026334:	dd07      	ble.n	8026346 <_strtod_l+0x796>
 8026336:	4631      	mov	r1, r6
 8026338:	9805      	ldr	r0, [sp, #20]
 802633a:	4642      	mov	r2, r8
 802633c:	f002 fee0 	bl	8029100 <__lshift>
 8026340:	4606      	mov	r6, r0
 8026342:	2800      	cmp	r0, #0
 8026344:	d0d9      	beq.n	80262fa <_strtod_l+0x74a>
 8026346:	f1b9 0f00 	cmp.w	r9, #0
 802634a:	dd08      	ble.n	802635e <_strtod_l+0x7ae>
 802634c:	4629      	mov	r1, r5
 802634e:	9805      	ldr	r0, [sp, #20]
 8026350:	464a      	mov	r2, r9
 8026352:	f002 fed5 	bl	8029100 <__lshift>
 8026356:	4605      	mov	r5, r0
 8026358:	2800      	cmp	r0, #0
 802635a:	f43f ae43 	beq.w	8025fe4 <_strtod_l+0x434>
 802635e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8026360:	9805      	ldr	r0, [sp, #20]
 8026362:	4632      	mov	r2, r6
 8026364:	f002 ff54 	bl	8029210 <__mdiff>
 8026368:	4604      	mov	r4, r0
 802636a:	2800      	cmp	r0, #0
 802636c:	f43f ae3a 	beq.w	8025fe4 <_strtod_l+0x434>
 8026370:	2300      	movs	r3, #0
 8026372:	f8d0 800c 	ldr.w	r8, [r0, #12]
 8026376:	60c3      	str	r3, [r0, #12]
 8026378:	4629      	mov	r1, r5
 802637a:	f002 ff2d 	bl	80291d8 <__mcmp>
 802637e:	2800      	cmp	r0, #0
 8026380:	da4c      	bge.n	802641c <_strtod_l+0x86c>
 8026382:	ea58 080a 	orrs.w	r8, r8, sl
 8026386:	d172      	bne.n	802646e <_strtod_l+0x8be>
 8026388:	f3cb 0313 	ubfx	r3, fp, #0, #20
 802638c:	2b00      	cmp	r3, #0
 802638e:	d16e      	bne.n	802646e <_strtod_l+0x8be>
 8026390:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8026394:	0d1b      	lsrs	r3, r3, #20
 8026396:	051b      	lsls	r3, r3, #20
 8026398:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 802639c:	d967      	bls.n	802646e <_strtod_l+0x8be>
 802639e:	6963      	ldr	r3, [r4, #20]
 80263a0:	b913      	cbnz	r3, 80263a8 <_strtod_l+0x7f8>
 80263a2:	6923      	ldr	r3, [r4, #16]
 80263a4:	2b01      	cmp	r3, #1
 80263a6:	dd62      	ble.n	802646e <_strtod_l+0x8be>
 80263a8:	4621      	mov	r1, r4
 80263aa:	2201      	movs	r2, #1
 80263ac:	9805      	ldr	r0, [sp, #20]
 80263ae:	f002 fea7 	bl	8029100 <__lshift>
 80263b2:	4629      	mov	r1, r5
 80263b4:	4604      	mov	r4, r0
 80263b6:	f002 ff0f 	bl	80291d8 <__mcmp>
 80263ba:	2800      	cmp	r0, #0
 80263bc:	dd57      	ble.n	802646e <_strtod_l+0x8be>
 80263be:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80263c2:	9a06      	ldr	r2, [sp, #24]
 80263c4:	0d1b      	lsrs	r3, r3, #20
 80263c6:	051b      	lsls	r3, r3, #20
 80263c8:	2a00      	cmp	r2, #0
 80263ca:	d06e      	beq.n	80264aa <_strtod_l+0x8fa>
 80263cc:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80263d0:	d86b      	bhi.n	80264aa <_strtod_l+0x8fa>
 80263d2:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80263d6:	f67f ae99 	bls.w	802610c <_strtod_l+0x55c>
 80263da:	ed9f 7b0b 	vldr	d7, [pc, #44]	@ 8026408 <_strtod_l+0x858>
 80263de:	ec4b ab16 	vmov	d6, sl, fp
 80263e2:	4b0d      	ldr	r3, [pc, #52]	@ (8026418 <_strtod_l+0x868>)
 80263e4:	ee26 7b07 	vmul.f64	d7, d6, d7
 80263e8:	ee17 2a90 	vmov	r2, s15
 80263ec:	4013      	ands	r3, r2
 80263ee:	ec5b ab17 	vmov	sl, fp, d7
 80263f2:	2b00      	cmp	r3, #0
 80263f4:	f47f ae01 	bne.w	8025ffa <_strtod_l+0x44a>
 80263f8:	9a05      	ldr	r2, [sp, #20]
 80263fa:	2322      	movs	r3, #34	@ 0x22
 80263fc:	6013      	str	r3, [r2, #0]
 80263fe:	e5fc      	b.n	8025ffa <_strtod_l+0x44a>
 8026400:	ffc00000 	.word	0xffc00000
 8026404:	41dfffff 	.word	0x41dfffff
 8026408:	00000000 	.word	0x00000000
 802640c:	39500000 	.word	0x39500000
 8026410:	0803b100 	.word	0x0803b100
 8026414:	fffffc02 	.word	0xfffffc02
 8026418:	7ff00000 	.word	0x7ff00000
 802641c:	46d9      	mov	r9, fp
 802641e:	d15d      	bne.n	80264dc <_strtod_l+0x92c>
 8026420:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8026424:	f1b8 0f00 	cmp.w	r8, #0
 8026428:	d02a      	beq.n	8026480 <_strtod_l+0x8d0>
 802642a:	4aa9      	ldr	r2, [pc, #676]	@ (80266d0 <_strtod_l+0xb20>)
 802642c:	4293      	cmp	r3, r2
 802642e:	d12a      	bne.n	8026486 <_strtod_l+0x8d6>
 8026430:	9b06      	ldr	r3, [sp, #24]
 8026432:	4652      	mov	r2, sl
 8026434:	b1fb      	cbz	r3, 8026476 <_strtod_l+0x8c6>
 8026436:	4ba7      	ldr	r3, [pc, #668]	@ (80266d4 <_strtod_l+0xb24>)
 8026438:	ea0b 0303 	and.w	r3, fp, r3
 802643c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8026440:	f04f 31ff 	mov.w	r1, #4294967295
 8026444:	d81a      	bhi.n	802647c <_strtod_l+0x8cc>
 8026446:	0d1b      	lsrs	r3, r3, #20
 8026448:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 802644c:	fa01 f303 	lsl.w	r3, r1, r3
 8026450:	429a      	cmp	r2, r3
 8026452:	d118      	bne.n	8026486 <_strtod_l+0x8d6>
 8026454:	4ba0      	ldr	r3, [pc, #640]	@ (80266d8 <_strtod_l+0xb28>)
 8026456:	4599      	cmp	r9, r3
 8026458:	d102      	bne.n	8026460 <_strtod_l+0x8b0>
 802645a:	3201      	adds	r2, #1
 802645c:	f43f adc2 	beq.w	8025fe4 <_strtod_l+0x434>
 8026460:	4b9c      	ldr	r3, [pc, #624]	@ (80266d4 <_strtod_l+0xb24>)
 8026462:	ea09 0303 	and.w	r3, r9, r3
 8026466:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 802646a:	f04f 0a00 	mov.w	sl, #0
 802646e:	9b06      	ldr	r3, [sp, #24]
 8026470:	2b00      	cmp	r3, #0
 8026472:	d1b2      	bne.n	80263da <_strtod_l+0x82a>
 8026474:	e5c1      	b.n	8025ffa <_strtod_l+0x44a>
 8026476:	f04f 33ff 	mov.w	r3, #4294967295
 802647a:	e7e9      	b.n	8026450 <_strtod_l+0x8a0>
 802647c:	460b      	mov	r3, r1
 802647e:	e7e7      	b.n	8026450 <_strtod_l+0x8a0>
 8026480:	ea53 030a 	orrs.w	r3, r3, sl
 8026484:	d09b      	beq.n	80263be <_strtod_l+0x80e>
 8026486:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8026488:	b1c3      	cbz	r3, 80264bc <_strtod_l+0x90c>
 802648a:	ea13 0f09 	tst.w	r3, r9
 802648e:	d0ee      	beq.n	802646e <_strtod_l+0x8be>
 8026490:	9a06      	ldr	r2, [sp, #24]
 8026492:	4650      	mov	r0, sl
 8026494:	4659      	mov	r1, fp
 8026496:	f1b8 0f00 	cmp.w	r8, #0
 802649a:	d013      	beq.n	80264c4 <_strtod_l+0x914>
 802649c:	f7ff fb6e 	bl	8025b7c <sulp>
 80264a0:	ee39 7b00 	vadd.f64	d7, d9, d0
 80264a4:	ec5b ab17 	vmov	sl, fp, d7
 80264a8:	e7e1      	b.n	802646e <_strtod_l+0x8be>
 80264aa:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80264ae:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80264b2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80264b6:	f04f 3aff 	mov.w	sl, #4294967295
 80264ba:	e7d8      	b.n	802646e <_strtod_l+0x8be>
 80264bc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80264be:	ea13 0f0a 	tst.w	r3, sl
 80264c2:	e7e4      	b.n	802648e <_strtod_l+0x8de>
 80264c4:	f7ff fb5a 	bl	8025b7c <sulp>
 80264c8:	ee39 0b40 	vsub.f64	d0, d9, d0
 80264cc:	eeb5 0b40 	vcmp.f64	d0, #0.0
 80264d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80264d4:	ec5b ab10 	vmov	sl, fp, d0
 80264d8:	d1c9      	bne.n	802646e <_strtod_l+0x8be>
 80264da:	e617      	b.n	802610c <_strtod_l+0x55c>
 80264dc:	4629      	mov	r1, r5
 80264de:	4620      	mov	r0, r4
 80264e0:	f002 fff2 	bl	80294c8 <__ratio>
 80264e4:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 80264e8:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80264ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80264f0:	d85d      	bhi.n	80265ae <_strtod_l+0x9fe>
 80264f2:	f1b8 0f00 	cmp.w	r8, #0
 80264f6:	d164      	bne.n	80265c2 <_strtod_l+0xa12>
 80264f8:	f1ba 0f00 	cmp.w	sl, #0
 80264fc:	d14b      	bne.n	8026596 <_strtod_l+0x9e6>
 80264fe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8026502:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8026506:	2b00      	cmp	r3, #0
 8026508:	d160      	bne.n	80265cc <_strtod_l+0xa1c>
 802650a:	eeb4 0bc8 	vcmpe.f64	d0, d8
 802650e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8026512:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026516:	d401      	bmi.n	802651c <_strtod_l+0x96c>
 8026518:	ee20 8b08 	vmul.f64	d8, d0, d8
 802651c:	eeb1 ab48 	vneg.f64	d10, d8
 8026520:	486c      	ldr	r0, [pc, #432]	@ (80266d4 <_strtod_l+0xb24>)
 8026522:	496e      	ldr	r1, [pc, #440]	@ (80266dc <_strtod_l+0xb2c>)
 8026524:	ea09 0700 	and.w	r7, r9, r0
 8026528:	428f      	cmp	r7, r1
 802652a:	ec53 2b1a 	vmov	r2, r3, d10
 802652e:	d17d      	bne.n	802662c <_strtod_l+0xa7c>
 8026530:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 8026534:	ec4b ab1c 	vmov	d12, sl, fp
 8026538:	eeb0 0b4c 	vmov.f64	d0, d12
 802653c:	f002 fefc 	bl	8029338 <__ulp>
 8026540:	4864      	ldr	r0, [pc, #400]	@ (80266d4 <_strtod_l+0xb24>)
 8026542:	eea0 cb0a 	vfma.f64	d12, d0, d10
 8026546:	ee1c 3a90 	vmov	r3, s25
 802654a:	4a65      	ldr	r2, [pc, #404]	@ (80266e0 <_strtod_l+0xb30>)
 802654c:	ea03 0100 	and.w	r1, r3, r0
 8026550:	4291      	cmp	r1, r2
 8026552:	ec5b ab1c 	vmov	sl, fp, d12
 8026556:	d93c      	bls.n	80265d2 <_strtod_l+0xa22>
 8026558:	ee19 2a90 	vmov	r2, s19
 802655c:	4b5e      	ldr	r3, [pc, #376]	@ (80266d8 <_strtod_l+0xb28>)
 802655e:	429a      	cmp	r2, r3
 8026560:	d104      	bne.n	802656c <_strtod_l+0x9bc>
 8026562:	ee19 3a10 	vmov	r3, s18
 8026566:	3301      	adds	r3, #1
 8026568:	f43f ad3c 	beq.w	8025fe4 <_strtod_l+0x434>
 802656c:	f8df b168 	ldr.w	fp, [pc, #360]	@ 80266d8 <_strtod_l+0xb28>
 8026570:	f04f 3aff 	mov.w	sl, #4294967295
 8026574:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8026576:	9805      	ldr	r0, [sp, #20]
 8026578:	f002 fbb2 	bl	8028ce0 <_Bfree>
 802657c:	9805      	ldr	r0, [sp, #20]
 802657e:	4631      	mov	r1, r6
 8026580:	f002 fbae 	bl	8028ce0 <_Bfree>
 8026584:	9805      	ldr	r0, [sp, #20]
 8026586:	4629      	mov	r1, r5
 8026588:	f002 fbaa 	bl	8028ce0 <_Bfree>
 802658c:	9805      	ldr	r0, [sp, #20]
 802658e:	4621      	mov	r1, r4
 8026590:	f002 fba6 	bl	8028ce0 <_Bfree>
 8026594:	e627      	b.n	80261e6 <_strtod_l+0x636>
 8026596:	f1ba 0f01 	cmp.w	sl, #1
 802659a:	d103      	bne.n	80265a4 <_strtod_l+0x9f4>
 802659c:	f1bb 0f00 	cmp.w	fp, #0
 80265a0:	f43f adb4 	beq.w	802610c <_strtod_l+0x55c>
 80265a4:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 80265a8:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 80265ac:	e7b8      	b.n	8026520 <_strtod_l+0x970>
 80265ae:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 80265b2:	ee20 8b08 	vmul.f64	d8, d0, d8
 80265b6:	f1b8 0f00 	cmp.w	r8, #0
 80265ba:	d0af      	beq.n	802651c <_strtod_l+0x96c>
 80265bc:	eeb0 ab48 	vmov.f64	d10, d8
 80265c0:	e7ae      	b.n	8026520 <_strtod_l+0x970>
 80265c2:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 80265c6:	eeb0 8b4a 	vmov.f64	d8, d10
 80265ca:	e7a9      	b.n	8026520 <_strtod_l+0x970>
 80265cc:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 80265d0:	e7a6      	b.n	8026520 <_strtod_l+0x970>
 80265d2:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80265d6:	9b06      	ldr	r3, [sp, #24]
 80265d8:	46d9      	mov	r9, fp
 80265da:	2b00      	cmp	r3, #0
 80265dc:	d1ca      	bne.n	8026574 <_strtod_l+0x9c4>
 80265de:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80265e2:	0d1b      	lsrs	r3, r3, #20
 80265e4:	051b      	lsls	r3, r3, #20
 80265e6:	429f      	cmp	r7, r3
 80265e8:	d1c4      	bne.n	8026574 <_strtod_l+0x9c4>
 80265ea:	ec51 0b18 	vmov	r0, r1, d8
 80265ee:	f7da f8cb 	bl	8000788 <__aeabi_d2lz>
 80265f2:	f7da f883 	bl	80006fc <__aeabi_l2d>
 80265f6:	f3cb 0913 	ubfx	r9, fp, #0, #20
 80265fa:	ec41 0b17 	vmov	d7, r0, r1
 80265fe:	ea49 090a 	orr.w	r9, r9, sl
 8026602:	ea59 0908 	orrs.w	r9, r9, r8
 8026606:	ee38 8b47 	vsub.f64	d8, d8, d7
 802660a:	d03c      	beq.n	8026686 <_strtod_l+0xad6>
 802660c:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 80266b8 <_strtod_l+0xb08>
 8026610:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8026614:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026618:	f53f acef 	bmi.w	8025ffa <_strtod_l+0x44a>
 802661c:	ed9f 7b28 	vldr	d7, [pc, #160]	@ 80266c0 <_strtod_l+0xb10>
 8026620:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8026624:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026628:	dda4      	ble.n	8026574 <_strtod_l+0x9c4>
 802662a:	e4e6      	b.n	8025ffa <_strtod_l+0x44a>
 802662c:	9906      	ldr	r1, [sp, #24]
 802662e:	b1e1      	cbz	r1, 802666a <_strtod_l+0xaba>
 8026630:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 8026634:	d819      	bhi.n	802666a <_strtod_l+0xaba>
 8026636:	eeb4 8bcb 	vcmpe.f64	d8, d11
 802663a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802663e:	d811      	bhi.n	8026664 <_strtod_l+0xab4>
 8026640:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 8026644:	ee18 3a10 	vmov	r3, s16
 8026648:	2b01      	cmp	r3, #1
 802664a:	bf38      	it	cc
 802664c:	2301      	movcc	r3, #1
 802664e:	ee08 3a10 	vmov	s16, r3
 8026652:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 8026656:	f1b8 0f00 	cmp.w	r8, #0
 802665a:	d111      	bne.n	8026680 <_strtod_l+0xad0>
 802665c:	eeb1 7b48 	vneg.f64	d7, d8
 8026660:	ec53 2b17 	vmov	r2, r3, d7
 8026664:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 8026668:	1bcb      	subs	r3, r1, r7
 802666a:	eeb0 0b49 	vmov.f64	d0, d9
 802666e:	ec43 2b1a 	vmov	d10, r2, r3
 8026672:	f002 fe61 	bl	8029338 <__ulp>
 8026676:	eeaa 9b00 	vfma.f64	d9, d10, d0
 802667a:	ec5b ab19 	vmov	sl, fp, d9
 802667e:	e7aa      	b.n	80265d6 <_strtod_l+0xa26>
 8026680:	eeb0 7b48 	vmov.f64	d7, d8
 8026684:	e7ec      	b.n	8026660 <_strtod_l+0xab0>
 8026686:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 80266c8 <_strtod_l+0xb18>
 802668a:	eeb4 8bc7 	vcmpe.f64	d8, d7
 802668e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026692:	f57f af6f 	bpl.w	8026574 <_strtod_l+0x9c4>
 8026696:	e4b0      	b.n	8025ffa <_strtod_l+0x44a>
 8026698:	2300      	movs	r3, #0
 802669a:	9308      	str	r3, [sp, #32]
 802669c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802669e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80266a0:	6013      	str	r3, [r2, #0]
 80266a2:	f7ff bac4 	b.w	8025c2e <_strtod_l+0x7e>
 80266a6:	2a65      	cmp	r2, #101	@ 0x65
 80266a8:	f43f abbf 	beq.w	8025e2a <_strtod_l+0x27a>
 80266ac:	2a45      	cmp	r2, #69	@ 0x45
 80266ae:	f43f abbc 	beq.w	8025e2a <_strtod_l+0x27a>
 80266b2:	2101      	movs	r1, #1
 80266b4:	f7ff bbf4 	b.w	8025ea0 <_strtod_l+0x2f0>
 80266b8:	94a03595 	.word	0x94a03595
 80266bc:	3fdfffff 	.word	0x3fdfffff
 80266c0:	35afe535 	.word	0x35afe535
 80266c4:	3fe00000 	.word	0x3fe00000
 80266c8:	94a03595 	.word	0x94a03595
 80266cc:	3fcfffff 	.word	0x3fcfffff
 80266d0:	000fffff 	.word	0x000fffff
 80266d4:	7ff00000 	.word	0x7ff00000
 80266d8:	7fefffff 	.word	0x7fefffff
 80266dc:	7fe00000 	.word	0x7fe00000
 80266e0:	7c9fffff 	.word	0x7c9fffff

080266e4 <strtod>:
 80266e4:	460a      	mov	r2, r1
 80266e6:	4601      	mov	r1, r0
 80266e8:	4802      	ldr	r0, [pc, #8]	@ (80266f4 <strtod+0x10>)
 80266ea:	4b03      	ldr	r3, [pc, #12]	@ (80266f8 <strtod+0x14>)
 80266ec:	6800      	ldr	r0, [r0, #0]
 80266ee:	f7ff ba5f 	b.w	8025bb0 <_strtod_l>
 80266f2:	bf00      	nop
 80266f4:	240009a0 	.word	0x240009a0
 80266f8:	24000834 	.word	0x24000834

080266fc <_strtol_l.isra.0>:
 80266fc:	2b24      	cmp	r3, #36	@ 0x24
 80266fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026702:	4686      	mov	lr, r0
 8026704:	4690      	mov	r8, r2
 8026706:	d801      	bhi.n	802670c <_strtol_l.isra.0+0x10>
 8026708:	2b01      	cmp	r3, #1
 802670a:	d106      	bne.n	802671a <_strtol_l.isra.0+0x1e>
 802670c:	f001 f8e0 	bl	80278d0 <__errno>
 8026710:	2316      	movs	r3, #22
 8026712:	6003      	str	r3, [r0, #0]
 8026714:	2000      	movs	r0, #0
 8026716:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802671a:	4834      	ldr	r0, [pc, #208]	@ (80267ec <_strtol_l.isra.0+0xf0>)
 802671c:	460d      	mov	r5, r1
 802671e:	462a      	mov	r2, r5
 8026720:	f815 4b01 	ldrb.w	r4, [r5], #1
 8026724:	5d06      	ldrb	r6, [r0, r4]
 8026726:	f016 0608 	ands.w	r6, r6, #8
 802672a:	d1f8      	bne.n	802671e <_strtol_l.isra.0+0x22>
 802672c:	2c2d      	cmp	r4, #45	@ 0x2d
 802672e:	d110      	bne.n	8026752 <_strtol_l.isra.0+0x56>
 8026730:	782c      	ldrb	r4, [r5, #0]
 8026732:	2601      	movs	r6, #1
 8026734:	1c95      	adds	r5, r2, #2
 8026736:	f033 0210 	bics.w	r2, r3, #16
 802673a:	d115      	bne.n	8026768 <_strtol_l.isra.0+0x6c>
 802673c:	2c30      	cmp	r4, #48	@ 0x30
 802673e:	d10d      	bne.n	802675c <_strtol_l.isra.0+0x60>
 8026740:	782a      	ldrb	r2, [r5, #0]
 8026742:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8026746:	2a58      	cmp	r2, #88	@ 0x58
 8026748:	d108      	bne.n	802675c <_strtol_l.isra.0+0x60>
 802674a:	786c      	ldrb	r4, [r5, #1]
 802674c:	3502      	adds	r5, #2
 802674e:	2310      	movs	r3, #16
 8026750:	e00a      	b.n	8026768 <_strtol_l.isra.0+0x6c>
 8026752:	2c2b      	cmp	r4, #43	@ 0x2b
 8026754:	bf04      	itt	eq
 8026756:	782c      	ldrbeq	r4, [r5, #0]
 8026758:	1c95      	addeq	r5, r2, #2
 802675a:	e7ec      	b.n	8026736 <_strtol_l.isra.0+0x3a>
 802675c:	2b00      	cmp	r3, #0
 802675e:	d1f6      	bne.n	802674e <_strtol_l.isra.0+0x52>
 8026760:	2c30      	cmp	r4, #48	@ 0x30
 8026762:	bf14      	ite	ne
 8026764:	230a      	movne	r3, #10
 8026766:	2308      	moveq	r3, #8
 8026768:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 802676c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8026770:	2200      	movs	r2, #0
 8026772:	fbbc f9f3 	udiv	r9, ip, r3
 8026776:	4610      	mov	r0, r2
 8026778:	fb03 ca19 	mls	sl, r3, r9, ip
 802677c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8026780:	2f09      	cmp	r7, #9
 8026782:	d80f      	bhi.n	80267a4 <_strtol_l.isra.0+0xa8>
 8026784:	463c      	mov	r4, r7
 8026786:	42a3      	cmp	r3, r4
 8026788:	dd1b      	ble.n	80267c2 <_strtol_l.isra.0+0xc6>
 802678a:	1c57      	adds	r7, r2, #1
 802678c:	d007      	beq.n	802679e <_strtol_l.isra.0+0xa2>
 802678e:	4581      	cmp	r9, r0
 8026790:	d314      	bcc.n	80267bc <_strtol_l.isra.0+0xc0>
 8026792:	d101      	bne.n	8026798 <_strtol_l.isra.0+0x9c>
 8026794:	45a2      	cmp	sl, r4
 8026796:	db11      	blt.n	80267bc <_strtol_l.isra.0+0xc0>
 8026798:	fb00 4003 	mla	r0, r0, r3, r4
 802679c:	2201      	movs	r2, #1
 802679e:	f815 4b01 	ldrb.w	r4, [r5], #1
 80267a2:	e7eb      	b.n	802677c <_strtol_l.isra.0+0x80>
 80267a4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80267a8:	2f19      	cmp	r7, #25
 80267aa:	d801      	bhi.n	80267b0 <_strtol_l.isra.0+0xb4>
 80267ac:	3c37      	subs	r4, #55	@ 0x37
 80267ae:	e7ea      	b.n	8026786 <_strtol_l.isra.0+0x8a>
 80267b0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80267b4:	2f19      	cmp	r7, #25
 80267b6:	d804      	bhi.n	80267c2 <_strtol_l.isra.0+0xc6>
 80267b8:	3c57      	subs	r4, #87	@ 0x57
 80267ba:	e7e4      	b.n	8026786 <_strtol_l.isra.0+0x8a>
 80267bc:	f04f 32ff 	mov.w	r2, #4294967295
 80267c0:	e7ed      	b.n	802679e <_strtol_l.isra.0+0xa2>
 80267c2:	1c53      	adds	r3, r2, #1
 80267c4:	d108      	bne.n	80267d8 <_strtol_l.isra.0+0xdc>
 80267c6:	2322      	movs	r3, #34	@ 0x22
 80267c8:	f8ce 3000 	str.w	r3, [lr]
 80267cc:	4660      	mov	r0, ip
 80267ce:	f1b8 0f00 	cmp.w	r8, #0
 80267d2:	d0a0      	beq.n	8026716 <_strtol_l.isra.0+0x1a>
 80267d4:	1e69      	subs	r1, r5, #1
 80267d6:	e006      	b.n	80267e6 <_strtol_l.isra.0+0xea>
 80267d8:	b106      	cbz	r6, 80267dc <_strtol_l.isra.0+0xe0>
 80267da:	4240      	negs	r0, r0
 80267dc:	f1b8 0f00 	cmp.w	r8, #0
 80267e0:	d099      	beq.n	8026716 <_strtol_l.isra.0+0x1a>
 80267e2:	2a00      	cmp	r2, #0
 80267e4:	d1f6      	bne.n	80267d4 <_strtol_l.isra.0+0xd8>
 80267e6:	f8c8 1000 	str.w	r1, [r8]
 80267ea:	e794      	b.n	8026716 <_strtol_l.isra.0+0x1a>
 80267ec:	0803b129 	.word	0x0803b129

080267f0 <strtol>:
 80267f0:	4613      	mov	r3, r2
 80267f2:	460a      	mov	r2, r1
 80267f4:	4601      	mov	r1, r0
 80267f6:	4802      	ldr	r0, [pc, #8]	@ (8026800 <strtol+0x10>)
 80267f8:	6800      	ldr	r0, [r0, #0]
 80267fa:	f7ff bf7f 	b.w	80266fc <_strtol_l.isra.0>
 80267fe:	bf00      	nop
 8026800:	240009a0 	.word	0x240009a0

08026804 <__cvt>:
 8026804:	b5f0      	push	{r4, r5, r6, r7, lr}
 8026806:	ed2d 8b02 	vpush	{d8}
 802680a:	eeb0 8b40 	vmov.f64	d8, d0
 802680e:	b085      	sub	sp, #20
 8026810:	4617      	mov	r7, r2
 8026812:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8026814:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8026816:	ee18 2a90 	vmov	r2, s17
 802681a:	f025 0520 	bic.w	r5, r5, #32
 802681e:	2a00      	cmp	r2, #0
 8026820:	bfb6      	itet	lt
 8026822:	222d      	movlt	r2, #45	@ 0x2d
 8026824:	2200      	movge	r2, #0
 8026826:	eeb1 8b40 	vneglt.f64	d8, d0
 802682a:	2d46      	cmp	r5, #70	@ 0x46
 802682c:	460c      	mov	r4, r1
 802682e:	701a      	strb	r2, [r3, #0]
 8026830:	d004      	beq.n	802683c <__cvt+0x38>
 8026832:	2d45      	cmp	r5, #69	@ 0x45
 8026834:	d100      	bne.n	8026838 <__cvt+0x34>
 8026836:	3401      	adds	r4, #1
 8026838:	2102      	movs	r1, #2
 802683a:	e000      	b.n	802683e <__cvt+0x3a>
 802683c:	2103      	movs	r1, #3
 802683e:	ab03      	add	r3, sp, #12
 8026840:	9301      	str	r3, [sp, #4]
 8026842:	ab02      	add	r3, sp, #8
 8026844:	9300      	str	r3, [sp, #0]
 8026846:	4622      	mov	r2, r4
 8026848:	4633      	mov	r3, r6
 802684a:	eeb0 0b48 	vmov.f64	d0, d8
 802684e:	f001 f913 	bl	8027a78 <_dtoa_r>
 8026852:	2d47      	cmp	r5, #71	@ 0x47
 8026854:	d114      	bne.n	8026880 <__cvt+0x7c>
 8026856:	07fb      	lsls	r3, r7, #31
 8026858:	d50a      	bpl.n	8026870 <__cvt+0x6c>
 802685a:	1902      	adds	r2, r0, r4
 802685c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8026860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026864:	bf08      	it	eq
 8026866:	9203      	streq	r2, [sp, #12]
 8026868:	2130      	movs	r1, #48	@ 0x30
 802686a:	9b03      	ldr	r3, [sp, #12]
 802686c:	4293      	cmp	r3, r2
 802686e:	d319      	bcc.n	80268a4 <__cvt+0xa0>
 8026870:	9b03      	ldr	r3, [sp, #12]
 8026872:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8026874:	1a1b      	subs	r3, r3, r0
 8026876:	6013      	str	r3, [r2, #0]
 8026878:	b005      	add	sp, #20
 802687a:	ecbd 8b02 	vpop	{d8}
 802687e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8026880:	2d46      	cmp	r5, #70	@ 0x46
 8026882:	eb00 0204 	add.w	r2, r0, r4
 8026886:	d1e9      	bne.n	802685c <__cvt+0x58>
 8026888:	7803      	ldrb	r3, [r0, #0]
 802688a:	2b30      	cmp	r3, #48	@ 0x30
 802688c:	d107      	bne.n	802689e <__cvt+0x9a>
 802688e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8026892:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026896:	bf1c      	itt	ne
 8026898:	f1c4 0401 	rsbne	r4, r4, #1
 802689c:	6034      	strne	r4, [r6, #0]
 802689e:	6833      	ldr	r3, [r6, #0]
 80268a0:	441a      	add	r2, r3
 80268a2:	e7db      	b.n	802685c <__cvt+0x58>
 80268a4:	1c5c      	adds	r4, r3, #1
 80268a6:	9403      	str	r4, [sp, #12]
 80268a8:	7019      	strb	r1, [r3, #0]
 80268aa:	e7de      	b.n	802686a <__cvt+0x66>

080268ac <__exponent>:
 80268ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80268ae:	2900      	cmp	r1, #0
 80268b0:	bfba      	itte	lt
 80268b2:	4249      	neglt	r1, r1
 80268b4:	232d      	movlt	r3, #45	@ 0x2d
 80268b6:	232b      	movge	r3, #43	@ 0x2b
 80268b8:	2909      	cmp	r1, #9
 80268ba:	7002      	strb	r2, [r0, #0]
 80268bc:	7043      	strb	r3, [r0, #1]
 80268be:	dd29      	ble.n	8026914 <__exponent+0x68>
 80268c0:	f10d 0307 	add.w	r3, sp, #7
 80268c4:	461d      	mov	r5, r3
 80268c6:	270a      	movs	r7, #10
 80268c8:	461a      	mov	r2, r3
 80268ca:	fbb1 f6f7 	udiv	r6, r1, r7
 80268ce:	fb07 1416 	mls	r4, r7, r6, r1
 80268d2:	3430      	adds	r4, #48	@ 0x30
 80268d4:	f802 4c01 	strb.w	r4, [r2, #-1]
 80268d8:	460c      	mov	r4, r1
 80268da:	2c63      	cmp	r4, #99	@ 0x63
 80268dc:	f103 33ff 	add.w	r3, r3, #4294967295
 80268e0:	4631      	mov	r1, r6
 80268e2:	dcf1      	bgt.n	80268c8 <__exponent+0x1c>
 80268e4:	3130      	adds	r1, #48	@ 0x30
 80268e6:	1e94      	subs	r4, r2, #2
 80268e8:	f803 1c01 	strb.w	r1, [r3, #-1]
 80268ec:	1c41      	adds	r1, r0, #1
 80268ee:	4623      	mov	r3, r4
 80268f0:	42ab      	cmp	r3, r5
 80268f2:	d30a      	bcc.n	802690a <__exponent+0x5e>
 80268f4:	f10d 0309 	add.w	r3, sp, #9
 80268f8:	1a9b      	subs	r3, r3, r2
 80268fa:	42ac      	cmp	r4, r5
 80268fc:	bf88      	it	hi
 80268fe:	2300      	movhi	r3, #0
 8026900:	3302      	adds	r3, #2
 8026902:	4403      	add	r3, r0
 8026904:	1a18      	subs	r0, r3, r0
 8026906:	b003      	add	sp, #12
 8026908:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802690a:	f813 6b01 	ldrb.w	r6, [r3], #1
 802690e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8026912:	e7ed      	b.n	80268f0 <__exponent+0x44>
 8026914:	2330      	movs	r3, #48	@ 0x30
 8026916:	3130      	adds	r1, #48	@ 0x30
 8026918:	7083      	strb	r3, [r0, #2]
 802691a:	70c1      	strb	r1, [r0, #3]
 802691c:	1d03      	adds	r3, r0, #4
 802691e:	e7f1      	b.n	8026904 <__exponent+0x58>

08026920 <_printf_float>:
 8026920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026924:	b08d      	sub	sp, #52	@ 0x34
 8026926:	460c      	mov	r4, r1
 8026928:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 802692c:	4616      	mov	r6, r2
 802692e:	461f      	mov	r7, r3
 8026930:	4605      	mov	r5, r0
 8026932:	f000 ff5f 	bl	80277f4 <_localeconv_r>
 8026936:	f8d0 b000 	ldr.w	fp, [r0]
 802693a:	4658      	mov	r0, fp
 802693c:	f7d9 fd48 	bl	80003d0 <strlen>
 8026940:	2300      	movs	r3, #0
 8026942:	930a      	str	r3, [sp, #40]	@ 0x28
 8026944:	f8d8 3000 	ldr.w	r3, [r8]
 8026948:	f894 9018 	ldrb.w	r9, [r4, #24]
 802694c:	6822      	ldr	r2, [r4, #0]
 802694e:	9005      	str	r0, [sp, #20]
 8026950:	3307      	adds	r3, #7
 8026952:	f023 0307 	bic.w	r3, r3, #7
 8026956:	f103 0108 	add.w	r1, r3, #8
 802695a:	f8c8 1000 	str.w	r1, [r8]
 802695e:	ed93 0b00 	vldr	d0, [r3]
 8026962:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8026bc0 <_printf_float+0x2a0>
 8026966:	eeb0 7bc0 	vabs.f64	d7, d0
 802696a:	eeb4 7b46 	vcmp.f64	d7, d6
 802696e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026972:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8026976:	dd24      	ble.n	80269c2 <_printf_float+0xa2>
 8026978:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 802697c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026980:	d502      	bpl.n	8026988 <_printf_float+0x68>
 8026982:	232d      	movs	r3, #45	@ 0x2d
 8026984:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8026988:	498f      	ldr	r1, [pc, #572]	@ (8026bc8 <_printf_float+0x2a8>)
 802698a:	4b90      	ldr	r3, [pc, #576]	@ (8026bcc <_printf_float+0x2ac>)
 802698c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8026990:	bf8c      	ite	hi
 8026992:	4688      	movhi	r8, r1
 8026994:	4698      	movls	r8, r3
 8026996:	f022 0204 	bic.w	r2, r2, #4
 802699a:	2303      	movs	r3, #3
 802699c:	6123      	str	r3, [r4, #16]
 802699e:	6022      	str	r2, [r4, #0]
 80269a0:	f04f 0a00 	mov.w	sl, #0
 80269a4:	9700      	str	r7, [sp, #0]
 80269a6:	4633      	mov	r3, r6
 80269a8:	aa0b      	add	r2, sp, #44	@ 0x2c
 80269aa:	4621      	mov	r1, r4
 80269ac:	4628      	mov	r0, r5
 80269ae:	f000 f9d1 	bl	8026d54 <_printf_common>
 80269b2:	3001      	adds	r0, #1
 80269b4:	f040 8089 	bne.w	8026aca <_printf_float+0x1aa>
 80269b8:	f04f 30ff 	mov.w	r0, #4294967295
 80269bc:	b00d      	add	sp, #52	@ 0x34
 80269be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80269c2:	eeb4 0b40 	vcmp.f64	d0, d0
 80269c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80269ca:	d709      	bvc.n	80269e0 <_printf_float+0xc0>
 80269cc:	ee10 3a90 	vmov	r3, s1
 80269d0:	2b00      	cmp	r3, #0
 80269d2:	bfbc      	itt	lt
 80269d4:	232d      	movlt	r3, #45	@ 0x2d
 80269d6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80269da:	497d      	ldr	r1, [pc, #500]	@ (8026bd0 <_printf_float+0x2b0>)
 80269dc:	4b7d      	ldr	r3, [pc, #500]	@ (8026bd4 <_printf_float+0x2b4>)
 80269de:	e7d5      	b.n	802698c <_printf_float+0x6c>
 80269e0:	6863      	ldr	r3, [r4, #4]
 80269e2:	1c59      	adds	r1, r3, #1
 80269e4:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 80269e8:	d139      	bne.n	8026a5e <_printf_float+0x13e>
 80269ea:	2306      	movs	r3, #6
 80269ec:	6063      	str	r3, [r4, #4]
 80269ee:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80269f2:	2300      	movs	r3, #0
 80269f4:	6022      	str	r2, [r4, #0]
 80269f6:	9303      	str	r3, [sp, #12]
 80269f8:	ab0a      	add	r3, sp, #40	@ 0x28
 80269fa:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80269fe:	ab09      	add	r3, sp, #36	@ 0x24
 8026a00:	9300      	str	r3, [sp, #0]
 8026a02:	6861      	ldr	r1, [r4, #4]
 8026a04:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8026a08:	4628      	mov	r0, r5
 8026a0a:	f7ff fefb 	bl	8026804 <__cvt>
 8026a0e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8026a12:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8026a14:	4680      	mov	r8, r0
 8026a16:	d129      	bne.n	8026a6c <_printf_float+0x14c>
 8026a18:	1cc8      	adds	r0, r1, #3
 8026a1a:	db02      	blt.n	8026a22 <_printf_float+0x102>
 8026a1c:	6863      	ldr	r3, [r4, #4]
 8026a1e:	4299      	cmp	r1, r3
 8026a20:	dd41      	ble.n	8026aa6 <_printf_float+0x186>
 8026a22:	f1a9 0902 	sub.w	r9, r9, #2
 8026a26:	fa5f f989 	uxtb.w	r9, r9
 8026a2a:	3901      	subs	r1, #1
 8026a2c:	464a      	mov	r2, r9
 8026a2e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8026a32:	9109      	str	r1, [sp, #36]	@ 0x24
 8026a34:	f7ff ff3a 	bl	80268ac <__exponent>
 8026a38:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8026a3a:	1813      	adds	r3, r2, r0
 8026a3c:	2a01      	cmp	r2, #1
 8026a3e:	4682      	mov	sl, r0
 8026a40:	6123      	str	r3, [r4, #16]
 8026a42:	dc02      	bgt.n	8026a4a <_printf_float+0x12a>
 8026a44:	6822      	ldr	r2, [r4, #0]
 8026a46:	07d2      	lsls	r2, r2, #31
 8026a48:	d501      	bpl.n	8026a4e <_printf_float+0x12e>
 8026a4a:	3301      	adds	r3, #1
 8026a4c:	6123      	str	r3, [r4, #16]
 8026a4e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8026a52:	2b00      	cmp	r3, #0
 8026a54:	d0a6      	beq.n	80269a4 <_printf_float+0x84>
 8026a56:	232d      	movs	r3, #45	@ 0x2d
 8026a58:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8026a5c:	e7a2      	b.n	80269a4 <_printf_float+0x84>
 8026a5e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8026a62:	d1c4      	bne.n	80269ee <_printf_float+0xce>
 8026a64:	2b00      	cmp	r3, #0
 8026a66:	d1c2      	bne.n	80269ee <_printf_float+0xce>
 8026a68:	2301      	movs	r3, #1
 8026a6a:	e7bf      	b.n	80269ec <_printf_float+0xcc>
 8026a6c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8026a70:	d9db      	bls.n	8026a2a <_printf_float+0x10a>
 8026a72:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8026a76:	d118      	bne.n	8026aaa <_printf_float+0x18a>
 8026a78:	2900      	cmp	r1, #0
 8026a7a:	6863      	ldr	r3, [r4, #4]
 8026a7c:	dd0b      	ble.n	8026a96 <_printf_float+0x176>
 8026a7e:	6121      	str	r1, [r4, #16]
 8026a80:	b913      	cbnz	r3, 8026a88 <_printf_float+0x168>
 8026a82:	6822      	ldr	r2, [r4, #0]
 8026a84:	07d0      	lsls	r0, r2, #31
 8026a86:	d502      	bpl.n	8026a8e <_printf_float+0x16e>
 8026a88:	3301      	adds	r3, #1
 8026a8a:	440b      	add	r3, r1
 8026a8c:	6123      	str	r3, [r4, #16]
 8026a8e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8026a90:	f04f 0a00 	mov.w	sl, #0
 8026a94:	e7db      	b.n	8026a4e <_printf_float+0x12e>
 8026a96:	b913      	cbnz	r3, 8026a9e <_printf_float+0x17e>
 8026a98:	6822      	ldr	r2, [r4, #0]
 8026a9a:	07d2      	lsls	r2, r2, #31
 8026a9c:	d501      	bpl.n	8026aa2 <_printf_float+0x182>
 8026a9e:	3302      	adds	r3, #2
 8026aa0:	e7f4      	b.n	8026a8c <_printf_float+0x16c>
 8026aa2:	2301      	movs	r3, #1
 8026aa4:	e7f2      	b.n	8026a8c <_printf_float+0x16c>
 8026aa6:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8026aaa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8026aac:	4299      	cmp	r1, r3
 8026aae:	db05      	blt.n	8026abc <_printf_float+0x19c>
 8026ab0:	6823      	ldr	r3, [r4, #0]
 8026ab2:	6121      	str	r1, [r4, #16]
 8026ab4:	07d8      	lsls	r0, r3, #31
 8026ab6:	d5ea      	bpl.n	8026a8e <_printf_float+0x16e>
 8026ab8:	1c4b      	adds	r3, r1, #1
 8026aba:	e7e7      	b.n	8026a8c <_printf_float+0x16c>
 8026abc:	2900      	cmp	r1, #0
 8026abe:	bfd4      	ite	le
 8026ac0:	f1c1 0202 	rsble	r2, r1, #2
 8026ac4:	2201      	movgt	r2, #1
 8026ac6:	4413      	add	r3, r2
 8026ac8:	e7e0      	b.n	8026a8c <_printf_float+0x16c>
 8026aca:	6823      	ldr	r3, [r4, #0]
 8026acc:	055a      	lsls	r2, r3, #21
 8026ace:	d407      	bmi.n	8026ae0 <_printf_float+0x1c0>
 8026ad0:	6923      	ldr	r3, [r4, #16]
 8026ad2:	4642      	mov	r2, r8
 8026ad4:	4631      	mov	r1, r6
 8026ad6:	4628      	mov	r0, r5
 8026ad8:	47b8      	blx	r7
 8026ada:	3001      	adds	r0, #1
 8026adc:	d12a      	bne.n	8026b34 <_printf_float+0x214>
 8026ade:	e76b      	b.n	80269b8 <_printf_float+0x98>
 8026ae0:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8026ae4:	f240 80e0 	bls.w	8026ca8 <_printf_float+0x388>
 8026ae8:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8026aec:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8026af0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026af4:	d133      	bne.n	8026b5e <_printf_float+0x23e>
 8026af6:	4a38      	ldr	r2, [pc, #224]	@ (8026bd8 <_printf_float+0x2b8>)
 8026af8:	2301      	movs	r3, #1
 8026afa:	4631      	mov	r1, r6
 8026afc:	4628      	mov	r0, r5
 8026afe:	47b8      	blx	r7
 8026b00:	3001      	adds	r0, #1
 8026b02:	f43f af59 	beq.w	80269b8 <_printf_float+0x98>
 8026b06:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8026b0a:	4543      	cmp	r3, r8
 8026b0c:	db02      	blt.n	8026b14 <_printf_float+0x1f4>
 8026b0e:	6823      	ldr	r3, [r4, #0]
 8026b10:	07d8      	lsls	r0, r3, #31
 8026b12:	d50f      	bpl.n	8026b34 <_printf_float+0x214>
 8026b14:	9b05      	ldr	r3, [sp, #20]
 8026b16:	465a      	mov	r2, fp
 8026b18:	4631      	mov	r1, r6
 8026b1a:	4628      	mov	r0, r5
 8026b1c:	47b8      	blx	r7
 8026b1e:	3001      	adds	r0, #1
 8026b20:	f43f af4a 	beq.w	80269b8 <_printf_float+0x98>
 8026b24:	f04f 0900 	mov.w	r9, #0
 8026b28:	f108 38ff 	add.w	r8, r8, #4294967295
 8026b2c:	f104 0a1a 	add.w	sl, r4, #26
 8026b30:	45c8      	cmp	r8, r9
 8026b32:	dc09      	bgt.n	8026b48 <_printf_float+0x228>
 8026b34:	6823      	ldr	r3, [r4, #0]
 8026b36:	079b      	lsls	r3, r3, #30
 8026b38:	f100 8107 	bmi.w	8026d4a <_printf_float+0x42a>
 8026b3c:	68e0      	ldr	r0, [r4, #12]
 8026b3e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8026b40:	4298      	cmp	r0, r3
 8026b42:	bfb8      	it	lt
 8026b44:	4618      	movlt	r0, r3
 8026b46:	e739      	b.n	80269bc <_printf_float+0x9c>
 8026b48:	2301      	movs	r3, #1
 8026b4a:	4652      	mov	r2, sl
 8026b4c:	4631      	mov	r1, r6
 8026b4e:	4628      	mov	r0, r5
 8026b50:	47b8      	blx	r7
 8026b52:	3001      	adds	r0, #1
 8026b54:	f43f af30 	beq.w	80269b8 <_printf_float+0x98>
 8026b58:	f109 0901 	add.w	r9, r9, #1
 8026b5c:	e7e8      	b.n	8026b30 <_printf_float+0x210>
 8026b5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026b60:	2b00      	cmp	r3, #0
 8026b62:	dc3b      	bgt.n	8026bdc <_printf_float+0x2bc>
 8026b64:	4a1c      	ldr	r2, [pc, #112]	@ (8026bd8 <_printf_float+0x2b8>)
 8026b66:	2301      	movs	r3, #1
 8026b68:	4631      	mov	r1, r6
 8026b6a:	4628      	mov	r0, r5
 8026b6c:	47b8      	blx	r7
 8026b6e:	3001      	adds	r0, #1
 8026b70:	f43f af22 	beq.w	80269b8 <_printf_float+0x98>
 8026b74:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8026b78:	ea59 0303 	orrs.w	r3, r9, r3
 8026b7c:	d102      	bne.n	8026b84 <_printf_float+0x264>
 8026b7e:	6823      	ldr	r3, [r4, #0]
 8026b80:	07d9      	lsls	r1, r3, #31
 8026b82:	d5d7      	bpl.n	8026b34 <_printf_float+0x214>
 8026b84:	9b05      	ldr	r3, [sp, #20]
 8026b86:	465a      	mov	r2, fp
 8026b88:	4631      	mov	r1, r6
 8026b8a:	4628      	mov	r0, r5
 8026b8c:	47b8      	blx	r7
 8026b8e:	3001      	adds	r0, #1
 8026b90:	f43f af12 	beq.w	80269b8 <_printf_float+0x98>
 8026b94:	f04f 0a00 	mov.w	sl, #0
 8026b98:	f104 0b1a 	add.w	fp, r4, #26
 8026b9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026b9e:	425b      	negs	r3, r3
 8026ba0:	4553      	cmp	r3, sl
 8026ba2:	dc01      	bgt.n	8026ba8 <_printf_float+0x288>
 8026ba4:	464b      	mov	r3, r9
 8026ba6:	e794      	b.n	8026ad2 <_printf_float+0x1b2>
 8026ba8:	2301      	movs	r3, #1
 8026baa:	465a      	mov	r2, fp
 8026bac:	4631      	mov	r1, r6
 8026bae:	4628      	mov	r0, r5
 8026bb0:	47b8      	blx	r7
 8026bb2:	3001      	adds	r0, #1
 8026bb4:	f43f af00 	beq.w	80269b8 <_printf_float+0x98>
 8026bb8:	f10a 0a01 	add.w	sl, sl, #1
 8026bbc:	e7ee      	b.n	8026b9c <_printf_float+0x27c>
 8026bbe:	bf00      	nop
 8026bc0:	ffffffff 	.word	0xffffffff
 8026bc4:	7fefffff 	.word	0x7fefffff
 8026bc8:	0803af5b 	.word	0x0803af5b
 8026bcc:	0803af57 	.word	0x0803af57
 8026bd0:	0803af63 	.word	0x0803af63
 8026bd4:	0803af5f 	.word	0x0803af5f
 8026bd8:	0803af67 	.word	0x0803af67
 8026bdc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8026bde:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8026be2:	4553      	cmp	r3, sl
 8026be4:	bfa8      	it	ge
 8026be6:	4653      	movge	r3, sl
 8026be8:	2b00      	cmp	r3, #0
 8026bea:	4699      	mov	r9, r3
 8026bec:	dc37      	bgt.n	8026c5e <_printf_float+0x33e>
 8026bee:	2300      	movs	r3, #0
 8026bf0:	9307      	str	r3, [sp, #28]
 8026bf2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8026bf6:	f104 021a 	add.w	r2, r4, #26
 8026bfa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8026bfc:	9907      	ldr	r1, [sp, #28]
 8026bfe:	9306      	str	r3, [sp, #24]
 8026c00:	eba3 0309 	sub.w	r3, r3, r9
 8026c04:	428b      	cmp	r3, r1
 8026c06:	dc31      	bgt.n	8026c6c <_printf_float+0x34c>
 8026c08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026c0a:	459a      	cmp	sl, r3
 8026c0c:	dc3b      	bgt.n	8026c86 <_printf_float+0x366>
 8026c0e:	6823      	ldr	r3, [r4, #0]
 8026c10:	07da      	lsls	r2, r3, #31
 8026c12:	d438      	bmi.n	8026c86 <_printf_float+0x366>
 8026c14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026c16:	ebaa 0903 	sub.w	r9, sl, r3
 8026c1a:	9b06      	ldr	r3, [sp, #24]
 8026c1c:	ebaa 0303 	sub.w	r3, sl, r3
 8026c20:	4599      	cmp	r9, r3
 8026c22:	bfa8      	it	ge
 8026c24:	4699      	movge	r9, r3
 8026c26:	f1b9 0f00 	cmp.w	r9, #0
 8026c2a:	dc34      	bgt.n	8026c96 <_printf_float+0x376>
 8026c2c:	f04f 0800 	mov.w	r8, #0
 8026c30:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8026c34:	f104 0b1a 	add.w	fp, r4, #26
 8026c38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026c3a:	ebaa 0303 	sub.w	r3, sl, r3
 8026c3e:	eba3 0309 	sub.w	r3, r3, r9
 8026c42:	4543      	cmp	r3, r8
 8026c44:	f77f af76 	ble.w	8026b34 <_printf_float+0x214>
 8026c48:	2301      	movs	r3, #1
 8026c4a:	465a      	mov	r2, fp
 8026c4c:	4631      	mov	r1, r6
 8026c4e:	4628      	mov	r0, r5
 8026c50:	47b8      	blx	r7
 8026c52:	3001      	adds	r0, #1
 8026c54:	f43f aeb0 	beq.w	80269b8 <_printf_float+0x98>
 8026c58:	f108 0801 	add.w	r8, r8, #1
 8026c5c:	e7ec      	b.n	8026c38 <_printf_float+0x318>
 8026c5e:	4642      	mov	r2, r8
 8026c60:	4631      	mov	r1, r6
 8026c62:	4628      	mov	r0, r5
 8026c64:	47b8      	blx	r7
 8026c66:	3001      	adds	r0, #1
 8026c68:	d1c1      	bne.n	8026bee <_printf_float+0x2ce>
 8026c6a:	e6a5      	b.n	80269b8 <_printf_float+0x98>
 8026c6c:	2301      	movs	r3, #1
 8026c6e:	4631      	mov	r1, r6
 8026c70:	4628      	mov	r0, r5
 8026c72:	9206      	str	r2, [sp, #24]
 8026c74:	47b8      	blx	r7
 8026c76:	3001      	adds	r0, #1
 8026c78:	f43f ae9e 	beq.w	80269b8 <_printf_float+0x98>
 8026c7c:	9b07      	ldr	r3, [sp, #28]
 8026c7e:	9a06      	ldr	r2, [sp, #24]
 8026c80:	3301      	adds	r3, #1
 8026c82:	9307      	str	r3, [sp, #28]
 8026c84:	e7b9      	b.n	8026bfa <_printf_float+0x2da>
 8026c86:	9b05      	ldr	r3, [sp, #20]
 8026c88:	465a      	mov	r2, fp
 8026c8a:	4631      	mov	r1, r6
 8026c8c:	4628      	mov	r0, r5
 8026c8e:	47b8      	blx	r7
 8026c90:	3001      	adds	r0, #1
 8026c92:	d1bf      	bne.n	8026c14 <_printf_float+0x2f4>
 8026c94:	e690      	b.n	80269b8 <_printf_float+0x98>
 8026c96:	9a06      	ldr	r2, [sp, #24]
 8026c98:	464b      	mov	r3, r9
 8026c9a:	4442      	add	r2, r8
 8026c9c:	4631      	mov	r1, r6
 8026c9e:	4628      	mov	r0, r5
 8026ca0:	47b8      	blx	r7
 8026ca2:	3001      	adds	r0, #1
 8026ca4:	d1c2      	bne.n	8026c2c <_printf_float+0x30c>
 8026ca6:	e687      	b.n	80269b8 <_printf_float+0x98>
 8026ca8:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8026cac:	f1b9 0f01 	cmp.w	r9, #1
 8026cb0:	dc01      	bgt.n	8026cb6 <_printf_float+0x396>
 8026cb2:	07db      	lsls	r3, r3, #31
 8026cb4:	d536      	bpl.n	8026d24 <_printf_float+0x404>
 8026cb6:	2301      	movs	r3, #1
 8026cb8:	4642      	mov	r2, r8
 8026cba:	4631      	mov	r1, r6
 8026cbc:	4628      	mov	r0, r5
 8026cbe:	47b8      	blx	r7
 8026cc0:	3001      	adds	r0, #1
 8026cc2:	f43f ae79 	beq.w	80269b8 <_printf_float+0x98>
 8026cc6:	9b05      	ldr	r3, [sp, #20]
 8026cc8:	465a      	mov	r2, fp
 8026cca:	4631      	mov	r1, r6
 8026ccc:	4628      	mov	r0, r5
 8026cce:	47b8      	blx	r7
 8026cd0:	3001      	adds	r0, #1
 8026cd2:	f43f ae71 	beq.w	80269b8 <_printf_float+0x98>
 8026cd6:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8026cda:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8026cde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026ce2:	f109 39ff 	add.w	r9, r9, #4294967295
 8026ce6:	d018      	beq.n	8026d1a <_printf_float+0x3fa>
 8026ce8:	464b      	mov	r3, r9
 8026cea:	f108 0201 	add.w	r2, r8, #1
 8026cee:	4631      	mov	r1, r6
 8026cf0:	4628      	mov	r0, r5
 8026cf2:	47b8      	blx	r7
 8026cf4:	3001      	adds	r0, #1
 8026cf6:	d10c      	bne.n	8026d12 <_printf_float+0x3f2>
 8026cf8:	e65e      	b.n	80269b8 <_printf_float+0x98>
 8026cfa:	2301      	movs	r3, #1
 8026cfc:	465a      	mov	r2, fp
 8026cfe:	4631      	mov	r1, r6
 8026d00:	4628      	mov	r0, r5
 8026d02:	47b8      	blx	r7
 8026d04:	3001      	adds	r0, #1
 8026d06:	f43f ae57 	beq.w	80269b8 <_printf_float+0x98>
 8026d0a:	f108 0801 	add.w	r8, r8, #1
 8026d0e:	45c8      	cmp	r8, r9
 8026d10:	dbf3      	blt.n	8026cfa <_printf_float+0x3da>
 8026d12:	4653      	mov	r3, sl
 8026d14:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8026d18:	e6dc      	b.n	8026ad4 <_printf_float+0x1b4>
 8026d1a:	f04f 0800 	mov.w	r8, #0
 8026d1e:	f104 0b1a 	add.w	fp, r4, #26
 8026d22:	e7f4      	b.n	8026d0e <_printf_float+0x3ee>
 8026d24:	2301      	movs	r3, #1
 8026d26:	4642      	mov	r2, r8
 8026d28:	e7e1      	b.n	8026cee <_printf_float+0x3ce>
 8026d2a:	2301      	movs	r3, #1
 8026d2c:	464a      	mov	r2, r9
 8026d2e:	4631      	mov	r1, r6
 8026d30:	4628      	mov	r0, r5
 8026d32:	47b8      	blx	r7
 8026d34:	3001      	adds	r0, #1
 8026d36:	f43f ae3f 	beq.w	80269b8 <_printf_float+0x98>
 8026d3a:	f108 0801 	add.w	r8, r8, #1
 8026d3e:	68e3      	ldr	r3, [r4, #12]
 8026d40:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8026d42:	1a5b      	subs	r3, r3, r1
 8026d44:	4543      	cmp	r3, r8
 8026d46:	dcf0      	bgt.n	8026d2a <_printf_float+0x40a>
 8026d48:	e6f8      	b.n	8026b3c <_printf_float+0x21c>
 8026d4a:	f04f 0800 	mov.w	r8, #0
 8026d4e:	f104 0919 	add.w	r9, r4, #25
 8026d52:	e7f4      	b.n	8026d3e <_printf_float+0x41e>

08026d54 <_printf_common>:
 8026d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026d58:	4616      	mov	r6, r2
 8026d5a:	4698      	mov	r8, r3
 8026d5c:	688a      	ldr	r2, [r1, #8]
 8026d5e:	690b      	ldr	r3, [r1, #16]
 8026d60:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8026d64:	4293      	cmp	r3, r2
 8026d66:	bfb8      	it	lt
 8026d68:	4613      	movlt	r3, r2
 8026d6a:	6033      	str	r3, [r6, #0]
 8026d6c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8026d70:	4607      	mov	r7, r0
 8026d72:	460c      	mov	r4, r1
 8026d74:	b10a      	cbz	r2, 8026d7a <_printf_common+0x26>
 8026d76:	3301      	adds	r3, #1
 8026d78:	6033      	str	r3, [r6, #0]
 8026d7a:	6823      	ldr	r3, [r4, #0]
 8026d7c:	0699      	lsls	r1, r3, #26
 8026d7e:	bf42      	ittt	mi
 8026d80:	6833      	ldrmi	r3, [r6, #0]
 8026d82:	3302      	addmi	r3, #2
 8026d84:	6033      	strmi	r3, [r6, #0]
 8026d86:	6825      	ldr	r5, [r4, #0]
 8026d88:	f015 0506 	ands.w	r5, r5, #6
 8026d8c:	d106      	bne.n	8026d9c <_printf_common+0x48>
 8026d8e:	f104 0a19 	add.w	sl, r4, #25
 8026d92:	68e3      	ldr	r3, [r4, #12]
 8026d94:	6832      	ldr	r2, [r6, #0]
 8026d96:	1a9b      	subs	r3, r3, r2
 8026d98:	42ab      	cmp	r3, r5
 8026d9a:	dc26      	bgt.n	8026dea <_printf_common+0x96>
 8026d9c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8026da0:	6822      	ldr	r2, [r4, #0]
 8026da2:	3b00      	subs	r3, #0
 8026da4:	bf18      	it	ne
 8026da6:	2301      	movne	r3, #1
 8026da8:	0692      	lsls	r2, r2, #26
 8026daa:	d42b      	bmi.n	8026e04 <_printf_common+0xb0>
 8026dac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8026db0:	4641      	mov	r1, r8
 8026db2:	4638      	mov	r0, r7
 8026db4:	47c8      	blx	r9
 8026db6:	3001      	adds	r0, #1
 8026db8:	d01e      	beq.n	8026df8 <_printf_common+0xa4>
 8026dba:	6823      	ldr	r3, [r4, #0]
 8026dbc:	6922      	ldr	r2, [r4, #16]
 8026dbe:	f003 0306 	and.w	r3, r3, #6
 8026dc2:	2b04      	cmp	r3, #4
 8026dc4:	bf02      	ittt	eq
 8026dc6:	68e5      	ldreq	r5, [r4, #12]
 8026dc8:	6833      	ldreq	r3, [r6, #0]
 8026dca:	1aed      	subeq	r5, r5, r3
 8026dcc:	68a3      	ldr	r3, [r4, #8]
 8026dce:	bf0c      	ite	eq
 8026dd0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8026dd4:	2500      	movne	r5, #0
 8026dd6:	4293      	cmp	r3, r2
 8026dd8:	bfc4      	itt	gt
 8026dda:	1a9b      	subgt	r3, r3, r2
 8026ddc:	18ed      	addgt	r5, r5, r3
 8026dde:	2600      	movs	r6, #0
 8026de0:	341a      	adds	r4, #26
 8026de2:	42b5      	cmp	r5, r6
 8026de4:	d11a      	bne.n	8026e1c <_printf_common+0xc8>
 8026de6:	2000      	movs	r0, #0
 8026de8:	e008      	b.n	8026dfc <_printf_common+0xa8>
 8026dea:	2301      	movs	r3, #1
 8026dec:	4652      	mov	r2, sl
 8026dee:	4641      	mov	r1, r8
 8026df0:	4638      	mov	r0, r7
 8026df2:	47c8      	blx	r9
 8026df4:	3001      	adds	r0, #1
 8026df6:	d103      	bne.n	8026e00 <_printf_common+0xac>
 8026df8:	f04f 30ff 	mov.w	r0, #4294967295
 8026dfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8026e00:	3501      	adds	r5, #1
 8026e02:	e7c6      	b.n	8026d92 <_printf_common+0x3e>
 8026e04:	18e1      	adds	r1, r4, r3
 8026e06:	1c5a      	adds	r2, r3, #1
 8026e08:	2030      	movs	r0, #48	@ 0x30
 8026e0a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8026e0e:	4422      	add	r2, r4
 8026e10:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8026e14:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8026e18:	3302      	adds	r3, #2
 8026e1a:	e7c7      	b.n	8026dac <_printf_common+0x58>
 8026e1c:	2301      	movs	r3, #1
 8026e1e:	4622      	mov	r2, r4
 8026e20:	4641      	mov	r1, r8
 8026e22:	4638      	mov	r0, r7
 8026e24:	47c8      	blx	r9
 8026e26:	3001      	adds	r0, #1
 8026e28:	d0e6      	beq.n	8026df8 <_printf_common+0xa4>
 8026e2a:	3601      	adds	r6, #1
 8026e2c:	e7d9      	b.n	8026de2 <_printf_common+0x8e>
	...

08026e30 <_printf_i>:
 8026e30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8026e34:	7e0f      	ldrb	r7, [r1, #24]
 8026e36:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8026e38:	2f78      	cmp	r7, #120	@ 0x78
 8026e3a:	4691      	mov	r9, r2
 8026e3c:	4680      	mov	r8, r0
 8026e3e:	460c      	mov	r4, r1
 8026e40:	469a      	mov	sl, r3
 8026e42:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8026e46:	d807      	bhi.n	8026e58 <_printf_i+0x28>
 8026e48:	2f62      	cmp	r7, #98	@ 0x62
 8026e4a:	d80a      	bhi.n	8026e62 <_printf_i+0x32>
 8026e4c:	2f00      	cmp	r7, #0
 8026e4e:	f000 80d1 	beq.w	8026ff4 <_printf_i+0x1c4>
 8026e52:	2f58      	cmp	r7, #88	@ 0x58
 8026e54:	f000 80b8 	beq.w	8026fc8 <_printf_i+0x198>
 8026e58:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8026e5c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8026e60:	e03a      	b.n	8026ed8 <_printf_i+0xa8>
 8026e62:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8026e66:	2b15      	cmp	r3, #21
 8026e68:	d8f6      	bhi.n	8026e58 <_printf_i+0x28>
 8026e6a:	a101      	add	r1, pc, #4	@ (adr r1, 8026e70 <_printf_i+0x40>)
 8026e6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8026e70:	08026ec9 	.word	0x08026ec9
 8026e74:	08026edd 	.word	0x08026edd
 8026e78:	08026e59 	.word	0x08026e59
 8026e7c:	08026e59 	.word	0x08026e59
 8026e80:	08026e59 	.word	0x08026e59
 8026e84:	08026e59 	.word	0x08026e59
 8026e88:	08026edd 	.word	0x08026edd
 8026e8c:	08026e59 	.word	0x08026e59
 8026e90:	08026e59 	.word	0x08026e59
 8026e94:	08026e59 	.word	0x08026e59
 8026e98:	08026e59 	.word	0x08026e59
 8026e9c:	08026fdb 	.word	0x08026fdb
 8026ea0:	08026f07 	.word	0x08026f07
 8026ea4:	08026f95 	.word	0x08026f95
 8026ea8:	08026e59 	.word	0x08026e59
 8026eac:	08026e59 	.word	0x08026e59
 8026eb0:	08026ffd 	.word	0x08026ffd
 8026eb4:	08026e59 	.word	0x08026e59
 8026eb8:	08026f07 	.word	0x08026f07
 8026ebc:	08026e59 	.word	0x08026e59
 8026ec0:	08026e59 	.word	0x08026e59
 8026ec4:	08026f9d 	.word	0x08026f9d
 8026ec8:	6833      	ldr	r3, [r6, #0]
 8026eca:	1d1a      	adds	r2, r3, #4
 8026ecc:	681b      	ldr	r3, [r3, #0]
 8026ece:	6032      	str	r2, [r6, #0]
 8026ed0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8026ed4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8026ed8:	2301      	movs	r3, #1
 8026eda:	e09c      	b.n	8027016 <_printf_i+0x1e6>
 8026edc:	6833      	ldr	r3, [r6, #0]
 8026ede:	6820      	ldr	r0, [r4, #0]
 8026ee0:	1d19      	adds	r1, r3, #4
 8026ee2:	6031      	str	r1, [r6, #0]
 8026ee4:	0606      	lsls	r6, r0, #24
 8026ee6:	d501      	bpl.n	8026eec <_printf_i+0xbc>
 8026ee8:	681d      	ldr	r5, [r3, #0]
 8026eea:	e003      	b.n	8026ef4 <_printf_i+0xc4>
 8026eec:	0645      	lsls	r5, r0, #25
 8026eee:	d5fb      	bpl.n	8026ee8 <_printf_i+0xb8>
 8026ef0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8026ef4:	2d00      	cmp	r5, #0
 8026ef6:	da03      	bge.n	8026f00 <_printf_i+0xd0>
 8026ef8:	232d      	movs	r3, #45	@ 0x2d
 8026efa:	426d      	negs	r5, r5
 8026efc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8026f00:	4858      	ldr	r0, [pc, #352]	@ (8027064 <_printf_i+0x234>)
 8026f02:	230a      	movs	r3, #10
 8026f04:	e011      	b.n	8026f2a <_printf_i+0xfa>
 8026f06:	6821      	ldr	r1, [r4, #0]
 8026f08:	6833      	ldr	r3, [r6, #0]
 8026f0a:	0608      	lsls	r0, r1, #24
 8026f0c:	f853 5b04 	ldr.w	r5, [r3], #4
 8026f10:	d402      	bmi.n	8026f18 <_printf_i+0xe8>
 8026f12:	0649      	lsls	r1, r1, #25
 8026f14:	bf48      	it	mi
 8026f16:	b2ad      	uxthmi	r5, r5
 8026f18:	2f6f      	cmp	r7, #111	@ 0x6f
 8026f1a:	4852      	ldr	r0, [pc, #328]	@ (8027064 <_printf_i+0x234>)
 8026f1c:	6033      	str	r3, [r6, #0]
 8026f1e:	bf14      	ite	ne
 8026f20:	230a      	movne	r3, #10
 8026f22:	2308      	moveq	r3, #8
 8026f24:	2100      	movs	r1, #0
 8026f26:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8026f2a:	6866      	ldr	r6, [r4, #4]
 8026f2c:	60a6      	str	r6, [r4, #8]
 8026f2e:	2e00      	cmp	r6, #0
 8026f30:	db05      	blt.n	8026f3e <_printf_i+0x10e>
 8026f32:	6821      	ldr	r1, [r4, #0]
 8026f34:	432e      	orrs	r6, r5
 8026f36:	f021 0104 	bic.w	r1, r1, #4
 8026f3a:	6021      	str	r1, [r4, #0]
 8026f3c:	d04b      	beq.n	8026fd6 <_printf_i+0x1a6>
 8026f3e:	4616      	mov	r6, r2
 8026f40:	fbb5 f1f3 	udiv	r1, r5, r3
 8026f44:	fb03 5711 	mls	r7, r3, r1, r5
 8026f48:	5dc7      	ldrb	r7, [r0, r7]
 8026f4a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8026f4e:	462f      	mov	r7, r5
 8026f50:	42bb      	cmp	r3, r7
 8026f52:	460d      	mov	r5, r1
 8026f54:	d9f4      	bls.n	8026f40 <_printf_i+0x110>
 8026f56:	2b08      	cmp	r3, #8
 8026f58:	d10b      	bne.n	8026f72 <_printf_i+0x142>
 8026f5a:	6823      	ldr	r3, [r4, #0]
 8026f5c:	07df      	lsls	r7, r3, #31
 8026f5e:	d508      	bpl.n	8026f72 <_printf_i+0x142>
 8026f60:	6923      	ldr	r3, [r4, #16]
 8026f62:	6861      	ldr	r1, [r4, #4]
 8026f64:	4299      	cmp	r1, r3
 8026f66:	bfde      	ittt	le
 8026f68:	2330      	movle	r3, #48	@ 0x30
 8026f6a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8026f6e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8026f72:	1b92      	subs	r2, r2, r6
 8026f74:	6122      	str	r2, [r4, #16]
 8026f76:	f8cd a000 	str.w	sl, [sp]
 8026f7a:	464b      	mov	r3, r9
 8026f7c:	aa03      	add	r2, sp, #12
 8026f7e:	4621      	mov	r1, r4
 8026f80:	4640      	mov	r0, r8
 8026f82:	f7ff fee7 	bl	8026d54 <_printf_common>
 8026f86:	3001      	adds	r0, #1
 8026f88:	d14a      	bne.n	8027020 <_printf_i+0x1f0>
 8026f8a:	f04f 30ff 	mov.w	r0, #4294967295
 8026f8e:	b004      	add	sp, #16
 8026f90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8026f94:	6823      	ldr	r3, [r4, #0]
 8026f96:	f043 0320 	orr.w	r3, r3, #32
 8026f9a:	6023      	str	r3, [r4, #0]
 8026f9c:	4832      	ldr	r0, [pc, #200]	@ (8027068 <_printf_i+0x238>)
 8026f9e:	2778      	movs	r7, #120	@ 0x78
 8026fa0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8026fa4:	6823      	ldr	r3, [r4, #0]
 8026fa6:	6831      	ldr	r1, [r6, #0]
 8026fa8:	061f      	lsls	r7, r3, #24
 8026faa:	f851 5b04 	ldr.w	r5, [r1], #4
 8026fae:	d402      	bmi.n	8026fb6 <_printf_i+0x186>
 8026fb0:	065f      	lsls	r7, r3, #25
 8026fb2:	bf48      	it	mi
 8026fb4:	b2ad      	uxthmi	r5, r5
 8026fb6:	6031      	str	r1, [r6, #0]
 8026fb8:	07d9      	lsls	r1, r3, #31
 8026fba:	bf44      	itt	mi
 8026fbc:	f043 0320 	orrmi.w	r3, r3, #32
 8026fc0:	6023      	strmi	r3, [r4, #0]
 8026fc2:	b11d      	cbz	r5, 8026fcc <_printf_i+0x19c>
 8026fc4:	2310      	movs	r3, #16
 8026fc6:	e7ad      	b.n	8026f24 <_printf_i+0xf4>
 8026fc8:	4826      	ldr	r0, [pc, #152]	@ (8027064 <_printf_i+0x234>)
 8026fca:	e7e9      	b.n	8026fa0 <_printf_i+0x170>
 8026fcc:	6823      	ldr	r3, [r4, #0]
 8026fce:	f023 0320 	bic.w	r3, r3, #32
 8026fd2:	6023      	str	r3, [r4, #0]
 8026fd4:	e7f6      	b.n	8026fc4 <_printf_i+0x194>
 8026fd6:	4616      	mov	r6, r2
 8026fd8:	e7bd      	b.n	8026f56 <_printf_i+0x126>
 8026fda:	6833      	ldr	r3, [r6, #0]
 8026fdc:	6825      	ldr	r5, [r4, #0]
 8026fde:	6961      	ldr	r1, [r4, #20]
 8026fe0:	1d18      	adds	r0, r3, #4
 8026fe2:	6030      	str	r0, [r6, #0]
 8026fe4:	062e      	lsls	r6, r5, #24
 8026fe6:	681b      	ldr	r3, [r3, #0]
 8026fe8:	d501      	bpl.n	8026fee <_printf_i+0x1be>
 8026fea:	6019      	str	r1, [r3, #0]
 8026fec:	e002      	b.n	8026ff4 <_printf_i+0x1c4>
 8026fee:	0668      	lsls	r0, r5, #25
 8026ff0:	d5fb      	bpl.n	8026fea <_printf_i+0x1ba>
 8026ff2:	8019      	strh	r1, [r3, #0]
 8026ff4:	2300      	movs	r3, #0
 8026ff6:	6123      	str	r3, [r4, #16]
 8026ff8:	4616      	mov	r6, r2
 8026ffa:	e7bc      	b.n	8026f76 <_printf_i+0x146>
 8026ffc:	6833      	ldr	r3, [r6, #0]
 8026ffe:	1d1a      	adds	r2, r3, #4
 8027000:	6032      	str	r2, [r6, #0]
 8027002:	681e      	ldr	r6, [r3, #0]
 8027004:	6862      	ldr	r2, [r4, #4]
 8027006:	2100      	movs	r1, #0
 8027008:	4630      	mov	r0, r6
 802700a:	f7d9 f991 	bl	8000330 <memchr>
 802700e:	b108      	cbz	r0, 8027014 <_printf_i+0x1e4>
 8027010:	1b80      	subs	r0, r0, r6
 8027012:	6060      	str	r0, [r4, #4]
 8027014:	6863      	ldr	r3, [r4, #4]
 8027016:	6123      	str	r3, [r4, #16]
 8027018:	2300      	movs	r3, #0
 802701a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 802701e:	e7aa      	b.n	8026f76 <_printf_i+0x146>
 8027020:	6923      	ldr	r3, [r4, #16]
 8027022:	4632      	mov	r2, r6
 8027024:	4649      	mov	r1, r9
 8027026:	4640      	mov	r0, r8
 8027028:	47d0      	blx	sl
 802702a:	3001      	adds	r0, #1
 802702c:	d0ad      	beq.n	8026f8a <_printf_i+0x15a>
 802702e:	6823      	ldr	r3, [r4, #0]
 8027030:	079b      	lsls	r3, r3, #30
 8027032:	d413      	bmi.n	802705c <_printf_i+0x22c>
 8027034:	68e0      	ldr	r0, [r4, #12]
 8027036:	9b03      	ldr	r3, [sp, #12]
 8027038:	4298      	cmp	r0, r3
 802703a:	bfb8      	it	lt
 802703c:	4618      	movlt	r0, r3
 802703e:	e7a6      	b.n	8026f8e <_printf_i+0x15e>
 8027040:	2301      	movs	r3, #1
 8027042:	4632      	mov	r2, r6
 8027044:	4649      	mov	r1, r9
 8027046:	4640      	mov	r0, r8
 8027048:	47d0      	blx	sl
 802704a:	3001      	adds	r0, #1
 802704c:	d09d      	beq.n	8026f8a <_printf_i+0x15a>
 802704e:	3501      	adds	r5, #1
 8027050:	68e3      	ldr	r3, [r4, #12]
 8027052:	9903      	ldr	r1, [sp, #12]
 8027054:	1a5b      	subs	r3, r3, r1
 8027056:	42ab      	cmp	r3, r5
 8027058:	dcf2      	bgt.n	8027040 <_printf_i+0x210>
 802705a:	e7eb      	b.n	8027034 <_printf_i+0x204>
 802705c:	2500      	movs	r5, #0
 802705e:	f104 0619 	add.w	r6, r4, #25
 8027062:	e7f5      	b.n	8027050 <_printf_i+0x220>
 8027064:	0803af69 	.word	0x0803af69
 8027068:	0803af7a 	.word	0x0803af7a

0802706c <__sflush_r>:
 802706c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8027070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8027074:	0716      	lsls	r6, r2, #28
 8027076:	4605      	mov	r5, r0
 8027078:	460c      	mov	r4, r1
 802707a:	d454      	bmi.n	8027126 <__sflush_r+0xba>
 802707c:	684b      	ldr	r3, [r1, #4]
 802707e:	2b00      	cmp	r3, #0
 8027080:	dc02      	bgt.n	8027088 <__sflush_r+0x1c>
 8027082:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8027084:	2b00      	cmp	r3, #0
 8027086:	dd48      	ble.n	802711a <__sflush_r+0xae>
 8027088:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 802708a:	2e00      	cmp	r6, #0
 802708c:	d045      	beq.n	802711a <__sflush_r+0xae>
 802708e:	2300      	movs	r3, #0
 8027090:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8027094:	682f      	ldr	r7, [r5, #0]
 8027096:	6a21      	ldr	r1, [r4, #32]
 8027098:	602b      	str	r3, [r5, #0]
 802709a:	d030      	beq.n	80270fe <__sflush_r+0x92>
 802709c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 802709e:	89a3      	ldrh	r3, [r4, #12]
 80270a0:	0759      	lsls	r1, r3, #29
 80270a2:	d505      	bpl.n	80270b0 <__sflush_r+0x44>
 80270a4:	6863      	ldr	r3, [r4, #4]
 80270a6:	1ad2      	subs	r2, r2, r3
 80270a8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80270aa:	b10b      	cbz	r3, 80270b0 <__sflush_r+0x44>
 80270ac:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80270ae:	1ad2      	subs	r2, r2, r3
 80270b0:	2300      	movs	r3, #0
 80270b2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80270b4:	6a21      	ldr	r1, [r4, #32]
 80270b6:	4628      	mov	r0, r5
 80270b8:	47b0      	blx	r6
 80270ba:	1c43      	adds	r3, r0, #1
 80270bc:	89a3      	ldrh	r3, [r4, #12]
 80270be:	d106      	bne.n	80270ce <__sflush_r+0x62>
 80270c0:	6829      	ldr	r1, [r5, #0]
 80270c2:	291d      	cmp	r1, #29
 80270c4:	d82b      	bhi.n	802711e <__sflush_r+0xb2>
 80270c6:	4a2a      	ldr	r2, [pc, #168]	@ (8027170 <__sflush_r+0x104>)
 80270c8:	40ca      	lsrs	r2, r1
 80270ca:	07d6      	lsls	r6, r2, #31
 80270cc:	d527      	bpl.n	802711e <__sflush_r+0xb2>
 80270ce:	2200      	movs	r2, #0
 80270d0:	6062      	str	r2, [r4, #4]
 80270d2:	04d9      	lsls	r1, r3, #19
 80270d4:	6922      	ldr	r2, [r4, #16]
 80270d6:	6022      	str	r2, [r4, #0]
 80270d8:	d504      	bpl.n	80270e4 <__sflush_r+0x78>
 80270da:	1c42      	adds	r2, r0, #1
 80270dc:	d101      	bne.n	80270e2 <__sflush_r+0x76>
 80270de:	682b      	ldr	r3, [r5, #0]
 80270e0:	b903      	cbnz	r3, 80270e4 <__sflush_r+0x78>
 80270e2:	6560      	str	r0, [r4, #84]	@ 0x54
 80270e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80270e6:	602f      	str	r7, [r5, #0]
 80270e8:	b1b9      	cbz	r1, 802711a <__sflush_r+0xae>
 80270ea:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80270ee:	4299      	cmp	r1, r3
 80270f0:	d002      	beq.n	80270f8 <__sflush_r+0x8c>
 80270f2:	4628      	mov	r0, r5
 80270f4:	f001 fa1e 	bl	8028534 <_free_r>
 80270f8:	2300      	movs	r3, #0
 80270fa:	6363      	str	r3, [r4, #52]	@ 0x34
 80270fc:	e00d      	b.n	802711a <__sflush_r+0xae>
 80270fe:	2301      	movs	r3, #1
 8027100:	4628      	mov	r0, r5
 8027102:	47b0      	blx	r6
 8027104:	4602      	mov	r2, r0
 8027106:	1c50      	adds	r0, r2, #1
 8027108:	d1c9      	bne.n	802709e <__sflush_r+0x32>
 802710a:	682b      	ldr	r3, [r5, #0]
 802710c:	2b00      	cmp	r3, #0
 802710e:	d0c6      	beq.n	802709e <__sflush_r+0x32>
 8027110:	2b1d      	cmp	r3, #29
 8027112:	d001      	beq.n	8027118 <__sflush_r+0xac>
 8027114:	2b16      	cmp	r3, #22
 8027116:	d11e      	bne.n	8027156 <__sflush_r+0xea>
 8027118:	602f      	str	r7, [r5, #0]
 802711a:	2000      	movs	r0, #0
 802711c:	e022      	b.n	8027164 <__sflush_r+0xf8>
 802711e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8027122:	b21b      	sxth	r3, r3
 8027124:	e01b      	b.n	802715e <__sflush_r+0xf2>
 8027126:	690f      	ldr	r7, [r1, #16]
 8027128:	2f00      	cmp	r7, #0
 802712a:	d0f6      	beq.n	802711a <__sflush_r+0xae>
 802712c:	0793      	lsls	r3, r2, #30
 802712e:	680e      	ldr	r6, [r1, #0]
 8027130:	bf08      	it	eq
 8027132:	694b      	ldreq	r3, [r1, #20]
 8027134:	600f      	str	r7, [r1, #0]
 8027136:	bf18      	it	ne
 8027138:	2300      	movne	r3, #0
 802713a:	eba6 0807 	sub.w	r8, r6, r7
 802713e:	608b      	str	r3, [r1, #8]
 8027140:	f1b8 0f00 	cmp.w	r8, #0
 8027144:	dde9      	ble.n	802711a <__sflush_r+0xae>
 8027146:	6a21      	ldr	r1, [r4, #32]
 8027148:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 802714a:	4643      	mov	r3, r8
 802714c:	463a      	mov	r2, r7
 802714e:	4628      	mov	r0, r5
 8027150:	47b0      	blx	r6
 8027152:	2800      	cmp	r0, #0
 8027154:	dc08      	bgt.n	8027168 <__sflush_r+0xfc>
 8027156:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802715a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802715e:	81a3      	strh	r3, [r4, #12]
 8027160:	f04f 30ff 	mov.w	r0, #4294967295
 8027164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8027168:	4407      	add	r7, r0
 802716a:	eba8 0800 	sub.w	r8, r8, r0
 802716e:	e7e7      	b.n	8027140 <__sflush_r+0xd4>
 8027170:	20400001 	.word	0x20400001

08027174 <_fflush_r>:
 8027174:	b538      	push	{r3, r4, r5, lr}
 8027176:	690b      	ldr	r3, [r1, #16]
 8027178:	4605      	mov	r5, r0
 802717a:	460c      	mov	r4, r1
 802717c:	b913      	cbnz	r3, 8027184 <_fflush_r+0x10>
 802717e:	2500      	movs	r5, #0
 8027180:	4628      	mov	r0, r5
 8027182:	bd38      	pop	{r3, r4, r5, pc}
 8027184:	b118      	cbz	r0, 802718e <_fflush_r+0x1a>
 8027186:	6a03      	ldr	r3, [r0, #32]
 8027188:	b90b      	cbnz	r3, 802718e <_fflush_r+0x1a>
 802718a:	f000 f8a7 	bl	80272dc <__sinit>
 802718e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8027192:	2b00      	cmp	r3, #0
 8027194:	d0f3      	beq.n	802717e <_fflush_r+0xa>
 8027196:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8027198:	07d0      	lsls	r0, r2, #31
 802719a:	d404      	bmi.n	80271a6 <_fflush_r+0x32>
 802719c:	0599      	lsls	r1, r3, #22
 802719e:	d402      	bmi.n	80271a6 <_fflush_r+0x32>
 80271a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80271a2:	f000 fbc0 	bl	8027926 <__retarget_lock_acquire_recursive>
 80271a6:	4628      	mov	r0, r5
 80271a8:	4621      	mov	r1, r4
 80271aa:	f7ff ff5f 	bl	802706c <__sflush_r>
 80271ae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80271b0:	07da      	lsls	r2, r3, #31
 80271b2:	4605      	mov	r5, r0
 80271b4:	d4e4      	bmi.n	8027180 <_fflush_r+0xc>
 80271b6:	89a3      	ldrh	r3, [r4, #12]
 80271b8:	059b      	lsls	r3, r3, #22
 80271ba:	d4e1      	bmi.n	8027180 <_fflush_r+0xc>
 80271bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80271be:	f000 fbb3 	bl	8027928 <__retarget_lock_release_recursive>
 80271c2:	e7dd      	b.n	8027180 <_fflush_r+0xc>

080271c4 <std>:
 80271c4:	2300      	movs	r3, #0
 80271c6:	b510      	push	{r4, lr}
 80271c8:	4604      	mov	r4, r0
 80271ca:	e9c0 3300 	strd	r3, r3, [r0]
 80271ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80271d2:	6083      	str	r3, [r0, #8]
 80271d4:	8181      	strh	r1, [r0, #12]
 80271d6:	6643      	str	r3, [r0, #100]	@ 0x64
 80271d8:	81c2      	strh	r2, [r0, #14]
 80271da:	6183      	str	r3, [r0, #24]
 80271dc:	4619      	mov	r1, r3
 80271de:	2208      	movs	r2, #8
 80271e0:	305c      	adds	r0, #92	@ 0x5c
 80271e2:	f000 fa71 	bl	80276c8 <memset>
 80271e6:	4b0d      	ldr	r3, [pc, #52]	@ (802721c <std+0x58>)
 80271e8:	6263      	str	r3, [r4, #36]	@ 0x24
 80271ea:	4b0d      	ldr	r3, [pc, #52]	@ (8027220 <std+0x5c>)
 80271ec:	62a3      	str	r3, [r4, #40]	@ 0x28
 80271ee:	4b0d      	ldr	r3, [pc, #52]	@ (8027224 <std+0x60>)
 80271f0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80271f2:	4b0d      	ldr	r3, [pc, #52]	@ (8027228 <std+0x64>)
 80271f4:	6323      	str	r3, [r4, #48]	@ 0x30
 80271f6:	4b0d      	ldr	r3, [pc, #52]	@ (802722c <std+0x68>)
 80271f8:	6224      	str	r4, [r4, #32]
 80271fa:	429c      	cmp	r4, r3
 80271fc:	d006      	beq.n	802720c <std+0x48>
 80271fe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8027202:	4294      	cmp	r4, r2
 8027204:	d002      	beq.n	802720c <std+0x48>
 8027206:	33d0      	adds	r3, #208	@ 0xd0
 8027208:	429c      	cmp	r4, r3
 802720a:	d105      	bne.n	8027218 <std+0x54>
 802720c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8027210:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8027214:	f000 bb86 	b.w	8027924 <__retarget_lock_init_recursive>
 8027218:	bd10      	pop	{r4, pc}
 802721a:	bf00      	nop
 802721c:	080274c5 	.word	0x080274c5
 8027220:	080274e7 	.word	0x080274e7
 8027224:	0802751f 	.word	0x0802751f
 8027228:	08027543 	.word	0x08027543
 802722c:	24005730 	.word	0x24005730

08027230 <stdio_exit_handler>:
 8027230:	4a02      	ldr	r2, [pc, #8]	@ (802723c <stdio_exit_handler+0xc>)
 8027232:	4903      	ldr	r1, [pc, #12]	@ (8027240 <stdio_exit_handler+0x10>)
 8027234:	4803      	ldr	r0, [pc, #12]	@ (8027244 <stdio_exit_handler+0x14>)
 8027236:	f000 b87b 	b.w	8027330 <_fwalk_sglue>
 802723a:	bf00      	nop
 802723c:	24000828 	.word	0x24000828
 8027240:	08027175 	.word	0x08027175
 8027244:	240009a4 	.word	0x240009a4

08027248 <cleanup_stdio>:
 8027248:	6841      	ldr	r1, [r0, #4]
 802724a:	4b0c      	ldr	r3, [pc, #48]	@ (802727c <cleanup_stdio+0x34>)
 802724c:	4299      	cmp	r1, r3
 802724e:	b510      	push	{r4, lr}
 8027250:	4604      	mov	r4, r0
 8027252:	d001      	beq.n	8027258 <cleanup_stdio+0x10>
 8027254:	f7ff ff8e 	bl	8027174 <_fflush_r>
 8027258:	68a1      	ldr	r1, [r4, #8]
 802725a:	4b09      	ldr	r3, [pc, #36]	@ (8027280 <cleanup_stdio+0x38>)
 802725c:	4299      	cmp	r1, r3
 802725e:	d002      	beq.n	8027266 <cleanup_stdio+0x1e>
 8027260:	4620      	mov	r0, r4
 8027262:	f7ff ff87 	bl	8027174 <_fflush_r>
 8027266:	68e1      	ldr	r1, [r4, #12]
 8027268:	4b06      	ldr	r3, [pc, #24]	@ (8027284 <cleanup_stdio+0x3c>)
 802726a:	4299      	cmp	r1, r3
 802726c:	d004      	beq.n	8027278 <cleanup_stdio+0x30>
 802726e:	4620      	mov	r0, r4
 8027270:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8027274:	f7ff bf7e 	b.w	8027174 <_fflush_r>
 8027278:	bd10      	pop	{r4, pc}
 802727a:	bf00      	nop
 802727c:	24005730 	.word	0x24005730
 8027280:	24005798 	.word	0x24005798
 8027284:	24005800 	.word	0x24005800

08027288 <global_stdio_init.part.0>:
 8027288:	b510      	push	{r4, lr}
 802728a:	4b0b      	ldr	r3, [pc, #44]	@ (80272b8 <global_stdio_init.part.0+0x30>)
 802728c:	4c0b      	ldr	r4, [pc, #44]	@ (80272bc <global_stdio_init.part.0+0x34>)
 802728e:	4a0c      	ldr	r2, [pc, #48]	@ (80272c0 <global_stdio_init.part.0+0x38>)
 8027290:	601a      	str	r2, [r3, #0]
 8027292:	4620      	mov	r0, r4
 8027294:	2200      	movs	r2, #0
 8027296:	2104      	movs	r1, #4
 8027298:	f7ff ff94 	bl	80271c4 <std>
 802729c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80272a0:	2201      	movs	r2, #1
 80272a2:	2109      	movs	r1, #9
 80272a4:	f7ff ff8e 	bl	80271c4 <std>
 80272a8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80272ac:	2202      	movs	r2, #2
 80272ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80272b2:	2112      	movs	r1, #18
 80272b4:	f7ff bf86 	b.w	80271c4 <std>
 80272b8:	24005868 	.word	0x24005868
 80272bc:	24005730 	.word	0x24005730
 80272c0:	08027231 	.word	0x08027231

080272c4 <__sfp_lock_acquire>:
 80272c4:	4801      	ldr	r0, [pc, #4]	@ (80272cc <__sfp_lock_acquire+0x8>)
 80272c6:	f000 bb2e 	b.w	8027926 <__retarget_lock_acquire_recursive>
 80272ca:	bf00      	nop
 80272cc:	24005871 	.word	0x24005871

080272d0 <__sfp_lock_release>:
 80272d0:	4801      	ldr	r0, [pc, #4]	@ (80272d8 <__sfp_lock_release+0x8>)
 80272d2:	f000 bb29 	b.w	8027928 <__retarget_lock_release_recursive>
 80272d6:	bf00      	nop
 80272d8:	24005871 	.word	0x24005871

080272dc <__sinit>:
 80272dc:	b510      	push	{r4, lr}
 80272de:	4604      	mov	r4, r0
 80272e0:	f7ff fff0 	bl	80272c4 <__sfp_lock_acquire>
 80272e4:	6a23      	ldr	r3, [r4, #32]
 80272e6:	b11b      	cbz	r3, 80272f0 <__sinit+0x14>
 80272e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80272ec:	f7ff bff0 	b.w	80272d0 <__sfp_lock_release>
 80272f0:	4b04      	ldr	r3, [pc, #16]	@ (8027304 <__sinit+0x28>)
 80272f2:	6223      	str	r3, [r4, #32]
 80272f4:	4b04      	ldr	r3, [pc, #16]	@ (8027308 <__sinit+0x2c>)
 80272f6:	681b      	ldr	r3, [r3, #0]
 80272f8:	2b00      	cmp	r3, #0
 80272fa:	d1f5      	bne.n	80272e8 <__sinit+0xc>
 80272fc:	f7ff ffc4 	bl	8027288 <global_stdio_init.part.0>
 8027300:	e7f2      	b.n	80272e8 <__sinit+0xc>
 8027302:	bf00      	nop
 8027304:	08027249 	.word	0x08027249
 8027308:	24005868 	.word	0x24005868

0802730c <fiprintf>:
 802730c:	b40e      	push	{r1, r2, r3}
 802730e:	b503      	push	{r0, r1, lr}
 8027310:	4601      	mov	r1, r0
 8027312:	ab03      	add	r3, sp, #12
 8027314:	4805      	ldr	r0, [pc, #20]	@ (802732c <fiprintf+0x20>)
 8027316:	f853 2b04 	ldr.w	r2, [r3], #4
 802731a:	6800      	ldr	r0, [r0, #0]
 802731c:	9301      	str	r3, [sp, #4]
 802731e:	f002 f97d 	bl	802961c <_vfiprintf_r>
 8027322:	b002      	add	sp, #8
 8027324:	f85d eb04 	ldr.w	lr, [sp], #4
 8027328:	b003      	add	sp, #12
 802732a:	4770      	bx	lr
 802732c:	240009a0 	.word	0x240009a0

08027330 <_fwalk_sglue>:
 8027330:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8027334:	4607      	mov	r7, r0
 8027336:	4688      	mov	r8, r1
 8027338:	4614      	mov	r4, r2
 802733a:	2600      	movs	r6, #0
 802733c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8027340:	f1b9 0901 	subs.w	r9, r9, #1
 8027344:	d505      	bpl.n	8027352 <_fwalk_sglue+0x22>
 8027346:	6824      	ldr	r4, [r4, #0]
 8027348:	2c00      	cmp	r4, #0
 802734a:	d1f7      	bne.n	802733c <_fwalk_sglue+0xc>
 802734c:	4630      	mov	r0, r6
 802734e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8027352:	89ab      	ldrh	r3, [r5, #12]
 8027354:	2b01      	cmp	r3, #1
 8027356:	d907      	bls.n	8027368 <_fwalk_sglue+0x38>
 8027358:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802735c:	3301      	adds	r3, #1
 802735e:	d003      	beq.n	8027368 <_fwalk_sglue+0x38>
 8027360:	4629      	mov	r1, r5
 8027362:	4638      	mov	r0, r7
 8027364:	47c0      	blx	r8
 8027366:	4306      	orrs	r6, r0
 8027368:	3568      	adds	r5, #104	@ 0x68
 802736a:	e7e9      	b.n	8027340 <_fwalk_sglue+0x10>

0802736c <iprintf>:
 802736c:	b40f      	push	{r0, r1, r2, r3}
 802736e:	b507      	push	{r0, r1, r2, lr}
 8027370:	4906      	ldr	r1, [pc, #24]	@ (802738c <iprintf+0x20>)
 8027372:	ab04      	add	r3, sp, #16
 8027374:	6808      	ldr	r0, [r1, #0]
 8027376:	f853 2b04 	ldr.w	r2, [r3], #4
 802737a:	6881      	ldr	r1, [r0, #8]
 802737c:	9301      	str	r3, [sp, #4]
 802737e:	f002 f94d 	bl	802961c <_vfiprintf_r>
 8027382:	b003      	add	sp, #12
 8027384:	f85d eb04 	ldr.w	lr, [sp], #4
 8027388:	b004      	add	sp, #16
 802738a:	4770      	bx	lr
 802738c:	240009a0 	.word	0x240009a0

08027390 <_putc_r>:
 8027390:	b570      	push	{r4, r5, r6, lr}
 8027392:	460d      	mov	r5, r1
 8027394:	4614      	mov	r4, r2
 8027396:	4606      	mov	r6, r0
 8027398:	b118      	cbz	r0, 80273a2 <_putc_r+0x12>
 802739a:	6a03      	ldr	r3, [r0, #32]
 802739c:	b90b      	cbnz	r3, 80273a2 <_putc_r+0x12>
 802739e:	f7ff ff9d 	bl	80272dc <__sinit>
 80273a2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80273a4:	07d8      	lsls	r0, r3, #31
 80273a6:	d405      	bmi.n	80273b4 <_putc_r+0x24>
 80273a8:	89a3      	ldrh	r3, [r4, #12]
 80273aa:	0599      	lsls	r1, r3, #22
 80273ac:	d402      	bmi.n	80273b4 <_putc_r+0x24>
 80273ae:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80273b0:	f000 fab9 	bl	8027926 <__retarget_lock_acquire_recursive>
 80273b4:	68a3      	ldr	r3, [r4, #8]
 80273b6:	3b01      	subs	r3, #1
 80273b8:	2b00      	cmp	r3, #0
 80273ba:	60a3      	str	r3, [r4, #8]
 80273bc:	da05      	bge.n	80273ca <_putc_r+0x3a>
 80273be:	69a2      	ldr	r2, [r4, #24]
 80273c0:	4293      	cmp	r3, r2
 80273c2:	db12      	blt.n	80273ea <_putc_r+0x5a>
 80273c4:	b2eb      	uxtb	r3, r5
 80273c6:	2b0a      	cmp	r3, #10
 80273c8:	d00f      	beq.n	80273ea <_putc_r+0x5a>
 80273ca:	6823      	ldr	r3, [r4, #0]
 80273cc:	1c5a      	adds	r2, r3, #1
 80273ce:	6022      	str	r2, [r4, #0]
 80273d0:	701d      	strb	r5, [r3, #0]
 80273d2:	b2ed      	uxtb	r5, r5
 80273d4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80273d6:	07da      	lsls	r2, r3, #31
 80273d8:	d405      	bmi.n	80273e6 <_putc_r+0x56>
 80273da:	89a3      	ldrh	r3, [r4, #12]
 80273dc:	059b      	lsls	r3, r3, #22
 80273de:	d402      	bmi.n	80273e6 <_putc_r+0x56>
 80273e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80273e2:	f000 faa1 	bl	8027928 <__retarget_lock_release_recursive>
 80273e6:	4628      	mov	r0, r5
 80273e8:	bd70      	pop	{r4, r5, r6, pc}
 80273ea:	4629      	mov	r1, r5
 80273ec:	4622      	mov	r2, r4
 80273ee:	4630      	mov	r0, r6
 80273f0:	f000 f8ab 	bl	802754a <__swbuf_r>
 80273f4:	4605      	mov	r5, r0
 80273f6:	e7ed      	b.n	80273d4 <_putc_r+0x44>

080273f8 <putchar>:
 80273f8:	4b02      	ldr	r3, [pc, #8]	@ (8027404 <putchar+0xc>)
 80273fa:	4601      	mov	r1, r0
 80273fc:	6818      	ldr	r0, [r3, #0]
 80273fe:	6882      	ldr	r2, [r0, #8]
 8027400:	f7ff bfc6 	b.w	8027390 <_putc_r>
 8027404:	240009a0 	.word	0x240009a0

08027408 <_puts_r>:
 8027408:	6a03      	ldr	r3, [r0, #32]
 802740a:	b570      	push	{r4, r5, r6, lr}
 802740c:	6884      	ldr	r4, [r0, #8]
 802740e:	4605      	mov	r5, r0
 8027410:	460e      	mov	r6, r1
 8027412:	b90b      	cbnz	r3, 8027418 <_puts_r+0x10>
 8027414:	f7ff ff62 	bl	80272dc <__sinit>
 8027418:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802741a:	07db      	lsls	r3, r3, #31
 802741c:	d405      	bmi.n	802742a <_puts_r+0x22>
 802741e:	89a3      	ldrh	r3, [r4, #12]
 8027420:	0598      	lsls	r0, r3, #22
 8027422:	d402      	bmi.n	802742a <_puts_r+0x22>
 8027424:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8027426:	f000 fa7e 	bl	8027926 <__retarget_lock_acquire_recursive>
 802742a:	89a3      	ldrh	r3, [r4, #12]
 802742c:	0719      	lsls	r1, r3, #28
 802742e:	d502      	bpl.n	8027436 <_puts_r+0x2e>
 8027430:	6923      	ldr	r3, [r4, #16]
 8027432:	2b00      	cmp	r3, #0
 8027434:	d135      	bne.n	80274a2 <_puts_r+0x9a>
 8027436:	4621      	mov	r1, r4
 8027438:	4628      	mov	r0, r5
 802743a:	f000 f8c5 	bl	80275c8 <__swsetup_r>
 802743e:	b380      	cbz	r0, 80274a2 <_puts_r+0x9a>
 8027440:	f04f 35ff 	mov.w	r5, #4294967295
 8027444:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8027446:	07da      	lsls	r2, r3, #31
 8027448:	d405      	bmi.n	8027456 <_puts_r+0x4e>
 802744a:	89a3      	ldrh	r3, [r4, #12]
 802744c:	059b      	lsls	r3, r3, #22
 802744e:	d402      	bmi.n	8027456 <_puts_r+0x4e>
 8027450:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8027452:	f000 fa69 	bl	8027928 <__retarget_lock_release_recursive>
 8027456:	4628      	mov	r0, r5
 8027458:	bd70      	pop	{r4, r5, r6, pc}
 802745a:	2b00      	cmp	r3, #0
 802745c:	da04      	bge.n	8027468 <_puts_r+0x60>
 802745e:	69a2      	ldr	r2, [r4, #24]
 8027460:	429a      	cmp	r2, r3
 8027462:	dc17      	bgt.n	8027494 <_puts_r+0x8c>
 8027464:	290a      	cmp	r1, #10
 8027466:	d015      	beq.n	8027494 <_puts_r+0x8c>
 8027468:	6823      	ldr	r3, [r4, #0]
 802746a:	1c5a      	adds	r2, r3, #1
 802746c:	6022      	str	r2, [r4, #0]
 802746e:	7019      	strb	r1, [r3, #0]
 8027470:	68a3      	ldr	r3, [r4, #8]
 8027472:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8027476:	3b01      	subs	r3, #1
 8027478:	60a3      	str	r3, [r4, #8]
 802747a:	2900      	cmp	r1, #0
 802747c:	d1ed      	bne.n	802745a <_puts_r+0x52>
 802747e:	2b00      	cmp	r3, #0
 8027480:	da11      	bge.n	80274a6 <_puts_r+0x9e>
 8027482:	4622      	mov	r2, r4
 8027484:	210a      	movs	r1, #10
 8027486:	4628      	mov	r0, r5
 8027488:	f000 f85f 	bl	802754a <__swbuf_r>
 802748c:	3001      	adds	r0, #1
 802748e:	d0d7      	beq.n	8027440 <_puts_r+0x38>
 8027490:	250a      	movs	r5, #10
 8027492:	e7d7      	b.n	8027444 <_puts_r+0x3c>
 8027494:	4622      	mov	r2, r4
 8027496:	4628      	mov	r0, r5
 8027498:	f000 f857 	bl	802754a <__swbuf_r>
 802749c:	3001      	adds	r0, #1
 802749e:	d1e7      	bne.n	8027470 <_puts_r+0x68>
 80274a0:	e7ce      	b.n	8027440 <_puts_r+0x38>
 80274a2:	3e01      	subs	r6, #1
 80274a4:	e7e4      	b.n	8027470 <_puts_r+0x68>
 80274a6:	6823      	ldr	r3, [r4, #0]
 80274a8:	1c5a      	adds	r2, r3, #1
 80274aa:	6022      	str	r2, [r4, #0]
 80274ac:	220a      	movs	r2, #10
 80274ae:	701a      	strb	r2, [r3, #0]
 80274b0:	e7ee      	b.n	8027490 <_puts_r+0x88>
	...

080274b4 <puts>:
 80274b4:	4b02      	ldr	r3, [pc, #8]	@ (80274c0 <puts+0xc>)
 80274b6:	4601      	mov	r1, r0
 80274b8:	6818      	ldr	r0, [r3, #0]
 80274ba:	f7ff bfa5 	b.w	8027408 <_puts_r>
 80274be:	bf00      	nop
 80274c0:	240009a0 	.word	0x240009a0

080274c4 <__sread>:
 80274c4:	b510      	push	{r4, lr}
 80274c6:	460c      	mov	r4, r1
 80274c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80274cc:	f000 f9b8 	bl	8027840 <_read_r>
 80274d0:	2800      	cmp	r0, #0
 80274d2:	bfab      	itete	ge
 80274d4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80274d6:	89a3      	ldrhlt	r3, [r4, #12]
 80274d8:	181b      	addge	r3, r3, r0
 80274da:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80274de:	bfac      	ite	ge
 80274e0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80274e2:	81a3      	strhlt	r3, [r4, #12]
 80274e4:	bd10      	pop	{r4, pc}

080274e6 <__swrite>:
 80274e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80274ea:	461f      	mov	r7, r3
 80274ec:	898b      	ldrh	r3, [r1, #12]
 80274ee:	05db      	lsls	r3, r3, #23
 80274f0:	4605      	mov	r5, r0
 80274f2:	460c      	mov	r4, r1
 80274f4:	4616      	mov	r6, r2
 80274f6:	d505      	bpl.n	8027504 <__swrite+0x1e>
 80274f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80274fc:	2302      	movs	r3, #2
 80274fe:	2200      	movs	r2, #0
 8027500:	f000 f98c 	bl	802781c <_lseek_r>
 8027504:	89a3      	ldrh	r3, [r4, #12]
 8027506:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802750a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 802750e:	81a3      	strh	r3, [r4, #12]
 8027510:	4632      	mov	r2, r6
 8027512:	463b      	mov	r3, r7
 8027514:	4628      	mov	r0, r5
 8027516:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802751a:	f000 b9c7 	b.w	80278ac <_write_r>

0802751e <__sseek>:
 802751e:	b510      	push	{r4, lr}
 8027520:	460c      	mov	r4, r1
 8027522:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8027526:	f000 f979 	bl	802781c <_lseek_r>
 802752a:	1c43      	adds	r3, r0, #1
 802752c:	89a3      	ldrh	r3, [r4, #12]
 802752e:	bf15      	itete	ne
 8027530:	6560      	strne	r0, [r4, #84]	@ 0x54
 8027532:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8027536:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 802753a:	81a3      	strheq	r3, [r4, #12]
 802753c:	bf18      	it	ne
 802753e:	81a3      	strhne	r3, [r4, #12]
 8027540:	bd10      	pop	{r4, pc}

08027542 <__sclose>:
 8027542:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8027546:	f000 b959 	b.w	80277fc <_close_r>

0802754a <__swbuf_r>:
 802754a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802754c:	460e      	mov	r6, r1
 802754e:	4614      	mov	r4, r2
 8027550:	4605      	mov	r5, r0
 8027552:	b118      	cbz	r0, 802755c <__swbuf_r+0x12>
 8027554:	6a03      	ldr	r3, [r0, #32]
 8027556:	b90b      	cbnz	r3, 802755c <__swbuf_r+0x12>
 8027558:	f7ff fec0 	bl	80272dc <__sinit>
 802755c:	69a3      	ldr	r3, [r4, #24]
 802755e:	60a3      	str	r3, [r4, #8]
 8027560:	89a3      	ldrh	r3, [r4, #12]
 8027562:	071a      	lsls	r2, r3, #28
 8027564:	d501      	bpl.n	802756a <__swbuf_r+0x20>
 8027566:	6923      	ldr	r3, [r4, #16]
 8027568:	b943      	cbnz	r3, 802757c <__swbuf_r+0x32>
 802756a:	4621      	mov	r1, r4
 802756c:	4628      	mov	r0, r5
 802756e:	f000 f82b 	bl	80275c8 <__swsetup_r>
 8027572:	b118      	cbz	r0, 802757c <__swbuf_r+0x32>
 8027574:	f04f 37ff 	mov.w	r7, #4294967295
 8027578:	4638      	mov	r0, r7
 802757a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802757c:	6823      	ldr	r3, [r4, #0]
 802757e:	6922      	ldr	r2, [r4, #16]
 8027580:	1a98      	subs	r0, r3, r2
 8027582:	6963      	ldr	r3, [r4, #20]
 8027584:	b2f6      	uxtb	r6, r6
 8027586:	4283      	cmp	r3, r0
 8027588:	4637      	mov	r7, r6
 802758a:	dc05      	bgt.n	8027598 <__swbuf_r+0x4e>
 802758c:	4621      	mov	r1, r4
 802758e:	4628      	mov	r0, r5
 8027590:	f7ff fdf0 	bl	8027174 <_fflush_r>
 8027594:	2800      	cmp	r0, #0
 8027596:	d1ed      	bne.n	8027574 <__swbuf_r+0x2a>
 8027598:	68a3      	ldr	r3, [r4, #8]
 802759a:	3b01      	subs	r3, #1
 802759c:	60a3      	str	r3, [r4, #8]
 802759e:	6823      	ldr	r3, [r4, #0]
 80275a0:	1c5a      	adds	r2, r3, #1
 80275a2:	6022      	str	r2, [r4, #0]
 80275a4:	701e      	strb	r6, [r3, #0]
 80275a6:	6962      	ldr	r2, [r4, #20]
 80275a8:	1c43      	adds	r3, r0, #1
 80275aa:	429a      	cmp	r2, r3
 80275ac:	d004      	beq.n	80275b8 <__swbuf_r+0x6e>
 80275ae:	89a3      	ldrh	r3, [r4, #12]
 80275b0:	07db      	lsls	r3, r3, #31
 80275b2:	d5e1      	bpl.n	8027578 <__swbuf_r+0x2e>
 80275b4:	2e0a      	cmp	r6, #10
 80275b6:	d1df      	bne.n	8027578 <__swbuf_r+0x2e>
 80275b8:	4621      	mov	r1, r4
 80275ba:	4628      	mov	r0, r5
 80275bc:	f7ff fdda 	bl	8027174 <_fflush_r>
 80275c0:	2800      	cmp	r0, #0
 80275c2:	d0d9      	beq.n	8027578 <__swbuf_r+0x2e>
 80275c4:	e7d6      	b.n	8027574 <__swbuf_r+0x2a>
	...

080275c8 <__swsetup_r>:
 80275c8:	b538      	push	{r3, r4, r5, lr}
 80275ca:	4b29      	ldr	r3, [pc, #164]	@ (8027670 <__swsetup_r+0xa8>)
 80275cc:	4605      	mov	r5, r0
 80275ce:	6818      	ldr	r0, [r3, #0]
 80275d0:	460c      	mov	r4, r1
 80275d2:	b118      	cbz	r0, 80275dc <__swsetup_r+0x14>
 80275d4:	6a03      	ldr	r3, [r0, #32]
 80275d6:	b90b      	cbnz	r3, 80275dc <__swsetup_r+0x14>
 80275d8:	f7ff fe80 	bl	80272dc <__sinit>
 80275dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80275e0:	0719      	lsls	r1, r3, #28
 80275e2:	d422      	bmi.n	802762a <__swsetup_r+0x62>
 80275e4:	06da      	lsls	r2, r3, #27
 80275e6:	d407      	bmi.n	80275f8 <__swsetup_r+0x30>
 80275e8:	2209      	movs	r2, #9
 80275ea:	602a      	str	r2, [r5, #0]
 80275ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80275f0:	81a3      	strh	r3, [r4, #12]
 80275f2:	f04f 30ff 	mov.w	r0, #4294967295
 80275f6:	e033      	b.n	8027660 <__swsetup_r+0x98>
 80275f8:	0758      	lsls	r0, r3, #29
 80275fa:	d512      	bpl.n	8027622 <__swsetup_r+0x5a>
 80275fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80275fe:	b141      	cbz	r1, 8027612 <__swsetup_r+0x4a>
 8027600:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8027604:	4299      	cmp	r1, r3
 8027606:	d002      	beq.n	802760e <__swsetup_r+0x46>
 8027608:	4628      	mov	r0, r5
 802760a:	f000 ff93 	bl	8028534 <_free_r>
 802760e:	2300      	movs	r3, #0
 8027610:	6363      	str	r3, [r4, #52]	@ 0x34
 8027612:	89a3      	ldrh	r3, [r4, #12]
 8027614:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8027618:	81a3      	strh	r3, [r4, #12]
 802761a:	2300      	movs	r3, #0
 802761c:	6063      	str	r3, [r4, #4]
 802761e:	6923      	ldr	r3, [r4, #16]
 8027620:	6023      	str	r3, [r4, #0]
 8027622:	89a3      	ldrh	r3, [r4, #12]
 8027624:	f043 0308 	orr.w	r3, r3, #8
 8027628:	81a3      	strh	r3, [r4, #12]
 802762a:	6923      	ldr	r3, [r4, #16]
 802762c:	b94b      	cbnz	r3, 8027642 <__swsetup_r+0x7a>
 802762e:	89a3      	ldrh	r3, [r4, #12]
 8027630:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8027634:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8027638:	d003      	beq.n	8027642 <__swsetup_r+0x7a>
 802763a:	4621      	mov	r1, r4
 802763c:	4628      	mov	r0, r5
 802763e:	f002 f92b 	bl	8029898 <__smakebuf_r>
 8027642:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8027646:	f013 0201 	ands.w	r2, r3, #1
 802764a:	d00a      	beq.n	8027662 <__swsetup_r+0x9a>
 802764c:	2200      	movs	r2, #0
 802764e:	60a2      	str	r2, [r4, #8]
 8027650:	6962      	ldr	r2, [r4, #20]
 8027652:	4252      	negs	r2, r2
 8027654:	61a2      	str	r2, [r4, #24]
 8027656:	6922      	ldr	r2, [r4, #16]
 8027658:	b942      	cbnz	r2, 802766c <__swsetup_r+0xa4>
 802765a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 802765e:	d1c5      	bne.n	80275ec <__swsetup_r+0x24>
 8027660:	bd38      	pop	{r3, r4, r5, pc}
 8027662:	0799      	lsls	r1, r3, #30
 8027664:	bf58      	it	pl
 8027666:	6962      	ldrpl	r2, [r4, #20]
 8027668:	60a2      	str	r2, [r4, #8]
 802766a:	e7f4      	b.n	8027656 <__swsetup_r+0x8e>
 802766c:	2000      	movs	r0, #0
 802766e:	e7f7      	b.n	8027660 <__swsetup_r+0x98>
 8027670:	240009a0 	.word	0x240009a0

08027674 <memcmp>:
 8027674:	b510      	push	{r4, lr}
 8027676:	3901      	subs	r1, #1
 8027678:	4402      	add	r2, r0
 802767a:	4290      	cmp	r0, r2
 802767c:	d101      	bne.n	8027682 <memcmp+0xe>
 802767e:	2000      	movs	r0, #0
 8027680:	e005      	b.n	802768e <memcmp+0x1a>
 8027682:	7803      	ldrb	r3, [r0, #0]
 8027684:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8027688:	42a3      	cmp	r3, r4
 802768a:	d001      	beq.n	8027690 <memcmp+0x1c>
 802768c:	1b18      	subs	r0, r3, r4
 802768e:	bd10      	pop	{r4, pc}
 8027690:	3001      	adds	r0, #1
 8027692:	e7f2      	b.n	802767a <memcmp+0x6>

08027694 <memmove>:
 8027694:	4288      	cmp	r0, r1
 8027696:	b510      	push	{r4, lr}
 8027698:	eb01 0402 	add.w	r4, r1, r2
 802769c:	d902      	bls.n	80276a4 <memmove+0x10>
 802769e:	4284      	cmp	r4, r0
 80276a0:	4623      	mov	r3, r4
 80276a2:	d807      	bhi.n	80276b4 <memmove+0x20>
 80276a4:	1e43      	subs	r3, r0, #1
 80276a6:	42a1      	cmp	r1, r4
 80276a8:	d008      	beq.n	80276bc <memmove+0x28>
 80276aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80276ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 80276b2:	e7f8      	b.n	80276a6 <memmove+0x12>
 80276b4:	4402      	add	r2, r0
 80276b6:	4601      	mov	r1, r0
 80276b8:	428a      	cmp	r2, r1
 80276ba:	d100      	bne.n	80276be <memmove+0x2a>
 80276bc:	bd10      	pop	{r4, pc}
 80276be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80276c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80276c6:	e7f7      	b.n	80276b8 <memmove+0x24>

080276c8 <memset>:
 80276c8:	4402      	add	r2, r0
 80276ca:	4603      	mov	r3, r0
 80276cc:	4293      	cmp	r3, r2
 80276ce:	d100      	bne.n	80276d2 <memset+0xa>
 80276d0:	4770      	bx	lr
 80276d2:	f803 1b01 	strb.w	r1, [r3], #1
 80276d6:	e7f9      	b.n	80276cc <memset+0x4>

080276d8 <strchr>:
 80276d8:	b2c9      	uxtb	r1, r1
 80276da:	4603      	mov	r3, r0
 80276dc:	4618      	mov	r0, r3
 80276de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80276e2:	b112      	cbz	r2, 80276ea <strchr+0x12>
 80276e4:	428a      	cmp	r2, r1
 80276e6:	d1f9      	bne.n	80276dc <strchr+0x4>
 80276e8:	4770      	bx	lr
 80276ea:	2900      	cmp	r1, #0
 80276ec:	bf18      	it	ne
 80276ee:	2000      	movne	r0, #0
 80276f0:	4770      	bx	lr

080276f2 <strncmp>:
 80276f2:	b510      	push	{r4, lr}
 80276f4:	b16a      	cbz	r2, 8027712 <strncmp+0x20>
 80276f6:	3901      	subs	r1, #1
 80276f8:	1884      	adds	r4, r0, r2
 80276fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80276fe:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8027702:	429a      	cmp	r2, r3
 8027704:	d103      	bne.n	802770e <strncmp+0x1c>
 8027706:	42a0      	cmp	r0, r4
 8027708:	d001      	beq.n	802770e <strncmp+0x1c>
 802770a:	2a00      	cmp	r2, #0
 802770c:	d1f5      	bne.n	80276fa <strncmp+0x8>
 802770e:	1ad0      	subs	r0, r2, r3
 8027710:	bd10      	pop	{r4, pc}
 8027712:	4610      	mov	r0, r2
 8027714:	e7fc      	b.n	8027710 <strncmp+0x1e>

08027716 <strncpy>:
 8027716:	b510      	push	{r4, lr}
 8027718:	3901      	subs	r1, #1
 802771a:	4603      	mov	r3, r0
 802771c:	b132      	cbz	r2, 802772c <strncpy+0x16>
 802771e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8027722:	f803 4b01 	strb.w	r4, [r3], #1
 8027726:	3a01      	subs	r2, #1
 8027728:	2c00      	cmp	r4, #0
 802772a:	d1f7      	bne.n	802771c <strncpy+0x6>
 802772c:	441a      	add	r2, r3
 802772e:	2100      	movs	r1, #0
 8027730:	4293      	cmp	r3, r2
 8027732:	d100      	bne.n	8027736 <strncpy+0x20>
 8027734:	bd10      	pop	{r4, pc}
 8027736:	f803 1b01 	strb.w	r1, [r3], #1
 802773a:	e7f9      	b.n	8027730 <strncpy+0x1a>

0802773c <strrchr>:
 802773c:	b538      	push	{r3, r4, r5, lr}
 802773e:	f011 04ff 	ands.w	r4, r1, #255	@ 0xff
 8027742:	4603      	mov	r3, r0
 8027744:	d10e      	bne.n	8027764 <strrchr+0x28>
 8027746:	4621      	mov	r1, r4
 8027748:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802774c:	f7ff bfc4 	b.w	80276d8 <strchr>
 8027750:	1c43      	adds	r3, r0, #1
 8027752:	4605      	mov	r5, r0
 8027754:	4621      	mov	r1, r4
 8027756:	4618      	mov	r0, r3
 8027758:	f7ff ffbe 	bl	80276d8 <strchr>
 802775c:	2800      	cmp	r0, #0
 802775e:	d1f7      	bne.n	8027750 <strrchr+0x14>
 8027760:	4628      	mov	r0, r5
 8027762:	bd38      	pop	{r3, r4, r5, pc}
 8027764:	2500      	movs	r5, #0
 8027766:	e7f5      	b.n	8027754 <strrchr+0x18>

08027768 <strstr>:
 8027768:	780a      	ldrb	r2, [r1, #0]
 802776a:	b570      	push	{r4, r5, r6, lr}
 802776c:	b96a      	cbnz	r2, 802778a <strstr+0x22>
 802776e:	bd70      	pop	{r4, r5, r6, pc}
 8027770:	429a      	cmp	r2, r3
 8027772:	d109      	bne.n	8027788 <strstr+0x20>
 8027774:	460c      	mov	r4, r1
 8027776:	4605      	mov	r5, r0
 8027778:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 802777c:	2b00      	cmp	r3, #0
 802777e:	d0f6      	beq.n	802776e <strstr+0x6>
 8027780:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8027784:	429e      	cmp	r6, r3
 8027786:	d0f7      	beq.n	8027778 <strstr+0x10>
 8027788:	3001      	adds	r0, #1
 802778a:	7803      	ldrb	r3, [r0, #0]
 802778c:	2b00      	cmp	r3, #0
 802778e:	d1ef      	bne.n	8027770 <strstr+0x8>
 8027790:	4618      	mov	r0, r3
 8027792:	e7ec      	b.n	802776e <strstr+0x6>

08027794 <_raise_r>:
 8027794:	291f      	cmp	r1, #31
 8027796:	b538      	push	{r3, r4, r5, lr}
 8027798:	4605      	mov	r5, r0
 802779a:	460c      	mov	r4, r1
 802779c:	d904      	bls.n	80277a8 <_raise_r+0x14>
 802779e:	2316      	movs	r3, #22
 80277a0:	6003      	str	r3, [r0, #0]
 80277a2:	f04f 30ff 	mov.w	r0, #4294967295
 80277a6:	bd38      	pop	{r3, r4, r5, pc}
 80277a8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80277aa:	b112      	cbz	r2, 80277b2 <_raise_r+0x1e>
 80277ac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80277b0:	b94b      	cbnz	r3, 80277c6 <_raise_r+0x32>
 80277b2:	4628      	mov	r0, r5
 80277b4:	f000 f868 	bl	8027888 <_getpid_r>
 80277b8:	4622      	mov	r2, r4
 80277ba:	4601      	mov	r1, r0
 80277bc:	4628      	mov	r0, r5
 80277be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80277c2:	f000 b84f 	b.w	8027864 <_kill_r>
 80277c6:	2b01      	cmp	r3, #1
 80277c8:	d00a      	beq.n	80277e0 <_raise_r+0x4c>
 80277ca:	1c59      	adds	r1, r3, #1
 80277cc:	d103      	bne.n	80277d6 <_raise_r+0x42>
 80277ce:	2316      	movs	r3, #22
 80277d0:	6003      	str	r3, [r0, #0]
 80277d2:	2001      	movs	r0, #1
 80277d4:	e7e7      	b.n	80277a6 <_raise_r+0x12>
 80277d6:	2100      	movs	r1, #0
 80277d8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80277dc:	4620      	mov	r0, r4
 80277de:	4798      	blx	r3
 80277e0:	2000      	movs	r0, #0
 80277e2:	e7e0      	b.n	80277a6 <_raise_r+0x12>

080277e4 <raise>:
 80277e4:	4b02      	ldr	r3, [pc, #8]	@ (80277f0 <raise+0xc>)
 80277e6:	4601      	mov	r1, r0
 80277e8:	6818      	ldr	r0, [r3, #0]
 80277ea:	f7ff bfd3 	b.w	8027794 <_raise_r>
 80277ee:	bf00      	nop
 80277f0:	240009a0 	.word	0x240009a0

080277f4 <_localeconv_r>:
 80277f4:	4800      	ldr	r0, [pc, #0]	@ (80277f8 <_localeconv_r+0x4>)
 80277f6:	4770      	bx	lr
 80277f8:	24000924 	.word	0x24000924

080277fc <_close_r>:
 80277fc:	b538      	push	{r3, r4, r5, lr}
 80277fe:	4d06      	ldr	r5, [pc, #24]	@ (8027818 <_close_r+0x1c>)
 8027800:	2300      	movs	r3, #0
 8027802:	4604      	mov	r4, r0
 8027804:	4608      	mov	r0, r1
 8027806:	602b      	str	r3, [r5, #0]
 8027808:	f7da fab9 	bl	8001d7e <_close>
 802780c:	1c43      	adds	r3, r0, #1
 802780e:	d102      	bne.n	8027816 <_close_r+0x1a>
 8027810:	682b      	ldr	r3, [r5, #0]
 8027812:	b103      	cbz	r3, 8027816 <_close_r+0x1a>
 8027814:	6023      	str	r3, [r4, #0]
 8027816:	bd38      	pop	{r3, r4, r5, pc}
 8027818:	2400586c 	.word	0x2400586c

0802781c <_lseek_r>:
 802781c:	b538      	push	{r3, r4, r5, lr}
 802781e:	4d07      	ldr	r5, [pc, #28]	@ (802783c <_lseek_r+0x20>)
 8027820:	4604      	mov	r4, r0
 8027822:	4608      	mov	r0, r1
 8027824:	4611      	mov	r1, r2
 8027826:	2200      	movs	r2, #0
 8027828:	602a      	str	r2, [r5, #0]
 802782a:	461a      	mov	r2, r3
 802782c:	f7da face 	bl	8001dcc <_lseek>
 8027830:	1c43      	adds	r3, r0, #1
 8027832:	d102      	bne.n	802783a <_lseek_r+0x1e>
 8027834:	682b      	ldr	r3, [r5, #0]
 8027836:	b103      	cbz	r3, 802783a <_lseek_r+0x1e>
 8027838:	6023      	str	r3, [r4, #0]
 802783a:	bd38      	pop	{r3, r4, r5, pc}
 802783c:	2400586c 	.word	0x2400586c

08027840 <_read_r>:
 8027840:	b538      	push	{r3, r4, r5, lr}
 8027842:	4d07      	ldr	r5, [pc, #28]	@ (8027860 <_read_r+0x20>)
 8027844:	4604      	mov	r4, r0
 8027846:	4608      	mov	r0, r1
 8027848:	4611      	mov	r1, r2
 802784a:	2200      	movs	r2, #0
 802784c:	602a      	str	r2, [r5, #0]
 802784e:	461a      	mov	r2, r3
 8027850:	f7da fa78 	bl	8001d44 <_read>
 8027854:	1c43      	adds	r3, r0, #1
 8027856:	d102      	bne.n	802785e <_read_r+0x1e>
 8027858:	682b      	ldr	r3, [r5, #0]
 802785a:	b103      	cbz	r3, 802785e <_read_r+0x1e>
 802785c:	6023      	str	r3, [r4, #0]
 802785e:	bd38      	pop	{r3, r4, r5, pc}
 8027860:	2400586c 	.word	0x2400586c

08027864 <_kill_r>:
 8027864:	b538      	push	{r3, r4, r5, lr}
 8027866:	4d07      	ldr	r5, [pc, #28]	@ (8027884 <_kill_r+0x20>)
 8027868:	2300      	movs	r3, #0
 802786a:	4604      	mov	r4, r0
 802786c:	4608      	mov	r0, r1
 802786e:	4611      	mov	r1, r2
 8027870:	602b      	str	r3, [r5, #0]
 8027872:	f7da fa4c 	bl	8001d0e <_kill>
 8027876:	1c43      	adds	r3, r0, #1
 8027878:	d102      	bne.n	8027880 <_kill_r+0x1c>
 802787a:	682b      	ldr	r3, [r5, #0]
 802787c:	b103      	cbz	r3, 8027880 <_kill_r+0x1c>
 802787e:	6023      	str	r3, [r4, #0]
 8027880:	bd38      	pop	{r3, r4, r5, pc}
 8027882:	bf00      	nop
 8027884:	2400586c 	.word	0x2400586c

08027888 <_getpid_r>:
 8027888:	f7da ba39 	b.w	8001cfe <_getpid>

0802788c <_sbrk_r>:
 802788c:	b538      	push	{r3, r4, r5, lr}
 802788e:	4d06      	ldr	r5, [pc, #24]	@ (80278a8 <_sbrk_r+0x1c>)
 8027890:	2300      	movs	r3, #0
 8027892:	4604      	mov	r4, r0
 8027894:	4608      	mov	r0, r1
 8027896:	602b      	str	r3, [r5, #0]
 8027898:	f7da faa6 	bl	8001de8 <_sbrk>
 802789c:	1c43      	adds	r3, r0, #1
 802789e:	d102      	bne.n	80278a6 <_sbrk_r+0x1a>
 80278a0:	682b      	ldr	r3, [r5, #0]
 80278a2:	b103      	cbz	r3, 80278a6 <_sbrk_r+0x1a>
 80278a4:	6023      	str	r3, [r4, #0]
 80278a6:	bd38      	pop	{r3, r4, r5, pc}
 80278a8:	2400586c 	.word	0x2400586c

080278ac <_write_r>:
 80278ac:	b538      	push	{r3, r4, r5, lr}
 80278ae:	4d07      	ldr	r5, [pc, #28]	@ (80278cc <_write_r+0x20>)
 80278b0:	4604      	mov	r4, r0
 80278b2:	4608      	mov	r0, r1
 80278b4:	4611      	mov	r1, r2
 80278b6:	2200      	movs	r2, #0
 80278b8:	602a      	str	r2, [r5, #0]
 80278ba:	461a      	mov	r2, r3
 80278bc:	f7d9 f956 	bl	8000b6c <_write>
 80278c0:	1c43      	adds	r3, r0, #1
 80278c2:	d102      	bne.n	80278ca <_write_r+0x1e>
 80278c4:	682b      	ldr	r3, [r5, #0]
 80278c6:	b103      	cbz	r3, 80278ca <_write_r+0x1e>
 80278c8:	6023      	str	r3, [r4, #0]
 80278ca:	bd38      	pop	{r3, r4, r5, pc}
 80278cc:	2400586c 	.word	0x2400586c

080278d0 <__errno>:
 80278d0:	4b01      	ldr	r3, [pc, #4]	@ (80278d8 <__errno+0x8>)
 80278d2:	6818      	ldr	r0, [r3, #0]
 80278d4:	4770      	bx	lr
 80278d6:	bf00      	nop
 80278d8:	240009a0 	.word	0x240009a0

080278dc <__libc_init_array>:
 80278dc:	b570      	push	{r4, r5, r6, lr}
 80278de:	4d0d      	ldr	r5, [pc, #52]	@ (8027914 <__libc_init_array+0x38>)
 80278e0:	4c0d      	ldr	r4, [pc, #52]	@ (8027918 <__libc_init_array+0x3c>)
 80278e2:	1b64      	subs	r4, r4, r5
 80278e4:	10a4      	asrs	r4, r4, #2
 80278e6:	2600      	movs	r6, #0
 80278e8:	42a6      	cmp	r6, r4
 80278ea:	d109      	bne.n	8027900 <__libc_init_array+0x24>
 80278ec:	4d0b      	ldr	r5, [pc, #44]	@ (802791c <__libc_init_array+0x40>)
 80278ee:	4c0c      	ldr	r4, [pc, #48]	@ (8027920 <__libc_init_array+0x44>)
 80278f0:	f002 f830 	bl	8029954 <_init>
 80278f4:	1b64      	subs	r4, r4, r5
 80278f6:	10a4      	asrs	r4, r4, #2
 80278f8:	2600      	movs	r6, #0
 80278fa:	42a6      	cmp	r6, r4
 80278fc:	d105      	bne.n	802790a <__libc_init_array+0x2e>
 80278fe:	bd70      	pop	{r4, r5, r6, pc}
 8027900:	f855 3b04 	ldr.w	r3, [r5], #4
 8027904:	4798      	blx	r3
 8027906:	3601      	adds	r6, #1
 8027908:	e7ee      	b.n	80278e8 <__libc_init_array+0xc>
 802790a:	f855 3b04 	ldr.w	r3, [r5], #4
 802790e:	4798      	blx	r3
 8027910:	3601      	adds	r6, #1
 8027912:	e7f2      	b.n	80278fa <__libc_init_array+0x1e>
 8027914:	0803b330 	.word	0x0803b330
 8027918:	0803b330 	.word	0x0803b330
 802791c:	0803b330 	.word	0x0803b330
 8027920:	0803b334 	.word	0x0803b334

08027924 <__retarget_lock_init_recursive>:
 8027924:	4770      	bx	lr

08027926 <__retarget_lock_acquire_recursive>:
 8027926:	4770      	bx	lr

08027928 <__retarget_lock_release_recursive>:
 8027928:	4770      	bx	lr

0802792a <strcpy>:
 802792a:	4603      	mov	r3, r0
 802792c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8027930:	f803 2b01 	strb.w	r2, [r3], #1
 8027934:	2a00      	cmp	r2, #0
 8027936:	d1f9      	bne.n	802792c <strcpy+0x2>
 8027938:	4770      	bx	lr

0802793a <memcpy>:
 802793a:	440a      	add	r2, r1
 802793c:	4291      	cmp	r1, r2
 802793e:	f100 33ff 	add.w	r3, r0, #4294967295
 8027942:	d100      	bne.n	8027946 <memcpy+0xc>
 8027944:	4770      	bx	lr
 8027946:	b510      	push	{r4, lr}
 8027948:	f811 4b01 	ldrb.w	r4, [r1], #1
 802794c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8027950:	4291      	cmp	r1, r2
 8027952:	d1f9      	bne.n	8027948 <memcpy+0xe>
 8027954:	bd10      	pop	{r4, pc}
	...

08027958 <nan>:
 8027958:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8027960 <nan+0x8>
 802795c:	4770      	bx	lr
 802795e:	bf00      	nop
 8027960:	00000000 	.word	0x00000000
 8027964:	7ff80000 	.word	0x7ff80000

08027968 <quorem>:
 8027968:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802796c:	6903      	ldr	r3, [r0, #16]
 802796e:	690c      	ldr	r4, [r1, #16]
 8027970:	42a3      	cmp	r3, r4
 8027972:	4607      	mov	r7, r0
 8027974:	db7e      	blt.n	8027a74 <quorem+0x10c>
 8027976:	3c01      	subs	r4, #1
 8027978:	f101 0814 	add.w	r8, r1, #20
 802797c:	00a3      	lsls	r3, r4, #2
 802797e:	f100 0514 	add.w	r5, r0, #20
 8027982:	9300      	str	r3, [sp, #0]
 8027984:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8027988:	9301      	str	r3, [sp, #4]
 802798a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 802798e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8027992:	3301      	adds	r3, #1
 8027994:	429a      	cmp	r2, r3
 8027996:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 802799a:	fbb2 f6f3 	udiv	r6, r2, r3
 802799e:	d32e      	bcc.n	80279fe <quorem+0x96>
 80279a0:	f04f 0a00 	mov.w	sl, #0
 80279a4:	46c4      	mov	ip, r8
 80279a6:	46ae      	mov	lr, r5
 80279a8:	46d3      	mov	fp, sl
 80279aa:	f85c 3b04 	ldr.w	r3, [ip], #4
 80279ae:	b298      	uxth	r0, r3
 80279b0:	fb06 a000 	mla	r0, r6, r0, sl
 80279b4:	0c02      	lsrs	r2, r0, #16
 80279b6:	0c1b      	lsrs	r3, r3, #16
 80279b8:	fb06 2303 	mla	r3, r6, r3, r2
 80279bc:	f8de 2000 	ldr.w	r2, [lr]
 80279c0:	b280      	uxth	r0, r0
 80279c2:	b292      	uxth	r2, r2
 80279c4:	1a12      	subs	r2, r2, r0
 80279c6:	445a      	add	r2, fp
 80279c8:	f8de 0000 	ldr.w	r0, [lr]
 80279cc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80279d0:	b29b      	uxth	r3, r3
 80279d2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80279d6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80279da:	b292      	uxth	r2, r2
 80279dc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80279e0:	45e1      	cmp	r9, ip
 80279e2:	f84e 2b04 	str.w	r2, [lr], #4
 80279e6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80279ea:	d2de      	bcs.n	80279aa <quorem+0x42>
 80279ec:	9b00      	ldr	r3, [sp, #0]
 80279ee:	58eb      	ldr	r3, [r5, r3]
 80279f0:	b92b      	cbnz	r3, 80279fe <quorem+0x96>
 80279f2:	9b01      	ldr	r3, [sp, #4]
 80279f4:	3b04      	subs	r3, #4
 80279f6:	429d      	cmp	r5, r3
 80279f8:	461a      	mov	r2, r3
 80279fa:	d32f      	bcc.n	8027a5c <quorem+0xf4>
 80279fc:	613c      	str	r4, [r7, #16]
 80279fe:	4638      	mov	r0, r7
 8027a00:	f001 fbea 	bl	80291d8 <__mcmp>
 8027a04:	2800      	cmp	r0, #0
 8027a06:	db25      	blt.n	8027a54 <quorem+0xec>
 8027a08:	4629      	mov	r1, r5
 8027a0a:	2000      	movs	r0, #0
 8027a0c:	f858 2b04 	ldr.w	r2, [r8], #4
 8027a10:	f8d1 c000 	ldr.w	ip, [r1]
 8027a14:	fa1f fe82 	uxth.w	lr, r2
 8027a18:	fa1f f38c 	uxth.w	r3, ip
 8027a1c:	eba3 030e 	sub.w	r3, r3, lr
 8027a20:	4403      	add	r3, r0
 8027a22:	0c12      	lsrs	r2, r2, #16
 8027a24:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8027a28:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8027a2c:	b29b      	uxth	r3, r3
 8027a2e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8027a32:	45c1      	cmp	r9, r8
 8027a34:	f841 3b04 	str.w	r3, [r1], #4
 8027a38:	ea4f 4022 	mov.w	r0, r2, asr #16
 8027a3c:	d2e6      	bcs.n	8027a0c <quorem+0xa4>
 8027a3e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8027a42:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8027a46:	b922      	cbnz	r2, 8027a52 <quorem+0xea>
 8027a48:	3b04      	subs	r3, #4
 8027a4a:	429d      	cmp	r5, r3
 8027a4c:	461a      	mov	r2, r3
 8027a4e:	d30b      	bcc.n	8027a68 <quorem+0x100>
 8027a50:	613c      	str	r4, [r7, #16]
 8027a52:	3601      	adds	r6, #1
 8027a54:	4630      	mov	r0, r6
 8027a56:	b003      	add	sp, #12
 8027a58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027a5c:	6812      	ldr	r2, [r2, #0]
 8027a5e:	3b04      	subs	r3, #4
 8027a60:	2a00      	cmp	r2, #0
 8027a62:	d1cb      	bne.n	80279fc <quorem+0x94>
 8027a64:	3c01      	subs	r4, #1
 8027a66:	e7c6      	b.n	80279f6 <quorem+0x8e>
 8027a68:	6812      	ldr	r2, [r2, #0]
 8027a6a:	3b04      	subs	r3, #4
 8027a6c:	2a00      	cmp	r2, #0
 8027a6e:	d1ef      	bne.n	8027a50 <quorem+0xe8>
 8027a70:	3c01      	subs	r4, #1
 8027a72:	e7ea      	b.n	8027a4a <quorem+0xe2>
 8027a74:	2000      	movs	r0, #0
 8027a76:	e7ee      	b.n	8027a56 <quorem+0xee>

08027a78 <_dtoa_r>:
 8027a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027a7c:	ed2d 8b02 	vpush	{d8}
 8027a80:	69c7      	ldr	r7, [r0, #28]
 8027a82:	b091      	sub	sp, #68	@ 0x44
 8027a84:	ed8d 0b02 	vstr	d0, [sp, #8]
 8027a88:	ec55 4b10 	vmov	r4, r5, d0
 8027a8c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8027a8e:	9107      	str	r1, [sp, #28]
 8027a90:	4681      	mov	r9, r0
 8027a92:	9209      	str	r2, [sp, #36]	@ 0x24
 8027a94:	930d      	str	r3, [sp, #52]	@ 0x34
 8027a96:	b97f      	cbnz	r7, 8027ab8 <_dtoa_r+0x40>
 8027a98:	2010      	movs	r0, #16
 8027a9a:	f7fd ff83 	bl	80259a4 <malloc>
 8027a9e:	4602      	mov	r2, r0
 8027aa0:	f8c9 001c 	str.w	r0, [r9, #28]
 8027aa4:	b920      	cbnz	r0, 8027ab0 <_dtoa_r+0x38>
 8027aa6:	4ba0      	ldr	r3, [pc, #640]	@ (8027d28 <_dtoa_r+0x2b0>)
 8027aa8:	21ef      	movs	r1, #239	@ 0xef
 8027aaa:	48a0      	ldr	r0, [pc, #640]	@ (8027d2c <_dtoa_r+0x2b4>)
 8027aac:	f7fd ff38 	bl	8025920 <__assert_func>
 8027ab0:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8027ab4:	6007      	str	r7, [r0, #0]
 8027ab6:	60c7      	str	r7, [r0, #12]
 8027ab8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8027abc:	6819      	ldr	r1, [r3, #0]
 8027abe:	b159      	cbz	r1, 8027ad8 <_dtoa_r+0x60>
 8027ac0:	685a      	ldr	r2, [r3, #4]
 8027ac2:	604a      	str	r2, [r1, #4]
 8027ac4:	2301      	movs	r3, #1
 8027ac6:	4093      	lsls	r3, r2
 8027ac8:	608b      	str	r3, [r1, #8]
 8027aca:	4648      	mov	r0, r9
 8027acc:	f001 f908 	bl	8028ce0 <_Bfree>
 8027ad0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8027ad4:	2200      	movs	r2, #0
 8027ad6:	601a      	str	r2, [r3, #0]
 8027ad8:	1e2b      	subs	r3, r5, #0
 8027ada:	bfbb      	ittet	lt
 8027adc:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8027ae0:	9303      	strlt	r3, [sp, #12]
 8027ae2:	2300      	movge	r3, #0
 8027ae4:	2201      	movlt	r2, #1
 8027ae6:	bfac      	ite	ge
 8027ae8:	6033      	strge	r3, [r6, #0]
 8027aea:	6032      	strlt	r2, [r6, #0]
 8027aec:	4b90      	ldr	r3, [pc, #576]	@ (8027d30 <_dtoa_r+0x2b8>)
 8027aee:	9e03      	ldr	r6, [sp, #12]
 8027af0:	43b3      	bics	r3, r6
 8027af2:	d110      	bne.n	8027b16 <_dtoa_r+0x9e>
 8027af4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8027af6:	f242 730f 	movw	r3, #9999	@ 0x270f
 8027afa:	6013      	str	r3, [r2, #0]
 8027afc:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8027b00:	4323      	orrs	r3, r4
 8027b02:	f000 84e6 	beq.w	80284d2 <_dtoa_r+0xa5a>
 8027b06:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8027b08:	4f8a      	ldr	r7, [pc, #552]	@ (8027d34 <_dtoa_r+0x2bc>)
 8027b0a:	2b00      	cmp	r3, #0
 8027b0c:	f000 84e8 	beq.w	80284e0 <_dtoa_r+0xa68>
 8027b10:	1cfb      	adds	r3, r7, #3
 8027b12:	f000 bce3 	b.w	80284dc <_dtoa_r+0xa64>
 8027b16:	ed9d 8b02 	vldr	d8, [sp, #8]
 8027b1a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8027b1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027b22:	d10a      	bne.n	8027b3a <_dtoa_r+0xc2>
 8027b24:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8027b26:	2301      	movs	r3, #1
 8027b28:	6013      	str	r3, [r2, #0]
 8027b2a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8027b2c:	b113      	cbz	r3, 8027b34 <_dtoa_r+0xbc>
 8027b2e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8027b30:	4b81      	ldr	r3, [pc, #516]	@ (8027d38 <_dtoa_r+0x2c0>)
 8027b32:	6013      	str	r3, [r2, #0]
 8027b34:	4f81      	ldr	r7, [pc, #516]	@ (8027d3c <_dtoa_r+0x2c4>)
 8027b36:	f000 bcd3 	b.w	80284e0 <_dtoa_r+0xa68>
 8027b3a:	aa0e      	add	r2, sp, #56	@ 0x38
 8027b3c:	a90f      	add	r1, sp, #60	@ 0x3c
 8027b3e:	4648      	mov	r0, r9
 8027b40:	eeb0 0b48 	vmov.f64	d0, d8
 8027b44:	f001 fc68 	bl	8029418 <__d2b>
 8027b48:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8027b4c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8027b4e:	9001      	str	r0, [sp, #4]
 8027b50:	2b00      	cmp	r3, #0
 8027b52:	d045      	beq.n	8027be0 <_dtoa_r+0x168>
 8027b54:	eeb0 7b48 	vmov.f64	d7, d8
 8027b58:	ee18 1a90 	vmov	r1, s17
 8027b5c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8027b60:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8027b64:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8027b68:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8027b6c:	2500      	movs	r5, #0
 8027b6e:	ee07 1a90 	vmov	s15, r1
 8027b72:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8027b76:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8027d10 <_dtoa_r+0x298>
 8027b7a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8027b7e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8027d18 <_dtoa_r+0x2a0>
 8027b82:	eea7 6b05 	vfma.f64	d6, d7, d5
 8027b86:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8027d20 <_dtoa_r+0x2a8>
 8027b8a:	ee07 3a90 	vmov	s15, r3
 8027b8e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8027b92:	eeb0 7b46 	vmov.f64	d7, d6
 8027b96:	eea4 7b05 	vfma.f64	d7, d4, d5
 8027b9a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8027b9e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8027ba2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027ba6:	ee16 8a90 	vmov	r8, s13
 8027baa:	d508      	bpl.n	8027bbe <_dtoa_r+0x146>
 8027bac:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8027bb0:	eeb4 6b47 	vcmp.f64	d6, d7
 8027bb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027bb8:	bf18      	it	ne
 8027bba:	f108 38ff 	addne.w	r8, r8, #4294967295
 8027bbe:	f1b8 0f16 	cmp.w	r8, #22
 8027bc2:	d82b      	bhi.n	8027c1c <_dtoa_r+0x1a4>
 8027bc4:	495e      	ldr	r1, [pc, #376]	@ (8027d40 <_dtoa_r+0x2c8>)
 8027bc6:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8027bca:	ed91 7b00 	vldr	d7, [r1]
 8027bce:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8027bd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027bd6:	d501      	bpl.n	8027bdc <_dtoa_r+0x164>
 8027bd8:	f108 38ff 	add.w	r8, r8, #4294967295
 8027bdc:	2100      	movs	r1, #0
 8027bde:	e01e      	b.n	8027c1e <_dtoa_r+0x1a6>
 8027be0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8027be2:	4413      	add	r3, r2
 8027be4:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8027be8:	2920      	cmp	r1, #32
 8027bea:	bfc1      	itttt	gt
 8027bec:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8027bf0:	408e      	lslgt	r6, r1
 8027bf2:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8027bf6:	fa24 f101 	lsrgt.w	r1, r4, r1
 8027bfa:	bfd6      	itet	le
 8027bfc:	f1c1 0120 	rsble	r1, r1, #32
 8027c00:	4331      	orrgt	r1, r6
 8027c02:	fa04 f101 	lslle.w	r1, r4, r1
 8027c06:	ee07 1a90 	vmov	s15, r1
 8027c0a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8027c0e:	3b01      	subs	r3, #1
 8027c10:	ee17 1a90 	vmov	r1, s15
 8027c14:	2501      	movs	r5, #1
 8027c16:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8027c1a:	e7a8      	b.n	8027b6e <_dtoa_r+0xf6>
 8027c1c:	2101      	movs	r1, #1
 8027c1e:	1ad2      	subs	r2, r2, r3
 8027c20:	1e53      	subs	r3, r2, #1
 8027c22:	9306      	str	r3, [sp, #24]
 8027c24:	bf45      	ittet	mi
 8027c26:	f1c2 0301 	rsbmi	r3, r2, #1
 8027c2a:	9304      	strmi	r3, [sp, #16]
 8027c2c:	2300      	movpl	r3, #0
 8027c2e:	2300      	movmi	r3, #0
 8027c30:	bf4c      	ite	mi
 8027c32:	9306      	strmi	r3, [sp, #24]
 8027c34:	9304      	strpl	r3, [sp, #16]
 8027c36:	f1b8 0f00 	cmp.w	r8, #0
 8027c3a:	910c      	str	r1, [sp, #48]	@ 0x30
 8027c3c:	db18      	blt.n	8027c70 <_dtoa_r+0x1f8>
 8027c3e:	9b06      	ldr	r3, [sp, #24]
 8027c40:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8027c44:	4443      	add	r3, r8
 8027c46:	9306      	str	r3, [sp, #24]
 8027c48:	2300      	movs	r3, #0
 8027c4a:	9a07      	ldr	r2, [sp, #28]
 8027c4c:	2a09      	cmp	r2, #9
 8027c4e:	d845      	bhi.n	8027cdc <_dtoa_r+0x264>
 8027c50:	2a05      	cmp	r2, #5
 8027c52:	bfc4      	itt	gt
 8027c54:	3a04      	subgt	r2, #4
 8027c56:	9207      	strgt	r2, [sp, #28]
 8027c58:	9a07      	ldr	r2, [sp, #28]
 8027c5a:	f1a2 0202 	sub.w	r2, r2, #2
 8027c5e:	bfcc      	ite	gt
 8027c60:	2400      	movgt	r4, #0
 8027c62:	2401      	movle	r4, #1
 8027c64:	2a03      	cmp	r2, #3
 8027c66:	d844      	bhi.n	8027cf2 <_dtoa_r+0x27a>
 8027c68:	e8df f002 	tbb	[pc, r2]
 8027c6c:	0b173634 	.word	0x0b173634
 8027c70:	9b04      	ldr	r3, [sp, #16]
 8027c72:	2200      	movs	r2, #0
 8027c74:	eba3 0308 	sub.w	r3, r3, r8
 8027c78:	9304      	str	r3, [sp, #16]
 8027c7a:	920a      	str	r2, [sp, #40]	@ 0x28
 8027c7c:	f1c8 0300 	rsb	r3, r8, #0
 8027c80:	e7e3      	b.n	8027c4a <_dtoa_r+0x1d2>
 8027c82:	2201      	movs	r2, #1
 8027c84:	9208      	str	r2, [sp, #32]
 8027c86:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8027c88:	eb08 0b02 	add.w	fp, r8, r2
 8027c8c:	f10b 0a01 	add.w	sl, fp, #1
 8027c90:	4652      	mov	r2, sl
 8027c92:	2a01      	cmp	r2, #1
 8027c94:	bfb8      	it	lt
 8027c96:	2201      	movlt	r2, #1
 8027c98:	e006      	b.n	8027ca8 <_dtoa_r+0x230>
 8027c9a:	2201      	movs	r2, #1
 8027c9c:	9208      	str	r2, [sp, #32]
 8027c9e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8027ca0:	2a00      	cmp	r2, #0
 8027ca2:	dd29      	ble.n	8027cf8 <_dtoa_r+0x280>
 8027ca4:	4693      	mov	fp, r2
 8027ca6:	4692      	mov	sl, r2
 8027ca8:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8027cac:	2100      	movs	r1, #0
 8027cae:	2004      	movs	r0, #4
 8027cb0:	f100 0614 	add.w	r6, r0, #20
 8027cb4:	4296      	cmp	r6, r2
 8027cb6:	d926      	bls.n	8027d06 <_dtoa_r+0x28e>
 8027cb8:	6079      	str	r1, [r7, #4]
 8027cba:	4648      	mov	r0, r9
 8027cbc:	9305      	str	r3, [sp, #20]
 8027cbe:	f000 ffcf 	bl	8028c60 <_Balloc>
 8027cc2:	9b05      	ldr	r3, [sp, #20]
 8027cc4:	4607      	mov	r7, r0
 8027cc6:	2800      	cmp	r0, #0
 8027cc8:	d13e      	bne.n	8027d48 <_dtoa_r+0x2d0>
 8027cca:	4b1e      	ldr	r3, [pc, #120]	@ (8027d44 <_dtoa_r+0x2cc>)
 8027ccc:	4602      	mov	r2, r0
 8027cce:	f240 11af 	movw	r1, #431	@ 0x1af
 8027cd2:	e6ea      	b.n	8027aaa <_dtoa_r+0x32>
 8027cd4:	2200      	movs	r2, #0
 8027cd6:	e7e1      	b.n	8027c9c <_dtoa_r+0x224>
 8027cd8:	2200      	movs	r2, #0
 8027cda:	e7d3      	b.n	8027c84 <_dtoa_r+0x20c>
 8027cdc:	2401      	movs	r4, #1
 8027cde:	2200      	movs	r2, #0
 8027ce0:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8027ce4:	f04f 3bff 	mov.w	fp, #4294967295
 8027ce8:	2100      	movs	r1, #0
 8027cea:	46da      	mov	sl, fp
 8027cec:	2212      	movs	r2, #18
 8027cee:	9109      	str	r1, [sp, #36]	@ 0x24
 8027cf0:	e7da      	b.n	8027ca8 <_dtoa_r+0x230>
 8027cf2:	2201      	movs	r2, #1
 8027cf4:	9208      	str	r2, [sp, #32]
 8027cf6:	e7f5      	b.n	8027ce4 <_dtoa_r+0x26c>
 8027cf8:	f04f 0b01 	mov.w	fp, #1
 8027cfc:	46da      	mov	sl, fp
 8027cfe:	465a      	mov	r2, fp
 8027d00:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8027d04:	e7d0      	b.n	8027ca8 <_dtoa_r+0x230>
 8027d06:	3101      	adds	r1, #1
 8027d08:	0040      	lsls	r0, r0, #1
 8027d0a:	e7d1      	b.n	8027cb0 <_dtoa_r+0x238>
 8027d0c:	f3af 8000 	nop.w
 8027d10:	636f4361 	.word	0x636f4361
 8027d14:	3fd287a7 	.word	0x3fd287a7
 8027d18:	8b60c8b3 	.word	0x8b60c8b3
 8027d1c:	3fc68a28 	.word	0x3fc68a28
 8027d20:	509f79fb 	.word	0x509f79fb
 8027d24:	3fd34413 	.word	0x3fd34413
 8027d28:	0803aee6 	.word	0x0803aee6
 8027d2c:	0803afa0 	.word	0x0803afa0
 8027d30:	7ff00000 	.word	0x7ff00000
 8027d34:	0803af9c 	.word	0x0803af9c
 8027d38:	0803af68 	.word	0x0803af68
 8027d3c:	0803af67 	.word	0x0803af67
 8027d40:	0803b260 	.word	0x0803b260
 8027d44:	0803aff8 	.word	0x0803aff8
 8027d48:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8027d4c:	f1ba 0f0e 	cmp.w	sl, #14
 8027d50:	6010      	str	r0, [r2, #0]
 8027d52:	d86e      	bhi.n	8027e32 <_dtoa_r+0x3ba>
 8027d54:	2c00      	cmp	r4, #0
 8027d56:	d06c      	beq.n	8027e32 <_dtoa_r+0x3ba>
 8027d58:	f1b8 0f00 	cmp.w	r8, #0
 8027d5c:	f340 80b4 	ble.w	8027ec8 <_dtoa_r+0x450>
 8027d60:	4ac8      	ldr	r2, [pc, #800]	@ (8028084 <_dtoa_r+0x60c>)
 8027d62:	f008 010f 	and.w	r1, r8, #15
 8027d66:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8027d6a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8027d6e:	ed92 7b00 	vldr	d7, [r2]
 8027d72:	ea4f 1128 	mov.w	r1, r8, asr #4
 8027d76:	f000 809b 	beq.w	8027eb0 <_dtoa_r+0x438>
 8027d7a:	4ac3      	ldr	r2, [pc, #780]	@ (8028088 <_dtoa_r+0x610>)
 8027d7c:	ed92 6b08 	vldr	d6, [r2, #32]
 8027d80:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8027d84:	ed8d 6b02 	vstr	d6, [sp, #8]
 8027d88:	f001 010f 	and.w	r1, r1, #15
 8027d8c:	2203      	movs	r2, #3
 8027d8e:	48be      	ldr	r0, [pc, #760]	@ (8028088 <_dtoa_r+0x610>)
 8027d90:	2900      	cmp	r1, #0
 8027d92:	f040 808f 	bne.w	8027eb4 <_dtoa_r+0x43c>
 8027d96:	ed9d 6b02 	vldr	d6, [sp, #8]
 8027d9a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8027d9e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8027da2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8027da4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8027da8:	2900      	cmp	r1, #0
 8027daa:	f000 80b3 	beq.w	8027f14 <_dtoa_r+0x49c>
 8027dae:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8027db2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8027db6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027dba:	f140 80ab 	bpl.w	8027f14 <_dtoa_r+0x49c>
 8027dbe:	f1ba 0f00 	cmp.w	sl, #0
 8027dc2:	f000 80a7 	beq.w	8027f14 <_dtoa_r+0x49c>
 8027dc6:	f1bb 0f00 	cmp.w	fp, #0
 8027dca:	dd30      	ble.n	8027e2e <_dtoa_r+0x3b6>
 8027dcc:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8027dd0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8027dd4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8027dd8:	f108 31ff 	add.w	r1, r8, #4294967295
 8027ddc:	9105      	str	r1, [sp, #20]
 8027dde:	3201      	adds	r2, #1
 8027de0:	465c      	mov	r4, fp
 8027de2:	ed9d 6b02 	vldr	d6, [sp, #8]
 8027de6:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8027dea:	ee07 2a90 	vmov	s15, r2
 8027dee:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8027df2:	eea7 5b06 	vfma.f64	d5, d7, d6
 8027df6:	ee15 2a90 	vmov	r2, s11
 8027dfa:	ec51 0b15 	vmov	r0, r1, d5
 8027dfe:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8027e02:	2c00      	cmp	r4, #0
 8027e04:	f040 808a 	bne.w	8027f1c <_dtoa_r+0x4a4>
 8027e08:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8027e0c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8027e10:	ec41 0b17 	vmov	d7, r0, r1
 8027e14:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8027e18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027e1c:	f300 826a 	bgt.w	80282f4 <_dtoa_r+0x87c>
 8027e20:	eeb1 7b47 	vneg.f64	d7, d7
 8027e24:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8027e28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027e2c:	d423      	bmi.n	8027e76 <_dtoa_r+0x3fe>
 8027e2e:	ed8d 8b02 	vstr	d8, [sp, #8]
 8027e32:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8027e34:	2a00      	cmp	r2, #0
 8027e36:	f2c0 8129 	blt.w	802808c <_dtoa_r+0x614>
 8027e3a:	f1b8 0f0e 	cmp.w	r8, #14
 8027e3e:	f300 8125 	bgt.w	802808c <_dtoa_r+0x614>
 8027e42:	4b90      	ldr	r3, [pc, #576]	@ (8028084 <_dtoa_r+0x60c>)
 8027e44:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8027e48:	ed93 6b00 	vldr	d6, [r3]
 8027e4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027e4e:	2b00      	cmp	r3, #0
 8027e50:	f280 80c8 	bge.w	8027fe4 <_dtoa_r+0x56c>
 8027e54:	f1ba 0f00 	cmp.w	sl, #0
 8027e58:	f300 80c4 	bgt.w	8027fe4 <_dtoa_r+0x56c>
 8027e5c:	d10b      	bne.n	8027e76 <_dtoa_r+0x3fe>
 8027e5e:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8027e62:	ee26 6b07 	vmul.f64	d6, d6, d7
 8027e66:	ed9d 7b02 	vldr	d7, [sp, #8]
 8027e6a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8027e6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027e72:	f2c0 823c 	blt.w	80282ee <_dtoa_r+0x876>
 8027e76:	2400      	movs	r4, #0
 8027e78:	4625      	mov	r5, r4
 8027e7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027e7c:	43db      	mvns	r3, r3
 8027e7e:	9305      	str	r3, [sp, #20]
 8027e80:	463e      	mov	r6, r7
 8027e82:	f04f 0800 	mov.w	r8, #0
 8027e86:	4621      	mov	r1, r4
 8027e88:	4648      	mov	r0, r9
 8027e8a:	f000 ff29 	bl	8028ce0 <_Bfree>
 8027e8e:	2d00      	cmp	r5, #0
 8027e90:	f000 80a2 	beq.w	8027fd8 <_dtoa_r+0x560>
 8027e94:	f1b8 0f00 	cmp.w	r8, #0
 8027e98:	d005      	beq.n	8027ea6 <_dtoa_r+0x42e>
 8027e9a:	45a8      	cmp	r8, r5
 8027e9c:	d003      	beq.n	8027ea6 <_dtoa_r+0x42e>
 8027e9e:	4641      	mov	r1, r8
 8027ea0:	4648      	mov	r0, r9
 8027ea2:	f000 ff1d 	bl	8028ce0 <_Bfree>
 8027ea6:	4629      	mov	r1, r5
 8027ea8:	4648      	mov	r0, r9
 8027eaa:	f000 ff19 	bl	8028ce0 <_Bfree>
 8027eae:	e093      	b.n	8027fd8 <_dtoa_r+0x560>
 8027eb0:	2202      	movs	r2, #2
 8027eb2:	e76c      	b.n	8027d8e <_dtoa_r+0x316>
 8027eb4:	07cc      	lsls	r4, r1, #31
 8027eb6:	d504      	bpl.n	8027ec2 <_dtoa_r+0x44a>
 8027eb8:	ed90 6b00 	vldr	d6, [r0]
 8027ebc:	3201      	adds	r2, #1
 8027ebe:	ee27 7b06 	vmul.f64	d7, d7, d6
 8027ec2:	1049      	asrs	r1, r1, #1
 8027ec4:	3008      	adds	r0, #8
 8027ec6:	e763      	b.n	8027d90 <_dtoa_r+0x318>
 8027ec8:	d022      	beq.n	8027f10 <_dtoa_r+0x498>
 8027eca:	f1c8 0100 	rsb	r1, r8, #0
 8027ece:	4a6d      	ldr	r2, [pc, #436]	@ (8028084 <_dtoa_r+0x60c>)
 8027ed0:	f001 000f 	and.w	r0, r1, #15
 8027ed4:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8027ed8:	ed92 7b00 	vldr	d7, [r2]
 8027edc:	ee28 7b07 	vmul.f64	d7, d8, d7
 8027ee0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8027ee4:	4868      	ldr	r0, [pc, #416]	@ (8028088 <_dtoa_r+0x610>)
 8027ee6:	1109      	asrs	r1, r1, #4
 8027ee8:	2400      	movs	r4, #0
 8027eea:	2202      	movs	r2, #2
 8027eec:	b929      	cbnz	r1, 8027efa <_dtoa_r+0x482>
 8027eee:	2c00      	cmp	r4, #0
 8027ef0:	f43f af57 	beq.w	8027da2 <_dtoa_r+0x32a>
 8027ef4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8027ef8:	e753      	b.n	8027da2 <_dtoa_r+0x32a>
 8027efa:	07ce      	lsls	r6, r1, #31
 8027efc:	d505      	bpl.n	8027f0a <_dtoa_r+0x492>
 8027efe:	ed90 6b00 	vldr	d6, [r0]
 8027f02:	3201      	adds	r2, #1
 8027f04:	2401      	movs	r4, #1
 8027f06:	ee27 7b06 	vmul.f64	d7, d7, d6
 8027f0a:	1049      	asrs	r1, r1, #1
 8027f0c:	3008      	adds	r0, #8
 8027f0e:	e7ed      	b.n	8027eec <_dtoa_r+0x474>
 8027f10:	2202      	movs	r2, #2
 8027f12:	e746      	b.n	8027da2 <_dtoa_r+0x32a>
 8027f14:	f8cd 8014 	str.w	r8, [sp, #20]
 8027f18:	4654      	mov	r4, sl
 8027f1a:	e762      	b.n	8027de2 <_dtoa_r+0x36a>
 8027f1c:	4a59      	ldr	r2, [pc, #356]	@ (8028084 <_dtoa_r+0x60c>)
 8027f1e:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8027f22:	ed12 4b02 	vldr	d4, [r2, #-8]
 8027f26:	9a08      	ldr	r2, [sp, #32]
 8027f28:	ec41 0b17 	vmov	d7, r0, r1
 8027f2c:	443c      	add	r4, r7
 8027f2e:	b34a      	cbz	r2, 8027f84 <_dtoa_r+0x50c>
 8027f30:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8027f34:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8027f38:	463e      	mov	r6, r7
 8027f3a:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8027f3e:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8027f42:	ee35 7b47 	vsub.f64	d7, d5, d7
 8027f46:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8027f4a:	ee14 2a90 	vmov	r2, s9
 8027f4e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8027f52:	3230      	adds	r2, #48	@ 0x30
 8027f54:	ee36 6b45 	vsub.f64	d6, d6, d5
 8027f58:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8027f5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027f60:	f806 2b01 	strb.w	r2, [r6], #1
 8027f64:	d438      	bmi.n	8027fd8 <_dtoa_r+0x560>
 8027f66:	ee32 5b46 	vsub.f64	d5, d2, d6
 8027f6a:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8027f6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027f72:	d46e      	bmi.n	8028052 <_dtoa_r+0x5da>
 8027f74:	42a6      	cmp	r6, r4
 8027f76:	f43f af5a 	beq.w	8027e2e <_dtoa_r+0x3b6>
 8027f7a:	ee27 7b03 	vmul.f64	d7, d7, d3
 8027f7e:	ee26 6b03 	vmul.f64	d6, d6, d3
 8027f82:	e7e0      	b.n	8027f46 <_dtoa_r+0x4ce>
 8027f84:	4621      	mov	r1, r4
 8027f86:	463e      	mov	r6, r7
 8027f88:	ee27 7b04 	vmul.f64	d7, d7, d4
 8027f8c:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8027f90:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8027f94:	ee14 2a90 	vmov	r2, s9
 8027f98:	3230      	adds	r2, #48	@ 0x30
 8027f9a:	f806 2b01 	strb.w	r2, [r6], #1
 8027f9e:	42a6      	cmp	r6, r4
 8027fa0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8027fa4:	ee36 6b45 	vsub.f64	d6, d6, d5
 8027fa8:	d119      	bne.n	8027fde <_dtoa_r+0x566>
 8027faa:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8027fae:	ee37 4b05 	vadd.f64	d4, d7, d5
 8027fb2:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8027fb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027fba:	dc4a      	bgt.n	8028052 <_dtoa_r+0x5da>
 8027fbc:	ee35 5b47 	vsub.f64	d5, d5, d7
 8027fc0:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8027fc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027fc8:	f57f af31 	bpl.w	8027e2e <_dtoa_r+0x3b6>
 8027fcc:	460e      	mov	r6, r1
 8027fce:	3901      	subs	r1, #1
 8027fd0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8027fd4:	2b30      	cmp	r3, #48	@ 0x30
 8027fd6:	d0f9      	beq.n	8027fcc <_dtoa_r+0x554>
 8027fd8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8027fdc:	e027      	b.n	802802e <_dtoa_r+0x5b6>
 8027fde:	ee26 6b03 	vmul.f64	d6, d6, d3
 8027fe2:	e7d5      	b.n	8027f90 <_dtoa_r+0x518>
 8027fe4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8027fe8:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8027fec:	463e      	mov	r6, r7
 8027fee:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8027ff2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8027ff6:	ee15 3a10 	vmov	r3, s10
 8027ffa:	3330      	adds	r3, #48	@ 0x30
 8027ffc:	f806 3b01 	strb.w	r3, [r6], #1
 8028000:	1bf3      	subs	r3, r6, r7
 8028002:	459a      	cmp	sl, r3
 8028004:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8028008:	eea3 7b46 	vfms.f64	d7, d3, d6
 802800c:	d132      	bne.n	8028074 <_dtoa_r+0x5fc>
 802800e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8028012:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8028016:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802801a:	dc18      	bgt.n	802804e <_dtoa_r+0x5d6>
 802801c:	eeb4 7b46 	vcmp.f64	d7, d6
 8028020:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028024:	d103      	bne.n	802802e <_dtoa_r+0x5b6>
 8028026:	ee15 3a10 	vmov	r3, s10
 802802a:	07db      	lsls	r3, r3, #31
 802802c:	d40f      	bmi.n	802804e <_dtoa_r+0x5d6>
 802802e:	9901      	ldr	r1, [sp, #4]
 8028030:	4648      	mov	r0, r9
 8028032:	f000 fe55 	bl	8028ce0 <_Bfree>
 8028036:	2300      	movs	r3, #0
 8028038:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802803a:	7033      	strb	r3, [r6, #0]
 802803c:	f108 0301 	add.w	r3, r8, #1
 8028040:	6013      	str	r3, [r2, #0]
 8028042:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8028044:	2b00      	cmp	r3, #0
 8028046:	f000 824b 	beq.w	80284e0 <_dtoa_r+0xa68>
 802804a:	601e      	str	r6, [r3, #0]
 802804c:	e248      	b.n	80284e0 <_dtoa_r+0xa68>
 802804e:	f8cd 8014 	str.w	r8, [sp, #20]
 8028052:	4633      	mov	r3, r6
 8028054:	461e      	mov	r6, r3
 8028056:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 802805a:	2a39      	cmp	r2, #57	@ 0x39
 802805c:	d106      	bne.n	802806c <_dtoa_r+0x5f4>
 802805e:	429f      	cmp	r7, r3
 8028060:	d1f8      	bne.n	8028054 <_dtoa_r+0x5dc>
 8028062:	9a05      	ldr	r2, [sp, #20]
 8028064:	3201      	adds	r2, #1
 8028066:	9205      	str	r2, [sp, #20]
 8028068:	2230      	movs	r2, #48	@ 0x30
 802806a:	703a      	strb	r2, [r7, #0]
 802806c:	781a      	ldrb	r2, [r3, #0]
 802806e:	3201      	adds	r2, #1
 8028070:	701a      	strb	r2, [r3, #0]
 8028072:	e7b1      	b.n	8027fd8 <_dtoa_r+0x560>
 8028074:	ee27 7b04 	vmul.f64	d7, d7, d4
 8028078:	eeb5 7b40 	vcmp.f64	d7, #0.0
 802807c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028080:	d1b5      	bne.n	8027fee <_dtoa_r+0x576>
 8028082:	e7d4      	b.n	802802e <_dtoa_r+0x5b6>
 8028084:	0803b260 	.word	0x0803b260
 8028088:	0803b238 	.word	0x0803b238
 802808c:	9908      	ldr	r1, [sp, #32]
 802808e:	2900      	cmp	r1, #0
 8028090:	f000 80e9 	beq.w	8028266 <_dtoa_r+0x7ee>
 8028094:	9907      	ldr	r1, [sp, #28]
 8028096:	2901      	cmp	r1, #1
 8028098:	f300 80cb 	bgt.w	8028232 <_dtoa_r+0x7ba>
 802809c:	2d00      	cmp	r5, #0
 802809e:	f000 80c4 	beq.w	802822a <_dtoa_r+0x7b2>
 80280a2:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80280a6:	9e04      	ldr	r6, [sp, #16]
 80280a8:	461c      	mov	r4, r3
 80280aa:	9305      	str	r3, [sp, #20]
 80280ac:	9b04      	ldr	r3, [sp, #16]
 80280ae:	4413      	add	r3, r2
 80280b0:	9304      	str	r3, [sp, #16]
 80280b2:	9b06      	ldr	r3, [sp, #24]
 80280b4:	2101      	movs	r1, #1
 80280b6:	4413      	add	r3, r2
 80280b8:	4648      	mov	r0, r9
 80280ba:	9306      	str	r3, [sp, #24]
 80280bc:	f000 ff0e 	bl	8028edc <__i2b>
 80280c0:	9b05      	ldr	r3, [sp, #20]
 80280c2:	4605      	mov	r5, r0
 80280c4:	b166      	cbz	r6, 80280e0 <_dtoa_r+0x668>
 80280c6:	9a06      	ldr	r2, [sp, #24]
 80280c8:	2a00      	cmp	r2, #0
 80280ca:	dd09      	ble.n	80280e0 <_dtoa_r+0x668>
 80280cc:	42b2      	cmp	r2, r6
 80280ce:	9904      	ldr	r1, [sp, #16]
 80280d0:	bfa8      	it	ge
 80280d2:	4632      	movge	r2, r6
 80280d4:	1a89      	subs	r1, r1, r2
 80280d6:	9104      	str	r1, [sp, #16]
 80280d8:	9906      	ldr	r1, [sp, #24]
 80280da:	1ab6      	subs	r6, r6, r2
 80280dc:	1a8a      	subs	r2, r1, r2
 80280de:	9206      	str	r2, [sp, #24]
 80280e0:	b30b      	cbz	r3, 8028126 <_dtoa_r+0x6ae>
 80280e2:	9a08      	ldr	r2, [sp, #32]
 80280e4:	2a00      	cmp	r2, #0
 80280e6:	f000 80c5 	beq.w	8028274 <_dtoa_r+0x7fc>
 80280ea:	2c00      	cmp	r4, #0
 80280ec:	f000 80bf 	beq.w	802826e <_dtoa_r+0x7f6>
 80280f0:	4629      	mov	r1, r5
 80280f2:	4622      	mov	r2, r4
 80280f4:	4648      	mov	r0, r9
 80280f6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80280f8:	f000 ffa8 	bl	802904c <__pow5mult>
 80280fc:	9a01      	ldr	r2, [sp, #4]
 80280fe:	4601      	mov	r1, r0
 8028100:	4605      	mov	r5, r0
 8028102:	4648      	mov	r0, r9
 8028104:	f000 ff00 	bl	8028f08 <__multiply>
 8028108:	9901      	ldr	r1, [sp, #4]
 802810a:	9005      	str	r0, [sp, #20]
 802810c:	4648      	mov	r0, r9
 802810e:	f000 fde7 	bl	8028ce0 <_Bfree>
 8028112:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8028114:	1b1b      	subs	r3, r3, r4
 8028116:	f000 80b0 	beq.w	802827a <_dtoa_r+0x802>
 802811a:	9905      	ldr	r1, [sp, #20]
 802811c:	461a      	mov	r2, r3
 802811e:	4648      	mov	r0, r9
 8028120:	f000 ff94 	bl	802904c <__pow5mult>
 8028124:	9001      	str	r0, [sp, #4]
 8028126:	2101      	movs	r1, #1
 8028128:	4648      	mov	r0, r9
 802812a:	f000 fed7 	bl	8028edc <__i2b>
 802812e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8028130:	4604      	mov	r4, r0
 8028132:	2b00      	cmp	r3, #0
 8028134:	f000 81da 	beq.w	80284ec <_dtoa_r+0xa74>
 8028138:	461a      	mov	r2, r3
 802813a:	4601      	mov	r1, r0
 802813c:	4648      	mov	r0, r9
 802813e:	f000 ff85 	bl	802904c <__pow5mult>
 8028142:	9b07      	ldr	r3, [sp, #28]
 8028144:	2b01      	cmp	r3, #1
 8028146:	4604      	mov	r4, r0
 8028148:	f300 80a0 	bgt.w	802828c <_dtoa_r+0x814>
 802814c:	9b02      	ldr	r3, [sp, #8]
 802814e:	2b00      	cmp	r3, #0
 8028150:	f040 8096 	bne.w	8028280 <_dtoa_r+0x808>
 8028154:	9b03      	ldr	r3, [sp, #12]
 8028156:	f3c3 0213 	ubfx	r2, r3, #0, #20
 802815a:	2a00      	cmp	r2, #0
 802815c:	f040 8092 	bne.w	8028284 <_dtoa_r+0x80c>
 8028160:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8028164:	0d12      	lsrs	r2, r2, #20
 8028166:	0512      	lsls	r2, r2, #20
 8028168:	2a00      	cmp	r2, #0
 802816a:	f000 808d 	beq.w	8028288 <_dtoa_r+0x810>
 802816e:	9b04      	ldr	r3, [sp, #16]
 8028170:	3301      	adds	r3, #1
 8028172:	9304      	str	r3, [sp, #16]
 8028174:	9b06      	ldr	r3, [sp, #24]
 8028176:	3301      	adds	r3, #1
 8028178:	9306      	str	r3, [sp, #24]
 802817a:	2301      	movs	r3, #1
 802817c:	930b      	str	r3, [sp, #44]	@ 0x2c
 802817e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8028180:	2b00      	cmp	r3, #0
 8028182:	f000 81b9 	beq.w	80284f8 <_dtoa_r+0xa80>
 8028186:	6922      	ldr	r2, [r4, #16]
 8028188:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 802818c:	6910      	ldr	r0, [r2, #16]
 802818e:	f000 fe59 	bl	8028e44 <__hi0bits>
 8028192:	f1c0 0020 	rsb	r0, r0, #32
 8028196:	9b06      	ldr	r3, [sp, #24]
 8028198:	4418      	add	r0, r3
 802819a:	f010 001f 	ands.w	r0, r0, #31
 802819e:	f000 8081 	beq.w	80282a4 <_dtoa_r+0x82c>
 80281a2:	f1c0 0220 	rsb	r2, r0, #32
 80281a6:	2a04      	cmp	r2, #4
 80281a8:	dd73      	ble.n	8028292 <_dtoa_r+0x81a>
 80281aa:	9b04      	ldr	r3, [sp, #16]
 80281ac:	f1c0 001c 	rsb	r0, r0, #28
 80281b0:	4403      	add	r3, r0
 80281b2:	9304      	str	r3, [sp, #16]
 80281b4:	9b06      	ldr	r3, [sp, #24]
 80281b6:	4406      	add	r6, r0
 80281b8:	4403      	add	r3, r0
 80281ba:	9306      	str	r3, [sp, #24]
 80281bc:	9b04      	ldr	r3, [sp, #16]
 80281be:	2b00      	cmp	r3, #0
 80281c0:	dd05      	ble.n	80281ce <_dtoa_r+0x756>
 80281c2:	9901      	ldr	r1, [sp, #4]
 80281c4:	461a      	mov	r2, r3
 80281c6:	4648      	mov	r0, r9
 80281c8:	f000 ff9a 	bl	8029100 <__lshift>
 80281cc:	9001      	str	r0, [sp, #4]
 80281ce:	9b06      	ldr	r3, [sp, #24]
 80281d0:	2b00      	cmp	r3, #0
 80281d2:	dd05      	ble.n	80281e0 <_dtoa_r+0x768>
 80281d4:	4621      	mov	r1, r4
 80281d6:	461a      	mov	r2, r3
 80281d8:	4648      	mov	r0, r9
 80281da:	f000 ff91 	bl	8029100 <__lshift>
 80281de:	4604      	mov	r4, r0
 80281e0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80281e2:	2b00      	cmp	r3, #0
 80281e4:	d060      	beq.n	80282a8 <_dtoa_r+0x830>
 80281e6:	9801      	ldr	r0, [sp, #4]
 80281e8:	4621      	mov	r1, r4
 80281ea:	f000 fff5 	bl	80291d8 <__mcmp>
 80281ee:	2800      	cmp	r0, #0
 80281f0:	da5a      	bge.n	80282a8 <_dtoa_r+0x830>
 80281f2:	f108 33ff 	add.w	r3, r8, #4294967295
 80281f6:	9305      	str	r3, [sp, #20]
 80281f8:	9901      	ldr	r1, [sp, #4]
 80281fa:	2300      	movs	r3, #0
 80281fc:	220a      	movs	r2, #10
 80281fe:	4648      	mov	r0, r9
 8028200:	f000 fd90 	bl	8028d24 <__multadd>
 8028204:	9b08      	ldr	r3, [sp, #32]
 8028206:	9001      	str	r0, [sp, #4]
 8028208:	2b00      	cmp	r3, #0
 802820a:	f000 8177 	beq.w	80284fc <_dtoa_r+0xa84>
 802820e:	4629      	mov	r1, r5
 8028210:	2300      	movs	r3, #0
 8028212:	220a      	movs	r2, #10
 8028214:	4648      	mov	r0, r9
 8028216:	f000 fd85 	bl	8028d24 <__multadd>
 802821a:	f1bb 0f00 	cmp.w	fp, #0
 802821e:	4605      	mov	r5, r0
 8028220:	dc6e      	bgt.n	8028300 <_dtoa_r+0x888>
 8028222:	9b07      	ldr	r3, [sp, #28]
 8028224:	2b02      	cmp	r3, #2
 8028226:	dc48      	bgt.n	80282ba <_dtoa_r+0x842>
 8028228:	e06a      	b.n	8028300 <_dtoa_r+0x888>
 802822a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802822c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8028230:	e739      	b.n	80280a6 <_dtoa_r+0x62e>
 8028232:	f10a 34ff 	add.w	r4, sl, #4294967295
 8028236:	42a3      	cmp	r3, r4
 8028238:	db07      	blt.n	802824a <_dtoa_r+0x7d2>
 802823a:	f1ba 0f00 	cmp.w	sl, #0
 802823e:	eba3 0404 	sub.w	r4, r3, r4
 8028242:	db0b      	blt.n	802825c <_dtoa_r+0x7e4>
 8028244:	9e04      	ldr	r6, [sp, #16]
 8028246:	4652      	mov	r2, sl
 8028248:	e72f      	b.n	80280aa <_dtoa_r+0x632>
 802824a:	1ae2      	subs	r2, r4, r3
 802824c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802824e:	9e04      	ldr	r6, [sp, #16]
 8028250:	4413      	add	r3, r2
 8028252:	930a      	str	r3, [sp, #40]	@ 0x28
 8028254:	4652      	mov	r2, sl
 8028256:	4623      	mov	r3, r4
 8028258:	2400      	movs	r4, #0
 802825a:	e726      	b.n	80280aa <_dtoa_r+0x632>
 802825c:	9a04      	ldr	r2, [sp, #16]
 802825e:	eba2 060a 	sub.w	r6, r2, sl
 8028262:	2200      	movs	r2, #0
 8028264:	e721      	b.n	80280aa <_dtoa_r+0x632>
 8028266:	9e04      	ldr	r6, [sp, #16]
 8028268:	9d08      	ldr	r5, [sp, #32]
 802826a:	461c      	mov	r4, r3
 802826c:	e72a      	b.n	80280c4 <_dtoa_r+0x64c>
 802826e:	9a01      	ldr	r2, [sp, #4]
 8028270:	9205      	str	r2, [sp, #20]
 8028272:	e752      	b.n	802811a <_dtoa_r+0x6a2>
 8028274:	9901      	ldr	r1, [sp, #4]
 8028276:	461a      	mov	r2, r3
 8028278:	e751      	b.n	802811e <_dtoa_r+0x6a6>
 802827a:	9b05      	ldr	r3, [sp, #20]
 802827c:	9301      	str	r3, [sp, #4]
 802827e:	e752      	b.n	8028126 <_dtoa_r+0x6ae>
 8028280:	2300      	movs	r3, #0
 8028282:	e77b      	b.n	802817c <_dtoa_r+0x704>
 8028284:	9b02      	ldr	r3, [sp, #8]
 8028286:	e779      	b.n	802817c <_dtoa_r+0x704>
 8028288:	920b      	str	r2, [sp, #44]	@ 0x2c
 802828a:	e778      	b.n	802817e <_dtoa_r+0x706>
 802828c:	2300      	movs	r3, #0
 802828e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8028290:	e779      	b.n	8028186 <_dtoa_r+0x70e>
 8028292:	d093      	beq.n	80281bc <_dtoa_r+0x744>
 8028294:	9b04      	ldr	r3, [sp, #16]
 8028296:	321c      	adds	r2, #28
 8028298:	4413      	add	r3, r2
 802829a:	9304      	str	r3, [sp, #16]
 802829c:	9b06      	ldr	r3, [sp, #24]
 802829e:	4416      	add	r6, r2
 80282a0:	4413      	add	r3, r2
 80282a2:	e78a      	b.n	80281ba <_dtoa_r+0x742>
 80282a4:	4602      	mov	r2, r0
 80282a6:	e7f5      	b.n	8028294 <_dtoa_r+0x81c>
 80282a8:	f1ba 0f00 	cmp.w	sl, #0
 80282ac:	f8cd 8014 	str.w	r8, [sp, #20]
 80282b0:	46d3      	mov	fp, sl
 80282b2:	dc21      	bgt.n	80282f8 <_dtoa_r+0x880>
 80282b4:	9b07      	ldr	r3, [sp, #28]
 80282b6:	2b02      	cmp	r3, #2
 80282b8:	dd1e      	ble.n	80282f8 <_dtoa_r+0x880>
 80282ba:	f1bb 0f00 	cmp.w	fp, #0
 80282be:	f47f addc 	bne.w	8027e7a <_dtoa_r+0x402>
 80282c2:	4621      	mov	r1, r4
 80282c4:	465b      	mov	r3, fp
 80282c6:	2205      	movs	r2, #5
 80282c8:	4648      	mov	r0, r9
 80282ca:	f000 fd2b 	bl	8028d24 <__multadd>
 80282ce:	4601      	mov	r1, r0
 80282d0:	4604      	mov	r4, r0
 80282d2:	9801      	ldr	r0, [sp, #4]
 80282d4:	f000 ff80 	bl	80291d8 <__mcmp>
 80282d8:	2800      	cmp	r0, #0
 80282da:	f77f adce 	ble.w	8027e7a <_dtoa_r+0x402>
 80282de:	463e      	mov	r6, r7
 80282e0:	2331      	movs	r3, #49	@ 0x31
 80282e2:	f806 3b01 	strb.w	r3, [r6], #1
 80282e6:	9b05      	ldr	r3, [sp, #20]
 80282e8:	3301      	adds	r3, #1
 80282ea:	9305      	str	r3, [sp, #20]
 80282ec:	e5c9      	b.n	8027e82 <_dtoa_r+0x40a>
 80282ee:	f8cd 8014 	str.w	r8, [sp, #20]
 80282f2:	4654      	mov	r4, sl
 80282f4:	4625      	mov	r5, r4
 80282f6:	e7f2      	b.n	80282de <_dtoa_r+0x866>
 80282f8:	9b08      	ldr	r3, [sp, #32]
 80282fa:	2b00      	cmp	r3, #0
 80282fc:	f000 8102 	beq.w	8028504 <_dtoa_r+0xa8c>
 8028300:	2e00      	cmp	r6, #0
 8028302:	dd05      	ble.n	8028310 <_dtoa_r+0x898>
 8028304:	4629      	mov	r1, r5
 8028306:	4632      	mov	r2, r6
 8028308:	4648      	mov	r0, r9
 802830a:	f000 fef9 	bl	8029100 <__lshift>
 802830e:	4605      	mov	r5, r0
 8028310:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8028312:	2b00      	cmp	r3, #0
 8028314:	d058      	beq.n	80283c8 <_dtoa_r+0x950>
 8028316:	6869      	ldr	r1, [r5, #4]
 8028318:	4648      	mov	r0, r9
 802831a:	f000 fca1 	bl	8028c60 <_Balloc>
 802831e:	4606      	mov	r6, r0
 8028320:	b928      	cbnz	r0, 802832e <_dtoa_r+0x8b6>
 8028322:	4b82      	ldr	r3, [pc, #520]	@ (802852c <_dtoa_r+0xab4>)
 8028324:	4602      	mov	r2, r0
 8028326:	f240 21ef 	movw	r1, #751	@ 0x2ef
 802832a:	f7ff bbbe 	b.w	8027aaa <_dtoa_r+0x32>
 802832e:	692a      	ldr	r2, [r5, #16]
 8028330:	3202      	adds	r2, #2
 8028332:	0092      	lsls	r2, r2, #2
 8028334:	f105 010c 	add.w	r1, r5, #12
 8028338:	300c      	adds	r0, #12
 802833a:	f7ff fafe 	bl	802793a <memcpy>
 802833e:	2201      	movs	r2, #1
 8028340:	4631      	mov	r1, r6
 8028342:	4648      	mov	r0, r9
 8028344:	f000 fedc 	bl	8029100 <__lshift>
 8028348:	1c7b      	adds	r3, r7, #1
 802834a:	9304      	str	r3, [sp, #16]
 802834c:	eb07 030b 	add.w	r3, r7, fp
 8028350:	9309      	str	r3, [sp, #36]	@ 0x24
 8028352:	9b02      	ldr	r3, [sp, #8]
 8028354:	f003 0301 	and.w	r3, r3, #1
 8028358:	46a8      	mov	r8, r5
 802835a:	9308      	str	r3, [sp, #32]
 802835c:	4605      	mov	r5, r0
 802835e:	9b04      	ldr	r3, [sp, #16]
 8028360:	9801      	ldr	r0, [sp, #4]
 8028362:	4621      	mov	r1, r4
 8028364:	f103 3bff 	add.w	fp, r3, #4294967295
 8028368:	f7ff fafe 	bl	8027968 <quorem>
 802836c:	4641      	mov	r1, r8
 802836e:	9002      	str	r0, [sp, #8]
 8028370:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8028374:	9801      	ldr	r0, [sp, #4]
 8028376:	f000 ff2f 	bl	80291d8 <__mcmp>
 802837a:	462a      	mov	r2, r5
 802837c:	9006      	str	r0, [sp, #24]
 802837e:	4621      	mov	r1, r4
 8028380:	4648      	mov	r0, r9
 8028382:	f000 ff45 	bl	8029210 <__mdiff>
 8028386:	68c2      	ldr	r2, [r0, #12]
 8028388:	4606      	mov	r6, r0
 802838a:	b9fa      	cbnz	r2, 80283cc <_dtoa_r+0x954>
 802838c:	4601      	mov	r1, r0
 802838e:	9801      	ldr	r0, [sp, #4]
 8028390:	f000 ff22 	bl	80291d8 <__mcmp>
 8028394:	4602      	mov	r2, r0
 8028396:	4631      	mov	r1, r6
 8028398:	4648      	mov	r0, r9
 802839a:	920a      	str	r2, [sp, #40]	@ 0x28
 802839c:	f000 fca0 	bl	8028ce0 <_Bfree>
 80283a0:	9b07      	ldr	r3, [sp, #28]
 80283a2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80283a4:	9e04      	ldr	r6, [sp, #16]
 80283a6:	ea42 0103 	orr.w	r1, r2, r3
 80283aa:	9b08      	ldr	r3, [sp, #32]
 80283ac:	4319      	orrs	r1, r3
 80283ae:	d10f      	bne.n	80283d0 <_dtoa_r+0x958>
 80283b0:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80283b4:	d028      	beq.n	8028408 <_dtoa_r+0x990>
 80283b6:	9b06      	ldr	r3, [sp, #24]
 80283b8:	2b00      	cmp	r3, #0
 80283ba:	dd02      	ble.n	80283c2 <_dtoa_r+0x94a>
 80283bc:	9b02      	ldr	r3, [sp, #8]
 80283be:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 80283c2:	f88b a000 	strb.w	sl, [fp]
 80283c6:	e55e      	b.n	8027e86 <_dtoa_r+0x40e>
 80283c8:	4628      	mov	r0, r5
 80283ca:	e7bd      	b.n	8028348 <_dtoa_r+0x8d0>
 80283cc:	2201      	movs	r2, #1
 80283ce:	e7e2      	b.n	8028396 <_dtoa_r+0x91e>
 80283d0:	9b06      	ldr	r3, [sp, #24]
 80283d2:	2b00      	cmp	r3, #0
 80283d4:	db04      	blt.n	80283e0 <_dtoa_r+0x968>
 80283d6:	9907      	ldr	r1, [sp, #28]
 80283d8:	430b      	orrs	r3, r1
 80283da:	9908      	ldr	r1, [sp, #32]
 80283dc:	430b      	orrs	r3, r1
 80283de:	d120      	bne.n	8028422 <_dtoa_r+0x9aa>
 80283e0:	2a00      	cmp	r2, #0
 80283e2:	ddee      	ble.n	80283c2 <_dtoa_r+0x94a>
 80283e4:	9901      	ldr	r1, [sp, #4]
 80283e6:	2201      	movs	r2, #1
 80283e8:	4648      	mov	r0, r9
 80283ea:	f000 fe89 	bl	8029100 <__lshift>
 80283ee:	4621      	mov	r1, r4
 80283f0:	9001      	str	r0, [sp, #4]
 80283f2:	f000 fef1 	bl	80291d8 <__mcmp>
 80283f6:	2800      	cmp	r0, #0
 80283f8:	dc03      	bgt.n	8028402 <_dtoa_r+0x98a>
 80283fa:	d1e2      	bne.n	80283c2 <_dtoa_r+0x94a>
 80283fc:	f01a 0f01 	tst.w	sl, #1
 8028400:	d0df      	beq.n	80283c2 <_dtoa_r+0x94a>
 8028402:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8028406:	d1d9      	bne.n	80283bc <_dtoa_r+0x944>
 8028408:	2339      	movs	r3, #57	@ 0x39
 802840a:	f88b 3000 	strb.w	r3, [fp]
 802840e:	4633      	mov	r3, r6
 8028410:	461e      	mov	r6, r3
 8028412:	3b01      	subs	r3, #1
 8028414:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8028418:	2a39      	cmp	r2, #57	@ 0x39
 802841a:	d052      	beq.n	80284c2 <_dtoa_r+0xa4a>
 802841c:	3201      	adds	r2, #1
 802841e:	701a      	strb	r2, [r3, #0]
 8028420:	e531      	b.n	8027e86 <_dtoa_r+0x40e>
 8028422:	2a00      	cmp	r2, #0
 8028424:	dd07      	ble.n	8028436 <_dtoa_r+0x9be>
 8028426:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 802842a:	d0ed      	beq.n	8028408 <_dtoa_r+0x990>
 802842c:	f10a 0301 	add.w	r3, sl, #1
 8028430:	f88b 3000 	strb.w	r3, [fp]
 8028434:	e527      	b.n	8027e86 <_dtoa_r+0x40e>
 8028436:	9b04      	ldr	r3, [sp, #16]
 8028438:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802843a:	f803 ac01 	strb.w	sl, [r3, #-1]
 802843e:	4293      	cmp	r3, r2
 8028440:	d029      	beq.n	8028496 <_dtoa_r+0xa1e>
 8028442:	9901      	ldr	r1, [sp, #4]
 8028444:	2300      	movs	r3, #0
 8028446:	220a      	movs	r2, #10
 8028448:	4648      	mov	r0, r9
 802844a:	f000 fc6b 	bl	8028d24 <__multadd>
 802844e:	45a8      	cmp	r8, r5
 8028450:	9001      	str	r0, [sp, #4]
 8028452:	f04f 0300 	mov.w	r3, #0
 8028456:	f04f 020a 	mov.w	r2, #10
 802845a:	4641      	mov	r1, r8
 802845c:	4648      	mov	r0, r9
 802845e:	d107      	bne.n	8028470 <_dtoa_r+0x9f8>
 8028460:	f000 fc60 	bl	8028d24 <__multadd>
 8028464:	4680      	mov	r8, r0
 8028466:	4605      	mov	r5, r0
 8028468:	9b04      	ldr	r3, [sp, #16]
 802846a:	3301      	adds	r3, #1
 802846c:	9304      	str	r3, [sp, #16]
 802846e:	e776      	b.n	802835e <_dtoa_r+0x8e6>
 8028470:	f000 fc58 	bl	8028d24 <__multadd>
 8028474:	4629      	mov	r1, r5
 8028476:	4680      	mov	r8, r0
 8028478:	2300      	movs	r3, #0
 802847a:	220a      	movs	r2, #10
 802847c:	4648      	mov	r0, r9
 802847e:	f000 fc51 	bl	8028d24 <__multadd>
 8028482:	4605      	mov	r5, r0
 8028484:	e7f0      	b.n	8028468 <_dtoa_r+0x9f0>
 8028486:	f1bb 0f00 	cmp.w	fp, #0
 802848a:	bfcc      	ite	gt
 802848c:	465e      	movgt	r6, fp
 802848e:	2601      	movle	r6, #1
 8028490:	443e      	add	r6, r7
 8028492:	f04f 0800 	mov.w	r8, #0
 8028496:	9901      	ldr	r1, [sp, #4]
 8028498:	2201      	movs	r2, #1
 802849a:	4648      	mov	r0, r9
 802849c:	f000 fe30 	bl	8029100 <__lshift>
 80284a0:	4621      	mov	r1, r4
 80284a2:	9001      	str	r0, [sp, #4]
 80284a4:	f000 fe98 	bl	80291d8 <__mcmp>
 80284a8:	2800      	cmp	r0, #0
 80284aa:	dcb0      	bgt.n	802840e <_dtoa_r+0x996>
 80284ac:	d102      	bne.n	80284b4 <_dtoa_r+0xa3c>
 80284ae:	f01a 0f01 	tst.w	sl, #1
 80284b2:	d1ac      	bne.n	802840e <_dtoa_r+0x996>
 80284b4:	4633      	mov	r3, r6
 80284b6:	461e      	mov	r6, r3
 80284b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80284bc:	2a30      	cmp	r2, #48	@ 0x30
 80284be:	d0fa      	beq.n	80284b6 <_dtoa_r+0xa3e>
 80284c0:	e4e1      	b.n	8027e86 <_dtoa_r+0x40e>
 80284c2:	429f      	cmp	r7, r3
 80284c4:	d1a4      	bne.n	8028410 <_dtoa_r+0x998>
 80284c6:	9b05      	ldr	r3, [sp, #20]
 80284c8:	3301      	adds	r3, #1
 80284ca:	9305      	str	r3, [sp, #20]
 80284cc:	2331      	movs	r3, #49	@ 0x31
 80284ce:	703b      	strb	r3, [r7, #0]
 80284d0:	e4d9      	b.n	8027e86 <_dtoa_r+0x40e>
 80284d2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80284d4:	4f16      	ldr	r7, [pc, #88]	@ (8028530 <_dtoa_r+0xab8>)
 80284d6:	b11b      	cbz	r3, 80284e0 <_dtoa_r+0xa68>
 80284d8:	f107 0308 	add.w	r3, r7, #8
 80284dc:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80284de:	6013      	str	r3, [r2, #0]
 80284e0:	4638      	mov	r0, r7
 80284e2:	b011      	add	sp, #68	@ 0x44
 80284e4:	ecbd 8b02 	vpop	{d8}
 80284e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80284ec:	9b07      	ldr	r3, [sp, #28]
 80284ee:	2b01      	cmp	r3, #1
 80284f0:	f77f ae2c 	ble.w	802814c <_dtoa_r+0x6d4>
 80284f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80284f6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80284f8:	2001      	movs	r0, #1
 80284fa:	e64c      	b.n	8028196 <_dtoa_r+0x71e>
 80284fc:	f1bb 0f00 	cmp.w	fp, #0
 8028500:	f77f aed8 	ble.w	80282b4 <_dtoa_r+0x83c>
 8028504:	463e      	mov	r6, r7
 8028506:	9801      	ldr	r0, [sp, #4]
 8028508:	4621      	mov	r1, r4
 802850a:	f7ff fa2d 	bl	8027968 <quorem>
 802850e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8028512:	f806 ab01 	strb.w	sl, [r6], #1
 8028516:	1bf2      	subs	r2, r6, r7
 8028518:	4593      	cmp	fp, r2
 802851a:	ddb4      	ble.n	8028486 <_dtoa_r+0xa0e>
 802851c:	9901      	ldr	r1, [sp, #4]
 802851e:	2300      	movs	r3, #0
 8028520:	220a      	movs	r2, #10
 8028522:	4648      	mov	r0, r9
 8028524:	f000 fbfe 	bl	8028d24 <__multadd>
 8028528:	9001      	str	r0, [sp, #4]
 802852a:	e7ec      	b.n	8028506 <_dtoa_r+0xa8e>
 802852c:	0803aff8 	.word	0x0803aff8
 8028530:	0803af93 	.word	0x0803af93

08028534 <_free_r>:
 8028534:	b538      	push	{r3, r4, r5, lr}
 8028536:	4605      	mov	r5, r0
 8028538:	2900      	cmp	r1, #0
 802853a:	d041      	beq.n	80285c0 <_free_r+0x8c>
 802853c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8028540:	1f0c      	subs	r4, r1, #4
 8028542:	2b00      	cmp	r3, #0
 8028544:	bfb8      	it	lt
 8028546:	18e4      	addlt	r4, r4, r3
 8028548:	f7fd fade 	bl	8025b08 <__malloc_lock>
 802854c:	4a1d      	ldr	r2, [pc, #116]	@ (80285c4 <_free_r+0x90>)
 802854e:	6813      	ldr	r3, [r2, #0]
 8028550:	b933      	cbnz	r3, 8028560 <_free_r+0x2c>
 8028552:	6063      	str	r3, [r4, #4]
 8028554:	6014      	str	r4, [r2, #0]
 8028556:	4628      	mov	r0, r5
 8028558:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802855c:	f7fd bada 	b.w	8025b14 <__malloc_unlock>
 8028560:	42a3      	cmp	r3, r4
 8028562:	d908      	bls.n	8028576 <_free_r+0x42>
 8028564:	6820      	ldr	r0, [r4, #0]
 8028566:	1821      	adds	r1, r4, r0
 8028568:	428b      	cmp	r3, r1
 802856a:	bf01      	itttt	eq
 802856c:	6819      	ldreq	r1, [r3, #0]
 802856e:	685b      	ldreq	r3, [r3, #4]
 8028570:	1809      	addeq	r1, r1, r0
 8028572:	6021      	streq	r1, [r4, #0]
 8028574:	e7ed      	b.n	8028552 <_free_r+0x1e>
 8028576:	461a      	mov	r2, r3
 8028578:	685b      	ldr	r3, [r3, #4]
 802857a:	b10b      	cbz	r3, 8028580 <_free_r+0x4c>
 802857c:	42a3      	cmp	r3, r4
 802857e:	d9fa      	bls.n	8028576 <_free_r+0x42>
 8028580:	6811      	ldr	r1, [r2, #0]
 8028582:	1850      	adds	r0, r2, r1
 8028584:	42a0      	cmp	r0, r4
 8028586:	d10b      	bne.n	80285a0 <_free_r+0x6c>
 8028588:	6820      	ldr	r0, [r4, #0]
 802858a:	4401      	add	r1, r0
 802858c:	1850      	adds	r0, r2, r1
 802858e:	4283      	cmp	r3, r0
 8028590:	6011      	str	r1, [r2, #0]
 8028592:	d1e0      	bne.n	8028556 <_free_r+0x22>
 8028594:	6818      	ldr	r0, [r3, #0]
 8028596:	685b      	ldr	r3, [r3, #4]
 8028598:	6053      	str	r3, [r2, #4]
 802859a:	4408      	add	r0, r1
 802859c:	6010      	str	r0, [r2, #0]
 802859e:	e7da      	b.n	8028556 <_free_r+0x22>
 80285a0:	d902      	bls.n	80285a8 <_free_r+0x74>
 80285a2:	230c      	movs	r3, #12
 80285a4:	602b      	str	r3, [r5, #0]
 80285a6:	e7d6      	b.n	8028556 <_free_r+0x22>
 80285a8:	6820      	ldr	r0, [r4, #0]
 80285aa:	1821      	adds	r1, r4, r0
 80285ac:	428b      	cmp	r3, r1
 80285ae:	bf04      	itt	eq
 80285b0:	6819      	ldreq	r1, [r3, #0]
 80285b2:	685b      	ldreq	r3, [r3, #4]
 80285b4:	6063      	str	r3, [r4, #4]
 80285b6:	bf04      	itt	eq
 80285b8:	1809      	addeq	r1, r1, r0
 80285ba:	6021      	streq	r1, [r4, #0]
 80285bc:	6054      	str	r4, [r2, #4]
 80285be:	e7ca      	b.n	8028556 <_free_r+0x22>
 80285c0:	bd38      	pop	{r3, r4, r5, pc}
 80285c2:	bf00      	nop
 80285c4:	2400572c 	.word	0x2400572c

080285c8 <rshift>:
 80285c8:	6903      	ldr	r3, [r0, #16]
 80285ca:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80285ce:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80285d2:	ea4f 1261 	mov.w	r2, r1, asr #5
 80285d6:	f100 0414 	add.w	r4, r0, #20
 80285da:	dd45      	ble.n	8028668 <rshift+0xa0>
 80285dc:	f011 011f 	ands.w	r1, r1, #31
 80285e0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80285e4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80285e8:	d10c      	bne.n	8028604 <rshift+0x3c>
 80285ea:	f100 0710 	add.w	r7, r0, #16
 80285ee:	4629      	mov	r1, r5
 80285f0:	42b1      	cmp	r1, r6
 80285f2:	d334      	bcc.n	802865e <rshift+0x96>
 80285f4:	1a9b      	subs	r3, r3, r2
 80285f6:	009b      	lsls	r3, r3, #2
 80285f8:	1eea      	subs	r2, r5, #3
 80285fa:	4296      	cmp	r6, r2
 80285fc:	bf38      	it	cc
 80285fe:	2300      	movcc	r3, #0
 8028600:	4423      	add	r3, r4
 8028602:	e015      	b.n	8028630 <rshift+0x68>
 8028604:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8028608:	f1c1 0820 	rsb	r8, r1, #32
 802860c:	40cf      	lsrs	r7, r1
 802860e:	f105 0e04 	add.w	lr, r5, #4
 8028612:	46a1      	mov	r9, r4
 8028614:	4576      	cmp	r6, lr
 8028616:	46f4      	mov	ip, lr
 8028618:	d815      	bhi.n	8028646 <rshift+0x7e>
 802861a:	1a9a      	subs	r2, r3, r2
 802861c:	0092      	lsls	r2, r2, #2
 802861e:	3a04      	subs	r2, #4
 8028620:	3501      	adds	r5, #1
 8028622:	42ae      	cmp	r6, r5
 8028624:	bf38      	it	cc
 8028626:	2200      	movcc	r2, #0
 8028628:	18a3      	adds	r3, r4, r2
 802862a:	50a7      	str	r7, [r4, r2]
 802862c:	b107      	cbz	r7, 8028630 <rshift+0x68>
 802862e:	3304      	adds	r3, #4
 8028630:	1b1a      	subs	r2, r3, r4
 8028632:	42a3      	cmp	r3, r4
 8028634:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8028638:	bf08      	it	eq
 802863a:	2300      	moveq	r3, #0
 802863c:	6102      	str	r2, [r0, #16]
 802863e:	bf08      	it	eq
 8028640:	6143      	streq	r3, [r0, #20]
 8028642:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8028646:	f8dc c000 	ldr.w	ip, [ip]
 802864a:	fa0c fc08 	lsl.w	ip, ip, r8
 802864e:	ea4c 0707 	orr.w	r7, ip, r7
 8028652:	f849 7b04 	str.w	r7, [r9], #4
 8028656:	f85e 7b04 	ldr.w	r7, [lr], #4
 802865a:	40cf      	lsrs	r7, r1
 802865c:	e7da      	b.n	8028614 <rshift+0x4c>
 802865e:	f851 cb04 	ldr.w	ip, [r1], #4
 8028662:	f847 cf04 	str.w	ip, [r7, #4]!
 8028666:	e7c3      	b.n	80285f0 <rshift+0x28>
 8028668:	4623      	mov	r3, r4
 802866a:	e7e1      	b.n	8028630 <rshift+0x68>

0802866c <__hexdig_fun>:
 802866c:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8028670:	2b09      	cmp	r3, #9
 8028672:	d802      	bhi.n	802867a <__hexdig_fun+0xe>
 8028674:	3820      	subs	r0, #32
 8028676:	b2c0      	uxtb	r0, r0
 8028678:	4770      	bx	lr
 802867a:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 802867e:	2b05      	cmp	r3, #5
 8028680:	d801      	bhi.n	8028686 <__hexdig_fun+0x1a>
 8028682:	3847      	subs	r0, #71	@ 0x47
 8028684:	e7f7      	b.n	8028676 <__hexdig_fun+0xa>
 8028686:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 802868a:	2b05      	cmp	r3, #5
 802868c:	d801      	bhi.n	8028692 <__hexdig_fun+0x26>
 802868e:	3827      	subs	r0, #39	@ 0x27
 8028690:	e7f1      	b.n	8028676 <__hexdig_fun+0xa>
 8028692:	2000      	movs	r0, #0
 8028694:	4770      	bx	lr
	...

08028698 <__gethex>:
 8028698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802869c:	b085      	sub	sp, #20
 802869e:	468a      	mov	sl, r1
 80286a0:	9302      	str	r3, [sp, #8]
 80286a2:	680b      	ldr	r3, [r1, #0]
 80286a4:	9001      	str	r0, [sp, #4]
 80286a6:	4690      	mov	r8, r2
 80286a8:	1c9c      	adds	r4, r3, #2
 80286aa:	46a1      	mov	r9, r4
 80286ac:	f814 0b01 	ldrb.w	r0, [r4], #1
 80286b0:	2830      	cmp	r0, #48	@ 0x30
 80286b2:	d0fa      	beq.n	80286aa <__gethex+0x12>
 80286b4:	eba9 0303 	sub.w	r3, r9, r3
 80286b8:	f1a3 0b02 	sub.w	fp, r3, #2
 80286bc:	f7ff ffd6 	bl	802866c <__hexdig_fun>
 80286c0:	4605      	mov	r5, r0
 80286c2:	2800      	cmp	r0, #0
 80286c4:	d168      	bne.n	8028798 <__gethex+0x100>
 80286c6:	49a0      	ldr	r1, [pc, #640]	@ (8028948 <__gethex+0x2b0>)
 80286c8:	2201      	movs	r2, #1
 80286ca:	4648      	mov	r0, r9
 80286cc:	f7ff f811 	bl	80276f2 <strncmp>
 80286d0:	4607      	mov	r7, r0
 80286d2:	2800      	cmp	r0, #0
 80286d4:	d167      	bne.n	80287a6 <__gethex+0x10e>
 80286d6:	f899 0001 	ldrb.w	r0, [r9, #1]
 80286da:	4626      	mov	r6, r4
 80286dc:	f7ff ffc6 	bl	802866c <__hexdig_fun>
 80286e0:	2800      	cmp	r0, #0
 80286e2:	d062      	beq.n	80287aa <__gethex+0x112>
 80286e4:	4623      	mov	r3, r4
 80286e6:	7818      	ldrb	r0, [r3, #0]
 80286e8:	2830      	cmp	r0, #48	@ 0x30
 80286ea:	4699      	mov	r9, r3
 80286ec:	f103 0301 	add.w	r3, r3, #1
 80286f0:	d0f9      	beq.n	80286e6 <__gethex+0x4e>
 80286f2:	f7ff ffbb 	bl	802866c <__hexdig_fun>
 80286f6:	fab0 f580 	clz	r5, r0
 80286fa:	096d      	lsrs	r5, r5, #5
 80286fc:	f04f 0b01 	mov.w	fp, #1
 8028700:	464a      	mov	r2, r9
 8028702:	4616      	mov	r6, r2
 8028704:	3201      	adds	r2, #1
 8028706:	7830      	ldrb	r0, [r6, #0]
 8028708:	f7ff ffb0 	bl	802866c <__hexdig_fun>
 802870c:	2800      	cmp	r0, #0
 802870e:	d1f8      	bne.n	8028702 <__gethex+0x6a>
 8028710:	498d      	ldr	r1, [pc, #564]	@ (8028948 <__gethex+0x2b0>)
 8028712:	2201      	movs	r2, #1
 8028714:	4630      	mov	r0, r6
 8028716:	f7fe ffec 	bl	80276f2 <strncmp>
 802871a:	2800      	cmp	r0, #0
 802871c:	d13f      	bne.n	802879e <__gethex+0x106>
 802871e:	b944      	cbnz	r4, 8028732 <__gethex+0x9a>
 8028720:	1c74      	adds	r4, r6, #1
 8028722:	4622      	mov	r2, r4
 8028724:	4616      	mov	r6, r2
 8028726:	3201      	adds	r2, #1
 8028728:	7830      	ldrb	r0, [r6, #0]
 802872a:	f7ff ff9f 	bl	802866c <__hexdig_fun>
 802872e:	2800      	cmp	r0, #0
 8028730:	d1f8      	bne.n	8028724 <__gethex+0x8c>
 8028732:	1ba4      	subs	r4, r4, r6
 8028734:	00a7      	lsls	r7, r4, #2
 8028736:	7833      	ldrb	r3, [r6, #0]
 8028738:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 802873c:	2b50      	cmp	r3, #80	@ 0x50
 802873e:	d13e      	bne.n	80287be <__gethex+0x126>
 8028740:	7873      	ldrb	r3, [r6, #1]
 8028742:	2b2b      	cmp	r3, #43	@ 0x2b
 8028744:	d033      	beq.n	80287ae <__gethex+0x116>
 8028746:	2b2d      	cmp	r3, #45	@ 0x2d
 8028748:	d034      	beq.n	80287b4 <__gethex+0x11c>
 802874a:	1c71      	adds	r1, r6, #1
 802874c:	2400      	movs	r4, #0
 802874e:	7808      	ldrb	r0, [r1, #0]
 8028750:	f7ff ff8c 	bl	802866c <__hexdig_fun>
 8028754:	1e43      	subs	r3, r0, #1
 8028756:	b2db      	uxtb	r3, r3
 8028758:	2b18      	cmp	r3, #24
 802875a:	d830      	bhi.n	80287be <__gethex+0x126>
 802875c:	f1a0 0210 	sub.w	r2, r0, #16
 8028760:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8028764:	f7ff ff82 	bl	802866c <__hexdig_fun>
 8028768:	f100 3cff 	add.w	ip, r0, #4294967295
 802876c:	fa5f fc8c 	uxtb.w	ip, ip
 8028770:	f1bc 0f18 	cmp.w	ip, #24
 8028774:	f04f 030a 	mov.w	r3, #10
 8028778:	d91e      	bls.n	80287b8 <__gethex+0x120>
 802877a:	b104      	cbz	r4, 802877e <__gethex+0xe6>
 802877c:	4252      	negs	r2, r2
 802877e:	4417      	add	r7, r2
 8028780:	f8ca 1000 	str.w	r1, [sl]
 8028784:	b1ed      	cbz	r5, 80287c2 <__gethex+0x12a>
 8028786:	f1bb 0f00 	cmp.w	fp, #0
 802878a:	bf0c      	ite	eq
 802878c:	2506      	moveq	r5, #6
 802878e:	2500      	movne	r5, #0
 8028790:	4628      	mov	r0, r5
 8028792:	b005      	add	sp, #20
 8028794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028798:	2500      	movs	r5, #0
 802879a:	462c      	mov	r4, r5
 802879c:	e7b0      	b.n	8028700 <__gethex+0x68>
 802879e:	2c00      	cmp	r4, #0
 80287a0:	d1c7      	bne.n	8028732 <__gethex+0x9a>
 80287a2:	4627      	mov	r7, r4
 80287a4:	e7c7      	b.n	8028736 <__gethex+0x9e>
 80287a6:	464e      	mov	r6, r9
 80287a8:	462f      	mov	r7, r5
 80287aa:	2501      	movs	r5, #1
 80287ac:	e7c3      	b.n	8028736 <__gethex+0x9e>
 80287ae:	2400      	movs	r4, #0
 80287b0:	1cb1      	adds	r1, r6, #2
 80287b2:	e7cc      	b.n	802874e <__gethex+0xb6>
 80287b4:	2401      	movs	r4, #1
 80287b6:	e7fb      	b.n	80287b0 <__gethex+0x118>
 80287b8:	fb03 0002 	mla	r0, r3, r2, r0
 80287bc:	e7ce      	b.n	802875c <__gethex+0xc4>
 80287be:	4631      	mov	r1, r6
 80287c0:	e7de      	b.n	8028780 <__gethex+0xe8>
 80287c2:	eba6 0309 	sub.w	r3, r6, r9
 80287c6:	3b01      	subs	r3, #1
 80287c8:	4629      	mov	r1, r5
 80287ca:	2b07      	cmp	r3, #7
 80287cc:	dc0a      	bgt.n	80287e4 <__gethex+0x14c>
 80287ce:	9801      	ldr	r0, [sp, #4]
 80287d0:	f000 fa46 	bl	8028c60 <_Balloc>
 80287d4:	4604      	mov	r4, r0
 80287d6:	b940      	cbnz	r0, 80287ea <__gethex+0x152>
 80287d8:	4b5c      	ldr	r3, [pc, #368]	@ (802894c <__gethex+0x2b4>)
 80287da:	4602      	mov	r2, r0
 80287dc:	21e4      	movs	r1, #228	@ 0xe4
 80287de:	485c      	ldr	r0, [pc, #368]	@ (8028950 <__gethex+0x2b8>)
 80287e0:	f7fd f89e 	bl	8025920 <__assert_func>
 80287e4:	3101      	adds	r1, #1
 80287e6:	105b      	asrs	r3, r3, #1
 80287e8:	e7ef      	b.n	80287ca <__gethex+0x132>
 80287ea:	f100 0a14 	add.w	sl, r0, #20
 80287ee:	2300      	movs	r3, #0
 80287f0:	4655      	mov	r5, sl
 80287f2:	469b      	mov	fp, r3
 80287f4:	45b1      	cmp	r9, r6
 80287f6:	d337      	bcc.n	8028868 <__gethex+0x1d0>
 80287f8:	f845 bb04 	str.w	fp, [r5], #4
 80287fc:	eba5 050a 	sub.w	r5, r5, sl
 8028800:	10ad      	asrs	r5, r5, #2
 8028802:	6125      	str	r5, [r4, #16]
 8028804:	4658      	mov	r0, fp
 8028806:	f000 fb1d 	bl	8028e44 <__hi0bits>
 802880a:	016d      	lsls	r5, r5, #5
 802880c:	f8d8 6000 	ldr.w	r6, [r8]
 8028810:	1a2d      	subs	r5, r5, r0
 8028812:	42b5      	cmp	r5, r6
 8028814:	dd54      	ble.n	80288c0 <__gethex+0x228>
 8028816:	1bad      	subs	r5, r5, r6
 8028818:	4629      	mov	r1, r5
 802881a:	4620      	mov	r0, r4
 802881c:	f000 fea6 	bl	802956c <__any_on>
 8028820:	4681      	mov	r9, r0
 8028822:	b178      	cbz	r0, 8028844 <__gethex+0x1ac>
 8028824:	1e6b      	subs	r3, r5, #1
 8028826:	1159      	asrs	r1, r3, #5
 8028828:	f003 021f 	and.w	r2, r3, #31
 802882c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8028830:	f04f 0901 	mov.w	r9, #1
 8028834:	fa09 f202 	lsl.w	r2, r9, r2
 8028838:	420a      	tst	r2, r1
 802883a:	d003      	beq.n	8028844 <__gethex+0x1ac>
 802883c:	454b      	cmp	r3, r9
 802883e:	dc36      	bgt.n	80288ae <__gethex+0x216>
 8028840:	f04f 0902 	mov.w	r9, #2
 8028844:	4629      	mov	r1, r5
 8028846:	4620      	mov	r0, r4
 8028848:	f7ff febe 	bl	80285c8 <rshift>
 802884c:	442f      	add	r7, r5
 802884e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8028852:	42bb      	cmp	r3, r7
 8028854:	da42      	bge.n	80288dc <__gethex+0x244>
 8028856:	9801      	ldr	r0, [sp, #4]
 8028858:	4621      	mov	r1, r4
 802885a:	f000 fa41 	bl	8028ce0 <_Bfree>
 802885e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8028860:	2300      	movs	r3, #0
 8028862:	6013      	str	r3, [r2, #0]
 8028864:	25a3      	movs	r5, #163	@ 0xa3
 8028866:	e793      	b.n	8028790 <__gethex+0xf8>
 8028868:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 802886c:	2a2e      	cmp	r2, #46	@ 0x2e
 802886e:	d012      	beq.n	8028896 <__gethex+0x1fe>
 8028870:	2b20      	cmp	r3, #32
 8028872:	d104      	bne.n	802887e <__gethex+0x1e6>
 8028874:	f845 bb04 	str.w	fp, [r5], #4
 8028878:	f04f 0b00 	mov.w	fp, #0
 802887c:	465b      	mov	r3, fp
 802887e:	7830      	ldrb	r0, [r6, #0]
 8028880:	9303      	str	r3, [sp, #12]
 8028882:	f7ff fef3 	bl	802866c <__hexdig_fun>
 8028886:	9b03      	ldr	r3, [sp, #12]
 8028888:	f000 000f 	and.w	r0, r0, #15
 802888c:	4098      	lsls	r0, r3
 802888e:	ea4b 0b00 	orr.w	fp, fp, r0
 8028892:	3304      	adds	r3, #4
 8028894:	e7ae      	b.n	80287f4 <__gethex+0x15c>
 8028896:	45b1      	cmp	r9, r6
 8028898:	d8ea      	bhi.n	8028870 <__gethex+0x1d8>
 802889a:	492b      	ldr	r1, [pc, #172]	@ (8028948 <__gethex+0x2b0>)
 802889c:	9303      	str	r3, [sp, #12]
 802889e:	2201      	movs	r2, #1
 80288a0:	4630      	mov	r0, r6
 80288a2:	f7fe ff26 	bl	80276f2 <strncmp>
 80288a6:	9b03      	ldr	r3, [sp, #12]
 80288a8:	2800      	cmp	r0, #0
 80288aa:	d1e1      	bne.n	8028870 <__gethex+0x1d8>
 80288ac:	e7a2      	b.n	80287f4 <__gethex+0x15c>
 80288ae:	1ea9      	subs	r1, r5, #2
 80288b0:	4620      	mov	r0, r4
 80288b2:	f000 fe5b 	bl	802956c <__any_on>
 80288b6:	2800      	cmp	r0, #0
 80288b8:	d0c2      	beq.n	8028840 <__gethex+0x1a8>
 80288ba:	f04f 0903 	mov.w	r9, #3
 80288be:	e7c1      	b.n	8028844 <__gethex+0x1ac>
 80288c0:	da09      	bge.n	80288d6 <__gethex+0x23e>
 80288c2:	1b75      	subs	r5, r6, r5
 80288c4:	4621      	mov	r1, r4
 80288c6:	9801      	ldr	r0, [sp, #4]
 80288c8:	462a      	mov	r2, r5
 80288ca:	f000 fc19 	bl	8029100 <__lshift>
 80288ce:	1b7f      	subs	r7, r7, r5
 80288d0:	4604      	mov	r4, r0
 80288d2:	f100 0a14 	add.w	sl, r0, #20
 80288d6:	f04f 0900 	mov.w	r9, #0
 80288da:	e7b8      	b.n	802884e <__gethex+0x1b6>
 80288dc:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80288e0:	42bd      	cmp	r5, r7
 80288e2:	dd6f      	ble.n	80289c4 <__gethex+0x32c>
 80288e4:	1bed      	subs	r5, r5, r7
 80288e6:	42ae      	cmp	r6, r5
 80288e8:	dc34      	bgt.n	8028954 <__gethex+0x2bc>
 80288ea:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80288ee:	2b02      	cmp	r3, #2
 80288f0:	d022      	beq.n	8028938 <__gethex+0x2a0>
 80288f2:	2b03      	cmp	r3, #3
 80288f4:	d024      	beq.n	8028940 <__gethex+0x2a8>
 80288f6:	2b01      	cmp	r3, #1
 80288f8:	d115      	bne.n	8028926 <__gethex+0x28e>
 80288fa:	42ae      	cmp	r6, r5
 80288fc:	d113      	bne.n	8028926 <__gethex+0x28e>
 80288fe:	2e01      	cmp	r6, #1
 8028900:	d10b      	bne.n	802891a <__gethex+0x282>
 8028902:	9a02      	ldr	r2, [sp, #8]
 8028904:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8028908:	6013      	str	r3, [r2, #0]
 802890a:	2301      	movs	r3, #1
 802890c:	6123      	str	r3, [r4, #16]
 802890e:	f8ca 3000 	str.w	r3, [sl]
 8028912:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8028914:	2562      	movs	r5, #98	@ 0x62
 8028916:	601c      	str	r4, [r3, #0]
 8028918:	e73a      	b.n	8028790 <__gethex+0xf8>
 802891a:	1e71      	subs	r1, r6, #1
 802891c:	4620      	mov	r0, r4
 802891e:	f000 fe25 	bl	802956c <__any_on>
 8028922:	2800      	cmp	r0, #0
 8028924:	d1ed      	bne.n	8028902 <__gethex+0x26a>
 8028926:	9801      	ldr	r0, [sp, #4]
 8028928:	4621      	mov	r1, r4
 802892a:	f000 f9d9 	bl	8028ce0 <_Bfree>
 802892e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8028930:	2300      	movs	r3, #0
 8028932:	6013      	str	r3, [r2, #0]
 8028934:	2550      	movs	r5, #80	@ 0x50
 8028936:	e72b      	b.n	8028790 <__gethex+0xf8>
 8028938:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802893a:	2b00      	cmp	r3, #0
 802893c:	d1f3      	bne.n	8028926 <__gethex+0x28e>
 802893e:	e7e0      	b.n	8028902 <__gethex+0x26a>
 8028940:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8028942:	2b00      	cmp	r3, #0
 8028944:	d1dd      	bne.n	8028902 <__gethex+0x26a>
 8028946:	e7ee      	b.n	8028926 <__gethex+0x28e>
 8028948:	0803af55 	.word	0x0803af55
 802894c:	0803aff8 	.word	0x0803aff8
 8028950:	0803b009 	.word	0x0803b009
 8028954:	1e6f      	subs	r7, r5, #1
 8028956:	f1b9 0f00 	cmp.w	r9, #0
 802895a:	d130      	bne.n	80289be <__gethex+0x326>
 802895c:	b127      	cbz	r7, 8028968 <__gethex+0x2d0>
 802895e:	4639      	mov	r1, r7
 8028960:	4620      	mov	r0, r4
 8028962:	f000 fe03 	bl	802956c <__any_on>
 8028966:	4681      	mov	r9, r0
 8028968:	117a      	asrs	r2, r7, #5
 802896a:	2301      	movs	r3, #1
 802896c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8028970:	f007 071f 	and.w	r7, r7, #31
 8028974:	40bb      	lsls	r3, r7
 8028976:	4213      	tst	r3, r2
 8028978:	4629      	mov	r1, r5
 802897a:	4620      	mov	r0, r4
 802897c:	bf18      	it	ne
 802897e:	f049 0902 	orrne.w	r9, r9, #2
 8028982:	f7ff fe21 	bl	80285c8 <rshift>
 8028986:	f8d8 7004 	ldr.w	r7, [r8, #4]
 802898a:	1b76      	subs	r6, r6, r5
 802898c:	2502      	movs	r5, #2
 802898e:	f1b9 0f00 	cmp.w	r9, #0
 8028992:	d047      	beq.n	8028a24 <__gethex+0x38c>
 8028994:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8028998:	2b02      	cmp	r3, #2
 802899a:	d015      	beq.n	80289c8 <__gethex+0x330>
 802899c:	2b03      	cmp	r3, #3
 802899e:	d017      	beq.n	80289d0 <__gethex+0x338>
 80289a0:	2b01      	cmp	r3, #1
 80289a2:	d109      	bne.n	80289b8 <__gethex+0x320>
 80289a4:	f019 0f02 	tst.w	r9, #2
 80289a8:	d006      	beq.n	80289b8 <__gethex+0x320>
 80289aa:	f8da 3000 	ldr.w	r3, [sl]
 80289ae:	ea49 0903 	orr.w	r9, r9, r3
 80289b2:	f019 0f01 	tst.w	r9, #1
 80289b6:	d10e      	bne.n	80289d6 <__gethex+0x33e>
 80289b8:	f045 0510 	orr.w	r5, r5, #16
 80289bc:	e032      	b.n	8028a24 <__gethex+0x38c>
 80289be:	f04f 0901 	mov.w	r9, #1
 80289c2:	e7d1      	b.n	8028968 <__gethex+0x2d0>
 80289c4:	2501      	movs	r5, #1
 80289c6:	e7e2      	b.n	802898e <__gethex+0x2f6>
 80289c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80289ca:	f1c3 0301 	rsb	r3, r3, #1
 80289ce:	930f      	str	r3, [sp, #60]	@ 0x3c
 80289d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80289d2:	2b00      	cmp	r3, #0
 80289d4:	d0f0      	beq.n	80289b8 <__gethex+0x320>
 80289d6:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80289da:	f104 0314 	add.w	r3, r4, #20
 80289de:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80289e2:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80289e6:	f04f 0c00 	mov.w	ip, #0
 80289ea:	4618      	mov	r0, r3
 80289ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80289f0:	f1b2 3fff 	cmp.w	r2, #4294967295
 80289f4:	d01b      	beq.n	8028a2e <__gethex+0x396>
 80289f6:	3201      	adds	r2, #1
 80289f8:	6002      	str	r2, [r0, #0]
 80289fa:	2d02      	cmp	r5, #2
 80289fc:	f104 0314 	add.w	r3, r4, #20
 8028a00:	d13c      	bne.n	8028a7c <__gethex+0x3e4>
 8028a02:	f8d8 2000 	ldr.w	r2, [r8]
 8028a06:	3a01      	subs	r2, #1
 8028a08:	42b2      	cmp	r2, r6
 8028a0a:	d109      	bne.n	8028a20 <__gethex+0x388>
 8028a0c:	1171      	asrs	r1, r6, #5
 8028a0e:	2201      	movs	r2, #1
 8028a10:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8028a14:	f006 061f 	and.w	r6, r6, #31
 8028a18:	fa02 f606 	lsl.w	r6, r2, r6
 8028a1c:	421e      	tst	r6, r3
 8028a1e:	d13a      	bne.n	8028a96 <__gethex+0x3fe>
 8028a20:	f045 0520 	orr.w	r5, r5, #32
 8028a24:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8028a26:	601c      	str	r4, [r3, #0]
 8028a28:	9b02      	ldr	r3, [sp, #8]
 8028a2a:	601f      	str	r7, [r3, #0]
 8028a2c:	e6b0      	b.n	8028790 <__gethex+0xf8>
 8028a2e:	4299      	cmp	r1, r3
 8028a30:	f843 cc04 	str.w	ip, [r3, #-4]
 8028a34:	d8d9      	bhi.n	80289ea <__gethex+0x352>
 8028a36:	68a3      	ldr	r3, [r4, #8]
 8028a38:	459b      	cmp	fp, r3
 8028a3a:	db17      	blt.n	8028a6c <__gethex+0x3d4>
 8028a3c:	6861      	ldr	r1, [r4, #4]
 8028a3e:	9801      	ldr	r0, [sp, #4]
 8028a40:	3101      	adds	r1, #1
 8028a42:	f000 f90d 	bl	8028c60 <_Balloc>
 8028a46:	4681      	mov	r9, r0
 8028a48:	b918      	cbnz	r0, 8028a52 <__gethex+0x3ba>
 8028a4a:	4b1a      	ldr	r3, [pc, #104]	@ (8028ab4 <__gethex+0x41c>)
 8028a4c:	4602      	mov	r2, r0
 8028a4e:	2184      	movs	r1, #132	@ 0x84
 8028a50:	e6c5      	b.n	80287de <__gethex+0x146>
 8028a52:	6922      	ldr	r2, [r4, #16]
 8028a54:	3202      	adds	r2, #2
 8028a56:	f104 010c 	add.w	r1, r4, #12
 8028a5a:	0092      	lsls	r2, r2, #2
 8028a5c:	300c      	adds	r0, #12
 8028a5e:	f7fe ff6c 	bl	802793a <memcpy>
 8028a62:	4621      	mov	r1, r4
 8028a64:	9801      	ldr	r0, [sp, #4]
 8028a66:	f000 f93b 	bl	8028ce0 <_Bfree>
 8028a6a:	464c      	mov	r4, r9
 8028a6c:	6923      	ldr	r3, [r4, #16]
 8028a6e:	1c5a      	adds	r2, r3, #1
 8028a70:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8028a74:	6122      	str	r2, [r4, #16]
 8028a76:	2201      	movs	r2, #1
 8028a78:	615a      	str	r2, [r3, #20]
 8028a7a:	e7be      	b.n	80289fa <__gethex+0x362>
 8028a7c:	6922      	ldr	r2, [r4, #16]
 8028a7e:	455a      	cmp	r2, fp
 8028a80:	dd0b      	ble.n	8028a9a <__gethex+0x402>
 8028a82:	2101      	movs	r1, #1
 8028a84:	4620      	mov	r0, r4
 8028a86:	f7ff fd9f 	bl	80285c8 <rshift>
 8028a8a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8028a8e:	3701      	adds	r7, #1
 8028a90:	42bb      	cmp	r3, r7
 8028a92:	f6ff aee0 	blt.w	8028856 <__gethex+0x1be>
 8028a96:	2501      	movs	r5, #1
 8028a98:	e7c2      	b.n	8028a20 <__gethex+0x388>
 8028a9a:	f016 061f 	ands.w	r6, r6, #31
 8028a9e:	d0fa      	beq.n	8028a96 <__gethex+0x3fe>
 8028aa0:	4453      	add	r3, sl
 8028aa2:	f1c6 0620 	rsb	r6, r6, #32
 8028aa6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8028aaa:	f000 f9cb 	bl	8028e44 <__hi0bits>
 8028aae:	42b0      	cmp	r0, r6
 8028ab0:	dbe7      	blt.n	8028a82 <__gethex+0x3ea>
 8028ab2:	e7f0      	b.n	8028a96 <__gethex+0x3fe>
 8028ab4:	0803aff8 	.word	0x0803aff8

08028ab8 <L_shift>:
 8028ab8:	f1c2 0208 	rsb	r2, r2, #8
 8028abc:	0092      	lsls	r2, r2, #2
 8028abe:	b570      	push	{r4, r5, r6, lr}
 8028ac0:	f1c2 0620 	rsb	r6, r2, #32
 8028ac4:	6843      	ldr	r3, [r0, #4]
 8028ac6:	6804      	ldr	r4, [r0, #0]
 8028ac8:	fa03 f506 	lsl.w	r5, r3, r6
 8028acc:	432c      	orrs	r4, r5
 8028ace:	40d3      	lsrs	r3, r2
 8028ad0:	6004      	str	r4, [r0, #0]
 8028ad2:	f840 3f04 	str.w	r3, [r0, #4]!
 8028ad6:	4288      	cmp	r0, r1
 8028ad8:	d3f4      	bcc.n	8028ac4 <L_shift+0xc>
 8028ada:	bd70      	pop	{r4, r5, r6, pc}

08028adc <__match>:
 8028adc:	b530      	push	{r4, r5, lr}
 8028ade:	6803      	ldr	r3, [r0, #0]
 8028ae0:	3301      	adds	r3, #1
 8028ae2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8028ae6:	b914      	cbnz	r4, 8028aee <__match+0x12>
 8028ae8:	6003      	str	r3, [r0, #0]
 8028aea:	2001      	movs	r0, #1
 8028aec:	bd30      	pop	{r4, r5, pc}
 8028aee:	f813 2b01 	ldrb.w	r2, [r3], #1
 8028af2:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8028af6:	2d19      	cmp	r5, #25
 8028af8:	bf98      	it	ls
 8028afa:	3220      	addls	r2, #32
 8028afc:	42a2      	cmp	r2, r4
 8028afe:	d0f0      	beq.n	8028ae2 <__match+0x6>
 8028b00:	2000      	movs	r0, #0
 8028b02:	e7f3      	b.n	8028aec <__match+0x10>

08028b04 <__hexnan>:
 8028b04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028b08:	680b      	ldr	r3, [r1, #0]
 8028b0a:	6801      	ldr	r1, [r0, #0]
 8028b0c:	115e      	asrs	r6, r3, #5
 8028b0e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8028b12:	f013 031f 	ands.w	r3, r3, #31
 8028b16:	b087      	sub	sp, #28
 8028b18:	bf18      	it	ne
 8028b1a:	3604      	addne	r6, #4
 8028b1c:	2500      	movs	r5, #0
 8028b1e:	1f37      	subs	r7, r6, #4
 8028b20:	4682      	mov	sl, r0
 8028b22:	4690      	mov	r8, r2
 8028b24:	9301      	str	r3, [sp, #4]
 8028b26:	f846 5c04 	str.w	r5, [r6, #-4]
 8028b2a:	46b9      	mov	r9, r7
 8028b2c:	463c      	mov	r4, r7
 8028b2e:	9502      	str	r5, [sp, #8]
 8028b30:	46ab      	mov	fp, r5
 8028b32:	784a      	ldrb	r2, [r1, #1]
 8028b34:	1c4b      	adds	r3, r1, #1
 8028b36:	9303      	str	r3, [sp, #12]
 8028b38:	b342      	cbz	r2, 8028b8c <__hexnan+0x88>
 8028b3a:	4610      	mov	r0, r2
 8028b3c:	9105      	str	r1, [sp, #20]
 8028b3e:	9204      	str	r2, [sp, #16]
 8028b40:	f7ff fd94 	bl	802866c <__hexdig_fun>
 8028b44:	2800      	cmp	r0, #0
 8028b46:	d151      	bne.n	8028bec <__hexnan+0xe8>
 8028b48:	9a04      	ldr	r2, [sp, #16]
 8028b4a:	9905      	ldr	r1, [sp, #20]
 8028b4c:	2a20      	cmp	r2, #32
 8028b4e:	d818      	bhi.n	8028b82 <__hexnan+0x7e>
 8028b50:	9b02      	ldr	r3, [sp, #8]
 8028b52:	459b      	cmp	fp, r3
 8028b54:	dd13      	ble.n	8028b7e <__hexnan+0x7a>
 8028b56:	454c      	cmp	r4, r9
 8028b58:	d206      	bcs.n	8028b68 <__hexnan+0x64>
 8028b5a:	2d07      	cmp	r5, #7
 8028b5c:	dc04      	bgt.n	8028b68 <__hexnan+0x64>
 8028b5e:	462a      	mov	r2, r5
 8028b60:	4649      	mov	r1, r9
 8028b62:	4620      	mov	r0, r4
 8028b64:	f7ff ffa8 	bl	8028ab8 <L_shift>
 8028b68:	4544      	cmp	r4, r8
 8028b6a:	d952      	bls.n	8028c12 <__hexnan+0x10e>
 8028b6c:	2300      	movs	r3, #0
 8028b6e:	f1a4 0904 	sub.w	r9, r4, #4
 8028b72:	f844 3c04 	str.w	r3, [r4, #-4]
 8028b76:	f8cd b008 	str.w	fp, [sp, #8]
 8028b7a:	464c      	mov	r4, r9
 8028b7c:	461d      	mov	r5, r3
 8028b7e:	9903      	ldr	r1, [sp, #12]
 8028b80:	e7d7      	b.n	8028b32 <__hexnan+0x2e>
 8028b82:	2a29      	cmp	r2, #41	@ 0x29
 8028b84:	d157      	bne.n	8028c36 <__hexnan+0x132>
 8028b86:	3102      	adds	r1, #2
 8028b88:	f8ca 1000 	str.w	r1, [sl]
 8028b8c:	f1bb 0f00 	cmp.w	fp, #0
 8028b90:	d051      	beq.n	8028c36 <__hexnan+0x132>
 8028b92:	454c      	cmp	r4, r9
 8028b94:	d206      	bcs.n	8028ba4 <__hexnan+0xa0>
 8028b96:	2d07      	cmp	r5, #7
 8028b98:	dc04      	bgt.n	8028ba4 <__hexnan+0xa0>
 8028b9a:	462a      	mov	r2, r5
 8028b9c:	4649      	mov	r1, r9
 8028b9e:	4620      	mov	r0, r4
 8028ba0:	f7ff ff8a 	bl	8028ab8 <L_shift>
 8028ba4:	4544      	cmp	r4, r8
 8028ba6:	d936      	bls.n	8028c16 <__hexnan+0x112>
 8028ba8:	f1a8 0204 	sub.w	r2, r8, #4
 8028bac:	4623      	mov	r3, r4
 8028bae:	f853 1b04 	ldr.w	r1, [r3], #4
 8028bb2:	f842 1f04 	str.w	r1, [r2, #4]!
 8028bb6:	429f      	cmp	r7, r3
 8028bb8:	d2f9      	bcs.n	8028bae <__hexnan+0xaa>
 8028bba:	1b3b      	subs	r3, r7, r4
 8028bbc:	f023 0303 	bic.w	r3, r3, #3
 8028bc0:	3304      	adds	r3, #4
 8028bc2:	3401      	adds	r4, #1
 8028bc4:	3e03      	subs	r6, #3
 8028bc6:	42b4      	cmp	r4, r6
 8028bc8:	bf88      	it	hi
 8028bca:	2304      	movhi	r3, #4
 8028bcc:	4443      	add	r3, r8
 8028bce:	2200      	movs	r2, #0
 8028bd0:	f843 2b04 	str.w	r2, [r3], #4
 8028bd4:	429f      	cmp	r7, r3
 8028bd6:	d2fb      	bcs.n	8028bd0 <__hexnan+0xcc>
 8028bd8:	683b      	ldr	r3, [r7, #0]
 8028bda:	b91b      	cbnz	r3, 8028be4 <__hexnan+0xe0>
 8028bdc:	4547      	cmp	r7, r8
 8028bde:	d128      	bne.n	8028c32 <__hexnan+0x12e>
 8028be0:	2301      	movs	r3, #1
 8028be2:	603b      	str	r3, [r7, #0]
 8028be4:	2005      	movs	r0, #5
 8028be6:	b007      	add	sp, #28
 8028be8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028bec:	3501      	adds	r5, #1
 8028bee:	2d08      	cmp	r5, #8
 8028bf0:	f10b 0b01 	add.w	fp, fp, #1
 8028bf4:	dd06      	ble.n	8028c04 <__hexnan+0x100>
 8028bf6:	4544      	cmp	r4, r8
 8028bf8:	d9c1      	bls.n	8028b7e <__hexnan+0x7a>
 8028bfa:	2300      	movs	r3, #0
 8028bfc:	f844 3c04 	str.w	r3, [r4, #-4]
 8028c00:	2501      	movs	r5, #1
 8028c02:	3c04      	subs	r4, #4
 8028c04:	6822      	ldr	r2, [r4, #0]
 8028c06:	f000 000f 	and.w	r0, r0, #15
 8028c0a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8028c0e:	6020      	str	r0, [r4, #0]
 8028c10:	e7b5      	b.n	8028b7e <__hexnan+0x7a>
 8028c12:	2508      	movs	r5, #8
 8028c14:	e7b3      	b.n	8028b7e <__hexnan+0x7a>
 8028c16:	9b01      	ldr	r3, [sp, #4]
 8028c18:	2b00      	cmp	r3, #0
 8028c1a:	d0dd      	beq.n	8028bd8 <__hexnan+0xd4>
 8028c1c:	f1c3 0320 	rsb	r3, r3, #32
 8028c20:	f04f 32ff 	mov.w	r2, #4294967295
 8028c24:	40da      	lsrs	r2, r3
 8028c26:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8028c2a:	4013      	ands	r3, r2
 8028c2c:	f846 3c04 	str.w	r3, [r6, #-4]
 8028c30:	e7d2      	b.n	8028bd8 <__hexnan+0xd4>
 8028c32:	3f04      	subs	r7, #4
 8028c34:	e7d0      	b.n	8028bd8 <__hexnan+0xd4>
 8028c36:	2004      	movs	r0, #4
 8028c38:	e7d5      	b.n	8028be6 <__hexnan+0xe2>

08028c3a <__ascii_mbtowc>:
 8028c3a:	b082      	sub	sp, #8
 8028c3c:	b901      	cbnz	r1, 8028c40 <__ascii_mbtowc+0x6>
 8028c3e:	a901      	add	r1, sp, #4
 8028c40:	b142      	cbz	r2, 8028c54 <__ascii_mbtowc+0x1a>
 8028c42:	b14b      	cbz	r3, 8028c58 <__ascii_mbtowc+0x1e>
 8028c44:	7813      	ldrb	r3, [r2, #0]
 8028c46:	600b      	str	r3, [r1, #0]
 8028c48:	7812      	ldrb	r2, [r2, #0]
 8028c4a:	1e10      	subs	r0, r2, #0
 8028c4c:	bf18      	it	ne
 8028c4e:	2001      	movne	r0, #1
 8028c50:	b002      	add	sp, #8
 8028c52:	4770      	bx	lr
 8028c54:	4610      	mov	r0, r2
 8028c56:	e7fb      	b.n	8028c50 <__ascii_mbtowc+0x16>
 8028c58:	f06f 0001 	mvn.w	r0, #1
 8028c5c:	e7f8      	b.n	8028c50 <__ascii_mbtowc+0x16>
	...

08028c60 <_Balloc>:
 8028c60:	b570      	push	{r4, r5, r6, lr}
 8028c62:	69c6      	ldr	r6, [r0, #28]
 8028c64:	4604      	mov	r4, r0
 8028c66:	460d      	mov	r5, r1
 8028c68:	b976      	cbnz	r6, 8028c88 <_Balloc+0x28>
 8028c6a:	2010      	movs	r0, #16
 8028c6c:	f7fc fe9a 	bl	80259a4 <malloc>
 8028c70:	4602      	mov	r2, r0
 8028c72:	61e0      	str	r0, [r4, #28]
 8028c74:	b920      	cbnz	r0, 8028c80 <_Balloc+0x20>
 8028c76:	4b18      	ldr	r3, [pc, #96]	@ (8028cd8 <_Balloc+0x78>)
 8028c78:	4818      	ldr	r0, [pc, #96]	@ (8028cdc <_Balloc+0x7c>)
 8028c7a:	216b      	movs	r1, #107	@ 0x6b
 8028c7c:	f7fc fe50 	bl	8025920 <__assert_func>
 8028c80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8028c84:	6006      	str	r6, [r0, #0]
 8028c86:	60c6      	str	r6, [r0, #12]
 8028c88:	69e6      	ldr	r6, [r4, #28]
 8028c8a:	68f3      	ldr	r3, [r6, #12]
 8028c8c:	b183      	cbz	r3, 8028cb0 <_Balloc+0x50>
 8028c8e:	69e3      	ldr	r3, [r4, #28]
 8028c90:	68db      	ldr	r3, [r3, #12]
 8028c92:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8028c96:	b9b8      	cbnz	r0, 8028cc8 <_Balloc+0x68>
 8028c98:	2101      	movs	r1, #1
 8028c9a:	fa01 f605 	lsl.w	r6, r1, r5
 8028c9e:	1d72      	adds	r2, r6, #5
 8028ca0:	0092      	lsls	r2, r2, #2
 8028ca2:	4620      	mov	r0, r4
 8028ca4:	f7fc fe6a 	bl	802597c <_calloc_r>
 8028ca8:	b160      	cbz	r0, 8028cc4 <_Balloc+0x64>
 8028caa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8028cae:	e00e      	b.n	8028cce <_Balloc+0x6e>
 8028cb0:	2221      	movs	r2, #33	@ 0x21
 8028cb2:	2104      	movs	r1, #4
 8028cb4:	4620      	mov	r0, r4
 8028cb6:	f7fc fe61 	bl	802597c <_calloc_r>
 8028cba:	69e3      	ldr	r3, [r4, #28]
 8028cbc:	60f0      	str	r0, [r6, #12]
 8028cbe:	68db      	ldr	r3, [r3, #12]
 8028cc0:	2b00      	cmp	r3, #0
 8028cc2:	d1e4      	bne.n	8028c8e <_Balloc+0x2e>
 8028cc4:	2000      	movs	r0, #0
 8028cc6:	bd70      	pop	{r4, r5, r6, pc}
 8028cc8:	6802      	ldr	r2, [r0, #0]
 8028cca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8028cce:	2300      	movs	r3, #0
 8028cd0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8028cd4:	e7f7      	b.n	8028cc6 <_Balloc+0x66>
 8028cd6:	bf00      	nop
 8028cd8:	0803aee6 	.word	0x0803aee6
 8028cdc:	0803b069 	.word	0x0803b069

08028ce0 <_Bfree>:
 8028ce0:	b570      	push	{r4, r5, r6, lr}
 8028ce2:	69c6      	ldr	r6, [r0, #28]
 8028ce4:	4605      	mov	r5, r0
 8028ce6:	460c      	mov	r4, r1
 8028ce8:	b976      	cbnz	r6, 8028d08 <_Bfree+0x28>
 8028cea:	2010      	movs	r0, #16
 8028cec:	f7fc fe5a 	bl	80259a4 <malloc>
 8028cf0:	4602      	mov	r2, r0
 8028cf2:	61e8      	str	r0, [r5, #28]
 8028cf4:	b920      	cbnz	r0, 8028d00 <_Bfree+0x20>
 8028cf6:	4b09      	ldr	r3, [pc, #36]	@ (8028d1c <_Bfree+0x3c>)
 8028cf8:	4809      	ldr	r0, [pc, #36]	@ (8028d20 <_Bfree+0x40>)
 8028cfa:	218f      	movs	r1, #143	@ 0x8f
 8028cfc:	f7fc fe10 	bl	8025920 <__assert_func>
 8028d00:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8028d04:	6006      	str	r6, [r0, #0]
 8028d06:	60c6      	str	r6, [r0, #12]
 8028d08:	b13c      	cbz	r4, 8028d1a <_Bfree+0x3a>
 8028d0a:	69eb      	ldr	r3, [r5, #28]
 8028d0c:	6862      	ldr	r2, [r4, #4]
 8028d0e:	68db      	ldr	r3, [r3, #12]
 8028d10:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8028d14:	6021      	str	r1, [r4, #0]
 8028d16:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8028d1a:	bd70      	pop	{r4, r5, r6, pc}
 8028d1c:	0803aee6 	.word	0x0803aee6
 8028d20:	0803b069 	.word	0x0803b069

08028d24 <__multadd>:
 8028d24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028d28:	690d      	ldr	r5, [r1, #16]
 8028d2a:	4607      	mov	r7, r0
 8028d2c:	460c      	mov	r4, r1
 8028d2e:	461e      	mov	r6, r3
 8028d30:	f101 0c14 	add.w	ip, r1, #20
 8028d34:	2000      	movs	r0, #0
 8028d36:	f8dc 3000 	ldr.w	r3, [ip]
 8028d3a:	b299      	uxth	r1, r3
 8028d3c:	fb02 6101 	mla	r1, r2, r1, r6
 8028d40:	0c1e      	lsrs	r6, r3, #16
 8028d42:	0c0b      	lsrs	r3, r1, #16
 8028d44:	fb02 3306 	mla	r3, r2, r6, r3
 8028d48:	b289      	uxth	r1, r1
 8028d4a:	3001      	adds	r0, #1
 8028d4c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8028d50:	4285      	cmp	r5, r0
 8028d52:	f84c 1b04 	str.w	r1, [ip], #4
 8028d56:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8028d5a:	dcec      	bgt.n	8028d36 <__multadd+0x12>
 8028d5c:	b30e      	cbz	r6, 8028da2 <__multadd+0x7e>
 8028d5e:	68a3      	ldr	r3, [r4, #8]
 8028d60:	42ab      	cmp	r3, r5
 8028d62:	dc19      	bgt.n	8028d98 <__multadd+0x74>
 8028d64:	6861      	ldr	r1, [r4, #4]
 8028d66:	4638      	mov	r0, r7
 8028d68:	3101      	adds	r1, #1
 8028d6a:	f7ff ff79 	bl	8028c60 <_Balloc>
 8028d6e:	4680      	mov	r8, r0
 8028d70:	b928      	cbnz	r0, 8028d7e <__multadd+0x5a>
 8028d72:	4602      	mov	r2, r0
 8028d74:	4b0c      	ldr	r3, [pc, #48]	@ (8028da8 <__multadd+0x84>)
 8028d76:	480d      	ldr	r0, [pc, #52]	@ (8028dac <__multadd+0x88>)
 8028d78:	21ba      	movs	r1, #186	@ 0xba
 8028d7a:	f7fc fdd1 	bl	8025920 <__assert_func>
 8028d7e:	6922      	ldr	r2, [r4, #16]
 8028d80:	3202      	adds	r2, #2
 8028d82:	f104 010c 	add.w	r1, r4, #12
 8028d86:	0092      	lsls	r2, r2, #2
 8028d88:	300c      	adds	r0, #12
 8028d8a:	f7fe fdd6 	bl	802793a <memcpy>
 8028d8e:	4621      	mov	r1, r4
 8028d90:	4638      	mov	r0, r7
 8028d92:	f7ff ffa5 	bl	8028ce0 <_Bfree>
 8028d96:	4644      	mov	r4, r8
 8028d98:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8028d9c:	3501      	adds	r5, #1
 8028d9e:	615e      	str	r6, [r3, #20]
 8028da0:	6125      	str	r5, [r4, #16]
 8028da2:	4620      	mov	r0, r4
 8028da4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8028da8:	0803aff8 	.word	0x0803aff8
 8028dac:	0803b069 	.word	0x0803b069

08028db0 <__s2b>:
 8028db0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8028db4:	460c      	mov	r4, r1
 8028db6:	4615      	mov	r5, r2
 8028db8:	461f      	mov	r7, r3
 8028dba:	2209      	movs	r2, #9
 8028dbc:	3308      	adds	r3, #8
 8028dbe:	4606      	mov	r6, r0
 8028dc0:	fb93 f3f2 	sdiv	r3, r3, r2
 8028dc4:	2100      	movs	r1, #0
 8028dc6:	2201      	movs	r2, #1
 8028dc8:	429a      	cmp	r2, r3
 8028dca:	db09      	blt.n	8028de0 <__s2b+0x30>
 8028dcc:	4630      	mov	r0, r6
 8028dce:	f7ff ff47 	bl	8028c60 <_Balloc>
 8028dd2:	b940      	cbnz	r0, 8028de6 <__s2b+0x36>
 8028dd4:	4602      	mov	r2, r0
 8028dd6:	4b19      	ldr	r3, [pc, #100]	@ (8028e3c <__s2b+0x8c>)
 8028dd8:	4819      	ldr	r0, [pc, #100]	@ (8028e40 <__s2b+0x90>)
 8028dda:	21d3      	movs	r1, #211	@ 0xd3
 8028ddc:	f7fc fda0 	bl	8025920 <__assert_func>
 8028de0:	0052      	lsls	r2, r2, #1
 8028de2:	3101      	adds	r1, #1
 8028de4:	e7f0      	b.n	8028dc8 <__s2b+0x18>
 8028de6:	9b08      	ldr	r3, [sp, #32]
 8028de8:	6143      	str	r3, [r0, #20]
 8028dea:	2d09      	cmp	r5, #9
 8028dec:	f04f 0301 	mov.w	r3, #1
 8028df0:	6103      	str	r3, [r0, #16]
 8028df2:	dd16      	ble.n	8028e22 <__s2b+0x72>
 8028df4:	f104 0909 	add.w	r9, r4, #9
 8028df8:	46c8      	mov	r8, r9
 8028dfa:	442c      	add	r4, r5
 8028dfc:	f818 3b01 	ldrb.w	r3, [r8], #1
 8028e00:	4601      	mov	r1, r0
 8028e02:	3b30      	subs	r3, #48	@ 0x30
 8028e04:	220a      	movs	r2, #10
 8028e06:	4630      	mov	r0, r6
 8028e08:	f7ff ff8c 	bl	8028d24 <__multadd>
 8028e0c:	45a0      	cmp	r8, r4
 8028e0e:	d1f5      	bne.n	8028dfc <__s2b+0x4c>
 8028e10:	f1a5 0408 	sub.w	r4, r5, #8
 8028e14:	444c      	add	r4, r9
 8028e16:	1b2d      	subs	r5, r5, r4
 8028e18:	1963      	adds	r3, r4, r5
 8028e1a:	42bb      	cmp	r3, r7
 8028e1c:	db04      	blt.n	8028e28 <__s2b+0x78>
 8028e1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8028e22:	340a      	adds	r4, #10
 8028e24:	2509      	movs	r5, #9
 8028e26:	e7f6      	b.n	8028e16 <__s2b+0x66>
 8028e28:	f814 3b01 	ldrb.w	r3, [r4], #1
 8028e2c:	4601      	mov	r1, r0
 8028e2e:	3b30      	subs	r3, #48	@ 0x30
 8028e30:	220a      	movs	r2, #10
 8028e32:	4630      	mov	r0, r6
 8028e34:	f7ff ff76 	bl	8028d24 <__multadd>
 8028e38:	e7ee      	b.n	8028e18 <__s2b+0x68>
 8028e3a:	bf00      	nop
 8028e3c:	0803aff8 	.word	0x0803aff8
 8028e40:	0803b069 	.word	0x0803b069

08028e44 <__hi0bits>:
 8028e44:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8028e48:	4603      	mov	r3, r0
 8028e4a:	bf36      	itet	cc
 8028e4c:	0403      	lslcc	r3, r0, #16
 8028e4e:	2000      	movcs	r0, #0
 8028e50:	2010      	movcc	r0, #16
 8028e52:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8028e56:	bf3c      	itt	cc
 8028e58:	021b      	lslcc	r3, r3, #8
 8028e5a:	3008      	addcc	r0, #8
 8028e5c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8028e60:	bf3c      	itt	cc
 8028e62:	011b      	lslcc	r3, r3, #4
 8028e64:	3004      	addcc	r0, #4
 8028e66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8028e6a:	bf3c      	itt	cc
 8028e6c:	009b      	lslcc	r3, r3, #2
 8028e6e:	3002      	addcc	r0, #2
 8028e70:	2b00      	cmp	r3, #0
 8028e72:	db05      	blt.n	8028e80 <__hi0bits+0x3c>
 8028e74:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8028e78:	f100 0001 	add.w	r0, r0, #1
 8028e7c:	bf08      	it	eq
 8028e7e:	2020      	moveq	r0, #32
 8028e80:	4770      	bx	lr

08028e82 <__lo0bits>:
 8028e82:	6803      	ldr	r3, [r0, #0]
 8028e84:	4602      	mov	r2, r0
 8028e86:	f013 0007 	ands.w	r0, r3, #7
 8028e8a:	d00b      	beq.n	8028ea4 <__lo0bits+0x22>
 8028e8c:	07d9      	lsls	r1, r3, #31
 8028e8e:	d421      	bmi.n	8028ed4 <__lo0bits+0x52>
 8028e90:	0798      	lsls	r0, r3, #30
 8028e92:	bf49      	itett	mi
 8028e94:	085b      	lsrmi	r3, r3, #1
 8028e96:	089b      	lsrpl	r3, r3, #2
 8028e98:	2001      	movmi	r0, #1
 8028e9a:	6013      	strmi	r3, [r2, #0]
 8028e9c:	bf5c      	itt	pl
 8028e9e:	6013      	strpl	r3, [r2, #0]
 8028ea0:	2002      	movpl	r0, #2
 8028ea2:	4770      	bx	lr
 8028ea4:	b299      	uxth	r1, r3
 8028ea6:	b909      	cbnz	r1, 8028eac <__lo0bits+0x2a>
 8028ea8:	0c1b      	lsrs	r3, r3, #16
 8028eaa:	2010      	movs	r0, #16
 8028eac:	b2d9      	uxtb	r1, r3
 8028eae:	b909      	cbnz	r1, 8028eb4 <__lo0bits+0x32>
 8028eb0:	3008      	adds	r0, #8
 8028eb2:	0a1b      	lsrs	r3, r3, #8
 8028eb4:	0719      	lsls	r1, r3, #28
 8028eb6:	bf04      	itt	eq
 8028eb8:	091b      	lsreq	r3, r3, #4
 8028eba:	3004      	addeq	r0, #4
 8028ebc:	0799      	lsls	r1, r3, #30
 8028ebe:	bf04      	itt	eq
 8028ec0:	089b      	lsreq	r3, r3, #2
 8028ec2:	3002      	addeq	r0, #2
 8028ec4:	07d9      	lsls	r1, r3, #31
 8028ec6:	d403      	bmi.n	8028ed0 <__lo0bits+0x4e>
 8028ec8:	085b      	lsrs	r3, r3, #1
 8028eca:	f100 0001 	add.w	r0, r0, #1
 8028ece:	d003      	beq.n	8028ed8 <__lo0bits+0x56>
 8028ed0:	6013      	str	r3, [r2, #0]
 8028ed2:	4770      	bx	lr
 8028ed4:	2000      	movs	r0, #0
 8028ed6:	4770      	bx	lr
 8028ed8:	2020      	movs	r0, #32
 8028eda:	4770      	bx	lr

08028edc <__i2b>:
 8028edc:	b510      	push	{r4, lr}
 8028ede:	460c      	mov	r4, r1
 8028ee0:	2101      	movs	r1, #1
 8028ee2:	f7ff febd 	bl	8028c60 <_Balloc>
 8028ee6:	4602      	mov	r2, r0
 8028ee8:	b928      	cbnz	r0, 8028ef6 <__i2b+0x1a>
 8028eea:	4b05      	ldr	r3, [pc, #20]	@ (8028f00 <__i2b+0x24>)
 8028eec:	4805      	ldr	r0, [pc, #20]	@ (8028f04 <__i2b+0x28>)
 8028eee:	f240 1145 	movw	r1, #325	@ 0x145
 8028ef2:	f7fc fd15 	bl	8025920 <__assert_func>
 8028ef6:	2301      	movs	r3, #1
 8028ef8:	6144      	str	r4, [r0, #20]
 8028efa:	6103      	str	r3, [r0, #16]
 8028efc:	bd10      	pop	{r4, pc}
 8028efe:	bf00      	nop
 8028f00:	0803aff8 	.word	0x0803aff8
 8028f04:	0803b069 	.word	0x0803b069

08028f08 <__multiply>:
 8028f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028f0c:	4617      	mov	r7, r2
 8028f0e:	690a      	ldr	r2, [r1, #16]
 8028f10:	693b      	ldr	r3, [r7, #16]
 8028f12:	429a      	cmp	r2, r3
 8028f14:	bfa8      	it	ge
 8028f16:	463b      	movge	r3, r7
 8028f18:	4689      	mov	r9, r1
 8028f1a:	bfa4      	itt	ge
 8028f1c:	460f      	movge	r7, r1
 8028f1e:	4699      	movge	r9, r3
 8028f20:	693d      	ldr	r5, [r7, #16]
 8028f22:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8028f26:	68bb      	ldr	r3, [r7, #8]
 8028f28:	6879      	ldr	r1, [r7, #4]
 8028f2a:	eb05 060a 	add.w	r6, r5, sl
 8028f2e:	42b3      	cmp	r3, r6
 8028f30:	b085      	sub	sp, #20
 8028f32:	bfb8      	it	lt
 8028f34:	3101      	addlt	r1, #1
 8028f36:	f7ff fe93 	bl	8028c60 <_Balloc>
 8028f3a:	b930      	cbnz	r0, 8028f4a <__multiply+0x42>
 8028f3c:	4602      	mov	r2, r0
 8028f3e:	4b41      	ldr	r3, [pc, #260]	@ (8029044 <__multiply+0x13c>)
 8028f40:	4841      	ldr	r0, [pc, #260]	@ (8029048 <__multiply+0x140>)
 8028f42:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8028f46:	f7fc fceb 	bl	8025920 <__assert_func>
 8028f4a:	f100 0414 	add.w	r4, r0, #20
 8028f4e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8028f52:	4623      	mov	r3, r4
 8028f54:	2200      	movs	r2, #0
 8028f56:	4573      	cmp	r3, lr
 8028f58:	d320      	bcc.n	8028f9c <__multiply+0x94>
 8028f5a:	f107 0814 	add.w	r8, r7, #20
 8028f5e:	f109 0114 	add.w	r1, r9, #20
 8028f62:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8028f66:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8028f6a:	9302      	str	r3, [sp, #8]
 8028f6c:	1beb      	subs	r3, r5, r7
 8028f6e:	3b15      	subs	r3, #21
 8028f70:	f023 0303 	bic.w	r3, r3, #3
 8028f74:	3304      	adds	r3, #4
 8028f76:	3715      	adds	r7, #21
 8028f78:	42bd      	cmp	r5, r7
 8028f7a:	bf38      	it	cc
 8028f7c:	2304      	movcc	r3, #4
 8028f7e:	9301      	str	r3, [sp, #4]
 8028f80:	9b02      	ldr	r3, [sp, #8]
 8028f82:	9103      	str	r1, [sp, #12]
 8028f84:	428b      	cmp	r3, r1
 8028f86:	d80c      	bhi.n	8028fa2 <__multiply+0x9a>
 8028f88:	2e00      	cmp	r6, #0
 8028f8a:	dd03      	ble.n	8028f94 <__multiply+0x8c>
 8028f8c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8028f90:	2b00      	cmp	r3, #0
 8028f92:	d055      	beq.n	8029040 <__multiply+0x138>
 8028f94:	6106      	str	r6, [r0, #16]
 8028f96:	b005      	add	sp, #20
 8028f98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028f9c:	f843 2b04 	str.w	r2, [r3], #4
 8028fa0:	e7d9      	b.n	8028f56 <__multiply+0x4e>
 8028fa2:	f8b1 a000 	ldrh.w	sl, [r1]
 8028fa6:	f1ba 0f00 	cmp.w	sl, #0
 8028faa:	d01f      	beq.n	8028fec <__multiply+0xe4>
 8028fac:	46c4      	mov	ip, r8
 8028fae:	46a1      	mov	r9, r4
 8028fb0:	2700      	movs	r7, #0
 8028fb2:	f85c 2b04 	ldr.w	r2, [ip], #4
 8028fb6:	f8d9 3000 	ldr.w	r3, [r9]
 8028fba:	fa1f fb82 	uxth.w	fp, r2
 8028fbe:	b29b      	uxth	r3, r3
 8028fc0:	fb0a 330b 	mla	r3, sl, fp, r3
 8028fc4:	443b      	add	r3, r7
 8028fc6:	f8d9 7000 	ldr.w	r7, [r9]
 8028fca:	0c12      	lsrs	r2, r2, #16
 8028fcc:	0c3f      	lsrs	r7, r7, #16
 8028fce:	fb0a 7202 	mla	r2, sl, r2, r7
 8028fd2:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8028fd6:	b29b      	uxth	r3, r3
 8028fd8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8028fdc:	4565      	cmp	r5, ip
 8028fde:	f849 3b04 	str.w	r3, [r9], #4
 8028fe2:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8028fe6:	d8e4      	bhi.n	8028fb2 <__multiply+0xaa>
 8028fe8:	9b01      	ldr	r3, [sp, #4]
 8028fea:	50e7      	str	r7, [r4, r3]
 8028fec:	9b03      	ldr	r3, [sp, #12]
 8028fee:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8028ff2:	3104      	adds	r1, #4
 8028ff4:	f1b9 0f00 	cmp.w	r9, #0
 8028ff8:	d020      	beq.n	802903c <__multiply+0x134>
 8028ffa:	6823      	ldr	r3, [r4, #0]
 8028ffc:	4647      	mov	r7, r8
 8028ffe:	46a4      	mov	ip, r4
 8029000:	f04f 0a00 	mov.w	sl, #0
 8029004:	f8b7 b000 	ldrh.w	fp, [r7]
 8029008:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 802900c:	fb09 220b 	mla	r2, r9, fp, r2
 8029010:	4452      	add	r2, sl
 8029012:	b29b      	uxth	r3, r3
 8029014:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8029018:	f84c 3b04 	str.w	r3, [ip], #4
 802901c:	f857 3b04 	ldr.w	r3, [r7], #4
 8029020:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8029024:	f8bc 3000 	ldrh.w	r3, [ip]
 8029028:	fb09 330a 	mla	r3, r9, sl, r3
 802902c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8029030:	42bd      	cmp	r5, r7
 8029032:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8029036:	d8e5      	bhi.n	8029004 <__multiply+0xfc>
 8029038:	9a01      	ldr	r2, [sp, #4]
 802903a:	50a3      	str	r3, [r4, r2]
 802903c:	3404      	adds	r4, #4
 802903e:	e79f      	b.n	8028f80 <__multiply+0x78>
 8029040:	3e01      	subs	r6, #1
 8029042:	e7a1      	b.n	8028f88 <__multiply+0x80>
 8029044:	0803aff8 	.word	0x0803aff8
 8029048:	0803b069 	.word	0x0803b069

0802904c <__pow5mult>:
 802904c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8029050:	4615      	mov	r5, r2
 8029052:	f012 0203 	ands.w	r2, r2, #3
 8029056:	4607      	mov	r7, r0
 8029058:	460e      	mov	r6, r1
 802905a:	d007      	beq.n	802906c <__pow5mult+0x20>
 802905c:	4c25      	ldr	r4, [pc, #148]	@ (80290f4 <__pow5mult+0xa8>)
 802905e:	3a01      	subs	r2, #1
 8029060:	2300      	movs	r3, #0
 8029062:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8029066:	f7ff fe5d 	bl	8028d24 <__multadd>
 802906a:	4606      	mov	r6, r0
 802906c:	10ad      	asrs	r5, r5, #2
 802906e:	d03d      	beq.n	80290ec <__pow5mult+0xa0>
 8029070:	69fc      	ldr	r4, [r7, #28]
 8029072:	b97c      	cbnz	r4, 8029094 <__pow5mult+0x48>
 8029074:	2010      	movs	r0, #16
 8029076:	f7fc fc95 	bl	80259a4 <malloc>
 802907a:	4602      	mov	r2, r0
 802907c:	61f8      	str	r0, [r7, #28]
 802907e:	b928      	cbnz	r0, 802908c <__pow5mult+0x40>
 8029080:	4b1d      	ldr	r3, [pc, #116]	@ (80290f8 <__pow5mult+0xac>)
 8029082:	481e      	ldr	r0, [pc, #120]	@ (80290fc <__pow5mult+0xb0>)
 8029084:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8029088:	f7fc fc4a 	bl	8025920 <__assert_func>
 802908c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8029090:	6004      	str	r4, [r0, #0]
 8029092:	60c4      	str	r4, [r0, #12]
 8029094:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8029098:	f8d8 4008 	ldr.w	r4, [r8, #8]
 802909c:	b94c      	cbnz	r4, 80290b2 <__pow5mult+0x66>
 802909e:	f240 2171 	movw	r1, #625	@ 0x271
 80290a2:	4638      	mov	r0, r7
 80290a4:	f7ff ff1a 	bl	8028edc <__i2b>
 80290a8:	2300      	movs	r3, #0
 80290aa:	f8c8 0008 	str.w	r0, [r8, #8]
 80290ae:	4604      	mov	r4, r0
 80290b0:	6003      	str	r3, [r0, #0]
 80290b2:	f04f 0900 	mov.w	r9, #0
 80290b6:	07eb      	lsls	r3, r5, #31
 80290b8:	d50a      	bpl.n	80290d0 <__pow5mult+0x84>
 80290ba:	4631      	mov	r1, r6
 80290bc:	4622      	mov	r2, r4
 80290be:	4638      	mov	r0, r7
 80290c0:	f7ff ff22 	bl	8028f08 <__multiply>
 80290c4:	4631      	mov	r1, r6
 80290c6:	4680      	mov	r8, r0
 80290c8:	4638      	mov	r0, r7
 80290ca:	f7ff fe09 	bl	8028ce0 <_Bfree>
 80290ce:	4646      	mov	r6, r8
 80290d0:	106d      	asrs	r5, r5, #1
 80290d2:	d00b      	beq.n	80290ec <__pow5mult+0xa0>
 80290d4:	6820      	ldr	r0, [r4, #0]
 80290d6:	b938      	cbnz	r0, 80290e8 <__pow5mult+0x9c>
 80290d8:	4622      	mov	r2, r4
 80290da:	4621      	mov	r1, r4
 80290dc:	4638      	mov	r0, r7
 80290de:	f7ff ff13 	bl	8028f08 <__multiply>
 80290e2:	6020      	str	r0, [r4, #0]
 80290e4:	f8c0 9000 	str.w	r9, [r0]
 80290e8:	4604      	mov	r4, r0
 80290ea:	e7e4      	b.n	80290b6 <__pow5mult+0x6a>
 80290ec:	4630      	mov	r0, r6
 80290ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80290f2:	bf00      	nop
 80290f4:	0803b22c 	.word	0x0803b22c
 80290f8:	0803aee6 	.word	0x0803aee6
 80290fc:	0803b069 	.word	0x0803b069

08029100 <__lshift>:
 8029100:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8029104:	460c      	mov	r4, r1
 8029106:	6849      	ldr	r1, [r1, #4]
 8029108:	6923      	ldr	r3, [r4, #16]
 802910a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 802910e:	68a3      	ldr	r3, [r4, #8]
 8029110:	4607      	mov	r7, r0
 8029112:	4691      	mov	r9, r2
 8029114:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8029118:	f108 0601 	add.w	r6, r8, #1
 802911c:	42b3      	cmp	r3, r6
 802911e:	db0b      	blt.n	8029138 <__lshift+0x38>
 8029120:	4638      	mov	r0, r7
 8029122:	f7ff fd9d 	bl	8028c60 <_Balloc>
 8029126:	4605      	mov	r5, r0
 8029128:	b948      	cbnz	r0, 802913e <__lshift+0x3e>
 802912a:	4602      	mov	r2, r0
 802912c:	4b28      	ldr	r3, [pc, #160]	@ (80291d0 <__lshift+0xd0>)
 802912e:	4829      	ldr	r0, [pc, #164]	@ (80291d4 <__lshift+0xd4>)
 8029130:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8029134:	f7fc fbf4 	bl	8025920 <__assert_func>
 8029138:	3101      	adds	r1, #1
 802913a:	005b      	lsls	r3, r3, #1
 802913c:	e7ee      	b.n	802911c <__lshift+0x1c>
 802913e:	2300      	movs	r3, #0
 8029140:	f100 0114 	add.w	r1, r0, #20
 8029144:	f100 0210 	add.w	r2, r0, #16
 8029148:	4618      	mov	r0, r3
 802914a:	4553      	cmp	r3, sl
 802914c:	db33      	blt.n	80291b6 <__lshift+0xb6>
 802914e:	6920      	ldr	r0, [r4, #16]
 8029150:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8029154:	f104 0314 	add.w	r3, r4, #20
 8029158:	f019 091f 	ands.w	r9, r9, #31
 802915c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8029160:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8029164:	d02b      	beq.n	80291be <__lshift+0xbe>
 8029166:	f1c9 0e20 	rsb	lr, r9, #32
 802916a:	468a      	mov	sl, r1
 802916c:	2200      	movs	r2, #0
 802916e:	6818      	ldr	r0, [r3, #0]
 8029170:	fa00 f009 	lsl.w	r0, r0, r9
 8029174:	4310      	orrs	r0, r2
 8029176:	f84a 0b04 	str.w	r0, [sl], #4
 802917a:	f853 2b04 	ldr.w	r2, [r3], #4
 802917e:	459c      	cmp	ip, r3
 8029180:	fa22 f20e 	lsr.w	r2, r2, lr
 8029184:	d8f3      	bhi.n	802916e <__lshift+0x6e>
 8029186:	ebac 0304 	sub.w	r3, ip, r4
 802918a:	3b15      	subs	r3, #21
 802918c:	f023 0303 	bic.w	r3, r3, #3
 8029190:	3304      	adds	r3, #4
 8029192:	f104 0015 	add.w	r0, r4, #21
 8029196:	4560      	cmp	r0, ip
 8029198:	bf88      	it	hi
 802919a:	2304      	movhi	r3, #4
 802919c:	50ca      	str	r2, [r1, r3]
 802919e:	b10a      	cbz	r2, 80291a4 <__lshift+0xa4>
 80291a0:	f108 0602 	add.w	r6, r8, #2
 80291a4:	3e01      	subs	r6, #1
 80291a6:	4638      	mov	r0, r7
 80291a8:	612e      	str	r6, [r5, #16]
 80291aa:	4621      	mov	r1, r4
 80291ac:	f7ff fd98 	bl	8028ce0 <_Bfree>
 80291b0:	4628      	mov	r0, r5
 80291b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80291b6:	f842 0f04 	str.w	r0, [r2, #4]!
 80291ba:	3301      	adds	r3, #1
 80291bc:	e7c5      	b.n	802914a <__lshift+0x4a>
 80291be:	3904      	subs	r1, #4
 80291c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80291c4:	f841 2f04 	str.w	r2, [r1, #4]!
 80291c8:	459c      	cmp	ip, r3
 80291ca:	d8f9      	bhi.n	80291c0 <__lshift+0xc0>
 80291cc:	e7ea      	b.n	80291a4 <__lshift+0xa4>
 80291ce:	bf00      	nop
 80291d0:	0803aff8 	.word	0x0803aff8
 80291d4:	0803b069 	.word	0x0803b069

080291d8 <__mcmp>:
 80291d8:	690a      	ldr	r2, [r1, #16]
 80291da:	4603      	mov	r3, r0
 80291dc:	6900      	ldr	r0, [r0, #16]
 80291de:	1a80      	subs	r0, r0, r2
 80291e0:	b530      	push	{r4, r5, lr}
 80291e2:	d10e      	bne.n	8029202 <__mcmp+0x2a>
 80291e4:	3314      	adds	r3, #20
 80291e6:	3114      	adds	r1, #20
 80291e8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80291ec:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80291f0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80291f4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80291f8:	4295      	cmp	r5, r2
 80291fa:	d003      	beq.n	8029204 <__mcmp+0x2c>
 80291fc:	d205      	bcs.n	802920a <__mcmp+0x32>
 80291fe:	f04f 30ff 	mov.w	r0, #4294967295
 8029202:	bd30      	pop	{r4, r5, pc}
 8029204:	42a3      	cmp	r3, r4
 8029206:	d3f3      	bcc.n	80291f0 <__mcmp+0x18>
 8029208:	e7fb      	b.n	8029202 <__mcmp+0x2a>
 802920a:	2001      	movs	r0, #1
 802920c:	e7f9      	b.n	8029202 <__mcmp+0x2a>
	...

08029210 <__mdiff>:
 8029210:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029214:	4689      	mov	r9, r1
 8029216:	4606      	mov	r6, r0
 8029218:	4611      	mov	r1, r2
 802921a:	4648      	mov	r0, r9
 802921c:	4614      	mov	r4, r2
 802921e:	f7ff ffdb 	bl	80291d8 <__mcmp>
 8029222:	1e05      	subs	r5, r0, #0
 8029224:	d112      	bne.n	802924c <__mdiff+0x3c>
 8029226:	4629      	mov	r1, r5
 8029228:	4630      	mov	r0, r6
 802922a:	f7ff fd19 	bl	8028c60 <_Balloc>
 802922e:	4602      	mov	r2, r0
 8029230:	b928      	cbnz	r0, 802923e <__mdiff+0x2e>
 8029232:	4b3f      	ldr	r3, [pc, #252]	@ (8029330 <__mdiff+0x120>)
 8029234:	f240 2137 	movw	r1, #567	@ 0x237
 8029238:	483e      	ldr	r0, [pc, #248]	@ (8029334 <__mdiff+0x124>)
 802923a:	f7fc fb71 	bl	8025920 <__assert_func>
 802923e:	2301      	movs	r3, #1
 8029240:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8029244:	4610      	mov	r0, r2
 8029246:	b003      	add	sp, #12
 8029248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802924c:	bfbc      	itt	lt
 802924e:	464b      	movlt	r3, r9
 8029250:	46a1      	movlt	r9, r4
 8029252:	4630      	mov	r0, r6
 8029254:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8029258:	bfba      	itte	lt
 802925a:	461c      	movlt	r4, r3
 802925c:	2501      	movlt	r5, #1
 802925e:	2500      	movge	r5, #0
 8029260:	f7ff fcfe 	bl	8028c60 <_Balloc>
 8029264:	4602      	mov	r2, r0
 8029266:	b918      	cbnz	r0, 8029270 <__mdiff+0x60>
 8029268:	4b31      	ldr	r3, [pc, #196]	@ (8029330 <__mdiff+0x120>)
 802926a:	f240 2145 	movw	r1, #581	@ 0x245
 802926e:	e7e3      	b.n	8029238 <__mdiff+0x28>
 8029270:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8029274:	6926      	ldr	r6, [r4, #16]
 8029276:	60c5      	str	r5, [r0, #12]
 8029278:	f109 0310 	add.w	r3, r9, #16
 802927c:	f109 0514 	add.w	r5, r9, #20
 8029280:	f104 0e14 	add.w	lr, r4, #20
 8029284:	f100 0b14 	add.w	fp, r0, #20
 8029288:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 802928c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8029290:	9301      	str	r3, [sp, #4]
 8029292:	46d9      	mov	r9, fp
 8029294:	f04f 0c00 	mov.w	ip, #0
 8029298:	9b01      	ldr	r3, [sp, #4]
 802929a:	f85e 0b04 	ldr.w	r0, [lr], #4
 802929e:	f853 af04 	ldr.w	sl, [r3, #4]!
 80292a2:	9301      	str	r3, [sp, #4]
 80292a4:	fa1f f38a 	uxth.w	r3, sl
 80292a8:	4619      	mov	r1, r3
 80292aa:	b283      	uxth	r3, r0
 80292ac:	1acb      	subs	r3, r1, r3
 80292ae:	0c00      	lsrs	r0, r0, #16
 80292b0:	4463      	add	r3, ip
 80292b2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80292b6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80292ba:	b29b      	uxth	r3, r3
 80292bc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80292c0:	4576      	cmp	r6, lr
 80292c2:	f849 3b04 	str.w	r3, [r9], #4
 80292c6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80292ca:	d8e5      	bhi.n	8029298 <__mdiff+0x88>
 80292cc:	1b33      	subs	r3, r6, r4
 80292ce:	3b15      	subs	r3, #21
 80292d0:	f023 0303 	bic.w	r3, r3, #3
 80292d4:	3415      	adds	r4, #21
 80292d6:	3304      	adds	r3, #4
 80292d8:	42a6      	cmp	r6, r4
 80292da:	bf38      	it	cc
 80292dc:	2304      	movcc	r3, #4
 80292de:	441d      	add	r5, r3
 80292e0:	445b      	add	r3, fp
 80292e2:	461e      	mov	r6, r3
 80292e4:	462c      	mov	r4, r5
 80292e6:	4544      	cmp	r4, r8
 80292e8:	d30e      	bcc.n	8029308 <__mdiff+0xf8>
 80292ea:	f108 0103 	add.w	r1, r8, #3
 80292ee:	1b49      	subs	r1, r1, r5
 80292f0:	f021 0103 	bic.w	r1, r1, #3
 80292f4:	3d03      	subs	r5, #3
 80292f6:	45a8      	cmp	r8, r5
 80292f8:	bf38      	it	cc
 80292fa:	2100      	movcc	r1, #0
 80292fc:	440b      	add	r3, r1
 80292fe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8029302:	b191      	cbz	r1, 802932a <__mdiff+0x11a>
 8029304:	6117      	str	r7, [r2, #16]
 8029306:	e79d      	b.n	8029244 <__mdiff+0x34>
 8029308:	f854 1b04 	ldr.w	r1, [r4], #4
 802930c:	46e6      	mov	lr, ip
 802930e:	0c08      	lsrs	r0, r1, #16
 8029310:	fa1c fc81 	uxtah	ip, ip, r1
 8029314:	4471      	add	r1, lr
 8029316:	eb00 402c 	add.w	r0, r0, ip, asr #16
 802931a:	b289      	uxth	r1, r1
 802931c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8029320:	f846 1b04 	str.w	r1, [r6], #4
 8029324:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8029328:	e7dd      	b.n	80292e6 <__mdiff+0xd6>
 802932a:	3f01      	subs	r7, #1
 802932c:	e7e7      	b.n	80292fe <__mdiff+0xee>
 802932e:	bf00      	nop
 8029330:	0803aff8 	.word	0x0803aff8
 8029334:	0803b069 	.word	0x0803b069

08029338 <__ulp>:
 8029338:	b082      	sub	sp, #8
 802933a:	ed8d 0b00 	vstr	d0, [sp]
 802933e:	9a01      	ldr	r2, [sp, #4]
 8029340:	4b0f      	ldr	r3, [pc, #60]	@ (8029380 <__ulp+0x48>)
 8029342:	4013      	ands	r3, r2
 8029344:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8029348:	2b00      	cmp	r3, #0
 802934a:	dc08      	bgt.n	802935e <__ulp+0x26>
 802934c:	425b      	negs	r3, r3
 802934e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8029352:	ea4f 5223 	mov.w	r2, r3, asr #20
 8029356:	da04      	bge.n	8029362 <__ulp+0x2a>
 8029358:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 802935c:	4113      	asrs	r3, r2
 802935e:	2200      	movs	r2, #0
 8029360:	e008      	b.n	8029374 <__ulp+0x3c>
 8029362:	f1a2 0314 	sub.w	r3, r2, #20
 8029366:	2b1e      	cmp	r3, #30
 8029368:	bfda      	itte	le
 802936a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 802936e:	40da      	lsrle	r2, r3
 8029370:	2201      	movgt	r2, #1
 8029372:	2300      	movs	r3, #0
 8029374:	4619      	mov	r1, r3
 8029376:	4610      	mov	r0, r2
 8029378:	ec41 0b10 	vmov	d0, r0, r1
 802937c:	b002      	add	sp, #8
 802937e:	4770      	bx	lr
 8029380:	7ff00000 	.word	0x7ff00000

08029384 <__b2d>:
 8029384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8029388:	6906      	ldr	r6, [r0, #16]
 802938a:	f100 0814 	add.w	r8, r0, #20
 802938e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8029392:	1f37      	subs	r7, r6, #4
 8029394:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8029398:	4610      	mov	r0, r2
 802939a:	f7ff fd53 	bl	8028e44 <__hi0bits>
 802939e:	f1c0 0320 	rsb	r3, r0, #32
 80293a2:	280a      	cmp	r0, #10
 80293a4:	600b      	str	r3, [r1, #0]
 80293a6:	491b      	ldr	r1, [pc, #108]	@ (8029414 <__b2d+0x90>)
 80293a8:	dc15      	bgt.n	80293d6 <__b2d+0x52>
 80293aa:	f1c0 0c0b 	rsb	ip, r0, #11
 80293ae:	fa22 f30c 	lsr.w	r3, r2, ip
 80293b2:	45b8      	cmp	r8, r7
 80293b4:	ea43 0501 	orr.w	r5, r3, r1
 80293b8:	bf34      	ite	cc
 80293ba:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80293be:	2300      	movcs	r3, #0
 80293c0:	3015      	adds	r0, #21
 80293c2:	fa02 f000 	lsl.w	r0, r2, r0
 80293c6:	fa23 f30c 	lsr.w	r3, r3, ip
 80293ca:	4303      	orrs	r3, r0
 80293cc:	461c      	mov	r4, r3
 80293ce:	ec45 4b10 	vmov	d0, r4, r5
 80293d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80293d6:	45b8      	cmp	r8, r7
 80293d8:	bf3a      	itte	cc
 80293da:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80293de:	f1a6 0708 	subcc.w	r7, r6, #8
 80293e2:	2300      	movcs	r3, #0
 80293e4:	380b      	subs	r0, #11
 80293e6:	d012      	beq.n	802940e <__b2d+0x8a>
 80293e8:	f1c0 0120 	rsb	r1, r0, #32
 80293ec:	fa23 f401 	lsr.w	r4, r3, r1
 80293f0:	4082      	lsls	r2, r0
 80293f2:	4322      	orrs	r2, r4
 80293f4:	4547      	cmp	r7, r8
 80293f6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80293fa:	bf8c      	ite	hi
 80293fc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8029400:	2200      	movls	r2, #0
 8029402:	4083      	lsls	r3, r0
 8029404:	40ca      	lsrs	r2, r1
 8029406:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 802940a:	4313      	orrs	r3, r2
 802940c:	e7de      	b.n	80293cc <__b2d+0x48>
 802940e:	ea42 0501 	orr.w	r5, r2, r1
 8029412:	e7db      	b.n	80293cc <__b2d+0x48>
 8029414:	3ff00000 	.word	0x3ff00000

08029418 <__d2b>:
 8029418:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 802941c:	460f      	mov	r7, r1
 802941e:	2101      	movs	r1, #1
 8029420:	ec59 8b10 	vmov	r8, r9, d0
 8029424:	4616      	mov	r6, r2
 8029426:	f7ff fc1b 	bl	8028c60 <_Balloc>
 802942a:	4604      	mov	r4, r0
 802942c:	b930      	cbnz	r0, 802943c <__d2b+0x24>
 802942e:	4602      	mov	r2, r0
 8029430:	4b23      	ldr	r3, [pc, #140]	@ (80294c0 <__d2b+0xa8>)
 8029432:	4824      	ldr	r0, [pc, #144]	@ (80294c4 <__d2b+0xac>)
 8029434:	f240 310f 	movw	r1, #783	@ 0x30f
 8029438:	f7fc fa72 	bl	8025920 <__assert_func>
 802943c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8029440:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8029444:	b10d      	cbz	r5, 802944a <__d2b+0x32>
 8029446:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 802944a:	9301      	str	r3, [sp, #4]
 802944c:	f1b8 0300 	subs.w	r3, r8, #0
 8029450:	d023      	beq.n	802949a <__d2b+0x82>
 8029452:	4668      	mov	r0, sp
 8029454:	9300      	str	r3, [sp, #0]
 8029456:	f7ff fd14 	bl	8028e82 <__lo0bits>
 802945a:	e9dd 1200 	ldrd	r1, r2, [sp]
 802945e:	b1d0      	cbz	r0, 8029496 <__d2b+0x7e>
 8029460:	f1c0 0320 	rsb	r3, r0, #32
 8029464:	fa02 f303 	lsl.w	r3, r2, r3
 8029468:	430b      	orrs	r3, r1
 802946a:	40c2      	lsrs	r2, r0
 802946c:	6163      	str	r3, [r4, #20]
 802946e:	9201      	str	r2, [sp, #4]
 8029470:	9b01      	ldr	r3, [sp, #4]
 8029472:	61a3      	str	r3, [r4, #24]
 8029474:	2b00      	cmp	r3, #0
 8029476:	bf0c      	ite	eq
 8029478:	2201      	moveq	r2, #1
 802947a:	2202      	movne	r2, #2
 802947c:	6122      	str	r2, [r4, #16]
 802947e:	b1a5      	cbz	r5, 80294aa <__d2b+0x92>
 8029480:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8029484:	4405      	add	r5, r0
 8029486:	603d      	str	r5, [r7, #0]
 8029488:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 802948c:	6030      	str	r0, [r6, #0]
 802948e:	4620      	mov	r0, r4
 8029490:	b003      	add	sp, #12
 8029492:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8029496:	6161      	str	r1, [r4, #20]
 8029498:	e7ea      	b.n	8029470 <__d2b+0x58>
 802949a:	a801      	add	r0, sp, #4
 802949c:	f7ff fcf1 	bl	8028e82 <__lo0bits>
 80294a0:	9b01      	ldr	r3, [sp, #4]
 80294a2:	6163      	str	r3, [r4, #20]
 80294a4:	3020      	adds	r0, #32
 80294a6:	2201      	movs	r2, #1
 80294a8:	e7e8      	b.n	802947c <__d2b+0x64>
 80294aa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80294ae:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80294b2:	6038      	str	r0, [r7, #0]
 80294b4:	6918      	ldr	r0, [r3, #16]
 80294b6:	f7ff fcc5 	bl	8028e44 <__hi0bits>
 80294ba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80294be:	e7e5      	b.n	802948c <__d2b+0x74>
 80294c0:	0803aff8 	.word	0x0803aff8
 80294c4:	0803b069 	.word	0x0803b069

080294c8 <__ratio>:
 80294c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80294cc:	4688      	mov	r8, r1
 80294ce:	4669      	mov	r1, sp
 80294d0:	4681      	mov	r9, r0
 80294d2:	f7ff ff57 	bl	8029384 <__b2d>
 80294d6:	a901      	add	r1, sp, #4
 80294d8:	4640      	mov	r0, r8
 80294da:	ec55 4b10 	vmov	r4, r5, d0
 80294de:	f7ff ff51 	bl	8029384 <__b2d>
 80294e2:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80294e6:	f8d9 2010 	ldr.w	r2, [r9, #16]
 80294ea:	1ad2      	subs	r2, r2, r3
 80294ec:	e9dd 3100 	ldrd	r3, r1, [sp]
 80294f0:	1a5b      	subs	r3, r3, r1
 80294f2:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 80294f6:	ec57 6b10 	vmov	r6, r7, d0
 80294fa:	2b00      	cmp	r3, #0
 80294fc:	bfd6      	itet	le
 80294fe:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8029502:	462a      	movgt	r2, r5
 8029504:	463a      	movle	r2, r7
 8029506:	46ab      	mov	fp, r5
 8029508:	46a2      	mov	sl, r4
 802950a:	bfce      	itee	gt
 802950c:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8029510:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8029514:	ee00 3a90 	vmovle	s1, r3
 8029518:	ec4b ab17 	vmov	d7, sl, fp
 802951c:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8029520:	b003      	add	sp, #12
 8029522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08029526 <__copybits>:
 8029526:	3901      	subs	r1, #1
 8029528:	b570      	push	{r4, r5, r6, lr}
 802952a:	1149      	asrs	r1, r1, #5
 802952c:	6914      	ldr	r4, [r2, #16]
 802952e:	3101      	adds	r1, #1
 8029530:	f102 0314 	add.w	r3, r2, #20
 8029534:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8029538:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 802953c:	1f05      	subs	r5, r0, #4
 802953e:	42a3      	cmp	r3, r4
 8029540:	d30c      	bcc.n	802955c <__copybits+0x36>
 8029542:	1aa3      	subs	r3, r4, r2
 8029544:	3b11      	subs	r3, #17
 8029546:	f023 0303 	bic.w	r3, r3, #3
 802954a:	3211      	adds	r2, #17
 802954c:	42a2      	cmp	r2, r4
 802954e:	bf88      	it	hi
 8029550:	2300      	movhi	r3, #0
 8029552:	4418      	add	r0, r3
 8029554:	2300      	movs	r3, #0
 8029556:	4288      	cmp	r0, r1
 8029558:	d305      	bcc.n	8029566 <__copybits+0x40>
 802955a:	bd70      	pop	{r4, r5, r6, pc}
 802955c:	f853 6b04 	ldr.w	r6, [r3], #4
 8029560:	f845 6f04 	str.w	r6, [r5, #4]!
 8029564:	e7eb      	b.n	802953e <__copybits+0x18>
 8029566:	f840 3b04 	str.w	r3, [r0], #4
 802956a:	e7f4      	b.n	8029556 <__copybits+0x30>

0802956c <__any_on>:
 802956c:	f100 0214 	add.w	r2, r0, #20
 8029570:	6900      	ldr	r0, [r0, #16]
 8029572:	114b      	asrs	r3, r1, #5
 8029574:	4298      	cmp	r0, r3
 8029576:	b510      	push	{r4, lr}
 8029578:	db11      	blt.n	802959e <__any_on+0x32>
 802957a:	dd0a      	ble.n	8029592 <__any_on+0x26>
 802957c:	f011 011f 	ands.w	r1, r1, #31
 8029580:	d007      	beq.n	8029592 <__any_on+0x26>
 8029582:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8029586:	fa24 f001 	lsr.w	r0, r4, r1
 802958a:	fa00 f101 	lsl.w	r1, r0, r1
 802958e:	428c      	cmp	r4, r1
 8029590:	d10b      	bne.n	80295aa <__any_on+0x3e>
 8029592:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8029596:	4293      	cmp	r3, r2
 8029598:	d803      	bhi.n	80295a2 <__any_on+0x36>
 802959a:	2000      	movs	r0, #0
 802959c:	bd10      	pop	{r4, pc}
 802959e:	4603      	mov	r3, r0
 80295a0:	e7f7      	b.n	8029592 <__any_on+0x26>
 80295a2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80295a6:	2900      	cmp	r1, #0
 80295a8:	d0f5      	beq.n	8029596 <__any_on+0x2a>
 80295aa:	2001      	movs	r0, #1
 80295ac:	e7f6      	b.n	802959c <__any_on+0x30>

080295ae <__ascii_wctomb>:
 80295ae:	4603      	mov	r3, r0
 80295b0:	4608      	mov	r0, r1
 80295b2:	b141      	cbz	r1, 80295c6 <__ascii_wctomb+0x18>
 80295b4:	2aff      	cmp	r2, #255	@ 0xff
 80295b6:	d904      	bls.n	80295c2 <__ascii_wctomb+0x14>
 80295b8:	228a      	movs	r2, #138	@ 0x8a
 80295ba:	601a      	str	r2, [r3, #0]
 80295bc:	f04f 30ff 	mov.w	r0, #4294967295
 80295c0:	4770      	bx	lr
 80295c2:	700a      	strb	r2, [r1, #0]
 80295c4:	2001      	movs	r0, #1
 80295c6:	4770      	bx	lr

080295c8 <__sfputc_r>:
 80295c8:	6893      	ldr	r3, [r2, #8]
 80295ca:	3b01      	subs	r3, #1
 80295cc:	2b00      	cmp	r3, #0
 80295ce:	b410      	push	{r4}
 80295d0:	6093      	str	r3, [r2, #8]
 80295d2:	da08      	bge.n	80295e6 <__sfputc_r+0x1e>
 80295d4:	6994      	ldr	r4, [r2, #24]
 80295d6:	42a3      	cmp	r3, r4
 80295d8:	db01      	blt.n	80295de <__sfputc_r+0x16>
 80295da:	290a      	cmp	r1, #10
 80295dc:	d103      	bne.n	80295e6 <__sfputc_r+0x1e>
 80295de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80295e2:	f7fd bfb2 	b.w	802754a <__swbuf_r>
 80295e6:	6813      	ldr	r3, [r2, #0]
 80295e8:	1c58      	adds	r0, r3, #1
 80295ea:	6010      	str	r0, [r2, #0]
 80295ec:	7019      	strb	r1, [r3, #0]
 80295ee:	4608      	mov	r0, r1
 80295f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80295f4:	4770      	bx	lr

080295f6 <__sfputs_r>:
 80295f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80295f8:	4606      	mov	r6, r0
 80295fa:	460f      	mov	r7, r1
 80295fc:	4614      	mov	r4, r2
 80295fe:	18d5      	adds	r5, r2, r3
 8029600:	42ac      	cmp	r4, r5
 8029602:	d101      	bne.n	8029608 <__sfputs_r+0x12>
 8029604:	2000      	movs	r0, #0
 8029606:	e007      	b.n	8029618 <__sfputs_r+0x22>
 8029608:	f814 1b01 	ldrb.w	r1, [r4], #1
 802960c:	463a      	mov	r2, r7
 802960e:	4630      	mov	r0, r6
 8029610:	f7ff ffda 	bl	80295c8 <__sfputc_r>
 8029614:	1c43      	adds	r3, r0, #1
 8029616:	d1f3      	bne.n	8029600 <__sfputs_r+0xa>
 8029618:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802961c <_vfiprintf_r>:
 802961c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029620:	460d      	mov	r5, r1
 8029622:	b09d      	sub	sp, #116	@ 0x74
 8029624:	4614      	mov	r4, r2
 8029626:	4698      	mov	r8, r3
 8029628:	4606      	mov	r6, r0
 802962a:	b118      	cbz	r0, 8029634 <_vfiprintf_r+0x18>
 802962c:	6a03      	ldr	r3, [r0, #32]
 802962e:	b90b      	cbnz	r3, 8029634 <_vfiprintf_r+0x18>
 8029630:	f7fd fe54 	bl	80272dc <__sinit>
 8029634:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8029636:	07d9      	lsls	r1, r3, #31
 8029638:	d405      	bmi.n	8029646 <_vfiprintf_r+0x2a>
 802963a:	89ab      	ldrh	r3, [r5, #12]
 802963c:	059a      	lsls	r2, r3, #22
 802963e:	d402      	bmi.n	8029646 <_vfiprintf_r+0x2a>
 8029640:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8029642:	f7fe f970 	bl	8027926 <__retarget_lock_acquire_recursive>
 8029646:	89ab      	ldrh	r3, [r5, #12]
 8029648:	071b      	lsls	r3, r3, #28
 802964a:	d501      	bpl.n	8029650 <_vfiprintf_r+0x34>
 802964c:	692b      	ldr	r3, [r5, #16]
 802964e:	b99b      	cbnz	r3, 8029678 <_vfiprintf_r+0x5c>
 8029650:	4629      	mov	r1, r5
 8029652:	4630      	mov	r0, r6
 8029654:	f7fd ffb8 	bl	80275c8 <__swsetup_r>
 8029658:	b170      	cbz	r0, 8029678 <_vfiprintf_r+0x5c>
 802965a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802965c:	07dc      	lsls	r4, r3, #31
 802965e:	d504      	bpl.n	802966a <_vfiprintf_r+0x4e>
 8029660:	f04f 30ff 	mov.w	r0, #4294967295
 8029664:	b01d      	add	sp, #116	@ 0x74
 8029666:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802966a:	89ab      	ldrh	r3, [r5, #12]
 802966c:	0598      	lsls	r0, r3, #22
 802966e:	d4f7      	bmi.n	8029660 <_vfiprintf_r+0x44>
 8029670:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8029672:	f7fe f959 	bl	8027928 <__retarget_lock_release_recursive>
 8029676:	e7f3      	b.n	8029660 <_vfiprintf_r+0x44>
 8029678:	2300      	movs	r3, #0
 802967a:	9309      	str	r3, [sp, #36]	@ 0x24
 802967c:	2320      	movs	r3, #32
 802967e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8029682:	f8cd 800c 	str.w	r8, [sp, #12]
 8029686:	2330      	movs	r3, #48	@ 0x30
 8029688:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8029838 <_vfiprintf_r+0x21c>
 802968c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8029690:	f04f 0901 	mov.w	r9, #1
 8029694:	4623      	mov	r3, r4
 8029696:	469a      	mov	sl, r3
 8029698:	f813 2b01 	ldrb.w	r2, [r3], #1
 802969c:	b10a      	cbz	r2, 80296a2 <_vfiprintf_r+0x86>
 802969e:	2a25      	cmp	r2, #37	@ 0x25
 80296a0:	d1f9      	bne.n	8029696 <_vfiprintf_r+0x7a>
 80296a2:	ebba 0b04 	subs.w	fp, sl, r4
 80296a6:	d00b      	beq.n	80296c0 <_vfiprintf_r+0xa4>
 80296a8:	465b      	mov	r3, fp
 80296aa:	4622      	mov	r2, r4
 80296ac:	4629      	mov	r1, r5
 80296ae:	4630      	mov	r0, r6
 80296b0:	f7ff ffa1 	bl	80295f6 <__sfputs_r>
 80296b4:	3001      	adds	r0, #1
 80296b6:	f000 80a7 	beq.w	8029808 <_vfiprintf_r+0x1ec>
 80296ba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80296bc:	445a      	add	r2, fp
 80296be:	9209      	str	r2, [sp, #36]	@ 0x24
 80296c0:	f89a 3000 	ldrb.w	r3, [sl]
 80296c4:	2b00      	cmp	r3, #0
 80296c6:	f000 809f 	beq.w	8029808 <_vfiprintf_r+0x1ec>
 80296ca:	2300      	movs	r3, #0
 80296cc:	f04f 32ff 	mov.w	r2, #4294967295
 80296d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80296d4:	f10a 0a01 	add.w	sl, sl, #1
 80296d8:	9304      	str	r3, [sp, #16]
 80296da:	9307      	str	r3, [sp, #28]
 80296dc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80296e0:	931a      	str	r3, [sp, #104]	@ 0x68
 80296e2:	4654      	mov	r4, sl
 80296e4:	2205      	movs	r2, #5
 80296e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80296ea:	4853      	ldr	r0, [pc, #332]	@ (8029838 <_vfiprintf_r+0x21c>)
 80296ec:	f7d6 fe20 	bl	8000330 <memchr>
 80296f0:	9a04      	ldr	r2, [sp, #16]
 80296f2:	b9d8      	cbnz	r0, 802972c <_vfiprintf_r+0x110>
 80296f4:	06d1      	lsls	r1, r2, #27
 80296f6:	bf44      	itt	mi
 80296f8:	2320      	movmi	r3, #32
 80296fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80296fe:	0713      	lsls	r3, r2, #28
 8029700:	bf44      	itt	mi
 8029702:	232b      	movmi	r3, #43	@ 0x2b
 8029704:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8029708:	f89a 3000 	ldrb.w	r3, [sl]
 802970c:	2b2a      	cmp	r3, #42	@ 0x2a
 802970e:	d015      	beq.n	802973c <_vfiprintf_r+0x120>
 8029710:	9a07      	ldr	r2, [sp, #28]
 8029712:	4654      	mov	r4, sl
 8029714:	2000      	movs	r0, #0
 8029716:	f04f 0c0a 	mov.w	ip, #10
 802971a:	4621      	mov	r1, r4
 802971c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8029720:	3b30      	subs	r3, #48	@ 0x30
 8029722:	2b09      	cmp	r3, #9
 8029724:	d94b      	bls.n	80297be <_vfiprintf_r+0x1a2>
 8029726:	b1b0      	cbz	r0, 8029756 <_vfiprintf_r+0x13a>
 8029728:	9207      	str	r2, [sp, #28]
 802972a:	e014      	b.n	8029756 <_vfiprintf_r+0x13a>
 802972c:	eba0 0308 	sub.w	r3, r0, r8
 8029730:	fa09 f303 	lsl.w	r3, r9, r3
 8029734:	4313      	orrs	r3, r2
 8029736:	9304      	str	r3, [sp, #16]
 8029738:	46a2      	mov	sl, r4
 802973a:	e7d2      	b.n	80296e2 <_vfiprintf_r+0xc6>
 802973c:	9b03      	ldr	r3, [sp, #12]
 802973e:	1d19      	adds	r1, r3, #4
 8029740:	681b      	ldr	r3, [r3, #0]
 8029742:	9103      	str	r1, [sp, #12]
 8029744:	2b00      	cmp	r3, #0
 8029746:	bfbb      	ittet	lt
 8029748:	425b      	neglt	r3, r3
 802974a:	f042 0202 	orrlt.w	r2, r2, #2
 802974e:	9307      	strge	r3, [sp, #28]
 8029750:	9307      	strlt	r3, [sp, #28]
 8029752:	bfb8      	it	lt
 8029754:	9204      	strlt	r2, [sp, #16]
 8029756:	7823      	ldrb	r3, [r4, #0]
 8029758:	2b2e      	cmp	r3, #46	@ 0x2e
 802975a:	d10a      	bne.n	8029772 <_vfiprintf_r+0x156>
 802975c:	7863      	ldrb	r3, [r4, #1]
 802975e:	2b2a      	cmp	r3, #42	@ 0x2a
 8029760:	d132      	bne.n	80297c8 <_vfiprintf_r+0x1ac>
 8029762:	9b03      	ldr	r3, [sp, #12]
 8029764:	1d1a      	adds	r2, r3, #4
 8029766:	681b      	ldr	r3, [r3, #0]
 8029768:	9203      	str	r2, [sp, #12]
 802976a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 802976e:	3402      	adds	r4, #2
 8029770:	9305      	str	r3, [sp, #20]
 8029772:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8029848 <_vfiprintf_r+0x22c>
 8029776:	7821      	ldrb	r1, [r4, #0]
 8029778:	2203      	movs	r2, #3
 802977a:	4650      	mov	r0, sl
 802977c:	f7d6 fdd8 	bl	8000330 <memchr>
 8029780:	b138      	cbz	r0, 8029792 <_vfiprintf_r+0x176>
 8029782:	9b04      	ldr	r3, [sp, #16]
 8029784:	eba0 000a 	sub.w	r0, r0, sl
 8029788:	2240      	movs	r2, #64	@ 0x40
 802978a:	4082      	lsls	r2, r0
 802978c:	4313      	orrs	r3, r2
 802978e:	3401      	adds	r4, #1
 8029790:	9304      	str	r3, [sp, #16]
 8029792:	f814 1b01 	ldrb.w	r1, [r4], #1
 8029796:	4829      	ldr	r0, [pc, #164]	@ (802983c <_vfiprintf_r+0x220>)
 8029798:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 802979c:	2206      	movs	r2, #6
 802979e:	f7d6 fdc7 	bl	8000330 <memchr>
 80297a2:	2800      	cmp	r0, #0
 80297a4:	d03f      	beq.n	8029826 <_vfiprintf_r+0x20a>
 80297a6:	4b26      	ldr	r3, [pc, #152]	@ (8029840 <_vfiprintf_r+0x224>)
 80297a8:	bb1b      	cbnz	r3, 80297f2 <_vfiprintf_r+0x1d6>
 80297aa:	9b03      	ldr	r3, [sp, #12]
 80297ac:	3307      	adds	r3, #7
 80297ae:	f023 0307 	bic.w	r3, r3, #7
 80297b2:	3308      	adds	r3, #8
 80297b4:	9303      	str	r3, [sp, #12]
 80297b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80297b8:	443b      	add	r3, r7
 80297ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80297bc:	e76a      	b.n	8029694 <_vfiprintf_r+0x78>
 80297be:	fb0c 3202 	mla	r2, ip, r2, r3
 80297c2:	460c      	mov	r4, r1
 80297c4:	2001      	movs	r0, #1
 80297c6:	e7a8      	b.n	802971a <_vfiprintf_r+0xfe>
 80297c8:	2300      	movs	r3, #0
 80297ca:	3401      	adds	r4, #1
 80297cc:	9305      	str	r3, [sp, #20]
 80297ce:	4619      	mov	r1, r3
 80297d0:	f04f 0c0a 	mov.w	ip, #10
 80297d4:	4620      	mov	r0, r4
 80297d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80297da:	3a30      	subs	r2, #48	@ 0x30
 80297dc:	2a09      	cmp	r2, #9
 80297de:	d903      	bls.n	80297e8 <_vfiprintf_r+0x1cc>
 80297e0:	2b00      	cmp	r3, #0
 80297e2:	d0c6      	beq.n	8029772 <_vfiprintf_r+0x156>
 80297e4:	9105      	str	r1, [sp, #20]
 80297e6:	e7c4      	b.n	8029772 <_vfiprintf_r+0x156>
 80297e8:	fb0c 2101 	mla	r1, ip, r1, r2
 80297ec:	4604      	mov	r4, r0
 80297ee:	2301      	movs	r3, #1
 80297f0:	e7f0      	b.n	80297d4 <_vfiprintf_r+0x1b8>
 80297f2:	ab03      	add	r3, sp, #12
 80297f4:	9300      	str	r3, [sp, #0]
 80297f6:	462a      	mov	r2, r5
 80297f8:	4b12      	ldr	r3, [pc, #72]	@ (8029844 <_vfiprintf_r+0x228>)
 80297fa:	a904      	add	r1, sp, #16
 80297fc:	4630      	mov	r0, r6
 80297fe:	f7fd f88f 	bl	8026920 <_printf_float>
 8029802:	4607      	mov	r7, r0
 8029804:	1c78      	adds	r0, r7, #1
 8029806:	d1d6      	bne.n	80297b6 <_vfiprintf_r+0x19a>
 8029808:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802980a:	07d9      	lsls	r1, r3, #31
 802980c:	d405      	bmi.n	802981a <_vfiprintf_r+0x1fe>
 802980e:	89ab      	ldrh	r3, [r5, #12]
 8029810:	059a      	lsls	r2, r3, #22
 8029812:	d402      	bmi.n	802981a <_vfiprintf_r+0x1fe>
 8029814:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8029816:	f7fe f887 	bl	8027928 <__retarget_lock_release_recursive>
 802981a:	89ab      	ldrh	r3, [r5, #12]
 802981c:	065b      	lsls	r3, r3, #25
 802981e:	f53f af1f 	bmi.w	8029660 <_vfiprintf_r+0x44>
 8029822:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8029824:	e71e      	b.n	8029664 <_vfiprintf_r+0x48>
 8029826:	ab03      	add	r3, sp, #12
 8029828:	9300      	str	r3, [sp, #0]
 802982a:	462a      	mov	r2, r5
 802982c:	4b05      	ldr	r3, [pc, #20]	@ (8029844 <_vfiprintf_r+0x228>)
 802982e:	a904      	add	r1, sp, #16
 8029830:	4630      	mov	r0, r6
 8029832:	f7fd fafd 	bl	8026e30 <_printf_i>
 8029836:	e7e4      	b.n	8029802 <_vfiprintf_r+0x1e6>
 8029838:	0803b0c2 	.word	0x0803b0c2
 802983c:	0803b0cc 	.word	0x0803b0cc
 8029840:	08026921 	.word	0x08026921
 8029844:	080295f7 	.word	0x080295f7
 8029848:	0803b0c8 	.word	0x0803b0c8

0802984c <__swhatbuf_r>:
 802984c:	b570      	push	{r4, r5, r6, lr}
 802984e:	460c      	mov	r4, r1
 8029850:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8029854:	2900      	cmp	r1, #0
 8029856:	b096      	sub	sp, #88	@ 0x58
 8029858:	4615      	mov	r5, r2
 802985a:	461e      	mov	r6, r3
 802985c:	da0d      	bge.n	802987a <__swhatbuf_r+0x2e>
 802985e:	89a3      	ldrh	r3, [r4, #12]
 8029860:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8029864:	f04f 0100 	mov.w	r1, #0
 8029868:	bf14      	ite	ne
 802986a:	2340      	movne	r3, #64	@ 0x40
 802986c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8029870:	2000      	movs	r0, #0
 8029872:	6031      	str	r1, [r6, #0]
 8029874:	602b      	str	r3, [r5, #0]
 8029876:	b016      	add	sp, #88	@ 0x58
 8029878:	bd70      	pop	{r4, r5, r6, pc}
 802987a:	466a      	mov	r2, sp
 802987c:	f000 f848 	bl	8029910 <_fstat_r>
 8029880:	2800      	cmp	r0, #0
 8029882:	dbec      	blt.n	802985e <__swhatbuf_r+0x12>
 8029884:	9901      	ldr	r1, [sp, #4]
 8029886:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 802988a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 802988e:	4259      	negs	r1, r3
 8029890:	4159      	adcs	r1, r3
 8029892:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8029896:	e7eb      	b.n	8029870 <__swhatbuf_r+0x24>

08029898 <__smakebuf_r>:
 8029898:	898b      	ldrh	r3, [r1, #12]
 802989a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802989c:	079d      	lsls	r5, r3, #30
 802989e:	4606      	mov	r6, r0
 80298a0:	460c      	mov	r4, r1
 80298a2:	d507      	bpl.n	80298b4 <__smakebuf_r+0x1c>
 80298a4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80298a8:	6023      	str	r3, [r4, #0]
 80298aa:	6123      	str	r3, [r4, #16]
 80298ac:	2301      	movs	r3, #1
 80298ae:	6163      	str	r3, [r4, #20]
 80298b0:	b003      	add	sp, #12
 80298b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80298b4:	ab01      	add	r3, sp, #4
 80298b6:	466a      	mov	r2, sp
 80298b8:	f7ff ffc8 	bl	802984c <__swhatbuf_r>
 80298bc:	9f00      	ldr	r7, [sp, #0]
 80298be:	4605      	mov	r5, r0
 80298c0:	4639      	mov	r1, r7
 80298c2:	4630      	mov	r0, r6
 80298c4:	f7fc f8a0 	bl	8025a08 <_malloc_r>
 80298c8:	b948      	cbnz	r0, 80298de <__smakebuf_r+0x46>
 80298ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80298ce:	059a      	lsls	r2, r3, #22
 80298d0:	d4ee      	bmi.n	80298b0 <__smakebuf_r+0x18>
 80298d2:	f023 0303 	bic.w	r3, r3, #3
 80298d6:	f043 0302 	orr.w	r3, r3, #2
 80298da:	81a3      	strh	r3, [r4, #12]
 80298dc:	e7e2      	b.n	80298a4 <__smakebuf_r+0xc>
 80298de:	89a3      	ldrh	r3, [r4, #12]
 80298e0:	6020      	str	r0, [r4, #0]
 80298e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80298e6:	81a3      	strh	r3, [r4, #12]
 80298e8:	9b01      	ldr	r3, [sp, #4]
 80298ea:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80298ee:	b15b      	cbz	r3, 8029908 <__smakebuf_r+0x70>
 80298f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80298f4:	4630      	mov	r0, r6
 80298f6:	f000 f81d 	bl	8029934 <_isatty_r>
 80298fa:	b128      	cbz	r0, 8029908 <__smakebuf_r+0x70>
 80298fc:	89a3      	ldrh	r3, [r4, #12]
 80298fe:	f023 0303 	bic.w	r3, r3, #3
 8029902:	f043 0301 	orr.w	r3, r3, #1
 8029906:	81a3      	strh	r3, [r4, #12]
 8029908:	89a3      	ldrh	r3, [r4, #12]
 802990a:	431d      	orrs	r5, r3
 802990c:	81a5      	strh	r5, [r4, #12]
 802990e:	e7cf      	b.n	80298b0 <__smakebuf_r+0x18>

08029910 <_fstat_r>:
 8029910:	b538      	push	{r3, r4, r5, lr}
 8029912:	4d07      	ldr	r5, [pc, #28]	@ (8029930 <_fstat_r+0x20>)
 8029914:	2300      	movs	r3, #0
 8029916:	4604      	mov	r4, r0
 8029918:	4608      	mov	r0, r1
 802991a:	4611      	mov	r1, r2
 802991c:	602b      	str	r3, [r5, #0]
 802991e:	f7d8 fa3a 	bl	8001d96 <_fstat>
 8029922:	1c43      	adds	r3, r0, #1
 8029924:	d102      	bne.n	802992c <_fstat_r+0x1c>
 8029926:	682b      	ldr	r3, [r5, #0]
 8029928:	b103      	cbz	r3, 802992c <_fstat_r+0x1c>
 802992a:	6023      	str	r3, [r4, #0]
 802992c:	bd38      	pop	{r3, r4, r5, pc}
 802992e:	bf00      	nop
 8029930:	2400586c 	.word	0x2400586c

08029934 <_isatty_r>:
 8029934:	b538      	push	{r3, r4, r5, lr}
 8029936:	4d06      	ldr	r5, [pc, #24]	@ (8029950 <_isatty_r+0x1c>)
 8029938:	2300      	movs	r3, #0
 802993a:	4604      	mov	r4, r0
 802993c:	4608      	mov	r0, r1
 802993e:	602b      	str	r3, [r5, #0]
 8029940:	f7d8 fa39 	bl	8001db6 <_isatty>
 8029944:	1c43      	adds	r3, r0, #1
 8029946:	d102      	bne.n	802994e <_isatty_r+0x1a>
 8029948:	682b      	ldr	r3, [r5, #0]
 802994a:	b103      	cbz	r3, 802994e <_isatty_r+0x1a>
 802994c:	6023      	str	r3, [r4, #0]
 802994e:	bd38      	pop	{r3, r4, r5, pc}
 8029950:	2400586c 	.word	0x2400586c

08029954 <_init>:
 8029954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8029956:	bf00      	nop
 8029958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802995a:	bc08      	pop	{r3}
 802995c:	469e      	mov	lr, r3
 802995e:	4770      	bx	lr

08029960 <_fini>:
 8029960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8029962:	bf00      	nop
 8029964:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8029966:	bc08      	pop	{r3}
 8029968:	469e      	mov	lr, r3
 802996a:	4770      	bx	lr
 802996c:	0000      	movs	r0, r0
	...

08029970 <__is_dualbank_veneer>:
 8029970:	f85f f000 	ldr.w	pc, [pc]	@ 8029974 <__is_dualbank_veneer+0x4>
 8029974:	240009f1 	.word	0x240009f1

08029978 <__single_bank_swap_veneer>:
 8029978:	f85f f000 	ldr.w	pc, [pc]	@ 802997c <__single_bank_swap_veneer+0x4>
 802997c:	24000f15 	.word	0x24000f15

Disassembly of section .data:

24000000 <SystemCoreClock>:
24000000:	03d09000                                ....

24000004 <SystemD2Clock>:
24000004:	03d09000                                ....

24000008 <uwTickPrio>:
24000008:	00000010                                ....

2400000c <uwTickFreq>:
2400000c:	00000001                                ....

24000010 <mg_fs_packed>:
24000010:	0800a0f3 0800a155 0800a251 0800a2b3     ....U...Q.......
24000020:	0800a2cf 0800a325 0800a33f 0800a377     ....%...?...w...
24000030:	0800a38f 0800a3a5                       ........

24000038 <mg_fs_posix>:
24000038:	0800a3bb 0800a3d5 0800a3ed 0800a405     ................
24000048:	0800a419 0800a433 0800a44d 0800a467     ....3...M...g...
24000058:	0800a47f 0800a495                       ........

24000060 <s_known_types>:
24000060:	0802a4c8 00000004 0802a4d0 00000018     ................
24000070:	0802a4ec 00000003 0802a4d0 00000018     ................
24000080:	0802a4f0 00000003 0802a4f4 00000017     ................
24000090:	0802a50c 00000002 0802a510 0000001e     ................
240000a0:	0802a530 00000003 0802a510 0000001e     0...............
240000b0:	0802a534 00000003 0802a538 00000009     4.......8.......
240000c0:	0802a544 00000003 0802a548 00000009     D.......H.......
240000d0:	0802a554 00000003 0802a558 0000000a     T.......X.......
240000e0:	0802a564 00000004 0802a558 0000000a     d.......X.......
240000f0:	0802a56c 00000004 0802a574 00000009     l.......t.......
24000100:	0802a580 00000003 0802a584 00000008     ................
24000110:	0802a590 00000003 0802a594 0000000d     ................
24000120:	0802a5a4 00000003 0802a5a8 00000019     ................
24000130:	0802a5c4 00000003 0802a5c8 0000000f     ................
24000140:	0802a5d8 00000003 0802a5dc 00000008     ................
24000150:	0802a5e8 00000003 0802a5ec 00000012     ................
24000160:	0802a600 00000003 0802a604 00000018     ................
24000170:	0802a620 00000002 0802a624 00000010      .......$.......
24000180:	0802a638 00000003 0802a63c 0000000c     8.......<.......
24000190:	0802a64c 00000004 0802a654 00000010     L.......T.......
240001a0:	0802a668 00000003 0802a66c 0000000f     h.......l.......
240001b0:	0802a67c 00000003 0802a680 0000000a     |...............
240001c0:	0802a68c 00000003 0802a690 00000009     ................
240001d0:	0802a69c 00000004 0802a6a4 0000000a     ................
240001e0:	0802a6b0 00000003 0802a6b4 0000000f     ................
240001f0:	0802a6c4 00000005 0802a4d0 00000018     ................
24000200:	0802a6cc 00000003 0802a6d0 00000012     ................
24000210:	0802a6e4 00000003 0802a6e8 00000009     ................
24000220:	0802a6f4 00000004 0802a6fc 0000000a     ................
24000230:	0802a708 00000003 0802a70c 0000000f     ................
24000240:	0802a71c 00000003 0802a720 0000000a     ........ .......
	...

24000258 <mg_log_level>:
24000258:	00000002                                ....

2400025c <s_log_func>:
2400025c:	080131b3                                .1..

24000260 <mcast_addr>:
24000260:	005e0001 0000fb00                       ..^.....

24000268 <s_mg_flash_stm32h7>:
24000268:	08000000 00000000 00020000 00000020     ............ ...
24000278:	24000da5 24000d21                       ...$!..$

24000280 <zeros_sha256_digest>:
24000280:	42c4b0e3 141cfc98 c8f4fb9a 24b96f99     ...B.........o.$
24000290:	e441ae27 4c939b64 1b9995a4 55b85278     '.A.d..L....xR.U

240002a0 <mg_tcpip_driver_stm32h>:
240002a0:	08022cd1 08022f41 00000000 0802315d     .,..A/......]1..

240002b0 <s_modbus_base>:
240002b0:	000003e8                                ....

240002b4 <s_state>:
240002b4:	0000002a 0000001b 00000043 0000000a     *.......C.......
240002c4:	2e302e31 00000030 00000000 00000000     1.0.0...........
240002d4:	00000000 00000001 00000053              ........S...

240002e0 <s_leds>:
240002e0:	00000100                                ....

240002e4 <s_network_settings>:
240002e4:	2e323931 2e383631 32342e30 00000000     192.168.0.42....
240002f4:	00000000 2e323931 2e383631 00312e30     ....192.168.0.1.
	...
2400030c:	2e353532 2e353532 2e353532 00000030     255.255.255.0...
2400031c:	00000000 00000001 00000000              ............

24000328 <s_settings>:
24000328:	74696465 73202620 20657661 0000656d     edit & save me..
	...
24000350:	6f666e69 00000000 00000000 00000000     info............
24000360:	9ad42c3d 405ec7e6 00000011 00000001     =,....^@........

24000370 <s_security>:
24000370:	696d6461 0000006e 00000000 00000000     admin...........
	...
24000398:	72657375 00000000 00000000 00000000     user............
	...

240003c0 <s_state_attributes>:
240003c0:	0802c9b4 0802c9bc 00000000 00000000     ................
	...
240003d8:	0802c9c0 0802c9bc 00000000 00000004     ................
	...
240003f0:	0802c9cc 0802c9bc 00000000 00000008     ................
	...
24000408:	0802c9d8 0802c9bc 00000000 0000000c     ................
	...
24000420:	0802c9e0 0802c9e8 00000000 00000010     ................
24000430:	00000014 00000000 0802c9f0 0802c9f8     ................
24000440:	00000000 00000024 00000000 00000000     ....$...........
24000450:	0802ca00 0802c9f8 00000000 00000025     ............%...
	...
24000468:	0802ca08 0802c9bc 00000000 00000028     ............(...
	...

24000498 <s_leds_attributes>:
24000498:	0802ca10 0802c9f8 00000000 00000000     ................
	...
240004b0:	0802ca18 0802c9f8 00000000 00000001     ................
	...
240004c8:	0802ca20 0802c9f8 00000000 00000002      ...............
	...

240004f8 <s_network_settings_attributes>:
240004f8:	0802ca28 0802c9e8 00000000 00000000     (...............
24000508:	00000014 00000000 0802ca34 0802c9e8     ........4.......
24000518:	00000000 00000014 00000014 00000000     ................
24000528:	0802ca40 0802c9e8 00000000 00000028     @...........(...
24000538:	00000014 00000000 0802ca48 0802c9f8     ........H.......
24000548:	00000000 0000003c 00000000 00000000     ....<...........
	...

24000570 <s_settings_attributes>:
24000570:	0802ca50 0802c9e8 00000000 00000000     P...............
24000580:	00000028 00000000 0802ca5c 0802c9e8     (.......\.......
24000590:	00000000 00000028 0000000a 00000000     ....(...........
240005a0:	0802ca68 0802ca74 0802ca7c 00000038     h...t...|...8...
	...
240005b8:	0802ca84 0802c9bc 00000000 00000040     ............@...
	...
240005d0:	0802ca8c 0802c9f8 00000000 00000044     ............D...
	...

24000600 <s_security_attributes>:
24000600:	0802ca98 0802c9e8 00000000 00000000     ................
24000610:	00000028 00000000 0802caa8 0802c9e8     (...............
24000620:	00000000 00000028 00000028 00000000     ....(...(.......
	...

24000648 <s_apihandler_reboot>:
24000648:	0802cab8 0802cac0 00000000 00000003     ................
24000658:	00000007 00000000 08023665 08023689     ........e6...6..

24000668 <s_apihandler_reformat>:
24000668:	0802cac8 0802cac0 00000000 00000003     ................
24000678:	00000007 00000000 080236e9 0802370d     .........6...7..

24000688 <s_apihandler_firmware_update>:
24000688:	0802cad4 0802cae4 00000000 00000003     ................
24000698:	00000007 00000000 0802376d 080237c5     ........m7...7..
240006a8:	080237f9                                .7..

240006ac <s_apihandler_file_upload>:
240006ac:	0802cae8 0802caf4 00000000 00000003     ................
240006bc:	00000007 00000000 08023849 080238cd     ........I8...8..
240006cc:	0802390d                                .9..

240006d0 <s_apihandler_graph_data>:
240006d0:	0802cafc 0802cb08 00000000 00000003     ................
240006e0:	00000003 00000000 08023955              ........U9..

240006ec <s_apihandler_state>:
240006ec:	0802cb10 0802cb18 00000001 00000000     ................
	...
24000704:	240003c0 0000002c 0802398d 00000000     ...$,....9......

24000714 <s_apihandler_leds>:
24000714:	0802cb20 0802cb18 00000000 00000003      ...............
24000724:	00000003 00000000 24000498 00000003     ...........$....
24000734:	080239f9 08023a6d                       .9..m:..

2400073c <s_apihandler_network_settings>:
2400073c:	0802cb28 0802cb18 00000000 00000003     (...............
2400074c:	00000007 00000000 240004f8 0000003d     ...........$=...
2400075c:	08023ac1 08023b09                       .:...;..

24000764 <s_apihandler_settings>:
24000764:	0802cb3c 0802cb18 00000000 00000003     <...............
24000774:	00000007 00000000 24000570 00000048     ........p..$H...
24000784:	08023b51 08023b75                       Q;..u;..

2400078c <s_apihandler_security>:
2400078c:	0802cb48 0802cb18 00000000 00000007     H...............
2400079c:	00000007 00000000 24000600 00000050     ...........$P...
240007ac:	08023b99 08023bbd                       .;...;..

240007b4 <s_apihandler_loglevels>:
240007b4:	0802cb54 0802cb08 00000000 00000000     T...............
	...
240007cc:	08023be1                                .;..

240007d0 <s_apihandler_events>:
240007d0:	0802cb60 0802cb08 00000000 00000000     `...............
	...
240007e8:	08023c19                                .<..

240007ec <s_apihandlers>:
240007ec:	24000648 24000668 24000688 240006ac     H..$h..$...$...$
240007fc:	240006d0 240006ec 24000714 2400073c     ...$...$...$<..$
2400080c:	24000764 2400078c 240007b4 240007d0     d..$...$...$...$

2400081c <s_auth>:
2400081c:	08023601                                .6..

24000820 <s_modbus_handlers>:
24000820:	08023479 08023515                       y4...5..

24000828 <__sglue>:
24000828:	00000000 00000003 24005730              ........0W.$

24000834 <__global_locale>:
24000834:	00000043 00000000 00000000 00000000     C...............
	...
24000854:	00000043 00000000 00000000 00000000     C...............
	...
24000874:	00000043 00000000 00000000 00000000     C...............
	...
24000894:	00000043 00000000 00000000 00000000     C...............
	...
240008b4:	00000043 00000000 00000000 00000000     C...............
	...
240008d4:	00000043 00000000 00000000 00000000     C...............
	...
240008f4:	00000043 00000000 00000000 00000000     C...............
	...
24000914:	080295af 08028c3b 00000000 0803b128     ....;.......(...
24000924:	0803af55 0803aee5 0803aee5 0803aee5     U...............
24000934:	0803aee5 0803aee5 0803aee5 0803aee5     ................
24000944:	0803aee5 0803aee5 ffffffff ffffffff     ................
24000954:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
	...
2400097c:	53410000 00494943 00000000 00000000     ..ASCII.........
	...

240009a0 <_impure_ptr>:
240009a0:	240009a4                                ...$

240009a4 <_impure_data>:
240009a4:	00000000 24005730 24005798 24005800     ....0W.$.W.$.X.$
	...

240009f0 <is_dualbank>:
MG_IRAM static bool is_dualbank(void) {
240009f0:	b480      	push	{r7}
240009f2:	af00      	add	r7, sp, #0
  return (s_mg_flash_stm32h7.size < 2 * 1024 * 1024) ? false : true;
240009f4:	4b06      	ldr	r3, [pc, #24]	@ (24000a10 <is_dualbank+0x20>)
240009f6:	685b      	ldr	r3, [r3, #4]
240009f8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
240009fc:	bf2c      	ite	cs
240009fe:	2301      	movcs	r3, #1
24000a00:	2300      	movcc	r3, #0
24000a02:	b2db      	uxtb	r3, r3
}
24000a04:	4618      	mov	r0, r3
24000a06:	46bd      	mov	sp, r7
24000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
24000a0c:	4770      	bx	lr
24000a0e:	bf00      	nop
24000a10:	24000268 	.word	0x24000268

24000a14 <flash_unlock>:
MG_IRAM static void flash_unlock(void) {
24000a14:	b580      	push	{r7, lr}
24000a16:	af00      	add	r7, sp, #0
  if (unlocked == false) {
24000a18:	4b11      	ldr	r3, [pc, #68]	@ (24000a60 <flash_unlock+0x4c>)
24000a1a:	781b      	ldrb	r3, [r3, #0]
24000a1c:	f083 0301 	eor.w	r3, r3, #1
24000a20:	b2db      	uxtb	r3, r3
24000a22:	2b00      	cmp	r3, #0
24000a24:	d019      	beq.n	24000a5a <flash_unlock+0x46>
    MG_REG(FLASH_BASE1 + FLASH_KEYR) = 0x45670123;
24000a26:	4b0f      	ldr	r3, [pc, #60]	@ (24000a64 <flash_unlock+0x50>)
24000a28:	4a0f      	ldr	r2, [pc, #60]	@ (24000a68 <flash_unlock+0x54>)
24000a2a:	601a      	str	r2, [r3, #0]
    MG_REG(FLASH_BASE1 + FLASH_KEYR) = 0xcdef89ab;
24000a2c:	4b0d      	ldr	r3, [pc, #52]	@ (24000a64 <flash_unlock+0x50>)
24000a2e:	4a0f      	ldr	r2, [pc, #60]	@ (24000a6c <flash_unlock+0x58>)
24000a30:	601a      	str	r2, [r3, #0]
    if (is_dualbank()) {
24000a32:	f7ff ffdd 	bl	240009f0 <is_dualbank>
24000a36:	4603      	mov	r3, r0
24000a38:	2b00      	cmp	r3, #0
24000a3a:	d005      	beq.n	24000a48 <flash_unlock+0x34>
      MG_REG(FLASH_BASE2 + FLASH_KEYR) = 0x45670123;
24000a3c:	4b0c      	ldr	r3, [pc, #48]	@ (24000a70 <flash_unlock+0x5c>)
24000a3e:	4a0a      	ldr	r2, [pc, #40]	@ (24000a68 <flash_unlock+0x54>)
24000a40:	601a      	str	r2, [r3, #0]
      MG_REG(FLASH_BASE2 + FLASH_KEYR) = 0xcdef89ab;
24000a42:	4b0b      	ldr	r3, [pc, #44]	@ (24000a70 <flash_unlock+0x5c>)
24000a44:	4a09      	ldr	r2, [pc, #36]	@ (24000a6c <flash_unlock+0x58>)
24000a46:	601a      	str	r2, [r3, #0]
    MG_REG(FLASH_BASE1 + FLASH_OPTKEYR) = 0x08192a3b;  // opt reg is "shared"
24000a48:	4b0a      	ldr	r3, [pc, #40]	@ (24000a74 <flash_unlock+0x60>)
24000a4a:	4a0b      	ldr	r2, [pc, #44]	@ (24000a78 <flash_unlock+0x64>)
24000a4c:	601a      	str	r2, [r3, #0]
    MG_REG(FLASH_BASE1 + FLASH_OPTKEYR) = 0x4c5d6e7f;  // thus unlock once
24000a4e:	4b09      	ldr	r3, [pc, #36]	@ (24000a74 <flash_unlock+0x60>)
24000a50:	4a0a      	ldr	r2, [pc, #40]	@ (24000a7c <flash_unlock+0x68>)
24000a52:	601a      	str	r2, [r3, #0]
    unlocked = true;
24000a54:	4b02      	ldr	r3, [pc, #8]	@ (24000a60 <flash_unlock+0x4c>)
24000a56:	2201      	movs	r2, #1
24000a58:	701a      	strb	r2, [r3, #0]
}
24000a5a:	bf00      	nop
24000a5c:	bd80      	pop	{r7, pc}
24000a5e:	bf00      	nop
24000a60:	240054e0 	.word	0x240054e0
24000a64:	52002004 	.word	0x52002004
24000a68:	45670123 	.word	0x45670123
24000a6c:	cdef89ab 	.word	0xcdef89ab
24000a70:	52002104 	.word	0x52002104
24000a74:	52002008 	.word	0x52002008
24000a78:	08192a3b 	.word	0x08192a3b
24000a7c:	4c5d6e7f 	.word	0x4c5d6e7f

24000a80 <flash_page_start>:
MG_IRAM static bool flash_page_start(volatile uint32_t *dst) {
24000a80:	b480      	push	{r7}
24000a82:	b087      	sub	sp, #28
24000a84:	af00      	add	r7, sp, #0
24000a86:	6078      	str	r0, [r7, #4]
  char *base = (char *) s_mg_flash_stm32h7.start,
24000a88:	4b15      	ldr	r3, [pc, #84]	@ (24000ae0 <flash_page_start+0x60>)
24000a8a:	681b      	ldr	r3, [r3, #0]
24000a8c:	617b      	str	r3, [r7, #20]
       *end = base + s_mg_flash_stm32h7.size;
24000a8e:	4b14      	ldr	r3, [pc, #80]	@ (24000ae0 <flash_page_start+0x60>)
24000a90:	685b      	ldr	r3, [r3, #4]
24000a92:	697a      	ldr	r2, [r7, #20]
24000a94:	4413      	add	r3, r2
24000a96:	613b      	str	r3, [r7, #16]
  volatile char *p = (char *) dst;
24000a98:	687b      	ldr	r3, [r7, #4]
24000a9a:	60fb      	str	r3, [r7, #12]
  return p >= base && p < end && ((p - base) % s_mg_flash_stm32h7.secsz) == 0;
24000a9c:	68fa      	ldr	r2, [r7, #12]
24000a9e:	697b      	ldr	r3, [r7, #20]
24000aa0:	429a      	cmp	r2, r3
24000aa2:	d312      	bcc.n	24000aca <flash_page_start+0x4a>
24000aa4:	68fa      	ldr	r2, [r7, #12]
24000aa6:	693b      	ldr	r3, [r7, #16]
24000aa8:	429a      	cmp	r2, r3
24000aaa:	d20e      	bcs.n	24000aca <flash_page_start+0x4a>
24000aac:	68fa      	ldr	r2, [r7, #12]
24000aae:	697b      	ldr	r3, [r7, #20]
24000ab0:	1ad3      	subs	r3, r2, r3
24000ab2:	461a      	mov	r2, r3
24000ab4:	4b0a      	ldr	r3, [pc, #40]	@ (24000ae0 <flash_page_start+0x60>)
24000ab6:	689b      	ldr	r3, [r3, #8]
24000ab8:	fbb2 f1f3 	udiv	r1, r2, r3
24000abc:	fb01 f303 	mul.w	r3, r1, r3
24000ac0:	1ad3      	subs	r3, r2, r3
24000ac2:	2b00      	cmp	r3, #0
24000ac4:	d101      	bne.n	24000aca <flash_page_start+0x4a>
24000ac6:	2301      	movs	r3, #1
24000ac8:	e000      	b.n	24000acc <flash_page_start+0x4c>
24000aca:	2300      	movs	r3, #0
24000acc:	f003 0301 	and.w	r3, r3, #1
24000ad0:	b2db      	uxtb	r3, r3
}
24000ad2:	4618      	mov	r0, r3
24000ad4:	371c      	adds	r7, #28
24000ad6:	46bd      	mov	sp, r7
24000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
24000adc:	4770      	bx	lr
24000ade:	bf00      	nop
24000ae0:	24000268 	.word	0x24000268

24000ae4 <flash_is_err>:
MG_IRAM static bool flash_is_err(uint32_t bank) {
24000ae4:	b480      	push	{r7}
24000ae6:	b083      	sub	sp, #12
24000ae8:	af00      	add	r7, sp, #0
24000aea:	6078      	str	r0, [r7, #4]
  return MG_REG(bank + FLASH_SR) & ((MG_BIT(11) - 1) << 17);  // RM0433 4.9.5
24000aec:	687b      	ldr	r3, [r7, #4]
24000aee:	3310      	adds	r3, #16
24000af0:	681a      	ldr	r2, [r3, #0]
24000af2:	4b06      	ldr	r3, [pc, #24]	@ (24000b0c <flash_is_err+0x28>)
24000af4:	4013      	ands	r3, r2
24000af6:	2b00      	cmp	r3, #0
24000af8:	bf14      	ite	ne
24000afa:	2301      	movne	r3, #1
24000afc:	2300      	moveq	r3, #0
24000afe:	b2db      	uxtb	r3, r3
}
24000b00:	4618      	mov	r0, r3
24000b02:	370c      	adds	r7, #12
24000b04:	46bd      	mov	sp, r7
24000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
24000b0a:	4770      	bx	lr
24000b0c:	0ffe0000 	.word	0x0ffe0000

24000b10 <flash_wait>:
MG_IRAM static void flash_wait(uint32_t bank) {
24000b10:	b480      	push	{r7}
24000b12:	b083      	sub	sp, #12
24000b14:	af00      	add	r7, sp, #0
24000b16:	6078      	str	r0, [r7, #4]
  while (MG_REG(bank + FLASH_SR) & (MG_BIT(0) | MG_BIT(2))) (void) 0;
24000b18:	bf00      	nop
24000b1a:	687b      	ldr	r3, [r7, #4]
24000b1c:	3310      	adds	r3, #16
24000b1e:	681b      	ldr	r3, [r3, #0]
24000b20:	f003 0305 	and.w	r3, r3, #5
24000b24:	2b00      	cmp	r3, #0
24000b26:	d1f8      	bne.n	24000b1a <flash_wait+0xa>
}
24000b28:	bf00      	nop
24000b2a:	bf00      	nop
24000b2c:	370c      	adds	r7, #12
24000b2e:	46bd      	mov	sp, r7
24000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
24000b34:	4770      	bx	lr

24000b36 <flash_clear_err>:
MG_IRAM static void flash_clear_err(uint32_t bank) {
24000b36:	b580      	push	{r7, lr}
24000b38:	b082      	sub	sp, #8
24000b3a:	af00      	add	r7, sp, #0
24000b3c:	6078      	str	r0, [r7, #4]
  flash_wait(bank);                                      // Wait until ready
24000b3e:	6878      	ldr	r0, [r7, #4]
24000b40:	f7ff ffe6 	bl	24000b10 <flash_wait>
  MG_REG(bank + FLASH_CCR) = ((MG_BIT(11) - 1) << 16U);  // Clear all errors
24000b44:	687b      	ldr	r3, [r7, #4]
24000b46:	3314      	adds	r3, #20
24000b48:	461a      	mov	r2, r3
24000b4a:	4b03      	ldr	r3, [pc, #12]	@ (24000b58 <flash_clear_err+0x22>)
24000b4c:	6013      	str	r3, [r2, #0]
}
24000b4e:	bf00      	nop
24000b50:	3708      	adds	r7, #8
24000b52:	46bd      	mov	sp, r7
24000b54:	bd80      	pop	{r7, pc}
24000b56:	bf00      	nop
24000b58:	07ff0000 	.word	0x07ff0000

24000b5c <flash_bank_is_swapped>:
MG_IRAM static bool flash_bank_is_swapped(uint32_t bank) {
24000b5c:	b480      	push	{r7}
24000b5e:	b083      	sub	sp, #12
24000b60:	af00      	add	r7, sp, #0
24000b62:	6078      	str	r0, [r7, #4]
  return MG_REG(bank + FLASH_OPTCR) & MG_BIT(31);  // RM0433 4.9.7
24000b64:	687b      	ldr	r3, [r7, #4]
24000b66:	3318      	adds	r3, #24
24000b68:	681b      	ldr	r3, [r3, #0]
24000b6a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
24000b6e:	2b00      	cmp	r3, #0
24000b70:	bf14      	ite	ne
24000b72:	2301      	movne	r3, #1
24000b74:	2300      	moveq	r3, #0
24000b76:	b2db      	uxtb	r3, r3
}
24000b78:	4618      	mov	r0, r3
24000b7a:	370c      	adds	r7, #12
24000b7c:	46bd      	mov	sp, r7
24000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
24000b82:	4770      	bx	lr

24000b84 <flash_bank>:
MG_IRAM static uint32_t flash_bank(void *addr) {
24000b84:	b580      	push	{r7, lr}
24000b86:	b084      	sub	sp, #16
24000b88:	af00      	add	r7, sp, #0
24000b8a:	6078      	str	r0, [r7, #4]
  size_t ofs = (char *) addr - (char *) s_mg_flash_stm32h7.start;
24000b8c:	4b0d      	ldr	r3, [pc, #52]	@ (24000bc4 <flash_bank+0x40>)
24000b8e:	681b      	ldr	r3, [r3, #0]
24000b90:	687a      	ldr	r2, [r7, #4]
24000b92:	1ad3      	subs	r3, r2, r3
24000b94:	60fb      	str	r3, [r7, #12]
  if (!is_dualbank()) return FLASH_BASE1;
24000b96:	f7ff ff2b 	bl	240009f0 <is_dualbank>
24000b9a:	4603      	mov	r3, r0
24000b9c:	f083 0301 	eor.w	r3, r3, #1
24000ba0:	b2db      	uxtb	r3, r3
24000ba2:	2b00      	cmp	r3, #0
24000ba4:	d001      	beq.n	24000baa <flash_bank+0x26>
24000ba6:	4b08      	ldr	r3, [pc, #32]	@ (24000bc8 <flash_bank+0x44>)
24000ba8:	e008      	b.n	24000bbc <flash_bank+0x38>
  return ofs < s_mg_flash_stm32h7.size / 2 ? FLASH_BASE1 : FLASH_BASE2;
24000baa:	4b06      	ldr	r3, [pc, #24]	@ (24000bc4 <flash_bank+0x40>)
24000bac:	685b      	ldr	r3, [r3, #4]
24000bae:	085b      	lsrs	r3, r3, #1
24000bb0:	68fa      	ldr	r2, [r7, #12]
24000bb2:	429a      	cmp	r2, r3
24000bb4:	d201      	bcs.n	24000bba <flash_bank+0x36>
24000bb6:	4b04      	ldr	r3, [pc, #16]	@ (24000bc8 <flash_bank+0x44>)
24000bb8:	e000      	b.n	24000bbc <flash_bank+0x38>
24000bba:	4b04      	ldr	r3, [pc, #16]	@ (24000bcc <flash_bank+0x48>)
}
24000bbc:	4618      	mov	r0, r3
24000bbe:	3710      	adds	r7, #16
24000bc0:	46bd      	mov	sp, r7
24000bc2:	bd80      	pop	{r7, pc}
24000bc4:	24000268 	.word	0x24000268
24000bc8:	52002000 	.word	0x52002000
24000bcc:	52002100 	.word	0x52002100

24000bd0 <mg_stm32h7_erase>:
MG_IRAM static bool mg_stm32h7_erase(void *addr) {
24000bd0:	b580      	push	{r7, lr}
24000bd2:	b08a      	sub	sp, #40	@ 0x28
24000bd4:	af02      	add	r7, sp, #8
24000bd6:	6078      	str	r0, [r7, #4]
  bool ok = false;
24000bd8:	2300      	movs	r3, #0
24000bda:	77fb      	strb	r3, [r7, #31]
  if (flash_page_start(addr) == false) {
24000bdc:	6878      	ldr	r0, [r7, #4]
24000bde:	f7ff ff4f 	bl	24000a80 <flash_page_start>
24000be2:	4603      	mov	r3, r0
24000be4:	f083 0301 	eor.w	r3, r3, #1
24000be8:	b2db      	uxtb	r3, r3
24000bea:	2b00      	cmp	r3, #0
24000bec:	d00f      	beq.n	24000c0e <mg_stm32h7_erase+0x3e>
    MG_ERROR(("%p is not on a sector boundary", addr));
24000bee:	4b44      	ldr	r3, [pc, #272]	@ (24000d00 <mg_stm32h7_erase+0x130>)
24000bf0:	681b      	ldr	r3, [r3, #0]
24000bf2:	2b00      	cmp	r3, #0
24000bf4:	dd7e      	ble.n	24000cf4 <mg_stm32h7_erase+0x124>
24000bf6:	4b43      	ldr	r3, [pc, #268]	@ (24000d04 <mg_stm32h7_erase+0x134>)
24000bf8:	f641 5228 	movw	r2, #7464	@ 0x1d28
24000bfc:	4942      	ldr	r1, [pc, #264]	@ (24000d08 <mg_stm32h7_erase+0x138>)
24000bfe:	2001      	movs	r0, #1
24000c00:	f000 f9b6 	bl	24000f70 <__mg_log_prefix_veneer>
24000c04:	6879      	ldr	r1, [r7, #4]
24000c06:	4841      	ldr	r0, [pc, #260]	@ (24000d0c <mg_stm32h7_erase+0x13c>)
24000c08:	f000 f9ae 	bl	24000f68 <__mg_log_veneer>
24000c0c:	e072      	b.n	24000cf4 <mg_stm32h7_erase+0x124>
    uintptr_t diff = (char *) addr - (char *) s_mg_flash_stm32h7.start;
24000c0e:	4b40      	ldr	r3, [pc, #256]	@ (24000d10 <mg_stm32h7_erase+0x140>)
24000c10:	681b      	ldr	r3, [r3, #0]
24000c12:	687a      	ldr	r2, [r7, #4]
24000c14:	1ad3      	subs	r3, r2, r3
24000c16:	617b      	str	r3, [r7, #20]
    uint32_t sector = diff / s_mg_flash_stm32h7.secsz;
24000c18:	4b3d      	ldr	r3, [pc, #244]	@ (24000d10 <mg_stm32h7_erase+0x140>)
24000c1a:	689b      	ldr	r3, [r3, #8]
24000c1c:	697a      	ldr	r2, [r7, #20]
24000c1e:	fbb2 f3f3 	udiv	r3, r2, r3
24000c22:	61bb      	str	r3, [r7, #24]
    uint32_t bank = flash_bank(addr);
24000c24:	6878      	ldr	r0, [r7, #4]
24000c26:	f7ff ffad 	bl	24000b84 <flash_bank>
24000c2a:	6138      	str	r0, [r7, #16]
    uint32_t saved_cr = MG_REG(bank + FLASH_CR);  // Save CR value
24000c2c:	693b      	ldr	r3, [r7, #16]
24000c2e:	330c      	adds	r3, #12
24000c30:	681b      	ldr	r3, [r3, #0]
24000c32:	60fb      	str	r3, [r7, #12]
    flash_unlock();
24000c34:	f7ff feee 	bl	24000a14 <flash_unlock>
    if (sector > 7) sector -= 8;
24000c38:	69bb      	ldr	r3, [r7, #24]
24000c3a:	2b07      	cmp	r3, #7
24000c3c:	d902      	bls.n	24000c44 <mg_stm32h7_erase+0x74>
24000c3e:	69bb      	ldr	r3, [r7, #24]
24000c40:	3b08      	subs	r3, #8
24000c42:	61bb      	str	r3, [r7, #24]
    flash_clear_err(bank);
24000c44:	6938      	ldr	r0, [r7, #16]
24000c46:	f7ff ff76 	bl	24000b36 <flash_clear_err>
    MG_REG(bank + FLASH_CR) = MG_BIT(5);             // 32-bit write parallelism
24000c4a:	693b      	ldr	r3, [r7, #16]
24000c4c:	330c      	adds	r3, #12
24000c4e:	461a      	mov	r2, r3
24000c50:	2320      	movs	r3, #32
24000c52:	6013      	str	r3, [r2, #0]
    MG_REG(bank + FLASH_CR) |= (sector & 7U) << 8U;  // Sector to erase
24000c54:	693b      	ldr	r3, [r7, #16]
24000c56:	330c      	adds	r3, #12
24000c58:	681a      	ldr	r2, [r3, #0]
24000c5a:	69bb      	ldr	r3, [r7, #24]
24000c5c:	021b      	lsls	r3, r3, #8
24000c5e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
24000c62:	6939      	ldr	r1, [r7, #16]
24000c64:	310c      	adds	r1, #12
24000c66:	4313      	orrs	r3, r2
24000c68:	600b      	str	r3, [r1, #0]
    MG_REG(bank + FLASH_CR) |= MG_BIT(2);            // Sector erase bit
24000c6a:	693b      	ldr	r3, [r7, #16]
24000c6c:	330c      	adds	r3, #12
24000c6e:	681b      	ldr	r3, [r3, #0]
24000c70:	693a      	ldr	r2, [r7, #16]
24000c72:	320c      	adds	r2, #12
24000c74:	f043 0304 	orr.w	r3, r3, #4
24000c78:	6013      	str	r3, [r2, #0]
    MG_REG(bank + FLASH_CR) |= MG_BIT(7);            // Start erasing
24000c7a:	693b      	ldr	r3, [r7, #16]
24000c7c:	330c      	adds	r3, #12
24000c7e:	681b      	ldr	r3, [r3, #0]
24000c80:	693a      	ldr	r2, [r7, #16]
24000c82:	320c      	adds	r2, #12
24000c84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
24000c88:	6013      	str	r3, [r2, #0]
    ok = !flash_is_err(bank);
24000c8a:	6938      	ldr	r0, [r7, #16]
24000c8c:	f7ff ff2a 	bl	24000ae4 <flash_is_err>
24000c90:	4603      	mov	r3, r0
24000c92:	2b00      	cmp	r3, #0
24000c94:	bf14      	ite	ne
24000c96:	2301      	movne	r3, #1
24000c98:	2300      	moveq	r3, #0
24000c9a:	b2db      	uxtb	r3, r3
24000c9c:	f083 0301 	eor.w	r3, r3, #1
24000ca0:	b2db      	uxtb	r3, r3
24000ca2:	77fb      	strb	r3, [r7, #31]
24000ca4:	7ffb      	ldrb	r3, [r7, #31]
24000ca6:	f003 0301 	and.w	r3, r3, #1
24000caa:	77fb      	strb	r3, [r7, #31]
    MG_DEBUG(("Erase sector %lu @ %p %s. CR %#lx SR %#lx", sector, addr,
24000cac:	4b14      	ldr	r3, [pc, #80]	@ (24000d00 <mg_stm32h7_erase+0x130>)
24000cae:	681b      	ldr	r3, [r3, #0]
24000cb0:	2b02      	cmp	r3, #2
24000cb2:	dd1a      	ble.n	24000cea <mg_stm32h7_erase+0x11a>
24000cb4:	4b13      	ldr	r3, [pc, #76]	@ (24000d04 <mg_stm32h7_erase+0x134>)
24000cb6:	f641 5238 	movw	r2, #7480	@ 0x1d38
24000cba:	4913      	ldr	r1, [pc, #76]	@ (24000d08 <mg_stm32h7_erase+0x138>)
24000cbc:	2003      	movs	r0, #3
24000cbe:	f000 f957 	bl	24000f70 <__mg_log_prefix_veneer>
24000cc2:	7ffb      	ldrb	r3, [r7, #31]
24000cc4:	2b00      	cmp	r3, #0
24000cc6:	d001      	beq.n	24000ccc <mg_stm32h7_erase+0xfc>
24000cc8:	4912      	ldr	r1, [pc, #72]	@ (24000d14 <mg_stm32h7_erase+0x144>)
24000cca:	e000      	b.n	24000cce <mg_stm32h7_erase+0xfe>
24000ccc:	4912      	ldr	r1, [pc, #72]	@ (24000d18 <mg_stm32h7_erase+0x148>)
24000cce:	693b      	ldr	r3, [r7, #16]
24000cd0:	330c      	adds	r3, #12
24000cd2:	681b      	ldr	r3, [r3, #0]
24000cd4:	693a      	ldr	r2, [r7, #16]
24000cd6:	3210      	adds	r2, #16
24000cd8:	6812      	ldr	r2, [r2, #0]
24000cda:	9201      	str	r2, [sp, #4]
24000cdc:	9300      	str	r3, [sp, #0]
24000cde:	460b      	mov	r3, r1
24000ce0:	687a      	ldr	r2, [r7, #4]
24000ce2:	69b9      	ldr	r1, [r7, #24]
24000ce4:	480d      	ldr	r0, [pc, #52]	@ (24000d1c <mg_stm32h7_erase+0x14c>)
24000ce6:	f000 f93f 	bl	24000f68 <__mg_log_veneer>
    MG_REG(bank + FLASH_CR) = saved_cr;  // Restore CR
24000cea:	693b      	ldr	r3, [r7, #16]
24000cec:	330c      	adds	r3, #12
24000cee:	461a      	mov	r2, r3
24000cf0:	68fb      	ldr	r3, [r7, #12]
24000cf2:	6013      	str	r3, [r2, #0]
  return ok;
24000cf4:	7ffb      	ldrb	r3, [r7, #31]
}
24000cf6:	4618      	mov	r0, r3
24000cf8:	3720      	adds	r7, #32
24000cfa:	46bd      	mov	sp, r7
24000cfc:	bd80      	pop	{r7, pc}
24000cfe:	bf00      	nop
24000d00:	24000258 	.word	0x24000258
24000d04:	0802d9bc 	.word	0x0802d9bc
24000d08:	08029c3c 	.word	0x08029c3c
24000d0c:	0802b27c 	.word	0x0802b27c
24000d10:	24000268 	.word	0x24000268
24000d14:	08029ebc 	.word	0x08029ebc
24000d18:	08029ec0 	.word	0x08029ec0
24000d1c:	0802b29c 	.word	0x0802b29c

24000d20 <mg_stm32h7_swap>:
MG_IRAM static bool mg_stm32h7_swap(void) {
24000d20:	b580      	push	{r7, lr}
24000d22:	b082      	sub	sp, #8
24000d24:	af00      	add	r7, sp, #0
  if (!is_dualbank()) return true;
24000d26:	f7ff fe63 	bl	240009f0 <is_dualbank>
24000d2a:	4603      	mov	r3, r0
24000d2c:	f083 0301 	eor.w	r3, r3, #1
24000d30:	b2db      	uxtb	r3, r3
24000d32:	2b00      	cmp	r3, #0
24000d34:	d001      	beq.n	24000d3a <mg_stm32h7_swap+0x1a>
24000d36:	2301      	movs	r3, #1
24000d38:	e02e      	b.n	24000d98 <mg_stm32h7_swap+0x78>
  uint32_t bank = FLASH_BASE1;
24000d3a:	4b19      	ldr	r3, [pc, #100]	@ (24000da0 <mg_stm32h7_swap+0x80>)
24000d3c:	607b      	str	r3, [r7, #4]
  uint32_t desired = flash_bank_is_swapped(bank) ? 0 : MG_BIT(31);
24000d3e:	6878      	ldr	r0, [r7, #4]
24000d40:	f7ff ff0c 	bl	24000b5c <flash_bank_is_swapped>
24000d44:	4603      	mov	r3, r0
24000d46:	2b00      	cmp	r3, #0
24000d48:	d001      	beq.n	24000d4e <mg_stm32h7_swap+0x2e>
24000d4a:	2300      	movs	r3, #0
24000d4c:	e001      	b.n	24000d52 <mg_stm32h7_swap+0x32>
24000d4e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
24000d52:	603b      	str	r3, [r7, #0]
  flash_unlock();
24000d54:	f7ff fe5e 	bl	24000a14 <flash_unlock>
  flash_clear_err(bank);
24000d58:	6878      	ldr	r0, [r7, #4]
24000d5a:	f7ff feec 	bl	24000b36 <flash_clear_err>
  MG_SET_BITS(MG_REG(bank + FLASH_OPTSR_PRG), MG_BIT(31), desired);
24000d5e:	687b      	ldr	r3, [r7, #4]
24000d60:	3320      	adds	r3, #32
24000d62:	681b      	ldr	r3, [r3, #0]
24000d64:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
24000d68:	687b      	ldr	r3, [r7, #4]
24000d6a:	3320      	adds	r3, #32
24000d6c:	4619      	mov	r1, r3
24000d6e:	683b      	ldr	r3, [r7, #0]
24000d70:	4313      	orrs	r3, r2
24000d72:	600b      	str	r3, [r1, #0]
  MG_REG(bank + FLASH_OPTCR) |= MG_BIT(1);  // OPTSTART
24000d74:	687b      	ldr	r3, [r7, #4]
24000d76:	3318      	adds	r3, #24
24000d78:	681b      	ldr	r3, [r3, #0]
24000d7a:	687a      	ldr	r2, [r7, #4]
24000d7c:	3218      	adds	r2, #24
24000d7e:	f043 0302 	orr.w	r3, r3, #2
24000d82:	6013      	str	r3, [r2, #0]
  while ((MG_REG(bank + FLASH_OPTSR_CUR) & MG_BIT(31)) != desired) (void) 0;
24000d84:	bf00      	nop
24000d86:	687b      	ldr	r3, [r7, #4]
24000d88:	331c      	adds	r3, #28
24000d8a:	681b      	ldr	r3, [r3, #0]
24000d8c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
24000d90:	683a      	ldr	r2, [r7, #0]
24000d92:	429a      	cmp	r2, r3
24000d94:	d1f7      	bne.n	24000d86 <mg_stm32h7_swap+0x66>
  return true;
24000d96:	2301      	movs	r3, #1
}
24000d98:	4618      	mov	r0, r3
24000d9a:	3708      	adds	r7, #8
24000d9c:	46bd      	mov	sp, r7
24000d9e:	bd80      	pop	{r7, pc}
24000da0:	52002000 	.word	0x52002000

24000da4 <mg_stm32h7_write>:
MG_IRAM static bool mg_stm32h7_write(void *addr, const void *buf, size_t len) {
24000da4:	b580      	push	{r7, lr}
24000da6:	b08c      	sub	sp, #48	@ 0x30
24000da8:	af02      	add	r7, sp, #8
24000daa:	60f8      	str	r0, [r7, #12]
24000dac:	60b9      	str	r1, [r7, #8]
24000dae:	607a      	str	r2, [r7, #4]
  if ((len % s_mg_flash_stm32h7.align) != 0) {
24000db0:	4b4f      	ldr	r3, [pc, #316]	@ (24000ef0 <mg_stm32h7_write+0x14c>)
24000db2:	68da      	ldr	r2, [r3, #12]
24000db4:	687b      	ldr	r3, [r7, #4]
24000db6:	fbb3 f1f2 	udiv	r1, r3, r2
24000dba:	fb01 f202 	mul.w	r2, r1, r2
24000dbe:	1a9b      	subs	r3, r3, r2
24000dc0:	2b00      	cmp	r3, #0
24000dc2:	d013      	beq.n	24000dec <mg_stm32h7_write+0x48>
    MG_ERROR(("%lu is not aligned to %lu", len, s_mg_flash_stm32h7.align));
24000dc4:	4b4b      	ldr	r3, [pc, #300]	@ (24000ef4 <mg_stm32h7_write+0x150>)
24000dc6:	681b      	ldr	r3, [r3, #0]
24000dc8:	2b00      	cmp	r3, #0
24000dca:	dd0d      	ble.n	24000de8 <mg_stm32h7_write+0x44>
24000dcc:	4b4a      	ldr	r3, [pc, #296]	@ (24000ef8 <mg_stm32h7_write+0x154>)
24000dce:	f641 5252 	movw	r2, #7506	@ 0x1d52
24000dd2:	494a      	ldr	r1, [pc, #296]	@ (24000efc <mg_stm32h7_write+0x158>)
24000dd4:	2001      	movs	r0, #1
24000dd6:	f000 f8cb 	bl	24000f70 <__mg_log_prefix_veneer>
24000dda:	4b45      	ldr	r3, [pc, #276]	@ (24000ef0 <mg_stm32h7_write+0x14c>)
24000ddc:	68db      	ldr	r3, [r3, #12]
24000dde:	461a      	mov	r2, r3
24000de0:	6879      	ldr	r1, [r7, #4]
24000de2:	4847      	ldr	r0, [pc, #284]	@ (24000f00 <mg_stm32h7_write+0x15c>)
24000de4:	f000 f8c0 	bl	24000f68 <__mg_log_veneer>
    return false;
24000de8:	2300      	movs	r3, #0
24000dea:	e07d      	b.n	24000ee8 <mg_stm32h7_write+0x144>
  uint32_t bank = flash_bank(addr);
24000dec:	68f8      	ldr	r0, [r7, #12]
24000dee:	f7ff fec9 	bl	24000b84 <flash_bank>
24000df2:	61b8      	str	r0, [r7, #24]
  uint32_t *dst = (uint32_t *) addr;
24000df4:	68fb      	ldr	r3, [r7, #12]
24000df6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t *src = (uint32_t *) buf;
24000df8:	68bb      	ldr	r3, [r7, #8]
24000dfa:	623b      	str	r3, [r7, #32]
  uint32_t *end = (uint32_t *) ((char *) buf + len);
24000dfc:	68ba      	ldr	r2, [r7, #8]
24000dfe:	687b      	ldr	r3, [r7, #4]
24000e00:	4413      	add	r3, r2
24000e02:	617b      	str	r3, [r7, #20]
  bool ok = true;
24000e04:	2301      	movs	r3, #1
24000e06:	77fb      	strb	r3, [r7, #31]
  MG_ARM_DISABLE_IRQ();
24000e08:	b672      	cpsid	i
  flash_unlock();
24000e0a:	f7ff fe03 	bl	24000a14 <flash_unlock>
  flash_clear_err(bank);
24000e0e:	69b8      	ldr	r0, [r7, #24]
24000e10:	f7ff fe91 	bl	24000b36 <flash_clear_err>
  MG_REG(bank + FLASH_CR) = MG_BIT(1);   // Set programming flag
24000e14:	69bb      	ldr	r3, [r7, #24]
24000e16:	330c      	adds	r3, #12
24000e18:	461a      	mov	r2, r3
24000e1a:	2302      	movs	r3, #2
24000e1c:	6013      	str	r3, [r2, #0]
  MG_REG(bank + FLASH_CR) |= MG_BIT(5);  // 32-bit write parallelism
24000e1e:	69bb      	ldr	r3, [r7, #24]
24000e20:	330c      	adds	r3, #12
24000e22:	681b      	ldr	r3, [r3, #0]
24000e24:	69ba      	ldr	r2, [r7, #24]
24000e26:	320c      	adds	r2, #12
24000e28:	f043 0320 	orr.w	r3, r3, #32
24000e2c:	6013      	str	r3, [r2, #0]
  while (ok && src < end) {
24000e2e:	e024      	b.n	24000e7a <mg_stm32h7_write+0xd6>
    if (flash_page_start(dst) && mg_stm32h7_erase(dst) == false) {
24000e30:	6a78      	ldr	r0, [r7, #36]	@ 0x24
24000e32:	f7ff fe25 	bl	24000a80 <flash_page_start>
24000e36:	4603      	mov	r3, r0
24000e38:	2b00      	cmp	r3, #0
24000e3a:	d00b      	beq.n	24000e54 <mg_stm32h7_write+0xb0>
24000e3c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
24000e3e:	f7ff fec7 	bl	24000bd0 <mg_stm32h7_erase>
24000e42:	4603      	mov	r3, r0
24000e44:	f083 0301 	eor.w	r3, r3, #1
24000e48:	b2db      	uxtb	r3, r3
24000e4a:	2b00      	cmp	r3, #0
24000e4c:	d002      	beq.n	24000e54 <mg_stm32h7_write+0xb0>
      ok = false;
24000e4e:	2300      	movs	r3, #0
24000e50:	77fb      	strb	r3, [r7, #31]
      break;
24000e52:	e019      	b.n	24000e88 <mg_stm32h7_write+0xe4>
    *(volatile uint32_t *) dst++ = *src++;
24000e54:	6a3a      	ldr	r2, [r7, #32]
24000e56:	1d13      	adds	r3, r2, #4
24000e58:	623b      	str	r3, [r7, #32]
24000e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
24000e5c:	1d19      	adds	r1, r3, #4
24000e5e:	6279      	str	r1, [r7, #36]	@ 0x24
24000e60:	6812      	ldr	r2, [r2, #0]
24000e62:	601a      	str	r2, [r3, #0]
    flash_wait(bank);
24000e64:	69b8      	ldr	r0, [r7, #24]
24000e66:	f7ff fe53 	bl	24000b10 <flash_wait>
    if (flash_is_err(bank)) ok = false;
24000e6a:	69b8      	ldr	r0, [r7, #24]
24000e6c:	f7ff fe3a 	bl	24000ae4 <flash_is_err>
24000e70:	4603      	mov	r3, r0
24000e72:	2b00      	cmp	r3, #0
24000e74:	d001      	beq.n	24000e7a <mg_stm32h7_write+0xd6>
24000e76:	2300      	movs	r3, #0
24000e78:	77fb      	strb	r3, [r7, #31]
  while (ok && src < end) {
24000e7a:	7ffb      	ldrb	r3, [r7, #31]
24000e7c:	2b00      	cmp	r3, #0
24000e7e:	d003      	beq.n	24000e88 <mg_stm32h7_write+0xe4>
24000e80:	6a3a      	ldr	r2, [r7, #32]
24000e82:	697b      	ldr	r3, [r7, #20]
24000e84:	429a      	cmp	r2, r3
24000e86:	d3d3      	bcc.n	24000e30 <mg_stm32h7_write+0x8c>
  if (!s_flash_irq_disabled) MG_ARM_ENABLE_IRQ();
24000e88:	4b1e      	ldr	r3, [pc, #120]	@ (24000f04 <mg_stm32h7_write+0x160>)
24000e8a:	781b      	ldrb	r3, [r3, #0]
24000e8c:	f083 0301 	eor.w	r3, r3, #1
24000e90:	b2db      	uxtb	r3, r3
24000e92:	2b00      	cmp	r3, #0
24000e94:	d000      	beq.n	24000e98 <mg_stm32h7_write+0xf4>
24000e96:	b662      	cpsie	i
  MG_DEBUG(("Flash write %lu bytes @ %p: %s. CR %#lx SR %#lx", len, dst,
24000e98:	4b16      	ldr	r3, [pc, #88]	@ (24000ef4 <mg_stm32h7_write+0x150>)
24000e9a:	681b      	ldr	r3, [r3, #0]
24000e9c:	2b02      	cmp	r3, #2
24000e9e:	dd1a      	ble.n	24000ed6 <mg_stm32h7_write+0x132>
24000ea0:	4b15      	ldr	r3, [pc, #84]	@ (24000ef8 <mg_stm32h7_write+0x154>)
24000ea2:	f641 5269 	movw	r2, #7529	@ 0x1d69
24000ea6:	4915      	ldr	r1, [pc, #84]	@ (24000efc <mg_stm32h7_write+0x158>)
24000ea8:	2003      	movs	r0, #3
24000eaa:	f000 f861 	bl	24000f70 <__mg_log_prefix_veneer>
24000eae:	7ffb      	ldrb	r3, [r7, #31]
24000eb0:	2b00      	cmp	r3, #0
24000eb2:	d001      	beq.n	24000eb8 <mg_stm32h7_write+0x114>
24000eb4:	4914      	ldr	r1, [pc, #80]	@ (24000f08 <mg_stm32h7_write+0x164>)
24000eb6:	e000      	b.n	24000eba <mg_stm32h7_write+0x116>
24000eb8:	4914      	ldr	r1, [pc, #80]	@ (24000f0c <mg_stm32h7_write+0x168>)
24000eba:	69bb      	ldr	r3, [r7, #24]
24000ebc:	330c      	adds	r3, #12
24000ebe:	681b      	ldr	r3, [r3, #0]
24000ec0:	69ba      	ldr	r2, [r7, #24]
24000ec2:	3210      	adds	r2, #16
24000ec4:	6812      	ldr	r2, [r2, #0]
24000ec6:	9201      	str	r2, [sp, #4]
24000ec8:	9300      	str	r3, [sp, #0]
24000eca:	460b      	mov	r3, r1
24000ecc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
24000ece:	6879      	ldr	r1, [r7, #4]
24000ed0:	480f      	ldr	r0, [pc, #60]	@ (24000f10 <mg_stm32h7_write+0x16c>)
24000ed2:	f000 f849 	bl	24000f68 <__mg_log_veneer>
  MG_REG(bank + FLASH_CR) &= ~MG_BIT(1);  // Clear programming flag
24000ed6:	69bb      	ldr	r3, [r7, #24]
24000ed8:	330c      	adds	r3, #12
24000eda:	681b      	ldr	r3, [r3, #0]
24000edc:	69ba      	ldr	r2, [r7, #24]
24000ede:	320c      	adds	r2, #12
24000ee0:	f023 0302 	bic.w	r3, r3, #2
24000ee4:	6013      	str	r3, [r2, #0]
  return ok;
24000ee6:	7ffb      	ldrb	r3, [r7, #31]
}
24000ee8:	4618      	mov	r0, r3
24000eea:	3728      	adds	r7, #40	@ 0x28
24000eec:	46bd      	mov	sp, r7
24000eee:	bd80      	pop	{r7, pc}
24000ef0:	24000268 	.word	0x24000268
24000ef4:	24000258 	.word	0x24000258
24000ef8:	0802d9d0 	.word	0x0802d9d0
24000efc:	08029c3c 	.word	0x08029c3c
24000f00:	0802b2c8 	.word	0x0802b2c8
24000f04:	24002364 	.word	0x24002364
24000f08:	08029ebc 	.word	0x08029ebc
24000f0c:	08029ec0 	.word	0x08029ec0
24000f10:	0802b2e4 	.word	0x0802b2e4

24000f14 <single_bank_swap>:
MG_IRAM static void single_bank_swap(char *p1, char *p2, size_t s, size_t ss) {
24000f14:	b580      	push	{r7, lr}
24000f16:	b086      	sub	sp, #24
24000f18:	af00      	add	r7, sp, #0
24000f1a:	60f8      	str	r0, [r7, #12]
24000f1c:	60b9      	str	r1, [r7, #8]
24000f1e:	607a      	str	r2, [r7, #4]
24000f20:	603b      	str	r3, [r7, #0]
  for (size_t ofs = 0; ofs < s; ofs += ss) {
24000f22:	2300      	movs	r3, #0
24000f24:	617b      	str	r3, [r7, #20]
24000f26:	e00d      	b.n	24000f44 <single_bank_swap+0x30>
    mg_stm32h7_write(p1 + ofs, p2 + ofs, ss);
24000f28:	68fa      	ldr	r2, [r7, #12]
24000f2a:	697b      	ldr	r3, [r7, #20]
24000f2c:	18d0      	adds	r0, r2, r3
24000f2e:	68ba      	ldr	r2, [r7, #8]
24000f30:	697b      	ldr	r3, [r7, #20]
24000f32:	4413      	add	r3, r2
24000f34:	683a      	ldr	r2, [r7, #0]
24000f36:	4619      	mov	r1, r3
24000f38:	f7ff ff34 	bl	24000da4 <mg_stm32h7_write>
  for (size_t ofs = 0; ofs < s; ofs += ss) {
24000f3c:	697a      	ldr	r2, [r7, #20]
24000f3e:	683b      	ldr	r3, [r7, #0]
24000f40:	4413      	add	r3, r2
24000f42:	617b      	str	r3, [r7, #20]
24000f44:	697a      	ldr	r2, [r7, #20]
24000f46:	687b      	ldr	r3, [r7, #4]
24000f48:	429a      	cmp	r2, r3
24000f4a:	d3ed      	bcc.n	24000f28 <single_bank_swap+0x14>
  *(volatile unsigned long *) 0xe000ed0c = 0x5fa0004;
24000f4c:	4b03      	ldr	r3, [pc, #12]	@ (24000f5c <single_bank_swap+0x48>)
24000f4e:	4a04      	ldr	r2, [pc, #16]	@ (24000f60 <single_bank_swap+0x4c>)
24000f50:	601a      	str	r2, [r3, #0]
}
24000f52:	bf00      	nop
24000f54:	3718      	adds	r7, #24
24000f56:	46bd      	mov	sp, r7
24000f58:	bd80      	pop	{r7, pc}
24000f5a:	bf00      	nop
24000f5c:	e000ed0c 	.word	0xe000ed0c
24000f60:	05fa0004 	.word	0x05fa0004
24000f64:	00000000 	.word	0x00000000

24000f68 <__mg_log_veneer>:
24000f68:	f85f f000 	ldr.w	pc, [pc]	@ 24000f6c <__mg_log_veneer+0x4>
24000f6c:	0800e945 	.word	0x0800e945

24000f70 <__mg_log_prefix_veneer>:
24000f70:	f85f f000 	ldr.w	pc, [pc]	@ 24000f74 <__mg_log_prefix_veneer+0x4>
24000f74:	0800e8a5 	.word	0x0800e8a5
